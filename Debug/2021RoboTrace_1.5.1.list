
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018964  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018b28  08018b28  00028b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801935c  0801935c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801935c  0801935c  0002935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019364  08019364  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019364  08019364  00029364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801936c  0801936c  0002936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019370  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c998  200001e0  0801954c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cb78  0801954c  0003cb78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b523  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c08  00000000  00000000  0006b72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002370  00000000  00000000  00073338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020a0  00000000  00000000  000756a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000266b0  00000000  00000000  000acbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111246  00000000  00000000  000d32ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e44f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a618  00000000  00000000  001e4570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018b0c 	.word	0x08018b0c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018b0c 	.word	0x08018b0c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fa92 	bl	800b500 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a670 	.word	0x2004a670

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fa7a 	bl	800b500 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a670 	.word	0x2004a670

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f903 	bl	800b22c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fe6a 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fe64 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fe5e 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe58 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe52 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe4c 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe46 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe40 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe3a 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe34 	bl	8009d00 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe28 	bl	8009d00 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe22 	bl	8009d00 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f8b9 	bl	80162a0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff4a 	bl	800f090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff46 	bl	800f090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff42 	bl	800f090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff3e 	bl	800f090 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a75c 	.word	0x2004a75c
 8001248:	2004a6c4 	.word	0x2004a6c4
 800124c:	2004a7e4 	.word	0x2004a7e4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a75c 	.word	0x2004a75c
 800137c:	2004a7e4 	.word	0x2004a7e4
 8001380:	2004a6c4 	.word	0x2004a6c4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a75c 	.word	0x2004a75c
 80013c4:	2004a6c4 	.word	0x2004a6c4
 80013c8:	2004a7e4 	.word	0x2004a7e4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <_ZN7Encoder4initEv+0x30>)
 8001438:	f00d fefa 	bl	800f230 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <_ZN7Encoder4initEv+0x34>)
 8001440:	f00d fef6 	bl	800f230 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_ZN7Encoder4initEv+0x38>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <_ZN7Encoder4initEv+0x3c>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2004a8c4 	.word	0x2004a8c4
 8001460:	2004a5a8 	.word	0x2004a5a8
 8001464:	40010000 	.word	0x40010000
 8001468:	40010400 	.word	0x40010400
 800146c:	00000000 	.word	0x00000000

08001470 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <_ZN7Encoder6updateEv+0x108>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <_ZN7Encoder6updateEv+0x114>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 80014a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f84e 	bl	8000578 <__aeabi_f2d>
 80014dc:	a324      	add	r3, pc, #144	; (adr r3, 8001570 <_ZN7Encoder6updateEv+0x100>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8a1 	bl	8000628 <__aeabi_dmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f6:	f7ff f9c1 	bl	800087c <__aeabi_ddiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	f7ff fb89 	bl	8000c18 <__aeabi_d2f>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a06 	vldr	s14, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 7a02 	vldr	s15, [r3, #8]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ed93 7a07 	vldr	s14, [r3, #28]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a02 	vldr	s15, [r3, #8]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a07 	vstr	s15, [r3, #28]
	goal_judge_distance_ += distance_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a08 	vldr	s14, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a02 	vldr	s15, [r3, #8]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edc3 7a08 	vstr	s15, [r3, #32]
	//monitor_distance = distance_10mm_;
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	ce73a049 	.word	0xce73a049
 8001574:	3f77a3f6 	.word	0x3f77a3f6
 8001578:	40010000 	.word	0x40010000
 800157c:	47000000 	.word	0x47000000
 8001580:	3f912547 	.word	0x3f912547
 8001584:	40010400 	.word	0x40010400

08001588 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_ZN7Encoder5clearEv+0x3c>)
 80015a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_ZN7Encoder5clearEv+0x40>)
 80015aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40010400 	.word	0x40010400

080015cc <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return distance_;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	ee07 3a90 	vmov	s15, r3
}
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	ee07 3a90 	vmov	s15, r3
}
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	619a      	str	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	ee07 3a90 	vmov	s15, r3
}
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f977 	bl	8001a1c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800172e:	f000 f98b 	bl	8001a48 <fopen_folder_and_file>

	return ret;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <user_fclose+0x1c>)
 8001748:	f012 facc 	bl	8013ce4 <f_close>

	return ret;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200494b4 	.word	0x200494b4

0800175c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b087      	sub	sp, #28
 8001760:	af02      	add	r7, sp, #8
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	4613      	mov	r3, r2
 800176a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001770:	2300      	movs	r3, #0
 8001772:	81fb      	strh	r3, [r7, #14]
 8001774:	e030      	b.n	80017d8 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fef8 	bl	8000578 <__aeabi_f2d>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	e9cd 3400 	strd	r3, r4, [sp]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <sd_write_float+0x94>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <sd_write_float+0x98>)
 8001796:	f013 fe35 	bl	8015404 <sniprintf>

		if(state == ADD_WRITE){
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <sd_write_float+0x9c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <sd_write_float+0x9c>)
 80017a8:	f012 fb10 	bl	8013dcc <f_lseek>
 80017ac:	e003      	b.n	80017b6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80017ae:	2100      	movs	r1, #0
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <sd_write_float+0x9c>)
 80017b2:	f012 fb0b 	bl	8013dcc <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <sd_write_float+0x98>)
 80017b8:	f7fe fd22 	bl	8000200 <strlen>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <sd_write_float+0xa0>)
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <sd_write_float+0x98>)
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <sd_write_float+0x9c>)
 80017c4:	f012 f879 	bl	80138ba <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c8:	f000 f958 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbc8      	blt.n	8001776 <sd_write_float+0x1a>
	}
	return ret;
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08018b28 	.word	0x08018b28
 80017f4:	20049424 	.word	0x20049424
 80017f8:	200494b4 	.word	0x200494b4
 80017fc:	200494a4 	.word	0x200494a4

08001800 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f900 	bl	8001a1c <create_path>

	if(state == OVER_WRITE){
 800181c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <sd_write_array_float+0xb0>)
 8001826:	f012 fa87 	bl	8013d38 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800182a:	4822      	ldr	r0, [pc, #136]	; (80018b4 <sd_write_array_float+0xb4>)
 800182c:	f012 fcf2 	bl	8014214 <f_unlink>
		f_chdir("..");
 8001830:	4821      	ldr	r0, [pc, #132]	; (80018b8 <sd_write_array_float+0xb8>)
 8001832:	f012 fa81 	bl	8013d38 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001836:	f000 f907 	bl	8001a48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	e028      	b.n	8001892 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	e9cd 3400 	strd	r3, r4, [sp]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <sd_write_array_float+0xbc>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <sd_write_array_float+0xc0>)
 8001860:	f013 fdd0 	bl	8015404 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <sd_write_array_float+0xc4>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4619      	mov	r1, r3
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <sd_write_array_float+0xc4>)
 800186c:	f012 faae 	bl	8013dcc <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <sd_write_array_float+0xc0>)
 8001872:	f7fe fcc5 	bl	8000200 <strlen>
 8001876:	4602      	mov	r2, r0
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <sd_write_array_float+0xc8>)
 800187a:	4911      	ldr	r1, [pc, #68]	; (80018c0 <sd_write_array_float+0xc0>)
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <sd_write_array_float+0xc4>)
 800187e:	f012 f81c 	bl	80138ba <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001882:	f000 f8fb 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	82fb      	strh	r3, [r7, #22]
 8001892:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbd0      	blt.n	8001840 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <sd_write_array_float+0xc4>)
 80018a0:	f012 fa20 	bl	8013ce4 <f_close>

	return ret;
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20049324 	.word	0x20049324
 80018b4:	200481e4 	.word	0x200481e4
 80018b8:	08018b44 	.word	0x08018b44
 80018bc:	08018b28 	.word	0x08018b28
 80018c0:	20049424 	.word	0x20049424
 80018c4:	200494b4 	.word	0x200494b4
 80018c8:	200494a4 	.word	0x200494a4

080018cc <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f898 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018ec:	f000 f8ac 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018f0:	e019      	b.n	8001926 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80018f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <sd_read_array_float+0x80>)
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <sd_read_array_float+0x84>)
 8001902:	f013 fdd3 	bl	80154ac <siscanf>
		i++;
 8001906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001912:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	db03      	blt.n	8001926 <sd_read_array_float+0x5a>
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	3b01      	subs	r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <sd_read_array_float+0x88>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4809      	ldr	r0, [pc, #36]	; (8001950 <sd_read_array_float+0x84>)
 800192c:	f012 fe50 	bl	80145d0 <f_gets>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1dd      	bne.n	80018f2 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001936:	f000 f8a1 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <sd_read_array_float+0x88>)
 800193c:	f012 f9d2 	bl	8013ce4 <f_close>

	return ret;
 8001940:	7d7b      	ldrb	r3, [r7, #21]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08018b34 	.word	0x08018b34
 8001950:	20049424 	.word	0x20049424
 8001954:	200494b4 	.word	0x200494b4

08001958 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f852 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001978:	f000 f866 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800197c:	e019      	b.n	80019b2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800197e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4913      	ldr	r1, [pc, #76]	; (80019d8 <sd_read_array_double+0x80>)
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <sd_read_array_double+0x84>)
 800198e:	f013 fd8d 	bl	80154ac <siscanf>
		i++;
 8001992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001996:	b29b      	uxth	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800199e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	db03      	blt.n	80019b2 <sd_read_array_double+0x5a>
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <sd_read_array_double+0x88>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <sd_read_array_double+0x84>)
 80019b8:	f012 fe0a 	bl	80145d0 <f_gets>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1dd      	bne.n	800197e <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019c2:	f000 f85b 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <sd_read_array_double+0x88>)
 80019c8:	f012 f98c 	bl	8013ce4 <f_close>

	return ret;
 80019cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08018b40 	.word	0x08018b40
 80019dc:	20049424 	.word	0x20049424
 80019e0:	200494b4 	.word	0x200494b4

080019e4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80019ee:	2201      	movs	r2, #1
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <sd_mount+0x30>)
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <sd_mount+0x34>)
 80019f4:	f011 fbee 	bl	80131d4 <f_mount>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <sd_mount+0x20>
 80019fe:	2301      	movs	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e001      	b.n	8001a08 <sd_mount+0x24>
	else ret = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08018b50 	.word	0x08018b50
 8001a18:	200482e4 	.word	0x200482e4

08001a1c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <create_path+0x24>)
 8001a2a:	f013 fd6b 	bl	8015504 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <create_path+0x28>)
 8001a32:	f013 fd67 	bl	8015504 <strcpy>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20049324 	.word	0x20049324
 8001a44:	200481e4 	.word	0x200481e4

08001a48 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a4e:	f012 fca3 	bl	8014398 <f_mkdir>

	f_chdir(dirpath);
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a54:	f012 f970 	bl	8013d38 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a58:	2213      	movs	r2, #19
 8001a5a:	4905      	ldr	r1, [pc, #20]	; (8001a70 <fopen_folder_and_file+0x28>)
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <fopen_folder_and_file+0x2c>)
 8001a5e:	f011 fbff 	bl	8013260 <f_open>

	f_chdir("..");
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <fopen_folder_and_file+0x30>)
 8001a64:	f012 f968 	bl	8013d38 <f_chdir>


}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20049324 	.word	0x20049324
 8001a70:	200481e4 	.word	0x200481e4
 8001a74:	200494b4 	.word	0x200494b4
 8001a78:	08018b44 	.word	0x08018b44

08001a7c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e007      	b.n	8001a98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <bufclear+0x30>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	ddf4      	ble.n	8001a88 <bufclear+0xc>
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20049424 	.word	0x20049424

08001ab0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <read_byte+0x54>)
 8001acc:	f009 fbae 	bl	800b22c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001ad0:	f107 010f 	add.w	r1, r7, #15
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <read_byte+0x58>)
 8001ada:	f00c fd6f 	bl	800e5bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001ade:	f107 010e 	add.w	r1, r7, #14
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <read_byte+0x58>)
 8001ae8:	f00c fe9c 	bl	800e824 <HAL_SPI_Receive>
	CS_SET;
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <read_byte+0x54>)
 8001af4:	f009 fb9a 	bl	800b22c <HAL_GPIO_WritePin>

	return val;
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020400 	.word	0x40020400
 8001b08:	2004a550 	.word	0x2004a550

08001b0c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <write_byte+0x54>)
 8001b2e:	f009 fb7d 	bl	800b22c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b32:	f107 010f 	add.w	r1, r7, #15
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	2201      	movs	r2, #1
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <write_byte+0x58>)
 8001b3c:	f00c fd3e 	bl	800e5bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b40:	1db9      	adds	r1, r7, #6
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	2201      	movs	r2, #1
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <write_byte+0x58>)
 8001b48:	f00c fd38 	bl	800e5bc <HAL_SPI_Transmit>
	CS_SET;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <write_byte+0x54>)
 8001b54:	f009 fb6a 	bl	800b22c <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020400 	.word	0x40020400
 8001b64:	2004a550 	.word	0x2004a550

08001b68 <IMU_init>:

uint16_t IMU_init() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff ff9c 	bl	8001ab0 <read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	2be0      	cmp	r3, #224	; 0xe0
 8001b80:	d119      	bne.n	8001bb6 <IMU_init+0x4e>
		ret = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b86:	2101      	movs	r1, #1
 8001b88:	2006      	movs	r0, #6
 8001b8a:	f7ff ffbf 	bl	8001b0c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b8e:	2110      	movs	r1, #16
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7ff ffbb 	bl	8001b0c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b96:	2120      	movs	r1, #32
 8001b98:	207f      	movs	r0, #127	; 0x7f
 8001b9a:	f7ff ffb7 	bl	8001b0c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b9e:	2106      	movs	r1, #6
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff ffb3 	bl	8001b0c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ba6:	2106      	movs	r1, #6
 8001ba8:	2014      	movs	r0, #20
 8001baa:	f7ff ffaf 	bl	8001b0c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	207f      	movs	r0, #127	; 0x7f
 8001bb2:	f7ff ffab 	bl	8001b0c <write_byte>
	}
	return ret;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <read_gyro_data>:

void read_gyro_data() {
 8001bc0:	b598      	push	{r3, r4, r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001bc4:	2033      	movs	r0, #51	; 0x33
 8001bc6:	f7ff ff73 	bl	8001ab0 <read_byte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	2034      	movs	r0, #52	; 0x34
 8001bd2:	f7ff ff6d 	bl	8001ab0 <read_byte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <read_gyro_data+0x64>)
 8001be0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001be2:	2035      	movs	r0, #53	; 0x35
 8001be4:	f7ff ff64 	bl	8001ab0 <read_byte>
 8001be8:	4603      	mov	r3, r0
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21c      	sxth	r4, r3
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f7ff ff5e 	bl	8001ab0 <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <read_gyro_data+0x68>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c00:	2037      	movs	r0, #55	; 0x37
 8001c02:	f7ff ff55 	bl	8001ab0 <read_byte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21c      	sxth	r4, r3
 8001c0c:	2038      	movs	r0, #56	; 0x38
 8001c0e:	f7ff ff4f 	bl	8001ab0 <read_byte>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4323      	orrs	r3, r4
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <read_gyro_data+0x6c>)
 8001c1c:	801a      	strh	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	bd98      	pop	{r3, r4, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2004a4ec 	.word	0x2004a4ec
 8001c28:	2004a4ea 	.word	0x2004a4ea
 8001c2c:	2004a4e4 	.word	0x2004a4e4

08001c30 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	805a      	strh	r2, [r3, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	809a      	strh	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	80da      	strh	r2, [r3, #6]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	811a      	strh	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	815a      	strh	r2, [r3, #10]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
{

}
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c7c:	f7ff ff74 	bl	8001b68 <IMU_init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c84:	f7ff fa0c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fa18 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <_ZN3IMU4initEv+0x44>)
 8001c92:	f7ff fa3f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c96:	2101      	movs	r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa11 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <_ZN3IMU4initEv+0x48>)
 8001ca4:	f7ff fa36 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cac:	f008 f828 	bl	8009d00 <HAL_Delay>

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08018b54 	.word	0x08018b54
 8001cbc:	08018b60 	.word	0x08018b60

08001cc0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001cc8:	f7ff ff7a 	bl	8001bc0 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <_ZN3IMU12updateValuesEv+0xa0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <_ZN3IMU12updateValuesEv+0xa4>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc2f 	bl	8000554 <__aeabi_i2d>
 8001cf6:	a316      	add	r3, pc, #88	; (adr r3, 8001d50 <_ZN3IMU12updateValuesEv+0x90>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc94 	bl	8000628 <__aeabi_dmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4625      	mov	r5, r4
 8001d06:	461c      	mov	r4, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc20 	bl	8000554 <__aeabi_i2d>
 8001d14:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <_ZN3IMU12updateValuesEv+0x98>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc85 	bl	8000628 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fac9 	bl	80002bc <__adddf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	f7fe ff29 	bl	8000b88 <__aeabi_d2iz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d46:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	47ae147b 	.word	0x47ae147b
 8001d54:	3f847ae1 	.word	0x3f847ae1
 8001d58:	7ae147ae 	.word	0x7ae147ae
 8001d5c:	3fefae14 	.word	0x3fefae14
 8001d60:	2004a4ec 	.word	0x2004a4ec
 8001d64:	2004a4ea 	.word	0x2004a4ea
 8001d68:	2004a4e4 	.word	0x2004a4e4
 8001d6c:	200001fc 	.word	0x200001fc

08001d70 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7fe fbef 	bl	8000578 <__aeabi_f2d>
 8001d9a:	a316      	add	r3, pc, #88	; (adr r3, 8001df4 <_ZN3IMU8getOmegaEv+0x84>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fd6c 	bl	800087c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dae:	a313      	add	r3, pc, #76	; (adr r3, 8001dfc <_ZN3IMU8getOmegaEv+0x8c>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fc36 	bl	8000628 <__aeabi_dmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_ZN3IMU8getOmegaEv+0x80>)
 8001dca:	f7fe fd57 	bl	800087c <__aeabi_ddiv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f7fe ff1f 	bl	8000c18 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	ee07 3a90 	vmov	s15, r3
}
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40668000 	.word	0x40668000
 8001df4:	66666666 	.word	0x66666666
 8001df8:	40306666 	.word	0x40306666
 8001dfc:	54411744 	.word	0x54411744
 8001e00:	400921fb 	.word	0x400921fb

08001e04 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e0c:	466b      	mov	r3, sp
 8001e0e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e10:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e14:	f007 ff74 	bl	8009d00 <HAL_Delay>
	lcd_clear();
 8001e18:	f7ff f942 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff f94e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e24:	4840      	ldr	r0, [pc, #256]	; (8001f28 <_ZN3IMU11calibrationEv+0x124>)
 8001e26:	f7ff f975 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f947 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e32:	483e      	ldr	r0, [pc, #248]	; (8001f2c <_ZN3IMU11calibrationEv+0x128>)
 8001e34:	f7ff f96e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e3c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e42:	1e5d      	subs	r5, r3, #1
 8001e44:	61bd      	str	r5, [r7, #24]
 8001e46:	462b      	mov	r3, r5
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	0154      	lsls	r4, r2, #5
 8001e5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e5e:	014b      	lsls	r3, r1, #5
 8001e60:	462b      	mov	r3, r5
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f04f 0400 	mov.w	r4, #0
 8001e72:	0154      	lsls	r4, r2, #5
 8001e74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e78:	014b      	lsls	r3, r1, #5
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3303      	adds	r3, #3
 8001e82:	3307      	adds	r3, #7
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	ebad 0d03 	sub.w	sp, sp, r3
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	3303      	adds	r3, #3
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	83fb      	strh	r3, [r7, #30]
 8001e9a:	8bfa      	ldrh	r2, [r7, #30]
 8001e9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	da13      	bge.n	8001ecc <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	ee07 2a90 	vmov	s15, r2
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f007 ff1e 	bl	8009d00 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ec4:	8bfb      	ldrh	r3, [r7, #30]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	83fb      	strh	r3, [r7, #30]
 8001eca:	e7e6      	b.n	8001e9a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d00e      	beq.n	8001f02 <_ZN3IMU11calibrationEv+0xfe>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3304      	adds	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e7ec      	b.n	8001edc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f1c:	46b5      	mov	sp, r6
}
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	; 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08018b64 	.word	0x08018b64
 8001f2c:	08018b70 	.word	0x08018b70

08001f30 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	b299      	uxth	r1, r3
 8001f44:	1dfa      	adds	r2, r7, #7
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <INA260_read+0x50>)
 8001f4e:	f009 fad7 	bl	800b500 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	b299      	uxth	r1, r3
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <INA260_read+0x50>)
 8001f62:	f009 fbcb 	bl	800b6fc <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f76:	89fb      	ldrh	r3, [r7, #14]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2004a704 	.word	0x2004a704

08001f84 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	4603      	mov	r3, r0
 8001f98:	71bb      	strb	r3, [r7, #6]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	717b      	strb	r3, [r7, #5]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	737b      	strb	r3, [r7, #13]
 8001faa:	797b      	ldrb	r3, [r7, #5]
 8001fac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001fae:	793b      	ldrb	r3, [r7, #4]
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	f107 020c 	add.w	r2, r7, #12
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2303      	movs	r3, #3
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <INA260_write+0x48>)
 8001fbe:	f009 fa9f 	bl	800b500 <HAL_I2C_Master_Transmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2004a704 	.word	0x2004a704

08001fd0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001fe2:	797b      	ldrb	r3, [r7, #5]
 8001fe4:	79ba      	ldrb	r2, [r7, #6]
 8001fe6:	79f9      	ldrb	r1, [r7, #7]
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ffcb 	bl	8001f84 <INA260_write>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	461a      	mov	r2, r3
 8002004:	21df      	movs	r1, #223	; 0xdf
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff ffe2 	bl	8001fd0 <setConfig>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
{

}
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203c:	482a      	ldr	r0, [pc, #168]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 800203e:	f009 f8dd 	bl	800b1fc <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <_ZN8JoyStick8getValueEv+0x2e>
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800205a:	2101      	movs	r1, #1
 800205c:	4823      	ldr	r0, [pc, #140]	; (80020ec <_ZN8JoyStick8getValueEv+0xc0>)
 800205e:	f009 f8cd 	bl	800b1fc <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <_ZN8JoyStick8getValueEv+0x4e>
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	481a      	ldr	r0, [pc, #104]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 8002080:	f009 f8bc 	bl	800b1fc <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <_ZN8JoyStick8getValueEv+0x70>
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800209c:	2104      	movs	r1, #4
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <_ZN8JoyStick8getValueEv+0xc4>)
 80020a0:	f009 f8ac 	bl	800b1fc <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <_ZN8JoyStick8getValueEv+0x90>
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 80020c0:	f009 f89c 	bl	800b1fc <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <_ZN8JoyStick8getValueEv+0xb0>
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80020dc:	89fb      	ldrh	r3, [r7, #14]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40020400 	.word	0x40020400

080020f4 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b52      	cmp	r3, #82	; 0x52
 8002104:	d112      	bne.n	800212c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4856      	ldr	r0, [pc, #344]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800210e:	f009 f88d 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002118:	4853      	ldr	r0, [pc, #332]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800211a:	f009 f887 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	4850      	ldr	r0, [pc, #320]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002126:	f009 f881 	bl	800b22c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800212a:	e098      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b47      	cmp	r3, #71	; 0x47
 8002130:	d112      	bne.n	8002158 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	484b      	ldr	r0, [pc, #300]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800213a:	f009 f877 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4848      	ldr	r0, [pc, #288]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002146:	f009 f871 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002150:	4845      	ldr	r0, [pc, #276]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002152:	f009 f86b 	bl	800b22c <HAL_GPIO_WritePin>
}
 8002156:	e082      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b42      	cmp	r3, #66	; 0x42
 800215c:	d112      	bne.n	8002184 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002164:	4840      	ldr	r0, [pc, #256]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002166:	f009 f861 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	483d      	ldr	r0, [pc, #244]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002172:	f009 f85b 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	483a      	ldr	r0, [pc, #232]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800217e:	f009 f855 	bl	800b22c <HAL_GPIO_WritePin>
}
 8002182:	e06c      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b43      	cmp	r3, #67	; 0x43
 8002188:	d112      	bne.n	80021b0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002190:	4835      	ldr	r0, [pc, #212]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002192:	f009 f84b 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	4832      	ldr	r0, [pc, #200]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800219e:	f009 f845 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a8:	482f      	ldr	r0, [pc, #188]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021aa:	f009 f83f 	bl	800b22c <HAL_GPIO_WritePin>
}
 80021ae:	e056      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b4d      	cmp	r3, #77	; 0x4d
 80021b4:	d112      	bne.n	80021dc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	482a      	ldr	r0, [pc, #168]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021be:	f009 f835 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ca:	f009 f82f 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d4:	4824      	ldr	r0, [pc, #144]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f009 f829 	bl	800b22c <HAL_GPIO_WritePin>
}
 80021da:	e040      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b59      	cmp	r3, #89	; 0x59
 80021e0:	d112      	bne.n	8002208 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e8:	481f      	ldr	r0, [pc, #124]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ea:	f009 f81f 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021f6:	f009 f819 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f009 f813 	bl	800b22c <HAL_GPIO_WritePin>
}
 8002206:	e02a      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b57      	cmp	r3, #87	; 0x57
 800220c:	d112      	bne.n	8002234 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002216:	f009 f809 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002222:	f009 f803 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 fffd 	bl	800b22c <HAL_GPIO_WritePin>
}
 8002232:	e014      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b7e      	cmp	r3, #126	; 0x7e
 8002238:	d111      	bne.n	800225e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002242:	f008 fff3 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f008 ffed 	bl	800b22c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 ffe7 	bl	800b22c <HAL_GPIO_WritePin>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020000 	.word	0x40020000

0800226c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	4613      	mov	r3, r2
 800227a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4813      	ldr	r0, [pc, #76]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 800228c:	f008 ffce 	bl	800b22c <HAL_GPIO_WritePin>
 8002290:	e009      	b.n	80022a6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022a2:	f008 ffc3 	bl	800b22c <HAL_GPIO_WritePin>

	if(r_status == 1)
 80022a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022b6:	f008 ffb9 	bl	800b22c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80022ba:	e009      	b.n	80022d0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80022bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022cc:	f008 ffae 	bl	800b22c <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020000 	.word	0x40020000

080022dc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80022dc:	b580      	push	{r7, lr}
 80022de:	b092      	sub	sp, #72	; 0x48
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe92 	bl	8002014 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	331c      	adds	r3, #28
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
 80022fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	429a      	cmp	r2, r3
 8002304:	d008      	beq.n	8002318 <_ZN10LineSensorC1Ev+0x3c>
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	3302      	adds	r3, #2
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
 8002316:	e7f2      	b.n	80022fe <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	429a      	cmp	r2, r3
 8002330:	d009      	beq.n	8002346 <_ZN10LineSensorC1Ev+0x6a>
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	623b      	str	r3, [r7, #32]
		s = 0;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	3304      	adds	r3, #4
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	e7f1      	b.n	800232a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3338      	adds	r3, #56	; 0x38
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d009      	beq.n	8002374 <_ZN10LineSensorC1Ev+0x98>
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	617b      	str	r3, [r7, #20]
		m = 0;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236e:	3304      	adds	r3, #4
 8002370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002372:	e7f1      	b.n	8002358 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d009      	beq.n	80023a2 <_ZN10LineSensorC1Ev+0xc6>
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002398:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	3304      	adds	r3, #4
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	e7f1      	b.n	8002386 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3748      	adds	r7, #72	; 0x48
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	220e      	movs	r2, #14
 80023b8:	4619      	mov	r1, r3
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80023bc:	f007 fd06 	bl	8009dcc <HAL_ADC_Start_DMA>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2004a628 	.word	0x2004a628

080023cc <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b0d      	cmp	r3, #13
 80023dc:	dc2f      	bgt.n	800243e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3392      	adds	r3, #146	; 0x92
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	33a0      	adds	r3, #160	; 0xa0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a5b      	subs	r3, r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	440b      	add	r3, r1
 800242a:	3306      	adds	r3, #6
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e7cc      	b.n	80023d8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002448:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b09      	cmp	r3, #9
 8002450:	d902      	bls.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]


}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200001fe 	.word	0x200001fe

08002468 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002468:	b490      	push	{r4, r7}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800247a:	2b0d      	cmp	r3, #13
 800247c:	f200 8087 	bhi.w	800258e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800248a:	2b09      	cmp	r3, #9
 800248c:	d81c      	bhi.n	80024c8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800248e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002492:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002496:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4423      	add	r3, r4
 80024a6:	3306      	adds	r3, #6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	3304      	adds	r3, #4
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	008b      	lsls	r3, r1, #2
 80024b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024b6:	440b      	add	r3, r1
 80024b8:	3b30      	subs	r3, #48	; 0x30
 80024ba:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024c0:	3301      	adds	r3, #1
 80024c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024c6:	e7de      	b.n	8002486 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80024ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	d84d      	bhi.n	8002572 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80024d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024da:	3301      	adds	r3, #1
 80024dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d83e      	bhi.n	8002566 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80024e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	4413      	add	r3, r2
 80024f4:	3b30      	subs	r3, #48	; 0x30
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002504:	4413      	add	r3, r2
 8002506:	3b30      	subs	r3, #48	; 0x30
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d521      	bpl.n	800255a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002516:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002520:	4413      	add	r3, r2
 8002522:	3b30      	subs	r3, #48	; 0x30
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002528:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800252c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440a      	add	r2, r1
 8002538:	3a30      	subs	r2, #48	; 0x30
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002542:	440b      	add	r3, r1
 8002544:	3b30      	subs	r3, #48	; 0x30
 8002546:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002564:	e7bc      	b.n	80024e0 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002566:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256a:	3301      	adds	r3, #1
 800256c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002570:	e7ad      	b.n	80024ce <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	33b0      	adds	r3, #176	; 0xb0
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002586:	3301      	adds	r3, #1
 8002588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800258c:	e773      	b.n	8002476 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 800258e:	bf00      	nop
 8002590:	3738      	adds	r7, #56	; 0x38
 8002592:	46bd      	mov	sp, r7
 8002594:	bc90      	pop	{r4, r7}
 8002596:	4770      	bx	lr

08002598 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a0      	sub	sp, #128	; 0x80
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f007 fbad 	bl	8009d00 <HAL_Delay>

	lcd_clear();
 80025a6:	f7fe fd7b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fd87 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80025b2:	4886      	ldr	r0, [pc, #536]	; (80027cc <_ZN10LineSensor11calibrationEv+0x234>)
 80025b4:	f7fe fdae 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fd80 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80025c0:	4883      	ldr	r0, [pc, #524]	; (80027d0 <_ZN10LineSensor11calibrationEv+0x238>)
 80025c2:	f7fe fda7 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025d0:	2b0d      	cmp	r3, #13
 80025d2:	d823      	bhi.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80025d4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	32b0      	adds	r2, #176	; 0xb0
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	440a      	add	r2, r1
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ec:	440b      	add	r3, r1
 80025ee:	3b40      	subs	r3, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80025f2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	32b0      	adds	r2, #176	; 0xb0
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	440a      	add	r2, r1
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800260a:	440b      	add	r3, r1
 800260c:	3b78      	subs	r3, #120	; 0x78
 800260e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002610:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002614:	3301      	adds	r3, #1
 8002616:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800261a:	e7d7      	b.n	80025cc <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd02 	bl	800202c <_ZN8JoyStick8getValueEv>
 8002628:	4603      	mov	r3, r0
 800262a:	2b02      	cmp	r3, #2
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d079      	beq.n	800272c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800263e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d850      	bhi.n	80026e8 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002646:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002650:	4413      	add	r3, r2
 8002652:	3b40      	subs	r3, #64	; 0x40
 8002654:	ed93 7a00 	vldr	s14, [r3]
 8002658:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	33b0      	adds	r3, #176	; 0xb0
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d50f      	bpl.n	8002692 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002672:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002676:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	32b0      	adds	r2, #176	; 0xb0
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	440a      	add	r2, r1
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800268a:	440b      	add	r3, r1
 800268c:	3b40      	subs	r3, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e024      	b.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002692:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800269c:	4413      	add	r3, r2
 800269e:	3b78      	subs	r3, #120	; 0x78
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	33b0      	adds	r3, #176	; 0xb0
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd0e      	ble.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80026be:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	32b0      	adds	r2, #176	; 0xb0
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	440a      	add	r2, r1
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026d6:	440b      	add	r3, r1
 80026d8:	3b78      	subs	r3, #120	; 0x78
 80026da:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026e0:	3301      	adds	r3, #1
 80026e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80026e6:	e7aa      	b.n	800263e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fe30 	bl	8005354 <_ZN12RotarySwitch8getValueEv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800270a:	2201      	movs	r2, #1
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fdab 	bl	800226c <_ZN3LED2LREaa>
 8002716:	e781      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fda1 	bl	800226c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800272a:	e777      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800272c:	2300      	movs	r3, #0
 800272e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002732:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002736:	2b0d      	cmp	r3, #13
 8002738:	d826      	bhi.n	8002788 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800273a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002744:	4413      	add	r3, r2
 8002746:	3b40      	subs	r3, #64	; 0x40
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002756:	4413      	add	r3, r2
 8002758:	3b78      	subs	r3, #120	; 0x78
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002766:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80027d4 <_ZN10LineSensor11calibrationEv+0x23c>
 800276a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3392      	adds	r3, #146	; 0x92
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800277c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002780:	3301      	adds	r3, #1
 8002782:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002786:	e7d4      	b.n	8002732 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002788:	2300      	movs	r3, #0
 800278a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800278e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002792:	2b0d      	cmp	r3, #13
 8002794:	d815      	bhi.n	80027c2 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002796:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800279a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027a4:	440a      	add	r2, r1
 80027a6:	3a78      	subs	r2, #120	; 0x78
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	33a0      	adds	r3, #160	; 0xa0
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3304      	adds	r3, #4
 80027b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027ba:	3301      	adds	r3, #1
 80027bc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027c0:	e7e5      	b.n	800278e <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80027c2:	bf00      	nop
 80027c4:	3780      	adds	r7, #128	; 0x80
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08018b7c 	.word	0x08018b7c
 80027d0:	08018b88 	.word	0x08018b88
 80027d4:	447a0000 	.word	0x447a0000

080027d8 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80027e4:	2303      	movs	r3, #3
 80027e6:	81bb      	strh	r3, [r7, #12]
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d814      	bhi.n	8002818 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80027ee:	89bb      	ldrh	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	33b0      	adds	r3, #176	; 0xb0
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800286c <_ZN10LineSensor13emergencyStopEv+0x94>
 8002800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	db02      	blt.n	8002810 <_ZN10LineSensor13emergencyStopEv+0x38>
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	3301      	adds	r3, #1
 800280e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002810:	89bb      	ldrh	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	81bb      	strh	r3, [r7, #12]
 8002816:	e7e7      	b.n	80027e8 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d906      	bls.n	800282c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e002      	b.n	8002832 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b63      	cmp	r3, #99	; 0x63
 8002838:	d903      	bls.n	8002842 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e002      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002850:	4293      	cmp	r3, r2
 8002852:	d903      	bls.n	800285c <_ZN10LineSensor13emergencyStopEv+0x84>
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002856:	f242 7210 	movw	r2, #10000	; 0x2710
 800285a:	801a      	strh	r2, [r3, #0]

	return flag;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800285e:	781b      	ldrb	r3, [r3, #0]

}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	44098000 	.word	0x44098000
 8002870:	20000200 	.word	0x20000200
 8002874:	20000202 	.word	0x20000202

08002878 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eef0 7ae7 	vabs.f32	s15, s15
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002916:	330c      	adds	r3, #12
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002924:	3350      	adds	r3, #80	; 0x50
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002930:	3352      	adds	r3, #82	; 0x52
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800293c:	3354      	adds	r3, #84	; 0x54
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002948:	3318      	adds	r3, #24
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002954:	331c      	adds	r3, #28
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002960:	331e      	adds	r3, #30
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296c:	3320      	adds	r3, #32
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002978:	3322      	adds	r3, #34	; 0x22
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002984:	3323      	adds	r3, #35	; 0x23
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800299c:	3328      	adds	r3, #40	; 0x28
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029aa:	332c      	adds	r3, #44	; 0x2c
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c6:	3334      	adds	r3, #52	; 0x34
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e0:	333a      	adds	r3, #58	; 0x3a
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029ec:	333c      	adds	r3, #60	; 0x3c
 80029ee:	2200      	movs	r2, #0
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f8:	333e      	adds	r3, #62	; 0x3e
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a20:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a26:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a34:	2300      	movs	r3, #0
 8002a36:	83fb      	strh	r3, [r7, #30]
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d80d      	bhi.n	8002a5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c6>
		velocity_table_[i] = 0;
 8002a42:	8bfb      	ldrh	r3, [r7, #30]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	83fb      	strh	r3, [r7, #30]
 8002a5c:	e7ec      	b.n	8002a38 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	83bb      	strh	r3, [r7, #28]
 8002a62:	8bbb      	ldrh	r3, [r7, #28]
 8002a64:	2b63      	cmp	r3, #99	; 0x63
 8002a66:	d80d      	bhi.n	8002a84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ec>
		crossline_distance_[i] = 0;
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002a70:	3316      	adds	r3, #22
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	83bb      	strh	r3, [r7, #28]
 8002a82:	e7ee      	b.n	8002a62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ca>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	837b      	strh	r3, [r7, #26]
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	2b63      	cmp	r3, #99	; 0x63
 8002a8c:	d80d      	bhi.n	8002aaa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x212>
		crossline_distance2_[i] = 0;
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a96:	333a      	adds	r3, #58	; 0x3a
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	837b      	strh	r3, [r7, #26]
 8002aa8:	e7ee      	b.n	8002a88 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aaa:	2300      	movs	r3, #0
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ab4:	d20d      	bcs.n	8002ad2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23a>
		sideline_distance_[i] = 0;
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002abe:	331e      	adds	r3, #30
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aca:	8b3b      	ldrh	r3, [r7, #24]
 8002acc:	3301      	adds	r3, #1
 8002ace:	833b      	strh	r3, [r7, #24]
 8002ad0:	e7ed      	b.n	8002aae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x216>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	82fb      	strh	r3, [r7, #22]
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002adc:	d20d      	bcs.n	8002afa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x262>
		sideline_distance2_[i] = 0;
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002ae6:	3312      	adds	r3, #18
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	3301      	adds	r3, #1
 8002af6:	82fb      	strh	r3, [r7, #22]
 8002af8:	e7ed      	b.n	8002ad6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23e>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002b40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	ee07 3a90 	vmov	s15, r3

}
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffc5 	bl	8002b08 <_ZN9LineTrace9calcErrorEv>
 8002b7e:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ba2:	3354      	adds	r3, #84	; 0x54
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d14c      	bne.n	8002c46 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002bb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	ee17 0a90 	vmov	r0, s15
 8002bda:	f7fd fccd 	bl	8000578 <__aeabi_f2d>
 8002bde:	a350      	add	r3, pc, #320	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe4a 	bl	800087c <__aeabi_ddiv>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4618      	mov	r0, r3
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f7fe f812 	bl	8000c18 <__aeabi_d2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcbb 	bl	8000578 <__aeabi_f2d>
 8002c02:	4604      	mov	r4, r0
 8002c04:	460d      	mov	r5, r1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcae 	bl	8000578 <__aeabi_f2d>
 8002c1c:	a340      	add	r3, pc, #256	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fd01 	bl	8000628 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fb45 	bl	80002bc <__adddf3>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	4618      	mov	r0, r3
 8002c38:	4621      	mov	r1, r4
 8002c3a:	f7fd ffed 	bl	8000c18 <__aeabi_d2f>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e04b      	b.n	8002cde <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	ee17 0a90 	vmov	r0, s15
 8002c74:	f7fd fc80 	bl	8000578 <__aeabi_f2d>
 8002c78:	a329      	add	r3, pc, #164	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fdfd 	bl	800087c <__aeabi_ddiv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	4618      	mov	r0, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	f7fd ffc5 	bl	8000c18 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc6e 	bl	8000578 <__aeabi_f2d>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	460d      	mov	r5, r1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	a31a      	add	r3, pc, #104	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fcb4 	bl	8000628 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd faf8 	bl	80002bc <__adddf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	f7fd ffa0 	bl	8000c18 <__aeabi_d2f>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cdc:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d02:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f002 ffb4 	bl	8005c78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6013      	str	r3, [r2, #0]

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d24:	3f50624d 	.word	0x3f50624d
 8002d28:	20000214 	.word	0x20000214
 8002d2c:	20000210 	.word	0x20000210

08002d30 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fc95 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 f9c3 	bl	80050d2 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 ff95 	bl	8004c80 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 f816 	bl	8004da4 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461c      	mov	r4, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fc45 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002da6:	eef0 7a40 	vmov.f32	s15, s0
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002db0:	3316      	adds	r3, #22
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dce:	3318      	adds	r3, #24
 8002dd0:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dd8:	3318      	adds	r3, #24
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b63      	cmp	r3, #99	; 0x63
 8002dde:	d905      	bls.n	8002dec <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002de6:	3318      	adds	r3, #24
 8002de8:	2263      	movs	r2, #99	; 0x63
 8002dea:	801a      	strh	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e06:	331a      	adds	r3, #26
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f7fe fc0f 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e12:	eef0 7a40 	vmov.f32	s15, s0
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e1c:	333a      	adds	r3, #58	; 0x3a
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e2c:	331a      	adds	r3, #26
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3a:	331a      	adds	r3, #26
 8002e3c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e44:	331a      	adds	r3, #26
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b63      	cmp	r3, #99	; 0x63
 8002e4a:	d905      	bls.n	8002e58 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e52:	331a      	adds	r3, #26
 8002e54:	2263      	movs	r2, #99	; 0x63
 8002e56:	801a      	strh	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e72:	331c      	adds	r3, #28
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461c      	mov	r4, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fbd9 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e88:	331e      	adds	r3, #30
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e98:	331c      	adds	r3, #28
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea6:	331c      	adds	r3, #28
 8002ea8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb8:	d306      	bcc.n	8002ec8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ec6:	801a      	strh	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ee2:	331e      	adds	r3, #30
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fe fba1 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002eee:	eef0 7a40 	vmov.f32	s15, s0
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002ef8:	3312      	adds	r3, #18
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f08:	331e      	adds	r3, #30
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f16:	331e      	adds	r3, #30
 8002f18:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f20:	331e      	adds	r3, #30
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f28:	d306      	bcc.n	8002f38 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f30:	331e      	adds	r3, #30
 8002f32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f36:	801a      	strh	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	ed2d 8b02 	vpush	{d8}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d046      	beq.n	8002fe4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f5c:	3354      	adds	r3, #84	; 0x54
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11c      	bne.n	8002fa0 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69dc      	ldr	r4, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fb4f 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8002f74:	eeb0 8a40 	vmov.f32	s16, s0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 f897 	bl	80050b0 <_ZN8Odometry13getDeltaThetaEv>
 8002f82:	ec53 2b10 	vmov	r2, r3, d0
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fe45 	bl	8000c18 <__aeabi_d2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	ee00 3a90 	vmov	s1, r3
 8002f94:	eeb0 0a48 	vmov.f32	s0, s16
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 fd79 	bl	8004a90 <_ZN6Logger21storeDistanceAndThetaEff>
 8002f9e:	e01b      	b.n	8002fd8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69dc      	ldr	r4, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fb32 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8002fae:	eeb0 8a40 	vmov.f32	s16, s0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 f87a 	bl	80050b0 <_ZN8Odometry13getDeltaThetaEv>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7fd fe28 	bl	8000c18 <__aeabi_d2f>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	ee00 3a90 	vmov	s1, r3
 8002fce:	eeb0 0a48 	vmov.f32	s0, s16
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f001 fd5c 	bl	8004a90 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	ecbd 8b02 	vpop	{d8}
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20000204 	.word	0x20000204

08002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003002:	3318      	adds	r3, #24
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d85a      	bhi.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003010:	3318      	adds	r3, #24
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800301a:	3316      	adds	r3, #22
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fb01 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800302e:	eeb0 7a40 	vmov.f32	s14, s0
 8003032:	edd7 7a03 	vldr	s15, [r7, #12]
 8003036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	f7ff fc1b 	bl	8002878 <_ZSt3absf>
 8003042:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8003046:	edd7 7a02 	vldr	s15, [r7, #8]
 800304a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d826      	bhi.n	80030a6 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	2200      	movs	r2, #0
 8003062:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6959      	ldr	r1, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306e:	3318      	adds	r3, #24
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003078:	3316      	adds	r3, #22
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	4608      	mov	r0, r1
 8003088:	f7fe fae1 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003092:	3318      	adds	r3, #24
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a0:	3318      	adds	r3, #24
 80030a2:	801a      	strh	r2, [r3, #0]
			break;
 80030a4:	e00c      	b.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ac:	3318      	adds	r3, #24
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ba:	3318      	adds	r3, #24
 80030bc:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 80030be:	e79d      	b.n	8002ffc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c6:	3318      	adds	r3, #24
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b63      	cmp	r3, #99	; 0x63
 80030cc:	d905      	bls.n	80030da <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d4:	3318      	adds	r3, #24
 80030d6:	2263      	movs	r2, #99	; 0x63
 80030d8:	801a      	strh	r2, [r3, #0]

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	437a0000 	.word	0x437a0000

080030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030f0:	2300      	movs	r3, #0
 80030f2:	82fb      	strh	r3, [r7, #22]
 80030f4:	8afb      	ldrh	r3, [r7, #22]
 80030f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030fa:	d23d      	bcs.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003104:	331e      	adds	r3, #30
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fa8c 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8003118:	eeb0 7a40 	vmov.f32	s14, s0
 800311c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	f7ff fba6 	bl	8002878 <_ZSt3absf>
 800312c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003130:	edd7 7a03 	vldr	s15, [r7, #12]
 8003134:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80031a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d816      	bhi.n	8003170 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	2200      	movs	r2, #0
 800314c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6959      	ldr	r1, [r3, #20]
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800315a:	331e      	adds	r3, #30
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	4608      	mov	r0, r1
 800316a:	f7fe fa70 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			break;
 800316e:	e003      	b.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	3301      	adds	r3, #1
 8003174:	82fb      	strh	r3, [r7, #22]
 8003176:	e7bd      	b.n	80030f4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800317e:	331c      	adds	r3, #28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003186:	d306      	bcc.n	8003196 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800318e:	331c      	adds	r3, #28
 8003190:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003194:	801a      	strh	r2, [r3, #0]

}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	43660000 	.word	0x43660000

080031a4 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b6:	3354      	adds	r3, #84	; 0x54
 80031b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d144      	bne.n	800324a <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d504      	bpl.n	80031dc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e084      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 80031dc:	edd7 7a00 	vldr	s15, [r7]
 80031e0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d503      	bpl.n	80031f6 <_ZN9LineTrace15radius2VelocityEf+0x52>
 80031ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e077      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80031f6:	edd7 7a00 	vldr	s15, [r7]
 80031fa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d503      	bpl.n	8003210 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e06a      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003210:	edd7 7a00 	vldr	s15, [r7]
 8003214:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d502      	bpl.n	8003228 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e05e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003228:	edd7 7a00 	vldr	s15, [r7]
 800322c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d502      	bpl.n	8003240 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e052      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e04d      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003250:	3354      	adds	r3, #84	; 0x54
 8003252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d143      	bne.n	80032e2 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 800325a:	edd7 7a00 	vldr	s15, [r7]
 800325e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d504      	bpl.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e037      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 8003276:	edd7 7a00 	vldr	s15, [r7]
 800327a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800327e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	d502      	bpl.n	800328e <_ZN9LineTrace15radius2VelocityEf+0xea>
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e02b      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800328e:	edd7 7a00 	vldr	s15, [r7]
 8003292:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d503      	bpl.n	80032a8 <_ZN9LineTrace15radius2VelocityEf+0x104>
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e01e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 80032a8:	edd7 7a00 	vldr	s15, [r7]
 80032ac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 80032b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d502      	bpl.n	80032c0 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e012      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80032c0:	edd7 7a00 	vldr	s15, [r7]
 80032c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	d502      	bpl.n	80032d8 <_ZN9LineTrace15radius2VelocityEf+0x134>
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e006      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e001      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <_ZN9LineTrace15radius2VelocityEf+0x178>)
 80032e4:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	ee07 3a90 	vmov	s15, r3
}
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	43c80000 	.word	0x43c80000
 8003300:	43fa0000 	.word	0x43fa0000
 8003304:	44228000 	.word	0x44228000
 8003308:	44bb8000 	.word	0x44bb8000
 800330c:	40200000 	.word	0x40200000
 8003310:	44fa0000 	.word	0x44fa0000
 8003314:	40400000 	.word	0x40400000
 8003318:	3fd9999a 	.word	0x3fd9999a
 800331c:	3fa66666 	.word	0x3fa66666

08003320 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	ed87 0a02 	vstr	s0, [r7, #8]
 800332c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800332e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003332:	83fb      	strh	r3, [r7, #30]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808d 	beq.w	8003456 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800333c:	8bfb      	ldrh	r3, [r7, #30]
 800333e:	3b01      	subs	r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003346:	3304      	adds	r3, #4
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003358:	3304      	adds	r3, #4
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800336a:	edd7 7a06 	vldr	s15, [r7, #24]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd6a      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	a335      	add	r3, pc, #212	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd f94b 	bl	8000628 <__aeabi_dmul>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4625      	mov	r5, r4
 8003398:	461c      	mov	r4, r3
 800339a:	69b8      	ldr	r0, [r7, #24]
 800339c:	f7fd f8ec 	bl	8000578 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd fa68 	bl	800087c <__aeabi_ddiv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	4618      	mov	r0, r3
 80033b2:	4621      	mov	r1, r4
 80033b4:	f7fd fc30 	bl	8000c18 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80033c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80033c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	dd37      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033e6:	3304      	adds	r3, #4
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8c2 	bl	8000578 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	edd7 7a02 	vldr	s15, [r7, #8]
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	ee17 0a90 	vmov	r0, s15
 8003410:	f7fd f8b2 	bl	8000578 <__aeabi_f2d>
 8003414:	a312      	add	r3, pc, #72	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f905 	bl	8000628 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff49 	bl	80002bc <__adddf3>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4619      	mov	r1, r3
 8003430:	4622      	mov	r2, r4
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	1e5c      	subs	r4, r3, #1
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	f7fd fbed 	bl	8000c18 <__aeabi_d2f>
 800343e:	4601      	mov	r1, r0
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003446:	3304      	adds	r3, #4
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	3b01      	subs	r3, #1
 8003452:	83fb      	strh	r3, [r7, #30]
 8003454:	e76e      	b.n	8003334 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	d2f1a9fc 	.word	0xd2f1a9fc
 8003464:	3f50624d 	.word	0x3f50624d

08003468 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	ed87 0a02 	vstr	s0, [r7, #8]
 8003474:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003476:	2300      	movs	r3, #0
 8003478:	83fb      	strh	r3, [r7, #30]
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003480:	4293      	cmp	r3, r2
 8003482:	f200 808d 	bhi.w	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	3301      	adds	r3, #1
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	ed93 7a00 	vldr	s14, [r3]
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034a2:	3304      	adds	r3, #4
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	dd6a      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f853 	bl	8000578 <__aeabi_f2d>
 80034d2:	a335      	add	r3, pc, #212	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f8a6 	bl	8000628 <__aeabi_dmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4625      	mov	r5, r4
 80034e2:	461c      	mov	r4, r3
 80034e4:	69b8      	ldr	r0, [r7, #24]
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fd f9c3 	bl	800087c <__aeabi_ddiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	4618      	mov	r0, r3
 80034fc:	4621      	mov	r1, r4
 80034fe:	f7fd fb8b 	bl	8000c18 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003506:	edd7 6a06 	vldr	s13, [r7, #24]
 800350a:	ed97 7a05 	vldr	s14, [r7, #20]
 800350e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003512:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003516:	ed97 7a04 	vldr	s14, [r7, #16]
 800351a:	edd7 7a02 	vldr	s15, [r7, #8]
 800351e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd37      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003530:	3304      	adds	r3, #4
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f81d 	bl	8000578 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	8bfb      	ldrh	r3, [r7, #30]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fd f80d 	bl	8000578 <__aeabi_f2d>
 800355e:	a312      	add	r3, pc, #72	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f860 	bl	8000628 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fea4 	bl	80002bc <__adddf3>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4619      	mov	r1, r3
 800357a:	4622      	mov	r2, r4
 800357c:	8bfb      	ldrh	r3, [r7, #30]
 800357e:	1c5c      	adds	r4, r3, #1
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	f7fd fb48 	bl	8000c18 <__aeabi_d2f>
 8003588:	4601      	mov	r1, r0
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003590:	3304      	adds	r3, #4
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	e76c      	b.n	800347a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}
 80035a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80035ac:	3f50624d 	.word	0x3f50624d

080035b0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f863 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c8:	3350      	adds	r3, #80	; 0x50
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d4:	3352      	adds	r3, #82	; 0x52
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035e0:	330c      	adds	r3, #12
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035fe:	3350      	adds	r3, #80	; 0x50
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800360a:	3352      	adds	r3, #82	; 0x52
 800360c:	2200      	movs	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003616:	330c      	adds	r3, #12
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003638:	3350      	adds	r3, #80	; 0x50
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05e      	beq.n	80036fe <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fff3 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003654:	330c      	adds	r3, #12
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	bfac      	ite	ge
 8003664:	2301      	movge	r3, #1
 8003666:	2300      	movlt	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003674:	330c      	adds	r3, #12
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003680:	3352      	adds	r3, #82	; 0x52
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800369c:	330c      	adds	r3, #12
 800369e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a8:	3352      	adds	r3, #82	; 0x52
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b6:	3352      	adds	r3, #82	; 0x52
 80036b8:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c0:	3352      	adds	r3, #82	; 0x52
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d2:	3352      	adds	r3, #82	; 0x52
 80036d4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036d8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e0:	3352      	adds	r3, #82	; 0x52
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036ea:	3304      	adds	r3, #4
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fae8 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd ff79 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8003720:	eeb0 7a40 	vmov.f32	s14, s0
 8003724:	edd7 7a00 	vldr	s15, [r7]
 8003728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003768:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800376c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003770:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003788:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003794:	4a49      	ldr	r2, [pc, #292]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800379a:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037a0:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d057      	beq.n	800385e <_ZN9LineTrace11isCrossLineEv+0x112>
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650){
 80037ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 80037b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d50f      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
 80037c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d506      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d060      	beq.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			flag = true;
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	4618      	mov	r0, r3
 8003806:	f001 feff 	bl	8005608 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd ff57 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003826:	3354      	adds	r3, #84	; 0x54
 8003828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <_ZN9LineTrace11isCrossLineEv+0xf8>
				store_check_cnt_ = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003836:	333a      	adds	r3, #58	; 0x3a
 8003838:	2200      	movs	r2, #0
 800383a:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff faa3 	bl	8002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003842:	e035      	b.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			}
			else{
				store_check_cnt_ = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800384a:	333a      	adds	r3, #58	; 0x3a
 800384c:	2200      	movs	r2, #0
 800384e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fbcf 	bl	8002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff facc 	bl	8002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 800385c:	e028      	b.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800385e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003862:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x188>
 8003866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386e:	dd0f      	ble.n	8003890 <_ZN9LineTrace11isCrossLineEv+0x144>
 8003870:	edd7 7a02 	vldr	s15, [r7, #8]
 8003874:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x188>
 8003878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	dd06      	ble.n	8003890 <_ZN9LineTrace11isCrossLineEv+0x144>
			cnt++;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e002      	b.n	8003896 <_ZN9LineTrace11isCrossLineEv+0x14a>
		}
		else{
			cnt = 0;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003892:	2200      	movs	r2, #0
 8003894:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d908      	bls.n	80038b0 <_ZN9LineTrace11isCrossLineEv+0x164>
			flag = false;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x180>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x184>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000208 	.word	0x20000208
 80038c0:	2000020c 	.word	0x2000020c
 80038c4:	2000021b 	.word	0x2000021b
 80038c8:	44228000 	.word	0x44228000
 80038cc:	20000218 	.word	0x20000218
 80038d0:	2000021a 	.word	0x2000021a
 80038d4:	43fa0000 	.word	0x43fa0000

080038d8 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fe92 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 80038ee:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fbc9 	bl	800508e <_ZN8Odometry8getThetaEv>
 80038fc:	ec54 3b10 	vmov	r3, r4, d0
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd f988 	bl	8000c18 <__aeabi_d2f>
 8003908:	4603      	mov	r3, r0
 800390a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800390c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003910:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d101      	bne.n	800391e <_ZN9LineTrace8isStableEv+0x46>
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <_ZN9LineTrace8isStableEv+0xd0>)
 800391c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800391e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003922:	edd7 7a04 	vldr	s15, [r7, #16]
 8003926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800392a:	eeb0 0a66 	vmov.f32	s0, s13
 800392e:	f7fe ffa3 	bl	8002878 <_ZSt3absf>
 8003932:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003936:	edd7 7a03 	vldr	s15, [r7, #12]
 800393a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039ac <_ZN9LineTrace8isStableEv+0xd4>
 800393e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	db01      	blt.n	800394c <_ZN9LineTrace8isStableEv+0x74>
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <_ZN9LineTrace8isStableEv+0xd8>)
 800394a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003966:	3324      	adds	r3, #36	; 0x24
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 800396c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003970:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b8 <_ZN9LineTrace8isStableEv+0xe0>
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	db06      	blt.n	800398c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	2b18      	cmp	r3, #24
 8003998:	d901      	bls.n	800399e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	3727c5ac 	.word	0x3727c5ac
 80039ac:	459c4000 	.word	0x459c4000
 80039b0:	459c4000 	.word	0x459c4000
 80039b4:	2000021c 	.word	0x2000021c
 80039b8:	44fa0000 	.word	0x44fa0000

080039bc <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b092      	sub	sp, #72	; 0x48
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c8:	2201      	movs	r2, #1
 80039ca:	4963      	ldr	r1, [pc, #396]	; (8003b58 <_ZN9LineTrace4initEv+0x19c>)
 80039cc:	4863      	ldr	r0, [pc, #396]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039ce:	f7fd ff7d 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d6:	2201      	movs	r2, #1
 80039d8:	4961      	ldr	r1, [pc, #388]	; (8003b60 <_ZN9LineTrace4initEv+0x1a4>)
 80039da:	4860      	ldr	r0, [pc, #384]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039dc:	f7fd ff76 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039e4:	2201      	movs	r2, #1
 80039e6:	495f      	ldr	r1, [pc, #380]	; (8003b64 <_ZN9LineTrace4initEv+0x1a8>)
 80039e8:	485c      	ldr	r0, [pc, #368]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 80039ea:	f7fd ff6f 	bl	80018cc <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039f6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039fa:	eeb0 1a66 	vmov.f32	s2, s13
 80039fe:	eef0 0a47 	vmov.f32	s1, s14
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8c6 	bl	8003b98 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a10:	2201      	movs	r2, #1
 8003a12:	4955      	ldr	r1, [pc, #340]	; (8003b68 <_ZN9LineTrace4initEv+0x1ac>)
 8003a14:	4851      	ldr	r0, [pc, #324]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a16:	f7fd ff59 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4952      	ldr	r1, [pc, #328]	; (8003b6c <_ZN9LineTrace4initEv+0x1b0>)
 8003a22:	484e      	ldr	r0, [pc, #312]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a24:	f7fd ff52 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4950      	ldr	r1, [pc, #320]	; (8003b70 <_ZN9LineTrace4initEv+0x1b4>)
 8003a30:	484a      	ldr	r0, [pc, #296]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a32:	f7fd ff4b 	bl	80018cc <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a36:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a3e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a42:	eeb0 1a66 	vmov.f32	s2, s13
 8003a46:	eef0 0a47 	vmov.f32	s1, s14
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8e8 	bl	8003c24 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4946      	ldr	r1, [pc, #280]	; (8003b74 <_ZN9LineTrace4initEv+0x1b8>)
 8003a5c:	483f      	ldr	r0, [pc, #252]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a5e:	f7fd ff35 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a66:	2201      	movs	r2, #1
 8003a68:	4943      	ldr	r1, [pc, #268]	; (8003b78 <_ZN9LineTrace4initEv+0x1bc>)
 8003a6a:	483c      	ldr	r0, [pc, #240]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a6c:	f7fd ff2e 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a74:	2201      	movs	r2, #1
 8003a76:	4941      	ldr	r1, [pc, #260]	; (8003b7c <_ZN9LineTrace4initEv+0x1c0>)
 8003a78:	4838      	ldr	r0, [pc, #224]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a7a:	f7fd ff27 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	2201      	movs	r2, #1
 8003a84:	493e      	ldr	r1, [pc, #248]	; (8003b80 <_ZN9LineTrace4initEv+0x1c4>)
 8003a86:	4835      	ldr	r0, [pc, #212]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a88:	f7fd ff20 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	2201      	movs	r2, #1
 8003a92:	493c      	ldr	r1, [pc, #240]	; (8003b84 <_ZN9LineTrace4initEv+0x1c8>)
 8003a94:	4831      	ldr	r0, [pc, #196]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003a96:	f7fd ff19 	bl	80018cc <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f913 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003aa8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aac:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f91c 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ab6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aba:	eeb0 0a67 	vmov.f32	s0, s15
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f925 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ac4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f92e 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003ad2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f937 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4928      	ldr	r1, [pc, #160]	; (8003b88 <_ZN9LineTrace4initEv+0x1cc>)
 8003ae8:	481c      	ldr	r0, [pc, #112]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003aea:	f7fd feef 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	2201      	movs	r2, #1
 8003af4:	4925      	ldr	r1, [pc, #148]	; (8003b8c <_ZN9LineTrace4initEv+0x1d0>)
 8003af6:	4819      	ldr	r0, [pc, #100]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003af8:	f7fd fee8 	bl	80018cc <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b00:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b04:	eef0 0a47 	vmov.f32	s1, s14
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f97e 	bl	8003e0e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	2201      	movs	r2, #1
 8003b24:	491a      	ldr	r1, [pc, #104]	; (8003b90 <_ZN9LineTrace4initEv+0x1d4>)
 8003b26:	480d      	ldr	r0, [pc, #52]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003b28:	f7fd fed0 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	2201      	movs	r2, #1
 8003b32:	4918      	ldr	r1, [pc, #96]	; (8003b94 <_ZN9LineTrace4initEv+0x1d8>)
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <_ZN9LineTrace4initEv+0x1a0>)
 8003b36:	f7fd fec9 	bl	80018cc <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b42:	eef0 0a47 	vmov.f32	s1, s14
 8003b46:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f979 	bl	8003e42 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b50:	bf00      	nop
 8003b52:	3748      	adds	r7, #72	; 0x48
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08018bc8 	.word	0x08018bc8
 8003b5c:	08018bd0 	.word	0x08018bd0
 8003b60:	08018bd8 	.word	0x08018bd8
 8003b64:	08018be0 	.word	0x08018be0
 8003b68:	08018be8 	.word	0x08018be8
 8003b6c:	08018bf4 	.word	0x08018bf4
 8003b70:	08018c00 	.word	0x08018c00
 8003b74:	08018c0c 	.word	0x08018c0c
 8003b78:	08018c18 	.word	0x08018c18
 8003b7c:	08018c24 	.word	0x08018c24
 8003b80:	08018c30 	.word	0x08018c30
 8003b84:	08018c3c 	.word	0x08018c3c
 8003b88:	08018c48 	.word	0x08018c48
 8003b8c:	08018c50 	.word	0x08018c50
 8003b90:	08018c58 	.word	0x08018c58
 8003b94:	08018c64 	.word	0x08018c64

08003b98 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ba8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	ee07 3a90 	vmov	s15, r3
}
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	ee07 3a90 	vmov	s15, r3
}
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	ee07 3a90 	vmov	s15, r3
}
 8003c16:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c30:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c34:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	ee07 3a90 	vmov	s15, r3
}
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	ee07 3a90 	vmov	s15, r3
}
 8003c84:	eeb0 0a67 	vmov.f32	s0, s15
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	ee07 3a90 	vmov	s15, r3
}
 8003ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d7c:	ee07 3a90 	vmov	s15, r3
}
 8003d80:	eeb0 0a67 	vmov.f32	s0, s15
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d9c:	ee07 3a90 	vmov	s15, r3
}
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dbc:	ee07 3a90 	vmov	s15, r3
}
 8003dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ddc:	ee07 3a90 	vmov	s15, r3
}
 8003de0:	eeb0 0a67 	vmov.f32	s0, s15
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003dfc:	ee07 3a90 	vmov	s15, r3
}
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e24:	3328      	adds	r3, #40	; 0x28
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e30:	332c      	adds	r3, #44	; 0x2c
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e4e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e58:	3330      	adds	r3, #48	; 0x30
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e64:	3334      	adds	r3, #52	; 0x34
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e84:	3328      	adds	r3, #40	; 0x28
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	ee07 3a90 	vmov	s15, r3
}
 8003e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ea8:	3334      	adds	r3, #52	; 0x34
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	ee07 3a90 	vmov	s15, r3
}
 8003eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ecc:	3330      	adds	r3, #48	; 0x30
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	ee07 3a90 	vmov	s15, r3
}
 8003ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ef0:	332c      	adds	r3, #44	; 0x2c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	ee07 3a90 	vmov	s15, r3
}
 8003ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8154 	beq.w	80041c4 <_ZN9LineTrace4flipEv+0x2bc>
		// ---- line following processing -----//
		pidTrace();
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fe fe27 	bl	8002b70 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fb81 	bl	800362a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003f28:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fbea 	bl	8003706 <_ZN9LineTrace16isTargetDistanceEf>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d040      	beq.n	8003fba <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f801 	bl	8002f40 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69dc      	ldr	r4, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd ff12 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 8003f4c:	eef0 7a40 	vmov.f32	s15, s0
 8003f50:	eeb0 0a67 	vmov.f32	s0, s15
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fd1f 	bl	8004998 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003f64:	eeb0 0a67 	vmov.f32	s0, s15
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fd52 	bl	8004a12 <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fcb2 	bl	80038d8 <_ZN9LineTrace8isStableEv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x8c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fb1a 	bl	80055b8 <_ZN10SideSensor10getStatusLEv>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x8c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <_ZN9LineTrace4flipEv+0x8e>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa0:	3323      	adds	r3, #35	; 0x23
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fb5e 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f88c 	bl	80050d2 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fc0:	3323      	adds	r3, #35	; 0x23
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xd4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 faf3 	bl	80055b8 <_ZN10SideSensor10getStatusLEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xd4>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <_ZN9LineTrace4flipEv+0xd6>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d029      	beq.n	8004036 <_ZN9LineTrace4flipEv+0x12e>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fe8:	3354      	adds	r3, #84	; 0x54
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <_ZN9LineTrace4flipEv+0xfe>
				store_check_cnt_ = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ff8:	333a      	adds	r3, #58	; 0x3a
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe ff2e 	bl	8002e60 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004004:	e00b      	b.n	800401e <_ZN9LineTrace4flipEv+0x116>
			}
			else{
				store_check_cnt_ = 0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800400c:	333a      	adds	r3, #58	; 0x3a
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f868 	bl	80030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe ff59 	bl	8002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004024:	3323      	adds	r3, #35	; 0x23
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004030:	3324      	adds	r3, #36	; 0x24
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fb88 	bl	800374c <_ZN9LineTrace11isCrossLineEv>
			//encoder_->clearCrossLineIgnoreDistance();//moved to isCrossLine function
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 100){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fafb 	bl	800563c <_ZN10SideSensor13getIgnoreFlagEv>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <_ZN9LineTrace4flipEv+0x164>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fb27 	bl	80016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004056:	eeb0 7a40 	vmov.f32	s14, s0
 800405a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80041cc <_ZN9LineTrace4flipEv+0x2c4>
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	db01      	blt.n	800406c <_ZN9LineTrace4flipEv+0x164>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <_ZN9LineTrace4flipEv+0x166>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <_ZN9LineTrace4flipEv+0x174>
			side_sensor_->disableIgnore();
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fad3 	bl	8005622 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fba9 	bl	80027d8 <_ZN10LineSensor13emergencyStopEv>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <_ZN9LineTrace4flipEv+0x1a0>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80041d0 <_ZN9LineTrace4flipEv+0x2c8>
 8004094:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80041d0 <_ZN9LineTrace4flipEv+0x2c8>
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fded 	bl	8005c78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f96e 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ae:	3338      	adds	r3, #56	; 0x38
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d906      	bls.n	80040e0 <_ZN9LineTrace4flipEv+0x1d8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d8:	3338      	adds	r3, #56	; 0x38
 80040da:	f242 7210 	movw	r2, #10000	; 0x2710
 80040de:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80040ee:	d805      	bhi.n	80040fc <_ZN9LineTrace4flipEv+0x1f4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	330c      	adds	r3, #12
 80040f4:	2152      	movs	r1, #82	; 0x52
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fffc 	bl	80020f4 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004102:	333a      	adds	r3, #58	; 0x3a
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004110:	333a      	adds	r3, #58	; 0x3a
 8004112:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800411a:	333a      	adds	r3, #58	; 0x3a
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004122:	4293      	cmp	r3, r2
 8004124:	d906      	bls.n	8004134 <_ZN9LineTrace4flipEv+0x22c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800412c:	333a      	adds	r3, #58	; 0x3a
 800412e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004132:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800413a:	333a      	adds	r3, #58	; 0x3a
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	2bc8      	cmp	r3, #200	; 0xc8
 8004140:	d808      	bhi.n	8004154 <_ZN9LineTrace4flipEv+0x24c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	330c      	adds	r3, #12
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe f88d 	bl	800226c <_ZN3LED2LREaa>
 8004152:	e007      	b.n	8004164 <_ZN9LineTrace4flipEv+0x25c>
		else led_.LR(0, -1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	330c      	adds	r3, #12
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe f884 	bl	800226c <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800416a:	333c      	adds	r3, #60	; 0x3c
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004178:	333c      	adds	r3, #60	; 0x3c
 800417a:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004182:	333c      	adds	r3, #60	; 0x3c
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f242 720f 	movw	r2, #9999	; 0x270f
 800418a:	4293      	cmp	r3, r2
 800418c:	d906      	bls.n	800419c <_ZN9LineTrace4flipEv+0x294>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004194:	333c      	adds	r3, #60	; 0x3c
 8004196:	f242 7210 	movw	r2, #10000	; 0x2710
 800419a:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041a2:	333c      	adds	r3, #60	; 0x3c
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2bc8      	cmp	r3, #200	; 0xc8
 80041a8:	d806      	bhi.n	80041b8 <_ZN9LineTrace4flipEv+0x2b0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	330c      	adds	r3, #12
 80041ae:	2159      	movs	r1, #89	; 0x59
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd ff9f 	bl	80020f4 <_ZN3LED9fullColorEc>
		else led_.fullColor('B');

	}
}
 80041b6:	e005      	b.n	80041c4 <_ZN9LineTrace4flipEv+0x2bc>
		else led_.fullColor('B');
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	330c      	adds	r3, #12
 80041bc:	2142      	movs	r1, #66	; 0x42
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd ff98 	bl	80020f4 <_ZN3LED9fullColorEc>
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	42c80000 	.word	0x42c80000
 80041d0:	00000000 	.word	0x00000000

080041d4 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041e6:	3354      	adds	r3, #84	; 0x54
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	801a      	strh	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fd88 	bl	8005d2a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f9e2 	bl	80055e8 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800422a:	3318      	adds	r3, #24
 800422c:	2200      	movs	r2, #0
 800422e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004236:	331c      	adds	r3, #28
 8004238:	2200      	movs	r2, #0
 800423a:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004242:	331e      	adds	r3, #30
 8004244:	2200      	movs	r2, #0
 8004246:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800424e:	3320      	adds	r3, #32
 8004250:	2200      	movs	r2, #0
 8004252:	801a      	strh	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004268:	2300      	movs	r3, #0
 800426a:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 800426c:	2300      	movs	r3, #0
 800426e:	733b      	strb	r3, [r7, #12]
	start();
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffc1 	bl	80041f8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004276:	7b7b      	ldrb	r3, [r7, #13]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 80c6 	bne.w	800440a <_ZN9LineTrace7runningEv+0x1ae>
		switch(stage){
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d030      	beq.n	80042e6 <_ZN9LineTrace7runningEv+0x8a>
 8004284:	2b0a      	cmp	r3, #10
 8004286:	d03d      	beq.n	8004304 <_ZN9LineTrace7runningEv+0xa8>
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 80bd 	bne.w	8004408 <_ZN9LineTrace7runningEv+0x1ac>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f99c 	bl	80055d0 <_ZN10SideSensor10getStatusREv>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80af 	beq.w	80043fe <_ZN9LineTrace7runningEv+0x1a2>
				loggerStart();
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe fd45 	bl	8002d30 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042ac:	3354      	adds	r3, #84	; 0x54
 80042ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <_ZN9LineTrace7runningEv+0x60>
					startVelocityPlay();
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff f97a 	bl	80035b0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd f9fe 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd f9dc 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd ffc6 	bl	800226c <_ZN3LED2LREaa>
				stage = 5;
 80042e0:	2305      	movs	r3, #5
 80042e2:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042e4:	e08b      	b.n	80043fe <_ZN9LineTrace7runningEv+0x1a2>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f970 	bl	80055d0 <_ZN10SideSensor10getStatusREv>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f083 0301 	eor.w	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8082 	beq.w	8004402 <_ZN9LineTrace7runningEv+0x1a6>
 80042fe:	230a      	movs	r3, #10
 8004300:	81fb      	strh	r3, [r7, #14]

			break;
 8004302:	e07e      	b.n	8004402 <_ZN9LineTrace7runningEv+0x1a6>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f955 	bl	80055b8 <_ZN10SideSensor10getStatusLEv>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <_ZN9LineTrace7runningEv+0xd2>
				goal_judge_flag = false;
 8004314:	2300      	movs	r3, #0
 8004316:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd f9ed 	bl	80016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	330c      	adds	r3, #12
 8004326:	2142      	movs	r1, #66	; 0x42
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fee3 	bl	80020f4 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 800432e:	7b3b      	ldrb	r3, [r7, #12]
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d017      	beq.n	800436a <_ZN9LineTrace7runningEv+0x10e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4618      	mov	r0, r3
 8004340:	f001 f946 	bl	80055d0 <_ZN10SideSensor10getStatusREv>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00f      	beq.n	800436a <_ZN9LineTrace7runningEv+0x10e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd f9c5 	bl	80016de <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004354:	eeb0 7a40 	vmov.f32	s14, s0
 8004358:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800435c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	db01      	blt.n	800436a <_ZN9LineTrace7runningEv+0x10e>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <_ZN9LineTrace7runningEv+0x110>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <_ZN9LineTrace7runningEv+0x13c>
				goal_judge_flag = true;
 8004370:	2301      	movs	r3, #1
 8004372:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd f9bf 	bl	80016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004384:	333c      	adds	r3, #60	; 0x3c
 8004386:	2200      	movs	r2, #0
 8004388:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	330c      	adds	r3, #12
 800438e:	2159      	movs	r1, #89	; 0x59
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd feaf 	bl	80020f4 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 8004396:	e036      	b.n	8004406 <_ZN9LineTrace7runningEv+0x1aa>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 8004398:	7b3b      	ldrb	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00f      	beq.n	80043be <_ZN9LineTrace7runningEv+0x162>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f99b 	bl	80016de <_ZN7Encoder20getGoalJudgeDistanceEv>
 80043a8:	eeb0 7a40 	vmov.f32	s14, s0
 80043ac:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80043b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	db01      	blt.n	80043be <_ZN9LineTrace7runningEv+0x162>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <_ZN9LineTrace7runningEv+0x164>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <_ZN9LineTrace7runningEv+0x1aa>
				led_.fullColor('M');
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	330c      	adds	r3, #12
 80043c8:	214d      	movs	r1, #77	; 0x4d
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fe92 	bl	80020f4 <_ZN3LED9fullColorEc>
				loggerStop();
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe fcc8 	bl	8002d66 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f90a 	bl	80035f0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	f005 fc8f 	bl	8009d00 <HAL_Delay>
				setTargetVelocity(0);
 80043e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004418 <_ZN9LineTrace7runningEv+0x1bc>
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fc71 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043f0:	f005 fc86 	bl	8009d00 <HAL_Delay>
				goal_flag = true;
 80043f4:	2301      	movs	r3, #1
 80043f6:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 80043f8:	2300      	movs	r3, #0
 80043fa:	733b      	strb	r3, [r7, #12]
			break;
 80043fc:	e003      	b.n	8004406 <_ZN9LineTrace7runningEv+0x1aa>
			break;
 80043fe:	bf00      	nop
 8004400:	e739      	b.n	8004276 <_ZN9LineTrace7runningEv+0x1a>
			break;
 8004402:	bf00      	nop
 8004404:	e737      	b.n	8004276 <_ZN9LineTrace7runningEv+0x1a>
			break;
 8004406:	bf00      	nop
	while(goal_flag == false){
 8004408:	e735      	b.n	8004276 <_ZN9LineTrace7runningEv+0x1a>
		}
	}

	stop();
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f806 	bl	800441c <_ZN9LineTrace4stopEv>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00000000 	.word	0x00000000

0800441c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f001 fc8d 	bl	8005d50 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	330c      	adds	r3, #12
 800443a:	2201      	movs	r2, #1
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	4618      	mov	r0, r3
 8004442:	f7fd ff13 	bl	800226c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800444c:	3354      	adds	r3, #84	; 0x54
 800444e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11e      	bne.n	8004494 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69d8      	ldr	r0, [r3, #28]
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <_ZN9LineTrace4stopEv+0xe0>)
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <_ZN9LineTrace4stopEv+0xe4>)
 800445e:	4929      	ldr	r1, [pc, #164]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 8004460:	f000 fba6 	bl	8004bb0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800446a:	3358      	adds	r3, #88	; 0x58
 800446c:	2200      	movs	r2, #0
 800446e:	9200      	str	r2, [sp, #0]
 8004470:	2264      	movs	r2, #100	; 0x64
 8004472:	4925      	ldr	r1, [pc, #148]	; (8004508 <_ZN9LineTrace4stopEv+0xec>)
 8004474:	4823      	ldr	r0, [pc, #140]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 8004476:	f7fd f9c3 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004480:	3378      	adds	r3, #120	; 0x78
 8004482:	2200      	movs	r2, #0
 8004484:	9200      	str	r2, [sp, #0]
 8004486:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800448a:	4920      	ldr	r1, [pc, #128]	; (800450c <_ZN9LineTrace4stopEv+0xf0>)
 800448c:	481d      	ldr	r0, [pc, #116]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 800448e:	f7fd f9b7 	bl	8001800 <sd_write_array_float>
 8004492:	e01d      	b.n	80044d0 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69d8      	ldr	r0, [r3, #28]
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <_ZN9LineTrace4stopEv+0xf4>)
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <_ZN9LineTrace4stopEv+0xf8>)
 800449c:	4919      	ldr	r1, [pc, #100]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 800449e:	f000 fbab 	bl	8004bf8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044a8:	33e8      	adds	r3, #232	; 0xe8
 80044aa:	2200      	movs	r2, #0
 80044ac:	9200      	str	r2, [sp, #0]
 80044ae:	2264      	movs	r2, #100	; 0x64
 80044b0:	4919      	ldr	r1, [pc, #100]	; (8004518 <_ZN9LineTrace4stopEv+0xfc>)
 80044b2:	4814      	ldr	r0, [pc, #80]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 80044b4:	f7fd f9a4 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044be:	3348      	adds	r3, #72	; 0x48
 80044c0:	2200      	movs	r2, #0
 80044c2:	9200      	str	r2, [sp, #0]
 80044c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044c8:	4914      	ldr	r1, [pc, #80]	; (800451c <_ZN9LineTrace4stopEv+0x100>)
 80044ca:	480e      	ldr	r0, [pc, #56]	; (8004504 <_ZN9LineTrace4stopEv+0xe8>)
 80044cc:	f7fd f998 	bl	8001800 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	330c      	adds	r3, #12
 80044d4:	2200      	movs	r2, #0
 80044d6:	f04f 31ff 	mov.w	r1, #4294967295
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fec6 	bl	800226c <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fc1f 	bl	8004d28 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fbc6 	bl	8004c80 <_ZN6Logger10resetLogs2Ev>
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	08018c70 	.word	0x08018c70
 8004500:	08018c7c 	.word	0x08018c7c
 8004504:	08018c8c 	.word	0x08018c8c
 8004508:	08018c98 	.word	0x08018c98
 800450c:	08018ca8 	.word	0x08018ca8
 8004510:	08018cb4 	.word	0x08018cb4
 8004514:	08018cc0 	.word	0x08018cc0
 8004518:	08018cd0 	.word	0x08018cd0
 800451c:	08018ce0 	.word	0x08018ce0

08004520 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b08b      	sub	sp, #44	; 0x2c
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 faf8 	bl	8004b22 <_ZN6Logger23getDistanceArrayPointerEv>
 8004532:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb00 	bl	8004b3e <_ZN6Logger20getThetaArrayPointerEv>
 800453e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004540:	2300      	movs	r3, #0
 8004542:	837b      	strh	r3, [r7, #26]
 8004544:	8b7b      	ldrh	r3, [r7, #26]
 8004546:	f241 726f 	movw	r2, #5999	; 0x176f
 800454a:	4293      	cmp	r3, r2
 800454c:	d84b      	bhi.n	80045e6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800454e:	8b7b      	ldrh	r3, [r7, #26]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800455a:	8b7b      	ldrh	r3, [r7, #26]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004566:	edd7 7a07 	vldr	s15, [r7, #28]
 800456a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d101      	bne.n	8004578 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004574:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004576:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004578:	ed97 7a02 	vldr	s14, [r7, #8]
 800457c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004580:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004584:	eeb0 0a66 	vmov.f32	s0, s13
 8004588:	f7fe f976 	bl	8002878 <_ZSt3absf>
 800458c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004590:	edd7 7a05 	vldr	s15, [r7, #20]
 8004594:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80046ac <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	db01      	blt.n	80045a6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80045a2:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80045a4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80045a6:	8b7c      	ldrh	r4, [r7, #26]
 80045a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe fdf9 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 80045b2:	eef0 7a40 	vmov.f32	s15, s0
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045bc:	3304      	adds	r3, #4
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045c6:	8b7b      	ldrh	r3, [r7, #26]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	441a      	add	r2, r3
 80045ce:	8b7b      	ldrh	r3, [r7, #26]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3304      	adds	r3, #4
 80045dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	3301      	adds	r3, #1
 80045e2:	837b      	strh	r3, [r7, #26]
 80045e4:	e7ae      	b.n	8004544 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045ec:	3354      	adds	r3, #84	; 0x54
 80045ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d120      	bne.n	8004638 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004602:	3310      	adds	r3, #16
 8004604:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800460c:	332c      	adds	r3, #44	; 0x2c
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fe fe81 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004624:	3328      	adds	r3, #40	; 0x28
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	eeb0 0a67 	vmov.f32	s0, s15
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fe ff19 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004636:	e027      	b.n	8004688 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800463e:	3354      	adds	r3, #84	; 0x54
 8004640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11f      	bne.n	8004688 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004654:	3310      	adds	r3, #16
 8004656:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800465e:	3334      	adds	r3, #52	; 0x34
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	6939      	ldr	r1, [r7, #16]
 8004666:	eeb0 0a67 	vmov.f32	s0, s15
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fe fe58 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004676:	3330      	adds	r3, #48	; 0x30
 8004678:	edd3 7a00 	vldr	s15, [r3]
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	eeb0 0a67 	vmov.f32	s0, s15
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe fef0 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800468e:	3310      	adds	r3, #16
 8004690:	2200      	movs	r2, #0
 8004692:	9200      	str	r2, [sp, #0]
 8004694:	f241 7270 	movw	r2, #6000	; 0x1770
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800469a:	4807      	ldr	r0, [pc, #28]	; (80046b8 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800469c:	f7fd f8b0 	bl	8001800 <sd_write_array_float>

}
 80046a0:	bf00      	nop
 80046a2:	3724      	adds	r7, #36	; 0x24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	3727c5ac 	.word	0x3727c5ac
 80046ac:	459c4000 	.word	0x459c4000
 80046b0:	459c4000 	.word	0x459c4000
 80046b4:	08018cf0 	.word	0x08018cf0
 80046b8:	08018c8c 	.word	0x08018c8c

080046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b08b      	sub	sp, #44	; 0x2c
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69d8      	ldr	r0, [r3, #28]
 80046c8:	4b6b      	ldr	r3, [pc, #428]	; (8004878 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046ca:	4a6c      	ldr	r2, [pc, #432]	; (800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046cc:	496c      	ldr	r1, [pc, #432]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046ce:	f000 fab7 	bl	8004c40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046d8:	3358      	adds	r3, #88	; 0x58
 80046da:	2264      	movs	r2, #100	; 0x64
 80046dc:	4969      	ldr	r1, [pc, #420]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046de:	4868      	ldr	r0, [pc, #416]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046e0:	f7fd f8f4 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046ea:	3378      	adds	r3, #120	; 0x78
 80046ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046f0:	4965      	ldr	r1, [pc, #404]	; (8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046f2:	4863      	ldr	r0, [pc, #396]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046f4:	f7fd f8ea 	bl	80018cc <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fa10 	bl	8004b22 <_ZN6Logger23getDistanceArrayPointerEv>
 8004702:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa18 	bl	8004b3e <_ZN6Logger20getThetaArrayPointerEv>
 800470e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004710:	2300      	movs	r3, #0
 8004712:	837b      	strh	r3, [r7, #26]
 8004714:	8b7b      	ldrh	r3, [r7, #26]
 8004716:	f241 726f 	movw	r2, #5999	; 0x176f
 800471a:	4293      	cmp	r3, r2
 800471c:	d84b      	bhi.n	80047b6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800471e:	8b7b      	ldrh	r3, [r7, #26]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800472a:	8b7b      	ldrh	r3, [r7, #26]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004736:	edd7 7a07 	vldr	s15, [r7, #28]
 800473a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d101      	bne.n	8004748 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004744:	4b51      	ldr	r3, [pc, #324]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004746:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004748:	ed97 7a02 	vldr	s14, [r7, #8]
 800474c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004750:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004754:	eeb0 0a66 	vmov.f32	s0, s13
 8004758:	f7fe f88e 	bl	8002878 <_ZSt3absf>
 800475c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004760:	edd7 7a05 	vldr	s15, [r7, #20]
 8004764:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004890 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	db01      	blt.n	8004776 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004772:	4b48      	ldr	r3, [pc, #288]	; (8004894 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004774:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004776:	8b7c      	ldrh	r4, [r7, #26]
 8004778:	ed97 0a05 	vldr	s0, [r7, #20]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fe fd11 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 8004782:	eef0 7a40 	vmov.f32	s15, s0
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800478c:	3304      	adds	r3, #4
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004796:	8b7b      	ldrh	r3, [r7, #26]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	441a      	add	r2, r3
 800479e:	8b7b      	ldrh	r3, [r7, #26]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	3304      	adds	r3, #4
 80047ac:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047ae:	8b7b      	ldrh	r3, [r7, #26]
 80047b0:	3301      	adds	r3, #1
 80047b2:	837b      	strh	r3, [r7, #26]
 80047b4:	e7ae      	b.n	8004714 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047bc:	3354      	adds	r3, #84	; 0x54
 80047be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d120      	bne.n	8004808 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047d2:	3310      	adds	r3, #16
 80047d4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047dc:	332c      	adds	r3, #44	; 0x2c
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	eeb0 0a67 	vmov.f32	s0, s15
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fe fd99 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f4:	3328      	adds	r3, #40	; 0x28
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fe fe31 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004806:	e027      	b.n	8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800480e:	3354      	adds	r3, #84	; 0x54
 8004810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d11f      	bne.n	8004858 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004824:	3310      	adds	r3, #16
 8004826:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800482e:	3334      	adds	r3, #52	; 0x34
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	6939      	ldr	r1, [r7, #16]
 8004836:	eeb0 0a67 	vmov.f32	s0, s15
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fe fd70 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004846:	3330      	adds	r3, #48	; 0x30
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	6939      	ldr	r1, [r7, #16]
 800484e:	eeb0 0a67 	vmov.f32	s0, s15
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fe fe08 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800485e:	3310      	adds	r3, #16
 8004860:	2200      	movs	r2, #0
 8004862:	9200      	str	r2, [sp, #0]
 8004864:	f241 7270 	movw	r2, #6000	; 0x1770
 8004868:	490b      	ldr	r1, [pc, #44]	; (8004898 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800486c:	f7fc ffc8 	bl	8001800 <sd_write_array_float>

}
 8004870:	bf00      	nop
 8004872:	3724      	adds	r7, #36	; 0x24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	08018c70 	.word	0x08018c70
 800487c:	08018c7c 	.word	0x08018c7c
 8004880:	08018c8c 	.word	0x08018c8c
 8004884:	08018c98 	.word	0x08018c98
 8004888:	08018ca8 	.word	0x08018ca8
 800488c:	3727c5ac 	.word	0x3727c5ac
 8004890:	459c4000 	.word	0x459c4000
 8004894:	459c4000 	.word	0x459c4000
 8004898:	08018cf0 	.word	0x08018cf0

0800489c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048b8:	f203 2382 	addw	r3, r3, #642	; 0x282
 80048bc:	2200      	movs	r2, #0
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048ca:	2200      	movs	r2, #0
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048d4:	f203 2386 	addw	r3, r3, #646	; 0x286
 80048d8:	2200      	movs	r2, #0
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048e6:	2200      	movs	r2, #0
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048f0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004914:	f7fd f866 	bl	80019e4 <sd_mount>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004928:	f7fc fbba 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800492c:	2100      	movs	r1, #0
 800492e:	2000      	movs	r0, #0
 8004930:	f7fc fbc6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004934:	4815      	ldr	r0, [pc, #84]	; (800498c <_ZN6Logger10sdCardInitEv+0x84>)
 8004936:	f7fc fbed 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800493a:	2101      	movs	r1, #1
 800493c:	2000      	movs	r0, #0
 800493e:	f7fc fbbf 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004942:	4813      	ldr	r0, [pc, #76]	; (8004990 <_ZN6Logger10sdCardInitEv+0x88>)
 8004944:	f7fc fbe6 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800494c:	f005 f9d8 	bl	8009d00 <HAL_Delay>

	  ret = true;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	e015      	b.n	8004982 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004956:	f7fc fba3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800495a:	2100      	movs	r1, #0
 800495c:	2000      	movs	r0, #0
 800495e:	f7fc fbaf 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004962:	480a      	ldr	r0, [pc, #40]	; (800498c <_ZN6Logger10sdCardInitEv+0x84>)
 8004964:	f7fc fbd6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004968:	2101      	movs	r1, #1
 800496a:	2000      	movs	r0, #0
 800496c:	f7fc fba8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004972:	f7fc fbcf 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800497a:	f005 f9c1 	bl	8009d00 <HAL_Delay>

	  ret = false;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08018d00 	.word	0x08018d00
 8004990:	08018d0c 	.word	0x08018d0c
 8004994:	08018d14 	.word	0x08018d14

08004998 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d028      	beq.n	8004a06 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049ba:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049d0:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049e0:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049e4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049ec:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80049f6:	d306      	bcc.n	8004a06 <_ZN6Logger8storeLogEf+0x6e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049fe:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004a02:	2200      	movs	r2, #0
 8004a04:	801a      	strh	r2, [r3, #0]
	}
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a34:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a4e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a5e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a62:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a6a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a74:	d306      	bcc.n	8004a84 <_ZN6Logger9storeLog2Ef+0x72>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a7c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a80:	2200      	movs	r2, #0
 8004a82:	801a      	strh	r2, [r3, #0]
	}
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a9c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004aa6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004ab2:	3320      	adds	r3, #32
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ac2:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004ace:	3350      	adds	r3, #80	; 0x50
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ade:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004aee:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004af2:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004afa:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d906      	bls.n	8004b16 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b0e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b30:	3380      	adds	r3, #128	; 0x80
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f7fc fe42 	bl	8001800 <sd_write_array_float>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f7fc fe2c 	bl	8001800 <sd_write_array_float>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004bc4:	3380      	adds	r3, #128	; 0x80
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	9200      	str	r2, [sp, #0]
 8004bca:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	68b8      	ldr	r0, [r7, #8]
 8004bd2:	f7fc fe15 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004bdc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004be0:	2200      	movs	r2, #0
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004be8:	6839      	ldr	r1, [r7, #0]
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	f7fc fe08 	bl	8001800 <sd_write_array_float>
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c10:	2200      	movs	r2, #0
 8004c12:	9200      	str	r2, [sp, #0]
 8004c14:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f7fc fdf0 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c26:	33c0      	adds	r3, #192	; 0xc0
 8004c28:	2200      	movs	r2, #0
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f7fc fde4 	bl	8001800 <sd_write_array_float>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c54:	3380      	adds	r3, #128	; 0x80
 8004c56:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f7fc fe35 	bl	80018cc <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c6c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	68b8      	ldr	r0, [r7, #8]
 8004c74:	f7fc fe2a 	bl	80018cc <sd_read_array_float>
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004c80:	b480      	push	{r7}
 8004c82:	b08b      	sub	sp, #44	; 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c9e:	3340      	adds	r3, #64	; 0x40
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d009      	beq.n	8004cbe <_ZN6Logger10resetLogs2Ev+0x3e>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	617b      	str	r3, [r7, #20]
		log = 0;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3304      	adds	r3, #4
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	e7f1      	b.n	8004ca2 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cc4:	33c0      	adds	r3, #192	; 0xc0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cd2:	3340      	adds	r3, #64	; 0x40
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d009      	beq.n	8004cf2 <_ZN6Logger10resetLogs2Ev+0x72>
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3304      	adds	r3, #4
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	e7f1      	b.n	8004cd6 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004cf8:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d06:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d14:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d18:	2200      	movs	r2, #0
 8004d1a:	801a      	strh	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	372c      	adds	r7, #44	; 0x2c
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d36:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d44:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d48:	2200      	movs	r2, #0
 8004d4a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d52:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d56:	2200      	movs	r2, #0
 8004d58:	801a      	strh	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d74:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d78:	2200      	movs	r2, #0
 8004d7a:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d82:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d86:	2200      	movs	r2, #0
 8004d88:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004db2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	805a      	strh	r2, [r3, #2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004df0:	2108      	movs	r1, #8
 8004df2:	4805      	ldr	r0, [pc, #20]	; (8004e08 <_ZN5Motor4initEv+0x20>)
 8004df4:	f00a f94c 	bl	800f090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004df8:	210c      	movs	r1, #12
 8004dfa:	4803      	ldr	r0, [pc, #12]	; (8004e08 <_ZN5Motor4initEv+0x20>)
 8004dfc:	f00a f948 	bl	800f090 <HAL_TIM_PWM_Start>

}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	2004a5e8 	.word	0x2004a5e8

08004e0c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da0d      	bge.n	8004e3a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e24:	481f      	ldr	r0, [pc, #124]	; (8004ea4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e26:	f006 fa01 	bl	800b22c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	425b      	negs	r3, r3
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	81fb      	strh	r3, [r7, #14]
 8004e38:	e00a      	b.n	8004e50 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e40:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e42:	f006 f9f3 	bl	800b22c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0d      	bge.n	8004e76 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e60:	4810      	ldr	r0, [pc, #64]	; (8004ea4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e62:	f006 f9e3 	bl	800b22c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	425b      	negs	r3, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	81bb      	strh	r3, [r7, #12]
 8004e74:	e00a      	b.n	8004e8c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e76:	2200      	movs	r2, #0
 8004e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e7c:	4809      	ldr	r0, [pc, #36]	; (8004ea4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e7e:	f006 f9d5 	bl	800b22c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004e8c:	89fa      	ldrh	r2, [r7, #14]
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004e94:	89ba      	ldrh	r2, [r7, #12]
 8004e96:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40020c00 	.word	0x40020c00
 8004ea8:	2004a5e8 	.word	0x2004a5e8

08004eac <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6178      	str	r0, [r7, #20]
 8004eb4:	ed87 0b02 	vstr	d0, [r7, #8]
 8004eb8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ec6:	f7fb fe3f 	bl	8000b48 <__aeabi_dcmpgt>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <_ZN5Motor8setRatioEdd+0x30>
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	4c2b      	ldr	r4, [pc, #172]	; (8004f84 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ed6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004eda:	e00e      	b.n	8004efa <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ee6:	f7fb fe11 	bl	8000b0c <__aeabi_dcmplt>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <_ZN5Motor8setRatioEdd+0x4e>
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	4c24      	ldr	r4, [pc, #144]	; (8004f88 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ef6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f04:	f7fb fe20 	bl	8000b48 <__aeabi_dcmpgt>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <_ZN5Motor8setRatioEdd+0x6e>
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	4c1c      	ldr	r4, [pc, #112]	; (8004f84 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f14:	e9c7 3400 	strd	r3, r4, [r7]
 8004f18:	e00e      	b.n	8004f38 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f24:	f7fb fdf2 	bl	8000b0c <__aeabi_dcmplt>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <_ZN5Motor8setRatioEdd+0x8c>
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	4c15      	ldr	r4, [pc, #84]	; (8004f88 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f34:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <_ZN5Motor8setRatioEdd+0xe0>)
 8004f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f42:	f7fb fb71 	bl	8000628 <__aeabi_dmul>
 8004f46:	4603      	mov	r3, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	f7fb fe1b 	bl	8000b88 <__aeabi_d2iz>
 8004f52:	4603      	mov	r3, r0
 8004f54:	b21a      	sxth	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <_ZN5Motor8setRatioEdd+0xe0>)
 8004f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f64:	f7fb fb60 	bl	8000628 <__aeabi_dmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	4621      	mov	r1, r4
 8004f70:	f7fb fe0a 	bl	8000b88 <__aeabi_d2iz>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b21a      	sxth	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	805a      	strh	r2, [r3, #2]

}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}
 8004f84:	3ff00000 	.word	0x3ff00000
 8004f88:	bff00000 	.word	0xbff00000
 8004f8c:	409c2000 	.word	0x409c2000

08004f90 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004f90:	b490      	push	{r4, r7}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	f04f 0400 	mov.w	r4, #0
 8004fb6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	609a      	str	r2, [r3, #8]
}
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc90      	pop	{r4, r7}
 8005000:	4770      	bx	lr
 8005002:	0000      	movs	r0, r0
 8005004:	0000      	movs	r0, r0
	...

08005008 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fc feab 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 800501a:	ee10 3a10 	vmov	r3, s0
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb faaa 	bl	8000578 <__aeabi_f2d>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 800502c:	a310      	add	r3, pc, #64	; (adr r3, 8005070 <_ZN8Odometry12calcPotitionEv+0x68>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005036:	f7fb faf7 	bl	8000628 <__aeabi_dmul>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005050:	461a      	mov	r2, r3
 8005052:	4623      	mov	r3, r4
 8005054:	f7fb f932 	bl	80002bc <__adddf3>
 8005058:	4603      	mov	r3, r0
 800505a:	460c      	mov	r4, r1
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
 8005070:	d2f1a9fc 	.word	0xd2f1a9fc
 8005074:	3f50624d 	.word	0x3f50624d

08005078 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ffc1 	bl	8005008 <_ZN8Odometry12calcPotitionEv>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800508e:	b490      	push	{r4, r7}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
	return theta_;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800509c:	ec44 3b17 	vmov	d7, r3, r4
}
 80050a0:	eeb0 0a47 	vmov.f32	s0, s14
 80050a4:	eef0 0a67 	vmov.f32	s1, s15
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc90      	pop	{r4, r7}
 80050ae:	4770      	bx	lr

080050b0 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 80050b0:	b490      	push	{r4, r7}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80050be:	ec44 3b17 	vmov	d7, r3, r4
}
 80050c2:	eeb0 0a47 	vmov.f32	s0, s14
 80050c6:	eef0 0a67 	vmov.f32	s1, s15
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc90      	pop	{r4, r7}
 80050d0:	4770      	bx	lr

080050d2 <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 80050d2:	b490      	push	{r4, r7}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bc90      	pop	{r4, r7}
 800510c:	4770      	bx	lr
	...

08005110 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005110:	b490      	push	{r4, r7}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f04f 0400 	mov.w	r4, #0
 8005128:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	f04f 0400 	mov.w	r4, #0
 8005136:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800514e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005152:	2200      	movs	r2, #0
 8005154:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005156:	4a29      	ldr	r2, [pc, #164]	; (80051fc <_ZN13PathFollowingC1Ev+0xec>)
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005164:	4a25      	ldr	r2, [pc, #148]	; (80051fc <_ZN13PathFollowingC1Ev+0xec>)
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <_ZN13PathFollowingC1Ev+0xec>)
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005180:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800518e:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <_ZN13PathFollowingC1Ev+0xf0>)
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051d4:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <_ZN13PathFollowingC1Ev+0xf4>)
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <_ZN13PathFollowingC1Ev+0xf4>)
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc90      	pop	{r4, r7}
 80051fa:	4770      	bx	lr
 80051fc:	2004aae8 	.word	0x2004aae8
 8005200:	2004aa78 	.word	0x2004aa78
 8005204:	2004aad8 	.word	0x2004aad8

08005208 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005210:	f001 fd62 	bl	8006cd8 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	2201      	movs	r2, #1
 800521a:	4915      	ldr	r1, [pc, #84]	; (8005270 <_ZN13PathFollowing4initEv+0x68>)
 800521c:	4815      	ldr	r0, [pc, #84]	; (8005274 <_ZN13PathFollowing4initEv+0x6c>)
 800521e:	f7fc fb9b 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	2201      	movs	r2, #1
 8005228:	4913      	ldr	r1, [pc, #76]	; (8005278 <_ZN13PathFollowing4initEv+0x70>)
 800522a:	4812      	ldr	r0, [pc, #72]	; (8005274 <_ZN13PathFollowing4initEv+0x6c>)
 800522c:	f7fc fb94 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	2201      	movs	r2, #1
 8005236:	4911      	ldr	r1, [pc, #68]	; (800527c <_ZN13PathFollowing4initEv+0x74>)
 8005238:	480e      	ldr	r0, [pc, #56]	; (8005274 <_ZN13PathFollowing4initEv+0x6c>)
 800523a:	f7fc fb8d 	bl	8001958 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800523e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005242:	ed97 6b04 	vldr	d6, [r7, #16]
 8005246:	ed97 5b02 	vldr	d5, [r7, #8]
 800524a:	eeb0 2a45 	vmov.f32	s4, s10
 800524e:	eef0 2a65 	vmov.f32	s5, s11
 8005252:	eeb0 1a46 	vmov.f32	s2, s12
 8005256:	eef0 1a66 	vmov.f32	s3, s13
 800525a:	eeb0 0a47 	vmov.f32	s0, s14
 800525e:	eef0 0a67 	vmov.f32	s1, s15
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f80c 	bl	8005280 <_ZN13PathFollowing7setGainEddd>
}
 8005268:	bf00      	nop
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	08018d1c 	.word	0x08018d1c
 8005274:	08018d24 	.word	0x08018d24
 8005278:	08018d2c 	.word	0x08018d2c
 800527c:	08018d34 	.word	0x08018d34

08005280 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005280:	b490      	push	{r4, r7}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	61f8      	str	r0, [r7, #28]
 8005288:	ed87 0b04 	vstr	d0, [r7, #16]
 800528c:	ed87 1b02 	vstr	d1, [r7, #8]
 8005290:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005296:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800529a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052a8:	4a04      	ldr	r2, [pc, #16]	; (80052bc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052ae:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052b2:	bf00      	nop
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc90      	pop	{r4, r7}
 80052ba:	4770      	bx	lr
 80052bc:	2004aae8 	.word	0x2004aae8

080052c0 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052c8:	2088      	movs	r0, #136	; 0x88
 80052ca:	f7fc fe94 	bl	8001ff6 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052ce:	2080      	movs	r0, #128	; 0x80
 80052d0:	f7fc fe91 	bl	8001ff6 <INA260_init>
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	0000      	movs	r0, r0
	...

080052e0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052e8:	2188      	movs	r1, #136	; 0x88
 80052ea:	2002      	movs	r0, #2
 80052ec:	f7fc fe20 	bl	8001f30 <INA260_read>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f92e 	bl	8000554 <__aeabi_i2d>
 80052f8:	a30c      	add	r3, pc, #48	; (adr r3, 800532c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f993 	bl	8000628 <__aeabi_dmul>
 8005302:	4603      	mov	r3, r0
 8005304:	460c      	mov	r4, r1
 8005306:	4618      	mov	r0, r3
 8005308:	4621      	mov	r1, r4
 800530a:	f7fb fc85 	bl	8000c18 <__aeabi_d2f>
 800530e:	4602      	mov	r2, r0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a03      	ldr	r2, [pc, #12]	; (8005328 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}
 8005324:	f3af 8000 	nop.w
 8005328:	20000220 	.word	0x20000220
 800532c:	47ae147b 	.word	0x47ae147b
 8005330:	3f547ae1 	.word	0x3f547ae1

08005334 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	ee07 3a90 	vmov	s15, r3

}
 8005344:	eeb0 0a67 	vmov.f32	s0, s15
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005360:	2102      	movs	r1, #2
 8005362:	4822      	ldr	r0, [pc, #136]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005364:	f005 ff4a 	bl	800b1fc <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005380:	2108      	movs	r1, #8
 8005382:	481a      	ldr	r0, [pc, #104]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005384:	f005 ff3a 	bl	800b1fc <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053a0:	2110      	movs	r1, #16
 80053a2:	4812      	ldr	r0, [pc, #72]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80053a4:	f005 ff2a 	bl	800b1fc <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	480a      	ldr	r0, [pc, #40]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80053c4:	f005 ff1a 	bl	800b1fc <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	f043 0308 	orr.w	r3, r3, #8
 80053de:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053e0:	89fb      	ldrh	r3, [r7, #14]

}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40020c00 	.word	0x40020c00

080053f0 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	709a      	strb	r2, [r3, #2]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	70da      	strb	r2, [r3, #3]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	809a      	strh	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	80da      	strh	r2, [r3, #6]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	721a      	strb	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	815a      	strh	r2, [r3, #10]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	819a      	strh	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	739a      	strb	r2, [r3, #14]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	73da      	strb	r2, [r3, #15]
{

}
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 800544c:	2104      	movs	r1, #4
 800544e:	480e      	ldr	r0, [pc, #56]	; (8005488 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005450:	f005 fed4 	bl	800b1fc <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005470:	e005      	b.n	800547e <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	739a      	strb	r2, [r3, #14]
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 8005494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005498:	480d      	ldr	r0, [pc, #52]	; (80054d0 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 800549a:	f005 feaf 	bl	800b1fc <HAL_GPIO_ReadPin>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 80054ba:	e005      	b.n	80054c8 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	73da      	strb	r2, [r3, #15]
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40020c00 	.word	0x40020c00

080054d4 <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	timer_R_++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	895b      	ldrh	r3, [r3, #10]
 80054e0:	3301      	adds	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	899b      	ldrh	r3, [r3, #12]
 80054ec:	3301      	adds	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	895b      	ldrh	r3, [r3, #10]
 80054f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d903      	bls.n	8005508 <_ZN10SideSensor12updateStatusEv+0x34>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f242 7210 	movw	r2, #10000	; 0x2710
 8005506:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	899b      	ldrh	r3, [r3, #12]
 800550c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005510:	4293      	cmp	r3, r2
 8005512:	d903      	bls.n	800551c <_ZN10SideSensor12updateStatusEv+0x48>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f242 7210 	movw	r2, #10000	; 0x2710
 800551a:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7a1b      	ldrb	r3, [r3, #8]
 8005520:	f083 0301 	eor.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d019      	beq.n	800555e <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7b9b      	ldrb	r3, [r3, #14]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <_ZN10SideSensor12updateStatusEv+0x6e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	895b      	ldrh	r3, [r3, #10]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d903      	bls.n	8005542 <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	70da      	strb	r2, [r3, #3]
 8005540:	e00d      	b.n	800555e <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7b9b      	ldrb	r3, [r3, #14]
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d006      	beq.n	800555e <_ZN10SideSensor12updateStatusEv+0x8a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	895b      	ldrh	r3, [r3, #10]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d902      	bls.n	800555e <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	7bdb      	ldrb	r3, [r3, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <_ZN10SideSensor12updateStatusEv+0xa2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	899b      	ldrh	r3, [r3, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d903      	bls.n	8005576 <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	709a      	strb	r2, [r3, #2]
 8005574:	e00d      	b.n	8005592 <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7bdb      	ldrb	r3, [r3, #15]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d006      	beq.n	8005592 <_ZN10SideSensor12updateStatusEv+0xbe>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	899b      	ldrh	r3, [r3, #12]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d902      	bls.n	8005592 <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	78da      	ldrb	r2, [r3, #3]
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005598:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	789a      	ldrb	r2, [r3, #2]
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <_ZN10SideSensor12updateStatusEv+0xe0>)
 80055a0:	701a      	strb	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000225 	.word	0x20000225
 80055b4:	20000224 	.word	0x20000224

080055b8 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	return status_L_;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	789b      	ldrb	r3, [r3, #2]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	return status_R_;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	78db      	ldrb	r3, [r3, #3]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	80da      	strh	r2, [r3, #6]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	721a      	strb	r2, [r3, #8]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	721a      	strb	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7a1b      	ldrb	r3, [r3, #8]
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3308      	adds	r3, #8
 8005664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f00f f87e 	bl	801476c <memset>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005676:	811a      	strh	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567e:	815a      	strh	r2, [r3, #10]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005686:	819a      	strh	r2, [r3, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800568e:	81da      	strh	r2, [r3, #14]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005696:	821a      	strh	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800569e:	825a      	strh	r2, [r3, #18]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	829a      	strh	r2, [r3, #20]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	82da      	strh	r2, [r3, #22]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	831a      	strh	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	835a      	strh	r2, [r3, #26]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	839a      	strh	r2, [r3, #28]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	83da      	strh	r2, [r3, #30]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	841a      	strh	r2, [r3, #32]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d0:	845a      	strh	r2, [r3, #34]	; 0x22
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	849a      	strh	r2, [r3, #36]	; 0x24
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056de:	84da      	strh	r2, [r3, #38]	; 0x26
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056fa:	85da      	strh	r2, [r3, #46]	; 0x2e
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005702:	861a      	strh	r2, [r3, #48]	; 0x30
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	865a      	strh	r2, [r3, #50]	; 0x32
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005716:	86da      	strh	r2, [r3, #54]	; 0x36
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005776:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fa:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005814:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005826:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005840:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005864:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005880:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005892:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058dc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005934:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005946:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005958:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005984:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b0:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	615a      	str	r2, [r3, #20]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	619a      	str	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	61da      	str	r2, [r3, #28]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	621a      	str	r2, [r3, #32]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	0000      	movs	r0, r0
 8005a7c:	0000      	movs	r0, r0
	...

08005a80 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	f107 020c 	add.w	r2, r7, #12
 8005a90:	f107 0110 	add.w	r1, r7, #16
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fb fd99 	bl	80015cc <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aa6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aae:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7fa fd60 	bl	8000578 <__aeabi_f2d>
 8005ab8:	a30e      	add	r3, pc, #56	; (adr r3, 8005af4 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fdb3 	bl	8000628 <__aeabi_dmul>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	4621      	mov	r1, r4
 8005aca:	f7fb f8a5 	bl	8000c18 <__aeabi_d2f>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005ada:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	ee07 3a90 	vmov	s15, r3
}
 8005ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000228 	.word	0x20000228
 8005af4:	1ab1d998 	.word	0x1ab1d998
 8005af8:	3f7830b5 	.word	0x3f7830b5
 8005afc:	00000000 	.word	0x00000000

08005b00 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	ed93 7a00 	vldr	s14, [r3]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b18:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005b26:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005b48:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fa fd13 	bl	8000578 <__aeabi_f2d>
 8005b52:	4604      	mov	r4, r0
 8005b54:	460d      	mov	r5, r1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b64:	ee17 0a90 	vmov	r0, s15
 8005b68:	f7fa fd06 	bl	8000578 <__aeabi_f2d>
 8005b6c:	a334      	add	r3, pc, #208	; (adr r3, 8005c40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fd59 	bl	8000628 <__aeabi_dmul>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	f7fa fb9d 	bl	80002bc <__adddf3>
 8005b82:	4603      	mov	r3, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	4618      	mov	r0, r3
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f7fb f845 	bl	8000c18 <__aeabi_d2f>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b92:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005b9c:	edd3 7a00 	vldr	s15, [r3]
 8005ba0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ba4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bac:	ee17 0a90 	vmov	r0, s15
 8005bb0:	f7fa fce2 	bl	8000578 <__aeabi_f2d>
 8005bb4:	a322      	add	r3, pc, #136	; (adr r3, 8005c40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fe5f 	bl	800087c <__aeabi_ddiv>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	f7fb f827 	bl	8000c18 <__aeabi_d2f>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005bce:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005bdc:	edd3 7a00 	vldr	s15, [r3]
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfa:	ee17 0a90 	vmov	r0, s15
 8005bfe:	f7fa fcbb 	bl	8000578 <__aeabi_f2d>
 8005c02:	4605      	mov	r5, r0
 8005c04:	460e      	mov	r6, r1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c14:	ee17 0a90 	vmov	r0, s15
 8005c18:	f7fa fcae 	bl	8000578 <__aeabi_f2d>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	ec43 2b11 	vmov	d1, r2, r3
 8005c24:	ec46 5b10 	vmov	d0, r5, r6
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff f93f 	bl	8004eac <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005c2e:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	6013      	str	r3, [r2, #0]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	f3af 8000 	nop.w
 8005c40:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c44:	3f50624d 	.word	0x3f50624d
 8005c48:	20000230 	.word	0x20000230
 8005c4c:	2000022c 	.word	0x2000022c

08005c50 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c5c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c84:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cac:	edc7 0a01 	vstr	s1, [r7, #4]
 8005cb0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cde:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ce2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	621a      	str	r2, [r3, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff feb7 	bl	8005a80 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff feef 	bl	8005b00 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005d80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005d80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff f89d 	bl	8004eac <_ZN5Motor8setRatioEdd>

}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w
	...

08005d88 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	ee07 3a90 	vmov	s15, r3
}
 8005d98:	eeb0 0a67 	vmov.f32	s0, s15
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	4603      	mov	r3, r0
 8005dae:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 fe68 	bl	8007a88 <cppExit>
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10e      	bne.n	8005df0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005dd2:	f001 fe31 	bl	8007a38 <cppFlip100ns>

		tim7_timer++;
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005dde:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1a      	ldr	r2, [pc, #104]	; (8005e50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d902      	bls.n	8005df0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005dea:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005dfa:	f001 fded 	bl	80079d8 <cppFlip1ms>

		tim6_timer++;
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e06:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005e08:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d902      	bls.n	8005e18 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a0f      	ldr	r2, [pc, #60]	; (8005e5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10e      	bne.n	8005e40 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005e22:	f001 fe13 	bl	8007a4c <cppFlip10ms>

		tim13_timer++;
 8005e26:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e2e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d902      	bls.n	8005e40 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
	}

}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40001400 	.word	0x40001400
 8005e4c:	2004a79c 	.word	0x2004a79c
 8005e50:	0001869f 	.word	0x0001869f
 8005e54:	40001000 	.word	0x40001000
 8005e58:	2004a758 	.word	0x2004a758
 8005e5c:	40001c00 	.word	0x40001c00
 8005e60:	2004a7a0 	.word	0x2004a7a0

08005e64 <init>:

void init()
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e6e:	4808      	ldr	r0, [pc, #32]	; (8005e90 <init+0x2c>)
 8005e70:	f005 f9dc 	bl	800b22c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005e74:	4807      	ldr	r0, [pc, #28]	; (8005e94 <init+0x30>)
 8005e76:	f009 f8bc 	bl	800eff2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005e7a:	4807      	ldr	r0, [pc, #28]	; (8005e98 <init+0x34>)
 8005e7c:	f009 f8b9 	bl	800eff2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005e80:	4806      	ldr	r0, [pc, #24]	; (8005e9c <init+0x38>)
 8005e82:	f009 f8b6 	bl	800eff2 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005e86:	f001 fd05 	bl	8007894 <cppInit>

	//path_following_initialize();

}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	2004a884 	.word	0x2004a884
 8005e98:	2004aa28 	.word	0x2004aa28
 8005e9c:	2004a7a4 	.word	0x2004a7a4

08005ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ea4:	f003 feba 	bl	8009c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ea8:	f000 f82a 	bl	8005f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eac:	f000 fdbc 	bl	8006a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005eb0:	f000 fd8a 	bl	80069c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8005eb4:	f000 f9e8 	bl	8006288 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005eb8:	f000 fa14 	bl	80062e4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005ebc:	f000 fa32 	bl	8006324 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005ec0:	f000 fa66 	bl	8006390 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005ec4:	f000 fb70 	bl	80065a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005ec8:	f000 fc3c 	bl	8006744 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005ecc:	f000 fd52 	bl	8006974 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005ed0:	f00b f862 	bl	8010f98 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005ed4:	f000 fbcc 	bl	8006670 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005ed8:	f000 f9a8 	bl	800622c <MX_I2C1_Init>
  MX_TIM3_Init();
 8005edc:	f000 fb00 	bl	80064e0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005ee0:	f000 fc88 	bl	80067f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005ee4:	f000 fcd4 	bl	8006890 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005ee8:	f000 f898 	bl	800601c <MX_ADC2_Init>
  MX_TIM7_Init();
 8005eec:	f000 fbf6 	bl	80066dc <MX_TIM7_Init>
  MX_TIM13_Init();
 8005ef0:	f000 fd1c 	bl	800692c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ef4:	f7ff ffb6 	bl	8005e64 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ef8:	f001 fde2 	bl	8007ac0 <cppLoop>
 8005efc:	e7fc      	b.n	8005ef8 <main+0x58>
	...

08005f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b0a4      	sub	sp, #144	; 0x90
 8005f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f0a:	2234      	movs	r2, #52	; 0x34
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f00e fc2c 	bl	801476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f24:	f107 030c 	add.w	r3, r7, #12
 8005f28:	223c      	movs	r2, #60	; 0x3c
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f00e fc1d 	bl	801476c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <SystemClock_Config+0x114>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a36      	ldr	r2, [pc, #216]	; (8006014 <SystemClock_Config+0x114>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b34      	ldr	r3, [pc, #208]	; (8006014 <SystemClock_Config+0x114>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <SystemClock_Config+0x118>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a30      	ldr	r2, [pc, #192]	; (8006018 <SystemClock_Config+0x118>)
 8005f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <SystemClock_Config+0x118>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f74:	2302      	movs	r3, #2
 8005f76:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f7c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005f7e:	2308      	movs	r3, #8
 8005f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005f82:	23b4      	movs	r3, #180	; 0xb4
 8005f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005f8e:	2308      	movs	r3, #8
 8005f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f94:	2302      	movs	r3, #2
 8005f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f006 fd7e 	bl	800caa0 <HAL_RCC_OscConfig>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005faa:	f000 fe91 	bl	8006cd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005fae:	f006 f8f9 	bl	800c1a4 <HAL_PWREx_EnableOverDrive>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005fb8:	f000 fe8a 	bl	8006cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fbc:	230f      	movs	r3, #15
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005fc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005fcc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fd8:	2105      	movs	r1, #5
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f006 f932 	bl	800c244 <HAL_RCC_ClockConfig>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005fe6:	f000 fe73 	bl	8006cd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005fea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005fee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f006 fb11 	bl	800c624 <HAL_RCCEx_PeriphCLKConfig>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006008:	f000 fe62 	bl	8006cd0 <Error_Handler>
  }
}
 800600c:	bf00      	nop
 800600e:	3790      	adds	r7, #144	; 0x90
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40023800 	.word	0x40023800
 8006018:	40007000 	.word	0x40007000

0800601c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006022:	463b      	mov	r3, r7
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800602e:	4b7c      	ldr	r3, [pc, #496]	; (8006220 <MX_ADC2_Init+0x204>)
 8006030:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <MX_ADC2_Init+0x208>)
 8006032:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006034:	4b7a      	ldr	r3, [pc, #488]	; (8006220 <MX_ADC2_Init+0x204>)
 8006036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800603a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800603c:	4b78      	ldr	r3, [pc, #480]	; (8006220 <MX_ADC2_Init+0x204>)
 800603e:	2200      	movs	r2, #0
 8006040:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <MX_ADC2_Init+0x204>)
 8006044:	2201      	movs	r2, #1
 8006046:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006048:	4b75      	ldr	r3, [pc, #468]	; (8006220 <MX_ADC2_Init+0x204>)
 800604a:	2201      	movs	r2, #1
 800604c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800604e:	4b74      	ldr	r3, [pc, #464]	; (8006220 <MX_ADC2_Init+0x204>)
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006056:	4b72      	ldr	r3, [pc, #456]	; (8006220 <MX_ADC2_Init+0x204>)
 8006058:	2200      	movs	r2, #0
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800605c:	4b70      	ldr	r3, [pc, #448]	; (8006220 <MX_ADC2_Init+0x204>)
 800605e:	4a72      	ldr	r2, [pc, #456]	; (8006228 <MX_ADC2_Init+0x20c>)
 8006060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006062:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <MX_ADC2_Init+0x204>)
 8006064:	2200      	movs	r2, #0
 8006066:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006068:	4b6d      	ldr	r3, [pc, #436]	; (8006220 <MX_ADC2_Init+0x204>)
 800606a:	220e      	movs	r2, #14
 800606c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800606e:	4b6c      	ldr	r3, [pc, #432]	; (8006220 <MX_ADC2_Init+0x204>)
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006076:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <MX_ADC2_Init+0x204>)
 8006078:	2201      	movs	r2, #1
 800607a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800607c:	4868      	ldr	r0, [pc, #416]	; (8006220 <MX_ADC2_Init+0x204>)
 800607e:	f003 fe61 	bl	8009d44 <HAL_ADC_Init>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006088:	f000 fe22 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800608c:	230a      	movs	r3, #10
 800608e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006090:	2301      	movs	r3, #1
 8006092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006094:	2306      	movs	r3, #6
 8006096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006098:	463b      	mov	r3, r7
 800609a:	4619      	mov	r1, r3
 800609c:	4860      	ldr	r0, [pc, #384]	; (8006220 <MX_ADC2_Init+0x204>)
 800609e:	f003 ffa5 	bl	8009fec <HAL_ADC_ConfigChannel>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80060a8:	f000 fe12 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80060ac:	230b      	movs	r3, #11
 80060ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80060b0:	2302      	movs	r3, #2
 80060b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060b4:	463b      	mov	r3, r7
 80060b6:	4619      	mov	r1, r3
 80060b8:	4859      	ldr	r0, [pc, #356]	; (8006220 <MX_ADC2_Init+0x204>)
 80060ba:	f003 ff97 	bl	8009fec <HAL_ADC_ConfigChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80060c4:	f000 fe04 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80060c8:	230c      	movs	r3, #12
 80060ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80060cc:	2303      	movs	r3, #3
 80060ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060d0:	463b      	mov	r3, r7
 80060d2:	4619      	mov	r1, r3
 80060d4:	4852      	ldr	r0, [pc, #328]	; (8006220 <MX_ADC2_Init+0x204>)
 80060d6:	f003 ff89 	bl	8009fec <HAL_ADC_ConfigChannel>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80060e0:	f000 fdf6 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80060e4:	230d      	movs	r3, #13
 80060e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80060e8:	2304      	movs	r3, #4
 80060ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060ec:	463b      	mov	r3, r7
 80060ee:	4619      	mov	r1, r3
 80060f0:	484b      	ldr	r0, [pc, #300]	; (8006220 <MX_ADC2_Init+0x204>)
 80060f2:	f003 ff7b 	bl	8009fec <HAL_ADC_ConfigChannel>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80060fc:	f000 fde8 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006100:	2300      	movs	r3, #0
 8006102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006104:	2305      	movs	r3, #5
 8006106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006108:	463b      	mov	r3, r7
 800610a:	4619      	mov	r1, r3
 800610c:	4844      	ldr	r0, [pc, #272]	; (8006220 <MX_ADC2_Init+0x204>)
 800610e:	f003 ff6d 	bl	8009fec <HAL_ADC_ConfigChannel>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006118:	f000 fdda 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800611c:	2301      	movs	r3, #1
 800611e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006120:	2306      	movs	r3, #6
 8006122:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006124:	463b      	mov	r3, r7
 8006126:	4619      	mov	r1, r3
 8006128:	483d      	ldr	r0, [pc, #244]	; (8006220 <MX_ADC2_Init+0x204>)
 800612a:	f003 ff5f 	bl	8009fec <HAL_ADC_ConfigChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006134:	f000 fdcc 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006138:	2302      	movs	r3, #2
 800613a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800613c:	2307      	movs	r3, #7
 800613e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006140:	463b      	mov	r3, r7
 8006142:	4619      	mov	r1, r3
 8006144:	4836      	ldr	r0, [pc, #216]	; (8006220 <MX_ADC2_Init+0x204>)
 8006146:	f003 ff51 	bl	8009fec <HAL_ADC_ConfigChannel>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006150:	f000 fdbe 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006154:	2303      	movs	r3, #3
 8006156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006158:	2308      	movs	r3, #8
 800615a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800615c:	463b      	mov	r3, r7
 800615e:	4619      	mov	r1, r3
 8006160:	482f      	ldr	r0, [pc, #188]	; (8006220 <MX_ADC2_Init+0x204>)
 8006162:	f003 ff43 	bl	8009fec <HAL_ADC_ConfigChannel>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800616c:	f000 fdb0 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006170:	2304      	movs	r3, #4
 8006172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006174:	2309      	movs	r3, #9
 8006176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006178:	463b      	mov	r3, r7
 800617a:	4619      	mov	r1, r3
 800617c:	4828      	ldr	r0, [pc, #160]	; (8006220 <MX_ADC2_Init+0x204>)
 800617e:	f003 ff35 	bl	8009fec <HAL_ADC_ConfigChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006188:	f000 fda2 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800618c:	2305      	movs	r3, #5
 800618e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006190:	230a      	movs	r3, #10
 8006192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006194:	463b      	mov	r3, r7
 8006196:	4619      	mov	r1, r3
 8006198:	4821      	ldr	r0, [pc, #132]	; (8006220 <MX_ADC2_Init+0x204>)
 800619a:	f003 ff27 	bl	8009fec <HAL_ADC_ConfigChannel>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80061a4:	f000 fd94 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80061a8:	2306      	movs	r3, #6
 80061aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80061ac:	230b      	movs	r3, #11
 80061ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	481a      	ldr	r0, [pc, #104]	; (8006220 <MX_ADC2_Init+0x204>)
 80061b6:	f003 ff19 	bl	8009fec <HAL_ADC_ConfigChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80061c0:	f000 fd86 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80061c4:	2307      	movs	r3, #7
 80061c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80061c8:	230c      	movs	r3, #12
 80061ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061cc:	463b      	mov	r3, r7
 80061ce:	4619      	mov	r1, r3
 80061d0:	4813      	ldr	r0, [pc, #76]	; (8006220 <MX_ADC2_Init+0x204>)
 80061d2:	f003 ff0b 	bl	8009fec <HAL_ADC_ConfigChannel>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80061dc:	f000 fd78 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80061e0:	2308      	movs	r3, #8
 80061e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80061e4:	230d      	movs	r3, #13
 80061e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061e8:	463b      	mov	r3, r7
 80061ea:	4619      	mov	r1, r3
 80061ec:	480c      	ldr	r0, [pc, #48]	; (8006220 <MX_ADC2_Init+0x204>)
 80061ee:	f003 fefd 	bl	8009fec <HAL_ADC_ConfigChannel>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80061f8:	f000 fd6a 	bl	8006cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80061fc:	2309      	movs	r3, #9
 80061fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006200:	230e      	movs	r3, #14
 8006202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006204:	463b      	mov	r3, r7
 8006206:	4619      	mov	r1, r3
 8006208:	4805      	ldr	r0, [pc, #20]	; (8006220 <MX_ADC2_Init+0x204>)
 800620a:	f003 feef 	bl	8009fec <HAL_ADC_ConfigChannel>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006214:	f000 fd5c 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	2004a628 	.word	0x2004a628
 8006224:	40012100 	.word	0x40012100
 8006228:	0f000001 	.word	0x0f000001

0800622c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <MX_I2C1_Init+0x50>)
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <MX_I2C1_Init+0x54>)
 8006234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <MX_I2C1_Init+0x50>)
 8006238:	4a12      	ldr	r2, [pc, #72]	; (8006284 <MX_I2C1_Init+0x58>)
 800623a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <MX_I2C1_Init+0x50>)
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <MX_I2C1_Init+0x50>)
 8006244:	2200      	movs	r2, #0
 8006246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <MX_I2C1_Init+0x50>)
 800624a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800624e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <MX_I2C1_Init+0x50>)
 8006252:	2200      	movs	r2, #0
 8006254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <MX_I2C1_Init+0x50>)
 8006258:	2200      	movs	r2, #0
 800625a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <MX_I2C1_Init+0x50>)
 800625e:	2200      	movs	r2, #0
 8006260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <MX_I2C1_Init+0x50>)
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006268:	4804      	ldr	r0, [pc, #16]	; (800627c <MX_I2C1_Init+0x50>)
 800626a:	f005 f811 	bl	800b290 <HAL_I2C_Init>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006274:	f000 fd2c 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006278:	bf00      	nop
 800627a:	bd80      	pop	{r7, pc}
 800627c:	2004a670 	.word	0x2004a670
 8006280:	40005400 	.word	0x40005400
 8006284:	000186a0 	.word	0x000186a0

08006288 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <MX_I2C2_Init+0x50>)
 800628e:	4a13      	ldr	r2, [pc, #76]	; (80062dc <MX_I2C2_Init+0x54>)
 8006290:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <MX_I2C2_Init+0x50>)
 8006294:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <MX_I2C2_Init+0x58>)
 8006296:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <MX_I2C2_Init+0x50>)
 800629a:	2200      	movs	r2, #0
 800629c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80062c4:	4804      	ldr	r0, [pc, #16]	; (80062d8 <MX_I2C2_Init+0x50>)
 80062c6:	f004 ffe3 	bl	800b290 <HAL_I2C_Init>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80062d0:	f000 fcfe 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80062d4:	bf00      	nop
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	2004a704 	.word	0x2004a704
 80062dc:	40005800 	.word	0x40005800
 80062e0:	000186a0 	.word	0x000186a0

080062e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <MX_SDIO_SD_Init+0x38>)
 80062ea:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <MX_SDIO_SD_Init+0x3c>)
 80062ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <MX_SDIO_SD_Init+0x38>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <MX_SDIO_SD_Init+0x38>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80062fa:	4b08      	ldr	r3, [pc, #32]	; (800631c <MX_SDIO_SD_Init+0x38>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <MX_SDIO_SD_Init+0x38>)
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <MX_SDIO_SD_Init+0x38>)
 8006308:	2200      	movs	r2, #0
 800630a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <MX_SDIO_SD_Init+0x38>)
 800630e:	2204      	movs	r2, #4
 8006310:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006312:	bf00      	nop
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	2004a904 	.word	0x2004a904
 8006320:	40012c00 	.word	0x40012c00

08006324 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <MX_SPI2_Init+0x64>)
 800632a:	4a18      	ldr	r2, [pc, #96]	; (800638c <MX_SPI2_Init+0x68>)
 800632c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800632e:	4b16      	ldr	r3, [pc, #88]	; (8006388 <MX_SPI2_Init+0x64>)
 8006330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006334:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <MX_SPI2_Init+0x64>)
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800633c:	4b12      	ldr	r3, [pc, #72]	; (8006388 <MX_SPI2_Init+0x64>)
 800633e:	2200      	movs	r2, #0
 8006340:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <MX_SPI2_Init+0x64>)
 8006344:	2202      	movs	r2, #2
 8006346:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <MX_SPI2_Init+0x64>)
 800634a:	2201      	movs	r2, #1
 800634c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800634e:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <MX_SPI2_Init+0x64>)
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <MX_SPI2_Init+0x64>)
 8006358:	2220      	movs	r2, #32
 800635a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <MX_SPI2_Init+0x64>)
 800635e:	2200      	movs	r2, #0
 8006360:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <MX_SPI2_Init+0x64>)
 8006364:	2200      	movs	r2, #0
 8006366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <MX_SPI2_Init+0x64>)
 800636a:	2200      	movs	r2, #0
 800636c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <MX_SPI2_Init+0x64>)
 8006370:	220a      	movs	r2, #10
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006374:	4804      	ldr	r0, [pc, #16]	; (8006388 <MX_SPI2_Init+0x64>)
 8006376:	f008 f8bd 	bl	800e4f4 <HAL_SPI_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006380:	f000 fca6 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006384:	bf00      	nop
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2004a550 	.word	0x2004a550
 800638c:	40003800 	.word	0x40003800

08006390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b09a      	sub	sp, #104	; 0x68
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800639a:	2224      	movs	r2, #36	; 0x24
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f00e f9e4 	bl	801476c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063ae:	f107 0320 	add.w	r3, r7, #32
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	605a      	str	r2, [r3, #4]
 80063b8:	609a      	str	r2, [r3, #8]
 80063ba:	60da      	str	r2, [r3, #12]
 80063bc:	611a      	str	r2, [r3, #16]
 80063be:	615a      	str	r2, [r3, #20]
 80063c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063c2:	463b      	mov	r3, r7
 80063c4:	2220      	movs	r2, #32
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00e f9cf 	bl	801476c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80063ce:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063d0:	4a42      	ldr	r2, [pc, #264]	; (80064dc <MX_TIM1_Init+0x14c>)
 80063d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80063d4:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063da:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063dc:	2200      	movs	r2, #0
 80063de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80063e0:	4b3d      	ldr	r3, [pc, #244]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063e8:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063f4:	4b38      	ldr	r3, [pc, #224]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80063fa:	4837      	ldr	r0, [pc, #220]	; (80064d8 <MX_TIM1_Init+0x148>)
 80063fc:	f008 fe1d 	bl	800f03a <HAL_TIM_PWM_Init>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006406:	f000 fc63 	bl	8006cd0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800640a:	2303      	movs	r3, #3
 800640c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800640e:	2300      	movs	r3, #0
 8006410:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006412:	2301      	movs	r3, #1
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006416:	2300      	movs	r3, #0
 8006418:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800641e:	2300      	movs	r3, #0
 8006420:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006422:	2301      	movs	r3, #1
 8006424:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006426:	2300      	movs	r3, #0
 8006428:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800642e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006432:	4619      	mov	r1, r3
 8006434:	4828      	ldr	r0, [pc, #160]	; (80064d8 <MX_TIM1_Init+0x148>)
 8006436:	f008 fe69 	bl	800f10c <HAL_TIM_Encoder_Init>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006440:	f000 fc46 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006448:	2300      	movs	r3, #0
 800644a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800644c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006450:	4619      	mov	r1, r3
 8006452:	4821      	ldr	r0, [pc, #132]	; (80064d8 <MX_TIM1_Init+0x148>)
 8006454:	f009 fb90 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800645e:	f000 fc37 	bl	8006cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006462:	2360      	movs	r3, #96	; 0x60
 8006464:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800646a:	2300      	movs	r3, #0
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800646e:	2300      	movs	r3, #0
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006476:	2300      	movs	r3, #0
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800647a:	2300      	movs	r3, #0
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800647e:	f107 0320 	add.w	r3, r7, #32
 8006482:	2208      	movs	r2, #8
 8006484:	4619      	mov	r1, r3
 8006486:	4814      	ldr	r0, [pc, #80]	; (80064d8 <MX_TIM1_Init+0x148>)
 8006488:	f009 f812 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006492:	f000 fc1d 	bl	8006cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006496:	2300      	movs	r3, #0
 8006498:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80064b4:	463b      	mov	r3, r7
 80064b6:	4619      	mov	r1, r3
 80064b8:	4807      	ldr	r0, [pc, #28]	; (80064d8 <MX_TIM1_Init+0x148>)
 80064ba:	f009 fbd9 	bl	800fc70 <HAL_TIMEx_ConfigBreakDeadTime>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80064c4:	f000 fc04 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80064c8:	4803      	ldr	r0, [pc, #12]	; (80064d8 <MX_TIM1_Init+0x148>)
 80064ca:	f000 fff1 	bl	80074b0 <HAL_TIM_MspPostInit>

}
 80064ce:	bf00      	nop
 80064d0:	3768      	adds	r7, #104	; 0x68
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2004a8c4 	.word	0x2004a8c4
 80064dc:	40010000 	.word	0x40010000

080064e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064e6:	f107 0320 	add.w	r3, r7, #32
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	609a      	str	r2, [r3, #8]
 80064fa:	60da      	str	r2, [r3, #12]
 80064fc:	611a      	str	r2, [r3, #16]
 80064fe:	615a      	str	r2, [r3, #20]
 8006500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006502:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006504:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <MX_TIM3_Init+0xc4>)
 8006506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <MX_TIM3_Init+0xc0>)
 800650a:	2201      	movs	r2, #1
 800650c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006510:	2200      	movs	r2, #0
 8006512:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006514:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006516:	f241 1293 	movw	r2, #4499	; 0x1193
 800651a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800651c:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <MX_TIM3_Init+0xc0>)
 800651e:	2200      	movs	r2, #0
 8006520:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006524:	2200      	movs	r2, #0
 8006526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006528:	481d      	ldr	r0, [pc, #116]	; (80065a0 <MX_TIM3_Init+0xc0>)
 800652a:	f008 fd86 	bl	800f03a <HAL_TIM_PWM_Init>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006534:	f000 fbcc 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800653c:	2300      	movs	r3, #0
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006540:	f107 0320 	add.w	r3, r7, #32
 8006544:	4619      	mov	r1, r3
 8006546:	4816      	ldr	r0, [pc, #88]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006548:	f009 fb16 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006552:	f000 fbbd 	bl	8006cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006556:	2360      	movs	r3, #96	; 0x60
 8006558:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	2200      	movs	r2, #0
 800656a:	4619      	mov	r1, r3
 800656c:	480c      	ldr	r0, [pc, #48]	; (80065a0 <MX_TIM3_Init+0xc0>)
 800656e:	f008 ff9f 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006578:	f000 fbaa 	bl	8006cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	2204      	movs	r2, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4807      	ldr	r0, [pc, #28]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006584:	f008 ff94 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800658e:	f000 fb9f 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006592:	4803      	ldr	r0, [pc, #12]	; (80065a0 <MX_TIM3_Init+0xc0>)
 8006594:	f000 ff8c 	bl	80074b0 <HAL_TIM_MspPostInit>

}
 8006598:	bf00      	nop
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	2004a75c 	.word	0x2004a75c
 80065a4:	40000400 	.word	0x40000400

080065a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ae:	f107 0320 	add.w	r3, r7, #32
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065b8:	1d3b      	adds	r3, r7, #4
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	609a      	str	r2, [r3, #8]
 80065c2:	60da      	str	r2, [r3, #12]
 80065c4:	611a      	str	r2, [r3, #16]
 80065c6:	615a      	str	r2, [r3, #20]
 80065c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <MX_TIM4_Init+0xc4>)
 80065ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065d6:	4b24      	ldr	r3, [pc, #144]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80065dc:	4b22      	ldr	r3, [pc, #136]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80065e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065e4:	4b20      	ldr	r3, [pc, #128]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065f0:	481d      	ldr	r0, [pc, #116]	; (8006668 <MX_TIM4_Init+0xc0>)
 80065f2:	f008 fd22 	bl	800f03a <HAL_TIM_PWM_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80065fc:	f000 fb68 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006608:	f107 0320 	add.w	r3, r7, #32
 800660c:	4619      	mov	r1, r3
 800660e:	4816      	ldr	r0, [pc, #88]	; (8006668 <MX_TIM4_Init+0xc0>)
 8006610:	f009 fab2 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800661a:	f000 fb59 	bl	8006cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800661e:	2360      	movs	r3, #96	; 0x60
 8006620:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	2208      	movs	r2, #8
 8006632:	4619      	mov	r1, r3
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <MX_TIM4_Init+0xc0>)
 8006636:	f008 ff3b 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006640:	f000 fb46 	bl	8006cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	220c      	movs	r2, #12
 8006648:	4619      	mov	r1, r3
 800664a:	4807      	ldr	r0, [pc, #28]	; (8006668 <MX_TIM4_Init+0xc0>)
 800664c:	f008 ff30 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006656:	f000 fb3b 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800665a:	4803      	ldr	r0, [pc, #12]	; (8006668 <MX_TIM4_Init+0xc0>)
 800665c:	f000 ff28 	bl	80074b0 <HAL_TIM_MspPostInit>

}
 8006660:	bf00      	nop
 8006662:	3728      	adds	r7, #40	; 0x28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	2004a5e8 	.word	0x2004a5e8
 800666c:	40000800 	.word	0x40000800

08006670 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006676:	463b      	mov	r3, r7
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <MX_TIM6_Init+0x64>)
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <MX_TIM6_Init+0x68>)
 8006682:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <MX_TIM6_Init+0x64>)
 8006686:	2259      	movs	r2, #89	; 0x59
 8006688:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <MX_TIM6_Init+0x64>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <MX_TIM6_Init+0x64>)
 8006692:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006696:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006698:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <MX_TIM6_Init+0x64>)
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800669e:	480d      	ldr	r0, [pc, #52]	; (80066d4 <MX_TIM6_Init+0x64>)
 80066a0:	f008 fc7c 	bl	800ef9c <HAL_TIM_Base_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80066aa:	f000 fb11 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066ae:	2300      	movs	r3, #0
 80066b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80066b6:	463b      	mov	r3, r7
 80066b8:	4619      	mov	r1, r3
 80066ba:	4806      	ldr	r0, [pc, #24]	; (80066d4 <MX_TIM6_Init+0x64>)
 80066bc:	f009 fa5c 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80066c6:	f000 fb03 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2004a884 	.word	0x2004a884
 80066d8:	40001000 	.word	0x40001000

080066dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066e2:	463b      	mov	r3, r7
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <MX_TIM7_Init+0x60>)
 80066ec:	4a14      	ldr	r2, [pc, #80]	; (8006740 <MX_TIM7_Init+0x64>)
 80066ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80066f0:	4b12      	ldr	r3, [pc, #72]	; (800673c <MX_TIM7_Init+0x60>)
 80066f2:	22b3      	movs	r2, #179	; 0xb3
 80066f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <MX_TIM7_Init+0x60>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <MX_TIM7_Init+0x60>)
 80066fe:	2231      	movs	r2, #49	; 0x31
 8006700:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006702:	4b0e      	ldr	r3, [pc, #56]	; (800673c <MX_TIM7_Init+0x60>)
 8006704:	2280      	movs	r2, #128	; 0x80
 8006706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006708:	480c      	ldr	r0, [pc, #48]	; (800673c <MX_TIM7_Init+0x60>)
 800670a:	f008 fc47 	bl	800ef9c <HAL_TIM_Base_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006714:	f000 fadc 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006718:	2300      	movs	r3, #0
 800671a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006720:	463b      	mov	r3, r7
 8006722:	4619      	mov	r1, r3
 8006724:	4805      	ldr	r0, [pc, #20]	; (800673c <MX_TIM7_Init+0x60>)
 8006726:	f009 fa27 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006730:	f000 face 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	2004aa28 	.word	0x2004aa28
 8006740:	40001400 	.word	0x40001400

08006744 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800674a:	f107 030c 	add.w	r3, r7, #12
 800674e:	2224      	movs	r2, #36	; 0x24
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f00e f80a 	bl	801476c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <MX_TIM8_Init+0xa8>)
 8006762:	4a23      	ldr	r2, [pc, #140]	; (80067f0 <MX_TIM8_Init+0xac>)
 8006764:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006766:	4b21      	ldr	r3, [pc, #132]	; (80067ec <MX_TIM8_Init+0xa8>)
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800676c:	4b1f      	ldr	r3, [pc, #124]	; (80067ec <MX_TIM8_Init+0xa8>)
 800676e:	2210      	movs	r2, #16
 8006770:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006772:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <MX_TIM8_Init+0xa8>)
 8006774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006778:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800677a:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <MX_TIM8_Init+0xa8>)
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <MX_TIM8_Init+0xa8>)
 8006782:	2200      	movs	r2, #0
 8006784:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006786:	4b19      	ldr	r3, [pc, #100]	; (80067ec <MX_TIM8_Init+0xa8>)
 8006788:	2200      	movs	r2, #0
 800678a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800678c:	2303      	movs	r3, #3
 800678e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80067a0:	2300      	movs	r3, #0
 80067a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80067a4:	2301      	movs	r3, #1
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80067b0:	f107 030c 	add.w	r3, r7, #12
 80067b4:	4619      	mov	r1, r3
 80067b6:	480d      	ldr	r0, [pc, #52]	; (80067ec <MX_TIM8_Init+0xa8>)
 80067b8:	f008 fca8 	bl	800f10c <HAL_TIM_Encoder_Init>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80067c2:	f000 fa85 	bl	8006cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4806      	ldr	r0, [pc, #24]	; (80067ec <MX_TIM8_Init+0xa8>)
 80067d4:	f009 f9d0 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80067de:	f000 fa77 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80067e2:	bf00      	nop
 80067e4:	3730      	adds	r7, #48	; 0x30
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2004a5a8 	.word	0x2004a5a8
 80067f0:	40010400 	.word	0x40010400

080067f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	611a      	str	r2, [r3, #16]
 8006808:	615a      	str	r2, [r3, #20]
 800680a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800680c:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <MX_TIM10_Init+0x94>)
 800680e:	4a1f      	ldr	r2, [pc, #124]	; (800688c <MX_TIM10_Init+0x98>)
 8006810:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <MX_TIM10_Init+0x94>)
 8006814:	2201      	movs	r2, #1
 8006816:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <MX_TIM10_Init+0x94>)
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <MX_TIM10_Init+0x94>)
 8006820:	f242 3227 	movw	r2, #8999	; 0x2327
 8006824:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <MX_TIM10_Init+0x94>)
 8006828:	2200      	movs	r2, #0
 800682a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800682c:	4b16      	ldr	r3, [pc, #88]	; (8006888 <MX_TIM10_Init+0x94>)
 800682e:	2200      	movs	r2, #0
 8006830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006832:	4815      	ldr	r0, [pc, #84]	; (8006888 <MX_TIM10_Init+0x94>)
 8006834:	f008 fbb2 	bl	800ef9c <HAL_TIM_Base_Init>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800683e:	f000 fa47 	bl	8006cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006842:	4811      	ldr	r0, [pc, #68]	; (8006888 <MX_TIM10_Init+0x94>)
 8006844:	f008 fbf9 	bl	800f03a <HAL_TIM_PWM_Init>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800684e:	f000 fa3f 	bl	8006cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006852:	2360      	movs	r3, #96	; 0x60
 8006854:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	2200      	movs	r2, #0
 8006866:	4619      	mov	r1, r3
 8006868:	4807      	ldr	r0, [pc, #28]	; (8006888 <MX_TIM10_Init+0x94>)
 800686a:	f008 fe21 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006874:	f000 fa2c 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006878:	4803      	ldr	r0, [pc, #12]	; (8006888 <MX_TIM10_Init+0x94>)
 800687a:	f000 fe19 	bl	80074b0 <HAL_TIM_MspPostInit>

}
 800687e:	bf00      	nop
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2004a6c4 	.word	0x2004a6c4
 800688c:	40014400 	.word	0x40014400

08006890 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	611a      	str	r2, [r3, #16]
 80068a4:	615a      	str	r2, [r3, #20]
 80068a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <MX_TIM11_Init+0x94>)
 80068aa:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <MX_TIM11_Init+0x98>)
 80068ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80068ae:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <MX_TIM11_Init+0x94>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068b4:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <MX_TIM11_Init+0x94>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <MX_TIM11_Init+0x94>)
 80068bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80068c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068c2:	4b18      	ldr	r3, [pc, #96]	; (8006924 <MX_TIM11_Init+0x94>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <MX_TIM11_Init+0x94>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80068ce:	4815      	ldr	r0, [pc, #84]	; (8006924 <MX_TIM11_Init+0x94>)
 80068d0:	f008 fb64 	bl	800ef9c <HAL_TIM_Base_Init>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80068da:	f000 f9f9 	bl	8006cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80068de:	4811      	ldr	r0, [pc, #68]	; (8006924 <MX_TIM11_Init+0x94>)
 80068e0:	f008 fbab 	bl	800f03a <HAL_TIM_PWM_Init>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80068ea:	f000 f9f1 	bl	8006cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068ee:	2360      	movs	r3, #96	; 0x60
 80068f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	2200      	movs	r2, #0
 8006902:	4619      	mov	r1, r3
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <MX_TIM11_Init+0x94>)
 8006906:	f008 fdd3 	bl	800f4b0 <HAL_TIM_PWM_ConfigChannel>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006910:	f000 f9de 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006914:	4803      	ldr	r0, [pc, #12]	; (8006924 <MX_TIM11_Init+0x94>)
 8006916:	f000 fdcb 	bl	80074b0 <HAL_TIM_MspPostInit>

}
 800691a:	bf00      	nop
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2004a7e4 	.word	0x2004a7e4
 8006928:	40014800 	.word	0x40014800

0800692c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <MX_TIM13_Init+0x40>)
 8006932:	4a0f      	ldr	r2, [pc, #60]	; (8006970 <MX_TIM13_Init+0x44>)
 8006934:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <MX_TIM13_Init+0x40>)
 8006938:	2259      	movs	r2, #89	; 0x59
 800693a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <MX_TIM13_Init+0x40>)
 800693e:	2200      	movs	r2, #0
 8006940:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <MX_TIM13_Init+0x40>)
 8006944:	f242 720f 	movw	r2, #9999	; 0x270f
 8006948:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <MX_TIM13_Init+0x40>)
 800694c:	2200      	movs	r2, #0
 800694e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <MX_TIM13_Init+0x40>)
 8006952:	2280      	movs	r2, #128	; 0x80
 8006954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006956:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_TIM13_Init+0x40>)
 8006958:	f008 fb20 	bl	800ef9c <HAL_TIM_Base_Init>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006962:	f000 f9b5 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	2004a7a4 	.word	0x2004a7a4
 8006970:	40001c00 	.word	0x40001c00

08006974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <MX_USART2_UART_Init+0x50>)
 800697c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800697e:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 8006980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006986:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 8006988:	2200      	movs	r2, #0
 800698a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 800698e:	2200      	movs	r2, #0
 8006990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 8006994:	2200      	movs	r2, #0
 8006996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 800699a:	220c      	movs	r2, #12
 800699c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069aa:	4805      	ldr	r0, [pc, #20]	; (80069c0 <MX_USART2_UART_Init+0x4c>)
 80069ac:	f009 f9c6 	bl	800fd3c <HAL_UART_Init>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80069b6:	f000 f98b 	bl	8006cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069ba:	bf00      	nop
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2004a988 	.word	0x2004a988
 80069c4:	40004400 	.word	0x40004400

080069c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <MX_DMA_Init+0x5c>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <MX_DMA_Init+0x5c>)
 80069d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069dc:	6313      	str	r3, [r2, #48]	; 0x30
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <MX_DMA_Init+0x5c>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80069ea:	2200      	movs	r2, #0
 80069ec:	2100      	movs	r1, #0
 80069ee:	203a      	movs	r0, #58	; 0x3a
 80069f0:	f003 fe87 	bl	800a702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80069f4:	203a      	movs	r0, #58	; 0x3a
 80069f6:	f003 fea0 	bl	800a73a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80069fa:	2200      	movs	r2, #0
 80069fc:	2100      	movs	r1, #0
 80069fe:	203b      	movs	r0, #59	; 0x3b
 8006a00:	f003 fe7f 	bl	800a702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006a04:	203b      	movs	r0, #59	; 0x3b
 8006a06:	f003 fe98 	bl	800a73a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	2045      	movs	r0, #69	; 0x45
 8006a10:	f003 fe77 	bl	800a702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006a14:	2045      	movs	r0, #69	; 0x45
 8006a16:	f003 fe90 	bl	800a73a <HAL_NVIC_EnableIRQ>

}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800

08006a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2e:	f107 031c 	add.w	r3, r7, #28
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	609a      	str	r2, [r3, #8]
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4a9b      	ldr	r2, [pc, #620]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a48:	f043 0310 	orr.w	r3, r3, #16
 8006a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4e:	4b99      	ldr	r3, [pc, #612]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	4b95      	ldr	r3, [pc, #596]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a94      	ldr	r2, [pc, #592]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b92      	ldr	r3, [pc, #584]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	4b8e      	ldr	r3, [pc, #568]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	4a8d      	ldr	r2, [pc, #564]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a80:	f043 0304 	orr.w	r3, r3, #4
 8006a84:	6313      	str	r3, [r2, #48]	; 0x30
 8006a86:	4b8b      	ldr	r3, [pc, #556]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	4b87      	ldr	r3, [pc, #540]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	4a86      	ldr	r2, [pc, #536]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa2:	4b84      	ldr	r3, [pc, #528]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	4b80      	ldr	r3, [pc, #512]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	4a7f      	ldr	r2, [pc, #508]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006ab8:	f043 0302 	orr.w	r3, r3, #2
 8006abc:	6313      	str	r3, [r2, #48]	; 0x30
 8006abe:	4b7d      	ldr	r3, [pc, #500]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	4b79      	ldr	r3, [pc, #484]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	4a78      	ldr	r2, [pc, #480]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006ad4:	f043 0308 	orr.w	r3, r3, #8
 8006ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ada:	4b76      	ldr	r3, [pc, #472]	; (8006cb4 <MX_GPIO_Init+0x28c>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aec:	4872      	ldr	r0, [pc, #456]	; (8006cb8 <MX_GPIO_Init+0x290>)
 8006aee:	f004 fb9d 	bl	800b22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006af2:	2200      	movs	r2, #0
 8006af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006af8:	4870      	ldr	r0, [pc, #448]	; (8006cbc <MX_GPIO_Init+0x294>)
 8006afa:	f004 fb97 	bl	800b22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006afe:	2200      	movs	r2, #0
 8006b00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b04:	486e      	ldr	r0, [pc, #440]	; (8006cc0 <MX_GPIO_Init+0x298>)
 8006b06:	f004 fb91 	bl	800b22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006b10:	486c      	ldr	r0, [pc, #432]	; (8006cc4 <MX_GPIO_Init+0x29c>)
 8006b12:	f004 fb8b 	bl	800b22c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b16:	2304      	movs	r3, #4
 8006b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006b1a:	4b6b      	ldr	r3, [pc, #428]	; (8006cc8 <MX_GPIO_Init+0x2a0>)
 8006b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b22:	f107 031c 	add.w	r3, r7, #28
 8006b26:	4619      	mov	r1, r3
 8006b28:	4863      	ldr	r0, [pc, #396]	; (8006cb8 <MX_GPIO_Init+0x290>)
 8006b2a:	f004 f9bd 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b2e:	230f      	movs	r3, #15
 8006b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b32:	2303      	movs	r3, #3
 8006b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b3a:	f107 031c 	add.w	r3, r7, #28
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4862      	ldr	r0, [pc, #392]	; (8006ccc <MX_GPIO_Init+0x2a4>)
 8006b42:	f004 f9b1 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b46:	23e1      	movs	r3, #225	; 0xe1
 8006b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b52:	f107 031c 	add.w	r3, r7, #28
 8006b56:	4619      	mov	r1, r3
 8006b58:	485a      	ldr	r0, [pc, #360]	; (8006cc4 <MX_GPIO_Init+0x29c>)
 8006b5a:	f004 f9a5 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b62:	2303      	movs	r3, #3
 8006b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b6a:	f107 031c 	add.w	r3, r7, #28
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4852      	ldr	r0, [pc, #328]	; (8006cbc <MX_GPIO_Init+0x294>)
 8006b72:	f004 f999 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b76:	2304      	movs	r3, #4
 8006b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b82:	f107 031c 	add.w	r3, r7, #28
 8006b86:	4619      	mov	r1, r3
 8006b88:	484c      	ldr	r0, [pc, #304]	; (8006cbc <MX_GPIO_Init+0x294>)
 8006b8a:	f004 f98d 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006b8e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b9c:	f107 031c 	add.w	r3, r7, #28
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4845      	ldr	r0, [pc, #276]	; (8006cb8 <MX_GPIO_Init+0x290>)
 8006ba4:	f004 f980 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bba:	f107 031c 	add.w	r3, r7, #28
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	483d      	ldr	r0, [pc, #244]	; (8006cb8 <MX_GPIO_Init+0x290>)
 8006bc2:	f004 f971 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bd8:	f107 031c 	add.w	r3, r7, #28
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4837      	ldr	r0, [pc, #220]	; (8006cbc <MX_GPIO_Init+0x294>)
 8006be0:	f004 f962 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006bea:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <MX_GPIO_Init+0x2a0>)
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bf2:	f107 031c 	add.w	r3, r7, #28
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4831      	ldr	r0, [pc, #196]	; (8006cc0 <MX_GPIO_Init+0x298>)
 8006bfa:	f004 f955 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c04:	2301      	movs	r3, #1
 8006c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c10:	f107 031c 	add.w	r3, r7, #28
 8006c14:	4619      	mov	r1, r3
 8006c16:	482a      	ldr	r0, [pc, #168]	; (8006cc0 <MX_GPIO_Init+0x298>)
 8006c18:	f004 f946 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	2301      	movs	r3, #1
 8006c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c26:	2301      	movs	r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c2e:	f107 031c 	add.w	r3, r7, #28
 8006c32:	4619      	mov	r1, r3
 8006c34:	4822      	ldr	r0, [pc, #136]	; (8006cc0 <MX_GPIO_Init+0x298>)
 8006c36:	f004 f937 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006c3e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c40:	2301      	movs	r3, #1
 8006c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c4c:	f107 031c 	add.w	r3, r7, #28
 8006c50:	4619      	mov	r1, r3
 8006c52:	481c      	ldr	r0, [pc, #112]	; (8006cc4 <MX_GPIO_Init+0x29c>)
 8006c54:	f004 f928 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c66:	f107 031c 	add.w	r3, r7, #28
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4815      	ldr	r0, [pc, #84]	; (8006cc4 <MX_GPIO_Init+0x29c>)
 8006c6e:	f004 f91b 	bl	800aea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006c72:	239b      	movs	r3, #155	; 0x9b
 8006c74:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c76:	2300      	movs	r3, #0
 8006c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c7e:	f107 031c 	add.w	r3, r7, #28
 8006c82:	4619      	mov	r1, r3
 8006c84:	480e      	ldr	r0, [pc, #56]	; (8006cc0 <MX_GPIO_Init+0x298>)
 8006c86:	f004 f90f 	bl	800aea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	2008      	movs	r0, #8
 8006c90:	f003 fd37 	bl	800a702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006c94:	2008      	movs	r0, #8
 8006c96:	f003 fd50 	bl	800a73a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	2017      	movs	r0, #23
 8006ca0:	f003 fd2f 	bl	800a702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006ca4:	2017      	movs	r0, #23
 8006ca6:	f003 fd48 	bl	800a73a <HAL_NVIC_EnableIRQ>

}
 8006caa:	bf00      	nop
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40020400 	.word	0x40020400
 8006cc0:	40020c00 	.word	0x40020c00
 8006cc4:	40020000 	.word	0x40020000
 8006cc8:	10310000 	.word	0x10310000
 8006ccc:	40020800 	.word	0x40020800

08006cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006cd6:	e7fe      	b.n	8006cd6 <Error_Handler+0x6>

08006cd8 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_MspInit+0x4c>)
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <HAL_MspInit+0x4c>)
 8006cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <HAL_MspInit+0x4c>)
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <HAL_MspInit+0x4c>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <HAL_MspInit+0x4c>)
 8006d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <HAL_MspInit+0x4c>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40023800 	.word	0x40023800

08006d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d40:	f107 031c 	add.w	r3, r7, #28
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a4a      	ldr	r2, [pc, #296]	; (8006e80 <HAL_ADC_MspInit+0x148>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f040 808e 	bne.w	8006e78 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	4b48      	ldr	r3, [pc, #288]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	4a47      	ldr	r2, [pc, #284]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d6c:	4b45      	ldr	r3, [pc, #276]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	4a40      	ldr	r2, [pc, #256]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	6313      	str	r3, [r2, #48]	; 0x30
 8006d88:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4a39      	ldr	r2, [pc, #228]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6313      	str	r3, [r2, #48]	; 0x30
 8006da4:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006dba:	f043 0302 	orr.w	r3, r3, #2
 8006dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc0:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_ADC_MspInit+0x14c>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006dcc:	230f      	movs	r3, #15
 8006dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dd8:	f107 031c 	add.w	r3, r7, #28
 8006ddc:	4619      	mov	r1, r3
 8006dde:	482a      	ldr	r0, [pc, #168]	; (8006e88 <HAL_ADC_MspInit+0x150>)
 8006de0:	f004 f862 	bl	800aea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006de4:	23ff      	movs	r3, #255	; 0xff
 8006de6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006de8:	2303      	movs	r3, #3
 8006dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df0:	f107 031c 	add.w	r3, r7, #28
 8006df4:	4619      	mov	r1, r3
 8006df6:	4825      	ldr	r0, [pc, #148]	; (8006e8c <HAL_ADC_MspInit+0x154>)
 8006df8:	f004 f856 	bl	800aea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e00:	2303      	movs	r3, #3
 8006e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e08:	f107 031c 	add.w	r3, r7, #28
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4820      	ldr	r0, [pc, #128]	; (8006e90 <HAL_ADC_MspInit+0x158>)
 8006e10:	f004 f84a 	bl	800aea8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006e14:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <HAL_ADC_MspInit+0x160>)
 8006e18:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e20:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e28:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e34:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e36:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e3e:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e44:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e4c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e54:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e56:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006e5c:	480d      	ldr	r0, [pc, #52]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e5e:	f003 fc87 	bl	800a770 <HAL_DMA_Init>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006e68:	f7ff ff32 	bl	8006cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
 8006e72:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <HAL_ADC_MspInit+0x15c>)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006e78:	bf00      	nop
 8006e7a:	3730      	adds	r7, #48	; 0x30
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40012100 	.word	0x40012100
 8006e84:	40023800 	.word	0x40023800
 8006e88:	40020800 	.word	0x40020800
 8006e8c:	40020000 	.word	0x40020000
 8006e90:	40020400 	.word	0x40020400
 8006e94:	2004a9c8 	.word	0x2004a9c8
 8006e98:	40026440 	.word	0x40026440

08006e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08c      	sub	sp, #48	; 0x30
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea4:	f107 031c 	add.w	r3, r7, #28
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a32      	ldr	r2, [pc, #200]	; (8006f84 <HAL_I2C_MspInit+0xe8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d12c      	bne.n	8006f18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	4a30      	ldr	r2, [pc, #192]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006eda:	23c0      	movs	r3, #192	; 0xc0
 8006edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ede:	2312      	movs	r3, #18
 8006ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006eea:	2304      	movs	r3, #4
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4825      	ldr	r0, [pc, #148]	; (8006f8c <HAL_I2C_MspInit+0xf0>)
 8006ef6:	f003 ffd7 	bl	800aea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f08:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006f16:	e031      	b.n	8006f7c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <HAL_I2C_MspInit+0xf4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d12c      	bne.n	8006f7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	6313      	str	r3, [r2, #48]	; 0x30
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f44:	2312      	movs	r3, #18
 8006f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006f50:	2304      	movs	r3, #4
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f54:	f107 031c 	add.w	r3, r7, #28
 8006f58:	4619      	mov	r1, r3
 8006f5a:	480c      	ldr	r0, [pc, #48]	; (8006f8c <HAL_I2C_MspInit+0xf0>)
 8006f5c:	f003 ffa4 	bl	800aea8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HAL_I2C_MspInit+0xec>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	3730      	adds	r7, #48	; 0x30
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40005400 	.word	0x40005400
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40020400 	.word	0x40020400
 8006f90:	40005800 	.word	0x40005800

08006f94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a69      	ldr	r2, [pc, #420]	; (8007158 <HAL_SD_MspInit+0x1c4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	f040 80cb 	bne.w	800714e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	4b67      	ldr	r3, [pc, #412]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	4a66      	ldr	r2, [pc, #408]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc8:	4b64      	ldr	r3, [pc, #400]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	4b60      	ldr	r3, [pc, #384]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	4a5f      	ldr	r2, [pc, #380]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fde:	f043 0304 	orr.w	r3, r3, #4
 8006fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe4:	4b5d      	ldr	r3, [pc, #372]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	4b59      	ldr	r3, [pc, #356]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	4a58      	ldr	r2, [pc, #352]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8006ffa:	f043 0308 	orr.w	r3, r3, #8
 8006ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8007000:	4b56      	ldr	r3, [pc, #344]	; (800715c <HAL_SD_MspInit+0x1c8>)
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800700c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007010:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007012:	2302      	movs	r3, #2
 8007014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800701a:	2303      	movs	r3, #3
 800701c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800701e:	230c      	movs	r3, #12
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	4619      	mov	r1, r3
 8007028:	484d      	ldr	r0, [pc, #308]	; (8007160 <HAL_SD_MspInit+0x1cc>)
 800702a:	f003 ff3d 	bl	800aea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800702e:	2304      	movs	r3, #4
 8007030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007032:	2302      	movs	r3, #2
 8007034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703a:	2303      	movs	r3, #3
 800703c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800703e:	230c      	movs	r3, #12
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007042:	f107 0314 	add.w	r3, r7, #20
 8007046:	4619      	mov	r1, r3
 8007048:	4846      	ldr	r0, [pc, #280]	; (8007164 <HAL_SD_MspInit+0x1d0>)
 800704a:	f003 ff2d 	bl	800aea8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800704e:	4b46      	ldr	r3, [pc, #280]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007050:	4a46      	ldr	r2, [pc, #280]	; (800716c <HAL_SD_MspInit+0x1d8>)
 8007052:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007054:	4b44      	ldr	r3, [pc, #272]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800705a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800705c:	4b42      	ldr	r3, [pc, #264]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 800705e:	2200      	movs	r2, #0
 8007060:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007062:	4b41      	ldr	r3, [pc, #260]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007064:	2200      	movs	r2, #0
 8007066:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007068:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 800706a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800706e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007070:	4b3d      	ldr	r3, [pc, #244]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007076:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007078:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 800707a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800707e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007080:	4b39      	ldr	r3, [pc, #228]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007082:	2220      	movs	r2, #32
 8007084:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007086:	4b38      	ldr	r3, [pc, #224]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007088:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800708c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800708e:	4b36      	ldr	r3, [pc, #216]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007090:	2204      	movs	r2, #4
 8007092:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007094:	4b34      	ldr	r3, [pc, #208]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 8007096:	2203      	movs	r2, #3
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800709a:	4b33      	ldr	r3, [pc, #204]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 800709c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 80070a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80070aa:	482f      	ldr	r0, [pc, #188]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 80070ac:	f003 fb60 	bl	800a770 <HAL_DMA_Init>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80070b6:	f7ff fe0b 	bl	8006cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
 80070c0:	4a29      	ldr	r2, [pc, #164]	; (8007168 <HAL_SD_MspInit+0x1d4>)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80070c6:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070c8:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <HAL_SD_MspInit+0x1e0>)
 80070ca:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80070cc:	4b28      	ldr	r3, [pc, #160]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070d2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070d4:	4b26      	ldr	r3, [pc, #152]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070d6:	2240      	movs	r2, #64	; 0x40
 80070d8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070da:	4b25      	ldr	r3, [pc, #148]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070dc:	2200      	movs	r2, #0
 80070de:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070e0:	4b23      	ldr	r3, [pc, #140]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070e6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070e8:	4b21      	ldr	r3, [pc, #132]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070ee:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070f0:	4b1f      	ldr	r3, [pc, #124]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070f6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 80070fa:	2220      	movs	r2, #32
 80070fc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070fe:	4b1c      	ldr	r3, [pc, #112]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 8007100:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007104:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007106:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 8007108:	2204      	movs	r2, #4
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800710c:	4b18      	ldr	r3, [pc, #96]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 800710e:	2203      	movs	r2, #3
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 8007114:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 800711c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007122:	4813      	ldr	r0, [pc, #76]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 8007124:	f003 fb24 	bl	800a770 <HAL_DMA_Init>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800712e:	f7ff fdcf 	bl	8006cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a0e      	ldr	r2, [pc, #56]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 8007136:	63da      	str	r2, [r3, #60]	; 0x3c
 8007138:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <HAL_SD_MspInit+0x1dc>)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	2031      	movs	r0, #49	; 0x31
 8007144:	f003 fadd 	bl	800a702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007148:	2031      	movs	r0, #49	; 0x31
 800714a:	f003 faf6 	bl	800a73a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800714e:	bf00      	nop
 8007150:	3728      	adds	r7, #40	; 0x28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40023800 	.word	0x40023800
 8007160:	40020800 	.word	0x40020800
 8007164:	40020c00 	.word	0x40020c00
 8007168:	2004a4f0 	.word	0x2004a4f0
 800716c:	40026458 	.word	0x40026458
 8007170:	2004a824 	.word	0x2004a824
 8007174:	400264a0 	.word	0x400264a0

08007178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007180:	f107 0314 	add.w	r3, r7, #20
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	609a      	str	r2, [r3, #8]
 800718c:	60da      	str	r2, [r3, #12]
 800718e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a19      	ldr	r2, [pc, #100]	; (80071fc <HAL_SPI_MspInit+0x84>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d12c      	bne.n	80071f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	4b18      	ldr	r3, [pc, #96]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	4a17      	ldr	r2, [pc, #92]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071a8:	6413      	str	r3, [r2, #64]	; 0x40
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	4a10      	ldr	r2, [pc, #64]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071c0:	f043 0302 	orr.w	r3, r3, #2
 80071c4:	6313      	str	r3, [r2, #48]	; 0x30
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <HAL_SPI_MspInit+0x88>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80071d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80071d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d8:	2302      	movs	r3, #2
 80071da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e0:	2303      	movs	r3, #3
 80071e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80071e4:	2305      	movs	r3, #5
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e8:	f107 0314 	add.w	r3, r7, #20
 80071ec:	4619      	mov	r1, r3
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <HAL_SPI_MspInit+0x8c>)
 80071f0:	f003 fe5a 	bl	800aea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80071f4:	bf00      	nop
 80071f6:	3728      	adds	r7, #40	; 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40003800 	.word	0x40003800
 8007200:	40023800 	.word	0x40023800
 8007204:	40020400 	.word	0x40020400

08007208 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	; 0x30
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007210:	f107 031c 	add.w	r3, r7, #28
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_TIM_PWM_MspInit+0xd4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d12d      	bne.n	8007286 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	6453      	str	r3, [r2, #68]	; 0x44
 800723a:	4b29      	ldr	r3, [pc, #164]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007250:	f043 0310 	orr.w	r3, r3, #16
 8007254:	6313      	str	r3, [r2, #48]	; 0x30
 8007256:	4b22      	ldr	r3, [pc, #136]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007262:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007268:	2302      	movs	r3, #2
 800726a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726c:	2300      	movs	r3, #0
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007270:	2300      	movs	r3, #0
 8007272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007274:	2301      	movs	r3, #1
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007278:	f107 031c 	add.w	r3, r7, #28
 800727c:	4619      	mov	r1, r3
 800727e:	4819      	ldr	r0, [pc, #100]	; (80072e4 <HAL_TIM_PWM_MspInit+0xdc>)
 8007280:	f003 fe12 	bl	800aea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007284:	e026      	b.n	80072d4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <HAL_TIM_PWM_MspInit+0xe0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10e      	bne.n	80072ae <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800729a:	f043 0302 	orr.w	r3, r3, #2
 800729e:	6413      	str	r3, [r2, #64]	; 0x40
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	693b      	ldr	r3, [r7, #16]
}
 80072ac:	e012      	b.n	80072d4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a0e      	ldr	r2, [pc, #56]	; (80072ec <HAL_TIM_PWM_MspInit+0xe4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10d      	bne.n	80072d4 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	4b08      	ldr	r3, [pc, #32]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	4a07      	ldr	r2, [pc, #28]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80072c2:	f043 0304 	orr.w	r3, r3, #4
 80072c6:	6413      	str	r3, [r2, #64]	; 0x40
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	bf00      	nop
 80072d6:	3730      	adds	r7, #48	; 0x30
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40023800 	.word	0x40023800
 80072e4:	40021000 	.word	0x40021000
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800

080072f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a3e      	ldr	r2, [pc, #248]	; (80073f8 <HAL_TIM_Base_MspInit+0x108>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d116      	bne.n	8007330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 800730c:	f043 0310 	orr.w	r3, r3, #16
 8007310:	6413      	str	r3, [r2, #64]	; 0x40
 8007312:	4b3a      	ldr	r3, [pc, #232]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800731e:	2200      	movs	r2, #0
 8007320:	2101      	movs	r1, #1
 8007322:	2036      	movs	r0, #54	; 0x36
 8007324:	f003 f9ed 	bl	800a702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007328:	2036      	movs	r0, #54	; 0x36
 800732a:	f003 fa06 	bl	800a73a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800732e:	e05e      	b.n	80073ee <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a32      	ldr	r2, [pc, #200]	; (8007400 <HAL_TIM_Base_MspInit+0x110>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d116      	bne.n	8007368 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007344:	f043 0320 	orr.w	r3, r3, #32
 8007348:	6413      	str	r3, [r2, #64]	; 0x40
 800734a:	4b2c      	ldr	r3, [pc, #176]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007356:	2200      	movs	r2, #0
 8007358:	2100      	movs	r1, #0
 800735a:	2037      	movs	r0, #55	; 0x37
 800735c:	f003 f9d1 	bl	800a702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007360:	2037      	movs	r0, #55	; 0x37
 8007362:	f003 f9ea 	bl	800a73a <HAL_NVIC_EnableIRQ>
}
 8007366:	e042      	b.n	80073ee <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <HAL_TIM_Base_MspInit+0x114>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	4a20      	ldr	r2, [pc, #128]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 800737c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007380:	6453      	str	r3, [r2, #68]	; 0x44
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	697b      	ldr	r3, [r7, #20]
}
 800738e:	e02e      	b.n	80073ee <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <HAL_TIM_Base_MspInit+0x118>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	4b17      	ldr	r3, [pc, #92]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	4a16      	ldr	r2, [pc, #88]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073a8:	6453      	str	r3, [r2, #68]	; 0x44
 80073aa:	4b14      	ldr	r3, [pc, #80]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]
}
 80073b6:	e01a      	b.n	80073ee <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a13      	ldr	r2, [pc, #76]	; (800740c <HAL_TIM_Base_MspInit+0x11c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d115      	bne.n	80073ee <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d0:	6413      	str	r3, [r2, #64]	; 0x40
 80073d2:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <HAL_TIM_Base_MspInit+0x10c>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	202c      	movs	r0, #44	; 0x2c
 80073e4:	f003 f98d 	bl	800a702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80073e8:	202c      	movs	r0, #44	; 0x2c
 80073ea:	f003 f9a6 	bl	800a73a <HAL_NVIC_EnableIRQ>
}
 80073ee:	bf00      	nop
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40001000 	.word	0x40001000
 80073fc:	40023800 	.word	0x40023800
 8007400:	40001400 	.word	0x40001400
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	40001c00 	.word	0x40001c00

08007410 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d133      	bne.n	800749a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743a:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 800743c:	f043 0302 	orr.w	r3, r3, #2
 8007440:	6453      	str	r3, [r2, #68]	; 0x44
 8007442:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007458:	f043 0304 	orr.w	r3, r3, #4
 800745c:	6313      	str	r3, [r2, #48]	; 0x30
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800746a:	23c0      	movs	r3, #192	; 0xc0
 800746c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800746e:	2302      	movs	r3, #2
 8007470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007476:	2300      	movs	r3, #0
 8007478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800747a:	2303      	movs	r3, #3
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800747e:	f107 0314 	add.w	r3, r7, #20
 8007482:	4619      	mov	r1, r3
 8007484:	4809      	ldr	r0, [pc, #36]	; (80074ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8007486:	f003 fd0f 	bl	800aea8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	202c      	movs	r0, #44	; 0x2c
 8007490:	f003 f937 	bl	800a702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007494:	202c      	movs	r0, #44	; 0x2c
 8007496:	f003 f950 	bl	800a73a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800749a:	bf00      	nop
 800749c:	3728      	adds	r7, #40	; 0x28
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40010400 	.word	0x40010400
 80074a8:	40023800 	.word	0x40023800
 80074ac:	40020800 	.word	0x40020800

080074b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b8:	f107 031c 	add.w	r3, r7, #28
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	609a      	str	r2, [r3, #8]
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a5c      	ldr	r2, [pc, #368]	; (8007640 <HAL_TIM_MspPostInit+0x190>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d11f      	bne.n	8007512 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4a5a      	ldr	r2, [pc, #360]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80074dc:	f043 0310 	orr.w	r3, r3, #16
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b58      	ldr	r3, [pc, #352]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80074ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f4:	2302      	movs	r3, #2
 80074f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007500:	2301      	movs	r3, #1
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007504:	f107 031c 	add.w	r3, r7, #28
 8007508:	4619      	mov	r1, r3
 800750a:	484f      	ldr	r0, [pc, #316]	; (8007648 <HAL_TIM_MspPostInit+0x198>)
 800750c:	f003 fccc 	bl	800aea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007510:	e091      	b.n	8007636 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4d      	ldr	r2, [pc, #308]	; (800764c <HAL_TIM_MspPostInit+0x19c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d11e      	bne.n	800755a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	4b48      	ldr	r3, [pc, #288]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	4a47      	ldr	r2, [pc, #284]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	6313      	str	r3, [r2, #48]	; 0x30
 800752c:	4b45      	ldr	r3, [pc, #276]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007538:	2330      	movs	r3, #48	; 0x30
 800753a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753c:	2302      	movs	r3, #2
 800753e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007540:	2300      	movs	r3, #0
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007544:	2300      	movs	r3, #0
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007548:	2302      	movs	r3, #2
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800754c:	f107 031c 	add.w	r3, r7, #28
 8007550:	4619      	mov	r1, r3
 8007552:	483f      	ldr	r0, [pc, #252]	; (8007650 <HAL_TIM_MspPostInit+0x1a0>)
 8007554:	f003 fca8 	bl	800aea8 <HAL_GPIO_Init>
}
 8007558:	e06d      	b.n	8007636 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a3d      	ldr	r2, [pc, #244]	; (8007654 <HAL_TIM_MspPostInit+0x1a4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d11f      	bne.n	80075a4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	4b36      	ldr	r3, [pc, #216]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	4a35      	ldr	r2, [pc, #212]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 800756e:	f043 0308 	orr.w	r3, r3, #8
 8007572:	6313      	str	r3, [r2, #48]	; 0x30
 8007574:	4b33      	ldr	r3, [pc, #204]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007580:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007586:	2302      	movs	r3, #2
 8007588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758a:	2300      	movs	r3, #0
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800758e:	2300      	movs	r3, #0
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007592:	2302      	movs	r3, #2
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007596:	f107 031c 	add.w	r3, r7, #28
 800759a:	4619      	mov	r1, r3
 800759c:	482e      	ldr	r0, [pc, #184]	; (8007658 <HAL_TIM_MspPostInit+0x1a8>)
 800759e:	f003 fc83 	bl	800aea8 <HAL_GPIO_Init>
}
 80075a2:	e048      	b.n	8007636 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a2c      	ldr	r2, [pc, #176]	; (800765c <HAL_TIM_MspPostInit+0x1ac>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d11f      	bne.n	80075ee <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	4a23      	ldr	r2, [pc, #140]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80075b8:	f043 0302 	orr.w	r3, r3, #2
 80075bc:	6313      	str	r3, [r2, #48]	; 0x30
 80075be:	4b21      	ldr	r3, [pc, #132]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80075ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d0:	2302      	movs	r3, #2
 80075d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d8:	2300      	movs	r3, #0
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80075dc:	2303      	movs	r3, #3
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e0:	f107 031c 	add.w	r3, r7, #28
 80075e4:	4619      	mov	r1, r3
 80075e6:	481a      	ldr	r0, [pc, #104]	; (8007650 <HAL_TIM_MspPostInit+0x1a0>)
 80075e8:	f003 fc5e 	bl	800aea8 <HAL_GPIO_Init>
}
 80075ec:	e023      	b.n	8007636 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <HAL_TIM_MspPostInit+0x1b0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d11e      	bne.n	8007636 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f8:	2300      	movs	r3, #0
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	4a10      	ldr	r2, [pc, #64]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 8007602:	f043 0302 	orr.w	r3, r3, #2
 8007606:	6313      	str	r3, [r2, #48]	; 0x30
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <HAL_TIM_MspPostInit+0x194>)
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761a:	2302      	movs	r3, #2
 800761c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007622:	2300      	movs	r3, #0
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007626:	2303      	movs	r3, #3
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800762a:	f107 031c 	add.w	r3, r7, #28
 800762e:	4619      	mov	r1, r3
 8007630:	4807      	ldr	r0, [pc, #28]	; (8007650 <HAL_TIM_MspPostInit+0x1a0>)
 8007632:	f003 fc39 	bl	800aea8 <HAL_GPIO_Init>
}
 8007636:	bf00      	nop
 8007638:	3730      	adds	r7, #48	; 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40010000 	.word	0x40010000
 8007644:	40023800 	.word	0x40023800
 8007648:	40021000 	.word	0x40021000
 800764c:	40000400 	.word	0x40000400
 8007650:	40020400 	.word	0x40020400
 8007654:	40000800 	.word	0x40000800
 8007658:	40020c00 	.word	0x40020c00
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800

08007664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <HAL_UART_MspInit+0x84>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d12b      	bne.n	80076de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	4b18      	ldr	r3, [pc, #96]	; (80076ec <HAL_UART_MspInit+0x88>)
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	4a17      	ldr	r2, [pc, #92]	; (80076ec <HAL_UART_MspInit+0x88>)
 8007690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007694:	6413      	str	r3, [r2, #64]	; 0x40
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <HAL_UART_MspInit+0x88>)
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <HAL_UART_MspInit+0x88>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <HAL_UART_MspInit+0x88>)
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	6313      	str	r3, [r2, #48]	; 0x30
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <HAL_UART_MspInit+0x88>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80076be:	2360      	movs	r3, #96	; 0x60
 80076c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c2:	2302      	movs	r3, #2
 80076c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ca:	2303      	movs	r3, #3
 80076cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80076ce:	2307      	movs	r3, #7
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d2:	f107 0314 	add.w	r3, r7, #20
 80076d6:	4619      	mov	r1, r3
 80076d8:	4805      	ldr	r0, [pc, #20]	; (80076f0 <HAL_UART_MspInit+0x8c>)
 80076da:	f003 fbe5 	bl	800aea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80076de:	bf00      	nop
 80076e0:	3728      	adds	r7, #40	; 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40023800 	.word	0x40023800
 80076f0:	40020c00 	.word	0x40020c00

080076f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80076f8:	e7fe      	b.n	80076f8 <NMI_Handler+0x4>

080076fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076fa:	b480      	push	{r7}
 80076fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076fe:	e7fe      	b.n	80076fe <HardFault_Handler+0x4>

08007700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007704:	e7fe      	b.n	8007704 <MemManage_Handler+0x4>

08007706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007706:	b480      	push	{r7}
 8007708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800770a:	e7fe      	b.n	800770a <BusFault_Handler+0x4>

0800770c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007710:	e7fe      	b.n	8007710 <UsageFault_Handler+0x4>

08007712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007712:	b480      	push	{r7}
 8007714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800772e:	b480      	push	{r7}
 8007730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007732:	bf00      	nop
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007740:	f002 fabe 	bl	8009cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007744:	bf00      	nop
 8007746:	bd80      	pop	{r7, pc}

08007748 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800774c:	2004      	movs	r0, #4
 800774e:	f003 fd87 	bl	800b260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007752:	bf00      	nop
 8007754:	bd80      	pop	{r7, pc}

08007756 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800775a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800775e:	f003 fd7f 	bl	800b260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800776c:	4803      	ldr	r0, [pc, #12]	; (800777c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800776e:	f007 fd96 	bl	800f29e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007772:	4803      	ldr	r0, [pc, #12]	; (8007780 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007774:	f007 fd93 	bl	800f29e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2004a5a8 	.word	0x2004a5a8
 8007780:	2004a7a4 	.word	0x2004a7a4

08007784 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007788:	4802      	ldr	r0, [pc, #8]	; (8007794 <SDIO_IRQHandler+0x10>)
 800778a:	f005 fe2f 	bl	800d3ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2004a904 	.word	0x2004a904

08007798 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800779c:	4802      	ldr	r0, [pc, #8]	; (80077a8 <TIM6_DAC_IRQHandler+0x10>)
 800779e:	f007 fd7e 	bl	800f29e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	2004a884 	.word	0x2004a884

080077ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80077b0:	4802      	ldr	r0, [pc, #8]	; (80077bc <TIM7_IRQHandler+0x10>)
 80077b2:	f007 fd74 	bl	800f29e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	2004aa28 	.word	0x2004aa28

080077c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80077c4:	4802      	ldr	r0, [pc, #8]	; (80077d0 <DMA2_Stream2_IRQHandler+0x10>)
 80077c6:	f003 f8fb 	bl	800a9c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	2004a9c8 	.word	0x2004a9c8

080077d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80077d8:	4802      	ldr	r0, [pc, #8]	; (80077e4 <DMA2_Stream3_IRQHandler+0x10>)
 80077da:	f003 f8f1 	bl	800a9c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80077de:	bf00      	nop
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2004a4f0 	.word	0x2004a4f0

080077e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80077ec:	4802      	ldr	r0, [pc, #8]	; (80077f8 <DMA2_Stream6_IRQHandler+0x10>)
 80077ee:	f003 f8e7 	bl	800a9c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80077f2:	bf00      	nop
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2004a824 	.word	0x2004a824

080077fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007804:	4a14      	ldr	r2, [pc, #80]	; (8007858 <_sbrk+0x5c>)
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <_sbrk+0x60>)
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <_sbrk+0x64>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <_sbrk+0x64>)
 800781a:	4a12      	ldr	r2, [pc, #72]	; (8007864 <_sbrk+0x68>)
 800781c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800781e:	4b10      	ldr	r3, [pc, #64]	; (8007860 <_sbrk+0x64>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	429a      	cmp	r2, r3
 800782a:	d207      	bcs.n	800783c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800782c:	f00c ff74 	bl	8014718 <__errno>
 8007830:	4602      	mov	r2, r0
 8007832:	230c      	movs	r3, #12
 8007834:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007836:	f04f 33ff 	mov.w	r3, #4294967295
 800783a:	e009      	b.n	8007850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <_sbrk+0x64>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <_sbrk+0x64>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	4a05      	ldr	r2, [pc, #20]	; (8007860 <_sbrk+0x64>)
 800784c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800784e:	68fb      	ldr	r3, [r7, #12]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20050000 	.word	0x20050000
 800785c:	00000800 	.word	0x00000800
 8007860:	20000234 	.word	0x20000234
 8007864:	2004cb78 	.word	0x2004cb78

08007868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800786c:	4b08      	ldr	r3, [pc, #32]	; (8007890 <SystemInit+0x28>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <SystemInit+0x28>)
 8007874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <SystemInit+0x28>)
 800787e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007882:	609a      	str	r2, [r3, #8]
#endif
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000ed00 	.word	0xe000ed00

08007894 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007894:	b598      	push	{r3, r4, r7, lr}
 8007896:	af00      	add	r7, sp, #0
	lcd_init();
 8007898:	f7f9 fbbe 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800789c:	483b      	ldr	r0, [pc, #236]	; (800798c <cppInit+0xf8>)
 800789e:	f7fd fd0f 	bl	80052c0 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80078a2:	2064      	movs	r0, #100	; 0x64
 80078a4:	f002 fa2c 	bl	8009d00 <HAL_Delay>
	power_sensor.updateValues();
 80078a8:	4838      	ldr	r0, [pc, #224]	; (800798c <cppInit+0xf8>)
 80078aa:	f7fd fd19 	bl	80052e0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80078ae:	f7f9 fbf7 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80078b2:	2100      	movs	r1, #0
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7f9 fc03 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80078ba:	4835      	ldr	r0, [pc, #212]	; (8007990 <cppInit+0xfc>)
 80078bc:	f7f9 fc2a 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80078c0:	2101      	movs	r1, #1
 80078c2:	2000      	movs	r0, #0
 80078c4:	f7f9 fbfc 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80078c8:	4830      	ldr	r0, [pc, #192]	; (800798c <cppInit+0xf8>)
 80078ca:	f7fd fd33 	bl	8005334 <_ZN11PowerSensor17getButteryVoltageEv>
 80078ce:	ee10 3a10 	vmov	r3, s0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7f8 fe50 	bl	8000578 <__aeabi_f2d>
 80078d8:	4603      	mov	r3, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	461a      	mov	r2, r3
 80078de:	4623      	mov	r3, r4
 80078e0:	482c      	ldr	r0, [pc, #176]	; (8007994 <cppInit+0x100>)
 80078e2:	f7f9 fc17 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 80078e6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80078ea:	f002 fa09 	bl	8009d00 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80078ee:	482a      	ldr	r0, [pc, #168]	; (8007998 <cppInit+0x104>)
 80078f0:	f7fd f80a 	bl	8004908 <_ZN6Logger10sdCardInitEv>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <cppInit+0x76>
		led.fullColor('G');
 80078fa:	2147      	movs	r1, #71	; 0x47
 80078fc:	4827      	ldr	r0, [pc, #156]	; (800799c <cppInit+0x108>)
 80078fe:	f7fa fbf9 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007902:	2064      	movs	r0, #100	; 0x64
 8007904:	f002 f9fc 	bl	8009d00 <HAL_Delay>
 8007908:	e006      	b.n	8007918 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800790a:	2152      	movs	r1, #82	; 0x52
 800790c:	4823      	ldr	r0, [pc, #140]	; (800799c <cppInit+0x108>)
 800790e:	f7fa fbf1 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007912:	2064      	movs	r0, #100	; 0x64
 8007914:	f002 f9f4 	bl	8009d00 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007918:	4821      	ldr	r0, [pc, #132]	; (80079a0 <cppInit+0x10c>)
 800791a:	f7fa fd47 	bl	80023ac <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800791e:	4821      	ldr	r0, [pc, #132]	; (80079a4 <cppInit+0x110>)
 8007920:	f7fd fa62 	bl	8004de8 <_ZN5Motor4initEv>
	encoder.init();
 8007924:	4820      	ldr	r0, [pc, #128]	; (80079a8 <cppInit+0x114>)
 8007926:	f7f9 fd81 	bl	800142c <_ZN7Encoder4initEv>
	imu.init();
 800792a:	4820      	ldr	r0, [pc, #128]	; (80079ac <cppInit+0x118>)
 800792c:	f7fa f9a2 	bl	8001c74 <_ZN3IMU4initEv>
	line_trace.init();
 8007930:	481f      	ldr	r0, [pc, #124]	; (80079b0 <cppInit+0x11c>)
 8007932:	f7fc f843 	bl	80039bc <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007936:	481a      	ldr	r0, [pc, #104]	; (80079a0 <cppInit+0x10c>)
 8007938:	f7fa fe2e 	bl	8002598 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800793c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007940:	f002 f9de 	bl	8009d00 <HAL_Delay>

	led.fullColor('M');
 8007944:	214d      	movs	r1, #77	; 0x4d
 8007946:	4815      	ldr	r0, [pc, #84]	; (800799c <cppInit+0x108>)
 8007948:	f7fa fbd4 	bl	80020f4 <_ZN3LED9fullColorEc>
	imu.calibration();
 800794c:	4817      	ldr	r0, [pc, #92]	; (80079ac <cppInit+0x118>)
 800794e:	f7fa fa59 	bl	8001e04 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007952:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80079b4 <cppInit+0x120>
 8007956:	eddf 0a18 	vldr	s1, [pc, #96]	; 80079b8 <cppInit+0x124>
 800795a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80079bc <cppInit+0x128>
 800795e:	4818      	ldr	r0, [pc, #96]	; (80079c0 <cppInit+0x12c>)
 8007960:	f7fe f99e 	bl	8005ca0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007964:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80079b4 <cppInit+0x120>
 8007968:	eddf 0a16 	vldr	s1, [pc, #88]	; 80079c4 <cppInit+0x130>
 800796c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80079c8 <cppInit+0x134>
 8007970:	4813      	ldr	r0, [pc, #76]	; (80079c0 <cppInit+0x12c>)
 8007972:	f7fe f9ae 	bl	8005cd2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007976:	4815      	ldr	r0, [pc, #84]	; (80079cc <cppInit+0x138>)
 8007978:	f7fd fbab 	bl	80050d2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800797c:	4814      	ldr	r0, [pc, #80]	; (80079d0 <cppInit+0x13c>)
 800797e:	f7fd fc43 	bl	8005208 <_ZN13PathFollowing4initEv>

	esc.init();
 8007982:	4814      	ldr	r0, [pc, #80]	; (80079d4 <cppInit+0x140>)
 8007984:	f7f9 fc32 	bl	80011ec <_ZN3ESC4initEv>

}
 8007988:	bf00      	nop
 800798a:	bd98      	pop	{r3, r4, r7, pc}
 800798c:	20000550 	.word	0x20000550
 8007990:	08018d64 	.word	0x08018d64
 8007994:	08018d6c 	.word	0x08018d6c
 8007998:	20000570 	.word	0x20000570
 800799c:	2000054c 	.word	0x2000054c
 80079a0:	20000238 	.word	0x20000238
 80079a4:	20000548 	.word	0x20000548
 80079a8:	200237fc 	.word	0x200237fc
 80079ac:	2000055c 	.word	0x2000055c
 80079b0:	200238a4 	.word	0x200238a4
 80079b4:	00000000 	.word	0x00000000
 80079b8:	4129999a 	.word	0x4129999a
 80079bc:	3f99999a 	.word	0x3f99999a
 80079c0:	20023820 	.word	0x20023820
 80079c4:	3f5e3fbc 	.word	0x3f5e3fbc
 80079c8:	3d75c28f 	.word	0x3d75c28f
 80079cc:	20023860 	.word	0x20023860
 80079d0:	200309f0 	.word	0x200309f0
 80079d4:	200238a0 	.word	0x200238a0

080079d8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80079dc:	480e      	ldr	r0, [pc, #56]	; (8007a18 <cppFlip1ms+0x40>)
 80079de:	f7fa fd43 	bl	8002468 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80079e2:	480e      	ldr	r0, [pc, #56]	; (8007a1c <cppFlip1ms+0x44>)
 80079e4:	f7fa f96c 	bl	8001cc0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80079e8:	480d      	ldr	r0, [pc, #52]	; (8007a20 <cppFlip1ms+0x48>)
 80079ea:	f7f9 fd41 	bl	8001470 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80079ee:	480d      	ldr	r0, [pc, #52]	; (8007a24 <cppFlip1ms+0x4c>)
 80079f0:	f7fc fa8a 	bl	8003f08 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80079f4:	480c      	ldr	r0, [pc, #48]	; (8007a28 <cppFlip1ms+0x50>)
 80079f6:	f7fe f985 	bl	8005d04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80079fa:	480c      	ldr	r0, [pc, #48]	; (8007a2c <cppFlip1ms+0x54>)
 80079fc:	f7fd fb3c 	bl	8005078 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007a00:	480b      	ldr	r0, [pc, #44]	; (8007a30 <cppFlip1ms+0x58>)
 8007a02:	f7fd fd67 	bl	80054d4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007a06:	480b      	ldr	r0, [pc, #44]	; (8007a34 <cppFlip1ms+0x5c>)
 8007a08:	f7fd fa00 	bl	8004e0c <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007a0c:	4804      	ldr	r0, [pc, #16]	; (8007a20 <cppFlip1ms+0x48>)
 8007a0e:	f7f9 fdbb 	bl	8001588 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000238 	.word	0x20000238
 8007a1c:	2000055c 	.word	0x2000055c
 8007a20:	200237fc 	.word	0x200237fc
 8007a24:	200238a4 	.word	0x200238a4
 8007a28:	20023820 	.word	0x20023820
 8007a2c:	20023860 	.word	0x20023860
 8007a30:	20000530 	.word	0x20000530
 8007a34:	20000548 	.word	0x20000548

08007a38 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <cppFlip100ns+0x10>)
 8007a3e:	f7fa fcc5 	bl	80023cc <_ZN10LineSensor17storeSensorValuesEv>
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000238 	.word	0x20000238

08007a4c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007a50:	480a      	ldr	r0, [pc, #40]	; (8007a7c <cppFlip10ms+0x30>)
 8007a52:	f7fc f98c 	bl	8003d6e <_ZN9LineTrace17getTargetVelocityEv>
 8007a56:	eef0 7a40 	vmov.f32	s15, s0
 8007a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5e:	4808      	ldr	r0, [pc, #32]	; (8007a80 <cppFlip10ms+0x34>)
 8007a60:	f7fc ff9a 	bl	8004998 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007a64:	4807      	ldr	r0, [pc, #28]	; (8007a84 <cppFlip10ms+0x38>)
 8007a66:	f7fe f98f 	bl	8005d88 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007a6a:	eef0 7a40 	vmov.f32	s15, s0
 8007a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a72:	4803      	ldr	r0, [pc, #12]	; (8007a80 <cppFlip10ms+0x34>)
 8007a74:	f7fc ffcd 	bl	8004a12 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007a78:	bf00      	nop
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200238a4 	.word	0x200238a4
 8007a80:	20000570 	.word	0x20000570
 8007a84:	20023820 	.word	0x20023820

08007a88 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d103      	bne.n	8007aa0 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8007a98:	4807      	ldr	r0, [pc, #28]	; (8007ab8 <cppExit+0x30>)
 8007a9a:	f7fd fcd3 	bl	8005444 <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8007a9e:	e006      	b.n	8007aae <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa6:	d102      	bne.n	8007aae <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8007aa8:	4803      	ldr	r0, [pc, #12]	; (8007ab8 <cppExit+0x30>)
 8007aaa:	f7fd fcef 	bl	800548c <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000530 	.word	0x20000530
 8007abc:	00000000 	.word	0x00000000

08007ac0 <cppLoop>:

void cppLoop(void)
{
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007ac6:	4baf      	ldr	r3, [pc, #700]	; (8007d84 <cppLoop+0x2c4>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f3bf 8f5b 	dmb	ish
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <cppLoop+0x4e>
 8007ae2:	48a8      	ldr	r0, [pc, #672]	; (8007d84 <cppLoop+0x2c4>)
 8007ae4:	f00c fe09 	bl	80146fa <__cxa_guard_acquire>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <cppLoop+0x4e>
 8007af8:	48a3      	ldr	r0, [pc, #652]	; (8007d88 <cppLoop+0x2c8>)
 8007afa:	f7fc f866 	bl	8003bca <_ZN9LineTrace5getKpEv>
 8007afe:	eef0 7a40 	vmov.f32	s15, s0
 8007b02:	4ba2      	ldr	r3, [pc, #648]	; (8007d8c <cppLoop+0x2cc>)
 8007b04:	edc3 7a00 	vstr	s15, [r3]
 8007b08:	489e      	ldr	r0, [pc, #632]	; (8007d84 <cppLoop+0x2c4>)
 8007b0a:	f00c fe02 	bl	8014712 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007b0e:	4ba0      	ldr	r3, [pc, #640]	; (8007d90 <cppLoop+0x2d0>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	f3bf 8f5b 	dmb	ish
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d015      	beq.n	8007b56 <cppLoop+0x96>
 8007b2a:	4899      	ldr	r0, [pc, #612]	; (8007d90 <cppLoop+0x2d0>)
 8007b2c:	f00c fde5 	bl	80146fa <__cxa_guard_acquire>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <cppLoop+0x96>
 8007b40:	4891      	ldr	r0, [pc, #580]	; (8007d88 <cppLoop+0x2c8>)
 8007b42:	f7fc f851 	bl	8003be8 <_ZN9LineTrace5getKiEv>
 8007b46:	eef0 7a40 	vmov.f32	s15, s0
 8007b4a:	4b92      	ldr	r3, [pc, #584]	; (8007d94 <cppLoop+0x2d4>)
 8007b4c:	edc3 7a00 	vstr	s15, [r3]
 8007b50:	488f      	ldr	r0, [pc, #572]	; (8007d90 <cppLoop+0x2d0>)
 8007b52:	f00c fdde 	bl	8014712 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007b56:	4b90      	ldr	r3, [pc, #576]	; (8007d98 <cppLoop+0x2d8>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f3bf 8f5b 	dmb	ish
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <cppLoop+0xde>
 8007b72:	4889      	ldr	r0, [pc, #548]	; (8007d98 <cppLoop+0x2d8>)
 8007b74:	f00c fdc1 	bl	80146fa <__cxa_guard_acquire>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <cppLoop+0xde>
 8007b88:	487f      	ldr	r0, [pc, #508]	; (8007d88 <cppLoop+0x2c8>)
 8007b8a:	f7fc f83c 	bl	8003c06 <_ZN9LineTrace5getKdEv>
 8007b8e:	eef0 7a40 	vmov.f32	s15, s0
 8007b92:	4b82      	ldr	r3, [pc, #520]	; (8007d9c <cppLoop+0x2dc>)
 8007b94:	edc3 7a00 	vstr	s15, [r3]
 8007b98:	487f      	ldr	r0, [pc, #508]	; (8007d98 <cppLoop+0x2d8>)
 8007b9a:	f00c fdba 	bl	8014712 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007b9e:	4b80      	ldr	r3, [pc, #512]	; (8007da0 <cppLoop+0x2e0>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	f3bf 8f5b 	dmb	ish
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf0c      	ite	eq
 8007bb0:	2301      	moveq	r3, #1
 8007bb2:	2300      	movne	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d015      	beq.n	8007be6 <cppLoop+0x126>
 8007bba:	4879      	ldr	r0, [pc, #484]	; (8007da0 <cppLoop+0x2e0>)
 8007bbc:	f00c fd9d 	bl	80146fa <__cxa_guard_acquire>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <cppLoop+0x126>
 8007bd0:	486d      	ldr	r0, [pc, #436]	; (8007d88 <cppLoop+0x2c8>)
 8007bd2:	f7fc f840 	bl	8003c56 <_ZN9LineTrace9getKpSlowEv>
 8007bd6:	eef0 7a40 	vmov.f32	s15, s0
 8007bda:	4b72      	ldr	r3, [pc, #456]	; (8007da4 <cppLoop+0x2e4>)
 8007bdc:	edc3 7a00 	vstr	s15, [r3]
 8007be0:	486f      	ldr	r0, [pc, #444]	; (8007da0 <cppLoop+0x2e0>)
 8007be2:	f00c fd96 	bl	8014712 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007be6:	4b70      	ldr	r3, [pc, #448]	; (8007da8 <cppLoop+0x2e8>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f3bf 8f5b 	dmb	ish
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d015      	beq.n	8007c2e <cppLoop+0x16e>
 8007c02:	4869      	ldr	r0, [pc, #420]	; (8007da8 <cppLoop+0x2e8>)
 8007c04:	f00c fd79 	bl	80146fa <__cxa_guard_acquire>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bf14      	ite	ne
 8007c0e:	2301      	movne	r3, #1
 8007c10:	2300      	moveq	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <cppLoop+0x16e>
 8007c18:	485b      	ldr	r0, [pc, #364]	; (8007d88 <cppLoop+0x2c8>)
 8007c1a:	f7fc f82b 	bl	8003c74 <_ZN9LineTrace9getKiSlowEv>
 8007c1e:	eef0 7a40 	vmov.f32	s15, s0
 8007c22:	4b62      	ldr	r3, [pc, #392]	; (8007dac <cppLoop+0x2ec>)
 8007c24:	edc3 7a00 	vstr	s15, [r3]
 8007c28:	485f      	ldr	r0, [pc, #380]	; (8007da8 <cppLoop+0x2e8>)
 8007c2a:	f00c fd72 	bl	8014712 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007c2e:	4b60      	ldr	r3, [pc, #384]	; (8007db0 <cppLoop+0x2f0>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f3bf 8f5b 	dmb	ish
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d015      	beq.n	8007c76 <cppLoop+0x1b6>
 8007c4a:	4859      	ldr	r0, [pc, #356]	; (8007db0 <cppLoop+0x2f0>)
 8007c4c:	f00c fd55 	bl	80146fa <__cxa_guard_acquire>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <cppLoop+0x1b6>
 8007c60:	4849      	ldr	r0, [pc, #292]	; (8007d88 <cppLoop+0x2c8>)
 8007c62:	f7fc f816 	bl	8003c92 <_ZN9LineTrace9getKdSlowEv>
 8007c66:	eef0 7a40 	vmov.f32	s15, s0
 8007c6a:	4b52      	ldr	r3, [pc, #328]	; (8007db4 <cppLoop+0x2f4>)
 8007c6c:	edc3 7a00 	vstr	s15, [r3]
 8007c70:	484f      	ldr	r0, [pc, #316]	; (8007db0 <cppLoop+0x2f0>)
 8007c72:	f00c fd4e 	bl	8014712 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007c76:	4b50      	ldr	r3, [pc, #320]	; (8007db8 <cppLoop+0x2f8>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f3bf 8f5b 	dmb	ish
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d015      	beq.n	8007cbe <cppLoop+0x1fe>
 8007c92:	4849      	ldr	r0, [pc, #292]	; (8007db8 <cppLoop+0x2f8>)
 8007c94:	f00c fd31 	bl	80146fa <__cxa_guard_acquire>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf14      	ite	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	2300      	moveq	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <cppLoop+0x1fe>
 8007ca8:	4837      	ldr	r0, [pc, #220]	; (8007d88 <cppLoop+0x2c8>)
 8007caa:	f7fc f860 	bl	8003d6e <_ZN9LineTrace17getTargetVelocityEv>
 8007cae:	eef0 7a40 	vmov.f32	s15, s0
 8007cb2:	4b42      	ldr	r3, [pc, #264]	; (8007dbc <cppLoop+0x2fc>)
 8007cb4:	edc3 7a00 	vstr	s15, [r3]
 8007cb8:	483f      	ldr	r0, [pc, #252]	; (8007db8 <cppLoop+0x2f8>)
 8007cba:	f00c fd2a 	bl	8014712 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007cbe:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <cppLoop+0x300>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f3bf 8f5b 	dmb	ish
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d015      	beq.n	8007d06 <cppLoop+0x246>
 8007cda:	4839      	ldr	r0, [pc, #228]	; (8007dc0 <cppLoop+0x300>)
 8007cdc:	f00c fd0d 	bl	80146fa <__cxa_guard_acquire>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bf14      	ite	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	2300      	moveq	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <cppLoop+0x246>
 8007cf0:	4825      	ldr	r0, [pc, #148]	; (8007d88 <cppLoop+0x2c8>)
 8007cf2:	f7fc f84c 	bl	8003d8e <_ZN9LineTrace14getMaxVelocityEv>
 8007cf6:	eef0 7a40 	vmov.f32	s15, s0
 8007cfa:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <cppLoop+0x304>)
 8007cfc:	edc3 7a00 	vstr	s15, [r3]
 8007d00:	482f      	ldr	r0, [pc, #188]	; (8007dc0 <cppLoop+0x300>)
 8007d02:	f00c fd06 	bl	8014712 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007d06:	4b30      	ldr	r3, [pc, #192]	; (8007dc8 <cppLoop+0x308>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f3bf 8f5b 	dmb	ish
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <cppLoop+0x28e>
 8007d22:	4829      	ldr	r0, [pc, #164]	; (8007dc8 <cppLoop+0x308>)
 8007d24:	f00c fce9 	bl	80146fa <__cxa_guard_acquire>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf14      	ite	ne
 8007d2e:	2301      	movne	r3, #1
 8007d30:	2300      	moveq	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <cppLoop+0x28e>
 8007d38:	4813      	ldr	r0, [pc, #76]	; (8007d88 <cppLoop+0x2c8>)
 8007d3a:	f7fc f838 	bl	8003dae <_ZN9LineTrace15getMaxVelocity2Ev>
 8007d3e:	eef0 7a40 	vmov.f32	s15, s0
 8007d42:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <cppLoop+0x30c>)
 8007d44:	edc3 7a00 	vstr	s15, [r3]
 8007d48:	481f      	ldr	r0, [pc, #124]	; (8007dc8 <cppLoop+0x308>)
 8007d4a:	f00c fce2 	bl	8014712 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <cppLoop+0x310>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f3bf 8f5b 	dmb	ish
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d03f      	beq.n	8007dea <cppLoop+0x32a>
 8007d6a:	4819      	ldr	r0, [pc, #100]	; (8007dd0 <cppLoop+0x310>)
 8007d6c:	f00c fcc5 	bl	80146fa <__cxa_guard_acquire>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	2300      	moveq	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d034      	beq.n	8007dea <cppLoop+0x32a>
 8007d80:	e028      	b.n	8007dd4 <cppLoop+0x314>
 8007d82:	bf00      	nop
 8007d84:	20048128 	.word	0x20048128
 8007d88:	200238a4 	.word	0x200238a4
 8007d8c:	20048124 	.word	0x20048124
 8007d90:	20048130 	.word	0x20048130
 8007d94:	2004812c 	.word	0x2004812c
 8007d98:	20048138 	.word	0x20048138
 8007d9c:	20048134 	.word	0x20048134
 8007da0:	20048140 	.word	0x20048140
 8007da4:	2004813c 	.word	0x2004813c
 8007da8:	20048148 	.word	0x20048148
 8007dac:	20048144 	.word	0x20048144
 8007db0:	20048150 	.word	0x20048150
 8007db4:	2004814c 	.word	0x2004814c
 8007db8:	20048158 	.word	0x20048158
 8007dbc:	20048154 	.word	0x20048154
 8007dc0:	20048160 	.word	0x20048160
 8007dc4:	2004815c 	.word	0x2004815c
 8007dc8:	20048168 	.word	0x20048168
 8007dcc:	20048164 	.word	0x20048164
 8007dd0:	20048170 	.word	0x20048170
 8007dd4:	48b6      	ldr	r0, [pc, #728]	; (80080b0 <cppLoop+0x5f0>)
 8007dd6:	f7fb fffa 	bl	8003dce <_ZN9LineTrace14getMinVelocityEv>
 8007dda:	eef0 7a40 	vmov.f32	s15, s0
 8007dde:	4bb5      	ldr	r3, [pc, #724]	; (80080b4 <cppLoop+0x5f4>)
 8007de0:	edc3 7a00 	vstr	s15, [r3]
 8007de4:	48b4      	ldr	r0, [pc, #720]	; (80080b8 <cppLoop+0x5f8>)
 8007de6:	f00c fc94 	bl	8014712 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007dea:	4bb4      	ldr	r3, [pc, #720]	; (80080bc <cppLoop+0x5fc>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f3bf 8f5b 	dmb	ish
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d015      	beq.n	8007e32 <cppLoop+0x372>
 8007e06:	48ad      	ldr	r0, [pc, #692]	; (80080bc <cppLoop+0x5fc>)
 8007e08:	f00c fc77 	bl	80146fa <__cxa_guard_acquire>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <cppLoop+0x372>
 8007e1c:	48a4      	ldr	r0, [pc, #656]	; (80080b0 <cppLoop+0x5f0>)
 8007e1e:	f7fb ffe6 	bl	8003dee <_ZN9LineTrace15getMinVelocity2Ev>
 8007e22:	eef0 7a40 	vmov.f32	s15, s0
 8007e26:	4ba6      	ldr	r3, [pc, #664]	; (80080c0 <cppLoop+0x600>)
 8007e28:	edc3 7a00 	vstr	s15, [r3]
 8007e2c:	48a3      	ldr	r0, [pc, #652]	; (80080bc <cppLoop+0x5fc>)
 8007e2e:	f00c fc70 	bl	8014712 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007e32:	4ba4      	ldr	r3, [pc, #656]	; (80080c4 <cppLoop+0x604>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f3bf 8f5b 	dmb	ish
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d015      	beq.n	8007e7a <cppLoop+0x3ba>
 8007e4e:	489d      	ldr	r0, [pc, #628]	; (80080c4 <cppLoop+0x604>)
 8007e50:	f00c fc53 	bl	80146fa <__cxa_guard_acquire>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <cppLoop+0x3ba>
 8007e64:	4892      	ldr	r0, [pc, #584]	; (80080b0 <cppLoop+0x5f0>)
 8007e66:	f7fc f806 	bl	8003e76 <_ZN9LineTrace9getMaxAccEv>
 8007e6a:	eef0 7a40 	vmov.f32	s15, s0
 8007e6e:	4b96      	ldr	r3, [pc, #600]	; (80080c8 <cppLoop+0x608>)
 8007e70:	edc3 7a00 	vstr	s15, [r3]
 8007e74:	4893      	ldr	r0, [pc, #588]	; (80080c4 <cppLoop+0x604>)
 8007e76:	f00c fc4c 	bl	8014712 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007e7a:	4b94      	ldr	r3, [pc, #592]	; (80080cc <cppLoop+0x60c>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f3bf 8f5b 	dmb	ish
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2301      	moveq	r3, #1
 8007e8e:	2300      	movne	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d015      	beq.n	8007ec2 <cppLoop+0x402>
 8007e96:	488d      	ldr	r0, [pc, #564]	; (80080cc <cppLoop+0x60c>)
 8007e98:	f00c fc2f 	bl	80146fa <__cxa_guard_acquire>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bf14      	ite	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	2300      	moveq	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <cppLoop+0x402>
 8007eac:	4880      	ldr	r0, [pc, #512]	; (80080b0 <cppLoop+0x5f0>)
 8007eae:	f7fc f818 	bl	8003ee2 <_ZN9LineTrace9getMaxDecEv>
 8007eb2:	eef0 7a40 	vmov.f32	s15, s0
 8007eb6:	4b86      	ldr	r3, [pc, #536]	; (80080d0 <cppLoop+0x610>)
 8007eb8:	edc3 7a00 	vstr	s15, [r3]
 8007ebc:	4883      	ldr	r0, [pc, #524]	; (80080cc <cppLoop+0x60c>)
 8007ebe:	f00c fc28 	bl	8014712 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007ec2:	4b84      	ldr	r3, [pc, #528]	; (80080d4 <cppLoop+0x614>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f3bf 8f5b 	dmb	ish
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d015      	beq.n	8007f0a <cppLoop+0x44a>
 8007ede:	487d      	ldr	r0, [pc, #500]	; (80080d4 <cppLoop+0x614>)
 8007ee0:	f00c fc0b 	bl	80146fa <__cxa_guard_acquire>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <cppLoop+0x44a>
 8007ef4:	486e      	ldr	r0, [pc, #440]	; (80080b0 <cppLoop+0x5f0>)
 8007ef6:	f7fb ffe2 	bl	8003ebe <_ZN9LineTrace10getMaxAcc2Ev>
 8007efa:	eef0 7a40 	vmov.f32	s15, s0
 8007efe:	4b76      	ldr	r3, [pc, #472]	; (80080d8 <cppLoop+0x618>)
 8007f00:	edc3 7a00 	vstr	s15, [r3]
 8007f04:	4873      	ldr	r0, [pc, #460]	; (80080d4 <cppLoop+0x614>)
 8007f06:	f00c fc04 	bl	8014712 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007f0a:	4b74      	ldr	r3, [pc, #464]	; (80080dc <cppLoop+0x61c>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	f3bf 8f5b 	dmb	ish
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d015      	beq.n	8007f52 <cppLoop+0x492>
 8007f26:	486d      	ldr	r0, [pc, #436]	; (80080dc <cppLoop+0x61c>)
 8007f28:	f00c fbe7 	bl	80146fa <__cxa_guard_acquire>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bf14      	ite	ne
 8007f32:	2301      	movne	r3, #1
 8007f34:	2300      	moveq	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <cppLoop+0x492>
 8007f3c:	485c      	ldr	r0, [pc, #368]	; (80080b0 <cppLoop+0x5f0>)
 8007f3e:	f7fb ffac 	bl	8003e9a <_ZN9LineTrace10getMaxDec2Ev>
 8007f42:	eef0 7a40 	vmov.f32	s15, s0
 8007f46:	4b66      	ldr	r3, [pc, #408]	; (80080e0 <cppLoop+0x620>)
 8007f48:	edc3 7a00 	vstr	s15, [r3]
 8007f4c:	4863      	ldr	r0, [pc, #396]	; (80080dc <cppLoop+0x61c>)
 8007f4e:	f00c fbe0 	bl	8014712 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007f52:	4864      	ldr	r0, [pc, #400]	; (80080e4 <cppLoop+0x624>)
 8007f54:	f7fd f9fe 	bl	8005354 <_ZN12RotarySwitch8getValueEv>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	f201 8586 	bhi.w	8009a6c <cppLoop+0x1fac>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <cppLoop+0x4a8>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007fa9 	.word	0x08007fa9
 8007f6c:	0800832d 	.word	0x0800832d
 8007f70:	08008449 	.word	0x08008449
 8007f74:	0800859b 	.word	0x0800859b
 8007f78:	0800868f 	.word	0x0800868f
 8007f7c:	08008931 	.word	0x08008931
 8007f80:	08008a99 	.word	0x08008a99
 8007f84:	08008d1d 	.word	0x08008d1d
 8007f88:	08008f67 	.word	0x08008f67
 8007f8c:	080091f7 	.word	0x080091f7
 8007f90:	080092b3 	.word	0x080092b3
 8007f94:	080093a9 	.word	0x080093a9
 8007f98:	0800942f 	.word	0x0800942f
 8007f9c:	080094f5 	.word	0x080094f5
 8007fa0:	080095bb 	.word	0x080095bb
 8007fa4:	080096fd 	.word	0x080096fd
	case 0:
		led.fullColor('W');
 8007fa8:	2157      	movs	r1, #87	; 0x57
 8007faa:	484f      	ldr	r0, [pc, #316]	; (80080e8 <cppLoop+0x628>)
 8007fac:	f7fa f8a2 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fb0:	f7f9 f876 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f7f9 f882 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8007fbc:	483c      	ldr	r0, [pc, #240]	; (80080b0 <cppLoop+0x5f0>)
 8007fbe:	f7fb fe4a 	bl	8003c56 <_ZN9LineTrace9getKpSlowEv>
 8007fc2:	eeb0 7a40 	vmov.f32	s14, s0
 8007fc6:	eddf 7a49 	vldr	s15, [pc, #292]	; 80080ec <cppLoop+0x62c>
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	eeb0 0a67 	vmov.f32	s0, s15
 8007fd2:	f7fa fc51 	bl	8002878 <_ZSt3absf>
 8007fd6:	ee10 3a10 	vmov	r3, s0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 facc 	bl	8000578 <__aeabi_f2d>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	4841      	ldr	r0, [pc, #260]	; (80080f0 <cppLoop+0x630>)
 8007fea:	f7f9 f893 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fee:	2101      	movs	r1, #1
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f7f9 f865 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 8007ff6:	482e      	ldr	r0, [pc, #184]	; (80080b0 <cppLoop+0x5f0>)
 8007ff8:	f7fb fe3c 	bl	8003c74 <_ZN9LineTrace9getKiSlowEv>
 8007ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8008000:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80080f4 <cppLoop+0x634>
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	eeb0 0a67 	vmov.f32	s0, s15
 800800c:	f7fa fc34 	bl	8002878 <_ZSt3absf>
 8008010:	ee10 3a10 	vmov	r3, s0
 8008014:	4618      	mov	r0, r3
 8008016:	f7f8 faaf 	bl	8000578 <__aeabi_f2d>
 800801a:	4605      	mov	r5, r0
 800801c:	460e      	mov	r6, r1
 800801e:	4824      	ldr	r0, [pc, #144]	; (80080b0 <cppLoop+0x5f0>)
 8008020:	f7fb fe37 	bl	8003c92 <_ZN9LineTrace9getKdSlowEv>
 8008024:	eeb0 7a40 	vmov.f32	s14, s0
 8008028:	eddf 7a33 	vldr	s15, [pc, #204]	; 80080f8 <cppLoop+0x638>
 800802c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008030:	eeb0 0a67 	vmov.f32	s0, s15
 8008034:	f7fa fc20 	bl	8002878 <_ZSt3absf>
 8008038:	ee10 3a10 	vmov	r3, s0
 800803c:	4618      	mov	r0, r3
 800803e:	f7f8 fa9b 	bl	8000578 <__aeabi_f2d>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	e9cd 3400 	strd	r3, r4, [sp]
 800804a:	462a      	mov	r2, r5
 800804c:	4633      	mov	r3, r6
 800804e:	482b      	ldr	r0, [pc, #172]	; (80080fc <cppLoop+0x63c>)
 8008050:	f7f9 f860 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008054:	482a      	ldr	r0, [pc, #168]	; (8008100 <cppLoop+0x640>)
 8008056:	f7f9 ffe9 	bl	800202c <_ZN8JoyStick8getValueEv>
 800805a:	4603      	mov	r3, r0
 800805c:	2b08      	cmp	r3, #8
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04e      	beq.n	8008108 <cppLoop+0x648>
			led.LR(-1, 1);
 800806a:	2201      	movs	r2, #1
 800806c:	f04f 31ff 	mov.w	r1, #4294967295
 8008070:	481d      	ldr	r0, [pc, #116]	; (80080e8 <cppLoop+0x628>)
 8008072:	f7fa f8fb 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008076:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800807a:	f001 fe41 	bl	8009d00 <HAL_Delay>

			selector++;
 800807e:	4b21      	ldr	r3, [pc, #132]	; (8008104 <cppLoop+0x644>)
 8008080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008084:	b29b      	uxth	r3, r3
 8008086:	3301      	adds	r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	b21a      	sxth	r2, r3
 800808c:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <cppLoop+0x644>)
 800808e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008090:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <cppLoop+0x644>)
 8008092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008096:	2b02      	cmp	r3, #2
 8008098:	dd02      	ble.n	80080a0 <cppLoop+0x5e0>
 800809a:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <cppLoop+0x644>)
 800809c:	2200      	movs	r2, #0
 800809e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80080a0:	2200      	movs	r2, #0
 80080a2:	f04f 31ff 	mov.w	r1, #4294967295
 80080a6:	4810      	ldr	r0, [pc, #64]	; (80080e8 <cppLoop+0x628>)
 80080a8:	f7fa f8e0 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80080ac:	f001 bce0 	b.w	8009a70 <cppLoop+0x1fb0>
 80080b0:	200238a4 	.word	0x200238a4
 80080b4:	2004816c 	.word	0x2004816c
 80080b8:	20048170 	.word	0x20048170
 80080bc:	20048178 	.word	0x20048178
 80080c0:	20048174 	.word	0x20048174
 80080c4:	20048180 	.word	0x20048180
 80080c8:	2004817c 	.word	0x2004817c
 80080cc:	20048188 	.word	0x20048188
 80080d0:	20048184 	.word	0x20048184
 80080d4:	20048190 	.word	0x20048190
 80080d8:	2004818c 	.word	0x2004818c
 80080dc:	20048198 	.word	0x20048198
 80080e0:	20048194 	.word	0x20048194
 80080e4:	20000544 	.word	0x20000544
 80080e8:	2000054c 	.word	0x2000054c
 80080ec:	461c4000 	.word	0x461c4000
 80080f0:	08018d70 	.word	0x08018d70
 80080f4:	447a0000 	.word	0x447a0000
 80080f8:	47c35000 	.word	0x47c35000
 80080fc:	08018d7c 	.word	0x08018d7c
 8008100:	20000540 	.word	0x20000540
 8008104:	20048118 	.word	0x20048118
		else if(joy_stick.getValue() == JOY_R){
 8008108:	48bd      	ldr	r0, [pc, #756]	; (8008400 <cppLoop+0x940>)
 800810a:	f7f9 ff8f 	bl	800202c <_ZN8JoyStick8getValueEv>
 800810e:	4603      	mov	r3, r0
 8008110:	2b10      	cmp	r3, #16
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d059      	beq.n	80081d2 <cppLoop+0x712>
			led.LR(-1, 1);
 800811e:	2201      	movs	r2, #1
 8008120:	f04f 31ff 	mov.w	r1, #4294967295
 8008124:	48b7      	ldr	r0, [pc, #732]	; (8008404 <cppLoop+0x944>)
 8008126:	f7fa f8a1 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800812a:	2064      	movs	r0, #100	; 0x64
 800812c:	f001 fde8 	bl	8009d00 <HAL_Delay>
			if(selector == 0){
 8008130:	4bb5      	ldr	r3, [pc, #724]	; (8008408 <cppLoop+0x948>)
 8008132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d113      	bne.n	8008162 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 800813a:	4bb4      	ldr	r3, [pc, #720]	; (800840c <cppLoop+0x94c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7f8 fa1a 	bl	8000578 <__aeabi_f2d>
 8008144:	a3a8      	add	r3, pc, #672	; (adr r3, 80083e8 <cppLoop+0x928>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f8b7 	bl	80002bc <__adddf3>
 800814e:	4603      	mov	r3, r0
 8008150:	460c      	mov	r4, r1
 8008152:	4618      	mov	r0, r3
 8008154:	4621      	mov	r1, r4
 8008156:	f7f8 fd5f 	bl	8000c18 <__aeabi_d2f>
 800815a:	4602      	mov	r2, r0
 800815c:	4bab      	ldr	r3, [pc, #684]	; (800840c <cppLoop+0x94c>)
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e02b      	b.n	80081ba <cppLoop+0x6fa>
			else if(selector == 1){
 8008162:	4ba9      	ldr	r3, [pc, #676]	; (8008408 <cppLoop+0x948>)
 8008164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d113      	bne.n	8008194 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 800816c:	4ba8      	ldr	r3, [pc, #672]	; (8008410 <cppLoop+0x950>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f7f8 fa01 	bl	8000578 <__aeabi_f2d>
 8008176:	a39e      	add	r3, pc, #632	; (adr r3, 80083f0 <cppLoop+0x930>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f7f8 f89e 	bl	80002bc <__adddf3>
 8008180:	4603      	mov	r3, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4618      	mov	r0, r3
 8008186:	4621      	mov	r1, r4
 8008188:	f7f8 fd46 	bl	8000c18 <__aeabi_d2f>
 800818c:	4602      	mov	r2, r0
 800818e:	4ba0      	ldr	r3, [pc, #640]	; (8008410 <cppLoop+0x950>)
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e012      	b.n	80081ba <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 8008194:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <cppLoop+0x954>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7f8 f9ed 	bl	8000578 <__aeabi_f2d>
 800819e:	a396      	add	r3, pc, #600	; (adr r3, 80083f8 <cppLoop+0x938>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f88a 	bl	80002bc <__adddf3>
 80081a8:	4603      	mov	r3, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	4618      	mov	r0, r3
 80081ae:	4621      	mov	r1, r4
 80081b0:	f7f8 fd32 	bl	8000c18 <__aeabi_d2f>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b97      	ldr	r3, [pc, #604]	; (8008414 <cppLoop+0x954>)
 80081b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80081ba:	2152      	movs	r1, #82	; 0x52
 80081bc:	4891      	ldr	r0, [pc, #580]	; (8008404 <cppLoop+0x944>)
 80081be:	f7f9 ff99 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80081c2:	2200      	movs	r2, #0
 80081c4:	f04f 31ff 	mov.w	r1, #4294967295
 80081c8:	488e      	ldr	r0, [pc, #568]	; (8008404 <cppLoop+0x944>)
 80081ca:	f7fa f84f 	bl	800226c <_ZN3LED2LREaa>
		break;
 80081ce:	f001 bc4f 	b.w	8009a70 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 80081d2:	488b      	ldr	r0, [pc, #556]	; (8008400 <cppLoop+0x940>)
 80081d4:	f7f9 ff2a 	bl	800202c <_ZN8JoyStick8getValueEv>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d059      	beq.n	800829c <cppLoop+0x7dc>
			led.LR(-1, 1);
 80081e8:	2201      	movs	r2, #1
 80081ea:	f04f 31ff 	mov.w	r1, #4294967295
 80081ee:	4885      	ldr	r0, [pc, #532]	; (8008404 <cppLoop+0x944>)
 80081f0:	f7fa f83c 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081f4:	2064      	movs	r0, #100	; 0x64
 80081f6:	f001 fd83 	bl	8009d00 <HAL_Delay>
			if(selector == 0){
 80081fa:	4b83      	ldr	r3, [pc, #524]	; (8008408 <cppLoop+0x948>)
 80081fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d113      	bne.n	800822c <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008204:	4b81      	ldr	r3, [pc, #516]	; (800840c <cppLoop+0x94c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7f8 f9b5 	bl	8000578 <__aeabi_f2d>
 800820e:	a376      	add	r3, pc, #472	; (adr r3, 80083e8 <cppLoop+0x928>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 f850 	bl	80002b8 <__aeabi_dsub>
 8008218:	4603      	mov	r3, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4618      	mov	r0, r3
 800821e:	4621      	mov	r1, r4
 8008220:	f7f8 fcfa 	bl	8000c18 <__aeabi_d2f>
 8008224:	4602      	mov	r2, r0
 8008226:	4b79      	ldr	r3, [pc, #484]	; (800840c <cppLoop+0x94c>)
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e02b      	b.n	8008284 <cppLoop+0x7c4>
			else if(selector == 1){
 800822c:	4b76      	ldr	r3, [pc, #472]	; (8008408 <cppLoop+0x948>)
 800822e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d113      	bne.n	800825e <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008236:	4b76      	ldr	r3, [pc, #472]	; (8008410 <cppLoop+0x950>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7f8 f99c 	bl	8000578 <__aeabi_f2d>
 8008240:	a36b      	add	r3, pc, #428	; (adr r3, 80083f0 <cppLoop+0x930>)
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f7f8 f837 	bl	80002b8 <__aeabi_dsub>
 800824a:	4603      	mov	r3, r0
 800824c:	460c      	mov	r4, r1
 800824e:	4618      	mov	r0, r3
 8008250:	4621      	mov	r1, r4
 8008252:	f7f8 fce1 	bl	8000c18 <__aeabi_d2f>
 8008256:	4602      	mov	r2, r0
 8008258:	4b6d      	ldr	r3, [pc, #436]	; (8008410 <cppLoop+0x950>)
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e012      	b.n	8008284 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <cppLoop+0x954>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f7f8 f988 	bl	8000578 <__aeabi_f2d>
 8008268:	a363      	add	r3, pc, #396	; (adr r3, 80083f8 <cppLoop+0x938>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7f8 f823 	bl	80002b8 <__aeabi_dsub>
 8008272:	4603      	mov	r3, r0
 8008274:	460c      	mov	r4, r1
 8008276:	4618      	mov	r0, r3
 8008278:	4621      	mov	r1, r4
 800827a:	f7f8 fccd 	bl	8000c18 <__aeabi_d2f>
 800827e:	4602      	mov	r2, r0
 8008280:	4b64      	ldr	r3, [pc, #400]	; (8008414 <cppLoop+0x954>)
 8008282:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008284:	2152      	movs	r1, #82	; 0x52
 8008286:	485f      	ldr	r0, [pc, #380]	; (8008404 <cppLoop+0x944>)
 8008288:	f7f9 ff34 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800828c:	2200      	movs	r2, #0
 800828e:	f04f 31ff 	mov.w	r1, #4294967295
 8008292:	485c      	ldr	r0, [pc, #368]	; (8008404 <cppLoop+0x944>)
 8008294:	f7f9 ffea 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008298:	f001 bbea 	b.w	8009a70 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 800829c:	4858      	ldr	r0, [pc, #352]	; (8008400 <cppLoop+0x940>)
 800829e:	f7f9 fec5 	bl	800202c <_ZN8JoyStick8getValueEv>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	bf0c      	ite	eq
 80082a8:	2301      	moveq	r3, #1
 80082aa:	2300      	movne	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f001 83de 	beq.w	8009a70 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 80082b4:	2201      	movs	r2, #1
 80082b6:	f04f 31ff 	mov.w	r1, #4294967295
 80082ba:	4852      	ldr	r0, [pc, #328]	; (8008404 <cppLoop+0x944>)
 80082bc:	f7f9 ffd6 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082c4:	f001 fd1c 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80082c8:	2300      	movs	r3, #0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4b4f      	ldr	r3, [pc, #316]	; (800840c <cppLoop+0x94c>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	4951      	ldr	r1, [pc, #324]	; (8008418 <cppLoop+0x958>)
 80082d2:	4852      	ldr	r0, [pc, #328]	; (800841c <cppLoop+0x95c>)
 80082d4:	f7f9 fa94 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4b4c      	ldr	r3, [pc, #304]	; (8008410 <cppLoop+0x950>)
 80082de:	2201      	movs	r2, #1
 80082e0:	494f      	ldr	r1, [pc, #316]	; (8008420 <cppLoop+0x960>)
 80082e2:	484e      	ldr	r0, [pc, #312]	; (800841c <cppLoop+0x95c>)
 80082e4:	f7f9 fa8c 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80082e8:	2300      	movs	r3, #0
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4b49      	ldr	r3, [pc, #292]	; (8008414 <cppLoop+0x954>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	494c      	ldr	r1, [pc, #304]	; (8008424 <cppLoop+0x964>)
 80082f2:	484a      	ldr	r0, [pc, #296]	; (800841c <cppLoop+0x95c>)
 80082f4:	f7f9 fa84 	bl	8001800 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80082f8:	4b44      	ldr	r3, [pc, #272]	; (800840c <cppLoop+0x94c>)
 80082fa:	edd3 7a00 	vldr	s15, [r3]
 80082fe:	4b44      	ldr	r3, [pc, #272]	; (8008410 <cppLoop+0x950>)
 8008300:	ed93 7a00 	vldr	s14, [r3]
 8008304:	4b43      	ldr	r3, [pc, #268]	; (8008414 <cppLoop+0x954>)
 8008306:	edd3 6a00 	vldr	s13, [r3]
 800830a:	eeb0 1a66 	vmov.f32	s2, s13
 800830e:	eef0 0a47 	vmov.f32	s1, s14
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	4844      	ldr	r0, [pc, #272]	; (8008428 <cppLoop+0x968>)
 8008318:	f7fb fc84 	bl	8003c24 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 800831c:	2200      	movs	r2, #0
 800831e:	f04f 31ff 	mov.w	r1, #4294967295
 8008322:	4838      	ldr	r0, [pc, #224]	; (8008404 <cppLoop+0x944>)
 8008324:	f7f9 ffa2 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008328:	f001 bba2 	b.w	8009a70 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 800832c:	2143      	movs	r1, #67	; 0x43
 800832e:	4835      	ldr	r0, [pc, #212]	; (8008404 <cppLoop+0x944>)
 8008330:	f7f9 fee0 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008334:	f7f8 feb4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008338:	2100      	movs	r1, #0
 800833a:	2000      	movs	r0, #0
 800833c:	f7f8 fec0 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008340:	483a      	ldr	r0, [pc, #232]	; (800842c <cppLoop+0x96c>)
 8008342:	f7f8 fee7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008346:	2101      	movs	r1, #1
 8008348:	2000      	movs	r0, #0
 800834a:	f7f8 feb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800834e:	4b38      	ldr	r3, [pc, #224]	; (8008430 <cppLoop+0x970>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f7f8 f910 	bl	8000578 <__aeabi_f2d>
 8008358:	4603      	mov	r3, r0
 800835a:	460c      	mov	r4, r1
 800835c:	461a      	mov	r2, r3
 800835e:	4623      	mov	r3, r4
 8008360:	4834      	ldr	r0, [pc, #208]	; (8008434 <cppLoop+0x974>)
 8008362:	f7f8 fed7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008366:	4826      	ldr	r0, [pc, #152]	; (8008400 <cppLoop+0x940>)
 8008368:	f7f9 fe60 	bl	800202c <_ZN8JoyStick8getValueEv>
 800836c:	4603      	mov	r3, r0
 800836e:	2b02      	cmp	r3, #2
 8008370:	bf0c      	ite	eq
 8008372:	2301      	moveq	r3, #1
 8008374:	2300      	movne	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	f001 837b 	beq.w	8009a74 <cppLoop+0x1fb4>
			HAL_Delay(500);
 800837e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008382:	f001 fcbd 	bl	8009d00 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008386:	4b2a      	ldr	r3, [pc, #168]	; (8008430 <cppLoop+0x970>)
 8008388:	edd3 7a00 	vldr	s15, [r3]
 800838c:	eeb0 0a67 	vmov.f32	s0, s15
 8008390:	4825      	ldr	r0, [pc, #148]	; (8008428 <cppLoop+0x968>)
 8008392:	f7fb fc9c 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008396:	f04f 32ff 	mov.w	r2, #4294967295
 800839a:	2101      	movs	r1, #1
 800839c:	4819      	ldr	r0, [pc, #100]	; (8008404 <cppLoop+0x944>)
 800839e:	f7f9 ff65 	bl	800226c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80083a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083a6:	f001 fcab 	bl	8009d00 <HAL_Delay>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80083aa:	2100      	movs	r1, #0
 80083ac:	481e      	ldr	r0, [pc, #120]	; (8008428 <cppLoop+0x968>)
 80083ae:	f7fb ff11 	bl	80041d4 <_ZN9LineTrace7setModeEs>

			logger.start();
 80083b2:	4821      	ldr	r0, [pc, #132]	; (8008438 <cppLoop+0x978>)
 80083b4:	f7fc fcd7 	bl	8004d66 <_ZN6Logger5startEv>

			line_trace.running();
 80083b8:	481b      	ldr	r0, [pc, #108]	; (8008428 <cppLoop+0x968>)
 80083ba:	f7fb ff4f 	bl	800425c <_ZN9LineTrace7runningEv>

			logger.stop();
 80083be:	481e      	ldr	r0, [pc, #120]	; (8008438 <cppLoop+0x978>)
 80083c0:	f7fc fcf0 	bl	8004da4 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80083c4:	4a1d      	ldr	r2, [pc, #116]	; (800843c <cppLoop+0x97c>)
 80083c6:	491e      	ldr	r1, [pc, #120]	; (8008440 <cppLoop+0x980>)
 80083c8:	481b      	ldr	r0, [pc, #108]	; (8008438 <cppLoop+0x978>)
 80083ca:	f7fc fbc7 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80083ce:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <cppLoop+0x984>)
 80083d0:	491b      	ldr	r1, [pc, #108]	; (8008440 <cppLoop+0x980>)
 80083d2:	4819      	ldr	r0, [pc, #100]	; (8008438 <cppLoop+0x978>)
 80083d4:	f7fc fbd6 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	2100      	movs	r1, #0
 80083de:	4809      	ldr	r0, [pc, #36]	; (8008404 <cppLoop+0x944>)
 80083e0:	f7f9 ff44 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 80083e4:	f001 bb46 	b.w	8009a74 <cppLoop+0x1fb4>
 80083e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80083ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80083f0:	88e368f1 	.word	0x88e368f1
 80083f4:	3ee4f8b5 	.word	0x3ee4f8b5
 80083f8:	9abcaf48 	.word	0x9abcaf48
 80083fc:	3e7ad7f2 	.word	0x3e7ad7f2
 8008400:	20000540 	.word	0x20000540
 8008404:	2000054c 	.word	0x2000054c
 8008408:	20048118 	.word	0x20048118
 800840c:	2004813c 	.word	0x2004813c
 8008410:	20048144 	.word	0x20048144
 8008414:	2004814c 	.word	0x2004814c
 8008418:	08018d8c 	.word	0x08018d8c
 800841c:	08018d98 	.word	0x08018d98
 8008420:	08018da0 	.word	0x08018da0
 8008424:	08018dac 	.word	0x08018dac
 8008428:	200238a4 	.word	0x200238a4
 800842c:	08018db8 	.word	0x08018db8
 8008430:	20048154 	.word	0x20048154
 8008434:	08018dc4 	.word	0x08018dc4
 8008438:	20000570 	.word	0x20000570
 800843c:	08018dd0 	.word	0x08018dd0
 8008440:	08018ddc 	.word	0x08018ddc
 8008444:	08018de8 	.word	0x08018de8

	case 2:
		led.fullColor('B');
 8008448:	2142      	movs	r1, #66	; 0x42
 800844a:	48c1      	ldr	r0, [pc, #772]	; (8008750 <cppLoop+0xc90>)
 800844c:	f7f9 fe52 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008450:	f7f8 fe26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008454:	2100      	movs	r1, #0
 8008456:	2000      	movs	r0, #0
 8008458:	f7f8 fe32 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800845c:	48bd      	ldr	r0, [pc, #756]	; (8008754 <cppLoop+0xc94>)
 800845e:	f7f8 fe59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008462:	2101      	movs	r1, #1
 8008464:	2000      	movs	r0, #0
 8008466:	f7f8 fe2b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 800846a:	4bbb      	ldr	r3, [pc, #748]	; (8008758 <cppLoop+0xc98>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7f8 f882 	bl	8000578 <__aeabi_f2d>
 8008474:	4603      	mov	r3, r0
 8008476:	460c      	mov	r4, r1
 8008478:	461a      	mov	r2, r3
 800847a:	4623      	mov	r3, r4
 800847c:	48b7      	ldr	r0, [pc, #732]	; (800875c <cppLoop+0xc9c>)
 800847e:	f7f8 fe49 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008482:	48b7      	ldr	r0, [pc, #732]	; (8008760 <cppLoop+0xca0>)
 8008484:	f7f9 fdd2 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008488:	4603      	mov	r3, r0
 800848a:	2b10      	cmp	r3, #16
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	d023      	beq.n	80084e0 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008498:	2201      	movs	r2, #1
 800849a:	f04f 31ff 	mov.w	r1, #4294967295
 800849e:	48ac      	ldr	r0, [pc, #688]	; (8008750 <cppLoop+0xc90>)
 80084a0:	f7f9 fee4 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084a4:	2064      	movs	r0, #100	; 0x64
 80084a6:	f001 fc2b 	bl	8009d00 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80084aa:	4bab      	ldr	r3, [pc, #684]	; (8008758 <cppLoop+0xc98>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7f8 f862 	bl	8000578 <__aeabi_f2d>
 80084b4:	a3a4      	add	r3, pc, #656	; (adr r3, 8008748 <cppLoop+0xc88>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f7f7 feff 	bl	80002bc <__adddf3>
 80084be:	4603      	mov	r3, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	4618      	mov	r0, r3
 80084c4:	4621      	mov	r1, r4
 80084c6:	f7f8 fba7 	bl	8000c18 <__aeabi_d2f>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4ba2      	ldr	r3, [pc, #648]	; (8008758 <cppLoop+0xc98>)
 80084ce:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	f04f 31ff 	mov.w	r1, #4294967295
 80084d6:	489e      	ldr	r0, [pc, #632]	; (8008750 <cppLoop+0xc90>)
 80084d8:	f7f9 fec8 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80084dc:	f001 bacc 	b.w	8009a78 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 80084e0:	489f      	ldr	r0, [pc, #636]	; (8008760 <cppLoop+0xca0>)
 80084e2:	f7f9 fda3 	bl	800202c <_ZN8JoyStick8getValueEv>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf0c      	ite	eq
 80084ec:	2301      	moveq	r3, #1
 80084ee:	2300      	movne	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d023      	beq.n	800853e <cppLoop+0xa7e>
			led.LR(-1, 1);
 80084f6:	2201      	movs	r2, #1
 80084f8:	f04f 31ff 	mov.w	r1, #4294967295
 80084fc:	4894      	ldr	r0, [pc, #592]	; (8008750 <cppLoop+0xc90>)
 80084fe:	f7f9 feb5 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008502:	2064      	movs	r0, #100	; 0x64
 8008504:	f001 fbfc 	bl	8009d00 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008508:	4b93      	ldr	r3, [pc, #588]	; (8008758 <cppLoop+0xc98>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f7f8 f833 	bl	8000578 <__aeabi_f2d>
 8008512:	a38d      	add	r3, pc, #564	; (adr r3, 8008748 <cppLoop+0xc88>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f7 fece 	bl	80002b8 <__aeabi_dsub>
 800851c:	4603      	mov	r3, r0
 800851e:	460c      	mov	r4, r1
 8008520:	4618      	mov	r0, r3
 8008522:	4621      	mov	r1, r4
 8008524:	f7f8 fb78 	bl	8000c18 <__aeabi_d2f>
 8008528:	4602      	mov	r2, r0
 800852a:	4b8b      	ldr	r3, [pc, #556]	; (8008758 <cppLoop+0xc98>)
 800852c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	f04f 31ff 	mov.w	r1, #4294967295
 8008534:	4886      	ldr	r0, [pc, #536]	; (8008750 <cppLoop+0xc90>)
 8008536:	f7f9 fe99 	bl	800226c <_ZN3LED2LREaa>
		break;
 800853a:	f001 ba9d 	b.w	8009a78 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 800853e:	4888      	ldr	r0, [pc, #544]	; (8008760 <cppLoop+0xca0>)
 8008540:	f7f9 fd74 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008544:	4603      	mov	r3, r0
 8008546:	2b02      	cmp	r3, #2
 8008548:	bf0c      	ite	eq
 800854a:	2301      	moveq	r3, #1
 800854c:	2300      	movne	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	f001 8291 	beq.w	8009a78 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 8008556:	2201      	movs	r2, #1
 8008558:	f04f 31ff 	mov.w	r1, #4294967295
 800855c:	487c      	ldr	r0, [pc, #496]	; (8008750 <cppLoop+0xc90>)
 800855e:	f7f9 fe85 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008562:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008566:	f001 fbcb 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800856a:	2300      	movs	r3, #0
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	4b7a      	ldr	r3, [pc, #488]	; (8008758 <cppLoop+0xc98>)
 8008570:	2201      	movs	r2, #1
 8008572:	497c      	ldr	r1, [pc, #496]	; (8008764 <cppLoop+0xca4>)
 8008574:	487c      	ldr	r0, [pc, #496]	; (8008768 <cppLoop+0xca8>)
 8008576:	f7f9 f943 	bl	8001800 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800857a:	4b77      	ldr	r3, [pc, #476]	; (8008758 <cppLoop+0xc98>)
 800857c:	edd3 7a00 	vldr	s15, [r3]
 8008580:	eeb0 0a67 	vmov.f32	s0, s15
 8008584:	4879      	ldr	r0, [pc, #484]	; (800876c <cppLoop+0xcac>)
 8008586:	f7fb fba2 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800858a:	2200      	movs	r2, #0
 800858c:	f04f 31ff 	mov.w	r1, #4294967295
 8008590:	486f      	ldr	r0, [pc, #444]	; (8008750 <cppLoop+0xc90>)
 8008592:	f7f9 fe6b 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008596:	f001 ba6f 	b.w	8009a78 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 800859a:	2159      	movs	r1, #89	; 0x59
 800859c:	486c      	ldr	r0, [pc, #432]	; (8008750 <cppLoop+0xc90>)
 800859e:	f7f9 fda9 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085a2:	f7f8 fd7d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085a6:	2100      	movs	r1, #0
 80085a8:	2000      	movs	r0, #0
 80085aa:	f7f8 fd89 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80085ae:	4b70      	ldr	r3, [pc, #448]	; (8008770 <cppLoop+0xcb0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f7 ffe0 	bl	8000578 <__aeabi_f2d>
 80085b8:	4603      	mov	r3, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	461a      	mov	r2, r3
 80085be:	4623      	mov	r3, r4
 80085c0:	486c      	ldr	r0, [pc, #432]	; (8008774 <cppLoop+0xcb4>)
 80085c2:	f7f8 fda7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085c6:	2101      	movs	r1, #1
 80085c8:	2000      	movs	r0, #0
 80085ca:	f7f8 fd79 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80085ce:	4b6a      	ldr	r3, [pc, #424]	; (8008778 <cppLoop+0xcb8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f7 ffd0 	bl	8000578 <__aeabi_f2d>
 80085d8:	4603      	mov	r3, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	461a      	mov	r2, r3
 80085de:	4623      	mov	r3, r4
 80085e0:	4866      	ldr	r0, [pc, #408]	; (800877c <cppLoop+0xcbc>)
 80085e2:	f7f8 fd97 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80085e6:	485e      	ldr	r0, [pc, #376]	; (8008760 <cppLoop+0xca0>)
 80085e8:	f7f9 fd20 	bl	800202c <_ZN8JoyStick8getValueEv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	bf0c      	ite	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	2300      	movne	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f001 823f 	beq.w	8009a7c <cppLoop+0x1fbc>
			HAL_Delay(500);
 80085fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008602:	f001 fb7d 	bl	8009d00 <HAL_Delay>

			led.LR(1, -1);
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	2101      	movs	r1, #1
 800860c:	4850      	ldr	r0, [pc, #320]	; (8008750 <cppLoop+0xc90>)
 800860e:	f7f9 fe2d 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008612:	2101      	movs	r1, #1
 8008614:	4855      	ldr	r0, [pc, #340]	; (800876c <cppLoop+0xcac>)
 8008616:	f7fb fddd 	bl	80041d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800861a:	4b57      	ldr	r3, [pc, #348]	; (8008778 <cppLoop+0xcb8>)
 800861c:	edd3 7a00 	vldr	s15, [r3]
 8008620:	eeb0 0a67 	vmov.f32	s0, s15
 8008624:	4851      	ldr	r0, [pc, #324]	; (800876c <cppLoop+0xcac>)
 8008626:	f7fb fb52 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800862a:	4b51      	ldr	r3, [pc, #324]	; (8008770 <cppLoop+0xcb0>)
 800862c:	edd3 7a00 	vldr	s15, [r3]
 8008630:	eeb0 0a67 	vmov.f32	s0, s15
 8008634:	484d      	ldr	r0, [pc, #308]	; (800876c <cppLoop+0xcac>)
 8008636:	f7fb fb5a 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800863a:	4b4f      	ldr	r3, [pc, #316]	; (8008778 <cppLoop+0xcb8>)
 800863c:	edd3 7a00 	vldr	s15, [r3]
 8008640:	eeb0 0a67 	vmov.f32	s0, s15
 8008644:	4849      	ldr	r0, [pc, #292]	; (800876c <cppLoop+0xcac>)
 8008646:	f7fb fb72 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800864a:	4848      	ldr	r0, [pc, #288]	; (800876c <cppLoop+0xcac>)
 800864c:	f7fb ff68 	bl	8004520 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 8008650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008654:	f001 fb54 	bl	8009d00 <HAL_Delay>

			logger.start();
 8008658:	4849      	ldr	r0, [pc, #292]	; (8008780 <cppLoop+0xcc0>)
 800865a:	f7fc fb84 	bl	8004d66 <_ZN6Logger5startEv>

			line_trace.running();
 800865e:	4843      	ldr	r0, [pc, #268]	; (800876c <cppLoop+0xcac>)
 8008660:	f7fb fdfc 	bl	800425c <_ZN9LineTrace7runningEv>

			logger.stop();
 8008664:	4846      	ldr	r0, [pc, #280]	; (8008780 <cppLoop+0xcc0>)
 8008666:	f7fc fb9d 	bl	8004da4 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800866a:	4a46      	ldr	r2, [pc, #280]	; (8008784 <cppLoop+0xcc4>)
 800866c:	4946      	ldr	r1, [pc, #280]	; (8008788 <cppLoop+0xcc8>)
 800866e:	4844      	ldr	r0, [pc, #272]	; (8008780 <cppLoop+0xcc0>)
 8008670:	f7fc fa74 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008674:	4a45      	ldr	r2, [pc, #276]	; (800878c <cppLoop+0xccc>)
 8008676:	4944      	ldr	r1, [pc, #272]	; (8008788 <cppLoop+0xcc8>)
 8008678:	4841      	ldr	r0, [pc, #260]	; (8008780 <cppLoop+0xcc0>)
 800867a:	f7fc fa83 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800867e:	f04f 32ff 	mov.w	r2, #4294967295
 8008682:	2100      	movs	r1, #0
 8008684:	4832      	ldr	r0, [pc, #200]	; (8008750 <cppLoop+0xc90>)
 8008686:	f7f9 fdf1 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 800868a:	f001 b9f7 	b.w	8009a7c <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 800868e:	2147      	movs	r1, #71	; 0x47
 8008690:	482f      	ldr	r0, [pc, #188]	; (8008750 <cppLoop+0xc90>)
 8008692:	f7f9 fd2f 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008696:	f7f8 fd03 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800869a:	2100      	movs	r1, #0
 800869c:	2000      	movs	r0, #0
 800869e:	f7f8 fd0f 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80086a2:	4832      	ldr	r0, [pc, #200]	; (800876c <cppLoop+0xcac>)
 80086a4:	f7fb fb73 	bl	8003d8e <_ZN9LineTrace14getMaxVelocityEv>
 80086a8:	ee10 3a10 	vmov	r3, s0
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7f7 ff63 	bl	8000578 <__aeabi_f2d>
 80086b2:	4603      	mov	r3, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	461a      	mov	r2, r3
 80086b8:	4623      	mov	r3, r4
 80086ba:	482e      	ldr	r0, [pc, #184]	; (8008774 <cppLoop+0xcb4>)
 80086bc:	f7f8 fd2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086c0:	2101      	movs	r1, #1
 80086c2:	2000      	movs	r0, #0
 80086c4:	f7f8 fcfc 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80086c8:	4828      	ldr	r0, [pc, #160]	; (800876c <cppLoop+0xcac>)
 80086ca:	f7fb fb80 	bl	8003dce <_ZN9LineTrace14getMinVelocityEv>
 80086ce:	ee10 3a10 	vmov	r3, s0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f7 ff50 	bl	8000578 <__aeabi_f2d>
 80086d8:	4603      	mov	r3, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	461a      	mov	r2, r3
 80086de:	4623      	mov	r3, r4
 80086e0:	481e      	ldr	r0, [pc, #120]	; (800875c <cppLoop+0xc9c>)
 80086e2:	f7f8 fd17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80086e6:	481e      	ldr	r0, [pc, #120]	; (8008760 <cppLoop+0xca0>)
 80086e8:	f7f9 fca0 	bl	800202c <_ZN8JoyStick8getValueEv>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	bf0c      	ite	eq
 80086f2:	2301      	moveq	r3, #1
 80086f4:	2300      	movne	r3, #0
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d04b      	beq.n	8008794 <cppLoop+0xcd4>
			led.LR(-1, 1);
 80086fc:	2201      	movs	r2, #1
 80086fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008702:	4813      	ldr	r0, [pc, #76]	; (8008750 <cppLoop+0xc90>)
 8008704:	f7f9 fdb2 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008708:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800870c:	f001 faf8 	bl	8009d00 <HAL_Delay>

			selector_vel++;
 8008710:	4b1f      	ldr	r3, [pc, #124]	; (8008790 <cppLoop+0xcd0>)
 8008712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008716:	b29b      	uxth	r3, r3
 8008718:	3301      	adds	r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	b21a      	sxth	r2, r3
 800871e:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <cppLoop+0xcd0>)
 8008720:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008722:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <cppLoop+0xcd0>)
 8008724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008728:	2b01      	cmp	r3, #1
 800872a:	dd02      	ble.n	8008732 <cppLoop+0xc72>
 800872c:	4b18      	ldr	r3, [pc, #96]	; (8008790 <cppLoop+0xcd0>)
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008732:	2200      	movs	r2, #0
 8008734:	f04f 31ff 	mov.w	r1, #4294967295
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <cppLoop+0xc90>)
 800873a:	f7f9 fd97 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800873e:	f001 b99f 	b.w	8009a80 <cppLoop+0x1fc0>
 8008742:	bf00      	nop
 8008744:	f3af 8000 	nop.w
 8008748:	9999999a 	.word	0x9999999a
 800874c:	3fb99999 	.word	0x3fb99999
 8008750:	2000054c 	.word	0x2000054c
 8008754:	08018db8 	.word	0x08018db8
 8008758:	20048154 	.word	0x20048154
 800875c:	08018df4 	.word	0x08018df4
 8008760:	20000540 	.word	0x20000540
 8008764:	08018e00 	.word	0x08018e00
 8008768:	08018d98 	.word	0x08018d98
 800876c:	200238a4 	.word	0x200238a4
 8008770:	2004815c 	.word	0x2004815c
 8008774:	08018e0c 	.word	0x08018e0c
 8008778:	2004816c 	.word	0x2004816c
 800877c:	08018dc4 	.word	0x08018dc4
 8008780:	20000570 	.word	0x20000570
 8008784:	08018dd0 	.word	0x08018dd0
 8008788:	08018ddc 	.word	0x08018ddc
 800878c:	08018de8 	.word	0x08018de8
 8008790:	2004811e 	.word	0x2004811e
		else if(joy_stick.getValue() == JOY_R){
 8008794:	48ac      	ldr	r0, [pc, #688]	; (8008a48 <cppLoop+0xf88>)
 8008796:	f7f9 fc49 	bl	800202c <_ZN8JoyStick8getValueEv>
 800879a:	4603      	mov	r3, r0
 800879c:	2b10      	cmp	r3, #16
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d03c      	beq.n	8008824 <cppLoop+0xd64>
			led.LR(-1, 1);
 80087aa:	2201      	movs	r2, #1
 80087ac:	f04f 31ff 	mov.w	r1, #4294967295
 80087b0:	48a6      	ldr	r0, [pc, #664]	; (8008a4c <cppLoop+0xf8c>)
 80087b2:	f7f9 fd5b 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087b6:	2064      	movs	r0, #100	; 0x64
 80087b8:	f001 faa2 	bl	8009d00 <HAL_Delay>
			if(selector_vel == 0)
 80087bc:	4ba4      	ldr	r3, [pc, #656]	; (8008a50 <cppLoop+0xf90>)
 80087be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d113      	bne.n	80087ee <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80087c6:	4ba3      	ldr	r3, [pc, #652]	; (8008a54 <cppLoop+0xf94>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 fed4 	bl	8000578 <__aeabi_f2d>
 80087d0:	a39b      	add	r3, pc, #620	; (adr r3, 8008a40 <cppLoop+0xf80>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd71 	bl	80002bc <__adddf3>
 80087da:	4603      	mov	r3, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	4618      	mov	r0, r3
 80087e0:	4621      	mov	r1, r4
 80087e2:	f7f8 fa19 	bl	8000c18 <__aeabi_d2f>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b9a      	ldr	r3, [pc, #616]	; (8008a54 <cppLoop+0xf94>)
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e012      	b.n	8008814 <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 80087ee:	4b9a      	ldr	r3, [pc, #616]	; (8008a58 <cppLoop+0xf98>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f7 fec0 	bl	8000578 <__aeabi_f2d>
 80087f8:	a391      	add	r3, pc, #580	; (adr r3, 8008a40 <cppLoop+0xf80>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 fd5d 	bl	80002bc <__adddf3>
 8008802:	4603      	mov	r3, r0
 8008804:	460c      	mov	r4, r1
 8008806:	4618      	mov	r0, r3
 8008808:	4621      	mov	r1, r4
 800880a:	f7f8 fa05 	bl	8000c18 <__aeabi_d2f>
 800880e:	4602      	mov	r2, r0
 8008810:	4b91      	ldr	r3, [pc, #580]	; (8008a58 <cppLoop+0xf98>)
 8008812:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008814:	2200      	movs	r2, #0
 8008816:	f04f 31ff 	mov.w	r1, #4294967295
 800881a:	488c      	ldr	r0, [pc, #560]	; (8008a4c <cppLoop+0xf8c>)
 800881c:	f7f9 fd26 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008820:	f001 b92e 	b.w	8009a80 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 8008824:	4888      	ldr	r0, [pc, #544]	; (8008a48 <cppLoop+0xf88>)
 8008826:	f7f9 fc01 	bl	800202c <_ZN8JoyStick8getValueEv>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d03c      	beq.n	80088b4 <cppLoop+0xdf4>
			led.LR(-1, 1);
 800883a:	2201      	movs	r2, #1
 800883c:	f04f 31ff 	mov.w	r1, #4294967295
 8008840:	4882      	ldr	r0, [pc, #520]	; (8008a4c <cppLoop+0xf8c>)
 8008842:	f7f9 fd13 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008846:	2064      	movs	r0, #100	; 0x64
 8008848:	f001 fa5a 	bl	8009d00 <HAL_Delay>
			if(selector_vel == 0)
 800884c:	4b80      	ldr	r3, [pc, #512]	; (8008a50 <cppLoop+0xf90>)
 800884e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d113      	bne.n	800887e <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008856:	4b7f      	ldr	r3, [pc, #508]	; (8008a54 <cppLoop+0xf94>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fe8c 	bl	8000578 <__aeabi_f2d>
 8008860:	a377      	add	r3, pc, #476	; (adr r3, 8008a40 <cppLoop+0xf80>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	f7f7 fd27 	bl	80002b8 <__aeabi_dsub>
 800886a:	4603      	mov	r3, r0
 800886c:	460c      	mov	r4, r1
 800886e:	4618      	mov	r0, r3
 8008870:	4621      	mov	r1, r4
 8008872:	f7f8 f9d1 	bl	8000c18 <__aeabi_d2f>
 8008876:	4602      	mov	r2, r0
 8008878:	4b76      	ldr	r3, [pc, #472]	; (8008a54 <cppLoop+0xf94>)
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e012      	b.n	80088a4 <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 800887e:	4b76      	ldr	r3, [pc, #472]	; (8008a58 <cppLoop+0xf98>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7f7 fe78 	bl	8000578 <__aeabi_f2d>
 8008888:	a36d      	add	r3, pc, #436	; (adr r3, 8008a40 <cppLoop+0xf80>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fd13 	bl	80002b8 <__aeabi_dsub>
 8008892:	4603      	mov	r3, r0
 8008894:	460c      	mov	r4, r1
 8008896:	4618      	mov	r0, r3
 8008898:	4621      	mov	r1, r4
 800889a:	f7f8 f9bd 	bl	8000c18 <__aeabi_d2f>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b6d      	ldr	r3, [pc, #436]	; (8008a58 <cppLoop+0xf98>)
 80088a2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088a4:	2200      	movs	r2, #0
 80088a6:	f04f 31ff 	mov.w	r1, #4294967295
 80088aa:	4868      	ldr	r0, [pc, #416]	; (8008a4c <cppLoop+0xf8c>)
 80088ac:	f7f9 fcde 	bl	800226c <_ZN3LED2LREaa>
		break;
 80088b0:	f001 b8e6 	b.w	8009a80 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 80088b4:	4864      	ldr	r0, [pc, #400]	; (8008a48 <cppLoop+0xf88>)
 80088b6:	f7f9 fbb9 	bl	800202c <_ZN8JoyStick8getValueEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b02      	cmp	r3, #2
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f001 80da 	beq.w	8009a80 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 80088cc:	2201      	movs	r2, #1
 80088ce:	f04f 31ff 	mov.w	r1, #4294967295
 80088d2:	485e      	ldr	r0, [pc, #376]	; (8008a4c <cppLoop+0xf8c>)
 80088d4:	f7f9 fcca 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088dc:	f001 fa10 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80088e0:	2300      	movs	r3, #0
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	4b5b      	ldr	r3, [pc, #364]	; (8008a54 <cppLoop+0xf94>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	495c      	ldr	r1, [pc, #368]	; (8008a5c <cppLoop+0xf9c>)
 80088ea:	485d      	ldr	r0, [pc, #372]	; (8008a60 <cppLoop+0xfa0>)
 80088ec:	f7f8 ff88 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80088f0:	2300      	movs	r3, #0
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4b58      	ldr	r3, [pc, #352]	; (8008a58 <cppLoop+0xf98>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	495a      	ldr	r1, [pc, #360]	; (8008a64 <cppLoop+0xfa4>)
 80088fa:	4859      	ldr	r0, [pc, #356]	; (8008a60 <cppLoop+0xfa0>)
 80088fc:	f7f8 ff80 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008900:	4b54      	ldr	r3, [pc, #336]	; (8008a54 <cppLoop+0xf94>)
 8008902:	edd3 7a00 	vldr	s15, [r3]
 8008906:	eeb0 0a67 	vmov.f32	s0, s15
 800890a:	4857      	ldr	r0, [pc, #348]	; (8008a68 <cppLoop+0xfa8>)
 800890c:	f7fb f9ef 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008910:	4b51      	ldr	r3, [pc, #324]	; (8008a58 <cppLoop+0xf98>)
 8008912:	edd3 7a00 	vldr	s15, [r3]
 8008916:	eeb0 0a67 	vmov.f32	s0, s15
 800891a:	4853      	ldr	r0, [pc, #332]	; (8008a68 <cppLoop+0xfa8>)
 800891c:	f7fb fa07 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008920:	2200      	movs	r2, #0
 8008922:	f04f 31ff 	mov.w	r1, #4294967295
 8008926:	4849      	ldr	r0, [pc, #292]	; (8008a4c <cppLoop+0xf8c>)
 8008928:	f7f9 fca0 	bl	800226c <_ZN3LED2LREaa>
		break;
 800892c:	f001 b8a8 	b.w	8009a80 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 8008930:	214d      	movs	r1, #77	; 0x4d
 8008932:	4846      	ldr	r0, [pc, #280]	; (8008a4c <cppLoop+0xf8c>)
 8008934:	f7f9 fbde 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008938:	f7f8 fbb2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800893c:	2100      	movs	r1, #0
 800893e:	2000      	movs	r0, #0
 8008940:	f7f8 fbbe 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008944:	4b49      	ldr	r3, [pc, #292]	; (8008a6c <cppLoop+0xfac>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fe15 	bl	8000578 <__aeabi_f2d>
 800894e:	4603      	mov	r3, r0
 8008950:	460c      	mov	r4, r1
 8008952:	461a      	mov	r2, r3
 8008954:	4623      	mov	r3, r4
 8008956:	4846      	ldr	r0, [pc, #280]	; (8008a70 <cppLoop+0xfb0>)
 8008958:	f7f8 fbdc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800895c:	2101      	movs	r1, #1
 800895e:	2000      	movs	r0, #0
 8008960:	f7f8 fbae 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008964:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <cppLoop+0xfb4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7f7 fe05 	bl	8000578 <__aeabi_f2d>
 800896e:	4603      	mov	r3, r0
 8008970:	460c      	mov	r4, r1
 8008972:	461a      	mov	r2, r3
 8008974:	4623      	mov	r3, r4
 8008976:	4840      	ldr	r0, [pc, #256]	; (8008a78 <cppLoop+0xfb8>)
 8008978:	f7f8 fbcc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800897c:	4832      	ldr	r0, [pc, #200]	; (8008a48 <cppLoop+0xf88>)
 800897e:	f7f9 fb55 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008982:	4603      	mov	r3, r0
 8008984:	2b02      	cmp	r3, #2
 8008986:	bf0c      	ite	eq
 8008988:	2301      	moveq	r3, #1
 800898a:	2300      	movne	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	f001 8078 	beq.w	8009a84 <cppLoop+0x1fc4>
			HAL_Delay(500);
 8008994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008998:	f001 f9b2 	bl	8009d00 <HAL_Delay>

			led.LR(1, -1);
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	2101      	movs	r1, #1
 80089a2:	482a      	ldr	r0, [pc, #168]	; (8008a4c <cppLoop+0xf8c>)
 80089a4:	f7f9 fc62 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80089a8:	4b34      	ldr	r3, [pc, #208]	; (8008a7c <cppLoop+0xfbc>)
 80089aa:	edd3 7a00 	vldr	s15, [r3]
 80089ae:	4b34      	ldr	r3, [pc, #208]	; (8008a80 <cppLoop+0xfc0>)
 80089b0:	ed93 7a00 	vldr	s14, [r3]
 80089b4:	4b33      	ldr	r3, [pc, #204]	; (8008a84 <cppLoop+0xfc4>)
 80089b6:	edd3 6a00 	vldr	s13, [r3]
 80089ba:	eeb0 1a66 	vmov.f32	s2, s13
 80089be:	eef0 0a47 	vmov.f32	s1, s14
 80089c2:	eeb0 0a67 	vmov.f32	s0, s15
 80089c6:	4828      	ldr	r0, [pc, #160]	; (8008a68 <cppLoop+0xfa8>)
 80089c8:	f7fb f8e6 	bl	8003b98 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80089cc:	2102      	movs	r1, #2
 80089ce:	4826      	ldr	r0, [pc, #152]	; (8008a68 <cppLoop+0xfa8>)
 80089d0:	f7fb fc00 	bl	80041d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80089d4:	4b27      	ldr	r3, [pc, #156]	; (8008a74 <cppLoop+0xfb4>)
 80089d6:	edd3 7a00 	vldr	s15, [r3]
 80089da:	eeb0 0a67 	vmov.f32	s0, s15
 80089de:	4822      	ldr	r0, [pc, #136]	; (8008a68 <cppLoop+0xfa8>)
 80089e0:	f7fb f975 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <cppLoop+0xfac>)
 80089e6:	edd3 7a00 	vldr	s15, [r3]
 80089ea:	eeb0 0a67 	vmov.f32	s0, s15
 80089ee:	481e      	ldr	r0, [pc, #120]	; (8008a68 <cppLoop+0xfa8>)
 80089f0:	f7fb f98d 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80089f4:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <cppLoop+0xfb4>)
 80089f6:	edd3 7a00 	vldr	s15, [r3]
 80089fa:	eeb0 0a67 	vmov.f32	s0, s15
 80089fe:	481a      	ldr	r0, [pc, #104]	; (8008a68 <cppLoop+0xfa8>)
 8008a00:	f7fb f9a5 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008a04:	4818      	ldr	r0, [pc, #96]	; (8008a68 <cppLoop+0xfa8>)
 8008a06:	f7fb fd8b 	bl	8004520 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 8008a0a:	481f      	ldr	r0, [pc, #124]	; (8008a88 <cppLoop+0xfc8>)
 8008a0c:	f7fc f9ab 	bl	8004d66 <_ZN6Logger5startEv>

			line_trace.running();
 8008a10:	4815      	ldr	r0, [pc, #84]	; (8008a68 <cppLoop+0xfa8>)
 8008a12:	f7fb fc23 	bl	800425c <_ZN9LineTrace7runningEv>

			logger.stop();
 8008a16:	481c      	ldr	r0, [pc, #112]	; (8008a88 <cppLoop+0xfc8>)
 8008a18:	f7fc f9c4 	bl	8004da4 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <cppLoop+0xfcc>)
 8008a1e:	491c      	ldr	r1, [pc, #112]	; (8008a90 <cppLoop+0xfd0>)
 8008a20:	4819      	ldr	r0, [pc, #100]	; (8008a88 <cppLoop+0xfc8>)
 8008a22:	f7fc f89b 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008a26:	4a1b      	ldr	r2, [pc, #108]	; (8008a94 <cppLoop+0xfd4>)
 8008a28:	4919      	ldr	r1, [pc, #100]	; (8008a90 <cppLoop+0xfd0>)
 8008a2a:	4817      	ldr	r0, [pc, #92]	; (8008a88 <cppLoop+0xfc8>)
 8008a2c:	f7fc f8aa 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	2100      	movs	r1, #0
 8008a36:	4805      	ldr	r0, [pc, #20]	; (8008a4c <cppLoop+0xf8c>)
 8008a38:	f7f9 fc18 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8008a3c:	f001 b822 	b.w	8009a84 <cppLoop+0x1fc4>
 8008a40:	9999999a 	.word	0x9999999a
 8008a44:	3fb99999 	.word	0x3fb99999
 8008a48:	20000540 	.word	0x20000540
 8008a4c:	2000054c 	.word	0x2000054c
 8008a50:	2004811e 	.word	0x2004811e
 8008a54:	2004815c 	.word	0x2004815c
 8008a58:	2004816c 	.word	0x2004816c
 8008a5c:	08018e18 	.word	0x08018e18
 8008a60:	08018d98 	.word	0x08018d98
 8008a64:	08018e24 	.word	0x08018e24
 8008a68:	200238a4 	.word	0x200238a4
 8008a6c:	20048164 	.word	0x20048164
 8008a70:	08018e30 	.word	0x08018e30
 8008a74:	20048174 	.word	0x20048174
 8008a78:	08018dc4 	.word	0x08018dc4
 8008a7c:	20048124 	.word	0x20048124
 8008a80:	2004812c 	.word	0x2004812c
 8008a84:	20048134 	.word	0x20048134
 8008a88:	20000570 	.word	0x20000570
 8008a8c:	08018dd0 	.word	0x08018dd0
 8008a90:	08018ddc 	.word	0x08018ddc
 8008a94:	08018de8 	.word	0x08018de8

	case 6:
		led.fullColor('R');
 8008a98:	2152      	movs	r1, #82	; 0x52
 8008a9a:	4895      	ldr	r0, [pc, #596]	; (8008cf0 <cppLoop+0x1230>)
 8008a9c:	f7f9 fb2a 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008aa0:	f7f8 fafe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f7f8 fb0a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008aac:	4891      	ldr	r0, [pc, #580]	; (8008cf4 <cppLoop+0x1234>)
 8008aae:	f7fb f97e 	bl	8003dae <_ZN9LineTrace15getMaxVelocity2Ev>
 8008ab2:	ee10 3a10 	vmov	r3, s0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f7 fd5e 	bl	8000578 <__aeabi_f2d>
 8008abc:	4603      	mov	r3, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	488c      	ldr	r0, [pc, #560]	; (8008cf8 <cppLoop+0x1238>)
 8008ac6:	f7f8 fb25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008aca:	2101      	movs	r1, #1
 8008acc:	2000      	movs	r0, #0
 8008ace:	f7f8 faf7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008ad2:	4888      	ldr	r0, [pc, #544]	; (8008cf4 <cppLoop+0x1234>)
 8008ad4:	f7fb f98b 	bl	8003dee <_ZN9LineTrace15getMinVelocity2Ev>
 8008ad8:	ee10 3a10 	vmov	r3, s0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fd4b 	bl	8000578 <__aeabi_f2d>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4623      	mov	r3, r4
 8008aea:	4884      	ldr	r0, [pc, #528]	; (8008cfc <cppLoop+0x123c>)
 8008aec:	f7f8 fb12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008af0:	4883      	ldr	r0, [pc, #524]	; (8008d00 <cppLoop+0x1240>)
 8008af2:	f7f9 fa9b 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	bf0c      	ite	eq
 8008afc:	2301      	moveq	r3, #1
 8008afe:	2300      	movne	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d022      	beq.n	8008b4c <cppLoop+0x108c>
			led.LR(-1, 1);
 8008b06:	2201      	movs	r2, #1
 8008b08:	f04f 31ff 	mov.w	r1, #4294967295
 8008b0c:	4878      	ldr	r0, [pc, #480]	; (8008cf0 <cppLoop+0x1230>)
 8008b0e:	f7f9 fbad 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b16:	f001 f8f3 	bl	8009d00 <HAL_Delay>

			selector_vel2++;
 8008b1a:	4b7a      	ldr	r3, [pc, #488]	; (8008d04 <cppLoop+0x1244>)
 8008b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3301      	adds	r3, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	b21a      	sxth	r2, r3
 8008b28:	4b76      	ldr	r3, [pc, #472]	; (8008d04 <cppLoop+0x1244>)
 8008b2a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008b2c:	4b75      	ldr	r3, [pc, #468]	; (8008d04 <cppLoop+0x1244>)
 8008b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	dd02      	ble.n	8008b3c <cppLoop+0x107c>
 8008b36:	4b73      	ldr	r3, [pc, #460]	; (8008d04 <cppLoop+0x1244>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b42:	486b      	ldr	r0, [pc, #428]	; (8008cf0 <cppLoop+0x1230>)
 8008b44:	f7f9 fb92 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008b48:	f000 bf9e 	b.w	8009a88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 8008b4c:	486c      	ldr	r0, [pc, #432]	; (8008d00 <cppLoop+0x1240>)
 8008b4e:	f7f9 fa6d 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d03c      	beq.n	8008bdc <cppLoop+0x111c>
			led.LR(-1, 1);
 8008b62:	2201      	movs	r2, #1
 8008b64:	f04f 31ff 	mov.w	r1, #4294967295
 8008b68:	4861      	ldr	r0, [pc, #388]	; (8008cf0 <cppLoop+0x1230>)
 8008b6a:	f7f9 fb7f 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b6e:	2064      	movs	r0, #100	; 0x64
 8008b70:	f001 f8c6 	bl	8009d00 <HAL_Delay>
			if(selector_vel2 == 0)
 8008b74:	4b63      	ldr	r3, [pc, #396]	; (8008d04 <cppLoop+0x1244>)
 8008b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d113      	bne.n	8008ba6 <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008b7e:	4b62      	ldr	r3, [pc, #392]	; (8008d08 <cppLoop+0x1248>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f7 fcf8 	bl	8000578 <__aeabi_f2d>
 8008b88:	a357      	add	r3, pc, #348	; (adr r3, 8008ce8 <cppLoop+0x1228>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f7f7 fb95 	bl	80002bc <__adddf3>
 8008b92:	4603      	mov	r3, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	4618      	mov	r0, r3
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f7f8 f83d 	bl	8000c18 <__aeabi_d2f>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <cppLoop+0x1248>)
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e012      	b.n	8008bcc <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008ba6:	4b59      	ldr	r3, [pc, #356]	; (8008d0c <cppLoop+0x124c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f7 fce4 	bl	8000578 <__aeabi_f2d>
 8008bb0:	a34d      	add	r3, pc, #308	; (adr r3, 8008ce8 <cppLoop+0x1228>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb81 	bl	80002bc <__adddf3>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	f7f8 f829 	bl	8000c18 <__aeabi_d2f>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b50      	ldr	r3, [pc, #320]	; (8008d0c <cppLoop+0x124c>)
 8008bca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f04f 31ff 	mov.w	r1, #4294967295
 8008bd2:	4847      	ldr	r0, [pc, #284]	; (8008cf0 <cppLoop+0x1230>)
 8008bd4:	f7f9 fb4a 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008bd8:	f000 bf56 	b.w	8009a88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008bdc:	4848      	ldr	r0, [pc, #288]	; (8008d00 <cppLoop+0x1240>)
 8008bde:	f7f9 fa25 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d03c      	beq.n	8008c6c <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf8:	483d      	ldr	r0, [pc, #244]	; (8008cf0 <cppLoop+0x1230>)
 8008bfa:	f7f9 fb37 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bfe:	2064      	movs	r0, #100	; 0x64
 8008c00:	f001 f87e 	bl	8009d00 <HAL_Delay>
			if(selector_vel2 == 0)
 8008c04:	4b3f      	ldr	r3, [pc, #252]	; (8008d04 <cppLoop+0x1244>)
 8008c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d113      	bne.n	8008c36 <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008c0e:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <cppLoop+0x1248>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f7 fcb0 	bl	8000578 <__aeabi_f2d>
 8008c18:	a333      	add	r3, pc, #204	; (adr r3, 8008ce8 <cppLoop+0x1228>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fb4b 	bl	80002b8 <__aeabi_dsub>
 8008c22:	4603      	mov	r3, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	4618      	mov	r0, r3
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f7f7 fff5 	bl	8000c18 <__aeabi_d2f>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b35      	ldr	r3, [pc, #212]	; (8008d08 <cppLoop+0x1248>)
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	e012      	b.n	8008c5c <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008c36:	4b35      	ldr	r3, [pc, #212]	; (8008d0c <cppLoop+0x124c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f7 fc9c 	bl	8000578 <__aeabi_f2d>
 8008c40:	a329      	add	r3, pc, #164	; (adr r3, 8008ce8 <cppLoop+0x1228>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fb37 	bl	80002b8 <__aeabi_dsub>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	4618      	mov	r0, r3
 8008c50:	4621      	mov	r1, r4
 8008c52:	f7f7 ffe1 	bl	8000c18 <__aeabi_d2f>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b2c      	ldr	r3, [pc, #176]	; (8008d0c <cppLoop+0x124c>)
 8008c5a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c62:	4823      	ldr	r0, [pc, #140]	; (8008cf0 <cppLoop+0x1230>)
 8008c64:	f7f9 fb02 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008c68:	f000 bf0e 	b.w	8009a88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008c6c:	4824      	ldr	r0, [pc, #144]	; (8008d00 <cppLoop+0x1240>)
 8008c6e:	f7f9 f9dd 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 8702 	beq.w	8009a88 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008c84:	2201      	movs	r2, #1
 8008c86:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8a:	4819      	ldr	r0, [pc, #100]	; (8008cf0 <cppLoop+0x1230>)
 8008c8c:	f7f9 faee 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c94:	f001 f834 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	; (8008d08 <cppLoop+0x1248>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	491b      	ldr	r1, [pc, #108]	; (8008d10 <cppLoop+0x1250>)
 8008ca2:	481c      	ldr	r0, [pc, #112]	; (8008d14 <cppLoop+0x1254>)
 8008ca4:	f7f8 fdac 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <cppLoop+0x124c>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4919      	ldr	r1, [pc, #100]	; (8008d18 <cppLoop+0x1258>)
 8008cb2:	4818      	ldr	r0, [pc, #96]	; (8008d14 <cppLoop+0x1254>)
 8008cb4:	f7f8 fda4 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008cb8:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <cppLoop+0x1248>)
 8008cba:	edd3 7a00 	vldr	s15, [r3]
 8008cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc2:	480c      	ldr	r0, [pc, #48]	; (8008cf4 <cppLoop+0x1234>)
 8008cc4:	f7fb f823 	bl	8003d0e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008cc8:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <cppLoop+0x124c>)
 8008cca:	edd3 7a00 	vldr	s15, [r3]
 8008cce:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd2:	4808      	ldr	r0, [pc, #32]	; (8008cf4 <cppLoop+0x1234>)
 8008cd4:	f7fb f83b 	bl	8003d4e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f04f 31ff 	mov.w	r1, #4294967295
 8008cde:	4804      	ldr	r0, [pc, #16]	; (8008cf0 <cppLoop+0x1230>)
 8008ce0:	f7f9 fac4 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008ce4:	f000 bed0 	b.w	8009a88 <cppLoop+0x1fc8>
 8008ce8:	9999999a 	.word	0x9999999a
 8008cec:	3fb99999 	.word	0x3fb99999
 8008cf0:	2000054c 	.word	0x2000054c
 8008cf4:	200238a4 	.word	0x200238a4
 8008cf8:	08018e30 	.word	0x08018e30
 8008cfc:	08018df4 	.word	0x08018df4
 8008d00:	20000540 	.word	0x20000540
 8008d04:	20048120 	.word	0x20048120
 8008d08:	20048164 	.word	0x20048164
 8008d0c:	20048174 	.word	0x20048174
 8008d10:	08018e3c 	.word	0x08018e3c
 8008d14:	08018d98 	.word	0x08018d98
 8008d18:	08018e48 	.word	0x08018e48

	case 7:
		led.fullColor('W');
 8008d1c:	2157      	movs	r1, #87	; 0x57
 8008d1e:	48c2      	ldr	r0, [pc, #776]	; (8009028 <cppLoop+0x1568>)
 8008d20:	f7f9 f9e8 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d24:	f7f8 f9bc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f7f8 f9c8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008d30:	48be      	ldr	r0, [pc, #760]	; (800902c <cppLoop+0x156c>)
 8008d32:	f7fb f8a0 	bl	8003e76 <_ZN9LineTrace9getMaxAccEv>
 8008d36:	ee10 3a10 	vmov	r3, s0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fc1c 	bl	8000578 <__aeabi_f2d>
 8008d40:	4603      	mov	r3, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	461a      	mov	r2, r3
 8008d46:	4623      	mov	r3, r4
 8008d48:	48b9      	ldr	r0, [pc, #740]	; (8009030 <cppLoop+0x1570>)
 8008d4a:	f7f8 f9e3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d4e:	2101      	movs	r1, #1
 8008d50:	2000      	movs	r0, #0
 8008d52:	f7f8 f9b5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008d56:	48b5      	ldr	r0, [pc, #724]	; (800902c <cppLoop+0x156c>)
 8008d58:	f7fb f8c3 	bl	8003ee2 <_ZN9LineTrace9getMaxDecEv>
 8008d5c:	ee10 3a10 	vmov	r3, s0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7f7 fc09 	bl	8000578 <__aeabi_f2d>
 8008d66:	4603      	mov	r3, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	48b1      	ldr	r0, [pc, #708]	; (8009034 <cppLoop+0x1574>)
 8008d70:	f7f8 f9d0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d74:	48b0      	ldr	r0, [pc, #704]	; (8009038 <cppLoop+0x1578>)
 8008d76:	f7f9 f959 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	bf0c      	ite	eq
 8008d80:	2301      	moveq	r3, #1
 8008d82:	2300      	movne	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d022      	beq.n	8008dd0 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d90:	48a5      	ldr	r0, [pc, #660]	; (8009028 <cppLoop+0x1568>)
 8008d92:	f7f9 fa6b 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d9a:	f000 ffb1 	bl	8009d00 <HAL_Delay>

			selector_acc++;
 8008d9e:	4ba7      	ldr	r3, [pc, #668]	; (800903c <cppLoop+0x157c>)
 8008da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3301      	adds	r3, #1
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	b21a      	sxth	r2, r3
 8008dac:	4ba3      	ldr	r3, [pc, #652]	; (800903c <cppLoop+0x157c>)
 8008dae:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008db0:	4ba2      	ldr	r3, [pc, #648]	; (800903c <cppLoop+0x157c>)
 8008db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	dd02      	ble.n	8008dc0 <cppLoop+0x1300>
 8008dba:	4ba0      	ldr	r3, [pc, #640]	; (800903c <cppLoop+0x157c>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8008dc6:	4898      	ldr	r0, [pc, #608]	; (8009028 <cppLoop+0x1568>)
 8008dc8:	f7f9 fa50 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008dcc:	f000 be5e 	b.w	8009a8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008dd0:	4899      	ldr	r0, [pc, #612]	; (8009038 <cppLoop+0x1578>)
 8008dd2:	f7f9 f92b 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b10      	cmp	r3, #16
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d03c      	beq.n	8008e60 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008de6:	2201      	movs	r2, #1
 8008de8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dec:	488e      	ldr	r0, [pc, #568]	; (8009028 <cppLoop+0x1568>)
 8008dee:	f7f9 fa3d 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008df2:	2064      	movs	r0, #100	; 0x64
 8008df4:	f000 ff84 	bl	8009d00 <HAL_Delay>
			if(selector_acc == 0){
 8008df8:	4b90      	ldr	r3, [pc, #576]	; (800903c <cppLoop+0x157c>)
 8008dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d113      	bne.n	8008e2a <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8008e02:	4b8f      	ldr	r3, [pc, #572]	; (8009040 <cppLoop+0x1580>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f7 fbb6 	bl	8000578 <__aeabi_f2d>
 8008e0c:	a384      	add	r3, pc, #528	; (adr r3, 8009020 <cppLoop+0x1560>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa53 	bl	80002bc <__adddf3>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f7f7 fefb 	bl	8000c18 <__aeabi_d2f>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4b86      	ldr	r3, [pc, #536]	; (8009040 <cppLoop+0x1580>)
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	e012      	b.n	8008e50 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 8008e2a:	4b86      	ldr	r3, [pc, #536]	; (8009044 <cppLoop+0x1584>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fba2 	bl	8000578 <__aeabi_f2d>
 8008e34:	a37a      	add	r3, pc, #488	; (adr r3, 8009020 <cppLoop+0x1560>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fa3f 	bl	80002bc <__adddf3>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	4618      	mov	r0, r3
 8008e44:	4621      	mov	r1, r4
 8008e46:	f7f7 fee7 	bl	8000c18 <__aeabi_d2f>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b7d      	ldr	r3, [pc, #500]	; (8009044 <cppLoop+0x1584>)
 8008e4e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e50:	2200      	movs	r2, #0
 8008e52:	f04f 31ff 	mov.w	r1, #4294967295
 8008e56:	4874      	ldr	r0, [pc, #464]	; (8009028 <cppLoop+0x1568>)
 8008e58:	f7f9 fa08 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008e5c:	f000 be16 	b.w	8009a8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8008e60:	4875      	ldr	r0, [pc, #468]	; (8009038 <cppLoop+0x1578>)
 8008e62:	f7f9 f8e3 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	bf0c      	ite	eq
 8008e6c:	2301      	moveq	r3, #1
 8008e6e:	2300      	movne	r3, #0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d03c      	beq.n	8008ef0 <cppLoop+0x1430>
			led.LR(-1, 1);
 8008e76:	2201      	movs	r2, #1
 8008e78:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7c:	486a      	ldr	r0, [pc, #424]	; (8009028 <cppLoop+0x1568>)
 8008e7e:	f7f9 f9f5 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e82:	2064      	movs	r0, #100	; 0x64
 8008e84:	f000 ff3c 	bl	8009d00 <HAL_Delay>
			if(selector_acc == 0){
 8008e88:	4b6c      	ldr	r3, [pc, #432]	; (800903c <cppLoop+0x157c>)
 8008e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d113      	bne.n	8008eba <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8008e92:	4b6b      	ldr	r3, [pc, #428]	; (8009040 <cppLoop+0x1580>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fb6e 	bl	8000578 <__aeabi_f2d>
 8008e9c:	a360      	add	r3, pc, #384	; (adr r3, 8009020 <cppLoop+0x1560>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fa09 	bl	80002b8 <__aeabi_dsub>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	4621      	mov	r1, r4
 8008eae:	f7f7 feb3 	bl	8000c18 <__aeabi_d2f>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b62      	ldr	r3, [pc, #392]	; (8009040 <cppLoop+0x1580>)
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e012      	b.n	8008ee0 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 8008eba:	4b62      	ldr	r3, [pc, #392]	; (8009044 <cppLoop+0x1584>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7f7 fb5a 	bl	8000578 <__aeabi_f2d>
 8008ec4:	a356      	add	r3, pc, #344	; (adr r3, 8009020 <cppLoop+0x1560>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f9f5 	bl	80002b8 <__aeabi_dsub>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	f7f7 fe9f 	bl	8000c18 <__aeabi_d2f>
 8008eda:	4602      	mov	r2, r0
 8008edc:	4b59      	ldr	r3, [pc, #356]	; (8009044 <cppLoop+0x1584>)
 8008ede:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee6:	4850      	ldr	r0, [pc, #320]	; (8009028 <cppLoop+0x1568>)
 8008ee8:	f7f9 f9c0 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008eec:	f000 bdce 	b.w	8009a8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 8008ef0:	4851      	ldr	r0, [pc, #324]	; (8009038 <cppLoop+0x1578>)
 8008ef2:	f7f9 f89b 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	bf0c      	ite	eq
 8008efc:	2301      	moveq	r3, #1
 8008efe:	2300      	movne	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 85c2 	beq.w	8009a8c <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f0e:	4846      	ldr	r0, [pc, #280]	; (8009028 <cppLoop+0x1568>)
 8008f10:	f7f9 f9ac 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f18:	f000 fef2 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4b47      	ldr	r3, [pc, #284]	; (8009040 <cppLoop+0x1580>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	4948      	ldr	r1, [pc, #288]	; (8009048 <cppLoop+0x1588>)
 8008f26:	4849      	ldr	r0, [pc, #292]	; (800904c <cppLoop+0x158c>)
 8008f28:	f7f8 fc6a 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	4b44      	ldr	r3, [pc, #272]	; (8009044 <cppLoop+0x1584>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	4946      	ldr	r1, [pc, #280]	; (8009050 <cppLoop+0x1590>)
 8008f36:	4845      	ldr	r0, [pc, #276]	; (800904c <cppLoop+0x158c>)
 8008f38:	f7f8 fc62 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008f3c:	4b40      	ldr	r3, [pc, #256]	; (8009040 <cppLoop+0x1580>)
 8008f3e:	edd3 7a00 	vldr	s15, [r3]
 8008f42:	4b40      	ldr	r3, [pc, #256]	; (8009044 <cppLoop+0x1584>)
 8008f44:	ed93 7a00 	vldr	s14, [r3]
 8008f48:	eef0 0a47 	vmov.f32	s1, s14
 8008f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f50:	4836      	ldr	r0, [pc, #216]	; (800902c <cppLoop+0x156c>)
 8008f52:	f7fa ff5c 	bl	8003e0e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008f56:	2200      	movs	r2, #0
 8008f58:	f04f 31ff 	mov.w	r1, #4294967295
 8008f5c:	4832      	ldr	r0, [pc, #200]	; (8009028 <cppLoop+0x1568>)
 8008f5e:	f7f9 f985 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008f62:	f000 bd93 	b.w	8009a8c <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8008f66:	2157      	movs	r1, #87	; 0x57
 8008f68:	482f      	ldr	r0, [pc, #188]	; (8009028 <cppLoop+0x1568>)
 8008f6a:	f7f9 f8c3 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f6e:	f7f8 f897 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f72:	2100      	movs	r1, #0
 8008f74:	2000      	movs	r0, #0
 8008f76:	f7f8 f8a3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008f7a:	482c      	ldr	r0, [pc, #176]	; (800902c <cppLoop+0x156c>)
 8008f7c:	f7fa ff9f 	bl	8003ebe <_ZN9LineTrace10getMaxAcc2Ev>
 8008f80:	ee10 3a10 	vmov	r3, s0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f7 faf7 	bl	8000578 <__aeabi_f2d>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4623      	mov	r3, r4
 8008f92:	4830      	ldr	r0, [pc, #192]	; (8009054 <cppLoop+0x1594>)
 8008f94:	f7f8 f8be 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f98:	2101      	movs	r1, #1
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f7f8 f890 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008fa0:	4822      	ldr	r0, [pc, #136]	; (800902c <cppLoop+0x156c>)
 8008fa2:	f7fa ff7a 	bl	8003e9a <_ZN9LineTrace10getMaxDec2Ev>
 8008fa6:	ee10 3a10 	vmov	r3, s0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f7 fae4 	bl	8000578 <__aeabi_f2d>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	4827      	ldr	r0, [pc, #156]	; (8009058 <cppLoop+0x1598>)
 8008fba:	f7f8 f8ab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fbe:	481e      	ldr	r0, [pc, #120]	; (8009038 <cppLoop+0x1578>)
 8008fc0:	f7f9 f834 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d045      	beq.n	8009060 <cppLoop+0x15a0>
			led.LR(-1, 1);
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8008fda:	4813      	ldr	r0, [pc, #76]	; (8009028 <cppLoop+0x1568>)
 8008fdc:	f7f9 f946 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fe0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fe4:	f000 fe8c 	bl	8009d00 <HAL_Delay>

			selector_acc2++;
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <cppLoop+0x159c>)
 8008fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	b21a      	sxth	r2, r3
 8008ff6:	4b19      	ldr	r3, [pc, #100]	; (800905c <cppLoop+0x159c>)
 8008ff8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008ffa:	4b18      	ldr	r3, [pc, #96]	; (800905c <cppLoop+0x159c>)
 8008ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009000:	2b01      	cmp	r3, #1
 8009002:	dd02      	ble.n	800900a <cppLoop+0x154a>
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <cppLoop+0x159c>)
 8009006:	2200      	movs	r2, #0
 8009008:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800900a:	2200      	movs	r2, #0
 800900c:	f04f 31ff 	mov.w	r1, #4294967295
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <cppLoop+0x1568>)
 8009012:	f7f9 f92b 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009016:	f000 bd3b 	b.w	8009a90 <cppLoop+0x1fd0>
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w
 8009020:	9999999a 	.word	0x9999999a
 8009024:	3fb99999 	.word	0x3fb99999
 8009028:	2000054c 	.word	0x2000054c
 800902c:	200238a4 	.word	0x200238a4
 8009030:	08018e54 	.word	0x08018e54
 8009034:	08018e60 	.word	0x08018e60
 8009038:	20000540 	.word	0x20000540
 800903c:	2004811a 	.word	0x2004811a
 8009040:	2004817c 	.word	0x2004817c
 8009044:	20048184 	.word	0x20048184
 8009048:	08018e6c 	.word	0x08018e6c
 800904c:	08018d98 	.word	0x08018d98
 8009050:	08018e74 	.word	0x08018e74
 8009054:	08018e7c 	.word	0x08018e7c
 8009058:	08018e88 	.word	0x08018e88
 800905c:	2004811c 	.word	0x2004811c
		else if(joy_stick.getValue() == JOY_R){
 8009060:	48bf      	ldr	r0, [pc, #764]	; (8009360 <cppLoop+0x18a0>)
 8009062:	f7f8 ffe3 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009066:	4603      	mov	r3, r0
 8009068:	2b10      	cmp	r3, #16
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d03c      	beq.n	80090f0 <cppLoop+0x1630>
			led.LR(-1, 1);
 8009076:	2201      	movs	r2, #1
 8009078:	f04f 31ff 	mov.w	r1, #4294967295
 800907c:	48b9      	ldr	r0, [pc, #740]	; (8009364 <cppLoop+0x18a4>)
 800907e:	f7f9 f8f5 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009082:	2064      	movs	r0, #100	; 0x64
 8009084:	f000 fe3c 	bl	8009d00 <HAL_Delay>
			if(selector_acc2 == 0){
 8009088:	4bb7      	ldr	r3, [pc, #732]	; (8009368 <cppLoop+0x18a8>)
 800908a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d113      	bne.n	80090ba <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 8009092:	4bb6      	ldr	r3, [pc, #728]	; (800936c <cppLoop+0x18ac>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f7f7 fa6e 	bl	8000578 <__aeabi_f2d>
 800909c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009358 <cppLoop+0x1898>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f90b 	bl	80002bc <__adddf3>
 80090a6:	4603      	mov	r3, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	4618      	mov	r0, r3
 80090ac:	4621      	mov	r1, r4
 80090ae:	f7f7 fdb3 	bl	8000c18 <__aeabi_d2f>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4bad      	ldr	r3, [pc, #692]	; (800936c <cppLoop+0x18ac>)
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	e012      	b.n	80090e0 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 80090ba:	4bad      	ldr	r3, [pc, #692]	; (8009370 <cppLoop+0x18b0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f7 fa5a 	bl	8000578 <__aeabi_f2d>
 80090c4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009358 <cppLoop+0x1898>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f8f7 	bl	80002bc <__adddf3>
 80090ce:	4603      	mov	r3, r0
 80090d0:	460c      	mov	r4, r1
 80090d2:	4618      	mov	r0, r3
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7f7 fd9f 	bl	8000c18 <__aeabi_d2f>
 80090da:	4602      	mov	r2, r0
 80090dc:	4ba4      	ldr	r3, [pc, #656]	; (8009370 <cppLoop+0x18b0>)
 80090de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80090e0:	2200      	movs	r2, #0
 80090e2:	f04f 31ff 	mov.w	r1, #4294967295
 80090e6:	489f      	ldr	r0, [pc, #636]	; (8009364 <cppLoop+0x18a4>)
 80090e8:	f7f9 f8c0 	bl	800226c <_ZN3LED2LREaa>
		break;
 80090ec:	f000 bcd0 	b.w	8009a90 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 80090f0:	489b      	ldr	r0, [pc, #620]	; (8009360 <cppLoop+0x18a0>)
 80090f2:	f7f8 ff9b 	bl	800202c <_ZN8JoyStick8getValueEv>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d03c      	beq.n	8009180 <cppLoop+0x16c0>
			led.LR(-1, 1);
 8009106:	2201      	movs	r2, #1
 8009108:	f04f 31ff 	mov.w	r1, #4294967295
 800910c:	4895      	ldr	r0, [pc, #596]	; (8009364 <cppLoop+0x18a4>)
 800910e:	f7f9 f8ad 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009112:	2064      	movs	r0, #100	; 0x64
 8009114:	f000 fdf4 	bl	8009d00 <HAL_Delay>
			if(selector_acc2 == 0){
 8009118:	4b93      	ldr	r3, [pc, #588]	; (8009368 <cppLoop+0x18a8>)
 800911a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d113      	bne.n	800914a <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 8009122:	4b92      	ldr	r3, [pc, #584]	; (800936c <cppLoop+0x18ac>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 fa26 	bl	8000578 <__aeabi_f2d>
 800912c:	a38a      	add	r3, pc, #552	; (adr r3, 8009358 <cppLoop+0x1898>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f8c1 	bl	80002b8 <__aeabi_dsub>
 8009136:	4603      	mov	r3, r0
 8009138:	460c      	mov	r4, r1
 800913a:	4618      	mov	r0, r3
 800913c:	4621      	mov	r1, r4
 800913e:	f7f7 fd6b 	bl	8000c18 <__aeabi_d2f>
 8009142:	4602      	mov	r2, r0
 8009144:	4b89      	ldr	r3, [pc, #548]	; (800936c <cppLoop+0x18ac>)
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e012      	b.n	8009170 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 800914a:	4b89      	ldr	r3, [pc, #548]	; (8009370 <cppLoop+0x18b0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 fa12 	bl	8000578 <__aeabi_f2d>
 8009154:	a380      	add	r3, pc, #512	; (adr r3, 8009358 <cppLoop+0x1898>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f8ad 	bl	80002b8 <__aeabi_dsub>
 800915e:	4603      	mov	r3, r0
 8009160:	460c      	mov	r4, r1
 8009162:	4618      	mov	r0, r3
 8009164:	4621      	mov	r1, r4
 8009166:	f7f7 fd57 	bl	8000c18 <__aeabi_d2f>
 800916a:	4602      	mov	r2, r0
 800916c:	4b80      	ldr	r3, [pc, #512]	; (8009370 <cppLoop+0x18b0>)
 800916e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009170:	2200      	movs	r2, #0
 8009172:	f04f 31ff 	mov.w	r1, #4294967295
 8009176:	487b      	ldr	r0, [pc, #492]	; (8009364 <cppLoop+0x18a4>)
 8009178:	f7f9 f878 	bl	800226c <_ZN3LED2LREaa>
		break;
 800917c:	f000 bc88 	b.w	8009a90 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 8009180:	4877      	ldr	r0, [pc, #476]	; (8009360 <cppLoop+0x18a0>)
 8009182:	f7f8 ff53 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009186:	4603      	mov	r3, r0
 8009188:	2b02      	cmp	r3, #2
 800918a:	bf0c      	ite	eq
 800918c:	2301      	moveq	r3, #1
 800918e:	2300      	movne	r3, #0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 847c 	beq.w	8009a90 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 8009198:	2201      	movs	r2, #1
 800919a:	f04f 31ff 	mov.w	r1, #4294967295
 800919e:	4871      	ldr	r0, [pc, #452]	; (8009364 <cppLoop+0x18a4>)
 80091a0:	f7f9 f864 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091a8:	f000 fdaa 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80091ac:	2300      	movs	r3, #0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4b6e      	ldr	r3, [pc, #440]	; (800936c <cppLoop+0x18ac>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	496f      	ldr	r1, [pc, #444]	; (8009374 <cppLoop+0x18b4>)
 80091b6:	4870      	ldr	r0, [pc, #448]	; (8009378 <cppLoop+0x18b8>)
 80091b8:	f7f8 fb22 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	4b6b      	ldr	r3, [pc, #428]	; (8009370 <cppLoop+0x18b0>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	496d      	ldr	r1, [pc, #436]	; (800937c <cppLoop+0x18bc>)
 80091c6:	486c      	ldr	r0, [pc, #432]	; (8009378 <cppLoop+0x18b8>)
 80091c8:	f7f8 fb1a 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80091cc:	4b67      	ldr	r3, [pc, #412]	; (800936c <cppLoop+0x18ac>)
 80091ce:	edd3 7a00 	vldr	s15, [r3]
 80091d2:	4b67      	ldr	r3, [pc, #412]	; (8009370 <cppLoop+0x18b0>)
 80091d4:	ed93 7a00 	vldr	s14, [r3]
 80091d8:	eef0 0a47 	vmov.f32	s1, s14
 80091dc:	eeb0 0a67 	vmov.f32	s0, s15
 80091e0:	4867      	ldr	r0, [pc, #412]	; (8009380 <cppLoop+0x18c0>)
 80091e2:	f7fa fe2e 	bl	8003e42 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80091e6:	2200      	movs	r2, #0
 80091e8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ec:	485d      	ldr	r0, [pc, #372]	; (8009364 <cppLoop+0x18a4>)
 80091ee:	f7f9 f83d 	bl	800226c <_ZN3LED2LREaa>
		break;
 80091f2:	f000 bc4d 	b.w	8009a90 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 80091f6:	217e      	movs	r1, #126	; 0x7e
 80091f8:	485a      	ldr	r0, [pc, #360]	; (8009364 <cppLoop+0x18a4>)
 80091fa:	f7f8 ff7b 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091fe:	f7f7 ff4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009202:	2100      	movs	r1, #0
 8009204:	2000      	movs	r0, #0
 8009206:	f7f7 ff5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800920a:	485e      	ldr	r0, [pc, #376]	; (8009384 <cppLoop+0x18c4>)
 800920c:	f7f7 ff82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009210:	2101      	movs	r1, #1
 8009212:	2000      	movs	r0, #0
 8009214:	f7f7 ff54 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009218:	485b      	ldr	r0, [pc, #364]	; (8009388 <cppLoop+0x18c8>)
 800921a:	f7f7 ff7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800921e:	4850      	ldr	r0, [pc, #320]	; (8009360 <cppLoop+0x18a0>)
 8009220:	f7f8 ff04 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009224:	4603      	mov	r3, r0
 8009226:	2b02      	cmp	r3, #2
 8009228:	bf0c      	ite	eq
 800922a:	2301      	moveq	r3, #1
 800922c:	2300      	movne	r3, #0
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 842f 	beq.w	8009a94 <cppLoop+0x1fd4>
			led.LR(-1, 1);
 8009236:	2201      	movs	r2, #1
 8009238:	f04f 31ff 	mov.w	r1, #4294967295
 800923c:	4849      	ldr	r0, [pc, #292]	; (8009364 <cppLoop+0x18a4>)
 800923e:	f7f9 f815 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009246:	f000 fd5b 	bl	8009d00 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800924a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800938c <cppLoop+0x18cc>
 800924e:	484c      	ldr	r0, [pc, #304]	; (8009380 <cppLoop+0x18c0>)
 8009250:	f7fa fd2e 	bl	8003cb0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009254:	484a      	ldr	r0, [pc, #296]	; (8009380 <cppLoop+0x18c0>)
 8009256:	f7fa ffcf 	bl	80041f8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800925a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800925e:	f000 fd4f 	bl	8009d00 <HAL_Delay>

			led.fullColor('R');
 8009262:	2152      	movs	r1, #82	; 0x52
 8009264:	483f      	ldr	r0, [pc, #252]	; (8009364 <cppLoop+0x18a4>)
 8009266:	f7f8 ff45 	bl	80020f4 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800926a:	4849      	ldr	r0, [pc, #292]	; (8009390 <cppLoop+0x18d0>)
 800926c:	f7f8 f9fe 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009270:	f242 7010 	movw	r0, #10000	; 0x2710
 8009274:	f000 fd44 	bl	8009d00 <HAL_Delay>

			line_trace.stop();
 8009278:	4841      	ldr	r0, [pc, #260]	; (8009380 <cppLoop+0x18c0>)
 800927a:	f7fb f8cf 	bl	800441c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800927e:	4945      	ldr	r1, [pc, #276]	; (8009394 <cppLoop+0x18d4>)
 8009280:	4845      	ldr	r0, [pc, #276]	; (8009398 <cppLoop+0x18d8>)
 8009282:	f7f8 fa49 	bl	8001718 <user_fopen>
			float d = encoder.getDistance();
 8009286:	4842      	ldr	r0, [pc, #264]	; (8009390 <cppLoop+0x18d0>)
 8009288:	f7f8 f9b4 	bl	80015f4 <_ZN7Encoder11getDistanceEv>
 800928c:	eef0 7a40 	vmov.f32	s15, s0
 8009290:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009294:	1d3b      	adds	r3, r7, #4
 8009296:	2201      	movs	r2, #1
 8009298:	4619      	mov	r1, r3
 800929a:	2001      	movs	r0, #1
 800929c:	f7f8 fa5e 	bl	800175c <sd_write_float>
			user_fclose();
 80092a0:	f7f8 fa4c 	bl	800173c <user_fclose>

			led.LR(-1, 0);
 80092a4:	2200      	movs	r2, #0
 80092a6:	f04f 31ff 	mov.w	r1, #4294967295
 80092aa:	482e      	ldr	r0, [pc, #184]	; (8009364 <cppLoop+0x18a4>)
 80092ac:	f7f8 ffde 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 80092b0:	e3f0      	b.n	8009a94 <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 80092b2:	217e      	movs	r1, #126	; 0x7e
 80092b4:	482b      	ldr	r0, [pc, #172]	; (8009364 <cppLoop+0x18a4>)
 80092b6:	f7f8 ff1d 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80092ba:	f7f7 fef1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092be:	2100      	movs	r1, #0
 80092c0:	2000      	movs	r0, #0
 80092c2:	f7f7 fefd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80092c6:	4835      	ldr	r0, [pc, #212]	; (800939c <cppLoop+0x18dc>)
 80092c8:	f7f7 ff24 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092cc:	2101      	movs	r1, #1
 80092ce:	2000      	movs	r0, #0
 80092d0:	f7f7 fef6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80092d4:	4832      	ldr	r0, [pc, #200]	; (80093a0 <cppLoop+0x18e0>)
 80092d6:	f7f7 ff1d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80092da:	4821      	ldr	r0, [pc, #132]	; (8009360 <cppLoop+0x18a0>)
 80092dc:	f7f8 fea6 	bl	800202c <_ZN8JoyStick8getValueEv>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	bf0c      	ite	eq
 80092e6:	2301      	moveq	r3, #1
 80092e8:	2300      	movne	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 83d3 	beq.w	8009a98 <cppLoop+0x1fd8>
			HAL_Delay(500);
 80092f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092f6:	f000 fd03 	bl	8009d00 <HAL_Delay>
			led.LR(-1, 1);
 80092fa:	2201      	movs	r2, #1
 80092fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009300:	4818      	ldr	r0, [pc, #96]	; (8009364 <cppLoop+0x18a4>)
 8009302:	f7f8 ffb3 	bl	800226c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009306:	2102      	movs	r1, #2
 8009308:	481d      	ldr	r0, [pc, #116]	; (8009380 <cppLoop+0x18c0>)
 800930a:	f7fa ff63 	bl	80041d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800930e:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <cppLoop+0x18e4>)
 8009310:	edd3 7a00 	vldr	s15, [r3]
 8009314:	eeb0 0a67 	vmov.f32	s0, s15
 8009318:	4819      	ldr	r0, [pc, #100]	; (8009380 <cppLoop+0x18c0>)
 800931a:	f7fa fcd8 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800931e:	4b21      	ldr	r3, [pc, #132]	; (80093a4 <cppLoop+0x18e4>)
 8009320:	edd3 7a00 	vldr	s15, [r3]
 8009324:	eeb0 0a67 	vmov.f32	s0, s15
 8009328:	4815      	ldr	r0, [pc, #84]	; (8009380 <cppLoop+0x18c0>)
 800932a:	f7fa fce0 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800932e:	4b1d      	ldr	r3, [pc, #116]	; (80093a4 <cppLoop+0x18e4>)
 8009330:	edd3 7a00 	vldr	s15, [r3]
 8009334:	eeb0 0a67 	vmov.f32	s0, s15
 8009338:	4811      	ldr	r0, [pc, #68]	; (8009380 <cppLoop+0x18c0>)
 800933a:	f7fa fcf8 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800933e:	4810      	ldr	r0, [pc, #64]	; (8009380 <cppLoop+0x18c0>)
 8009340:	f7fb f9bc 	bl	80046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009344:	2200      	movs	r2, #0
 8009346:	f04f 31ff 	mov.w	r1, #4294967295
 800934a:	4806      	ldr	r0, [pc, #24]	; (8009364 <cppLoop+0x18a4>)
 800934c:	f7f8 ff8e 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8009350:	e3a2      	b.n	8009a98 <cppLoop+0x1fd8>
 8009352:	bf00      	nop
 8009354:	f3af 8000 	nop.w
 8009358:	9999999a 	.word	0x9999999a
 800935c:	3fb99999 	.word	0x3fb99999
 8009360:	20000540 	.word	0x20000540
 8009364:	2000054c 	.word	0x2000054c
 8009368:	2004811c 	.word	0x2004811c
 800936c:	2004818c 	.word	0x2004818c
 8009370:	20048194 	.word	0x20048194
 8009374:	08018e94 	.word	0x08018e94
 8009378:	08018d98 	.word	0x08018d98
 800937c:	08018ea0 	.word	0x08018ea0
 8009380:	200238a4 	.word	0x200238a4
 8009384:	08018eac 	.word	0x08018eac
 8009388:	08018eb4 	.word	0x08018eb4
 800938c:	00000000 	.word	0x00000000
 8009390:	200237fc 	.word	0x200237fc
 8009394:	08018ec0 	.word	0x08018ec0
 8009398:	08018ec8 	.word	0x08018ec8
 800939c:	08018ed4 	.word	0x08018ed4
 80093a0:	08018ee0 	.word	0x08018ee0
 80093a4:	20048164 	.word	0x20048164

	case 11:
		led.fullColor('~');
 80093a8:	217e      	movs	r1, #126	; 0x7e
 80093aa:	48bc      	ldr	r0, [pc, #752]	; (800969c <cppLoop+0x1bdc>)
 80093ac:	f7f8 fea2 	bl	80020f4 <_ZN3LED9fullColorEc>

lcd_clear();
 80093b0:	f7f7 fe76 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093b4:	2100      	movs	r1, #0
 80093b6:	2000      	movs	r0, #0
 80093b8:	f7f7 fe82 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80093bc:	48b8      	ldr	r0, [pc, #736]	; (80096a0 <cppLoop+0x1be0>)
 80093be:	f7f7 fea9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093c2:	2101      	movs	r1, #1
 80093c4:	2000      	movs	r0, #0
 80093c6:	f7f7 fe7b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80093ca:	48b6      	ldr	r0, [pc, #728]	; (80096a4 <cppLoop+0x1be4>)
 80093cc:	f7f7 fea2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80093d0:	48b5      	ldr	r0, [pc, #724]	; (80096a8 <cppLoop+0x1be8>)
 80093d2:	f7f8 fe2b 	bl	800202c <_ZN8JoyStick8getValueEv>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b02      	cmp	r3, #2
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 835a 	beq.w	8009a9c <cppLoop+0x1fdc>
			HAL_Delay(1000);
 80093e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093ec:	f000 fc88 	bl	8009d00 <HAL_Delay>
			led.LR(-1, 1);
 80093f0:	2201      	movs	r2, #1
 80093f2:	f04f 31ff 	mov.w	r1, #4294967295
 80093f6:	48a9      	ldr	r0, [pc, #676]	; (800969c <cppLoop+0x1bdc>)
 80093f8:	f7f8 ff38 	bl	800226c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80093fc:	eddf 1aab 	vldr	s3, [pc, #684]	; 80096ac <cppLoop+0x1bec>
 8009400:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 80096ac <cppLoop+0x1bec>
 8009404:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80096ac <cppLoop+0x1bec>
 8009408:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80096ac <cppLoop+0x1bec>
 800940c:	48a8      	ldr	r0, [pc, #672]	; (80096b0 <cppLoop+0x1bf0>)
 800940e:	f7f7 ff1f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009412:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009416:	f000 fc73 	bl	8009d00 <HAL_Delay>
			esc.off();
 800941a:	48a5      	ldr	r0, [pc, #660]	; (80096b0 <cppLoop+0x1bf0>)
 800941c:	f7f7 ffb2 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009420:	2200      	movs	r2, #0
 8009422:	f04f 31ff 	mov.w	r1, #4294967295
 8009426:	489d      	ldr	r0, [pc, #628]	; (800969c <cppLoop+0x1bdc>)
 8009428:	f7f8 ff20 	bl	800226c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800942c:	e336      	b.n	8009a9c <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 800942e:	217e      	movs	r1, #126	; 0x7e
 8009430:	489a      	ldr	r0, [pc, #616]	; (800969c <cppLoop+0x1bdc>)
 8009432:	f7f8 fe5f 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009436:	f7f7 fe33 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800943a:	2100      	movs	r1, #0
 800943c:	2000      	movs	r0, #0
 800943e:	f7f7 fe3f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009442:	489c      	ldr	r0, [pc, #624]	; (80096b4 <cppLoop+0x1bf4>)
 8009444:	f7f7 fe66 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009448:	2101      	movs	r1, #1
 800944a:	2000      	movs	r0, #0
 800944c:	f7f7 fe38 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009450:	4899      	ldr	r0, [pc, #612]	; (80096b8 <cppLoop+0x1bf8>)
 8009452:	f7f7 fe5f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009456:	4894      	ldr	r0, [pc, #592]	; (80096a8 <cppLoop+0x1be8>)
 8009458:	f7f8 fde8 	bl	800202c <_ZN8JoyStick8getValueEv>
 800945c:	4603      	mov	r3, r0
 800945e:	2b02      	cmp	r3, #2
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8319 	beq.w	8009aa0 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 800946e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009472:	f000 fc45 	bl	8009d00 <HAL_Delay>
			led.LR(-1, 1);
 8009476:	2201      	movs	r2, #1
 8009478:	f04f 31ff 	mov.w	r1, #4294967295
 800947c:	4887      	ldr	r0, [pc, #540]	; (800969c <cppLoop+0x1bdc>)
 800947e:	f7f8 fef5 	bl	800226c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009482:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009486:	f000 fc3b 	bl	8009d00 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800948a:	eddf 1a88 	vldr	s3, [pc, #544]	; 80096ac <cppLoop+0x1bec>
 800948e:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80096ac <cppLoop+0x1bec>
 8009492:	eddf 0a86 	vldr	s1, [pc, #536]	; 80096ac <cppLoop+0x1bec>
 8009496:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80096ac <cppLoop+0x1bec>
 800949a:	4885      	ldr	r0, [pc, #532]	; (80096b0 <cppLoop+0x1bf0>)
 800949c:	f7f7 fed8 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80094a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094a4:	f000 fc2c 	bl	8009d00 <HAL_Delay>

			logger.start();
 80094a8:	4884      	ldr	r0, [pc, #528]	; (80096bc <cppLoop+0x1bfc>)
 80094aa:	f7fb fc5c 	bl	8004d66 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80094ae:	4884      	ldr	r0, [pc, #528]	; (80096c0 <cppLoop+0x1c00>)
 80094b0:	f7fc fc3b 	bl	8005d2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80094b4:	eddf 0a83 	vldr	s1, [pc, #524]	; 80096c4 <cppLoop+0x1c04>
 80094b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094bc:	4880      	ldr	r0, [pc, #512]	; (80096c0 <cppLoop+0x1c00>)
 80094be:	f7fc fbc7 	bl	8005c50 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80094c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094c6:	f000 fc1b 	bl	8009d00 <HAL_Delay>

			logger.stop();
 80094ca:	487c      	ldr	r0, [pc, #496]	; (80096bc <cppLoop+0x1bfc>)
 80094cc:	f7fb fc6a 	bl	8004da4 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80094d0:	487b      	ldr	r0, [pc, #492]	; (80096c0 <cppLoop+0x1c00>)
 80094d2:	f7fc fc3d 	bl	8005d50 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80094d6:	4876      	ldr	r0, [pc, #472]	; (80096b0 <cppLoop+0x1bf0>)
 80094d8:	f7f7 ff54 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80094dc:	4a7a      	ldr	r2, [pc, #488]	; (80096c8 <cppLoop+0x1c08>)
 80094de:	497b      	ldr	r1, [pc, #492]	; (80096cc <cppLoop+0x1c0c>)
 80094e0:	4876      	ldr	r0, [pc, #472]	; (80096bc <cppLoop+0x1bfc>)
 80094e2:	f7fb fb3b 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80094e6:	2200      	movs	r2, #0
 80094e8:	f04f 31ff 	mov.w	r1, #4294967295
 80094ec:	486b      	ldr	r0, [pc, #428]	; (800969c <cppLoop+0x1bdc>)
 80094ee:	f7f8 febd 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 80094f2:	e2d5      	b.n	8009aa0 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 80094f4:	2157      	movs	r1, #87	; 0x57
 80094f6:	4869      	ldr	r0, [pc, #420]	; (800969c <cppLoop+0x1bdc>)
 80094f8:	f7f8 fdfc 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094fc:	f7f7 fdd0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009500:	2100      	movs	r1, #0
 8009502:	2000      	movs	r0, #0
 8009504:	f7f7 fddc 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009508:	4871      	ldr	r0, [pc, #452]	; (80096d0 <cppLoop+0x1c10>)
 800950a:	f7f7 fe03 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800950e:	2101      	movs	r1, #1
 8009510:	2000      	movs	r0, #0
 8009512:	f7f7 fdd5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009516:	4b6f      	ldr	r3, [pc, #444]	; (80096d4 <cppLoop+0x1c14>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4618      	mov	r0, r3
 800951c:	f7f7 f82c 	bl	8000578 <__aeabi_f2d>
 8009520:	4603      	mov	r3, r0
 8009522:	460c      	mov	r4, r1
 8009524:	461a      	mov	r2, r3
 8009526:	4623      	mov	r3, r4
 8009528:	486b      	ldr	r0, [pc, #428]	; (80096d8 <cppLoop+0x1c18>)
 800952a:	f7f7 fdf3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800952e:	485e      	ldr	r0, [pc, #376]	; (80096a8 <cppLoop+0x1be8>)
 8009530:	f7f8 fd7c 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009534:	4603      	mov	r3, r0
 8009536:	2b02      	cmp	r3, #2
 8009538:	bf0c      	ite	eq
 800953a:	2301      	moveq	r3, #1
 800953c:	2300      	movne	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 82af 	beq.w	8009aa4 <cppLoop+0x1fe4>
			HAL_Delay(500);
 8009546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800954a:	f000 fbd9 	bl	8009d00 <HAL_Delay>

			led.LR(1, -1);
 800954e:	f04f 32ff 	mov.w	r2, #4294967295
 8009552:	2101      	movs	r1, #1
 8009554:	4851      	ldr	r0, [pc, #324]	; (800969c <cppLoop+0x1bdc>)
 8009556:	f7f8 fe89 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800955a:	2102      	movs	r1, #2
 800955c:	485f      	ldr	r0, [pc, #380]	; (80096dc <cppLoop+0x1c1c>)
 800955e:	f7fa fe39 	bl	80041d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009562:	4b5f      	ldr	r3, [pc, #380]	; (80096e0 <cppLoop+0x1c20>)
 8009564:	edd3 7a00 	vldr	s15, [r3]
 8009568:	eeb0 0a67 	vmov.f32	s0, s15
 800956c:	485b      	ldr	r0, [pc, #364]	; (80096dc <cppLoop+0x1c1c>)
 800956e:	f7fa fbae 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009572:	4b58      	ldr	r3, [pc, #352]	; (80096d4 <cppLoop+0x1c14>)
 8009574:	edd3 7a00 	vldr	s15, [r3]
 8009578:	eeb0 0a67 	vmov.f32	s0, s15
 800957c:	4857      	ldr	r0, [pc, #348]	; (80096dc <cppLoop+0x1c1c>)
 800957e:	f7fa fbb6 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009582:	4b54      	ldr	r3, [pc, #336]	; (80096d4 <cppLoop+0x1c14>)
 8009584:	edd3 7a00 	vldr	s15, [r3]
 8009588:	eeb0 0a67 	vmov.f32	s0, s15
 800958c:	4853      	ldr	r0, [pc, #332]	; (80096dc <cppLoop+0x1c1c>)
 800958e:	f7fa fbce 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009592:	4852      	ldr	r0, [pc, #328]	; (80096dc <cppLoop+0x1c1c>)
 8009594:	f7fb f892 	bl	80046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800959c:	f000 fbb0 	bl	8009d00 <HAL_Delay>

			line_trace.running();
 80095a0:	484e      	ldr	r0, [pc, #312]	; (80096dc <cppLoop+0x1c1c>)
 80095a2:	f7fa fe5b 	bl	800425c <_ZN9LineTrace7runningEv>

			esc.off();
 80095a6:	4842      	ldr	r0, [pc, #264]	; (80096b0 <cppLoop+0x1bf0>)
 80095a8:	f7f7 feec 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	2100      	movs	r1, #0
 80095b2:	483a      	ldr	r0, [pc, #232]	; (800969c <cppLoop+0x1bdc>)
 80095b4:	f7f8 fe5a 	bl	800226c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80095b8:	e274      	b.n	8009aa4 <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 80095ba:	2157      	movs	r1, #87	; 0x57
 80095bc:	4837      	ldr	r0, [pc, #220]	; (800969c <cppLoop+0x1bdc>)
 80095be:	f7f8 fd99 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80095c2:	f7f7 fd6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095c6:	2100      	movs	r1, #0
 80095c8:	2000      	movs	r0, #0
 80095ca:	f7f7 fd79 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80095ce:	4845      	ldr	r0, [pc, #276]	; (80096e4 <cppLoop+0x1c24>)
 80095d0:	f7f7 fda0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095d4:	2101      	movs	r1, #1
 80095d6:	2000      	movs	r0, #0
 80095d8:	f7f7 fd72 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80095dc:	4b42      	ldr	r3, [pc, #264]	; (80096e8 <cppLoop+0x1c28>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7f6 ffc9 	bl	8000578 <__aeabi_f2d>
 80095e6:	4603      	mov	r3, r0
 80095e8:	460c      	mov	r4, r1
 80095ea:	461a      	mov	r2, r3
 80095ec:	4623      	mov	r3, r4
 80095ee:	483a      	ldr	r0, [pc, #232]	; (80096d8 <cppLoop+0x1c18>)
 80095f0:	f7f7 fd90 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095f4:	482c      	ldr	r0, [pc, #176]	; (80096a8 <cppLoop+0x1be8>)
 80095f6:	f7f8 fd19 	bl	800202c <_ZN8JoyStick8getValueEv>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	bf0c      	ite	eq
 8009600:	2301      	moveq	r3, #1
 8009602:	2300      	movne	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 824e 	beq.w	8009aa8 <cppLoop+0x1fe8>
			HAL_Delay(500);
 800960c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009610:	f000 fb76 	bl	8009d00 <HAL_Delay>

			led.LR(1, -1);
 8009614:	f04f 32ff 	mov.w	r2, #4294967295
 8009618:	2101      	movs	r1, #1
 800961a:	4820      	ldr	r0, [pc, #128]	; (800969c <cppLoop+0x1bdc>)
 800961c:	f7f8 fe26 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009620:	2101      	movs	r1, #1
 8009622:	482e      	ldr	r0, [pc, #184]	; (80096dc <cppLoop+0x1c1c>)
 8009624:	f7fa fdd6 	bl	80041d4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009628:	4b30      	ldr	r3, [pc, #192]	; (80096ec <cppLoop+0x1c2c>)
 800962a:	edd3 7a00 	vldr	s15, [r3]
 800962e:	eeb0 0a67 	vmov.f32	s0, s15
 8009632:	482a      	ldr	r0, [pc, #168]	; (80096dc <cppLoop+0x1c1c>)
 8009634:	f7fa fb4b 	bl	8003cce <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009638:	4b2b      	ldr	r3, [pc, #172]	; (80096e8 <cppLoop+0x1c28>)
 800963a:	edd3 7a00 	vldr	s15, [r3]
 800963e:	eeb0 0a67 	vmov.f32	s0, s15
 8009642:	4826      	ldr	r0, [pc, #152]	; (80096dc <cppLoop+0x1c1c>)
 8009644:	f7fa fb53 	bl	8003cee <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009648:	4b28      	ldr	r3, [pc, #160]	; (80096ec <cppLoop+0x1c2c>)
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eeb0 0a67 	vmov.f32	s0, s15
 8009652:	4822      	ldr	r0, [pc, #136]	; (80096dc <cppLoop+0x1c1c>)
 8009654:	f7fa fb6b 	bl	8003d2e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009658:	4820      	ldr	r0, [pc, #128]	; (80096dc <cppLoop+0x1c1c>)
 800965a:	f7fb f82f 	bl	80046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800965e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009662:	f000 fb4d 	bl	8009d00 <HAL_Delay>

			logger.start();
 8009666:	4815      	ldr	r0, [pc, #84]	; (80096bc <cppLoop+0x1bfc>)
 8009668:	f7fb fb7d 	bl	8004d66 <_ZN6Logger5startEv>

			line_trace.running();
 800966c:	481b      	ldr	r0, [pc, #108]	; (80096dc <cppLoop+0x1c1c>)
 800966e:	f7fa fdf5 	bl	800425c <_ZN9LineTrace7runningEv>

			logger.stop();
 8009672:	4812      	ldr	r0, [pc, #72]	; (80096bc <cppLoop+0x1bfc>)
 8009674:	f7fb fb96 	bl	8004da4 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 8009678:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <cppLoop+0x1c30>)
 800967a:	491e      	ldr	r1, [pc, #120]	; (80096f4 <cppLoop+0x1c34>)
 800967c:	480f      	ldr	r0, [pc, #60]	; (80096bc <cppLoop+0x1bfc>)
 800967e:	f7fb fa6d 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 8009682:	4a1d      	ldr	r2, [pc, #116]	; (80096f8 <cppLoop+0x1c38>)
 8009684:	491b      	ldr	r1, [pc, #108]	; (80096f4 <cppLoop+0x1c34>)
 8009686:	480d      	ldr	r0, [pc, #52]	; (80096bc <cppLoop+0x1bfc>)
 8009688:	f7fb fa7c 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	2100      	movs	r1, #0
 8009692:	4802      	ldr	r0, [pc, #8]	; (800969c <cppLoop+0x1bdc>)
 8009694:	f7f8 fdea 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8009698:	e206      	b.n	8009aa8 <cppLoop+0x1fe8>
 800969a:	bf00      	nop
 800969c:	2000054c 	.word	0x2000054c
 80096a0:	08018eec 	.word	0x08018eec
 80096a4:	08018ef0 	.word	0x08018ef0
 80096a8:	20000540 	.word	0x20000540
 80096ac:	3ea3d70a 	.word	0x3ea3d70a
 80096b0:	200238a0 	.word	0x200238a0
 80096b4:	08018ef8 	.word	0x08018ef8
 80096b8:	08018efc 	.word	0x08018efc
 80096bc:	20000570 	.word	0x20000570
 80096c0:	20023820 	.word	0x20023820
 80096c4:	00000000 	.word	0x00000000
 80096c8:	08018f08 	.word	0x08018f08
 80096cc:	08018f14 	.word	0x08018f14
 80096d0:	08018f20 	.word	0x08018f20
 80096d4:	20048164 	.word	0x20048164
 80096d8:	08018dc4 	.word	0x08018dc4
 80096dc:	200238a4 	.word	0x200238a4
 80096e0:	20048174 	.word	0x20048174
 80096e4:	08018f2c 	.word	0x08018f2c
 80096e8:	2004815c 	.word	0x2004815c
 80096ec:	2004816c 	.word	0x2004816c
 80096f0:	08018de8 	.word	0x08018de8
 80096f4:	08018ddc 	.word	0x08018ddc
 80096f8:	08018dd0 	.word	0x08018dd0

	case 15:
		led.fullColor('W');
 80096fc:	2157      	movs	r1, #87	; 0x57
 80096fe:	48ac      	ldr	r0, [pc, #688]	; (80099b0 <cppLoop+0x1ef0>)
 8009700:	f7f8 fcf8 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009704:	f7f7 fccc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009708:	2100      	movs	r1, #0
 800970a:	2000      	movs	r0, #0
 800970c:	f7f7 fcd8 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8009710:	48a8      	ldr	r0, [pc, #672]	; (80099b4 <cppLoop+0x1ef4>)
 8009712:	f7fa fa5a 	bl	8003bca <_ZN9LineTrace5getKpEv>
 8009716:	eeb0 7a40 	vmov.f32	s14, s0
 800971a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80099b8 <cppLoop+0x1ef8>
 800971e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009722:	eeb0 0a67 	vmov.f32	s0, s15
 8009726:	f7f9 f8a7 	bl	8002878 <_ZSt3absf>
 800972a:	ee10 3a10 	vmov	r3, s0
 800972e:	4618      	mov	r0, r3
 8009730:	f7f6 ff22 	bl	8000578 <__aeabi_f2d>
 8009734:	4603      	mov	r3, r0
 8009736:	460c      	mov	r4, r1
 8009738:	461a      	mov	r2, r3
 800973a:	4623      	mov	r3, r4
 800973c:	489f      	ldr	r0, [pc, #636]	; (80099bc <cppLoop+0x1efc>)
 800973e:	f7f7 fce9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009742:	2101      	movs	r1, #1
 8009744:	2000      	movs	r0, #0
 8009746:	f7f7 fcbb 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 800974a:	489a      	ldr	r0, [pc, #616]	; (80099b4 <cppLoop+0x1ef4>)
 800974c:	f7fa fa4c 	bl	8003be8 <_ZN9LineTrace5getKiEv>
 8009750:	eeb0 7a40 	vmov.f32	s14, s0
 8009754:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80099c0 <cppLoop+0x1f00>
 8009758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975c:	eeb0 0a67 	vmov.f32	s0, s15
 8009760:	f7f9 f88a 	bl	8002878 <_ZSt3absf>
 8009764:	ee10 3a10 	vmov	r3, s0
 8009768:	4618      	mov	r0, r3
 800976a:	f7f6 ff05 	bl	8000578 <__aeabi_f2d>
 800976e:	4605      	mov	r5, r0
 8009770:	460e      	mov	r6, r1
 8009772:	4890      	ldr	r0, [pc, #576]	; (80099b4 <cppLoop+0x1ef4>)
 8009774:	f7fa fa47 	bl	8003c06 <_ZN9LineTrace5getKdEv>
 8009778:	eeb0 7a40 	vmov.f32	s14, s0
 800977c:	eddf 7a91 	vldr	s15, [pc, #580]	; 80099c4 <cppLoop+0x1f04>
 8009780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009784:	eeb0 0a67 	vmov.f32	s0, s15
 8009788:	f7f9 f876 	bl	8002878 <_ZSt3absf>
 800978c:	ee10 3a10 	vmov	r3, s0
 8009790:	4618      	mov	r0, r3
 8009792:	f7f6 fef1 	bl	8000578 <__aeabi_f2d>
 8009796:	4603      	mov	r3, r0
 8009798:	460c      	mov	r4, r1
 800979a:	e9cd 3400 	strd	r3, r4, [sp]
 800979e:	462a      	mov	r2, r5
 80097a0:	4633      	mov	r3, r6
 80097a2:	4889      	ldr	r0, [pc, #548]	; (80099c8 <cppLoop+0x1f08>)
 80097a4:	f7f7 fcb6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80097a8:	4888      	ldr	r0, [pc, #544]	; (80099cc <cppLoop+0x1f0c>)
 80097aa:	f7f8 fc3f 	bl	800202c <_ZN8JoyStick8getValueEv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d021      	beq.n	8009802 <cppLoop+0x1d42>
			led.LR(-1, 1);
 80097be:	2201      	movs	r2, #1
 80097c0:	f04f 31ff 	mov.w	r1, #4294967295
 80097c4:	487a      	ldr	r0, [pc, #488]	; (80099b0 <cppLoop+0x1ef0>)
 80097c6:	f7f8 fd51 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80097ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80097ce:	f000 fa97 	bl	8009d00 <HAL_Delay>

			selector++;
 80097d2:	4b7f      	ldr	r3, [pc, #508]	; (80099d0 <cppLoop+0x1f10>)
 80097d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3301      	adds	r3, #1
 80097dc:	b29b      	uxth	r3, r3
 80097de:	b21a      	sxth	r2, r3
 80097e0:	4b7b      	ldr	r3, [pc, #492]	; (80099d0 <cppLoop+0x1f10>)
 80097e2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80097e4:	4b7a      	ldr	r3, [pc, #488]	; (80099d0 <cppLoop+0x1f10>)
 80097e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	dd02      	ble.n	80097f4 <cppLoop+0x1d34>
 80097ee:	4b78      	ldr	r3, [pc, #480]	; (80099d0 <cppLoop+0x1f10>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80097f4:	2200      	movs	r2, #0
 80097f6:	f04f 31ff 	mov.w	r1, #4294967295
 80097fa:	486d      	ldr	r0, [pc, #436]	; (80099b0 <cppLoop+0x1ef0>)
 80097fc:	f7f8 fd36 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009800:	e154      	b.n	8009aac <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 8009802:	4872      	ldr	r0, [pc, #456]	; (80099cc <cppLoop+0x1f0c>)
 8009804:	f7f8 fc12 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009808:	4603      	mov	r3, r0
 800980a:	2b10      	cmp	r3, #16
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d058      	beq.n	80098ca <cppLoop+0x1e0a>
			led.LR(-1, 1);
 8009818:	2201      	movs	r2, #1
 800981a:	f04f 31ff 	mov.w	r1, #4294967295
 800981e:	4864      	ldr	r0, [pc, #400]	; (80099b0 <cppLoop+0x1ef0>)
 8009820:	f7f8 fd24 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009824:	2064      	movs	r0, #100	; 0x64
 8009826:	f000 fa6b 	bl	8009d00 <HAL_Delay>
			if(selector == 0){
 800982a:	4b69      	ldr	r3, [pc, #420]	; (80099d0 <cppLoop+0x1f10>)
 800982c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d113      	bne.n	800985c <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.000001;
 8009834:	4b67      	ldr	r3, [pc, #412]	; (80099d4 <cppLoop+0x1f14>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f7f6 fe9d 	bl	8000578 <__aeabi_f2d>
 800983e:	a356      	add	r3, pc, #344	; (adr r3, 8009998 <cppLoop+0x1ed8>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fd3a 	bl	80002bc <__adddf3>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4618      	mov	r0, r3
 800984e:	4621      	mov	r1, r4
 8009850:	f7f7 f9e2 	bl	8000c18 <__aeabi_d2f>
 8009854:	4602      	mov	r2, r0
 8009856:	4b5f      	ldr	r3, [pc, #380]	; (80099d4 <cppLoop+0x1f14>)
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e02b      	b.n	80098b4 <cppLoop+0x1df4>
			else if(selector == 1){
 800985c:	4b5c      	ldr	r3, [pc, #368]	; (80099d0 <cppLoop+0x1f10>)
 800985e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d113      	bne.n	800988e <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.00001;
 8009866:	4b5c      	ldr	r3, [pc, #368]	; (80099d8 <cppLoop+0x1f18>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f7f6 fe84 	bl	8000578 <__aeabi_f2d>
 8009870:	a34b      	add	r3, pc, #300	; (adr r3, 80099a0 <cppLoop+0x1ee0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd21 	bl	80002bc <__adddf3>
 800987a:	4603      	mov	r3, r0
 800987c:	460c      	mov	r4, r1
 800987e:	4618      	mov	r0, r3
 8009880:	4621      	mov	r1, r4
 8009882:	f7f7 f9c9 	bl	8000c18 <__aeabi_d2f>
 8009886:	4602      	mov	r2, r0
 8009888:	4b53      	ldr	r3, [pc, #332]	; (80099d8 <cppLoop+0x1f18>)
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e012      	b.n	80098b4 <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.0000001;
 800988e:	4b53      	ldr	r3, [pc, #332]	; (80099dc <cppLoop+0x1f1c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4618      	mov	r0, r3
 8009894:	f7f6 fe70 	bl	8000578 <__aeabi_f2d>
 8009898:	a343      	add	r3, pc, #268	; (adr r3, 80099a8 <cppLoop+0x1ee8>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fd0d 	bl	80002bc <__adddf3>
 80098a2:	4603      	mov	r3, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	4618      	mov	r0, r3
 80098a8:	4621      	mov	r1, r4
 80098aa:	f7f7 f9b5 	bl	8000c18 <__aeabi_d2f>
 80098ae:	4602      	mov	r2, r0
 80098b0:	4b4a      	ldr	r3, [pc, #296]	; (80099dc <cppLoop+0x1f1c>)
 80098b2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80098b4:	2152      	movs	r1, #82	; 0x52
 80098b6:	483e      	ldr	r0, [pc, #248]	; (80099b0 <cppLoop+0x1ef0>)
 80098b8:	f7f8 fc1c 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80098bc:	2200      	movs	r2, #0
 80098be:	f04f 31ff 	mov.w	r1, #4294967295
 80098c2:	483b      	ldr	r0, [pc, #236]	; (80099b0 <cppLoop+0x1ef0>)
 80098c4:	f7f8 fcd2 	bl	800226c <_ZN3LED2LREaa>
		break;
 80098c8:	e0f0      	b.n	8009aac <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 80098ca:	4840      	ldr	r0, [pc, #256]	; (80099cc <cppLoop+0x1f0c>)
 80098cc:	f7f8 fbae 	bl	800202c <_ZN8JoyStick8getValueEv>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	bf0c      	ite	eq
 80098d6:	2301      	moveq	r3, #1
 80098d8:	2300      	movne	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d07f      	beq.n	80099e0 <cppLoop+0x1f20>
			led.LR(-1, 1);
 80098e0:	2201      	movs	r2, #1
 80098e2:	f04f 31ff 	mov.w	r1, #4294967295
 80098e6:	4832      	ldr	r0, [pc, #200]	; (80099b0 <cppLoop+0x1ef0>)
 80098e8:	f7f8 fcc0 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80098ec:	2064      	movs	r0, #100	; 0x64
 80098ee:	f000 fa07 	bl	8009d00 <HAL_Delay>
			if(selector == 0){
 80098f2:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <cppLoop+0x1f10>)
 80098f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d113      	bne.n	8009924 <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.000001;
 80098fc:	4b35      	ldr	r3, [pc, #212]	; (80099d4 <cppLoop+0x1f14>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4618      	mov	r0, r3
 8009902:	f7f6 fe39 	bl	8000578 <__aeabi_f2d>
 8009906:	a324      	add	r3, pc, #144	; (adr r3, 8009998 <cppLoop+0x1ed8>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 fcd4 	bl	80002b8 <__aeabi_dsub>
 8009910:	4603      	mov	r3, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4618      	mov	r0, r3
 8009916:	4621      	mov	r1, r4
 8009918:	f7f7 f97e 	bl	8000c18 <__aeabi_d2f>
 800991c:	4602      	mov	r2, r0
 800991e:	4b2d      	ldr	r3, [pc, #180]	; (80099d4 <cppLoop+0x1f14>)
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e02b      	b.n	800997c <cppLoop+0x1ebc>
			else if(selector == 1){
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <cppLoop+0x1f10>)
 8009926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d113      	bne.n	8009956 <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.00001;
 800992e:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <cppLoop+0x1f18>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f7f6 fe20 	bl	8000578 <__aeabi_f2d>
 8009938:	a319      	add	r3, pc, #100	; (adr r3, 80099a0 <cppLoop+0x1ee0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fcbb 	bl	80002b8 <__aeabi_dsub>
 8009942:	4603      	mov	r3, r0
 8009944:	460c      	mov	r4, r1
 8009946:	4618      	mov	r0, r3
 8009948:	4621      	mov	r1, r4
 800994a:	f7f7 f965 	bl	8000c18 <__aeabi_d2f>
 800994e:	4602      	mov	r2, r0
 8009950:	4b21      	ldr	r3, [pc, #132]	; (80099d8 <cppLoop+0x1f18>)
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e012      	b.n	800997c <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.0000001;
 8009956:	4b21      	ldr	r3, [pc, #132]	; (80099dc <cppLoop+0x1f1c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f7f6 fe0c 	bl	8000578 <__aeabi_f2d>
 8009960:	a311      	add	r3, pc, #68	; (adr r3, 80099a8 <cppLoop+0x1ee8>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fca7 	bl	80002b8 <__aeabi_dsub>
 800996a:	4603      	mov	r3, r0
 800996c:	460c      	mov	r4, r1
 800996e:	4618      	mov	r0, r3
 8009970:	4621      	mov	r1, r4
 8009972:	f7f7 f951 	bl	8000c18 <__aeabi_d2f>
 8009976:	4602      	mov	r2, r0
 8009978:	4b18      	ldr	r3, [pc, #96]	; (80099dc <cppLoop+0x1f1c>)
 800997a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800997c:	2152      	movs	r1, #82	; 0x52
 800997e:	480c      	ldr	r0, [pc, #48]	; (80099b0 <cppLoop+0x1ef0>)
 8009980:	f7f8 fbb8 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009984:	2200      	movs	r2, #0
 8009986:	f04f 31ff 	mov.w	r1, #4294967295
 800998a:	4809      	ldr	r0, [pc, #36]	; (80099b0 <cppLoop+0x1ef0>)
 800998c:	f7f8 fc6e 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009990:	e08c      	b.n	8009aac <cppLoop+0x1fec>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	a0b5ed8d 	.word	0xa0b5ed8d
 800999c:	3eb0c6f7 	.word	0x3eb0c6f7
 80099a0:	88e368f1 	.word	0x88e368f1
 80099a4:	3ee4f8b5 	.word	0x3ee4f8b5
 80099a8:	9abcaf48 	.word	0x9abcaf48
 80099ac:	3e7ad7f2 	.word	0x3e7ad7f2
 80099b0:	2000054c 	.word	0x2000054c
 80099b4:	200238a4 	.word	0x200238a4
 80099b8:	461c4000 	.word	0x461c4000
 80099bc:	08018f38 	.word	0x08018f38
 80099c0:	447a0000 	.word	0x447a0000
 80099c4:	47c35000 	.word	0x47c35000
 80099c8:	08018d7c 	.word	0x08018d7c
 80099cc:	20000540 	.word	0x20000540
 80099d0:	20048118 	.word	0x20048118
 80099d4:	20048124 	.word	0x20048124
 80099d8:	2004812c 	.word	0x2004812c
 80099dc:	20048134 	.word	0x20048134
		else if(joy_stick.getValue() == JOY_C){
 80099e0:	4836      	ldr	r0, [pc, #216]	; (8009abc <cppLoop+0x1ffc>)
 80099e2:	f7f8 fb23 	bl	800202c <_ZN8JoyStick8getValueEv>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	bf0c      	ite	eq
 80099ec:	2301      	moveq	r3, #1
 80099ee:	2300      	movne	r3, #0
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d05a      	beq.n	8009aac <cppLoop+0x1fec>
			led.LR(-1, 1);
 80099f6:	2201      	movs	r2, #1
 80099f8:	f04f 31ff 	mov.w	r1, #4294967295
 80099fc:	4830      	ldr	r0, [pc, #192]	; (8009ac0 <cppLoop+0x2000>)
 80099fe:	f7f8 fc35 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a06:	f000 f97b 	bl	8009d00 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	4b2d      	ldr	r3, [pc, #180]	; (8009ac4 <cppLoop+0x2004>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	492d      	ldr	r1, [pc, #180]	; (8009ac8 <cppLoop+0x2008>)
 8009a14:	482d      	ldr	r0, [pc, #180]	; (8009acc <cppLoop+0x200c>)
 8009a16:	f7f7 fef3 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <cppLoop+0x2010>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	492c      	ldr	r1, [pc, #176]	; (8009ad4 <cppLoop+0x2014>)
 8009a24:	4829      	ldr	r0, [pc, #164]	; (8009acc <cppLoop+0x200c>)
 8009a26:	f7f7 feeb 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	4b2a      	ldr	r3, [pc, #168]	; (8009ad8 <cppLoop+0x2018>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	492a      	ldr	r1, [pc, #168]	; (8009adc <cppLoop+0x201c>)
 8009a34:	4825      	ldr	r0, [pc, #148]	; (8009acc <cppLoop+0x200c>)
 8009a36:	f7f7 fee3 	bl	8001800 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009a3a:	4b22      	ldr	r3, [pc, #136]	; (8009ac4 <cppLoop+0x2004>)
 8009a3c:	edd3 7a00 	vldr	s15, [r3]
 8009a40:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <cppLoop+0x2010>)
 8009a42:	ed93 7a00 	vldr	s14, [r3]
 8009a46:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <cppLoop+0x2018>)
 8009a48:	edd3 6a00 	vldr	s13, [r3]
 8009a4c:	eeb0 1a66 	vmov.f32	s2, s13
 8009a50:	eef0 0a47 	vmov.f32	s1, s14
 8009a54:	eeb0 0a67 	vmov.f32	s0, s15
 8009a58:	4821      	ldr	r0, [pc, #132]	; (8009ae0 <cppLoop+0x2020>)
 8009a5a:	f7fa f89d 	bl	8003b98 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f04f 31ff 	mov.w	r1, #4294967295
 8009a64:	4816      	ldr	r0, [pc, #88]	; (8009ac0 <cppLoop+0x2000>)
 8009a66:	f7f8 fc01 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009a6a:	e01f      	b.n	8009aac <cppLoop+0x1fec>

	default:
		break;
 8009a6c:	bf00      	nop
 8009a6e:	e01e      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a70:	bf00      	nop
 8009a72:	e01c      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a74:	bf00      	nop
 8009a76:	e01a      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a78:	bf00      	nop
 8009a7a:	e018      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a7c:	bf00      	nop
 8009a7e:	e016      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a80:	bf00      	nop
 8009a82:	e014      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a84:	bf00      	nop
 8009a86:	e012      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a88:	bf00      	nop
 8009a8a:	e010      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a8c:	bf00      	nop
 8009a8e:	e00e      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a90:	bf00      	nop
 8009a92:	e00c      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a94:	bf00      	nop
 8009a96:	e00a      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a98:	bf00      	nop
 8009a9a:	e008      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009a9c:	bf00      	nop
 8009a9e:	e006      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009aa0:	bf00      	nop
 8009aa2:	e004      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <cppLoop+0x1fee>
		break;
 8009aac:	bf00      	nop

	}

	HAL_Delay(30);
 8009aae:	201e      	movs	r0, #30
 8009ab0:	f000 f926 	bl	8009d00 <HAL_Delay>

}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abc:	20000540 	.word	0x20000540
 8009ac0:	2000054c 	.word	0x2000054c
 8009ac4:	20048124 	.word	0x20048124
 8009ac8:	08018f44 	.word	0x08018f44
 8009acc:	08018d98 	.word	0x08018d98
 8009ad0:	2004812c 	.word	0x2004812c
 8009ad4:	08018f4c 	.word	0x08018f4c
 8009ad8:	20048134 	.word	0x20048134
 8009adc:	08018f54 	.word	0x08018f54
 8009ae0:	200238a4 	.word	0x200238a4

08009ae4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af06      	add	r7, sp, #24
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d142      	bne.n	8009b7a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d13d      	bne.n	8009b7a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009afe:	4821      	ldr	r0, [pc, #132]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b00:	f7f8 fbec 	bl	80022dc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009b04:	4820      	ldr	r0, [pc, #128]	; (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b06:	f7fb fc73 	bl	80053f0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009b0a:	4820      	ldr	r0, [pc, #128]	; (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009b0c:	f7f8 fa82 	bl	8002014 <_ZN8JoyStickC1Ev>
Motor motor;
 8009b10:	481f      	ldr	r0, [pc, #124]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b12:	f7fb f958 	bl	8004dc6 <_ZN5MotorC1Ev>
IMU imu;
 8009b16:	481f      	ldr	r0, [pc, #124]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b18:	f7f8 f88a 	bl	8001c30 <_ZN3IMUC1Ev>
Logger logger;
 8009b1c:	481e      	ldr	r0, [pc, #120]	; (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b1e:	f7fa febd 	bl	800489c <_ZN6LoggerC1Ev>
Encoder encoder;
 8009b22:	481e      	ldr	r0, [pc, #120]	; (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b24:	f7f7 fc52 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009b28:	4b1a      	ldr	r3, [pc, #104]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b2a:	4a1c      	ldr	r2, [pc, #112]	; (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b2c:	4918      	ldr	r1, [pc, #96]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b2e:	481c      	ldr	r0, [pc, #112]	; (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b30:	f7fb ff58 	bl	80059e4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009b34:	4b1a      	ldr	r3, [pc, #104]	; (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b36:	4a17      	ldr	r2, [pc, #92]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b38:	4918      	ldr	r1, [pc, #96]	; (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b3a:	481a      	ldr	r0, [pc, #104]	; (8009ba4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b3c:	f7fb fa28 	bl	8004f90 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009b40:	4819      	ldr	r0, [pc, #100]	; (8009ba8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b42:	f7f7 fb47 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b48:	9305      	str	r3, [sp, #20]
 8009b4a:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b60:	4a08      	ldr	r2, [pc, #32]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b62:	490b      	ldr	r1, [pc, #44]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b64:	4811      	ldr	r0, [pc, #68]	; (8009bac <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009b66:	f7f8 fe97 	bl	8002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009b6a:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b6c:	490a      	ldr	r1, [pc, #40]	; (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b6e:	4810      	ldr	r0, [pc, #64]	; (8009bb0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009b70:	f7fb fd70 	bl	8005654 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009b74:	480f      	ldr	r0, [pc, #60]	; (8009bb4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009b76:	f7fb facb 	bl	8005110 <_ZN13PathFollowingC1Ev>
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000238 	.word	0x20000238
 8009b88:	20000530 	.word	0x20000530
 8009b8c:	20000540 	.word	0x20000540
 8009b90:	20000548 	.word	0x20000548
 8009b94:	2000055c 	.word	0x2000055c
 8009b98:	20000570 	.word	0x20000570
 8009b9c:	200237fc 	.word	0x200237fc
 8009ba0:	20023820 	.word	0x20023820
 8009ba4:	20023860 	.word	0x20023860
 8009ba8:	200238a0 	.word	0x200238a0
 8009bac:	200238a4 	.word	0x200238a4
 8009bb0:	200307e4 	.word	0x200307e4
 8009bb4:	200309f0 	.word	0x200309f0

08009bb8 <_GLOBAL__sub_I_line_sensor>:
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f7ff ff8f 	bl	8009ae4 <_Z41__static_initialization_and_destruction_0ii>
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009bce:	e003      	b.n	8009bd8 <LoopCopyDataInit>

08009bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009bd6:	3104      	adds	r1, #4

08009bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009bd8:	480b      	ldr	r0, [pc, #44]	; (8009c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009be0:	d3f6      	bcc.n	8009bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8009be2:	4a0b      	ldr	r2, [pc, #44]	; (8009c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009be4:	e002      	b.n	8009bec <LoopFillZerobss>

08009be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009be8:	f842 3b04 	str.w	r3, [r2], #4

08009bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009bf0:	d3f9      	bcc.n	8009be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009bf2:	f7fd fe39 	bl	8007868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009bf6:	f00a fd95 	bl	8014724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bfa:	f7fc f951 	bl	8005ea0 <main>
  bx  lr    
 8009bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009c00:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009c04:	08019370 	.word	0x08019370
  ldr  r0, =_sdata
 8009c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009c0c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009c10:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009c14:	2004cb78 	.word	0x2004cb78

08009c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c18:	e7fe      	b.n	8009c18 <ADC_IRQHandler>
	...

08009c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c20:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <HAL_Init+0x40>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <HAL_Init+0x40>)
 8009c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <HAL_Init+0x40>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <HAL_Init+0x40>)
 8009c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c38:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <HAL_Init+0x40>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a07      	ldr	r2, [pc, #28]	; (8009c5c <HAL_Init+0x40>)
 8009c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c44:	2003      	movs	r0, #3
 8009c46:	f000 fd51 	bl	800a6ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	f000 f808 	bl	8009c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c50:	f7fd f84a 	bl	8006ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	40023c00 	.word	0x40023c00

08009c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <HAL_InitTick+0x54>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <HAL_InitTick+0x58>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	4619      	mov	r1, r3
 8009c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fd69 	bl	800a756 <HAL_SYSTICK_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e00e      	b.n	8009cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b0f      	cmp	r3, #15
 8009c92:	d80a      	bhi.n	8009caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c94:	2200      	movs	r2, #0
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	f000 fd31 	bl	800a702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ca0:	4a06      	ldr	r2, [pc, #24]	; (8009cbc <HAL_InitTick+0x5c>)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e000      	b.n	8009cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	20000008 	.word	0x20000008
 8009cbc:	20000004 	.word	0x20000004

08009cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <HAL_IncTick+0x20>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <HAL_IncTick+0x24>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	4a04      	ldr	r2, [pc, #16]	; (8009ce4 <HAL_IncTick+0x24>)
 8009cd2:	6013      	str	r3, [r2, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000008 	.word	0x20000008
 8009ce4:	2004ab00 	.word	0x2004ab00

08009ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  return uwTick;
 8009cec:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <HAL_GetTick+0x14>)
 8009cee:	681b      	ldr	r3, [r3, #0]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	2004ab00 	.word	0x2004ab00

08009d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d08:	f7ff ffee 	bl	8009ce8 <HAL_GetTick>
 8009d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d18:	d005      	beq.n	8009d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <HAL_Delay+0x40>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d26:	bf00      	nop
 8009d28:	f7ff ffde 	bl	8009ce8 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d8f7      	bhi.n	8009d28 <HAL_Delay+0x28>
  {
  }
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20000008 	.word	0x20000008

08009d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e033      	b.n	8009dc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7fc ffe8 	bl	8006d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f003 0310 	and.w	r3, r3, #16
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d118      	bne.n	8009db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d8a:	f023 0302 	bic.w	r3, r3, #2
 8009d8e:	f043 0202 	orr.w	r2, r3, #2
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa5a 	bl	800a250 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0201 	orr.w	r2, r3, #1
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	641a      	str	r2, [r3, #64]	; 0x40
 8009db2:	e001      	b.n	8009db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_ADC_Start_DMA+0x1e>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e0cc      	b.n	8009f84 <HAL_ADC_Start_DMA+0x1b8>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d018      	beq.n	8009e32 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f042 0201 	orr.w	r2, r2, #1
 8009e0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e10:	4b5e      	ldr	r3, [pc, #376]	; (8009f8c <HAL_ADC_Start_DMA+0x1c0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a5e      	ldr	r2, [pc, #376]	; (8009f90 <HAL_ADC_Start_DMA+0x1c4>)
 8009e16:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1a:	0c9a      	lsrs	r2, r3, #18
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	4413      	add	r3, r2
 8009e22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e24:	e002      	b.n	8009e2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1f9      	bne.n	8009e26 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	f040 80a0 	bne.w	8009f82 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e80:	d106      	bne.n	8009e90 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e86:	f023 0206 	bic.w	r2, r3, #6
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8009e8e:	e002      	b.n	8009e96 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e9e:	4b3d      	ldr	r3, [pc, #244]	; (8009f94 <HAL_ADC_Start_DMA+0x1c8>)
 8009ea0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	4a3c      	ldr	r2, [pc, #240]	; (8009f98 <HAL_ADC_Start_DMA+0x1cc>)
 8009ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	4a3b      	ldr	r2, [pc, #236]	; (8009f9c <HAL_ADC_Start_DMA+0x1d0>)
 8009eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb6:	4a3a      	ldr	r2, [pc, #232]	; (8009fa0 <HAL_ADC_Start_DMA+0x1d4>)
 8009eb8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009ec2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ed2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	334c      	adds	r3, #76	; 0x4c
 8009eee:	4619      	mov	r1, r3
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f000 fcea 	bl	800a8cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d12a      	bne.n	8009f5a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a26      	ldr	r2, [pc, #152]	; (8009fa4 <HAL_ADC_Start_DMA+0x1d8>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d015      	beq.n	8009f3a <HAL_ADC_Start_DMA+0x16e>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a25      	ldr	r2, [pc, #148]	; (8009fa8 <HAL_ADC_Start_DMA+0x1dc>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d105      	bne.n	8009f24 <HAL_ADC_Start_DMA+0x158>
 8009f18:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <HAL_ADC_Start_DMA+0x1c8>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f003 031f 	and.w	r3, r3, #31
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a20      	ldr	r2, [pc, #128]	; (8009fac <HAL_ADC_Start_DMA+0x1e0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d129      	bne.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
 8009f2e:	4b19      	ldr	r3, [pc, #100]	; (8009f94 <HAL_ADC_Start_DMA+0x1c8>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	2b0f      	cmp	r3, #15
 8009f38:	d823      	bhi.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11c      	bne.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f56:	609a      	str	r2, [r3, #8]
 8009f58:	e013      	b.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a11      	ldr	r2, [pc, #68]	; (8009fa4 <HAL_ADC_Start_DMA+0x1d8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d10e      	bne.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d107      	bne.n	8009f82 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f80:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	431bde83 	.word	0x431bde83
 8009f94:	40012300 	.word	0x40012300
 8009f98:	0800a449 	.word	0x0800a449
 8009f9c:	0800a503 	.word	0x0800a503
 8009fa0:	0800a51f 	.word	0x0800a51f
 8009fa4:	40012000 	.word	0x40012000
 8009fa8:	40012100 	.word	0x40012100
 8009fac:	40012200 	.word	0x40012200

08009fb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a000:	2b01      	cmp	r3, #1
 800a002:	d101      	bne.n	800a008 <HAL_ADC_ConfigChannel+0x1c>
 800a004:	2302      	movs	r3, #2
 800a006:	e113      	b.n	800a230 <HAL_ADC_ConfigChannel+0x244>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b09      	cmp	r3, #9
 800a016:	d925      	bls.n	800a064 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68d9      	ldr	r1, [r3, #12]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	461a      	mov	r2, r3
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	3b1e      	subs	r3, #30
 800a02e:	2207      	movs	r2, #7
 800a030:	fa02 f303 	lsl.w	r3, r2, r3
 800a034:	43da      	mvns	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	400a      	ands	r2, r1
 800a03c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68d9      	ldr	r1, [r3, #12]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4618      	mov	r0, r3
 800a050:	4603      	mov	r3, r0
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	4403      	add	r3, r0
 800a056:	3b1e      	subs	r3, #30
 800a058:	409a      	lsls	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	60da      	str	r2, [r3, #12]
 800a062:	e022      	b.n	800a0aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6919      	ldr	r1, [r3, #16]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	2207      	movs	r2, #7
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	43da      	mvns	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	400a      	ands	r2, r1
 800a086:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6919      	ldr	r1, [r3, #16]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	4618      	mov	r0, r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4403      	add	r3, r0
 800a0a0:	409a      	lsls	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b06      	cmp	r3, #6
 800a0b0:	d824      	bhi.n	800a0fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3b05      	subs	r3, #5
 800a0c4:	221f      	movs	r2, #31
 800a0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ca:	43da      	mvns	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	400a      	ands	r2, r1
 800a0d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3b05      	subs	r3, #5
 800a0ee:	fa00 f203 	lsl.w	r2, r0, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	635a      	str	r2, [r3, #52]	; 0x34
 800a0fa:	e04c      	b.n	800a196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b0c      	cmp	r3, #12
 800a102:	d824      	bhi.n	800a14e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	3b23      	subs	r3, #35	; 0x23
 800a116:	221f      	movs	r2, #31
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	43da      	mvns	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	400a      	ands	r2, r1
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	4618      	mov	r0, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	3b23      	subs	r3, #35	; 0x23
 800a140:	fa00 f203 	lsl.w	r2, r0, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	631a      	str	r2, [r3, #48]	; 0x30
 800a14c:	e023      	b.n	800a196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	3b41      	subs	r3, #65	; 0x41
 800a160:	221f      	movs	r2, #31
 800a162:	fa02 f303 	lsl.w	r3, r2, r3
 800a166:	43da      	mvns	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	400a      	ands	r2, r1
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4618      	mov	r0, r3
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	3b41      	subs	r3, #65	; 0x41
 800a18a:	fa00 f203 	lsl.w	r2, r0, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a196:	4b29      	ldr	r3, [pc, #164]	; (800a23c <HAL_ADC_ConfigChannel+0x250>)
 800a198:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a28      	ldr	r2, [pc, #160]	; (800a240 <HAL_ADC_ConfigChannel+0x254>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d10f      	bne.n	800a1c4 <HAL_ADC_ConfigChannel+0x1d8>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b12      	cmp	r3, #18
 800a1aa:	d10b      	bne.n	800a1c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1d      	ldr	r2, [pc, #116]	; (800a240 <HAL_ADC_ConfigChannel+0x254>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d12b      	bne.n	800a226 <HAL_ADC_ConfigChannel+0x23a>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a1c      	ldr	r2, [pc, #112]	; (800a244 <HAL_ADC_ConfigChannel+0x258>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d003      	beq.n	800a1e0 <HAL_ADC_ConfigChannel+0x1f4>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b11      	cmp	r3, #17
 800a1de:	d122      	bne.n	800a226 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a11      	ldr	r2, [pc, #68]	; (800a244 <HAL_ADC_ConfigChannel+0x258>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d111      	bne.n	800a226 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a202:	4b11      	ldr	r3, [pc, #68]	; (800a248 <HAL_ADC_ConfigChannel+0x25c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a11      	ldr	r2, [pc, #68]	; (800a24c <HAL_ADC_ConfigChannel+0x260>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	0c9a      	lsrs	r2, r3, #18
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a218:	e002      	b.n	800a220 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1f9      	bne.n	800a21a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	40012300 	.word	0x40012300
 800a240:	40012000 	.word	0x40012000
 800a244:	10000012 	.word	0x10000012
 800a248:	20000000 	.word	0x20000000
 800a24c:	431bde83 	.word	0x431bde83

0800a250 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a258:	4b79      	ldr	r3, [pc, #484]	; (800a440 <ADC_Init+0x1f0>)
 800a25a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	431a      	orrs	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6859      	ldr	r1, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	021a      	lsls	r2, r3, #8
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a2a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6859      	ldr	r1, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6899      	ldr	r1, [r3, #8]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e2:	4a58      	ldr	r2, [pc, #352]	; (800a444 <ADC_Init+0x1f4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d022      	beq.n	800a32e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6899      	ldr	r1, [r3, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6899      	ldr	r1, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
 800a32c:	e00f      	b.n	800a34e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a33c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a34c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0202 	bic.w	r2, r2, #2
 800a35c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6899      	ldr	r1, [r3, #8]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	7e1b      	ldrb	r3, [r3, #24]
 800a368:	005a      	lsls	r2, r3, #1
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01b      	beq.n	800a3b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a38a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a39a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6859      	ldr	r1, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	035a      	lsls	r2, r3, #13
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	e007      	b.n	800a3c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	051a      	lsls	r2, r3, #20
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6899      	ldr	r1, [r3, #8]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a406:	025a      	lsls	r2, r3, #9
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a41e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6899      	ldr	r1, [r3, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	029a      	lsls	r2, r3, #10
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	609a      	str	r2, [r3, #8]
}
 800a434:	bf00      	nop
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	40012300 	.word	0x40012300
 800a444:	0f000001 	.word	0x0f000001

0800a448 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a454:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d13c      	bne.n	800a4dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d12b      	bne.n	800a4d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a480:	2b00      	cmp	r3, #0
 800a482:	d127      	bne.n	800a4d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d119      	bne.n	800a4d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0220 	bic.w	r2, r2, #32
 800a4ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d105      	bne.n	800a4d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4cc:	f043 0201 	orr.w	r2, r3, #1
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7ff fd6b 	bl	8009fb0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a4da:	e00e      	b.n	800a4fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fd75 	bl	8009fd8 <HAL_ADC_ErrorCallback>
}
 800a4ee:	e004      	b.n	800a4fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fd57 	bl	8009fc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a516:	bf00      	nop
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2240      	movs	r2, #64	; 0x40
 800a530:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a536:	f043 0204 	orr.w	r2, r3, #4
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7ff fd4a 	bl	8009fd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a55c:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <__NVIC_SetPriorityGrouping+0x44>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a568:	4013      	ands	r3, r2
 800a56a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a57c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a57e:	4a04      	ldr	r2, [pc, #16]	; (800a590 <__NVIC_SetPriorityGrouping+0x44>)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	60d3      	str	r3, [r2, #12]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	e000ed00 	.word	0xe000ed00

0800a594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a598:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <__NVIC_GetPriorityGrouping+0x18>)
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	f003 0307 	and.w	r3, r3, #7
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	e000ed00 	.word	0xe000ed00

0800a5b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	db0b      	blt.n	800a5da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	f003 021f 	and.w	r2, r3, #31
 800a5c8:	4907      	ldr	r1, [pc, #28]	; (800a5e8 <__NVIC_EnableIRQ+0x38>)
 800a5ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ce:	095b      	lsrs	r3, r3, #5
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	fa00 f202 	lsl.w	r2, r0, r2
 800a5d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	e000e100 	.word	0xe000e100

0800a5ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	6039      	str	r1, [r7, #0]
 800a5f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	db0a      	blt.n	800a616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	b2da      	uxtb	r2, r3
 800a604:	490c      	ldr	r1, [pc, #48]	; (800a638 <__NVIC_SetPriority+0x4c>)
 800a606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a60a:	0112      	lsls	r2, r2, #4
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	440b      	add	r3, r1
 800a610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a614:	e00a      	b.n	800a62c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	4908      	ldr	r1, [pc, #32]	; (800a63c <__NVIC_SetPriority+0x50>)
 800a61c:	79fb      	ldrb	r3, [r7, #7]
 800a61e:	f003 030f 	and.w	r3, r3, #15
 800a622:	3b04      	subs	r3, #4
 800a624:	0112      	lsls	r2, r2, #4
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	440b      	add	r3, r1
 800a62a:	761a      	strb	r2, [r3, #24]
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	e000e100 	.word	0xe000e100
 800a63c:	e000ed00 	.word	0xe000ed00

0800a640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a640:	b480      	push	{r7}
 800a642:	b089      	sub	sp, #36	; 0x24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f003 0307 	and.w	r3, r3, #7
 800a652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	f1c3 0307 	rsb	r3, r3, #7
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	bf28      	it	cs
 800a65e:	2304      	movcs	r3, #4
 800a660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	3304      	adds	r3, #4
 800a666:	2b06      	cmp	r3, #6
 800a668:	d902      	bls.n	800a670 <NVIC_EncodePriority+0x30>
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	3b03      	subs	r3, #3
 800a66e:	e000      	b.n	800a672 <NVIC_EncodePriority+0x32>
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a674:	f04f 32ff 	mov.w	r2, #4294967295
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	fa02 f303 	lsl.w	r3, r2, r3
 800a67e:	43da      	mvns	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	401a      	ands	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a688:	f04f 31ff 	mov.w	r1, #4294967295
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	fa01 f303 	lsl.w	r3, r1, r3
 800a692:	43d9      	mvns	r1, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a698:	4313      	orrs	r3, r2
         );
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3724      	adds	r7, #36	; 0x24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6b8:	d301      	bcc.n	800a6be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e00f      	b.n	800a6de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a6be:	4a0a      	ldr	r2, [pc, #40]	; (800a6e8 <SysTick_Config+0x40>)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a6c6:	210f      	movs	r1, #15
 800a6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6cc:	f7ff ff8e 	bl	800a5ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a6d0:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <SysTick_Config+0x40>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a6d6:	4b04      	ldr	r3, [pc, #16]	; (800a6e8 <SysTick_Config+0x40>)
 800a6d8:	2207      	movs	r2, #7
 800a6da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	e000e010 	.word	0xe000e010

0800a6ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ff29 	bl	800a54c <__NVIC_SetPriorityGrouping>
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	4603      	mov	r3, r0
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a710:	2300      	movs	r3, #0
 800a712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a714:	f7ff ff3e 	bl	800a594 <__NVIC_GetPriorityGrouping>
 800a718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	6978      	ldr	r0, [r7, #20]
 800a720:	f7ff ff8e 	bl	800a640 <NVIC_EncodePriority>
 800a724:	4602      	mov	r2, r0
 800a726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff ff5d 	bl	800a5ec <__NVIC_SetPriority>
}
 800a732:	bf00      	nop
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	4603      	mov	r3, r0
 800a742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff ff31 	bl	800a5b0 <__NVIC_EnableIRQ>
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff ffa2 	bl	800a6a8 <SysTick_Config>
 800a764:	4603      	mov	r3, r0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a77c:	f7ff fab4 	bl	8009ce8 <HAL_GetTick>
 800a780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e099      	b.n	800a8c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0201 	bic.w	r2, r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7ac:	e00f      	b.n	800a7ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7ae:	f7ff fa9b 	bl	8009ce8 <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b05      	cmp	r3, #5
 800a7ba:	d908      	bls.n	800a7ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2203      	movs	r2, #3
 800a7c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e078      	b.n	800a8c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e8      	bne.n	800a7ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	4b38      	ldr	r3, [pc, #224]	; (800a8c8 <HAL_DMA_Init+0x158>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b04      	cmp	r3, #4
 800a826:	d107      	bne.n	800a838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a830:	4313      	orrs	r3, r2
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d117      	bne.n	800a892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00e      	beq.n	800a892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fa9d 	bl	800adb4 <DMA_CheckFifoParam>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d008      	beq.n	800a892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2240      	movs	r2, #64	; 0x40
 800a884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a88e:	2301      	movs	r3, #1
 800a890:	e016      	b.n	800a8c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fa54 	bl	800ad48 <DMA_CalcBaseAndBitshift>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a8:	223f      	movs	r2, #63	; 0x3f
 800a8aa:	409a      	lsls	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	f010803f 	.word	0xf010803f

0800a8cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_DMA_Start_IT+0x26>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e040      	b.n	800a974 <HAL_DMA_Start_IT+0xa8>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b01      	cmp	r3, #1
 800a904:	d12f      	bne.n	800a966 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2202      	movs	r2, #2
 800a90a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f9e6 	bl	800acec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a924:	223f      	movs	r2, #63	; 0x3f
 800a926:	409a      	lsls	r2, r3
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0216 	orr.w	r2, r2, #22
 800a93a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d007      	beq.n	800a954 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0208 	orr.w	r2, r2, #8
 800a952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	e005      	b.n	800a972 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a96e:	2302      	movs	r3, #2
 800a970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a972:	7dfb      	ldrb	r3, [r7, #23]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d004      	beq.n	800a99a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2280      	movs	r2, #128	; 0x80
 800a994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e00c      	b.n	800a9b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2205      	movs	r2, #5
 800a99e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a9cc:	4b92      	ldr	r3, [pc, #584]	; (800ac18 <HAL_DMA_IRQHandler+0x258>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a92      	ldr	r2, [pc, #584]	; (800ac1c <HAL_DMA_IRQHandler+0x25c>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	0a9b      	lsrs	r3, r3, #10
 800a9d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ea:	2208      	movs	r2, #8
 800a9ec:	409a      	lsls	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d01a      	beq.n	800aa2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d013      	beq.n	800aa2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 0204 	bic.w	r2, r2, #4
 800aa12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa18:	2208      	movs	r2, #8
 800aa1a:	409a      	lsls	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa24:	f043 0201 	orr.w	r2, r3, #1
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4013      	ands	r3, r2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d012      	beq.n	800aa62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00b      	beq.n	800aa62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa4e:	2201      	movs	r2, #1
 800aa50:	409a      	lsls	r2, r3
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5a:	f043 0202 	orr.w	r2, r3, #2
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa66:	2204      	movs	r2, #4
 800aa68:	409a      	lsls	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d012      	beq.n	800aa98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa84:	2204      	movs	r2, #4
 800aa86:	409a      	lsls	r2, r3
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa90:	f043 0204 	orr.w	r2, r3, #4
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa9c:	2210      	movs	r2, #16
 800aa9e:	409a      	lsls	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d043      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d03c      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaba:	2210      	movs	r2, #16
 800aabc:	409a      	lsls	r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d018      	beq.n	800ab02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d108      	bne.n	800aaf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d024      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	4798      	blx	r3
 800aaee:	e01f      	b.n	800ab30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01b      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
 800ab00:	e016      	b.n	800ab30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d107      	bne.n	800ab20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0208 	bic.w	r2, r2, #8
 800ab1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab34:	2220      	movs	r2, #32
 800ab36:	409a      	lsls	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 808e 	beq.w	800ac5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8086 	beq.w	800ac5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab56:	2220      	movs	r2, #32
 800ab58:	409a      	lsls	r2, r3
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d136      	bne.n	800abd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0216 	bic.w	r2, r2, #22
 800ab78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695a      	ldr	r2, [r3, #20]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d103      	bne.n	800ab9a <HAL_DMA_IRQHandler+0x1da>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0208 	bic.w	r2, r2, #8
 800aba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abae:	223f      	movs	r2, #63	; 0x3f
 800abb0:	409a      	lsls	r2, r3
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d07d      	beq.n	800acca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
        }
        return;
 800abd6:	e078      	b.n	800acca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d01c      	beq.n	800ac20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d108      	bne.n	800ac06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d030      	beq.n	800ac5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	4798      	blx	r3
 800ac04:	e02b      	b.n	800ac5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d027      	beq.n	800ac5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
 800ac16:	e022      	b.n	800ac5e <HAL_DMA_IRQHandler+0x29e>
 800ac18:	20000000 	.word	0x20000000
 800ac1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10f      	bne.n	800ac4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0210 	bic.w	r2, r2, #16
 800ac3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d032      	beq.n	800accc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d022      	beq.n	800acb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2205      	movs	r2, #5
 800ac76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0201 	bic.w	r2, r2, #1
 800ac88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d307      	bcc.n	800aca6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1f2      	bne.n	800ac8a <HAL_DMA_IRQHandler+0x2ca>
 800aca4:	e000      	b.n	800aca8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800aca6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	4798      	blx	r3
 800acc8:	e000      	b.n	800accc <HAL_DMA_IRQHandler+0x30c>
        return;
 800acca:	bf00      	nop
    }
  }
}
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop

0800acd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	2b40      	cmp	r3, #64	; 0x40
 800ad18:	d108      	bne.n	800ad2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad2a:	e007      	b.n	800ad3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	60da      	str	r2, [r3, #12]
}
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	3b10      	subs	r3, #16
 800ad58:	4a14      	ldr	r2, [pc, #80]	; (800adac <DMA_CalcBaseAndBitshift+0x64>)
 800ad5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5e:	091b      	lsrs	r3, r3, #4
 800ad60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad62:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <DMA_CalcBaseAndBitshift+0x68>)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d909      	bls.n	800ad8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	659a      	str	r2, [r3, #88]	; 0x58
 800ad88:	e007      	b.n	800ad9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad92:	f023 0303 	bic.w	r3, r3, #3
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	aaaaaaab 	.word	0xaaaaaaab
 800adb0:	08018f90 	.word	0x08018f90

0800adb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11f      	bne.n	800ae0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d855      	bhi.n	800ae80 <DMA_CheckFifoParam+0xcc>
 800add4:	a201      	add	r2, pc, #4	; (adr r2, 800addc <DMA_CheckFifoParam+0x28>)
 800add6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adda:	bf00      	nop
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800adff 	.word	0x0800adff
 800ade4:	0800aded 	.word	0x0800aded
 800ade8:	0800ae81 	.word	0x0800ae81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d045      	beq.n	800ae84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adfc:	e042      	b.n	800ae84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae06:	d13f      	bne.n	800ae88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae0c:	e03c      	b.n	800ae88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae16:	d121      	bne.n	800ae5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d836      	bhi.n	800ae8c <DMA_CheckFifoParam+0xd8>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <DMA_CheckFifoParam+0x70>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae3b 	.word	0x0800ae3b
 800ae2c:	0800ae35 	.word	0x0800ae35
 800ae30:	0800ae4d 	.word	0x0800ae4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	73fb      	strb	r3, [r7, #15]
      break;
 800ae38:	e02f      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d024      	beq.n	800ae90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae4a:	e021      	b.n	800ae90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae54:	d11e      	bne.n	800ae94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae5a:	e01b      	b.n	800ae94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d902      	bls.n	800ae68 <DMA_CheckFifoParam+0xb4>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d003      	beq.n	800ae6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae66:	e018      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6c:	e015      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00e      	beq.n	800ae98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7e:	e00b      	b.n	800ae98 <DMA_CheckFifoParam+0xe4>
      break;
 800ae80:	bf00      	nop
 800ae82:	e00a      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;
 800ae84:	bf00      	nop
 800ae86:	e008      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;
 800ae88:	bf00      	nop
 800ae8a:	e006      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;
 800ae8c:	bf00      	nop
 800ae8e:	e004      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;
 800ae90:	bf00      	nop
 800ae92:	e002      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;   
 800ae94:	bf00      	nop
 800ae96:	e000      	b.n	800ae9a <DMA_CheckFifoParam+0xe6>
      break;
 800ae98:	bf00      	nop
    }
  } 
  
  return status; 
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b089      	sub	sp, #36	; 0x24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aebe:	2300      	movs	r3, #0
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	e177      	b.n	800b1b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aec4:	2201      	movs	r2, #1
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	fa02 f303 	lsl.w	r3, r2, r3
 800aecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	4013      	ands	r3, r2
 800aed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	429a      	cmp	r2, r3
 800aede:	f040 8166 	bne.w	800b1ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d00b      	beq.n	800af02 <HAL_GPIO_Init+0x5a>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d007      	beq.n	800af02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aef6:	2b11      	cmp	r3, #17
 800aef8:	d003      	beq.n	800af02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b12      	cmp	r3, #18
 800af00:	d130      	bne.n	800af64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	2203      	movs	r2, #3
 800af0e:	fa02 f303 	lsl.w	r3, r2, r3
 800af12:	43db      	mvns	r3, r3
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	4013      	ands	r3, r2
 800af18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	fa02 f303 	lsl.w	r3, r2, r3
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	4313      	orrs	r3, r2
 800af2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af38:	2201      	movs	r2, #1
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	fa02 f303 	lsl.w	r3, r2, r3
 800af40:	43db      	mvns	r3, r3
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	4013      	ands	r3, r2
 800af46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	091b      	lsrs	r3, r3, #4
 800af4e:	f003 0201 	and.w	r2, r3, #1
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	2203      	movs	r2, #3
 800af70:	fa02 f303 	lsl.w	r3, r2, r3
 800af74:	43db      	mvns	r3, r3
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	4013      	ands	r3, r2
 800af7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d003      	beq.n	800afa4 <HAL_GPIO_Init+0xfc>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	2b12      	cmp	r3, #18
 800afa2:	d123      	bne.n	800afec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	08da      	lsrs	r2, r3, #3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3208      	adds	r2, #8
 800afac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	220f      	movs	r2, #15
 800afbc:	fa02 f303 	lsl.w	r3, r2, r3
 800afc0:	43db      	mvns	r3, r3
 800afc2:	69ba      	ldr	r2, [r7, #24]
 800afc4:	4013      	ands	r3, r2
 800afc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	691a      	ldr	r2, [r3, #16]
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	4313      	orrs	r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	08da      	lsrs	r2, r3, #3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3208      	adds	r2, #8
 800afe6:	69b9      	ldr	r1, [r7, #24]
 800afe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	2203      	movs	r2, #3
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	43db      	mvns	r3, r3
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	4013      	ands	r3, r2
 800b002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f003 0203 	and.w	r2, r3, #3
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	fa02 f303 	lsl.w	r3, r2, r3
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	4313      	orrs	r3, r2
 800b018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 80c0 	beq.w	800b1ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	4b65      	ldr	r3, [pc, #404]	; (800b1c8 <HAL_GPIO_Init+0x320>)
 800b034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b036:	4a64      	ldr	r2, [pc, #400]	; (800b1c8 <HAL_GPIO_Init+0x320>)
 800b038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b03c:	6453      	str	r3, [r2, #68]	; 0x44
 800b03e:	4b62      	ldr	r3, [pc, #392]	; (800b1c8 <HAL_GPIO_Init+0x320>)
 800b040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b04a:	4a60      	ldr	r2, [pc, #384]	; (800b1cc <HAL_GPIO_Init+0x324>)
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	089b      	lsrs	r3, r3, #2
 800b050:	3302      	adds	r3, #2
 800b052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	220f      	movs	r2, #15
 800b062:	fa02 f303 	lsl.w	r3, r2, r3
 800b066:	43db      	mvns	r3, r3
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	4013      	ands	r3, r2
 800b06c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a57      	ldr	r2, [pc, #348]	; (800b1d0 <HAL_GPIO_Init+0x328>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d037      	beq.n	800b0e6 <HAL_GPIO_Init+0x23e>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a56      	ldr	r2, [pc, #344]	; (800b1d4 <HAL_GPIO_Init+0x32c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d031      	beq.n	800b0e2 <HAL_GPIO_Init+0x23a>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a55      	ldr	r2, [pc, #340]	; (800b1d8 <HAL_GPIO_Init+0x330>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d02b      	beq.n	800b0de <HAL_GPIO_Init+0x236>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a54      	ldr	r2, [pc, #336]	; (800b1dc <HAL_GPIO_Init+0x334>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d025      	beq.n	800b0da <HAL_GPIO_Init+0x232>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a53      	ldr	r2, [pc, #332]	; (800b1e0 <HAL_GPIO_Init+0x338>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d01f      	beq.n	800b0d6 <HAL_GPIO_Init+0x22e>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a52      	ldr	r2, [pc, #328]	; (800b1e4 <HAL_GPIO_Init+0x33c>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d019      	beq.n	800b0d2 <HAL_GPIO_Init+0x22a>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a51      	ldr	r2, [pc, #324]	; (800b1e8 <HAL_GPIO_Init+0x340>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d013      	beq.n	800b0ce <HAL_GPIO_Init+0x226>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a50      	ldr	r2, [pc, #320]	; (800b1ec <HAL_GPIO_Init+0x344>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00d      	beq.n	800b0ca <HAL_GPIO_Init+0x222>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a4f      	ldr	r2, [pc, #316]	; (800b1f0 <HAL_GPIO_Init+0x348>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d007      	beq.n	800b0c6 <HAL_GPIO_Init+0x21e>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a4e      	ldr	r2, [pc, #312]	; (800b1f4 <HAL_GPIO_Init+0x34c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d101      	bne.n	800b0c2 <HAL_GPIO_Init+0x21a>
 800b0be:	2309      	movs	r3, #9
 800b0c0:	e012      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0c2:	230a      	movs	r3, #10
 800b0c4:	e010      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0c6:	2308      	movs	r3, #8
 800b0c8:	e00e      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0ca:	2307      	movs	r3, #7
 800b0cc:	e00c      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0ce:	2306      	movs	r3, #6
 800b0d0:	e00a      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0d2:	2305      	movs	r3, #5
 800b0d4:	e008      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0d6:	2304      	movs	r3, #4
 800b0d8:	e006      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e004      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	e002      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <HAL_GPIO_Init+0x240>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	69fa      	ldr	r2, [r7, #28]
 800b0ea:	f002 0203 	and.w	r2, r2, #3
 800b0ee:	0092      	lsls	r2, r2, #2
 800b0f0:	4093      	lsls	r3, r2
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0f8:	4934      	ldr	r1, [pc, #208]	; (800b1cc <HAL_GPIO_Init+0x324>)
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	089b      	lsrs	r3, r3, #2
 800b0fe:	3302      	adds	r3, #2
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b106:	4b3c      	ldr	r3, [pc, #240]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	43db      	mvns	r3, r3
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	4013      	ands	r3, r2
 800b114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	4313      	orrs	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b12a:	4a33      	ldr	r2, [pc, #204]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b130:	4b31      	ldr	r3, [pc, #196]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	43db      	mvns	r3, r3
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4013      	ands	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b154:	4a28      	ldr	r2, [pc, #160]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b15a:	4b27      	ldr	r3, [pc, #156]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	43db      	mvns	r3, r3
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	4013      	ands	r3, r2
 800b168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b17e:	4a1e      	ldr	r2, [pc, #120]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b184:	4b1c      	ldr	r3, [pc, #112]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	43db      	mvns	r3, r3
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	4013      	ands	r3, r2
 800b192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1a8:	4a13      	ldr	r2, [pc, #76]	; (800b1f8 <HAL_GPIO_Init+0x350>)
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	2b0f      	cmp	r3, #15
 800b1b8:	f67f ae84 	bls.w	800aec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3724      	adds	r7, #36	; 0x24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	40023800 	.word	0x40023800
 800b1cc:	40013800 	.word	0x40013800
 800b1d0:	40020000 	.word	0x40020000
 800b1d4:	40020400 	.word	0x40020400
 800b1d8:	40020800 	.word	0x40020800
 800b1dc:	40020c00 	.word	0x40020c00
 800b1e0:	40021000 	.word	0x40021000
 800b1e4:	40021400 	.word	0x40021400
 800b1e8:	40021800 	.word	0x40021800
 800b1ec:	40021c00 	.word	0x40021c00
 800b1f0:	40022000 	.word	0x40022000
 800b1f4:	40022400 	.word	0x40022400
 800b1f8:	40013c00 	.word	0x40013c00

0800b1fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691a      	ldr	r2, [r3, #16]
 800b20c:	887b      	ldrh	r3, [r7, #2]
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b214:	2301      	movs	r3, #1
 800b216:	73fb      	strb	r3, [r7, #15]
 800b218:	e001      	b.n	800b21e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	807b      	strh	r3, [r7, #2]
 800b238:	4613      	mov	r3, r2
 800b23a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b23c:	787b      	ldrb	r3, [r7, #1]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b242:	887a      	ldrh	r2, [r7, #2]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b248:	e003      	b.n	800b252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b24a:	887b      	ldrh	r3, [r7, #2]
 800b24c:	041a      	lsls	r2, r3, #16
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	619a      	str	r2, [r3, #24]
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b26c:	695a      	ldr	r2, [r3, #20]
 800b26e:	88fb      	ldrh	r3, [r7, #6]
 800b270:	4013      	ands	r3, r2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d006      	beq.n	800b284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b276:	4a05      	ldr	r2, [pc, #20]	; (800b28c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fa fd91 	bl	8005da6 <HAL_GPIO_EXTI_Callback>
  }
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	40013c00 	.word	0x40013c00

0800b290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e11f      	b.n	800b4e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7fb fdf0 	bl	8006e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2224      	movs	r2, #36	; 0x24
 800b2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0201 	bic.w	r2, r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b2f4:	f001 f96e 	bl	800c5d4 <HAL_RCC_GetPCLK1Freq>
 800b2f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4a7b      	ldr	r2, [pc, #492]	; (800b4ec <HAL_I2C_Init+0x25c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d807      	bhi.n	800b314 <HAL_I2C_Init+0x84>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4a7a      	ldr	r2, [pc, #488]	; (800b4f0 <HAL_I2C_Init+0x260>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	bf94      	ite	ls
 800b30c:	2301      	movls	r3, #1
 800b30e:	2300      	movhi	r3, #0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	e006      	b.n	800b322 <HAL_I2C_Init+0x92>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4a77      	ldr	r2, [pc, #476]	; (800b4f4 <HAL_I2C_Init+0x264>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	bf94      	ite	ls
 800b31c:	2301      	movls	r3, #1
 800b31e:	2300      	movhi	r3, #0
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e0db      	b.n	800b4e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	4a72      	ldr	r2, [pc, #456]	; (800b4f8 <HAL_I2C_Init+0x268>)
 800b32e:	fba2 2303 	umull	r2, r3, r2, r3
 800b332:	0c9b      	lsrs	r3, r3, #18
 800b334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	430a      	orrs	r2, r1
 800b348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4a64      	ldr	r2, [pc, #400]	; (800b4ec <HAL_I2C_Init+0x25c>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d802      	bhi.n	800b364 <HAL_I2C_Init+0xd4>
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	3301      	adds	r3, #1
 800b362:	e009      	b.n	800b378 <HAL_I2C_Init+0xe8>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
 800b36e:	4a63      	ldr	r2, [pc, #396]	; (800b4fc <HAL_I2C_Init+0x26c>)
 800b370:	fba2 2303 	umull	r2, r3, r2, r3
 800b374:	099b      	lsrs	r3, r3, #6
 800b376:	3301      	adds	r3, #1
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	430b      	orrs	r3, r1
 800b37e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b38a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	4956      	ldr	r1, [pc, #344]	; (800b4ec <HAL_I2C_Init+0x25c>)
 800b394:	428b      	cmp	r3, r1
 800b396:	d80d      	bhi.n	800b3b4 <HAL_I2C_Init+0x124>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	1e59      	subs	r1, r3, #1
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	bf38      	it	cc
 800b3b0:	2304      	movcc	r3, #4
 800b3b2:	e04f      	b.n	800b454 <HAL_I2C_Init+0x1c4>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d111      	bne.n	800b3e0 <HAL_I2C_Init+0x150>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	1e58      	subs	r0, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6859      	ldr	r1, [r3, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	440b      	add	r3, r1
 800b3ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bf0c      	ite	eq
 800b3d8:	2301      	moveq	r3, #1
 800b3da:	2300      	movne	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	e012      	b.n	800b406 <HAL_I2C_Init+0x176>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	1e58      	subs	r0, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6859      	ldr	r1, [r3, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	0099      	lsls	r1, r3, #2
 800b3f0:	440b      	add	r3, r1
 800b3f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	bf0c      	ite	eq
 800b400:	2301      	moveq	r3, #1
 800b402:	2300      	movne	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <HAL_I2C_Init+0x17e>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e022      	b.n	800b454 <HAL_I2C_Init+0x1c4>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10e      	bne.n	800b434 <HAL_I2C_Init+0x1a4>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	1e58      	subs	r0, r3, #1
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6859      	ldr	r1, [r3, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	440b      	add	r3, r1
 800b424:	fbb0 f3f3 	udiv	r3, r0, r3
 800b428:	3301      	adds	r3, #1
 800b42a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b42e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b432:	e00f      	b.n	800b454 <HAL_I2C_Init+0x1c4>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	1e58      	subs	r0, r3, #1
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6859      	ldr	r1, [r3, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	0099      	lsls	r1, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	fbb0 f3f3 	udiv	r3, r0, r3
 800b44a:	3301      	adds	r3, #1
 800b44c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b454:	6879      	ldr	r1, [r7, #4]
 800b456:	6809      	ldr	r1, [r1, #0]
 800b458:	4313      	orrs	r3, r2
 800b45a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	69da      	ldr	r2, [r3, #28]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	431a      	orrs	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b482:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	6911      	ldr	r1, [r2, #16]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68d2      	ldr	r2, [r2, #12]
 800b48e:	4311      	orrs	r1, r2
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	6812      	ldr	r2, [r2, #0]
 800b494:	430b      	orrs	r3, r1
 800b496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	695a      	ldr	r2, [r3, #20]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f042 0201 	orr.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2220      	movs	r2, #32
 800b4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	000186a0 	.word	0x000186a0
 800b4f0:	001e847f 	.word	0x001e847f
 800b4f4:	003d08ff 	.word	0x003d08ff
 800b4f8:	431bde83 	.word	0x431bde83
 800b4fc:	10624dd3 	.word	0x10624dd3

0800b500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	461a      	mov	r2, r3
 800b50c:	460b      	mov	r3, r1
 800b50e:	817b      	strh	r3, [r7, #10]
 800b510:	4613      	mov	r3, r2
 800b512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b514:	f7fe fbe8 	bl	8009ce8 <HAL_GetTick>
 800b518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b20      	cmp	r3, #32
 800b524:	f040 80e0 	bne.w	800b6e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	2319      	movs	r3, #25
 800b52e:	2201      	movs	r2, #1
 800b530:	4970      	ldr	r1, [pc, #448]	; (800b6f4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 fc58 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b53e:	2302      	movs	r3, #2
 800b540:	e0d3      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d101      	bne.n	800b550 <HAL_I2C_Master_Transmit+0x50>
 800b54c:	2302      	movs	r3, #2
 800b54e:	e0cc      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b01      	cmp	r3, #1
 800b564:	d007      	beq.n	800b576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f042 0201 	orr.w	r2, r2, #1
 800b574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2221      	movs	r2, #33	; 0x21
 800b58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2210      	movs	r2, #16
 800b592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	893a      	ldrh	r2, [r7, #8]
 800b5a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4a50      	ldr	r2, [pc, #320]	; (800b6f8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b5b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b5b8:	8979      	ldrh	r1, [r7, #10]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	6a3a      	ldr	r2, [r7, #32]
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f000 fac2 	bl	800bb48 <I2C_MasterRequestWrite>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e08d      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	613b      	str	r3, [r7, #16]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	613b      	str	r3, [r7, #16]
 800b5e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b5e4:	e066      	b.n	800b6b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	6a39      	ldr	r1, [r7, #32]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 fcd2 	bl	800bf94 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00d      	beq.n	800b612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	2b04      	cmp	r3, #4
 800b5fc:	d107      	bne.n	800b60e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b60c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e06b      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	781a      	ldrb	r2, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	3b01      	subs	r3, #1
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d11b      	bne.n	800b688 <HAL_I2C_Master_Transmit+0x188>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d017      	beq.n	800b688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	781a      	ldrb	r2, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b672:	b29b      	uxth	r3, r3
 800b674:	3b01      	subs	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b680:	3b01      	subs	r3, #1
 800b682:	b29a      	uxth	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	6a39      	ldr	r1, [r7, #32]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 fcc2 	bl	800c016 <I2C_WaitOnBTFFlagUntilTimeout>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00d      	beq.n	800b6b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d107      	bne.n	800b6b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e01a      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d194      	bne.n	800b5e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e000      	b.n	800b6ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b6e8:	2302      	movs	r3, #2
  }
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	00100002 	.word	0x00100002
 800b6f8:	ffff0000 	.word	0xffff0000

0800b6fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08c      	sub	sp, #48	; 0x30
 800b700:	af02      	add	r7, sp, #8
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	461a      	mov	r2, r3
 800b708:	460b      	mov	r3, r1
 800b70a:	817b      	strh	r3, [r7, #10]
 800b70c:	4613      	mov	r3, r2
 800b70e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b710:	f7fe faea 	bl	8009ce8 <HAL_GetTick>
 800b714:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b20      	cmp	r3, #32
 800b720:	f040 820b 	bne.w	800bb3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	2319      	movs	r3, #25
 800b72a:	2201      	movs	r2, #1
 800b72c:	497c      	ldr	r1, [pc, #496]	; (800b920 <HAL_I2C_Master_Receive+0x224>)
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 fb5a 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b73a:	2302      	movs	r3, #2
 800b73c:	e1fe      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b744:	2b01      	cmp	r3, #1
 800b746:	d101      	bne.n	800b74c <HAL_I2C_Master_Receive+0x50>
 800b748:	2302      	movs	r3, #2
 800b74a:	e1f7      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d007      	beq.n	800b772 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0201 	orr.w	r2, r2, #1
 800b770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2222      	movs	r2, #34	; 0x22
 800b786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2210      	movs	r2, #16
 800b78e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	893a      	ldrh	r2, [r7, #8]
 800b7a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4a5c      	ldr	r2, [pc, #368]	; (800b924 <HAL_I2C_Master_Receive+0x228>)
 800b7b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7b4:	8979      	ldrh	r1, [r7, #10]
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 fa46 	bl	800bc4c <I2C_MasterRequestRead>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e1b8      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d113      	bne.n	800b7fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	623b      	str	r3, [r7, #32]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	623b      	str	r3, [r7, #32]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	623b      	str	r3, [r7, #32]
 800b7e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	e18c      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d11b      	bne.n	800b83a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b812:	2300      	movs	r3, #0
 800b814:	61fb      	str	r3, [r7, #28]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	61fb      	str	r3, [r7, #28]
 800b826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	e16c      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d11b      	bne.n	800b87a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b862:	2300      	movs	r3, #0
 800b864:	61bb      	str	r3, [r7, #24]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	61bb      	str	r3, [r7, #24]
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	e14c      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8a0:	e138      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	f200 80f1 	bhi.w	800ba8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d123      	bne.n	800b8fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 fbed 	bl	800c098 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e139      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	691a      	ldr	r2, [r3, #16]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8fa:	e10b      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b900:	2b02      	cmp	r3, #2
 800b902:	d14e      	bne.n	800b9a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	2200      	movs	r2, #0
 800b90c:	4906      	ldr	r1, [pc, #24]	; (800b928 <HAL_I2C_Master_Receive+0x22c>)
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 fa6a 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e10e      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
 800b91e:	bf00      	nop
 800b920:	00100002 	.word	0x00100002
 800b924:	ffff0000 	.word	0xffff0000
 800b928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	691a      	ldr	r2, [r3, #16]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	b2d2      	uxtb	r2, r2
 800b948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b958:	3b01      	subs	r3, #1
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b964:	b29b      	uxth	r3, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	b29a      	uxth	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	691a      	ldr	r2, [r3, #16]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	b2d2      	uxtb	r2, r2
 800b97a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b996:	b29b      	uxth	r3, r3
 800b998:	3b01      	subs	r3, #1
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9a0:	e0b8      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4966      	ldr	r1, [pc, #408]	; (800bb44 <HAL_I2C_Master_Receive+0x448>)
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fa1b 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e0bf      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	b2d2      	uxtb	r2, r2
 800b9d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	2200      	movs	r2, #0
 800ba06:	494f      	ldr	r1, [pc, #316]	; (800bb44 <HAL_I2C_Master_Receive+0x448>)
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f9ed 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e091      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691a      	ldr	r2, [r3, #16]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	3b01      	subs	r3, #1
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	691a      	ldr	r2, [r3, #16]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	b2d2      	uxtb	r2, r2
 800ba66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba76:	3b01      	subs	r3, #1
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	3b01      	subs	r3, #1
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba8c:	e042      	b.n	800bb14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f000 fb00 	bl	800c098 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e04c      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baca:	b29b      	uxth	r3, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b04      	cmp	r3, #4
 800bae0:	d118      	bne.n	800bb14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	691a      	ldr	r2, [r3, #16]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	b2d2      	uxtb	r2, r2
 800baee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	1c5a      	adds	r2, r3, #1
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bafe:	3b01      	subs	r3, #1
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f47f aec2 	bne.w	800b8a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e000      	b.n	800bb3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb3a:	2302      	movs	r3, #2
  }
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3728      	adds	r7, #40	; 0x28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	00010004 	.word	0x00010004

0800bb48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	607a      	str	r2, [r7, #4]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	460b      	mov	r3, r1
 800bb56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d006      	beq.n	800bb72 <I2C_MasterRequestWrite+0x2a>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d003      	beq.n	800bb72 <I2C_MasterRequestWrite+0x2a>
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb70:	d108      	bne.n	800bb84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	e00b      	b.n	800bb9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb88:	2b12      	cmp	r3, #18
 800bb8a:	d107      	bne.n	800bb9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f91d 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00d      	beq.n	800bbd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbc2:	d103      	bne.n	800bbcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e035      	b.n	800bc3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd8:	d108      	bne.n	800bbec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bbda:	897b      	ldrh	r3, [r7, #10]
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	461a      	mov	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bbe8:	611a      	str	r2, [r3, #16]
 800bbea:	e01b      	b.n	800bc24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bbec:	897b      	ldrh	r3, [r7, #10]
 800bbee:	11db      	asrs	r3, r3, #7
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	f003 0306 	and.w	r3, r3, #6
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	f063 030f 	orn	r3, r3, #15
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	490e      	ldr	r1, [pc, #56]	; (800bc44 <I2C_MasterRequestWrite+0xfc>)
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f943 	bl	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e010      	b.n	800bc3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc1a:	897b      	ldrh	r3, [r7, #10]
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	4907      	ldr	r1, [pc, #28]	; (800bc48 <I2C_MasterRequestWrite+0x100>)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f933 	bl	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e000      	b.n	800bc3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	00010008 	.word	0x00010008
 800bc48:	00010002 	.word	0x00010002

0800bc4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	607a      	str	r2, [r7, #4]
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d006      	beq.n	800bc86 <I2C_MasterRequestRead+0x3a>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d003      	beq.n	800bc86 <I2C_MasterRequestRead+0x3a>
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc84:	d108      	bne.n	800bc98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e00b      	b.n	800bcb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	2b11      	cmp	r3, #17
 800bc9e:	d107      	bne.n	800bcb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f893 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00d      	beq.n	800bce4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd6:	d103      	bne.n	800bce0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e079      	b.n	800bdd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcec:	d108      	bne.n	800bd00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bcee:	897b      	ldrh	r3, [r7, #10]
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	f043 0301 	orr.w	r3, r3, #1
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	611a      	str	r2, [r3, #16]
 800bcfe:	e05f      	b.n	800bdc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd00:	897b      	ldrh	r3, [r7, #10]
 800bd02:	11db      	asrs	r3, r3, #7
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	f003 0306 	and.w	r3, r3, #6
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f063 030f 	orn	r3, r3, #15
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4930      	ldr	r1, [pc, #192]	; (800bde0 <I2C_MasterRequestRead+0x194>)
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f8b9 	bl	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e054      	b.n	800bdd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd2e:	897b      	ldrh	r3, [r7, #10]
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4929      	ldr	r1, [pc, #164]	; (800bde4 <I2C_MasterRequestRead+0x198>)
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 f8a9 	bl	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e044      	b.n	800bdd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	613b      	str	r3, [r7, #16]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f831 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00d      	beq.n	800bda8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd9a:	d103      	bne.n	800bda4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bda2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bda4:	2303      	movs	r3, #3
 800bda6:	e017      	b.n	800bdd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bda8:	897b      	ldrh	r3, [r7, #10]
 800bdaa:	11db      	asrs	r3, r3, #7
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 0306 	and.w	r3, r3, #6
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f063 030e 	orn	r3, r3, #14
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	4907      	ldr	r1, [pc, #28]	; (800bde4 <I2C_MasterRequestRead+0x198>)
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f865 	bl	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	00010008 	.word	0x00010008
 800bde4:	00010002 	.word	0x00010002

0800bde8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdf8:	e025      	b.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be00:	d021      	beq.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be02:	f7fd ff71 	bl	8009ce8 <HAL_GetTick>
 800be06:	4602      	mov	r2, r0
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d302      	bcc.n	800be18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d116      	bne.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2220      	movs	r2, #32
 800be22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	f043 0220 	orr.w	r2, r3, #32
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e023      	b.n	800be8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	0c1b      	lsrs	r3, r3, #16
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10d      	bne.n	800be6c <I2C_WaitOnFlagUntilTimeout+0x84>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	43da      	mvns	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4013      	ands	r3, r2
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bf0c      	ite	eq
 800be62:	2301      	moveq	r3, #1
 800be64:	2300      	movne	r3, #0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	e00c      	b.n	800be86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	43da      	mvns	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	4013      	ands	r3, r2
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf0c      	ite	eq
 800be7e:	2301      	moveq	r3, #1
 800be80:	2300      	movne	r3, #0
 800be82:	b2db      	uxtb	r3, r3
 800be84:	461a      	mov	r2, r3
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d0b6      	beq.n	800bdfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bea4:	e051      	b.n	800bf4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beb4:	d123      	bne.n	800befe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bec4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bece:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2220      	movs	r2, #32
 800beda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	f043 0204 	orr.w	r2, r3, #4
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e046      	b.n	800bf8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d021      	beq.n	800bf4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf06:	f7fd feef 	bl	8009ce8 <HAL_GetTick>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d302      	bcc.n	800bf1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d116      	bne.n	800bf4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	f043 0220 	orr.w	r2, r3, #32
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e020      	b.n	800bf8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	0c1b      	lsrs	r3, r3, #16
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d10c      	bne.n	800bf6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	43da      	mvns	r2, r3
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bf14      	ite	ne
 800bf66:	2301      	movne	r3, #1
 800bf68:	2300      	moveq	r3, #0
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	e00b      	b.n	800bf86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	43da      	mvns	r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	4013      	ands	r3, r2
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bf14      	ite	ne
 800bf80:	2301      	movne	r3, #1
 800bf82:	2300      	moveq	r3, #0
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d18d      	bne.n	800bea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfa0:	e02d      	b.n	800bffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 f8ce 	bl	800c144 <I2C_IsAcknowledgeFailed>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e02d      	b.n	800c00e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb8:	d021      	beq.n	800bffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfba:	f7fd fe95 	bl	8009ce8 <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d302      	bcc.n	800bfd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d116      	bne.n	800bffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfea:	f043 0220 	orr.w	r2, r3, #32
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e007      	b.n	800c00e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c008:	2b80      	cmp	r3, #128	; 0x80
 800c00a:	d1ca      	bne.n	800bfa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c022:	e02d      	b.n	800c080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f88d 	bl	800c144 <I2C_IsAcknowledgeFailed>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e02d      	b.n	800c090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03a:	d021      	beq.n	800c080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c03c:	f7fd fe54 	bl	8009ce8 <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d302      	bcc.n	800c052 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d116      	bne.n	800c080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06c:	f043 0220 	orr.w	r2, r3, #32
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e007      	b.n	800c090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	d1ca      	bne.n	800c024 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0a4:	e042      	b.n	800c12c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	f003 0310 	and.w	r3, r3, #16
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d119      	bne.n	800c0e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f06f 0210 	mvn.w	r2, #16
 800c0bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e029      	b.n	800c13c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e8:	f7fd fdfe 	bl	8009ce8 <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d302      	bcc.n	800c0fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d116      	bne.n	800c12c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2220      	movs	r2, #32
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c118:	f043 0220 	orr.w	r2, r3, #32
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e007      	b.n	800c13c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	d1b5      	bne.n	800c0a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c15a:	d11b      	bne.n	800c194 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c164:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2220      	movs	r2, #32
 800c170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c180:	f043 0204 	orr.w	r2, r3, #4
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e000      	b.n	800c196 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	603b      	str	r3, [r7, #0]
 800c1b2:	4b20      	ldr	r3, [pc, #128]	; (800c234 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	4a1f      	ldr	r2, [pc, #124]	; (800c234 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1bc:	6413      	str	r3, [r2, #64]	; 0x40
 800c1be:	4b1d      	ldr	r3, [pc, #116]	; (800c234 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c1ca:	4b1b      	ldr	r3, [pc, #108]	; (800c238 <HAL_PWREx_EnableOverDrive+0x94>)
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1d0:	f7fd fd8a 	bl	8009ce8 <HAL_GetTick>
 800c1d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c1d6:	e009      	b.n	800c1ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c1d8:	f7fd fd86 	bl	8009ce8 <HAL_GetTick>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1e6:	d901      	bls.n	800c1ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e01f      	b.n	800c22c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c1ec:	4b13      	ldr	r3, [pc, #76]	; (800c23c <HAL_PWREx_EnableOverDrive+0x98>)
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f8:	d1ee      	bne.n	800c1d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c1fa:	4b11      	ldr	r3, [pc, #68]	; (800c240 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c200:	f7fd fd72 	bl	8009ce8 <HAL_GetTick>
 800c204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c206:	e009      	b.n	800c21c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c208:	f7fd fd6e 	bl	8009ce8 <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c216:	d901      	bls.n	800c21c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e007      	b.n	800c22c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c21c:	4b07      	ldr	r3, [pc, #28]	; (800c23c <HAL_PWREx_EnableOverDrive+0x98>)
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c228:	d1ee      	bne.n	800c208 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	40023800 	.word	0x40023800
 800c238:	420e0040 	.word	0x420e0040
 800c23c:	40007000 	.word	0x40007000
 800c240:	420e0044 	.word	0x420e0044

0800c244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e0cc      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c258:	4b68      	ldr	r3, [pc, #416]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 030f 	and.w	r3, r3, #15
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d90c      	bls.n	800c280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c266:	4b65      	ldr	r3, [pc, #404]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c26e:	4b63      	ldr	r3, [pc, #396]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d001      	beq.n	800c280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e0b8      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d020      	beq.n	800c2ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c298:	4b59      	ldr	r3, [pc, #356]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	4a58      	ldr	r2, [pc, #352]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c29e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 0308 	and.w	r3, r3, #8
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2b0:	4b53      	ldr	r3, [pc, #332]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	4a52      	ldr	r2, [pc, #328]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c2ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2bc:	4b50      	ldr	r3, [pc, #320]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	494d      	ldr	r1, [pc, #308]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d044      	beq.n	800c364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d107      	bne.n	800c2f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2e2:	4b47      	ldr	r3, [pc, #284]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d119      	bne.n	800c322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e07f      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d003      	beq.n	800c302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d107      	bne.n	800c312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c302:	4b3f      	ldr	r3, [pc, #252]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d109      	bne.n	800c322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e06f      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c312:	4b3b      	ldr	r3, [pc, #236]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e067      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c322:	4b37      	ldr	r3, [pc, #220]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f023 0203 	bic.w	r2, r3, #3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	4934      	ldr	r1, [pc, #208]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c330:	4313      	orrs	r3, r2
 800c332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c334:	f7fd fcd8 	bl	8009ce8 <HAL_GetTick>
 800c338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c33a:	e00a      	b.n	800c352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c33c:	f7fd fcd4 	bl	8009ce8 <HAL_GetTick>
 800c340:	4602      	mov	r2, r0
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	f241 3288 	movw	r2, #5000	; 0x1388
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d901      	bls.n	800c352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e04f      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c352:	4b2b      	ldr	r3, [pc, #172]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 020c 	and.w	r2, r3, #12
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	429a      	cmp	r2, r3
 800c362:	d1eb      	bne.n	800c33c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 030f 	and.w	r3, r3, #15
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d20c      	bcs.n	800c38c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c372:	4b22      	ldr	r3, [pc, #136]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	b2d2      	uxtb	r2, r2
 800c378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c37a:	4b20      	ldr	r3, [pc, #128]	; (800c3fc <HAL_RCC_ClockConfig+0x1b8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 030f 	and.w	r3, r3, #15
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	429a      	cmp	r2, r3
 800c386:	d001      	beq.n	800c38c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e032      	b.n	800c3f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 0304 	and.w	r3, r3, #4
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c398:	4b19      	ldr	r3, [pc, #100]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	4916      	ldr	r1, [pc, #88]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0308 	and.w	r3, r3, #8
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d009      	beq.n	800c3ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3b6:	4b12      	ldr	r3, [pc, #72]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	490e      	ldr	r1, [pc, #56]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c3ca:	f000 f821 	bl	800c410 <HAL_RCC_GetSysClockFreq>
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <HAL_RCC_ClockConfig+0x1bc>)
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	091b      	lsrs	r3, r3, #4
 800c3d6:	f003 030f 	and.w	r3, r3, #15
 800c3da:	4a0a      	ldr	r2, [pc, #40]	; (800c404 <HAL_RCC_ClockConfig+0x1c0>)
 800c3dc:	5cd3      	ldrb	r3, [r2, r3]
 800c3de:	fa21 f303 	lsr.w	r3, r1, r3
 800c3e2:	4a09      	ldr	r2, [pc, #36]	; (800c408 <HAL_RCC_ClockConfig+0x1c4>)
 800c3e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <HAL_RCC_ClockConfig+0x1c8>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fd fc38 	bl	8009c60 <HAL_InitTick>

  return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	40023c00 	.word	0x40023c00
 800c400:	40023800 	.word	0x40023800
 800c404:	08018f78 	.word	0x08018f78
 800c408:	20000000 	.word	0x20000000
 800c40c:	20000004 	.word	0x20000004

0800c410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	607b      	str	r3, [r7, #4]
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	2300      	movs	r3, #0
 800c420:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c422:	2300      	movs	r3, #0
 800c424:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c426:	4b63      	ldr	r3, [pc, #396]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f003 030c 	and.w	r3, r3, #12
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d007      	beq.n	800c442 <HAL_RCC_GetSysClockFreq+0x32>
 800c432:	2b08      	cmp	r3, #8
 800c434:	d008      	beq.n	800c448 <HAL_RCC_GetSysClockFreq+0x38>
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 80b4 	bne.w	800c5a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c43c:	4b5e      	ldr	r3, [pc, #376]	; (800c5b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c43e:	60bb      	str	r3, [r7, #8]
       break;
 800c440:	e0b3      	b.n	800c5aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c442:	4b5d      	ldr	r3, [pc, #372]	; (800c5b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c444:	60bb      	str	r3, [r7, #8]
      break;
 800c446:	e0b0      	b.n	800c5aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c448:	4b5a      	ldr	r3, [pc, #360]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c450:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c452:	4b58      	ldr	r3, [pc, #352]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d04a      	beq.n	800c4f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c45e:	4b55      	ldr	r3, [pc, #340]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	099b      	lsrs	r3, r3, #6
 800c464:	f04f 0400 	mov.w	r4, #0
 800c468:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	ea03 0501 	and.w	r5, r3, r1
 800c474:	ea04 0602 	and.w	r6, r4, r2
 800c478:	4629      	mov	r1, r5
 800c47a:	4632      	mov	r2, r6
 800c47c:	f04f 0300 	mov.w	r3, #0
 800c480:	f04f 0400 	mov.w	r4, #0
 800c484:	0154      	lsls	r4, r2, #5
 800c486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c48a:	014b      	lsls	r3, r1, #5
 800c48c:	4619      	mov	r1, r3
 800c48e:	4622      	mov	r2, r4
 800c490:	1b49      	subs	r1, r1, r5
 800c492:	eb62 0206 	sbc.w	r2, r2, r6
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	f04f 0400 	mov.w	r4, #0
 800c49e:	0194      	lsls	r4, r2, #6
 800c4a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4a4:	018b      	lsls	r3, r1, #6
 800c4a6:	1a5b      	subs	r3, r3, r1
 800c4a8:	eb64 0402 	sbc.w	r4, r4, r2
 800c4ac:	f04f 0100 	mov.w	r1, #0
 800c4b0:	f04f 0200 	mov.w	r2, #0
 800c4b4:	00e2      	lsls	r2, r4, #3
 800c4b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c4ba:	00d9      	lsls	r1, r3, #3
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4614      	mov	r4, r2
 800c4c0:	195b      	adds	r3, r3, r5
 800c4c2:	eb44 0406 	adc.w	r4, r4, r6
 800c4c6:	f04f 0100 	mov.w	r1, #0
 800c4ca:	f04f 0200 	mov.w	r2, #0
 800c4ce:	02a2      	lsls	r2, r4, #10
 800c4d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c4d4:	0299      	lsls	r1, r3, #10
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4614      	mov	r4, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	4621      	mov	r1, r4
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f04f 0400 	mov.w	r4, #0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4623      	mov	r3, r4
 800c4e8:	f7f4 fbe6 	bl	8000cb8 <__aeabi_uldivmod>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e049      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4f4:	4b2f      	ldr	r3, [pc, #188]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	099b      	lsrs	r3, r3, #6
 800c4fa:	f04f 0400 	mov.w	r4, #0
 800c4fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	ea03 0501 	and.w	r5, r3, r1
 800c50a:	ea04 0602 	and.w	r6, r4, r2
 800c50e:	4629      	mov	r1, r5
 800c510:	4632      	mov	r2, r6
 800c512:	f04f 0300 	mov.w	r3, #0
 800c516:	f04f 0400 	mov.w	r4, #0
 800c51a:	0154      	lsls	r4, r2, #5
 800c51c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c520:	014b      	lsls	r3, r1, #5
 800c522:	4619      	mov	r1, r3
 800c524:	4622      	mov	r2, r4
 800c526:	1b49      	subs	r1, r1, r5
 800c528:	eb62 0206 	sbc.w	r2, r2, r6
 800c52c:	f04f 0300 	mov.w	r3, #0
 800c530:	f04f 0400 	mov.w	r4, #0
 800c534:	0194      	lsls	r4, r2, #6
 800c536:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c53a:	018b      	lsls	r3, r1, #6
 800c53c:	1a5b      	subs	r3, r3, r1
 800c53e:	eb64 0402 	sbc.w	r4, r4, r2
 800c542:	f04f 0100 	mov.w	r1, #0
 800c546:	f04f 0200 	mov.w	r2, #0
 800c54a:	00e2      	lsls	r2, r4, #3
 800c54c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c550:	00d9      	lsls	r1, r3, #3
 800c552:	460b      	mov	r3, r1
 800c554:	4614      	mov	r4, r2
 800c556:	195b      	adds	r3, r3, r5
 800c558:	eb44 0406 	adc.w	r4, r4, r6
 800c55c:	f04f 0100 	mov.w	r1, #0
 800c560:	f04f 0200 	mov.w	r2, #0
 800c564:	02a2      	lsls	r2, r4, #10
 800c566:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c56a:	0299      	lsls	r1, r3, #10
 800c56c:	460b      	mov	r3, r1
 800c56e:	4614      	mov	r4, r2
 800c570:	4618      	mov	r0, r3
 800c572:	4621      	mov	r1, r4
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f04f 0400 	mov.w	r4, #0
 800c57a:	461a      	mov	r2, r3
 800c57c:	4623      	mov	r3, r4
 800c57e:	f7f4 fb9b 	bl	8000cb8 <__aeabi_uldivmod>
 800c582:	4603      	mov	r3, r0
 800c584:	460c      	mov	r4, r1
 800c586:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c588:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	0c1b      	lsrs	r3, r3, #16
 800c58e:	f003 0303 	and.w	r3, r3, #3
 800c592:	3301      	adds	r3, #1
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a0:	60bb      	str	r3, [r7, #8]
      break;
 800c5a2:	e002      	b.n	800c5aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5a4:	4b04      	ldr	r3, [pc, #16]	; (800c5b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5a6:	60bb      	str	r3, [r7, #8]
      break;
 800c5a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b4:	40023800 	.word	0x40023800
 800c5b8:	00f42400 	.word	0x00f42400

0800c5bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5c0:	4b03      	ldr	r3, [pc, #12]	; (800c5d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	20000000 	.word	0x20000000

0800c5d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c5d8:	f7ff fff0 	bl	800c5bc <HAL_RCC_GetHCLKFreq>
 800c5dc:	4601      	mov	r1, r0
 800c5de:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	0a9b      	lsrs	r3, r3, #10
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	4a03      	ldr	r2, [pc, #12]	; (800c5f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5ea:	5cd3      	ldrb	r3, [r2, r3]
 800c5ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	40023800 	.word	0x40023800
 800c5f8:	08018f88 	.word	0x08018f88

0800c5fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c600:	f7ff ffdc 	bl	800c5bc <HAL_RCC_GetHCLKFreq>
 800c604:	4601      	mov	r1, r0
 800c606:	4b05      	ldr	r3, [pc, #20]	; (800c61c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	0b5b      	lsrs	r3, r3, #13
 800c60c:	f003 0307 	and.w	r3, r3, #7
 800c610:	4a03      	ldr	r2, [pc, #12]	; (800c620 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c612:	5cd3      	ldrb	r3, [r2, r3]
 800c614:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c618:	4618      	mov	r0, r3
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	40023800 	.word	0x40023800
 800c620:	08018f88 	.word	0x08018f88

0800c624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c630:	2300      	movs	r3, #0
 800c632:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c634:	2300      	movs	r3, #0
 800c636:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c638:	2300      	movs	r3, #0
 800c63a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00a      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c64c:	4b66      	ldr	r3, [pc, #408]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c64e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c652:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65a:	4963      	ldr	r1, [pc, #396]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c65c:	4313      	orrs	r3, r2
 800c65e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c66e:	4b5e      	ldr	r3, [pc, #376]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c674:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	495a      	ldr	r1, [pc, #360]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10b      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d105      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d075      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c6a8:	4b50      	ldr	r3, [pc, #320]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6ae:	f7fd fb1b 	bl	8009ce8 <HAL_GetTick>
 800c6b2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6b4:	e008      	b.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c6b6:	f7fd fb17 	bl	8009ce8 <HAL_GetTick>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d901      	bls.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e1dc      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6c8:	4b47      	ldr	r3, [pc, #284]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1f0      	bne.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	019a      	lsls	r2, r3, #6
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	071b      	lsls	r3, r3, #28
 800c6ec:	493e      	ldr	r1, [pc, #248]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d01f      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c700:	4b39      	ldr	r3, [pc, #228]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c706:	0f1b      	lsrs	r3, r3, #28
 800c708:	f003 0307 	and.w	r3, r3, #7
 800c70c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	019a      	lsls	r2, r3, #6
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	061b      	lsls	r3, r3, #24
 800c71a:	431a      	orrs	r2, r3
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	071b      	lsls	r3, r3, #28
 800c720:	4931      	ldr	r1, [pc, #196]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c722:	4313      	orrs	r3, r2
 800c724:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c728:	4b2f      	ldr	r3, [pc, #188]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c72e:	f023 021f 	bic.w	r2, r3, #31
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a1b      	ldr	r3, [r3, #32]
 800c736:	3b01      	subs	r3, #1
 800c738:	492b      	ldr	r1, [pc, #172]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c73a:	4313      	orrs	r3, r2
 800c73c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00d      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	019a      	lsls	r2, r3, #6
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	061b      	lsls	r3, r3, #24
 800c758:	431a      	orrs	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	071b      	lsls	r3, r3, #28
 800c760:	4921      	ldr	r1, [pc, #132]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c762:	4313      	orrs	r3, r2
 800c764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c768:	4b20      	ldr	r3, [pc, #128]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c76a:	2201      	movs	r2, #1
 800c76c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c76e:	f7fd fabb 	bl	8009ce8 <HAL_GetTick>
 800c772:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c774:	e008      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c776:	f7fd fab7 	bl	8009ce8 <HAL_GetTick>
 800c77a:	4602      	mov	r2, r0
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2b02      	cmp	r3, #2
 800c782:	d901      	bls.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	e17c      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c788:	4b17      	ldr	r3, [pc, #92]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d0f0      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d112      	bne.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10c      	bne.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80ce 	beq.w	800c956 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c7be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7c2:	f040 80c8 	bne.w	800c956 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c7c6:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7cc:	f7fd fa8c 	bl	8009ce8 <HAL_GetTick>
 800c7d0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7d2:	e00f      	b.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c7d4:	f7fd fa88 	bl	8009ce8 <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d908      	bls.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e14d      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c7e6:	bf00      	nop
 800c7e8:	40023800 	.word	0x40023800
 800c7ec:	42470068 	.word	0x42470068
 800c7f0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7f4:	4ba5      	ldr	r3, [pc, #660]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d0e8      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 0304 	and.w	r3, r3, #4
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d02e      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c80e:	4b9f      	ldr	r3, [pc, #636]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c814:	0c1b      	lsrs	r3, r3, #16
 800c816:	f003 0303 	and.w	r3, r3, #3
 800c81a:	3301      	adds	r3, #1
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c820:	4b9a      	ldr	r3, [pc, #616]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c826:	0f1b      	lsrs	r3, r3, #28
 800c828:	f003 0307 	and.w	r3, r3, #7
 800c82c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	019a      	lsls	r2, r3, #6
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	085b      	lsrs	r3, r3, #1
 800c838:	3b01      	subs	r3, #1
 800c83a:	041b      	lsls	r3, r3, #16
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	061b      	lsls	r3, r3, #24
 800c844:	431a      	orrs	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	071b      	lsls	r3, r3, #28
 800c84a:	4990      	ldr	r1, [pc, #576]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c84c:	4313      	orrs	r3, r2
 800c84e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c852:	4b8e      	ldr	r3, [pc, #568]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	3b01      	subs	r3, #1
 800c862:	021b      	lsls	r3, r3, #8
 800c864:	4989      	ldr	r1, [pc, #548]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c866:	4313      	orrs	r3, r2
 800c868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0308 	and.w	r3, r3, #8
 800c874:	2b00      	cmp	r3, #0
 800c876:	d02c      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c878:	4b84      	ldr	r3, [pc, #528]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c87e:	0c1b      	lsrs	r3, r3, #16
 800c880:	f003 0303 	and.w	r3, r3, #3
 800c884:	3301      	adds	r3, #1
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c88a:	4b80      	ldr	r3, [pc, #512]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c890:	0e1b      	lsrs	r3, r3, #24
 800c892:	f003 030f 	and.w	r3, r3, #15
 800c896:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	019a      	lsls	r2, r3, #6
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	085b      	lsrs	r3, r3, #1
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	041b      	lsls	r3, r3, #16
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	061b      	lsls	r3, r3, #24
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	071b      	lsls	r3, r3, #28
 800c8b4:	4975      	ldr	r1, [pc, #468]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c8bc:	4b73      	ldr	r3, [pc, #460]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	4970      	ldr	r1, [pc, #448]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d024      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c8e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8e6:	d11f      	bne.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8e8:	4b68      	ldr	r3, [pc, #416]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ee:	0e1b      	lsrs	r3, r3, #24
 800c8f0:	f003 030f 	and.w	r3, r3, #15
 800c8f4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c8f6:	4b65      	ldr	r3, [pc, #404]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fc:	0f1b      	lsrs	r3, r3, #28
 800c8fe:	f003 0307 	and.w	r3, r3, #7
 800c902:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	019a      	lsls	r2, r3, #6
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	085b      	lsrs	r3, r3, #1
 800c910:	3b01      	subs	r3, #1
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	431a      	orrs	r2, r3
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	061b      	lsls	r3, r3, #24
 800c91a:	431a      	orrs	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	071b      	lsls	r3, r3, #28
 800c920:	495a      	ldr	r1, [pc, #360]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c922:	4313      	orrs	r3, r2
 800c924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c928:	4b59      	ldr	r3, [pc, #356]	; (800ca90 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c92e:	f7fd f9db 	bl	8009ce8 <HAL_GetTick>
 800c932:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c934:	e008      	b.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c936:	f7fd f9d7 	bl	8009ce8 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d901      	bls.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e09c      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c948:	4b50      	ldr	r3, [pc, #320]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c954:	d1ef      	bne.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0320 	and.w	r3, r3, #32
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 8083 	beq.w	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c964:	2300      	movs	r3, #0
 800c966:	60bb      	str	r3, [r7, #8]
 800c968:	4b48      	ldr	r3, [pc, #288]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	4a47      	ldr	r2, [pc, #284]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c972:	6413      	str	r3, [r2, #64]	; 0x40
 800c974:	4b45      	ldr	r3, [pc, #276]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c97c:	60bb      	str	r3, [r7, #8]
 800c97e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c980:	4b44      	ldr	r3, [pc, #272]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a43      	ldr	r2, [pc, #268]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c98a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c98c:	f7fd f9ac 	bl	8009ce8 <HAL_GetTick>
 800c990:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c992:	e008      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c994:	f7fd f9a8 	bl	8009ce8 <HAL_GetTick>
 800c998:	4602      	mov	r2, r0
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d901      	bls.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e06d      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9a6:	4b3b      	ldr	r3, [pc, #236]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0f0      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c9b2:	4b36      	ldr	r3, [pc, #216]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ba:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d02f      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d028      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9d0:	4b2e      	ldr	r3, [pc, #184]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c9da:	4b2f      	ldr	r3, [pc, #188]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c9e6:	4a29      	ldr	r2, [pc, #164]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c9ec:	4b27      	ldr	r3, [pc, #156]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d114      	bne.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c9f8:	f7fd f976 	bl	8009ce8 <HAL_GetTick>
 800c9fc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9fe:	e00a      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca00:	f7fd f972 	bl	8009ce8 <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d901      	bls.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e035      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca16:	4b1d      	ldr	r3, [pc, #116]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0ee      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca2e:	d10d      	bne.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ca30:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca44:	4911      	ldr	r1, [pc, #68]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca46:	4313      	orrs	r3, r2
 800ca48:	608b      	str	r3, [r1, #8]
 800ca4a:	e005      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ca4c:	4b0f      	ldr	r3, [pc, #60]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	4a0e      	ldr	r2, [pc, #56]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca56:	6093      	str	r3, [r2, #8]
 800ca58:	4b0c      	ldr	r3, [pc, #48]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca64:	4909      	ldr	r1, [pc, #36]	; (800ca8c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 0310 	and.w	r3, r3, #16
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d004      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca7c:	4b07      	ldr	r3, [pc, #28]	; (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ca7e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3720      	adds	r7, #32
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	40023800 	.word	0x40023800
 800ca90:	42470070 	.word	0x42470070
 800ca94:	40007000 	.word	0x40007000
 800ca98:	42470e40 	.word	0x42470e40
 800ca9c:	424711e0 	.word	0x424711e0

0800caa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d075      	beq.n	800cba4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cab8:	4ba2      	ldr	r3, [pc, #648]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f003 030c 	and.w	r3, r3, #12
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	d00c      	beq.n	800cade <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cac4:	4b9f      	ldr	r3, [pc, #636]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cacc:	2b08      	cmp	r3, #8
 800cace:	d112      	bne.n	800caf6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cad0:	4b9c      	ldr	r3, [pc, #624]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cadc:	d10b      	bne.n	800caf6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cade:	4b99      	ldr	r3, [pc, #612]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d05b      	beq.n	800cba2 <HAL_RCC_OscConfig+0x102>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d157      	bne.n	800cba2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e20b      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cafe:	d106      	bne.n	800cb0e <HAL_RCC_OscConfig+0x6e>
 800cb00:	4b90      	ldr	r3, [pc, #576]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a8f      	ldr	r2, [pc, #572]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	e01d      	b.n	800cb4a <HAL_RCC_OscConfig+0xaa>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb16:	d10c      	bne.n	800cb32 <HAL_RCC_OscConfig+0x92>
 800cb18:	4b8a      	ldr	r3, [pc, #552]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a89      	ldr	r2, [pc, #548]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	4b87      	ldr	r3, [pc, #540]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a86      	ldr	r2, [pc, #536]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	e00b      	b.n	800cb4a <HAL_RCC_OscConfig+0xaa>
 800cb32:	4b84      	ldr	r3, [pc, #528]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a83      	ldr	r2, [pc, #524]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	4b81      	ldr	r3, [pc, #516]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a80      	ldr	r2, [pc, #512]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d013      	beq.n	800cb7a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb52:	f7fd f8c9 	bl	8009ce8 <HAL_GetTick>
 800cb56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb58:	e008      	b.n	800cb6c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb5a:	f7fd f8c5 	bl	8009ce8 <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	2b64      	cmp	r3, #100	; 0x64
 800cb66:	d901      	bls.n	800cb6c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e1d0      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb6c:	4b75      	ldr	r3, [pc, #468]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0f0      	beq.n	800cb5a <HAL_RCC_OscConfig+0xba>
 800cb78:	e014      	b.n	800cba4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb7a:	f7fd f8b5 	bl	8009ce8 <HAL_GetTick>
 800cb7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb80:	e008      	b.n	800cb94 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb82:	f7fd f8b1 	bl	8009ce8 <HAL_GetTick>
 800cb86:	4602      	mov	r2, r0
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	2b64      	cmp	r3, #100	; 0x64
 800cb8e:	d901      	bls.n	800cb94 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e1bc      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb94:	4b6b      	ldr	r3, [pc, #428]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1f0      	bne.n	800cb82 <HAL_RCC_OscConfig+0xe2>
 800cba0:	e000      	b.n	800cba4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cba2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d063      	beq.n	800cc78 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cbb0:	4b64      	ldr	r3, [pc, #400]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f003 030c 	and.w	r3, r3, #12
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cbbc:	4b61      	ldr	r3, [pc, #388]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	d11c      	bne.n	800cc02 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cbc8:	4b5e      	ldr	r3, [pc, #376]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d116      	bne.n	800cc02 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbd4:	4b5b      	ldr	r3, [pc, #364]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0302 	and.w	r3, r3, #2
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d005      	beq.n	800cbec <HAL_RCC_OscConfig+0x14c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d001      	beq.n	800cbec <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e190      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbec:	4b55      	ldr	r3, [pc, #340]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	4952      	ldr	r1, [pc, #328]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc00:	e03a      	b.n	800cc78 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d020      	beq.n	800cc4c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc0a:	4b4f      	ldr	r3, [pc, #316]	; (800cd48 <HAL_RCC_OscConfig+0x2a8>)
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc10:	f7fd f86a 	bl	8009ce8 <HAL_GetTick>
 800cc14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc16:	e008      	b.n	800cc2a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc18:	f7fd f866 	bl	8009ce8 <HAL_GetTick>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d901      	bls.n	800cc2a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e171      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc2a:	4b46      	ldr	r3, [pc, #280]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0302 	and.w	r3, r3, #2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0f0      	beq.n	800cc18 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc36:	4b43      	ldr	r3, [pc, #268]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	493f      	ldr	r1, [pc, #252]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cc46:	4313      	orrs	r3, r2
 800cc48:	600b      	str	r3, [r1, #0]
 800cc4a:	e015      	b.n	800cc78 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc4c:	4b3e      	ldr	r3, [pc, #248]	; (800cd48 <HAL_RCC_OscConfig+0x2a8>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc52:	f7fd f849 	bl	8009ce8 <HAL_GetTick>
 800cc56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc58:	e008      	b.n	800cc6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc5a:	f7fd f845 	bl	8009ce8 <HAL_GetTick>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d901      	bls.n	800cc6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	e150      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc6c:	4b35      	ldr	r3, [pc, #212]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0302 	and.w	r3, r3, #2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f0      	bne.n	800cc5a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0308 	and.w	r3, r3, #8
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d030      	beq.n	800cce6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d016      	beq.n	800ccba <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc8c:	4b2f      	ldr	r3, [pc, #188]	; (800cd4c <HAL_RCC_OscConfig+0x2ac>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc92:	f7fd f829 	bl	8009ce8 <HAL_GetTick>
 800cc96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc98:	e008      	b.n	800ccac <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc9a:	f7fd f825 	bl	8009ce8 <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d901      	bls.n	800ccac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e130      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ccac:	4b25      	ldr	r3, [pc, #148]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800ccae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d0f0      	beq.n	800cc9a <HAL_RCC_OscConfig+0x1fa>
 800ccb8:	e015      	b.n	800cce6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ccba:	4b24      	ldr	r3, [pc, #144]	; (800cd4c <HAL_RCC_OscConfig+0x2ac>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc0:	f7fd f812 	bl	8009ce8 <HAL_GetTick>
 800ccc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ccc6:	e008      	b.n	800ccda <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ccc8:	f7fd f80e 	bl	8009ce8 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d901      	bls.n	800ccda <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	e119      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ccda:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800ccdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1f0      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0304 	and.w	r3, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 809f 	beq.w	800ce32 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10f      	bne.n	800cd24 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	4b0e      	ldr	r3, [pc, #56]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0c:	4a0d      	ldr	r2, [pc, #52]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cd0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd12:	6413      	str	r3, [r2, #64]	; 0x40
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <HAL_RCC_OscConfig+0x2a4>)
 800cd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd20:	2301      	movs	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd24:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <HAL_RCC_OscConfig+0x2b0>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d120      	bne.n	800cd72 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd30:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <HAL_RCC_OscConfig+0x2b0>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a06      	ldr	r2, [pc, #24]	; (800cd50 <HAL_RCC_OscConfig+0x2b0>)
 800cd36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd3c:	f7fc ffd4 	bl	8009ce8 <HAL_GetTick>
 800cd40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd42:	e010      	b.n	800cd66 <HAL_RCC_OscConfig+0x2c6>
 800cd44:	40023800 	.word	0x40023800
 800cd48:	42470000 	.word	0x42470000
 800cd4c:	42470e80 	.word	0x42470e80
 800cd50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd54:	f7fc ffc8 	bl	8009ce8 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d901      	bls.n	800cd66 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e0d3      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd66:	4b6c      	ldr	r3, [pc, #432]	; (800cf18 <HAL_RCC_OscConfig+0x478>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0f0      	beq.n	800cd54 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d106      	bne.n	800cd88 <HAL_RCC_OscConfig+0x2e8>
 800cd7a:	4b68      	ldr	r3, [pc, #416]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7e:	4a67      	ldr	r2, [pc, #412]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cd80:	f043 0301 	orr.w	r3, r3, #1
 800cd84:	6713      	str	r3, [r2, #112]	; 0x70
 800cd86:	e01c      	b.n	800cdc2 <HAL_RCC_OscConfig+0x322>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	2b05      	cmp	r3, #5
 800cd8e:	d10c      	bne.n	800cdaa <HAL_RCC_OscConfig+0x30a>
 800cd90:	4b62      	ldr	r3, [pc, #392]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd94:	4a61      	ldr	r2, [pc, #388]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cd96:	f043 0304 	orr.w	r3, r3, #4
 800cd9a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd9c:	4b5f      	ldr	r3, [pc, #380]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda0:	4a5e      	ldr	r2, [pc, #376]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cda2:	f043 0301 	orr.w	r3, r3, #1
 800cda6:	6713      	str	r3, [r2, #112]	; 0x70
 800cda8:	e00b      	b.n	800cdc2 <HAL_RCC_OscConfig+0x322>
 800cdaa:	4b5c      	ldr	r3, [pc, #368]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cdac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdae:	4a5b      	ldr	r2, [pc, #364]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cdb0:	f023 0301 	bic.w	r3, r3, #1
 800cdb4:	6713      	str	r3, [r2, #112]	; 0x70
 800cdb6:	4b59      	ldr	r3, [pc, #356]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdba:	4a58      	ldr	r2, [pc, #352]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cdbc:	f023 0304 	bic.w	r3, r3, #4
 800cdc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d015      	beq.n	800cdf6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdca:	f7fc ff8d 	bl	8009ce8 <HAL_GetTick>
 800cdce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdd0:	e00a      	b.n	800cde8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdd2:	f7fc ff89 	bl	8009ce8 <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d901      	bls.n	800cde8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e092      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cde8:	4b4c      	ldr	r3, [pc, #304]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdec:	f003 0302 	and.w	r3, r3, #2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0ee      	beq.n	800cdd2 <HAL_RCC_OscConfig+0x332>
 800cdf4:	e014      	b.n	800ce20 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdf6:	f7fc ff77 	bl	8009ce8 <HAL_GetTick>
 800cdfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdfc:	e00a      	b.n	800ce14 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdfe:	f7fc ff73 	bl	8009ce8 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d901      	bls.n	800ce14 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e07c      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce14:	4b41      	ldr	r3, [pc, #260]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800ce16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1ee      	bne.n	800cdfe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d105      	bne.n	800ce32 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce26:	4b3d      	ldr	r3, [pc, #244]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2a:	4a3c      	ldr	r2, [pc, #240]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800ce2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d068      	beq.n	800cf0c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ce3a:	4b38      	ldr	r3, [pc, #224]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f003 030c 	and.w	r3, r3, #12
 800ce42:	2b08      	cmp	r3, #8
 800ce44:	d060      	beq.n	800cf08 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	699b      	ldr	r3, [r3, #24]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d145      	bne.n	800ceda <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce4e:	4b34      	ldr	r3, [pc, #208]	; (800cf20 <HAL_RCC_OscConfig+0x480>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce54:	f7fc ff48 	bl	8009ce8 <HAL_GetTick>
 800ce58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce5a:	e008      	b.n	800ce6e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce5c:	f7fc ff44 	bl	8009ce8 <HAL_GetTick>
 800ce60:	4602      	mov	r2, r0
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d901      	bls.n	800ce6e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e04f      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce6e:	4b2b      	ldr	r3, [pc, #172]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1f0      	bne.n	800ce5c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	69da      	ldr	r2, [r3, #28]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	431a      	orrs	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	019b      	lsls	r3, r3, #6
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce90:	085b      	lsrs	r3, r3, #1
 800ce92:	3b01      	subs	r3, #1
 800ce94:	041b      	lsls	r3, r3, #16
 800ce96:	431a      	orrs	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	061b      	lsls	r3, r3, #24
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea4:	071b      	lsls	r3, r3, #28
 800cea6:	491d      	ldr	r1, [pc, #116]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ceac:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <HAL_RCC_OscConfig+0x480>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceb2:	f7fc ff19 	bl	8009ce8 <HAL_GetTick>
 800ceb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ceb8:	e008      	b.n	800cecc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ceba:	f7fc ff15 	bl	8009ce8 <HAL_GetTick>
 800cebe:	4602      	mov	r2, r0
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d901      	bls.n	800cecc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e020      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cecc:	4b13      	ldr	r3, [pc, #76]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0f0      	beq.n	800ceba <HAL_RCC_OscConfig+0x41a>
 800ced8:	e018      	b.n	800cf0c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ceda:	4b11      	ldr	r3, [pc, #68]	; (800cf20 <HAL_RCC_OscConfig+0x480>)
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cee0:	f7fc ff02 	bl	8009ce8 <HAL_GetTick>
 800cee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cee6:	e008      	b.n	800cefa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cee8:	f7fc fefe 	bl	8009ce8 <HAL_GetTick>
 800ceec:	4602      	mov	r2, r0
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d901      	bls.n	800cefa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cef6:	2303      	movs	r3, #3
 800cef8:	e009      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cefa:	4b08      	ldr	r3, [pc, #32]	; (800cf1c <HAL_RCC_OscConfig+0x47c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1f0      	bne.n	800cee8 <HAL_RCC_OscConfig+0x448>
 800cf06:	e001      	b.n	800cf0c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e000      	b.n	800cf0e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	40007000 	.word	0x40007000
 800cf1c:	40023800 	.word	0x40023800
 800cf20:	42470060 	.word	0x42470060

0800cf24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e022      	b.n	800cf7c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d105      	bne.n	800cf4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7fa f823 	bl	8006f94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2203      	movs	r2, #3
 800cf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f814 	bl	800cf84 <HAL_SD_InitCard>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e00a      	b.n	800cf7c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf84:	b5b0      	push	{r4, r5, r7, lr}
 800cf86:	b08e      	sub	sp, #56	; 0x38
 800cf88:	af04      	add	r7, sp, #16
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cf90:	2300      	movs	r3, #0
 800cf92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cfa0:	2376      	movs	r3, #118	; 0x76
 800cfa2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681d      	ldr	r5, [r3, #0]
 800cfa8:	466c      	mov	r4, sp
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfb6:	f107 0308 	add.w	r3, r7, #8
 800cfba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f003 fa87 	bl	80104d0 <SDIO_Init>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e031      	b.n	800d038 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cfd4:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <HAL_SD_InitCard+0xbc>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f003 fabf 	bl	8010562 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cfe4:	4b16      	ldr	r3, [pc, #88]	; (800d040 <HAL_SD_InitCard+0xbc>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 ffc6 	bl	800df7c <SD_PowerON>
 800cff0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00b      	beq.n	800d010 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	431a      	orrs	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e013      	b.n	800d038 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fee5 	bl	800dde0 <SD_InitCard>
 800d016:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3728      	adds	r7, #40	; 0x28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bdb0      	pop	{r4, r5, r7, pc}
 800d040:	422580a0 	.word	0x422580a0

0800d044 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08c      	sub	sp, #48	; 0x30
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d107      	bne.n	800d06c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d060:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e0c7      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b01      	cmp	r3, #1
 800d076:	f040 80c0 	bne.w	800d1fa <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	441a      	add	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d907      	bls.n	800d09e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e0ae      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d0bc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c2:	4a50      	ldr	r2, [pc, #320]	; (800d204 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d0c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	4a4f      	ldr	r2, [pc, #316]	; (800d208 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d0cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	3380      	adds	r3, #128	; 0x80
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	025b      	lsls	r3, r3, #9
 800d0e8:	089b      	lsrs	r3, r3, #2
 800d0ea:	f7fd fbef 	bl	800a8cc <HAL_DMA_Start_IT>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d017      	beq.n	800d124 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d102:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a40      	ldr	r2, [pc, #256]	; (800d20c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e06b      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d124:	4b3a      	ldr	r3, [pc, #232]	; (800d210 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d126:	2201      	movs	r2, #1
 800d128:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d002      	beq.n	800d138 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	025b      	lsls	r3, r3, #9
 800d136:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d140:	4618      	mov	r0, r3
 800d142:	f003 faa1 	bl	8010688 <SDMMC_CmdBlockLength>
 800d146:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00f      	beq.n	800d16e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a2e      	ldr	r2, [pc, #184]	; (800d20c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d154:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	431a      	orrs	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e046      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d16e:	f04f 33ff 	mov.w	r3, #4294967295
 800d172:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	025b      	lsls	r3, r3, #9
 800d178:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d17a:	2390      	movs	r3, #144	; 0x90
 800d17c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d17e:	2302      	movs	r3, #2
 800d180:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d182:	2300      	movs	r3, #0
 800d184:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d186:	2301      	movs	r3, #1
 800d188:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f107 0210 	add.w	r2, r7, #16
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f003 fa4b 	bl	8010630 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d90a      	bls.n	800d1b6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2282      	movs	r2, #130	; 0x82
 800d1a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f003 faaf 	bl	8010710 <SDMMC_CmdReadMultiBlock>
 800d1b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1b4:	e009      	b.n	800d1ca <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2281      	movs	r2, #129	; 0x81
 800d1ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f003 fa82 	bl	80106cc <SDMMC_CmdReadSingleBlock>
 800d1c8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d012      	beq.n	800d1f6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a0d      	ldr	r2, [pc, #52]	; (800d20c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e002      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e000      	b.n	800d1fc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d1fa:	2302      	movs	r3, #2
  }
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3730      	adds	r7, #48	; 0x30
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	0800dbef 	.word	0x0800dbef
 800d208:	0800dc61 	.word	0x0800dc61
 800d20c:	004005ff 	.word	0x004005ff
 800d210:	4225858c 	.word	0x4225858c

0800d214 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08c      	sub	sp, #48	; 0x30
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d107      	bne.n	800d23c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d230:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e0ca      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b01      	cmp	r3, #1
 800d246:	f040 80c3 	bne.w	800d3d0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	441a      	add	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d907      	bls.n	800d26e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	e0b1      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2203      	movs	r2, #3
 800d272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f042 021a 	orr.w	r2, r2, #26
 800d28c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d292:	4a52      	ldr	r2, [pc, #328]	; (800d3dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d29a:	4a51      	ldr	r2, [pc, #324]	; (800d3e0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d29c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d002      	beq.n	800d2b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	025b      	lsls	r3, r3, #9
 800d2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f003 f9e3 	bl	8010688 <SDMMC_CmdBlockLength>
 800d2c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00f      	beq.n	800d2ea <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a45      	ldr	r2, [pc, #276]	; (800d3e4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e073      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d90a      	bls.n	800d306 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	22a0      	movs	r2, #160	; 0xa0
 800d2f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f003 fa4b 	bl	8010798 <SDMMC_CmdWriteMultiBlock>
 800d302:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d304:	e009      	b.n	800d31a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2290      	movs	r2, #144	; 0x90
 800d30a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d312:	4618      	mov	r0, r3
 800d314:	f003 fa1e 	bl	8010754 <SDMMC_CmdWriteSingleBlock>
 800d318:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d012      	beq.n	800d346 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a2f      	ldr	r2, [pc, #188]	; (800d3e4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	431a      	orrs	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e045      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d346:	4b28      	ldr	r3, [pc, #160]	; (800d3e8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d348:	2201      	movs	r2, #1
 800d34a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3380      	adds	r3, #128	; 0x80
 800d358:	461a      	mov	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	025b      	lsls	r3, r3, #9
 800d35e:	089b      	lsrs	r3, r3, #2
 800d360:	f7fd fab4 	bl	800a8cc <HAL_DMA_Start_IT>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d01a      	beq.n	800d3a0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f022 021a 	bic.w	r2, r2, #26
 800d378:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a19      	ldr	r2, [pc, #100]	; (800d3e4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2201      	movs	r2, #1
 800d392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e018      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	025b      	lsls	r3, r3, #9
 800d3aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d3ac:	2390      	movs	r3, #144	; 0x90
 800d3ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f107 0210 	add.w	r2, r7, #16
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f003 f932 	bl	8010630 <SDIO_ConfigData>

      return HAL_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e000      	b.n	800d3d2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3d0:	2302      	movs	r3, #2
  }
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3730      	adds	r7, #48	; 0x30
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800dbc5 	.word	0x0800dbc5
 800d3e0:	0800dc61 	.word	0x0800dc61
 800d3e4:	004005ff 	.word	0x004005ff
 800d3e8:	4225858c 	.word	0x4225858c

0800d3ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d008      	beq.n	800d41a <HAL_SD_IRQHandler+0x2e>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f003 0308 	and.w	r3, r3, #8
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 ffc8 	bl	800e3a8 <SD_Read_IT>
 800d418:	e155      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 808f 	beq.w	800d548 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6812      	ldr	r2, [r2, #0]
 800d43e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d442:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d446:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 0201 	bic.w	r2, r2, #1
 800d456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f003 0308 	and.w	r3, r3, #8
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d039      	beq.n	800d4d6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f003 0302 	and.w	r3, r3, #2
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <HAL_SD_IRQHandler+0x8a>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b00      	cmp	r3, #0
 800d474:	d011      	beq.n	800d49a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f003 f9ae 	bl	80107dc <SDMMC_CmdStopTransfer>
 800d480:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d008      	beq.n	800d49a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	431a      	orrs	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f91f 	bl	800d6d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4a2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d104      	bne.n	800d4c6 <HAL_SD_IRQHandler+0xda>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f003 0302 	and.w	r3, r3, #2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f003 fe04 	bl	80110d4 <HAL_SD_RxCpltCallback>
 800d4cc:	e0fb      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f003 fdf6 	bl	80110c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4d4:	e0f7      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80f2 	beq.w	800d6c6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f003 0320 	and.w	r3, r3, #32
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d011      	beq.n	800d510 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f003 f973 	bl	80107dc <SDMMC_CmdStopTransfer>
 800d4f6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d008      	beq.n	800d510 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	431a      	orrs	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f8e4 	bl	800d6d8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	f040 80d5 	bne.w	800d6c6 <HAL_SD_IRQHandler+0x2da>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f003 0302 	and.w	r3, r3, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	f040 80cf 	bne.w	800d6c6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0208 	bic.w	r2, r2, #8
 800d536:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f003 fdbd 	bl	80110c0 <HAL_SD_TxCpltCallback>
}
 800d546:	e0be      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d54e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d552:	2b00      	cmp	r3, #0
 800d554:	d008      	beq.n	800d568 <HAL_SD_IRQHandler+0x17c>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f003 0308 	and.w	r3, r3, #8
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 ff72 	bl	800e44a <SD_Write_IT>
 800d566:	e0ae      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 80a7 	beq.w	800d6c6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	2b00      	cmp	r3, #0
 800d584:	d005      	beq.n	800d592 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	f043 0202 	orr.w	r2, r3, #2
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a4:	f043 0208 	orr.w	r2, r3, #8
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b2:	f003 0320 	and.w	r3, r3, #32
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5be:	f043 0220 	orr.w	r2, r3, #32
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	f003 0310 	and.w	r3, r3, #16
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d005      	beq.n	800d5e0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d8:	f043 0210 	orr.w	r2, r3, #16
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d5f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f003 f8ec 	bl	80107dc <SDMMC_CmdStopTransfer>
 800d604:	4602      	mov	r2, r0
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60a:	431a      	orrs	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f003 0308 	and.w	r3, r3, #8
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f855 	bl	800d6d8 <HAL_SD_ErrorCallback>
}
 800d62e:	e04a      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d636:	2b00      	cmp	r3, #0
 800d638:	d045      	beq.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f003 0310 	and.w	r3, r3, #16
 800d640:	2b00      	cmp	r3, #0
 800d642:	d104      	bne.n	800d64e <HAL_SD_IRQHandler+0x262>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d011      	beq.n	800d672 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d652:	4a1f      	ldr	r2, [pc, #124]	; (800d6d0 <HAL_SD_IRQHandler+0x2e4>)
 800d654:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fd f98e 	bl	800a97c <HAL_DMA_Abort_IT>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d02f      	beq.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 fb4a 	bl	800dd04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d670:	e029      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <HAL_SD_IRQHandler+0x29a>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f003 0302 	and.w	r3, r3, #2
 800d682:	2b00      	cmp	r3, #0
 800d684:	d011      	beq.n	800d6aa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68a:	4a12      	ldr	r2, [pc, #72]	; (800d6d4 <HAL_SD_IRQHandler+0x2e8>)
 800d68c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d692:	4618      	mov	r0, r3
 800d694:	f7fd f972 	bl	800a97c <HAL_DMA_Abort_IT>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d013      	beq.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 fb65 	bl	800dd72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6a8:	e00d      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f003 fcf4 	bl	80110ac <HAL_SD_AbortCallback>
}
 800d6c4:	e7ff      	b.n	800d6c6 <HAL_SD_IRQHandler+0x2da>
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800dd05 	.word	0x0800dd05
 800d6d4:	0800dd73 	.word	0x0800dd73

0800d6d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6fa:	0f9b      	lsrs	r3, r3, #30
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d706:	0e9b      	lsrs	r3, r3, #26
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	f003 030f 	and.w	r3, r3, #15
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d718:	0e1b      	lsrs	r3, r3, #24
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	f003 0303 	and.w	r3, r3, #3
 800d720:	b2da      	uxtb	r2, r3
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d72a:	0c1b      	lsrs	r3, r3, #16
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d736:	0a1b      	lsrs	r3, r3, #8
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d742:	b2da      	uxtb	r2, r3
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d74c:	0d1b      	lsrs	r3, r3, #20
 800d74e:	b29a      	uxth	r2, r3
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d758:	0c1b      	lsrs	r3, r3, #16
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	f003 030f 	and.w	r3, r3, #15
 800d760:	b2da      	uxtb	r2, r3
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d76a:	0bdb      	lsrs	r3, r3, #15
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	b2da      	uxtb	r2, r3
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d77c:	0b9b      	lsrs	r3, r3, #14
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	b2da      	uxtb	r2, r3
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d78e:	0b5b      	lsrs	r3, r3, #13
 800d790:	b2db      	uxtb	r3, r3
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	b2da      	uxtb	r2, r3
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7a0:	0b1b      	lsrs	r3, r3, #12
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 0301 	and.w	r3, r3, #1
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d163      	bne.n	800d884 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c0:	009a      	lsls	r2, r3, #2
 800d7c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d7cc:	0f92      	lsrs	r2, r2, #30
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d8:	0edb      	lsrs	r3, r3, #27
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	f003 0307 	and.w	r3, r3, #7
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ea:	0e1b      	lsrs	r3, r3, #24
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0307 	and.w	r3, r3, #7
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7fc:	0d5b      	lsrs	r3, r3, #21
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 0307 	and.w	r3, r3, #7
 800d804:	b2da      	uxtb	r2, r3
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d80e:	0c9b      	lsrs	r3, r3, #18
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 0307 	and.w	r3, r3, #7
 800d816:	b2da      	uxtb	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d820:	0bdb      	lsrs	r3, r3, #15
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	7e1b      	ldrb	r3, [r3, #24]
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	3302      	adds	r3, #2
 800d844:	2201      	movs	r2, #1
 800d846:	fa02 f303 	lsl.w	r3, r2, r3
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d84e:	fb02 f203 	mul.w	r2, r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	7a1b      	ldrb	r3, [r3, #8]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	f003 030f 	and.w	r3, r3, #15
 800d860:	2201      	movs	r2, #1
 800d862:	409a      	lsls	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d870:	0a52      	lsrs	r2, r2, #9
 800d872:	fb02 f203 	mul.w	r2, r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d880:	661a      	str	r2, [r3, #96]	; 0x60
 800d882:	e031      	b.n	800d8e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d11d      	bne.n	800d8c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d890:	041b      	lsls	r3, r3, #16
 800d892:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d89a:	0c1b      	lsrs	r3, r3, #16
 800d89c:	431a      	orrs	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	029a      	lsls	r2, r3, #10
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	661a      	str	r2, [r3, #96]	; 0x60
 800d8c6:	e00f      	b.n	800d8e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a58      	ldr	r2, [pc, #352]	; (800da30 <HAL_SD_GetCardCSD+0x344>)
 800d8ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e09d      	b.n	800da24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ec:	0b9b      	lsrs	r3, r3, #14
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8fe:	09db      	lsrs	r3, r3, #7
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d906:	b2da      	uxtb	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d910:	b2db      	uxtb	r3, r3
 800d912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d916:	b2da      	uxtb	r2, r3
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d920:	0fdb      	lsrs	r3, r3, #31
 800d922:	b2da      	uxtb	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92c:	0f5b      	lsrs	r3, r3, #29
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0303 	and.w	r3, r3, #3
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	0e9b      	lsrs	r3, r3, #26
 800d940:	b2db      	uxtb	r3, r3
 800d942:	f003 0307 	and.w	r3, r3, #7
 800d946:	b2da      	uxtb	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d950:	0d9b      	lsrs	r3, r3, #22
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 030f 	and.w	r3, r3, #15
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d962:	0d5b      	lsrs	r3, r3, #21
 800d964:	b2db      	uxtb	r3, r3
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d97e:	0c1b      	lsrs	r3, r3, #16
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	b2da      	uxtb	r2, r3
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	0bdb      	lsrs	r3, r3, #15
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a6:	0b9b      	lsrs	r3, r3, #14
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ba:	0b5b      	lsrs	r3, r3, #13
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ce:	0b1b      	lsrs	r3, r3, #12
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e2:	0a9b      	lsrs	r3, r3, #10
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0303 	and.w	r3, r3, #3
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9f6:	0a1b      	lsrs	r3, r3, #8
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0a:	085b      	lsrs	r3, r3, #1
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	004005ff 	.word	0x004005ff

0800da34 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800da8c:	b5b0      	push	{r4, r5, r7, lr}
 800da8e:	b08e      	sub	sp, #56	; 0x38
 800da90:	af04      	add	r7, sp, #16
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2203      	movs	r2, #3
 800da9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d02e      	beq.n	800db04 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daac:	d106      	bne.n	800dabc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	639a      	str	r2, [r3, #56]	; 0x38
 800daba:	e029      	b.n	800db10 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dac2:	d10a      	bne.n	800dada <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fb0f 	bl	800e0e8 <SD_WideBus_Enable>
 800daca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	431a      	orrs	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38
 800dad8:	e01a      	b.n	800db10 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10a      	bne.n	800daf6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fb4c 	bl	800e17e <SD_WideBus_Disable>
 800dae6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	639a      	str	r2, [r3, #56]	; 0x38
 800daf4:	e00c      	b.n	800db10 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	639a      	str	r2, [r3, #56]	; 0x38
 800db02:	e005      	b.n	800db10 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a18      	ldr	r2, [pc, #96]	; (800db80 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	e024      	b.n	800db76 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681d      	ldr	r5, [r3, #0]
 800db52:	466c      	mov	r4, sp
 800db54:	f107 0318 	add.w	r3, r7, #24
 800db58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db60:	f107 030c 	add.w	r3, r7, #12
 800db64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db66:	4628      	mov	r0, r5
 800db68:	f002 fcb2 	bl	80104d0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3728      	adds	r7, #40	; 0x28
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bdb0      	pop	{r4, r5, r7, pc}
 800db7e:	bf00      	nop
 800db80:	004005ff 	.word	0x004005ff

0800db84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800db90:	f107 030c 	add.w	r3, r7, #12
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa7e 	bl	800e098 <SD_SendStatus>
 800db9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d005      	beq.n	800dbb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	0a5b      	lsrs	r3, r3, #9
 800dbb4:	f003 030f 	and.w	r3, r3, #15
 800dbb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dbba:	693b      	ldr	r3, [r7, #16]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbe0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dbe2:	bf00      	nop
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	2b82      	cmp	r3, #130	; 0x82
 800dc02:	d111      	bne.n	800dc28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f002 fde7 	bl	80107dc <SDMMC_CmdStopTransfer>
 800dc0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d008      	beq.n	800dc28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff fd58 	bl	800d6d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f022 0208 	bic.w	r2, r2, #8
 800dc36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f003 fa3f 	bl	80110d4 <HAL_SD_RxCpltCallback>
#endif
}
 800dc56:	bf00      	nop
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7fd f830 	bl	800acd4 <HAL_DMA_GetError>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d03e      	beq.n	800dcf8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d002      	beq.n	800dc96 <SD_DMAError+0x36>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d12d      	bne.n	800dcf2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a19      	ldr	r2, [pc, #100]	; (800dd00 <SD_DMAError+0xa0>)
 800dc9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dcac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dcba:	6978      	ldr	r0, [r7, #20]
 800dcbc:	f7ff ff62 	bl	800db84 <HAL_SD_GetCardState>
 800dcc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b06      	cmp	r3, #6
 800dcc6:	d002      	beq.n	800dcce <SD_DMAError+0x6e>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	2b05      	cmp	r3, #5
 800dccc:	d10a      	bne.n	800dce4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 fd82 	bl	80107dc <SDMMC_CmdStopTransfer>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	431a      	orrs	r2, r3
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dcf2:	6978      	ldr	r0, [r7, #20]
 800dcf4:	f7ff fcf0 	bl	800d6d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	3718      	adds	r7, #24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	004005ff 	.word	0x004005ff

0800dd04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff ff31 	bl	800db84 <HAL_SD_GetCardState>
 800dd22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b06      	cmp	r3, #6
 800dd36:	d002      	beq.n	800dd3e <SD_DMATxAbort+0x3a>
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b05      	cmp	r3, #5
 800dd3c:	d10a      	bne.n	800dd54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f002 fd4a 	bl	80107dc <SDMMC_CmdStopTransfer>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f003 f9a5 	bl	80110ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd62:	e002      	b.n	800dd6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff fcb7 	bl	800d6d8 <HAL_SD_ErrorCallback>
}
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7ff fefa 	bl	800db84 <HAL_SD_GetCardState>
 800dd90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b06      	cmp	r3, #6
 800dda4:	d002      	beq.n	800ddac <SD_DMARxAbort+0x3a>
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b05      	cmp	r3, #5
 800ddaa:	d10a      	bne.n	800ddc2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f002 fd13 	bl	80107dc <SDMMC_CmdStopTransfer>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d103      	bne.n	800ddd2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f003 f96e 	bl	80110ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ddd0:	e002      	b.n	800ddd8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fc80 	bl	800d6d8 <HAL_SD_ErrorCallback>
}
 800ddd8:	bf00      	nop
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dde0:	b5b0      	push	{r4, r5, r7, lr}
 800dde2:	b094      	sub	sp, #80	; 0x50
 800dde4:	af04      	add	r7, sp, #16
 800dde6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dde8:	2301      	movs	r3, #1
 800ddea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 fbc5 	bl	8010580 <SDIO_GetPowerState>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d102      	bne.n	800de02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ddfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de00:	e0b7      	b.n	800df72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de06:	2b03      	cmp	r3, #3
 800de08:	d02f      	beq.n	800de6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	f002 fdee 	bl	80109f0 <SDMMC_CmdSendCID>
 800de14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <SD_InitCard+0x40>
    {
      return errorstate;
 800de1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1e:	e0a8      	b.n	800df72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2100      	movs	r1, #0
 800de26:	4618      	mov	r0, r3
 800de28:	f002 fbef 	bl	801060a <SDIO_GetResponse>
 800de2c:	4602      	mov	r2, r0
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2104      	movs	r1, #4
 800de38:	4618      	mov	r0, r3
 800de3a:	f002 fbe6 	bl	801060a <SDIO_GetResponse>
 800de3e:	4602      	mov	r2, r0
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2108      	movs	r1, #8
 800de4a:	4618      	mov	r0, r3
 800de4c:	f002 fbdd 	bl	801060a <SDIO_GetResponse>
 800de50:	4602      	mov	r2, r0
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	210c      	movs	r1, #12
 800de5c:	4618      	mov	r0, r3
 800de5e:	f002 fbd4 	bl	801060a <SDIO_GetResponse>
 800de62:	4602      	mov	r2, r0
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de6e:	2b03      	cmp	r3, #3
 800de70:	d00d      	beq.n	800de8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f107 020e 	add.w	r2, r7, #14
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f002 fdf4 	bl	8010a6a <SDMMC_CmdSetRelAdd>
 800de82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <SD_InitCard+0xae>
    {
      return errorstate;
 800de8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8c:	e071      	b.n	800df72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de92:	2b03      	cmp	r3, #3
 800de94:	d036      	beq.n	800df04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800de96:	89fb      	ldrh	r3, [r7, #14]
 800de98:	461a      	mov	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dea6:	041b      	lsls	r3, r3, #16
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f002 fdbe 	bl	8010a2c <SDMMC_CmdSendCSD>
 800deb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800deb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <SD_InitCard+0xdc>
    {
      return errorstate;
 800deb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deba:	e05a      	b.n	800df72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2100      	movs	r1, #0
 800dec2:	4618      	mov	r0, r3
 800dec4:	f002 fba1 	bl	801060a <SDIO_GetResponse>
 800dec8:	4602      	mov	r2, r0
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2104      	movs	r1, #4
 800ded4:	4618      	mov	r0, r3
 800ded6:	f002 fb98 	bl	801060a <SDIO_GetResponse>
 800deda:	4602      	mov	r2, r0
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2108      	movs	r1, #8
 800dee6:	4618      	mov	r0, r3
 800dee8:	f002 fb8f 	bl	801060a <SDIO_GetResponse>
 800deec:	4602      	mov	r2, r0
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	210c      	movs	r1, #12
 800def8:	4618      	mov	r0, r3
 800defa:	f002 fb86 	bl	801060a <SDIO_GetResponse>
 800defe:	4602      	mov	r2, r0
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2104      	movs	r1, #4
 800df0a:	4618      	mov	r0, r3
 800df0c:	f002 fb7d 	bl	801060a <SDIO_GetResponse>
 800df10:	4603      	mov	r3, r0
 800df12:	0d1a      	lsrs	r2, r3, #20
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df18:	f107 0310 	add.w	r3, r7, #16
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff fbe4 	bl	800d6ec <HAL_SD_GetCardCSD>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d002      	beq.n	800df30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df2e:	e020      	b.n	800df72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6819      	ldr	r1, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df38:	041b      	lsls	r3, r3, #16
 800df3a:	f04f 0400 	mov.w	r4, #0
 800df3e:	461a      	mov	r2, r3
 800df40:	4623      	mov	r3, r4
 800df42:	4608      	mov	r0, r1
 800df44:	f002 fc6c 	bl	8010820 <SDMMC_CmdSelDesel>
 800df48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <SD_InitCard+0x174>
  {
    return errorstate;
 800df50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df52:	e00e      	b.n	800df72 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681d      	ldr	r5, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	466c      	mov	r4, sp
 800df5c:	f103 0210 	add.w	r2, r3, #16
 800df60:	ca07      	ldmia	r2, {r0, r1, r2}
 800df62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df66:	3304      	adds	r3, #4
 800df68:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df6a:	4628      	mov	r0, r5
 800df6c:	f002 fab0 	bl	80104d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3740      	adds	r7, #64	; 0x40
 800df76:	46bd      	mov	sp, r7
 800df78:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]
 800df8c:	2300      	movs	r3, #0
 800df8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4618      	mov	r0, r3
 800df96:	f002 fc66 	bl	8010866 <SDMMC_CmdGoIdleState>
 800df9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	e072      	b.n	800e08c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f002 fc79 	bl	80108a2 <SDMMC_CmdOperCond>
 800dfb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00d      	beq.n	800dfd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 fc4f 	bl	8010866 <SDMMC_CmdGoIdleState>
 800dfc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d004      	beq.n	800dfda <SD_PowerON+0x5e>
    {
      return errorstate;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	e05b      	b.n	800e08c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d137      	bne.n	800e052 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f002 fc79 	bl	80108e0 <SDMMC_CmdAppCommand>
 800dfee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d02d      	beq.n	800e052 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dff6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dffa:	e047      	b.n	800e08c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2100      	movs	r1, #0
 800e002:	4618      	mov	r0, r3
 800e004:	f002 fc6c 	bl	80108e0 <SDMMC_CmdAppCommand>
 800e008:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <SD_PowerON+0x98>
    {
      return errorstate;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	e03b      	b.n	800e08c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	491e      	ldr	r1, [pc, #120]	; (800e094 <SD_PowerON+0x118>)
 800e01a:	4618      	mov	r0, r3
 800e01c:	f002 fc82 	bl	8010924 <SDMMC_CmdAppOperCommand>
 800e020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e02c:	e02e      	b.n	800e08c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2100      	movs	r1, #0
 800e034:	4618      	mov	r0, r3
 800e036:	f002 fae8 	bl	801060a <SDIO_GetResponse>
 800e03a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	0fdb      	lsrs	r3, r3, #31
 800e040:	2b01      	cmp	r3, #1
 800e042:	d101      	bne.n	800e048 <SD_PowerON+0xcc>
 800e044:	2301      	movs	r3, #1
 800e046:	e000      	b.n	800e04a <SD_PowerON+0xce>
 800e048:	2300      	movs	r3, #0
 800e04a:	613b      	str	r3, [r7, #16]

    count++;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	3301      	adds	r3, #1
 800e050:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e058:	4293      	cmp	r3, r2
 800e05a:	d802      	bhi.n	800e062 <SD_PowerON+0xe6>
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0cc      	beq.n	800dffc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e068:	4293      	cmp	r3, r2
 800e06a:	d902      	bls.n	800e072 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e06c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e070:	e00c      	b.n	800e08c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	645a      	str	r2, [r3, #68]	; 0x44
 800e082:	e002      	b.n	800e08a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	c1100000 	.word	0xc1100000

0800e098 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0ac:	e018      	b.n	800e0e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b6:	041b      	lsls	r3, r3, #16
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f002 fcf6 	bl	8010aac <SDMMC_CmdSendStatus>
 800e0c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	e009      	b.n	800e0e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f002 fa99 	bl	801060a <SDIO_GetResponse>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f002 fa83 	bl	801060a <SDIO_GetResponse>
 800e104:	4603      	mov	r3, r0
 800e106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e10a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e10e:	d102      	bne.n	800e116 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e114:	e02f      	b.n	800e176 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e116:	f107 030c 	add.w	r3, r7, #12
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f879 	bl	800e214 <SD_FindSCR>
 800e122:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	e023      	b.n	800e176 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01c      	beq.n	800e172 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e140:	041b      	lsls	r3, r3, #16
 800e142:	4619      	mov	r1, r3
 800e144:	4610      	mov	r0, r2
 800e146:	f002 fbcb 	bl	80108e0 <SDMMC_CmdAppCommand>
 800e14a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d001      	beq.n	800e156 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	e00f      	b.n	800e176 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2102      	movs	r1, #2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f002 fc04 	bl	801096a <SDMMC_CmdBusWidth>
 800e162:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	e003      	b.n	800e176 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e16e:	2300      	movs	r3, #0
 800e170:	e001      	b.n	800e176 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e172:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e176:	4618      	mov	r0, r3
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b086      	sub	sp, #24
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
 800e18a:	2300      	movs	r3, #0
 800e18c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2100      	movs	r1, #0
 800e194:	4618      	mov	r0, r3
 800e196:	f002 fa38 	bl	801060a <SDIO_GetResponse>
 800e19a:	4603      	mov	r3, r0
 800e19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1a4:	d102      	bne.n	800e1ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1aa:	e02f      	b.n	800e20c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1ac:	f107 030c 	add.w	r3, r7, #12
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f82e 	bl	800e214 <SD_FindSCR>
 800e1b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	e023      	b.n	800e20c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d01c      	beq.n	800e208 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d6:	041b      	lsls	r3, r3, #16
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4610      	mov	r0, r2
 800e1dc:	f002 fb80 	bl	80108e0 <SDMMC_CmdAppCommand>
 800e1e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	e00f      	b.n	800e20c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f002 fbb9 	bl	801096a <SDMMC_CmdBusWidth>
 800e1f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	e003      	b.n	800e20c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e204:	2300      	movs	r3, #0
 800e206:	e001      	b.n	800e20c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e208:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e214:	b590      	push	{r4, r7, lr}
 800e216:	b08f      	sub	sp, #60	; 0x3c
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e21e:	f7fb fd63 	bl	8009ce8 <HAL_GetTick>
 800e222:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e228:	2300      	movs	r3, #0
 800e22a:	60bb      	str	r3, [r7, #8]
 800e22c:	2300      	movs	r3, #0
 800e22e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2108      	movs	r1, #8
 800e23a:	4618      	mov	r0, r3
 800e23c:	f002 fa24 	bl	8010688 <SDMMC_CmdBlockLength>
 800e240:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	2b00      	cmp	r3, #0
 800e246:	d001      	beq.n	800e24c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	e0a9      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e254:	041b      	lsls	r3, r3, #16
 800e256:	4619      	mov	r1, r3
 800e258:	4610      	mov	r0, r2
 800e25a:	f002 fb41 	bl	80108e0 <SDMMC_CmdAppCommand>
 800e25e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	e09a      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e26a:	f04f 33ff 	mov.w	r3, #4294967295
 800e26e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e270:	2308      	movs	r3, #8
 800e272:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e274:	2330      	movs	r3, #48	; 0x30
 800e276:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e278:	2302      	movs	r3, #2
 800e27a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e280:	2301      	movs	r3, #1
 800e282:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f107 0210 	add.w	r2, r7, #16
 800e28c:	4611      	mov	r1, r2
 800e28e:	4618      	mov	r0, r3
 800e290:	f002 f9ce 	bl	8010630 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4618      	mov	r0, r3
 800e29a:	f002 fb88 	bl	80109ae <SDMMC_CmdSendSCR>
 800e29e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d022      	beq.n	800e2ec <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	e07a      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00e      	beq.n	800e2d6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6819      	ldr	r1, [r3, #0]
 800e2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	f107 0208 	add.w	r2, r7, #8
 800e2c4:	18d4      	adds	r4, r2, r3
 800e2c6:	4608      	mov	r0, r1
 800e2c8:	f002 f92d 	bl	8010526 <SDIO_ReadFIFO>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	6023      	str	r3, [r4, #0]
      index++;
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2d6:	f7fb fd07 	bl	8009ce8 <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e4:	d102      	bne.n	800e2ec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2ea:	e059      	b.n	800e3a0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0d6      	beq.n	800e2aa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e302:	f003 0308 	and.w	r3, r3, #8
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2208      	movs	r2, #8
 800e310:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e312:	2308      	movs	r3, #8
 800e314:	e044      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31c:	f003 0302 	and.w	r3, r3, #2
 800e320:	2b00      	cmp	r3, #0
 800e322:	d005      	beq.n	800e330 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2202      	movs	r2, #2
 800e32a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e32c:	2302      	movs	r3, #2
 800e32e:	e037      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e336:	f003 0320 	and.w	r3, r3, #32
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2220      	movs	r2, #32
 800e344:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e346:	2320      	movs	r3, #32
 800e348:	e02a      	b.n	800e3a0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e352:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	061a      	lsls	r2, r3, #24
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e360:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	0a1b      	lsrs	r3, r3, #8
 800e366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e36a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	0e1b      	lsrs	r3, r3, #24
 800e370:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	601a      	str	r2, [r3, #0]
    scr++;
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	3304      	adds	r3, #4
 800e37a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	061a      	lsls	r2, r3, #24
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	021b      	lsls	r3, r3, #8
 800e384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e388:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e392:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	0e1b      	lsrs	r3, r3, #24
 800e398:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	373c      	adds	r7, #60	; 0x3c
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd90      	pop	{r4, r7, pc}

0800e3a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d03f      	beq.n	800e442 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	617b      	str	r3, [r7, #20]
 800e3c6:	e033      	b.n	800e430 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f002 f8aa 	bl	8010526 <SDIO_ReadFIFO>
 800e3d2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	0a1b      	lsrs	r3, r3, #8
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	0c1b      	lsrs	r3, r3, #16
 800e402:	b2da      	uxtb	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3301      	adds	r3, #1
 800e40c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	3b01      	subs	r3, #1
 800e412:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	0e1b      	lsrs	r3, r3, #24
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	3b01      	subs	r3, #1
 800e428:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	3301      	adds	r3, #1
 800e42e:	617b      	str	r3, [r7, #20]
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	2b07      	cmp	r3, #7
 800e434:	d9c8      	bls.n	800e3c8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e442:	bf00      	nop
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d043      	beq.n	800e4ec <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e464:	2300      	movs	r3, #0
 800e466:	617b      	str	r3, [r7, #20]
 800e468:	e037      	b.n	800e4da <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3301      	adds	r3, #1
 800e474:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	3b01      	subs	r3, #1
 800e47a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	021a      	lsls	r2, r3, #8
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	4313      	orrs	r3, r2
 800e486:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3301      	adds	r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	3b01      	subs	r3, #1
 800e492:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	041a      	lsls	r2, r3, #16
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	061a      	lsls	r2, r3, #24
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f107 0208 	add.w	r2, r7, #8
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f002 f836 	bl	8010540 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2b07      	cmp	r3, #7
 800e4de:	d9c4      	bls.n	800e46a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	693a      	ldr	r2, [r7, #16]
 800e4ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e4ec:	bf00      	nop
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	e056      	b.n	800e5b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7f8 fe29 	bl	8007178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2202      	movs	r2, #2
 800e52a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e53c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	431a      	orrs	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	431a      	orrs	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	431a      	orrs	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	695b      	ldr	r3, [r3, #20]
 800e558:	431a      	orrs	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	699b      	ldr	r3, [r3, #24]
 800e55e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e562:	431a      	orrs	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	69db      	ldr	r3, [r3, #28]
 800e568:	431a      	orrs	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	ea42 0103 	orr.w	r1, r2, r3
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	430a      	orrs	r2, r1
 800e57c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	0c1b      	lsrs	r3, r3, #16
 800e584:	f003 0104 	and.w	r1, r3, #4
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	430a      	orrs	r2, r1
 800e592:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	69da      	ldr	r2, [r3, #28]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b088      	sub	sp, #32
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	603b      	str	r3, [r7, #0]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d101      	bne.n	800e5de <HAL_SPI_Transmit+0x22>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e11e      	b.n	800e81c <HAL_SPI_Transmit+0x260>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5e6:	f7fb fb7f 	bl	8009ce8 <HAL_GetTick>
 800e5ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e5ec:	88fb      	ldrh	r3, [r7, #6]
 800e5ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d002      	beq.n	800e602 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e600:	e103      	b.n	800e80a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <HAL_SPI_Transmit+0x52>
 800e608:	88fb      	ldrh	r3, [r7, #6]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e612:	e0fa      	b.n	800e80a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2203      	movs	r2, #3
 800e618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	88fa      	ldrh	r2, [r7, #6]
 800e62c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	88fa      	ldrh	r2, [r7, #6]
 800e632:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e65a:	d107      	bne.n	800e66c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e66a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e676:	2b40      	cmp	r3, #64	; 0x40
 800e678:	d007      	beq.n	800e68a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e692:	d14b      	bne.n	800e72c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <HAL_SPI_Transmit+0xe6>
 800e69c:	8afb      	ldrh	r3, [r7, #22]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d13e      	bne.n	800e720 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	881a      	ldrh	r2, [r3, #0]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b2:	1c9a      	adds	r2, r3, #2
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e6c6:	e02b      	b.n	800e720 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	f003 0302 	and.w	r3, r3, #2
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d112      	bne.n	800e6fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6da:	881a      	ldrh	r2, [r3, #0]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e6:	1c9a      	adds	r2, r3, #2
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e6fa:	e011      	b.n	800e720 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6fc:	f7fb faf4 	bl	8009ce8 <HAL_GetTick>
 800e700:	4602      	mov	r2, r0
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d803      	bhi.n	800e714 <HAL_SPI_Transmit+0x158>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e712:	d102      	bne.n	800e71a <HAL_SPI_Transmit+0x15e>
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d102      	bne.n	800e720 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e71a:	2303      	movs	r3, #3
 800e71c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e71e:	e074      	b.n	800e80a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e724:	b29b      	uxth	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1ce      	bne.n	800e6c8 <HAL_SPI_Transmit+0x10c>
 800e72a:	e04c      	b.n	800e7c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d002      	beq.n	800e73a <HAL_SPI_Transmit+0x17e>
 800e734:	8afb      	ldrh	r3, [r7, #22]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d140      	bne.n	800e7bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	330c      	adds	r3, #12
 800e744:	7812      	ldrb	r2, [r2, #0]
 800e746:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e756:	b29b      	uxth	r3, r3
 800e758:	3b01      	subs	r3, #1
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e760:	e02c      	b.n	800e7bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d113      	bne.n	800e798 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	330c      	adds	r3, #12
 800e77a:	7812      	ldrb	r2, [r2, #0]
 800e77c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e782:	1c5a      	adds	r2, r3, #1
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	3b01      	subs	r3, #1
 800e790:	b29a      	uxth	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	86da      	strh	r2, [r3, #54]	; 0x36
 800e796:	e011      	b.n	800e7bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e798:	f7fb faa6 	bl	8009ce8 <HAL_GetTick>
 800e79c:	4602      	mov	r2, r0
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d803      	bhi.n	800e7b0 <HAL_SPI_Transmit+0x1f4>
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	d102      	bne.n	800e7b6 <HAL_SPI_Transmit+0x1fa>
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d102      	bne.n	800e7bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e7ba:	e026      	b.n	800e80a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1cd      	bne.n	800e762 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	6839      	ldr	r1, [r7, #0]
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 fba4 	bl	800ef18 <SPI_EndRxTxTransaction>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	613b      	str	r3, [r7, #16]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	613b      	str	r3, [r7, #16]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	613b      	str	r3, [r7, #16]
 800e7f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d002      	beq.n	800e808 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	77fb      	strb	r3, [r7, #31]
 800e806:	e000      	b.n	800e80a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2200      	movs	r2, #0
 800e816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e81a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3720      	adds	r7, #32
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b088      	sub	sp, #32
 800e828:	af02      	add	r7, sp, #8
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	603b      	str	r3, [r7, #0]
 800e830:	4613      	mov	r3, r2
 800e832:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e840:	d112      	bne.n	800e868 <HAL_SPI_Receive+0x44>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10e      	bne.n	800e868 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2204      	movs	r2, #4
 800e84e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e852:	88fa      	ldrh	r2, [r7, #6]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	4613      	mov	r3, r2
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	68b9      	ldr	r1, [r7, #8]
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 f8e9 	bl	800ea36 <HAL_SPI_TransmitReceive>
 800e864:	4603      	mov	r3, r0
 800e866:	e0e2      	b.n	800ea2e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_SPI_Receive+0x52>
 800e872:	2302      	movs	r3, #2
 800e874:	e0db      	b.n	800ea2e <HAL_SPI_Receive+0x20a>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e87e:	f7fb fa33 	bl	8009ce8 <HAL_GetTick>
 800e882:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d002      	beq.n	800e896 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e890:	2302      	movs	r3, #2
 800e892:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e894:	e0c2      	b.n	800ea1c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d002      	beq.n	800e8a2 <HAL_SPI_Receive+0x7e>
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d102      	bne.n	800e8a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8a6:	e0b9      	b.n	800ea1c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2204      	movs	r2, #4
 800e8ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	88fa      	ldrh	r2, [r7, #6]
 800e8c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	88fa      	ldrh	r2, [r7, #6]
 800e8c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ee:	d107      	bne.n	800e900 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e8fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e90a:	2b40      	cmp	r3, #64	; 0x40
 800e90c:	d007      	beq.n	800e91e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e91c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d162      	bne.n	800e9ec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e926:	e02e      	b.n	800e986 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b01      	cmp	r3, #1
 800e934:	d115      	bne.n	800e962 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f103 020c 	add.w	r2, r3, #12
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e942:	7812      	ldrb	r2, [r2, #0]
 800e944:	b2d2      	uxtb	r2, r2
 800e946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e956:	b29b      	uxth	r3, r3
 800e958:	3b01      	subs	r3, #1
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e960:	e011      	b.n	800e986 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e962:	f7fb f9c1 	bl	8009ce8 <HAL_GetTick>
 800e966:	4602      	mov	r2, r0
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	683a      	ldr	r2, [r7, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d803      	bhi.n	800e97a <HAL_SPI_Receive+0x156>
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e978:	d102      	bne.n	800e980 <HAL_SPI_Receive+0x15c>
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e980:	2303      	movs	r3, #3
 800e982:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e984:	e04a      	b.n	800ea1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1cb      	bne.n	800e928 <HAL_SPI_Receive+0x104>
 800e990:	e031      	b.n	800e9f6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f003 0301 	and.w	r3, r3, #1
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d113      	bne.n	800e9c8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68da      	ldr	r2, [r3, #12]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9aa:	b292      	uxth	r2, r2
 800e9ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b2:	1c9a      	adds	r2, r3, #2
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9c6:	e011      	b.n	800e9ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9c8:	f7fb f98e 	bl	8009ce8 <HAL_GetTick>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d803      	bhi.n	800e9e0 <HAL_SPI_Receive+0x1bc>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9de:	d102      	bne.n	800e9e6 <HAL_SPI_Receive+0x1c2>
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d102      	bne.n	800e9ec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9ea:	e017      	b.n	800ea1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1cd      	bne.n	800e992 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 fa27 	bl	800ee4e <SPI_EndRxTransaction>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2220      	movs	r2, #32
 800ea0a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ea14:	2301      	movs	r3, #1
 800ea16:	75fb      	strb	r3, [r7, #23]
 800ea18:	e000      	b.n	800ea1c <HAL_SPI_Receive+0x1f8>
  }

error :
 800ea1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b08c      	sub	sp, #48	; 0x30
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	60f8      	str	r0, [r7, #12]
 800ea3e:	60b9      	str	r1, [r7, #8]
 800ea40:	607a      	str	r2, [r7, #4]
 800ea42:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea44:	2301      	movs	r3, #1
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d101      	bne.n	800ea5c <HAL_SPI_TransmitReceive+0x26>
 800ea58:	2302      	movs	r3, #2
 800ea5a:	e18a      	b.n	800ed72 <HAL_SPI_TransmitReceive+0x33c>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea64:	f7fb f940 	bl	8009ce8 <HAL_GetTick>
 800ea68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ea7a:	887b      	ldrh	r3, [r7, #2]
 800ea7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d00f      	beq.n	800eaa6 <HAL_SPI_TransmitReceive+0x70>
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea8c:	d107      	bne.n	800ea9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d103      	bne.n	800ea9e <HAL_SPI_TransmitReceive+0x68>
 800ea96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	d003      	beq.n	800eaa6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eaa4:	e15b      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <HAL_SPI_TransmitReceive+0x82>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d002      	beq.n	800eab8 <HAL_SPI_TransmitReceive+0x82>
 800eab2:	887b      	ldrh	r3, [r7, #2]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d103      	bne.n	800eac0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eabe:	e14e      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	2b04      	cmp	r3, #4
 800eaca:	d003      	beq.n	800ead4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2205      	movs	r2, #5
 800ead0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	887a      	ldrh	r2, [r7, #2]
 800eae4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	887a      	ldrh	r2, [r7, #2]
 800eaea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	887a      	ldrh	r2, [r7, #2]
 800eaf6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	887a      	ldrh	r2, [r7, #2]
 800eafc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb14:	2b40      	cmp	r3, #64	; 0x40
 800eb16:	d007      	beq.n	800eb28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb30:	d178      	bne.n	800ec24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <HAL_SPI_TransmitReceive+0x10a>
 800eb3a:	8b7b      	ldrh	r3, [r7, #26]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d166      	bne.n	800ec0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb44:	881a      	ldrh	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb50:	1c9a      	adds	r2, r3, #2
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb64:	e053      	b.n	800ec0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d11b      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x176>
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d016      	beq.n	800ebac <HAL_SPI_TransmitReceive+0x176>
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d113      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb88:	881a      	ldrh	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb94:	1c9a      	adds	r2, r3, #2
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	3b01      	subs	r3, #1
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d119      	bne.n	800ebee <HAL_SPI_TransmitReceive+0x1b8>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d014      	beq.n	800ebee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebce:	b292      	uxth	r2, r2
 800ebd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd6:	1c9a      	adds	r2, r3, #2
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebea:	2301      	movs	r3, #1
 800ebec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ebee:	f7fb f87b 	bl	8009ce8 <HAL_GetTick>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d807      	bhi.n	800ec0e <HAL_SPI_TransmitReceive+0x1d8>
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec04:	d003      	beq.n	800ec0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec06:	2303      	movs	r3, #3
 800ec08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec0c:	e0a7      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1a6      	bne.n	800eb66 <HAL_SPI_TransmitReceive+0x130>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1a1      	bne.n	800eb66 <HAL_SPI_TransmitReceive+0x130>
 800ec22:	e07c      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <HAL_SPI_TransmitReceive+0x1fc>
 800ec2c:	8b7b      	ldrh	r3, [r7, #26]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d16b      	bne.n	800ed0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	330c      	adds	r3, #12
 800ec3c:	7812      	ldrb	r2, [r2, #0]
 800ec3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	3b01      	subs	r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec58:	e057      	b.n	800ed0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f003 0302 	and.w	r3, r3, #2
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d11c      	bne.n	800eca2 <HAL_SPI_TransmitReceive+0x26c>
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d017      	beq.n	800eca2 <HAL_SPI_TransmitReceive+0x26c>
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d114      	bne.n	800eca2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	330c      	adds	r3, #12
 800ec82:	7812      	ldrb	r2, [r2, #0]
 800ec84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	3b01      	subs	r3, #1
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d119      	bne.n	800ece4 <HAL_SPI_TransmitReceive+0x2ae>
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d014      	beq.n	800ece4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68da      	ldr	r2, [r3, #12]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc4:	b2d2      	uxtb	r2, r2
 800ecc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ece0:	2301      	movs	r3, #1
 800ece2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ece4:	f7fb f800 	bl	8009ce8 <HAL_GetTick>
 800ece8:	4602      	mov	r2, r0
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d803      	bhi.n	800ecfc <HAL_SPI_TransmitReceive+0x2c6>
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	d102      	bne.n	800ed02 <HAL_SPI_TransmitReceive+0x2cc>
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d103      	bne.n	800ed0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed02:	2303      	movs	r3, #3
 800ed04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed08:	e029      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1a2      	bne.n	800ec5a <HAL_SPI_TransmitReceive+0x224>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d19d      	bne.n	800ec5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f000 f8f8 	bl	800ef18 <SPI_EndRxTxTransaction>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d006      	beq.n	800ed3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2220      	movs	r2, #32
 800ed38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed3a:	e010      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10b      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed44:	2300      	movs	r3, #0
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	617b      	str	r3, [r7, #20]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	617b      	str	r3, [r7, #20]
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	e000      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ed5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3730      	adds	r7, #48	; 0x30
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	60f8      	str	r0, [r7, #12]
 800ed82:	60b9      	str	r1, [r7, #8]
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	4613      	mov	r3, r2
 800ed88:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed8a:	e04c      	b.n	800ee26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed92:	d048      	beq.n	800ee26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ed94:	f7fa ffa8 	bl	8009ce8 <HAL_GetTick>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	683a      	ldr	r2, [r7, #0]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d902      	bls.n	800edaa <SPI_WaitFlagStateUntilTimeout+0x30>
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d13d      	bne.n	800ee26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800edb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edc2:	d111      	bne.n	800ede8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edcc:	d004      	beq.n	800edd8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edd6:	d107      	bne.n	800ede8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ede6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edf0:	d10f      	bne.n	800ee12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee00:	601a      	str	r2, [r3, #0]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ee22:	2303      	movs	r3, #3
 800ee24:	e00f      	b.n	800ee46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	689a      	ldr	r2, [r3, #8]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	4013      	ands	r3, r2
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	bf0c      	ite	eq
 800ee36:	2301      	moveq	r3, #1
 800ee38:	2300      	movne	r3, #0
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d1a3      	bne.n	800ed8c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b086      	sub	sp, #24
 800ee52:	af02      	add	r7, sp, #8
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee62:	d111      	bne.n	800ee88 <SPI_EndRxTransaction+0x3a>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee6c:	d004      	beq.n	800ee78 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee76:	d107      	bne.n	800ee88 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee86:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee90:	d12a      	bne.n	800eee8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee9a:	d012      	beq.n	800eec2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	2200      	movs	r2, #0
 800eea4:	2180      	movs	r1, #128	; 0x80
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff ff67 	bl	800ed7a <SPI_WaitFlagStateUntilTimeout>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d02d      	beq.n	800ef0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb6:	f043 0220 	orr.w	r2, r3, #32
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e026      	b.n	800ef10 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	2200      	movs	r2, #0
 800eeca:	2101      	movs	r1, #1
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f7ff ff54 	bl	800ed7a <SPI_WaitFlagStateUntilTimeout>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01a      	beq.n	800ef0e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eedc:	f043 0220 	orr.w	r2, r3, #32
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eee4:	2303      	movs	r3, #3
 800eee6:	e013      	b.n	800ef10 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	2200      	movs	r2, #0
 800eef0:	2101      	movs	r1, #1
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f7ff ff41 	bl	800ed7a <SPI_WaitFlagStateUntilTimeout>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef02:	f043 0220 	orr.w	r2, r3, #32
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef0a:	2303      	movs	r3, #3
 800ef0c:	e000      	b.n	800ef10 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af02      	add	r7, sp, #8
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef24:	4b1b      	ldr	r3, [pc, #108]	; (800ef94 <SPI_EndRxTxTransaction+0x7c>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a1b      	ldr	r2, [pc, #108]	; (800ef98 <SPI_EndRxTxTransaction+0x80>)
 800ef2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef2e:	0d5b      	lsrs	r3, r3, #21
 800ef30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef34:	fb02 f303 	mul.w	r3, r2, r3
 800ef38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef42:	d112      	bne.n	800ef6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	2180      	movs	r1, #128	; 0x80
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f7ff ff13 	bl	800ed7a <SPI_WaitFlagStateUntilTimeout>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d016      	beq.n	800ef88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5e:	f043 0220 	orr.w	r2, r3, #32
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e00f      	b.n	800ef8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00a      	beq.n	800ef86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	3b01      	subs	r3, #1
 800ef74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef80:	2b80      	cmp	r3, #128	; 0x80
 800ef82:	d0f2      	beq.n	800ef6a <SPI_EndRxTxTransaction+0x52>
 800ef84:	e000      	b.n	800ef88 <SPI_EndRxTxTransaction+0x70>
        break;
 800ef86:	bf00      	nop
  }

  return HAL_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20000000 	.word	0x20000000
 800ef98:	165e9f81 	.word	0x165e9f81

0800ef9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d101      	bne.n	800efae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efaa:	2301      	movs	r3, #1
 800efac:	e01d      	b.n	800efea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d106      	bne.n	800efc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7f8 f994 	bl	80072f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2202      	movs	r2, #2
 800efcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f000 fb56 	bl	800f68c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eff2:	b480      	push	{r7}
 800eff4:	b085      	sub	sp, #20
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f042 0201 	orr.w	r2, r2, #1
 800f008:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f003 0307 	and.w	r3, r3, #7
 800f014:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b06      	cmp	r3, #6
 800f01a:	d007      	beq.n	800f02c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f042 0201 	orr.w	r2, r2, #1
 800f02a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr

0800f03a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	e01d      	b.n	800f088 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7f8 f8d1 	bl	8007208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2202      	movs	r2, #2
 800f06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	3304      	adds	r3, #4
 800f076:	4619      	mov	r1, r3
 800f078:	4610      	mov	r0, r2
 800f07a:	f000 fb07 	bl	800f68c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2201      	movs	r2, #1
 800f082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 fd42 	bl	800fb2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a15      	ldr	r2, [pc, #84]	; (800f104 <HAL_TIM_PWM_Start+0x74>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d004      	beq.n	800f0bc <HAL_TIM_PWM_Start+0x2c>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a14      	ldr	r2, [pc, #80]	; (800f108 <HAL_TIM_PWM_Start+0x78>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d101      	bne.n	800f0c0 <HAL_TIM_PWM_Start+0x30>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e000      	b.n	800f0c2 <HAL_TIM_PWM_Start+0x32>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d007      	beq.n	800f0d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f0d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	f003 0307 	and.w	r3, r3, #7
 800f0e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b06      	cmp	r3, #6
 800f0e6:	d007      	beq.n	800f0f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f042 0201 	orr.w	r2, r2, #1
 800f0f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	40010000 	.word	0x40010000
 800f108:	40010400 	.word	0x40010400

0800f10c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e083      	b.n	800f228 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d106      	bne.n	800f13a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7f8 f96b 	bl	8007410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2202      	movs	r2, #2
 800f13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	6812      	ldr	r2, [r2, #0]
 800f14c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f150:	f023 0307 	bic.w	r3, r3, #7
 800f154:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	3304      	adds	r3, #4
 800f15e:	4619      	mov	r1, r3
 800f160:	4610      	mov	r0, r2
 800f162:	f000 fa93 	bl	800f68c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	699b      	ldr	r3, [r3, #24]
 800f174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6a1b      	ldr	r3, [r3, #32]
 800f17c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	697a      	ldr	r2, [r7, #20]
 800f184:	4313      	orrs	r3, r2
 800f186:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f18e:	f023 0303 	bic.w	r3, r3, #3
 800f192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	689a      	ldr	r2, [r3, #8]
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	699b      	ldr	r3, [r3, #24]
 800f19c:	021b      	lsls	r3, r3, #8
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	693a      	ldr	r2, [r7, #16]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f1ac:	f023 030c 	bic.w	r3, r3, #12
 800f1b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f1b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f1bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	69db      	ldr	r3, [r3, #28]
 800f1c6:	021b      	lsls	r3, r3, #8
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	011a      	lsls	r2, r3, #4
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	031b      	lsls	r3, r3, #12
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f1ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f1f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	685a      	ldr	r2, [r3, #4]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	011b      	lsls	r3, r3, #4
 800f1fe:	4313      	orrs	r3, r2
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	4313      	orrs	r3, r2
 800f204:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3718      	adds	r7, #24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <HAL_TIM_Encoder_Start+0x16>
 800f240:	2b04      	cmp	r3, #4
 800f242:	d008      	beq.n	800f256 <HAL_TIM_Encoder_Start+0x26>
 800f244:	e00f      	b.n	800f266 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2201      	movs	r2, #1
 800f24c:	2100      	movs	r1, #0
 800f24e:	4618      	mov	r0, r3
 800f250:	f000 fc6c 	bl	800fb2c <TIM_CCxChannelCmd>
      break;
 800f254:	e016      	b.n	800f284 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2201      	movs	r2, #1
 800f25c:	2104      	movs	r1, #4
 800f25e:	4618      	mov	r0, r3
 800f260:	f000 fc64 	bl	800fb2c <TIM_CCxChannelCmd>
      break;
 800f264:	e00e      	b.n	800f284 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2201      	movs	r2, #1
 800f26c:	2100      	movs	r1, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fc5c 	bl	800fb2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2201      	movs	r2, #1
 800f27a:	2104      	movs	r1, #4
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 fc55 	bl	800fb2c <TIM_CCxChannelCmd>
      break;
 800f282:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f042 0201 	orr.w	r2, r2, #1
 800f292:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b082      	sub	sp, #8
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	f003 0302 	and.w	r3, r3, #2
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d122      	bne.n	800f2fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	f003 0302 	and.w	r3, r3, #2
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d11b      	bne.n	800f2fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f06f 0202 	mvn.w	r2, #2
 800f2ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	f003 0303 	and.w	r3, r3, #3
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d003      	beq.n	800f2e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 f9b5 	bl	800f650 <HAL_TIM_IC_CaptureCallback>
 800f2e6:	e005      	b.n	800f2f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f9a7 	bl	800f63c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f9b8 	bl	800f664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	f003 0304 	and.w	r3, r3, #4
 800f304:	2b04      	cmp	r3, #4
 800f306:	d122      	bne.n	800f34e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	f003 0304 	and.w	r3, r3, #4
 800f312:	2b04      	cmp	r3, #4
 800f314:	d11b      	bne.n	800f34e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f06f 0204 	mvn.w	r2, #4
 800f31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2202      	movs	r2, #2
 800f324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f330:	2b00      	cmp	r3, #0
 800f332:	d003      	beq.n	800f33c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f98b 	bl	800f650 <HAL_TIM_IC_CaptureCallback>
 800f33a:	e005      	b.n	800f348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f97d 	bl	800f63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f98e 	bl	800f664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	f003 0308 	and.w	r3, r3, #8
 800f358:	2b08      	cmp	r3, #8
 800f35a:	d122      	bne.n	800f3a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	f003 0308 	and.w	r3, r3, #8
 800f366:	2b08      	cmp	r3, #8
 800f368:	d11b      	bne.n	800f3a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f06f 0208 	mvn.w	r2, #8
 800f372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2204      	movs	r2, #4
 800f378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	69db      	ldr	r3, [r3, #28]
 800f380:	f003 0303 	and.w	r3, r3, #3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d003      	beq.n	800f390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 f961 	bl	800f650 <HAL_TIM_IC_CaptureCallback>
 800f38e:	e005      	b.n	800f39c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f953 	bl	800f63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 f964 	bl	800f664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	691b      	ldr	r3, [r3, #16]
 800f3a8:	f003 0310 	and.w	r3, r3, #16
 800f3ac:	2b10      	cmp	r3, #16
 800f3ae:	d122      	bne.n	800f3f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	f003 0310 	and.w	r3, r3, #16
 800f3ba:	2b10      	cmp	r3, #16
 800f3bc:	d11b      	bne.n	800f3f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f06f 0210 	mvn.w	r2, #16
 800f3c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2208      	movs	r2, #8
 800f3cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	69db      	ldr	r3, [r3, #28]
 800f3d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d003      	beq.n	800f3e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 f937 	bl	800f650 <HAL_TIM_IC_CaptureCallback>
 800f3e2:	e005      	b.n	800f3f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 f929 	bl	800f63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f93a 	bl	800f664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	2b01      	cmp	r3, #1
 800f402:	d10e      	bne.n	800f422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d107      	bne.n	800f422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f06f 0201 	mvn.w	r2, #1
 800f41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7f6 fccf 	bl	8005dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f42c:	2b80      	cmp	r3, #128	; 0x80
 800f42e:	d10e      	bne.n	800f44e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f43a:	2b80      	cmp	r3, #128	; 0x80
 800f43c:	d107      	bne.n	800f44e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fc6d 	bl	800fd28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f458:	2b40      	cmp	r3, #64	; 0x40
 800f45a:	d10e      	bne.n	800f47a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f466:	2b40      	cmp	r3, #64	; 0x40
 800f468:	d107      	bne.n	800f47a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 f8ff 	bl	800f678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	f003 0320 	and.w	r3, r3, #32
 800f484:	2b20      	cmp	r3, #32
 800f486:	d10e      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	f003 0320 	and.w	r3, r3, #32
 800f492:	2b20      	cmp	r3, #32
 800f494:	d107      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f06f 0220 	mvn.w	r2, #32
 800f49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fc37 	bl	800fd14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
	...

0800f4b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d101      	bne.n	800f4ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f4c6:	2302      	movs	r3, #2
 800f4c8:	e0b4      	b.n	800f634 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b0c      	cmp	r3, #12
 800f4de:	f200 809f 	bhi.w	800f620 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f4e2:	a201      	add	r2, pc, #4	; (adr r2, 800f4e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e8:	0800f51d 	.word	0x0800f51d
 800f4ec:	0800f621 	.word	0x0800f621
 800f4f0:	0800f621 	.word	0x0800f621
 800f4f4:	0800f621 	.word	0x0800f621
 800f4f8:	0800f55d 	.word	0x0800f55d
 800f4fc:	0800f621 	.word	0x0800f621
 800f500:	0800f621 	.word	0x0800f621
 800f504:	0800f621 	.word	0x0800f621
 800f508:	0800f59f 	.word	0x0800f59f
 800f50c:	0800f621 	.word	0x0800f621
 800f510:	0800f621 	.word	0x0800f621
 800f514:	0800f621 	.word	0x0800f621
 800f518:	0800f5df 	.word	0x0800f5df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68b9      	ldr	r1, [r7, #8]
 800f522:	4618      	mov	r0, r3
 800f524:	f000 f952 	bl	800f7cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	699a      	ldr	r2, [r3, #24]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f042 0208 	orr.w	r2, r2, #8
 800f536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	699a      	ldr	r2, [r3, #24]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f022 0204 	bic.w	r2, r2, #4
 800f546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6999      	ldr	r1, [r3, #24]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	691a      	ldr	r2, [r3, #16]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	430a      	orrs	r2, r1
 800f558:	619a      	str	r2, [r3, #24]
      break;
 800f55a:	e062      	b.n	800f622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	68b9      	ldr	r1, [r7, #8]
 800f562:	4618      	mov	r0, r3
 800f564:	f000 f9a2 	bl	800f8ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	699a      	ldr	r2, [r3, #24]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	699a      	ldr	r2, [r3, #24]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6999      	ldr	r1, [r3, #24]
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	021a      	lsls	r2, r3, #8
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	430a      	orrs	r2, r1
 800f59a:	619a      	str	r2, [r3, #24]
      break;
 800f59c:	e041      	b.n	800f622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f000 f9f7 	bl	800f998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f042 0208 	orr.w	r2, r2, #8
 800f5b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	69da      	ldr	r2, [r3, #28]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f022 0204 	bic.w	r2, r2, #4
 800f5c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	69d9      	ldr	r1, [r3, #28]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	691a      	ldr	r2, [r3, #16]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	430a      	orrs	r2, r1
 800f5da:	61da      	str	r2, [r3, #28]
      break;
 800f5dc:	e021      	b.n	800f622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	68b9      	ldr	r1, [r7, #8]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f000 fa4b 	bl	800fa80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	69da      	ldr	r2, [r3, #28]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	69da      	ldr	r2, [r3, #28]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	69d9      	ldr	r1, [r3, #28]
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	021a      	lsls	r2, r3, #8
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	430a      	orrs	r2, r1
 800f61c:	61da      	str	r2, [r3, #28]
      break;
 800f61e:	e000      	b.n	800f622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f620:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2201      	movs	r2, #1
 800f626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a40      	ldr	r2, [pc, #256]	; (800f7a0 <TIM_Base_SetConfig+0x114>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d013      	beq.n	800f6cc <TIM_Base_SetConfig+0x40>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6aa:	d00f      	beq.n	800f6cc <TIM_Base_SetConfig+0x40>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a3d      	ldr	r2, [pc, #244]	; (800f7a4 <TIM_Base_SetConfig+0x118>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d00b      	beq.n	800f6cc <TIM_Base_SetConfig+0x40>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a3c      	ldr	r2, [pc, #240]	; (800f7a8 <TIM_Base_SetConfig+0x11c>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d007      	beq.n	800f6cc <TIM_Base_SetConfig+0x40>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a3b      	ldr	r2, [pc, #236]	; (800f7ac <TIM_Base_SetConfig+0x120>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d003      	beq.n	800f6cc <TIM_Base_SetConfig+0x40>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a3a      	ldr	r2, [pc, #232]	; (800f7b0 <TIM_Base_SetConfig+0x124>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d108      	bne.n	800f6de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a2f      	ldr	r2, [pc, #188]	; (800f7a0 <TIM_Base_SetConfig+0x114>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d02b      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ec:	d027      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a2c      	ldr	r2, [pc, #176]	; (800f7a4 <TIM_Base_SetConfig+0x118>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d023      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a2b      	ldr	r2, [pc, #172]	; (800f7a8 <TIM_Base_SetConfig+0x11c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d01f      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a2a      	ldr	r2, [pc, #168]	; (800f7ac <TIM_Base_SetConfig+0x120>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d01b      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a29      	ldr	r2, [pc, #164]	; (800f7b0 <TIM_Base_SetConfig+0x124>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d017      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a28      	ldr	r2, [pc, #160]	; (800f7b4 <TIM_Base_SetConfig+0x128>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d013      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a27      	ldr	r2, [pc, #156]	; (800f7b8 <TIM_Base_SetConfig+0x12c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d00f      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a26      	ldr	r2, [pc, #152]	; (800f7bc <TIM_Base_SetConfig+0x130>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d00b      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a25      	ldr	r2, [pc, #148]	; (800f7c0 <TIM_Base_SetConfig+0x134>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d007      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a24      	ldr	r2, [pc, #144]	; (800f7c4 <TIM_Base_SetConfig+0x138>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d003      	beq.n	800f73e <TIM_Base_SetConfig+0xb2>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a23      	ldr	r2, [pc, #140]	; (800f7c8 <TIM_Base_SetConfig+0x13c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d108      	bne.n	800f750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	695b      	ldr	r3, [r3, #20]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68fa      	ldr	r2, [r7, #12]
 800f762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	689a      	ldr	r2, [r3, #8]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4a0a      	ldr	r2, [pc, #40]	; (800f7a0 <TIM_Base_SetConfig+0x114>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d003      	beq.n	800f784 <TIM_Base_SetConfig+0xf8>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a0c      	ldr	r2, [pc, #48]	; (800f7b0 <TIM_Base_SetConfig+0x124>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d103      	bne.n	800f78c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	691a      	ldr	r2, [r3, #16]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2201      	movs	r2, #1
 800f790:	615a      	str	r2, [r3, #20]
}
 800f792:	bf00      	nop
 800f794:	3714      	adds	r7, #20
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	40010000 	.word	0x40010000
 800f7a4:	40000400 	.word	0x40000400
 800f7a8:	40000800 	.word	0x40000800
 800f7ac:	40000c00 	.word	0x40000c00
 800f7b0:	40010400 	.word	0x40010400
 800f7b4:	40014000 	.word	0x40014000
 800f7b8:	40014400 	.word	0x40014400
 800f7bc:	40014800 	.word	0x40014800
 800f7c0:	40001800 	.word	0x40001800
 800f7c4:	40001c00 	.word	0x40001c00
 800f7c8:	40002000 	.word	0x40002000

0800f7cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	f023 0201 	bic.w	r2, r3, #1
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f023 0303 	bic.w	r3, r3, #3
 800f802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f023 0302 	bic.w	r3, r3, #2
 800f814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	4313      	orrs	r3, r2
 800f81e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a20      	ldr	r2, [pc, #128]	; (800f8a4 <TIM_OC1_SetConfig+0xd8>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d003      	beq.n	800f830 <TIM_OC1_SetConfig+0x64>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a1f      	ldr	r2, [pc, #124]	; (800f8a8 <TIM_OC1_SetConfig+0xdc>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d10c      	bne.n	800f84a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f023 0308 	bic.w	r3, r3, #8
 800f836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	697a      	ldr	r2, [r7, #20]
 800f83e:	4313      	orrs	r3, r2
 800f840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f023 0304 	bic.w	r3, r3, #4
 800f848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a15      	ldr	r2, [pc, #84]	; (800f8a4 <TIM_OC1_SetConfig+0xd8>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d003      	beq.n	800f85a <TIM_OC1_SetConfig+0x8e>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4a14      	ldr	r2, [pc, #80]	; (800f8a8 <TIM_OC1_SetConfig+0xdc>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d111      	bne.n	800f87e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	4313      	orrs	r3, r2
 800f872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	4313      	orrs	r3, r2
 800f87c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	621a      	str	r2, [r3, #32]
}
 800f898:	bf00      	nop
 800f89a:	371c      	adds	r7, #28
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr
 800f8a4:	40010000 	.word	0x40010000
 800f8a8:	40010400 	.word	0x40010400

0800f8ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	f023 0210 	bic.w	r2, r3, #16
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	021b      	lsls	r3, r3, #8
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	f023 0320 	bic.w	r3, r3, #32
 800f8f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	011b      	lsls	r3, r3, #4
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	4313      	orrs	r3, r2
 800f902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a22      	ldr	r2, [pc, #136]	; (800f990 <TIM_OC2_SetConfig+0xe4>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d003      	beq.n	800f914 <TIM_OC2_SetConfig+0x68>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a21      	ldr	r2, [pc, #132]	; (800f994 <TIM_OC2_SetConfig+0xe8>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d10d      	bne.n	800f930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f91a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	011b      	lsls	r3, r3, #4
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	4313      	orrs	r3, r2
 800f926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f92e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a17      	ldr	r2, [pc, #92]	; (800f990 <TIM_OC2_SetConfig+0xe4>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d003      	beq.n	800f940 <TIM_OC2_SetConfig+0x94>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4a16      	ldr	r2, [pc, #88]	; (800f994 <TIM_OC2_SetConfig+0xe8>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d113      	bne.n	800f968 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f94e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	695b      	ldr	r3, [r3, #20]
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	4313      	orrs	r3, r2
 800f95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	4313      	orrs	r3, r2
 800f966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	621a      	str	r2, [r3, #32]
}
 800f982:	bf00      	nop
 800f984:	371c      	adds	r7, #28
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	40010000 	.word	0x40010000
 800f994:	40010400 	.word	0x40010400

0800f998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f998:	b480      	push	{r7}
 800f99a:	b087      	sub	sp, #28
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f023 0303 	bic.w	r3, r3, #3
 800f9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	021b      	lsls	r3, r3, #8
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a21      	ldr	r2, [pc, #132]	; (800fa78 <TIM_OC3_SetConfig+0xe0>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d003      	beq.n	800f9fe <TIM_OC3_SetConfig+0x66>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a20      	ldr	r2, [pc, #128]	; (800fa7c <TIM_OC3_SetConfig+0xe4>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d10d      	bne.n	800fa1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	021b      	lsls	r3, r3, #8
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a16      	ldr	r2, [pc, #88]	; (800fa78 <TIM_OC3_SetConfig+0xe0>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d003      	beq.n	800fa2a <TIM_OC3_SetConfig+0x92>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a15      	ldr	r2, [pc, #84]	; (800fa7c <TIM_OC3_SetConfig+0xe4>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d113      	bne.n	800fa52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	011b      	lsls	r3, r3, #4
 800fa40:	693a      	ldr	r2, [r7, #16]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	699b      	ldr	r3, [r3, #24]
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	693a      	ldr	r2, [r7, #16]
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	621a      	str	r2, [r3, #32]
}
 800fa6c:	bf00      	nop
 800fa6e:	371c      	adds	r7, #28
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	40010000 	.word	0x40010000
 800fa7c:	40010400 	.word	0x40010400

0800fa80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b087      	sub	sp, #28
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	69db      	ldr	r3, [r3, #28]
 800faa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800faca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	031b      	lsls	r3, r3, #12
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a12      	ldr	r2, [pc, #72]	; (800fb24 <TIM_OC4_SetConfig+0xa4>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d003      	beq.n	800fae8 <TIM_OC4_SetConfig+0x68>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a11      	ldr	r2, [pc, #68]	; (800fb28 <TIM_OC4_SetConfig+0xa8>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d109      	bne.n	800fafc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800faee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	695b      	ldr	r3, [r3, #20]
 800faf4:	019b      	lsls	r3, r3, #6
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	4313      	orrs	r3, r2
 800fafa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	621a      	str	r2, [r3, #32]
}
 800fb16:	bf00      	nop
 800fb18:	371c      	adds	r7, #28
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	40010000 	.word	0x40010000
 800fb28:	40010400 	.word	0x40010400

0800fb2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	f003 031f 	and.w	r3, r3, #31
 800fb3e:	2201      	movs	r2, #1
 800fb40:	fa02 f303 	lsl.w	r3, r2, r3
 800fb44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6a1a      	ldr	r2, [r3, #32]
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	43db      	mvns	r3, r3
 800fb4e:	401a      	ands	r2, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6a1a      	ldr	r2, [r3, #32]
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	f003 031f 	and.w	r3, r3, #31
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	fa01 f303 	lsl.w	r3, r1, r3
 800fb64:	431a      	orrs	r2, r3
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	621a      	str	r2, [r3, #32]
}
 800fb6a:	bf00      	nop
 800fb6c:	371c      	adds	r7, #28
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
	...

0800fb78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d101      	bne.n	800fb90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	e05a      	b.n	800fc46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a21      	ldr	r2, [pc, #132]	; (800fc54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d022      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbdc:	d01d      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a1d      	ldr	r2, [pc, #116]	; (800fc58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d018      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a1b      	ldr	r2, [pc, #108]	; (800fc5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d013      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a1a      	ldr	r2, [pc, #104]	; (800fc60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d00e      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a18      	ldr	r2, [pc, #96]	; (800fc64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d009      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a17      	ldr	r2, [pc, #92]	; (800fc68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d004      	beq.n	800fc1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a15      	ldr	r2, [pc, #84]	; (800fc6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d10c      	bne.n	800fc34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3714      	adds	r7, #20
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	40010000 	.word	0x40010000
 800fc58:	40000400 	.word	0x40000400
 800fc5c:	40000800 	.word	0x40000800
 800fc60:	40000c00 	.word	0x40000c00
 800fc64:	40010400 	.word	0x40010400
 800fc68:	40014000 	.word	0x40014000
 800fc6c:	40001800 	.word	0x40001800

0800fc70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b085      	sub	sp, #20
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d101      	bne.n	800fc8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fc88:	2302      	movs	r3, #2
 800fc8a:	e03d      	b.n	800fd08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	695b      	ldr	r3, [r3, #20]
 800fce4:	4313      	orrs	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd06:	2300      	movs	r3, #0
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3714      	adds	r7, #20
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e03f      	b.n	800fdce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7f7 fc7e 	bl	8007664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2224      	movs	r2, #36	; 0x24
 800fd6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f829 	bl	800fdd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	691a      	ldr	r2, [r3, #16]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	695a      	ldr	r2, [r3, #20]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fda4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68da      	ldr	r2, [r3, #12]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fdb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2220      	movs	r2, #32
 800fdc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2220      	movs	r2, #32
 800fdc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3708      	adds	r7, #8
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
	...

0800fdd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	b085      	sub	sp, #20
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68da      	ldr	r2, [r3, #12]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	430a      	orrs	r2, r1
 800fdf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689a      	ldr	r2, [r3, #8]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	431a      	orrs	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	695b      	ldr	r3, [r3, #20]
 800fe06:	431a      	orrs	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	69db      	ldr	r3, [r3, #28]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fe1a:	f023 030c 	bic.w	r3, r3, #12
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	6812      	ldr	r2, [r2, #0]
 800fe22:	68f9      	ldr	r1, [r7, #12]
 800fe24:	430b      	orrs	r3, r1
 800fe26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	699a      	ldr	r2, [r3, #24]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	430a      	orrs	r2, r1
 800fe3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	69db      	ldr	r3, [r3, #28]
 800fe42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe46:	f040 818b 	bne.w	8010160 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4ac1      	ldr	r2, [pc, #772]	; (8010154 <UART_SetConfig+0x37c>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d005      	beq.n	800fe60 <UART_SetConfig+0x88>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4abf      	ldr	r2, [pc, #764]	; (8010158 <UART_SetConfig+0x380>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	f040 80bd 	bne.w	800ffda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe60:	f7fc fbcc 	bl	800c5fc <HAL_RCC_GetPCLK2Freq>
 800fe64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	461d      	mov	r5, r3
 800fe6a:	f04f 0600 	mov.w	r6, #0
 800fe6e:	46a8      	mov	r8, r5
 800fe70:	46b1      	mov	r9, r6
 800fe72:	eb18 0308 	adds.w	r3, r8, r8
 800fe76:	eb49 0409 	adc.w	r4, r9, r9
 800fe7a:	4698      	mov	r8, r3
 800fe7c:	46a1      	mov	r9, r4
 800fe7e:	eb18 0805 	adds.w	r8, r8, r5
 800fe82:	eb49 0906 	adc.w	r9, r9, r6
 800fe86:	f04f 0100 	mov.w	r1, #0
 800fe8a:	f04f 0200 	mov.w	r2, #0
 800fe8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe9a:	4688      	mov	r8, r1
 800fe9c:	4691      	mov	r9, r2
 800fe9e:	eb18 0005 	adds.w	r0, r8, r5
 800fea2:	eb49 0106 	adc.w	r1, r9, r6
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	461d      	mov	r5, r3
 800feac:	f04f 0600 	mov.w	r6, #0
 800feb0:	196b      	adds	r3, r5, r5
 800feb2:	eb46 0406 	adc.w	r4, r6, r6
 800feb6:	461a      	mov	r2, r3
 800feb8:	4623      	mov	r3, r4
 800feba:	f7f0 fefd 	bl	8000cb8 <__aeabi_uldivmod>
 800febe:	4603      	mov	r3, r0
 800fec0:	460c      	mov	r4, r1
 800fec2:	461a      	mov	r2, r3
 800fec4:	4ba5      	ldr	r3, [pc, #660]	; (801015c <UART_SetConfig+0x384>)
 800fec6:	fba3 2302 	umull	r2, r3, r3, r2
 800feca:	095b      	lsrs	r3, r3, #5
 800fecc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	461d      	mov	r5, r3
 800fed4:	f04f 0600 	mov.w	r6, #0
 800fed8:	46a9      	mov	r9, r5
 800feda:	46b2      	mov	sl, r6
 800fedc:	eb19 0309 	adds.w	r3, r9, r9
 800fee0:	eb4a 040a 	adc.w	r4, sl, sl
 800fee4:	4699      	mov	r9, r3
 800fee6:	46a2      	mov	sl, r4
 800fee8:	eb19 0905 	adds.w	r9, r9, r5
 800feec:	eb4a 0a06 	adc.w	sl, sl, r6
 800fef0:	f04f 0100 	mov.w	r1, #0
 800fef4:	f04f 0200 	mov.w	r2, #0
 800fef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fefc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff04:	4689      	mov	r9, r1
 800ff06:	4692      	mov	sl, r2
 800ff08:	eb19 0005 	adds.w	r0, r9, r5
 800ff0c:	eb4a 0106 	adc.w	r1, sl, r6
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	461d      	mov	r5, r3
 800ff16:	f04f 0600 	mov.w	r6, #0
 800ff1a:	196b      	adds	r3, r5, r5
 800ff1c:	eb46 0406 	adc.w	r4, r6, r6
 800ff20:	461a      	mov	r2, r3
 800ff22:	4623      	mov	r3, r4
 800ff24:	f7f0 fec8 	bl	8000cb8 <__aeabi_uldivmod>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4b8b      	ldr	r3, [pc, #556]	; (801015c <UART_SetConfig+0x384>)
 800ff30:	fba3 1302 	umull	r1, r3, r3, r2
 800ff34:	095b      	lsrs	r3, r3, #5
 800ff36:	2164      	movs	r1, #100	; 0x64
 800ff38:	fb01 f303 	mul.w	r3, r1, r3
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	00db      	lsls	r3, r3, #3
 800ff40:	3332      	adds	r3, #50	; 0x32
 800ff42:	4a86      	ldr	r2, [pc, #536]	; (801015c <UART_SetConfig+0x384>)
 800ff44:	fba2 2303 	umull	r2, r3, r2, r3
 800ff48:	095b      	lsrs	r3, r3, #5
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ff50:	4498      	add	r8, r3
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	461d      	mov	r5, r3
 800ff56:	f04f 0600 	mov.w	r6, #0
 800ff5a:	46a9      	mov	r9, r5
 800ff5c:	46b2      	mov	sl, r6
 800ff5e:	eb19 0309 	adds.w	r3, r9, r9
 800ff62:	eb4a 040a 	adc.w	r4, sl, sl
 800ff66:	4699      	mov	r9, r3
 800ff68:	46a2      	mov	sl, r4
 800ff6a:	eb19 0905 	adds.w	r9, r9, r5
 800ff6e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff72:	f04f 0100 	mov.w	r1, #0
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff86:	4689      	mov	r9, r1
 800ff88:	4692      	mov	sl, r2
 800ff8a:	eb19 0005 	adds.w	r0, r9, r5
 800ff8e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	461d      	mov	r5, r3
 800ff98:	f04f 0600 	mov.w	r6, #0
 800ff9c:	196b      	adds	r3, r5, r5
 800ff9e:	eb46 0406 	adc.w	r4, r6, r6
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	f7f0 fe87 	bl	8000cb8 <__aeabi_uldivmod>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	460c      	mov	r4, r1
 800ffae:	461a      	mov	r2, r3
 800ffb0:	4b6a      	ldr	r3, [pc, #424]	; (801015c <UART_SetConfig+0x384>)
 800ffb2:	fba3 1302 	umull	r1, r3, r3, r2
 800ffb6:	095b      	lsrs	r3, r3, #5
 800ffb8:	2164      	movs	r1, #100	; 0x64
 800ffba:	fb01 f303 	mul.w	r3, r1, r3
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	3332      	adds	r3, #50	; 0x32
 800ffc4:	4a65      	ldr	r2, [pc, #404]	; (801015c <UART_SetConfig+0x384>)
 800ffc6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffca:	095b      	lsrs	r3, r3, #5
 800ffcc:	f003 0207 	and.w	r2, r3, #7
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4442      	add	r2, r8
 800ffd6:	609a      	str	r2, [r3, #8]
 800ffd8:	e26f      	b.n	80104ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffda:	f7fc fafb 	bl	800c5d4 <HAL_RCC_GetPCLK1Freq>
 800ffde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	461d      	mov	r5, r3
 800ffe4:	f04f 0600 	mov.w	r6, #0
 800ffe8:	46a8      	mov	r8, r5
 800ffea:	46b1      	mov	r9, r6
 800ffec:	eb18 0308 	adds.w	r3, r8, r8
 800fff0:	eb49 0409 	adc.w	r4, r9, r9
 800fff4:	4698      	mov	r8, r3
 800fff6:	46a1      	mov	r9, r4
 800fff8:	eb18 0805 	adds.w	r8, r8, r5
 800fffc:	eb49 0906 	adc.w	r9, r9, r6
 8010000:	f04f 0100 	mov.w	r1, #0
 8010004:	f04f 0200 	mov.w	r2, #0
 8010008:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801000c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010010:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010014:	4688      	mov	r8, r1
 8010016:	4691      	mov	r9, r2
 8010018:	eb18 0005 	adds.w	r0, r8, r5
 801001c:	eb49 0106 	adc.w	r1, r9, r6
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	461d      	mov	r5, r3
 8010026:	f04f 0600 	mov.w	r6, #0
 801002a:	196b      	adds	r3, r5, r5
 801002c:	eb46 0406 	adc.w	r4, r6, r6
 8010030:	461a      	mov	r2, r3
 8010032:	4623      	mov	r3, r4
 8010034:	f7f0 fe40 	bl	8000cb8 <__aeabi_uldivmod>
 8010038:	4603      	mov	r3, r0
 801003a:	460c      	mov	r4, r1
 801003c:	461a      	mov	r2, r3
 801003e:	4b47      	ldr	r3, [pc, #284]	; (801015c <UART_SetConfig+0x384>)
 8010040:	fba3 2302 	umull	r2, r3, r3, r2
 8010044:	095b      	lsrs	r3, r3, #5
 8010046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	461d      	mov	r5, r3
 801004e:	f04f 0600 	mov.w	r6, #0
 8010052:	46a9      	mov	r9, r5
 8010054:	46b2      	mov	sl, r6
 8010056:	eb19 0309 	adds.w	r3, r9, r9
 801005a:	eb4a 040a 	adc.w	r4, sl, sl
 801005e:	4699      	mov	r9, r3
 8010060:	46a2      	mov	sl, r4
 8010062:	eb19 0905 	adds.w	r9, r9, r5
 8010066:	eb4a 0a06 	adc.w	sl, sl, r6
 801006a:	f04f 0100 	mov.w	r1, #0
 801006e:	f04f 0200 	mov.w	r2, #0
 8010072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801007a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801007e:	4689      	mov	r9, r1
 8010080:	4692      	mov	sl, r2
 8010082:	eb19 0005 	adds.w	r0, r9, r5
 8010086:	eb4a 0106 	adc.w	r1, sl, r6
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	461d      	mov	r5, r3
 8010090:	f04f 0600 	mov.w	r6, #0
 8010094:	196b      	adds	r3, r5, r5
 8010096:	eb46 0406 	adc.w	r4, r6, r6
 801009a:	461a      	mov	r2, r3
 801009c:	4623      	mov	r3, r4
 801009e:	f7f0 fe0b 	bl	8000cb8 <__aeabi_uldivmod>
 80100a2:	4603      	mov	r3, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	461a      	mov	r2, r3
 80100a8:	4b2c      	ldr	r3, [pc, #176]	; (801015c <UART_SetConfig+0x384>)
 80100aa:	fba3 1302 	umull	r1, r3, r3, r2
 80100ae:	095b      	lsrs	r3, r3, #5
 80100b0:	2164      	movs	r1, #100	; 0x64
 80100b2:	fb01 f303 	mul.w	r3, r1, r3
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	00db      	lsls	r3, r3, #3
 80100ba:	3332      	adds	r3, #50	; 0x32
 80100bc:	4a27      	ldr	r2, [pc, #156]	; (801015c <UART_SetConfig+0x384>)
 80100be:	fba2 2303 	umull	r2, r3, r2, r3
 80100c2:	095b      	lsrs	r3, r3, #5
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80100ca:	4498      	add	r8, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	461d      	mov	r5, r3
 80100d0:	f04f 0600 	mov.w	r6, #0
 80100d4:	46a9      	mov	r9, r5
 80100d6:	46b2      	mov	sl, r6
 80100d8:	eb19 0309 	adds.w	r3, r9, r9
 80100dc:	eb4a 040a 	adc.w	r4, sl, sl
 80100e0:	4699      	mov	r9, r3
 80100e2:	46a2      	mov	sl, r4
 80100e4:	eb19 0905 	adds.w	r9, r9, r5
 80100e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80100ec:	f04f 0100 	mov.w	r1, #0
 80100f0:	f04f 0200 	mov.w	r2, #0
 80100f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010100:	4689      	mov	r9, r1
 8010102:	4692      	mov	sl, r2
 8010104:	eb19 0005 	adds.w	r0, r9, r5
 8010108:	eb4a 0106 	adc.w	r1, sl, r6
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	461d      	mov	r5, r3
 8010112:	f04f 0600 	mov.w	r6, #0
 8010116:	196b      	adds	r3, r5, r5
 8010118:	eb46 0406 	adc.w	r4, r6, r6
 801011c:	461a      	mov	r2, r3
 801011e:	4623      	mov	r3, r4
 8010120:	f7f0 fdca 	bl	8000cb8 <__aeabi_uldivmod>
 8010124:	4603      	mov	r3, r0
 8010126:	460c      	mov	r4, r1
 8010128:	461a      	mov	r2, r3
 801012a:	4b0c      	ldr	r3, [pc, #48]	; (801015c <UART_SetConfig+0x384>)
 801012c:	fba3 1302 	umull	r1, r3, r3, r2
 8010130:	095b      	lsrs	r3, r3, #5
 8010132:	2164      	movs	r1, #100	; 0x64
 8010134:	fb01 f303 	mul.w	r3, r1, r3
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	3332      	adds	r3, #50	; 0x32
 801013e:	4a07      	ldr	r2, [pc, #28]	; (801015c <UART_SetConfig+0x384>)
 8010140:	fba2 2303 	umull	r2, r3, r2, r3
 8010144:	095b      	lsrs	r3, r3, #5
 8010146:	f003 0207 	and.w	r2, r3, #7
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4442      	add	r2, r8
 8010150:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010152:	e1b2      	b.n	80104ba <UART_SetConfig+0x6e2>
 8010154:	40011000 	.word	0x40011000
 8010158:	40011400 	.word	0x40011400
 801015c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4ad7      	ldr	r2, [pc, #860]	; (80104c4 <UART_SetConfig+0x6ec>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d005      	beq.n	8010176 <UART_SetConfig+0x39e>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4ad6      	ldr	r2, [pc, #856]	; (80104c8 <UART_SetConfig+0x6f0>)
 8010170:	4293      	cmp	r3, r2
 8010172:	f040 80d1 	bne.w	8010318 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010176:	f7fc fa41 	bl	800c5fc <HAL_RCC_GetPCLK2Freq>
 801017a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	469a      	mov	sl, r3
 8010180:	f04f 0b00 	mov.w	fp, #0
 8010184:	46d0      	mov	r8, sl
 8010186:	46d9      	mov	r9, fp
 8010188:	eb18 0308 	adds.w	r3, r8, r8
 801018c:	eb49 0409 	adc.w	r4, r9, r9
 8010190:	4698      	mov	r8, r3
 8010192:	46a1      	mov	r9, r4
 8010194:	eb18 080a 	adds.w	r8, r8, sl
 8010198:	eb49 090b 	adc.w	r9, r9, fp
 801019c:	f04f 0100 	mov.w	r1, #0
 80101a0:	f04f 0200 	mov.w	r2, #0
 80101a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101b0:	4688      	mov	r8, r1
 80101b2:	4691      	mov	r9, r2
 80101b4:	eb1a 0508 	adds.w	r5, sl, r8
 80101b8:	eb4b 0609 	adc.w	r6, fp, r9
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	4619      	mov	r1, r3
 80101c2:	f04f 0200 	mov.w	r2, #0
 80101c6:	f04f 0300 	mov.w	r3, #0
 80101ca:	f04f 0400 	mov.w	r4, #0
 80101ce:	0094      	lsls	r4, r2, #2
 80101d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101d4:	008b      	lsls	r3, r1, #2
 80101d6:	461a      	mov	r2, r3
 80101d8:	4623      	mov	r3, r4
 80101da:	4628      	mov	r0, r5
 80101dc:	4631      	mov	r1, r6
 80101de:	f7f0 fd6b 	bl	8000cb8 <__aeabi_uldivmod>
 80101e2:	4603      	mov	r3, r0
 80101e4:	460c      	mov	r4, r1
 80101e6:	461a      	mov	r2, r3
 80101e8:	4bb8      	ldr	r3, [pc, #736]	; (80104cc <UART_SetConfig+0x6f4>)
 80101ea:	fba3 2302 	umull	r2, r3, r3, r2
 80101ee:	095b      	lsrs	r3, r3, #5
 80101f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	469b      	mov	fp, r3
 80101f8:	f04f 0c00 	mov.w	ip, #0
 80101fc:	46d9      	mov	r9, fp
 80101fe:	46e2      	mov	sl, ip
 8010200:	eb19 0309 	adds.w	r3, r9, r9
 8010204:	eb4a 040a 	adc.w	r4, sl, sl
 8010208:	4699      	mov	r9, r3
 801020a:	46a2      	mov	sl, r4
 801020c:	eb19 090b 	adds.w	r9, r9, fp
 8010210:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010214:	f04f 0100 	mov.w	r1, #0
 8010218:	f04f 0200 	mov.w	r2, #0
 801021c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010228:	4689      	mov	r9, r1
 801022a:	4692      	mov	sl, r2
 801022c:	eb1b 0509 	adds.w	r5, fp, r9
 8010230:	eb4c 060a 	adc.w	r6, ip, sl
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4619      	mov	r1, r3
 801023a:	f04f 0200 	mov.w	r2, #0
 801023e:	f04f 0300 	mov.w	r3, #0
 8010242:	f04f 0400 	mov.w	r4, #0
 8010246:	0094      	lsls	r4, r2, #2
 8010248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801024c:	008b      	lsls	r3, r1, #2
 801024e:	461a      	mov	r2, r3
 8010250:	4623      	mov	r3, r4
 8010252:	4628      	mov	r0, r5
 8010254:	4631      	mov	r1, r6
 8010256:	f7f0 fd2f 	bl	8000cb8 <__aeabi_uldivmod>
 801025a:	4603      	mov	r3, r0
 801025c:	460c      	mov	r4, r1
 801025e:	461a      	mov	r2, r3
 8010260:	4b9a      	ldr	r3, [pc, #616]	; (80104cc <UART_SetConfig+0x6f4>)
 8010262:	fba3 1302 	umull	r1, r3, r3, r2
 8010266:	095b      	lsrs	r3, r3, #5
 8010268:	2164      	movs	r1, #100	; 0x64
 801026a:	fb01 f303 	mul.w	r3, r1, r3
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	011b      	lsls	r3, r3, #4
 8010272:	3332      	adds	r3, #50	; 0x32
 8010274:	4a95      	ldr	r2, [pc, #596]	; (80104cc <UART_SetConfig+0x6f4>)
 8010276:	fba2 2303 	umull	r2, r3, r2, r3
 801027a:	095b      	lsrs	r3, r3, #5
 801027c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010280:	4498      	add	r8, r3
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	469b      	mov	fp, r3
 8010286:	f04f 0c00 	mov.w	ip, #0
 801028a:	46d9      	mov	r9, fp
 801028c:	46e2      	mov	sl, ip
 801028e:	eb19 0309 	adds.w	r3, r9, r9
 8010292:	eb4a 040a 	adc.w	r4, sl, sl
 8010296:	4699      	mov	r9, r3
 8010298:	46a2      	mov	sl, r4
 801029a:	eb19 090b 	adds.w	r9, r9, fp
 801029e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102a2:	f04f 0100 	mov.w	r1, #0
 80102a6:	f04f 0200 	mov.w	r2, #0
 80102aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102b6:	4689      	mov	r9, r1
 80102b8:	4692      	mov	sl, r2
 80102ba:	eb1b 0509 	adds.w	r5, fp, r9
 80102be:	eb4c 060a 	adc.w	r6, ip, sl
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	4619      	mov	r1, r3
 80102c8:	f04f 0200 	mov.w	r2, #0
 80102cc:	f04f 0300 	mov.w	r3, #0
 80102d0:	f04f 0400 	mov.w	r4, #0
 80102d4:	0094      	lsls	r4, r2, #2
 80102d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102da:	008b      	lsls	r3, r1, #2
 80102dc:	461a      	mov	r2, r3
 80102de:	4623      	mov	r3, r4
 80102e0:	4628      	mov	r0, r5
 80102e2:	4631      	mov	r1, r6
 80102e4:	f7f0 fce8 	bl	8000cb8 <__aeabi_uldivmod>
 80102e8:	4603      	mov	r3, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	461a      	mov	r2, r3
 80102ee:	4b77      	ldr	r3, [pc, #476]	; (80104cc <UART_SetConfig+0x6f4>)
 80102f0:	fba3 1302 	umull	r1, r3, r3, r2
 80102f4:	095b      	lsrs	r3, r3, #5
 80102f6:	2164      	movs	r1, #100	; 0x64
 80102f8:	fb01 f303 	mul.w	r3, r1, r3
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	011b      	lsls	r3, r3, #4
 8010300:	3332      	adds	r3, #50	; 0x32
 8010302:	4a72      	ldr	r2, [pc, #456]	; (80104cc <UART_SetConfig+0x6f4>)
 8010304:	fba2 2303 	umull	r2, r3, r2, r3
 8010308:	095b      	lsrs	r3, r3, #5
 801030a:	f003 020f 	and.w	r2, r3, #15
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4442      	add	r2, r8
 8010314:	609a      	str	r2, [r3, #8]
 8010316:	e0d0      	b.n	80104ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010318:	f7fc f95c 	bl	800c5d4 <HAL_RCC_GetPCLK1Freq>
 801031c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	469a      	mov	sl, r3
 8010322:	f04f 0b00 	mov.w	fp, #0
 8010326:	46d0      	mov	r8, sl
 8010328:	46d9      	mov	r9, fp
 801032a:	eb18 0308 	adds.w	r3, r8, r8
 801032e:	eb49 0409 	adc.w	r4, r9, r9
 8010332:	4698      	mov	r8, r3
 8010334:	46a1      	mov	r9, r4
 8010336:	eb18 080a 	adds.w	r8, r8, sl
 801033a:	eb49 090b 	adc.w	r9, r9, fp
 801033e:	f04f 0100 	mov.w	r1, #0
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801034a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801034e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010352:	4688      	mov	r8, r1
 8010354:	4691      	mov	r9, r2
 8010356:	eb1a 0508 	adds.w	r5, sl, r8
 801035a:	eb4b 0609 	adc.w	r6, fp, r9
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	4619      	mov	r1, r3
 8010364:	f04f 0200 	mov.w	r2, #0
 8010368:	f04f 0300 	mov.w	r3, #0
 801036c:	f04f 0400 	mov.w	r4, #0
 8010370:	0094      	lsls	r4, r2, #2
 8010372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010376:	008b      	lsls	r3, r1, #2
 8010378:	461a      	mov	r2, r3
 801037a:	4623      	mov	r3, r4
 801037c:	4628      	mov	r0, r5
 801037e:	4631      	mov	r1, r6
 8010380:	f7f0 fc9a 	bl	8000cb8 <__aeabi_uldivmod>
 8010384:	4603      	mov	r3, r0
 8010386:	460c      	mov	r4, r1
 8010388:	461a      	mov	r2, r3
 801038a:	4b50      	ldr	r3, [pc, #320]	; (80104cc <UART_SetConfig+0x6f4>)
 801038c:	fba3 2302 	umull	r2, r3, r3, r2
 8010390:	095b      	lsrs	r3, r3, #5
 8010392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	469b      	mov	fp, r3
 801039a:	f04f 0c00 	mov.w	ip, #0
 801039e:	46d9      	mov	r9, fp
 80103a0:	46e2      	mov	sl, ip
 80103a2:	eb19 0309 	adds.w	r3, r9, r9
 80103a6:	eb4a 040a 	adc.w	r4, sl, sl
 80103aa:	4699      	mov	r9, r3
 80103ac:	46a2      	mov	sl, r4
 80103ae:	eb19 090b 	adds.w	r9, r9, fp
 80103b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103b6:	f04f 0100 	mov.w	r1, #0
 80103ba:	f04f 0200 	mov.w	r2, #0
 80103be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103ca:	4689      	mov	r9, r1
 80103cc:	4692      	mov	sl, r2
 80103ce:	eb1b 0509 	adds.w	r5, fp, r9
 80103d2:	eb4c 060a 	adc.w	r6, ip, sl
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	4619      	mov	r1, r3
 80103dc:	f04f 0200 	mov.w	r2, #0
 80103e0:	f04f 0300 	mov.w	r3, #0
 80103e4:	f04f 0400 	mov.w	r4, #0
 80103e8:	0094      	lsls	r4, r2, #2
 80103ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103ee:	008b      	lsls	r3, r1, #2
 80103f0:	461a      	mov	r2, r3
 80103f2:	4623      	mov	r3, r4
 80103f4:	4628      	mov	r0, r5
 80103f6:	4631      	mov	r1, r6
 80103f8:	f7f0 fc5e 	bl	8000cb8 <__aeabi_uldivmod>
 80103fc:	4603      	mov	r3, r0
 80103fe:	460c      	mov	r4, r1
 8010400:	461a      	mov	r2, r3
 8010402:	4b32      	ldr	r3, [pc, #200]	; (80104cc <UART_SetConfig+0x6f4>)
 8010404:	fba3 1302 	umull	r1, r3, r3, r2
 8010408:	095b      	lsrs	r3, r3, #5
 801040a:	2164      	movs	r1, #100	; 0x64
 801040c:	fb01 f303 	mul.w	r3, r1, r3
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	011b      	lsls	r3, r3, #4
 8010414:	3332      	adds	r3, #50	; 0x32
 8010416:	4a2d      	ldr	r2, [pc, #180]	; (80104cc <UART_SetConfig+0x6f4>)
 8010418:	fba2 2303 	umull	r2, r3, r2, r3
 801041c:	095b      	lsrs	r3, r3, #5
 801041e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010422:	4498      	add	r8, r3
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	469b      	mov	fp, r3
 8010428:	f04f 0c00 	mov.w	ip, #0
 801042c:	46d9      	mov	r9, fp
 801042e:	46e2      	mov	sl, ip
 8010430:	eb19 0309 	adds.w	r3, r9, r9
 8010434:	eb4a 040a 	adc.w	r4, sl, sl
 8010438:	4699      	mov	r9, r3
 801043a:	46a2      	mov	sl, r4
 801043c:	eb19 090b 	adds.w	r9, r9, fp
 8010440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010444:	f04f 0100 	mov.w	r1, #0
 8010448:	f04f 0200 	mov.w	r2, #0
 801044c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010458:	4689      	mov	r9, r1
 801045a:	4692      	mov	sl, r2
 801045c:	eb1b 0509 	adds.w	r5, fp, r9
 8010460:	eb4c 060a 	adc.w	r6, ip, sl
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	4619      	mov	r1, r3
 801046a:	f04f 0200 	mov.w	r2, #0
 801046e:	f04f 0300 	mov.w	r3, #0
 8010472:	f04f 0400 	mov.w	r4, #0
 8010476:	0094      	lsls	r4, r2, #2
 8010478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801047c:	008b      	lsls	r3, r1, #2
 801047e:	461a      	mov	r2, r3
 8010480:	4623      	mov	r3, r4
 8010482:	4628      	mov	r0, r5
 8010484:	4631      	mov	r1, r6
 8010486:	f7f0 fc17 	bl	8000cb8 <__aeabi_uldivmod>
 801048a:	4603      	mov	r3, r0
 801048c:	460c      	mov	r4, r1
 801048e:	461a      	mov	r2, r3
 8010490:	4b0e      	ldr	r3, [pc, #56]	; (80104cc <UART_SetConfig+0x6f4>)
 8010492:	fba3 1302 	umull	r1, r3, r3, r2
 8010496:	095b      	lsrs	r3, r3, #5
 8010498:	2164      	movs	r1, #100	; 0x64
 801049a:	fb01 f303 	mul.w	r3, r1, r3
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	011b      	lsls	r3, r3, #4
 80104a2:	3332      	adds	r3, #50	; 0x32
 80104a4:	4a09      	ldr	r2, [pc, #36]	; (80104cc <UART_SetConfig+0x6f4>)
 80104a6:	fba2 2303 	umull	r2, r3, r2, r3
 80104aa:	095b      	lsrs	r3, r3, #5
 80104ac:	f003 020f 	and.w	r2, r3, #15
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4442      	add	r2, r8
 80104b6:	609a      	str	r2, [r3, #8]
}
 80104b8:	e7ff      	b.n	80104ba <UART_SetConfig+0x6e2>
 80104ba:	bf00      	nop
 80104bc:	3714      	adds	r7, #20
 80104be:	46bd      	mov	sp, r7
 80104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c4:	40011000 	.word	0x40011000
 80104c8:	40011400 	.word	0x40011400
 80104cc:	51eb851f 	.word	0x51eb851f

080104d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80104d0:	b084      	sub	sp, #16
 80104d2:	b480      	push	{r7}
 80104d4:	b085      	sub	sp, #20
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	f107 001c 	add.w	r0, r7, #28
 80104de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80104e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80104e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80104ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80104ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80104f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80104f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80104f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80104fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	4313      	orrs	r3, r2
 8010500:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801050a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	431a      	orrs	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	b004      	add	sp, #16
 8010524:	4770      	bx	lr

08010526 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010526:	b480      	push	{r7}
 8010528:	b083      	sub	sp, #12
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	370c      	adds	r7, #12
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr

08010562 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010562:	b580      	push	{r7, lr}
 8010564:	b082      	sub	sp, #8
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2203      	movs	r2, #3
 801056e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010570:	2002      	movs	r0, #2
 8010572:	f7f9 fbc5 	bl	8009d00 <HAL_Delay>
  
  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f003 0303 	and.w	r3, r3, #3
}
 8010590:	4618      	mov	r0, r3
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80105c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80105c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80105d6:	f023 030f 	bic.w	r3, r3, #15
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	431a      	orrs	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	b2db      	uxtb	r3, r3
}
 80105fe:	4618      	mov	r0, r3
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr

0801060a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801060a:	b480      	push	{r7}
 801060c:	b085      	sub	sp, #20
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3314      	adds	r3, #20
 8010618:	461a      	mov	r2, r3
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	4413      	add	r3, r2
 801061e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
}  
 8010624:	4618      	mov	r0, r3
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010656:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801065c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010662:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	4313      	orrs	r3, r2
 8010668:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	431a      	orrs	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801067a:	2300      	movs	r3, #0

}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b088      	sub	sp, #32
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010696:	2310      	movs	r3, #16
 8010698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801069a:	2340      	movs	r3, #64	; 0x40
 801069c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801069e:	2300      	movs	r3, #0
 80106a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	4619      	mov	r1, r3
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7ff ff74 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80106b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b8:	2110      	movs	r1, #16
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 fa40 	bl	8010b40 <SDMMC_GetCmdResp1>
 80106c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c2:	69fb      	ldr	r3, [r7, #28]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3720      	adds	r7, #32
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b088      	sub	sp, #32
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80106da:	2311      	movs	r3, #17
 80106dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106de:	2340      	movs	r3, #64	; 0x40
 80106e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e2:	2300      	movs	r3, #0
 80106e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106ec:	f107 0308 	add.w	r3, r7, #8
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7ff ff52 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80106f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106fc:	2111      	movs	r1, #17
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 fa1e 	bl	8010b40 <SDMMC_GetCmdResp1>
 8010704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010706:	69fb      	ldr	r3, [r7, #28]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801071e:	2312      	movs	r3, #18
 8010720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010722:	2340      	movs	r3, #64	; 0x40
 8010724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801072e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010730:	f107 0308 	add.w	r3, r7, #8
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff ff30 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801073c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010740:	2112      	movs	r1, #18
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f9fc 	bl	8010b40 <SDMMC_GetCmdResp1>
 8010748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074a:	69fb      	ldr	r3, [r7, #28]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3720      	adds	r7, #32
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b088      	sub	sp, #32
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010762:	2318      	movs	r3, #24
 8010764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010766:	2340      	movs	r3, #64	; 0x40
 8010768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801076a:	2300      	movs	r3, #0
 801076c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010772:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010774:	f107 0308 	add.w	r3, r7, #8
 8010778:	4619      	mov	r1, r3
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff ff0e 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010780:	f241 3288 	movw	r2, #5000	; 0x1388
 8010784:	2118      	movs	r1, #24
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f9da 	bl	8010b40 <SDMMC_GetCmdResp1>
 801078c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801078e:	69fb      	ldr	r3, [r7, #28]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3720      	adds	r7, #32
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b088      	sub	sp, #32
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80107a6:	2319      	movs	r3, #25
 80107a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107aa:	2340      	movs	r3, #64	; 0x40
 80107ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107ae:	2300      	movs	r3, #0
 80107b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107b8:	f107 0308 	add.w	r3, r7, #8
 80107bc:	4619      	mov	r1, r3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff feec 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80107c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c8:	2119      	movs	r1, #25
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 f9b8 	bl	8010b40 <SDMMC_GetCmdResp1>
 80107d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d2:	69fb      	ldr	r3, [r7, #28]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3720      	adds	r7, #32
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b088      	sub	sp, #32
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80107e4:	2300      	movs	r3, #0
 80107e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80107e8:	230c      	movs	r3, #12
 80107ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ec:	2340      	movs	r3, #64	; 0x40
 80107ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107f0:	2300      	movs	r3, #0
 80107f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107fa:	f107 0308 	add.w	r3, r7, #8
 80107fe:	4619      	mov	r1, r3
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7ff fecb 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010806:	4a05      	ldr	r2, [pc, #20]	; (801081c <SDMMC_CmdStopTransfer+0x40>)
 8010808:	210c      	movs	r1, #12
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f998 	bl	8010b40 <SDMMC_GetCmdResp1>
 8010810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010812:	69fb      	ldr	r3, [r7, #28]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3720      	adds	r7, #32
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	05f5e100 	.word	0x05f5e100

08010820 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08a      	sub	sp, #40	; 0x28
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010830:	2307      	movs	r3, #7
 8010832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010834:	2340      	movs	r3, #64	; 0x40
 8010836:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010838:	2300      	movs	r3, #0
 801083a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010840:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010842:	f107 0310 	add.w	r3, r7, #16
 8010846:	4619      	mov	r1, r3
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f7ff fea7 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801084e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010852:	2107      	movs	r1, #7
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f000 f973 	bl	8010b40 <SDMMC_GetCmdResp1>
 801085a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801085e:	4618      	mov	r0, r3
 8010860:	3728      	adds	r7, #40	; 0x28
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b088      	sub	sp, #32
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801086e:	2300      	movs	r3, #0
 8010870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010872:	2300      	movs	r3, #0
 8010874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010876:	2300      	movs	r3, #0
 8010878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010884:	f107 0308 	add.w	r3, r7, #8
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff fe86 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f000 f92d 	bl	8010af0 <SDMMC_GetCmdError>
 8010896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010898:	69fb      	ldr	r3, [r7, #28]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3720      	adds	r7, #32
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b088      	sub	sp, #32
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80108aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80108ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80108b0:	2308      	movs	r3, #8
 80108b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108b4:	2340      	movs	r3, #64	; 0x40
 80108b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108b8:	2300      	movs	r3, #0
 80108ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108c2:	f107 0308 	add.w	r3, r7, #8
 80108c6:	4619      	mov	r1, r3
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f7ff fe67 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 fb16 	bl	8010f00 <SDMMC_GetCmdResp7>
 80108d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108d6:	69fb      	ldr	r3, [r7, #28]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3720      	adds	r7, #32
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b088      	sub	sp, #32
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80108ee:	2337      	movs	r3, #55	; 0x37
 80108f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108f2:	2340      	movs	r3, #64	; 0x40
 80108f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108f6:	2300      	movs	r3, #0
 80108f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010900:	f107 0308 	add.w	r3, r7, #8
 8010904:	4619      	mov	r1, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff fe48 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801090c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010910:	2137      	movs	r1, #55	; 0x37
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f914 	bl	8010b40 <SDMMC_GetCmdResp1>
 8010918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801091a:	69fb      	ldr	r3, [r7, #28]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801093a:	2329      	movs	r3, #41	; 0x29
 801093c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801093e:	2340      	movs	r3, #64	; 0x40
 8010940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010942:	2300      	movs	r3, #0
 8010944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801094a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801094c:	f107 0308 	add.w	r3, r7, #8
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff fe22 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fa23 	bl	8010da4 <SDMMC_GetCmdResp3>
 801095e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010960:	69fb      	ldr	r3, [r7, #28]
}
 8010962:	4618      	mov	r0, r3
 8010964:	3720      	adds	r7, #32
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b088      	sub	sp, #32
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
 8010972:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010978:	2306      	movs	r3, #6
 801097a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801097c:	2340      	movs	r3, #64	; 0x40
 801097e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010980:	2300      	movs	r3, #0
 8010982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010988:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801098a:	f107 0308 	add.w	r3, r7, #8
 801098e:	4619      	mov	r1, r3
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff fe03 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010996:	f241 3288 	movw	r2, #5000	; 0x1388
 801099a:	2106      	movs	r1, #6
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 f8cf 	bl	8010b40 <SDMMC_GetCmdResp1>
 80109a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a4:	69fb      	ldr	r3, [r7, #28]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b088      	sub	sp, #32
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80109b6:	2300      	movs	r3, #0
 80109b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80109ba:	2333      	movs	r3, #51	; 0x33
 80109bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109be:	2340      	movs	r3, #64	; 0x40
 80109c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c2:	2300      	movs	r3, #0
 80109c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109cc:	f107 0308 	add.w	r3, r7, #8
 80109d0:	4619      	mov	r1, r3
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff fde2 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80109d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109dc:	2133      	movs	r1, #51	; 0x33
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 f8ae 	bl	8010b40 <SDMMC_GetCmdResp1>
 80109e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e6:	69fb      	ldr	r3, [r7, #28]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3720      	adds	r7, #32
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b088      	sub	sp, #32
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80109f8:	2300      	movs	r3, #0
 80109fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80109fc:	2302      	movs	r3, #2
 80109fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a00:	23c0      	movs	r3, #192	; 0xc0
 8010a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a04:	2300      	movs	r3, #0
 8010a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a0e:	f107 0308 	add.w	r3, r7, #8
 8010a12:	4619      	mov	r1, r3
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7ff fdc1 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f97c 	bl	8010d18 <SDMMC_GetCmdResp2>
 8010a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a22:	69fb      	ldr	r3, [r7, #28]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3720      	adds	r7, #32
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b088      	sub	sp, #32
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a3a:	2309      	movs	r3, #9
 8010a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a3e:	23c0      	movs	r3, #192	; 0xc0
 8010a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a42:	2300      	movs	r3, #0
 8010a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a4c:	f107 0308 	add.w	r3, r7, #8
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff fda2 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 f95d 	bl	8010d18 <SDMMC_GetCmdResp2>
 8010a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a60:	69fb      	ldr	r3, [r7, #28]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3720      	adds	r7, #32
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b088      	sub	sp, #32
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a74:	2300      	movs	r3, #0
 8010a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010a78:	2303      	movs	r3, #3
 8010a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a7c:	2340      	movs	r3, #64	; 0x40
 8010a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a80:	2300      	movs	r3, #0
 8010a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a8a:	f107 0308 	add.w	r3, r7, #8
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fd83 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	2103      	movs	r1, #3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f9bc 	bl	8010e18 <SDMMC_GetCmdResp6>
 8010aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa2:	69fb      	ldr	r3, [r7, #28]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3720      	adds	r7, #32
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010aba:	230d      	movs	r3, #13
 8010abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010abe:	2340      	movs	r3, #64	; 0x40
 8010ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010acc:	f107 0308 	add.w	r3, r7, #8
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7ff fd62 	bl	801059c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010adc:	210d      	movs	r1, #13
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f82e 	bl	8010b40 <SDMMC_GetCmdResp1>
 8010ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3720      	adds	r7, #32
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010af0:	b490      	push	{r4, r7}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010af8:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <SDMMC_GetCmdError+0x48>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4a0f      	ldr	r2, [pc, #60]	; (8010b3c <SDMMC_GetCmdError+0x4c>)
 8010afe:	fba2 2303 	umull	r2, r3, r2, r3
 8010b02:	0a5b      	lsrs	r3, r3, #9
 8010b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b0c:	4623      	mov	r3, r4
 8010b0e:	1e5c      	subs	r4, r3, #1
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b18:	e009      	b.n	8010b2e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d0f2      	beq.n	8010b0c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	22c5      	movs	r2, #197	; 0xc5
 8010b2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bc90      	pop	{r4, r7}
 8010b36:	4770      	bx	lr
 8010b38:	20000000 	.word	0x20000000
 8010b3c:	10624dd3 	.word	0x10624dd3

08010b40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b40:	b590      	push	{r4, r7, lr}
 8010b42:	b087      	sub	sp, #28
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010b4e:	4b6f      	ldr	r3, [pc, #444]	; (8010d0c <SDMMC_GetCmdResp1+0x1cc>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a6f      	ldr	r2, [pc, #444]	; (8010d10 <SDMMC_GetCmdResp1+0x1d0>)
 8010b54:	fba2 2303 	umull	r2, r3, r2, r3
 8010b58:	0a5b      	lsrs	r3, r3, #9
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b60:	4623      	mov	r3, r4
 8010b62:	1e5c      	subs	r4, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d102      	bne.n	8010b6e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b6c:	e0c9      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b72:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d0f0      	beq.n	8010b60 <SDMMC_GetCmdResp1+0x20>
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1eb      	bne.n	8010b60 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b8c:	f003 0304 	and.w	r3, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d004      	beq.n	8010b9e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2204      	movs	r2, #4
 8010b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b9a:	2304      	movs	r3, #4
 8010b9c:	e0b1      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba2:	f003 0301 	and.w	r3, r3, #1
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2201      	movs	r2, #1
 8010bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	e0a6      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	22c5      	movs	r2, #197	; 0xc5
 8010bb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff fd18 	bl	80105f0 <SDIO_GetCommandResponse>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	7afb      	ldrb	r3, [r7, #11]
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d001      	beq.n	8010bce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e099      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010bce:	2100      	movs	r1, #0
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f7ff fd1a 	bl	801060a <SDIO_GetResponse>
 8010bd6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010bd8:	693a      	ldr	r2, [r7, #16]
 8010bda:	4b4e      	ldr	r3, [pc, #312]	; (8010d14 <SDMMC_GetCmdResp1+0x1d4>)
 8010bdc:	4013      	ands	r3, r2
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e08d      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	da02      	bge.n	8010bf2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010bf0:	e087      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010bfc:	2340      	movs	r3, #64	; 0x40
 8010bfe:	e080      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c0a:	2380      	movs	r3, #128	; 0x80
 8010c0c:	e079      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d002      	beq.n	8010c1e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c1c:	e071      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c2c:	e069      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c3c:	e061      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c4c:	e059      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c5c:	e051      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c6c:	e049      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010c7c:	e041      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d002      	beq.n	8010c8e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c8c:	e039      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c9c:	e031      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010cac:	e029      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010cb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010cbc:	e021      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010ccc:	e019      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010cdc:	e011      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010cec:	e009      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f003 0308 	and.w	r3, r3, #8
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010cf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010cfc:	e001      	b.n	8010d02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	371c      	adds	r7, #28
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd90      	pop	{r4, r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	20000000 	.word	0x20000000
 8010d10:	10624dd3 	.word	0x10624dd3
 8010d14:	fdffe008 	.word	0xfdffe008

08010d18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010d18:	b490      	push	{r4, r7}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d20:	4b1e      	ldr	r3, [pc, #120]	; (8010d9c <SDMMC_GetCmdResp2+0x84>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a1e      	ldr	r2, [pc, #120]	; (8010da0 <SDMMC_GetCmdResp2+0x88>)
 8010d26:	fba2 2303 	umull	r2, r3, r2, r3
 8010d2a:	0a5b      	lsrs	r3, r3, #9
 8010d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d34:	4623      	mov	r3, r4
 8010d36:	1e5c      	subs	r4, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d102      	bne.n	8010d42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d40:	e026      	b.n	8010d90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d0f0      	beq.n	8010d34 <SDMMC_GetCmdResp2+0x1c>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1eb      	bne.n	8010d34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d60:	f003 0304 	and.w	r3, r3, #4
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d004      	beq.n	8010d72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2204      	movs	r2, #4
 8010d6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d6e:	2304      	movs	r3, #4
 8010d70:	e00e      	b.n	8010d90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d76:	f003 0301 	and.w	r3, r3, #1
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d004      	beq.n	8010d88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2201      	movs	r2, #1
 8010d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d84:	2301      	movs	r3, #1
 8010d86:	e003      	b.n	8010d90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	22c5      	movs	r2, #197	; 0xc5
 8010d8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010d8e:	2300      	movs	r3, #0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3710      	adds	r7, #16
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bc90      	pop	{r4, r7}
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	20000000 	.word	0x20000000
 8010da0:	10624dd3 	.word	0x10624dd3

08010da4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010da4:	b490      	push	{r4, r7}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010dac:	4b18      	ldr	r3, [pc, #96]	; (8010e10 <SDMMC_GetCmdResp3+0x6c>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a18      	ldr	r2, [pc, #96]	; (8010e14 <SDMMC_GetCmdResp3+0x70>)
 8010db2:	fba2 2303 	umull	r2, r3, r2, r3
 8010db6:	0a5b      	lsrs	r3, r3, #9
 8010db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010dc0:	4623      	mov	r3, r4
 8010dc2:	1e5c      	subs	r4, r3, #1
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010dcc:	e01b      	b.n	8010e06 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0f0      	beq.n	8010dc0 <SDMMC_GetCmdResp3+0x1c>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1eb      	bne.n	8010dc0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dec:	f003 0304 	and.w	r3, r3, #4
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d004      	beq.n	8010dfe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2204      	movs	r2, #4
 8010df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dfa:	2304      	movs	r3, #4
 8010dfc:	e003      	b.n	8010e06 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	22c5      	movs	r2, #197	; 0xc5
 8010e02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bc90      	pop	{r4, r7}
 8010e0e:	4770      	bx	lr
 8010e10:	20000000 	.word	0x20000000
 8010e14:	10624dd3 	.word	0x10624dd3

08010e18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010e18:	b590      	push	{r4, r7, lr}
 8010e1a:	b087      	sub	sp, #28
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	460b      	mov	r3, r1
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e26:	4b34      	ldr	r3, [pc, #208]	; (8010ef8 <SDMMC_GetCmdResp6+0xe0>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a34      	ldr	r2, [pc, #208]	; (8010efc <SDMMC_GetCmdResp6+0xe4>)
 8010e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8010e30:	0a5b      	lsrs	r3, r3, #9
 8010e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e36:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e3a:	4623      	mov	r3, r4
 8010e3c:	1e5c      	subs	r4, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d102      	bne.n	8010e48 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e46:	e052      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d0f0      	beq.n	8010e3a <SDMMC_GetCmdResp6+0x22>
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d1eb      	bne.n	8010e3a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e66:	f003 0304 	and.w	r3, r3, #4
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2204      	movs	r2, #4
 8010e72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e74:	2304      	movs	r3, #4
 8010e76:	e03a      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2201      	movs	r2, #1
 8010e88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e02f      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f7ff fbae 	bl	80105f0 <SDIO_GetCommandResponse>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	7afb      	ldrb	r3, [r7, #11]
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d001      	beq.n	8010ea2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e025      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	22c5      	movs	r2, #197	; 0xc5
 8010ea6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ea8:	2100      	movs	r1, #0
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f7ff fbad 	bl	801060a <SDIO_GetResponse>
 8010eb0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	0c1b      	lsrs	r3, r3, #16
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e011      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ed8:	e009      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ee8:	e001      	b.n	8010eee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	371c      	adds	r7, #28
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd90      	pop	{r4, r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20000000 	.word	0x20000000
 8010efc:	10624dd3 	.word	0x10624dd3

08010f00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010f00:	b490      	push	{r4, r7}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f08:	4b21      	ldr	r3, [pc, #132]	; (8010f90 <SDMMC_GetCmdResp7+0x90>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a21      	ldr	r2, [pc, #132]	; (8010f94 <SDMMC_GetCmdResp7+0x94>)
 8010f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f12:	0a5b      	lsrs	r3, r3, #9
 8010f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f1c:	4623      	mov	r3, r4
 8010f1e:	1e5c      	subs	r4, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d102      	bne.n	8010f2a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f28:	e02c      	b.n	8010f84 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d0f0      	beq.n	8010f1c <SDMMC_GetCmdResp7+0x1c>
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1eb      	bne.n	8010f1c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f48:	f003 0304 	and.w	r3, r3, #4
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d004      	beq.n	8010f5a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2204      	movs	r2, #4
 8010f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f56:	2304      	movs	r3, #4
 8010f58:	e014      	b.n	8010f84 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d004      	beq.n	8010f70 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	e009      	b.n	8010f84 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2240      	movs	r2, #64	; 0x40
 8010f80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010f82:	2300      	movs	r3, #0
  
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bc90      	pop	{r4, r7}
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	20000000 	.word	0x20000000
 8010f94:	10624dd3 	.word	0x10624dd3

08010f98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f9c:	4904      	ldr	r1, [pc, #16]	; (8010fb0 <MX_FATFS_Init+0x18>)
 8010f9e:	4805      	ldr	r0, [pc, #20]	; (8010fb4 <MX_FATFS_Init+0x1c>)
 8010fa0:	f003 fb9c 	bl	80146dc <FATFS_LinkDriver>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	4b03      	ldr	r3, [pc, #12]	; (8010fb8 <MX_FATFS_Init+0x20>)
 8010faa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010fac:	bf00      	nop
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	2004ab08 	.word	0x2004ab08
 8010fb4:	08018f98 	.word	0x08018f98
 8010fb8:	2004ab04 	.word	0x2004ab04

08010fbc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010fc6:	f000 f896 	bl	80110f6 <BSP_SD_IsDetected>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d001      	beq.n	8010fd4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e012      	b.n	8010ffa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010fd4:	480b      	ldr	r0, [pc, #44]	; (8011004 <BSP_SD_Init+0x48>)
 8010fd6:	f7fb ffa5 	bl	800cf24 <HAL_SD_Init>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d109      	bne.n	8010ff8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010fe8:	4806      	ldr	r0, [pc, #24]	; (8011004 <BSP_SD_Init+0x48>)
 8010fea:	f7fc fd4f 	bl	800da8c <HAL_SD_ConfigWideBusOperation>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d001      	beq.n	8010ff8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	2004a904 	.word	0x2004a904

08011008 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011014:	2300      	movs	r3, #0
 8011016:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	68f9      	ldr	r1, [r7, #12]
 801101e:	4806      	ldr	r0, [pc, #24]	; (8011038 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011020:	f7fc f810 	bl	800d044 <HAL_SD_ReadBlocks_DMA>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d001      	beq.n	801102e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801102a:	2301      	movs	r3, #1
 801102c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	2004a904 	.word	0x2004a904

0801103c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	68f9      	ldr	r1, [r7, #12]
 8011052:	4806      	ldr	r0, [pc, #24]	; (801106c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011054:	f7fc f8de 	bl	800d214 <HAL_SD_WriteBlocks_DMA>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801105e:	2301      	movs	r3, #1
 8011060:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011062:	7dfb      	ldrb	r3, [r7, #23]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3718      	adds	r7, #24
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	2004a904 	.word	0x2004a904

08011070 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011074:	4805      	ldr	r0, [pc, #20]	; (801108c <BSP_SD_GetCardState+0x1c>)
 8011076:	f7fc fd85 	bl	800db84 <HAL_SD_GetCardState>
 801107a:	4603      	mov	r3, r0
 801107c:	2b04      	cmp	r3, #4
 801107e:	bf14      	ite	ne
 8011080:	2301      	movne	r3, #1
 8011082:	2300      	moveq	r3, #0
 8011084:	b2db      	uxtb	r3, r3
}
 8011086:	4618      	mov	r0, r3
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	2004a904 	.word	0x2004a904

08011090 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011098:	6879      	ldr	r1, [r7, #4]
 801109a:	4803      	ldr	r0, [pc, #12]	; (80110a8 <BSP_SD_GetCardInfo+0x18>)
 801109c:	f7fc fcca 	bl	800da34 <HAL_SD_GetCardInfo>
}
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	2004a904 	.word	0x2004a904

080110ac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80110b4:	f000 f818 	bl	80110e8 <BSP_SD_AbortCallback>
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80110c8:	f000 f9a8 	bl	801141c <BSP_SD_WriteCpltCallback>
}
 80110cc:	bf00      	nop
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80110dc:	f000 f9aa 	bl	8011434 <BSP_SD_ReadCpltCallback>
}
 80110e0:	bf00      	nop
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80110e8:	b480      	push	{r7}
 80110ea:	af00      	add	r7, sp, #0

}
 80110ec:	bf00      	nop
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b082      	sub	sp, #8
 80110fa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80110fc:	2301      	movs	r3, #1
 80110fe:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011100:	f000 f80c 	bl	801111c <BSP_PlatformIsDetected>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801110a:	2300      	movs	r3, #0
 801110c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801110e:	79fb      	ldrb	r3, [r7, #7]
 8011110:	b2db      	uxtb	r3, r3
}
 8011112:	4618      	mov	r0, r3
 8011114:	3708      	adds	r7, #8
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
	...

0801111c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011122:	2301      	movs	r3, #1
 8011124:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801112a:	4806      	ldr	r0, [pc, #24]	; (8011144 <BSP_PlatformIsDetected+0x28>)
 801112c:	f7fa f866 	bl	800b1fc <HAL_GPIO_ReadPin>
 8011130:	4603      	mov	r3, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011136:	2300      	movs	r3, #0
 8011138:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801113a:	79fb      	ldrb	r3, [r7, #7]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	40020000 	.word	0x40020000

08011148 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011150:	f7f8 fdca 	bl	8009ce8 <HAL_GetTick>
 8011154:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011156:	e006      	b.n	8011166 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011158:	f7ff ff8a 	bl	8011070 <BSP_SD_GetCardState>
 801115c:	4603      	mov	r3, r0
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011162:	2300      	movs	r3, #0
 8011164:	e009      	b.n	801117a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011166:	f7f8 fdbf 	bl	8009ce8 <HAL_GetTick>
 801116a:	4602      	mov	r2, r0
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	1ad3      	subs	r3, r2, r3
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	429a      	cmp	r2, r3
 8011174:	d8f0      	bhi.n	8011158 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011176:	f04f 33ff 	mov.w	r3, #4294967295
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
	...

08011184 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	4603      	mov	r3, r0
 801118c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801118e:	4b0b      	ldr	r3, [pc, #44]	; (80111bc <SD_CheckStatus+0x38>)
 8011190:	2201      	movs	r2, #1
 8011192:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011194:	f7ff ff6c 	bl	8011070 <BSP_SD_GetCardState>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d107      	bne.n	80111ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801119e:	4b07      	ldr	r3, [pc, #28]	; (80111bc <SD_CheckStatus+0x38>)
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f023 0301 	bic.w	r3, r3, #1
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	4b04      	ldr	r3, [pc, #16]	; (80111bc <SD_CheckStatus+0x38>)
 80111ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80111ae:	4b03      	ldr	r3, [pc, #12]	; (80111bc <SD_CheckStatus+0x38>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	b2db      	uxtb	r3, r3
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20000009 	.word	0x20000009

080111c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80111ca:	f7ff fef7 	bl	8010fbc <BSP_SD_Init>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d107      	bne.n	80111e4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80111d4:	79fb      	ldrb	r3, [r7, #7]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff ffd4 	bl	8011184 <SD_CheckStatus>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	4b04      	ldr	r3, [pc, #16]	; (80111f4 <SD_initialize+0x34>)
 80111e2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80111e4:	4b03      	ldr	r3, [pc, #12]	; (80111f4 <SD_initialize+0x34>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	b2db      	uxtb	r3, r3
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	20000009 	.word	0x20000009

080111f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011202:	79fb      	ldrb	r3, [r7, #7]
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff ffbd 	bl	8011184 <SD_CheckStatus>
 801120a:	4603      	mov	r3, r0
}
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	4603      	mov	r3, r0
 8011222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011228:	f247 5030 	movw	r0, #30000	; 0x7530
 801122c:	f7ff ff8c 	bl	8011148 <SD_CheckStatusWithTimeout>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	da01      	bge.n	801123a <SD_read+0x26>
  {
    return res;
 8011236:	7dfb      	ldrb	r3, [r7, #23]
 8011238:	e03b      	b.n	80112b2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801123a:	683a      	ldr	r2, [r7, #0]
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	68b8      	ldr	r0, [r7, #8]
 8011240:	f7ff fee2 	bl	8011008 <BSP_SD_ReadBlocks_DMA>
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d132      	bne.n	80112b0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801124a:	4b1c      	ldr	r3, [pc, #112]	; (80112bc <SD_read+0xa8>)
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011250:	f7f8 fd4a 	bl	8009ce8 <HAL_GetTick>
 8011254:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011256:	bf00      	nop
 8011258:	4b18      	ldr	r3, [pc, #96]	; (80112bc <SD_read+0xa8>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d108      	bne.n	8011272 <SD_read+0x5e>
 8011260:	f7f8 fd42 	bl	8009ce8 <HAL_GetTick>
 8011264:	4602      	mov	r2, r0
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	f247 522f 	movw	r2, #29999	; 0x752f
 801126e:	4293      	cmp	r3, r2
 8011270:	d9f2      	bls.n	8011258 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011272:	4b12      	ldr	r3, [pc, #72]	; (80112bc <SD_read+0xa8>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d102      	bne.n	8011280 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801127a:	2301      	movs	r3, #1
 801127c:	75fb      	strb	r3, [r7, #23]
 801127e:	e017      	b.n	80112b0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011280:	4b0e      	ldr	r3, [pc, #56]	; (80112bc <SD_read+0xa8>)
 8011282:	2200      	movs	r2, #0
 8011284:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011286:	f7f8 fd2f 	bl	8009ce8 <HAL_GetTick>
 801128a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801128c:	e007      	b.n	801129e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801128e:	f7ff feef 	bl	8011070 <BSP_SD_GetCardState>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d102      	bne.n	801129e <SD_read+0x8a>
          {
            res = RES_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801129c:	e008      	b.n	80112b0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801129e:	f7f8 fd23 	bl	8009ce8 <HAL_GetTick>
 80112a2:	4602      	mov	r2, r0
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d9ee      	bls.n	801128e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3718      	adds	r7, #24
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	200481a0 	.word	0x200481a0

080112c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60b9      	str	r1, [r7, #8]
 80112c8:	607a      	str	r2, [r7, #4]
 80112ca:	603b      	str	r3, [r7, #0]
 80112cc:	4603      	mov	r3, r0
 80112ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80112d0:	2301      	movs	r3, #1
 80112d2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80112d4:	4b24      	ldr	r3, [pc, #144]	; (8011368 <SD_write+0xa8>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80112da:	f247 5030 	movw	r0, #30000	; 0x7530
 80112de:	f7ff ff33 	bl	8011148 <SD_CheckStatusWithTimeout>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	da01      	bge.n	80112ec <SD_write+0x2c>
  {
    return res;
 80112e8:	7dfb      	ldrb	r3, [r7, #23]
 80112ea:	e038      	b.n	801135e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	6879      	ldr	r1, [r7, #4]
 80112f0:	68b8      	ldr	r0, [r7, #8]
 80112f2:	f7ff fea3 	bl	801103c <BSP_SD_WriteBlocks_DMA>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d12f      	bne.n	801135c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80112fc:	f7f8 fcf4 	bl	8009ce8 <HAL_GetTick>
 8011300:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011302:	bf00      	nop
 8011304:	4b18      	ldr	r3, [pc, #96]	; (8011368 <SD_write+0xa8>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d108      	bne.n	801131e <SD_write+0x5e>
 801130c:	f7f8 fcec 	bl	8009ce8 <HAL_GetTick>
 8011310:	4602      	mov	r2, r0
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	f247 522f 	movw	r2, #29999	; 0x752f
 801131a:	4293      	cmp	r3, r2
 801131c:	d9f2      	bls.n	8011304 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801131e:	4b12      	ldr	r3, [pc, #72]	; (8011368 <SD_write+0xa8>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d102      	bne.n	801132c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	75fb      	strb	r3, [r7, #23]
 801132a:	e017      	b.n	801135c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801132c:	4b0e      	ldr	r3, [pc, #56]	; (8011368 <SD_write+0xa8>)
 801132e:	2200      	movs	r2, #0
 8011330:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011332:	f7f8 fcd9 	bl	8009ce8 <HAL_GetTick>
 8011336:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011338:	e007      	b.n	801134a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801133a:	f7ff fe99 	bl	8011070 <BSP_SD_GetCardState>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d102      	bne.n	801134a <SD_write+0x8a>
          {
            res = RES_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	75fb      	strb	r3, [r7, #23]
            break;
 8011348:	e008      	b.n	801135c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801134a:	f7f8 fccd 	bl	8009ce8 <HAL_GetTick>
 801134e:	4602      	mov	r2, r0
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	f247 522f 	movw	r2, #29999	; 0x752f
 8011358:	4293      	cmp	r3, r2
 801135a:	d9ee      	bls.n	801133a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801135c:	7dfb      	ldrb	r3, [r7, #23]
}
 801135e:	4618      	mov	r0, r3
 8011360:	3718      	adds	r7, #24
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	2004819c 	.word	0x2004819c

0801136c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	; 0x30
 8011370:	af00      	add	r7, sp, #0
 8011372:	4603      	mov	r3, r0
 8011374:	603a      	str	r2, [r7, #0]
 8011376:	71fb      	strb	r3, [r7, #7]
 8011378:	460b      	mov	r3, r1
 801137a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801137c:	2301      	movs	r3, #1
 801137e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011382:	4b25      	ldr	r3, [pc, #148]	; (8011418 <SD_ioctl+0xac>)
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <SD_ioctl+0x28>
 8011390:	2303      	movs	r3, #3
 8011392:	e03c      	b.n	801140e <SD_ioctl+0xa2>

  switch (cmd)
 8011394:	79bb      	ldrb	r3, [r7, #6]
 8011396:	2b03      	cmp	r3, #3
 8011398:	d834      	bhi.n	8011404 <SD_ioctl+0x98>
 801139a:	a201      	add	r2, pc, #4	; (adr r2, 80113a0 <SD_ioctl+0x34>)
 801139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a0:	080113b1 	.word	0x080113b1
 80113a4:	080113b9 	.word	0x080113b9
 80113a8:	080113d1 	.word	0x080113d1
 80113ac:	080113eb 	.word	0x080113eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113b6:	e028      	b.n	801140a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80113b8:	f107 030c 	add.w	r3, r7, #12
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fe67 	bl	8011090 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80113c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113ce:	e01c      	b.n	801140a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113d0:	f107 030c 	add.w	r3, r7, #12
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff fe5b 	bl	8011090 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	b29a      	uxth	r2, r3
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80113e2:	2300      	movs	r3, #0
 80113e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113e8:	e00f      	b.n	801140a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113ea:	f107 030c 	add.w	r3, r7, #12
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff fe4e 	bl	8011090 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	0a5a      	lsrs	r2, r3, #9
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011402:	e002      	b.n	801140a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011404:	2304      	movs	r3, #4
 8011406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801140a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801140e:	4618      	mov	r0, r3
 8011410:	3730      	adds	r7, #48	; 0x30
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	20000009 	.word	0x20000009

0801141c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801141c:	b480      	push	{r7}
 801141e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011420:	4b03      	ldr	r3, [pc, #12]	; (8011430 <BSP_SD_WriteCpltCallback+0x14>)
 8011422:	2201      	movs	r2, #1
 8011424:	601a      	str	r2, [r3, #0]
}
 8011426:	bf00      	nop
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr
 8011430:	2004819c 	.word	0x2004819c

08011434 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011434:	b480      	push	{r7}
 8011436:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011438:	4b03      	ldr	r3, [pc, #12]	; (8011448 <BSP_SD_ReadCpltCallback+0x14>)
 801143a:	2201      	movs	r2, #1
 801143c:	601a      	str	r2, [r3, #0]
}
 801143e:	bf00      	nop
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr
 8011448:	200481a0 	.word	0x200481a0

0801144c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	4a08      	ldr	r2, [pc, #32]	; (801147c <disk_status+0x30>)
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	79fa      	ldrb	r2, [r7, #7]
 8011464:	4905      	ldr	r1, [pc, #20]	; (801147c <disk_status+0x30>)
 8011466:	440a      	add	r2, r1
 8011468:	7a12      	ldrb	r2, [r2, #8]
 801146a:	4610      	mov	r0, r2
 801146c:	4798      	blx	r3
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011472:	7bfb      	ldrb	r3, [r7, #15]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	200481cc 	.word	0x200481cc

08011480 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	4603      	mov	r3, r0
 8011488:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801148a:	2300      	movs	r3, #0
 801148c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	4a0d      	ldr	r2, [pc, #52]	; (80114c8 <disk_initialize+0x48>)
 8011492:	5cd3      	ldrb	r3, [r2, r3]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d111      	bne.n	80114bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	4a0b      	ldr	r2, [pc, #44]	; (80114c8 <disk_initialize+0x48>)
 801149c:	2101      	movs	r1, #1
 801149e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114a0:	79fb      	ldrb	r3, [r7, #7]
 80114a2:	4a09      	ldr	r2, [pc, #36]	; (80114c8 <disk_initialize+0x48>)
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	4413      	add	r3, r2
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	79fa      	ldrb	r2, [r7, #7]
 80114ae:	4906      	ldr	r1, [pc, #24]	; (80114c8 <disk_initialize+0x48>)
 80114b0:	440a      	add	r2, r1
 80114b2:	7a12      	ldrb	r2, [r2, #8]
 80114b4:	4610      	mov	r0, r2
 80114b6:	4798      	blx	r3
 80114b8:	4603      	mov	r3, r0
 80114ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	200481cc 	.word	0x200481cc

080114cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b087      	sub	sp, #28
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	607a      	str	r2, [r7, #4]
 80114d6:	603b      	str	r3, [r7, #0]
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
 80114de:	4a0a      	ldr	r2, [pc, #40]	; (8011508 <disk_read+0x3c>)
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	4413      	add	r3, r2
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	689c      	ldr	r4, [r3, #8]
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
 80114ea:	4a07      	ldr	r2, [pc, #28]	; (8011508 <disk_read+0x3c>)
 80114ec:	4413      	add	r3, r2
 80114ee:	7a18      	ldrb	r0, [r3, #8]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	68b9      	ldr	r1, [r7, #8]
 80114f6:	47a0      	blx	r4
 80114f8:	4603      	mov	r3, r0
 80114fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80114fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	371c      	adds	r7, #28
 8011502:	46bd      	mov	sp, r7
 8011504:	bd90      	pop	{r4, r7, pc}
 8011506:	bf00      	nop
 8011508:	200481cc 	.word	0x200481cc

0801150c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801150c:	b590      	push	{r4, r7, lr}
 801150e:	b087      	sub	sp, #28
 8011510:	af00      	add	r7, sp, #0
 8011512:	60b9      	str	r1, [r7, #8]
 8011514:	607a      	str	r2, [r7, #4]
 8011516:	603b      	str	r3, [r7, #0]
 8011518:	4603      	mov	r3, r0
 801151a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801151c:	7bfb      	ldrb	r3, [r7, #15]
 801151e:	4a0a      	ldr	r2, [pc, #40]	; (8011548 <disk_write+0x3c>)
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	68dc      	ldr	r4, [r3, #12]
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	4a07      	ldr	r2, [pc, #28]	; (8011548 <disk_write+0x3c>)
 801152c:	4413      	add	r3, r2
 801152e:	7a18      	ldrb	r0, [r3, #8]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	68b9      	ldr	r1, [r7, #8]
 8011536:	47a0      	blx	r4
 8011538:	4603      	mov	r3, r0
 801153a:	75fb      	strb	r3, [r7, #23]
  return res;
 801153c:	7dfb      	ldrb	r3, [r7, #23]
}
 801153e:	4618      	mov	r0, r3
 8011540:	371c      	adds	r7, #28
 8011542:	46bd      	mov	sp, r7
 8011544:	bd90      	pop	{r4, r7, pc}
 8011546:	bf00      	nop
 8011548:	200481cc 	.word	0x200481cc

0801154c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	4603      	mov	r3, r0
 8011554:	603a      	str	r2, [r7, #0]
 8011556:	71fb      	strb	r3, [r7, #7]
 8011558:	460b      	mov	r3, r1
 801155a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801155c:	79fb      	ldrb	r3, [r7, #7]
 801155e:	4a09      	ldr	r2, [pc, #36]	; (8011584 <disk_ioctl+0x38>)
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4413      	add	r3, r2
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	691b      	ldr	r3, [r3, #16]
 8011568:	79fa      	ldrb	r2, [r7, #7]
 801156a:	4906      	ldr	r1, [pc, #24]	; (8011584 <disk_ioctl+0x38>)
 801156c:	440a      	add	r2, r1
 801156e:	7a10      	ldrb	r0, [r2, #8]
 8011570:	79b9      	ldrb	r1, [r7, #6]
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	4798      	blx	r3
 8011576:	4603      	mov	r3, r0
 8011578:	73fb      	strb	r3, [r7, #15]
  return res;
 801157a:	7bfb      	ldrb	r3, [r7, #15]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	200481cc 	.word	0x200481cc

08011588 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	3301      	adds	r3, #1
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011598:	89fb      	ldrh	r3, [r7, #14]
 801159a:	021b      	lsls	r3, r3, #8
 801159c:	b21a      	sxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	b21b      	sxth	r3, r3
 80115a4:	4313      	orrs	r3, r2
 80115a6:	b21b      	sxth	r3, r3
 80115a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80115aa:	89fb      	ldrh	r3, [r7, #14]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80115b8:	b480      	push	{r7}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	3303      	adds	r3, #3
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	021b      	lsls	r3, r3, #8
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	3202      	adds	r2, #2
 80115d0:	7812      	ldrb	r2, [r2, #0]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	021b      	lsls	r3, r3, #8
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	3201      	adds	r2, #1
 80115de:	7812      	ldrb	r2, [r2, #0]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	021b      	lsls	r3, r3, #8
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	7812      	ldrb	r2, [r2, #0]
 80115ec:	4313      	orrs	r3, r2
 80115ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80115f0:	68fb      	ldr	r3, [r7, #12]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80115fe:	b480      	push	{r7}
 8011600:	b083      	sub	sp, #12
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
 8011606:	460b      	mov	r3, r1
 8011608:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	887a      	ldrh	r2, [r7, #2]
 8011612:	b2d2      	uxtb	r2, r2
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	887b      	ldrh	r3, [r7, #2]
 8011618:	0a1b      	lsrs	r3, r3, #8
 801161a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	887a      	ldrh	r2, [r7, #2]
 8011624:	b2d2      	uxtb	r2, r2
 8011626:	701a      	strb	r2, [r3, #0]
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	1c5a      	adds	r2, r3, #1
 8011642:	607a      	str	r2, [r7, #4]
 8011644:	683a      	ldr	r2, [r7, #0]
 8011646:	b2d2      	uxtb	r2, r2
 8011648:	701a      	strb	r2, [r3, #0]
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	0a1b      	lsrs	r3, r3, #8
 801164e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	1c5a      	adds	r2, r3, #1
 8011654:	607a      	str	r2, [r7, #4]
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	b2d2      	uxtb	r2, r2
 801165a:	701a      	strb	r2, [r3, #0]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	0a1b      	lsrs	r3, r3, #8
 8011660:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	1c5a      	adds	r2, r3, #1
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	683a      	ldr	r2, [r7, #0]
 801166a:	b2d2      	uxtb	r2, r2
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	0a1b      	lsrs	r3, r3, #8
 8011672:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	1c5a      	adds	r2, r3, #1
 8011678:	607a      	str	r2, [r7, #4]
 801167a:	683a      	ldr	r2, [r7, #0]
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	701a      	strb	r2, [r3, #0]
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801168c:	b480      	push	{r7}
 801168e:	b087      	sub	sp, #28
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00d      	beq.n	80116c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	1c53      	adds	r3, r2, #1
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	1c59      	adds	r1, r3, #1
 80116b0:	6179      	str	r1, [r7, #20]
 80116b2:	7812      	ldrb	r2, [r2, #0]
 80116b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	607b      	str	r3, [r7, #4]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1f1      	bne.n	80116a6 <mem_cpy+0x1a>
	}
}
 80116c2:	bf00      	nop
 80116c4:	371c      	adds	r7, #28
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80116ce:	b480      	push	{r7}
 80116d0:	b087      	sub	sp, #28
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	60f8      	str	r0, [r7, #12]
 80116d6:	60b9      	str	r1, [r7, #8]
 80116d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	1c5a      	adds	r2, r3, #1
 80116e2:	617a      	str	r2, [r7, #20]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	3b01      	subs	r3, #1
 80116ee:	607b      	str	r3, [r7, #4]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1f3      	bne.n	80116de <mem_set+0x10>
}
 80116f6:	bf00      	nop
 80116f8:	371c      	adds	r7, #28
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011702:	b480      	push	{r7}
 8011704:	b089      	sub	sp, #36	; 0x24
 8011706:	af00      	add	r7, sp, #0
 8011708:	60f8      	str	r0, [r7, #12]
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	61fb      	str	r3, [r7, #28]
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	61fa      	str	r2, [r7, #28]
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	4619      	mov	r1, r3
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	61ba      	str	r2, [r7, #24]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	1acb      	subs	r3, r1, r3
 801172e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	3b01      	subs	r3, #1
 8011734:	607b      	str	r3, [r7, #4]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d002      	beq.n	8011742 <mem_cmp+0x40>
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d0eb      	beq.n	801171a <mem_cmp+0x18>

	return r;
 8011742:	697b      	ldr	r3, [r7, #20]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3724      	adds	r7, #36	; 0x24
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801175a:	e002      	b.n	8011762 <chk_chr+0x12>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3301      	adds	r3, #1
 8011760:	607b      	str	r3, [r7, #4]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d005      	beq.n	8011776 <chk_chr+0x26>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	461a      	mov	r2, r3
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	4293      	cmp	r3, r2
 8011774:	d1f2      	bne.n	801175c <chk_chr+0xc>
	return *str;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	781b      	ldrb	r3, [r3, #0]
}
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
	...

08011788 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011792:	2300      	movs	r3, #0
 8011794:	60bb      	str	r3, [r7, #8]
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	60fb      	str	r3, [r7, #12]
 801179a:	e029      	b.n	80117f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801179c:	4a27      	ldr	r2, [pc, #156]	; (801183c <chk_lock+0xb4>)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	011b      	lsls	r3, r3, #4
 80117a2:	4413      	add	r3, r2
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d01d      	beq.n	80117e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117aa:	4a24      	ldr	r2, [pc, #144]	; (801183c <chk_lock+0xb4>)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	011b      	lsls	r3, r3, #4
 80117b0:	4413      	add	r3, r2
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d116      	bne.n	80117ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80117bc:	4a1f      	ldr	r2, [pc, #124]	; (801183c <chk_lock+0xb4>)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	011b      	lsls	r3, r3, #4
 80117c2:	4413      	add	r3, r2
 80117c4:	3304      	adds	r3, #4
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d10c      	bne.n	80117ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80117d0:	4a1a      	ldr	r2, [pc, #104]	; (801183c <chk_lock+0xb4>)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	011b      	lsls	r3, r3, #4
 80117d6:	4413      	add	r3, r2
 80117d8:	3308      	adds	r3, #8
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d102      	bne.n	80117ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80117e4:	e007      	b.n	80117f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80117e6:	2301      	movs	r3, #1
 80117e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3301      	adds	r3, #1
 80117ee:	60fb      	str	r3, [r7, #12]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d9d2      	bls.n	801179c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	d109      	bne.n	8011810 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d102      	bne.n	8011808 <chk_lock+0x80>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	2b02      	cmp	r3, #2
 8011806:	d101      	bne.n	801180c <chk_lock+0x84>
 8011808:	2300      	movs	r3, #0
 801180a:	e010      	b.n	801182e <chk_lock+0xa6>
 801180c:	2312      	movs	r3, #18
 801180e:	e00e      	b.n	801182e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d108      	bne.n	8011828 <chk_lock+0xa0>
 8011816:	4a09      	ldr	r2, [pc, #36]	; (801183c <chk_lock+0xb4>)
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	011b      	lsls	r3, r3, #4
 801181c:	4413      	add	r3, r2
 801181e:	330c      	adds	r3, #12
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011826:	d101      	bne.n	801182c <chk_lock+0xa4>
 8011828:	2310      	movs	r3, #16
 801182a:	e000      	b.n	801182e <chk_lock+0xa6>
 801182c:	2300      	movs	r3, #0
}
 801182e:	4618      	mov	r0, r3
 8011830:	3714      	adds	r7, #20
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	200481ac 	.word	0x200481ac

08011840 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011846:	2300      	movs	r3, #0
 8011848:	607b      	str	r3, [r7, #4]
 801184a:	e002      	b.n	8011852 <enq_lock+0x12>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3301      	adds	r3, #1
 8011850:	607b      	str	r3, [r7, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d806      	bhi.n	8011866 <enq_lock+0x26>
 8011858:	4a09      	ldr	r2, [pc, #36]	; (8011880 <enq_lock+0x40>)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	011b      	lsls	r3, r3, #4
 801185e:	4413      	add	r3, r2
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1f2      	bne.n	801184c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2b02      	cmp	r3, #2
 801186a:	bf14      	ite	ne
 801186c:	2301      	movne	r3, #1
 801186e:	2300      	moveq	r3, #0
 8011870:	b2db      	uxtb	r3, r3
}
 8011872:	4618      	mov	r0, r3
 8011874:	370c      	adds	r7, #12
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	200481ac 	.word	0x200481ac

08011884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801188e:	2300      	movs	r3, #0
 8011890:	60fb      	str	r3, [r7, #12]
 8011892:	e01f      	b.n	80118d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011894:	4a41      	ldr	r2, [pc, #260]	; (801199c <inc_lock+0x118>)
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	011b      	lsls	r3, r3, #4
 801189a:	4413      	add	r3, r2
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d113      	bne.n	80118ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118a6:	4a3d      	ldr	r2, [pc, #244]	; (801199c <inc_lock+0x118>)
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	011b      	lsls	r3, r3, #4
 80118ac:	4413      	add	r3, r2
 80118ae:	3304      	adds	r3, #4
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d109      	bne.n	80118ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80118ba:	4a38      	ldr	r2, [pc, #224]	; (801199c <inc_lock+0x118>)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	011b      	lsls	r3, r3, #4
 80118c0:	4413      	add	r3, r2
 80118c2:	3308      	adds	r3, #8
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d006      	beq.n	80118dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	3301      	adds	r3, #1
 80118d2:	60fb      	str	r3, [r7, #12]
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d9dc      	bls.n	8011894 <inc_lock+0x10>
 80118da:	e000      	b.n	80118de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80118dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d132      	bne.n	801194a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80118e4:	2300      	movs	r3, #0
 80118e6:	60fb      	str	r3, [r7, #12]
 80118e8:	e002      	b.n	80118f0 <inc_lock+0x6c>
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	3301      	adds	r3, #1
 80118ee:	60fb      	str	r3, [r7, #12]
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d806      	bhi.n	8011904 <inc_lock+0x80>
 80118f6:	4a29      	ldr	r2, [pc, #164]	; (801199c <inc_lock+0x118>)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	011b      	lsls	r3, r3, #4
 80118fc:	4413      	add	r3, r2
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1f2      	bne.n	80118ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2b02      	cmp	r3, #2
 8011908:	d101      	bne.n	801190e <inc_lock+0x8a>
 801190a:	2300      	movs	r3, #0
 801190c:	e040      	b.n	8011990 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	4922      	ldr	r1, [pc, #136]	; (801199c <inc_lock+0x118>)
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	011b      	lsls	r3, r3, #4
 8011918:	440b      	add	r3, r1
 801191a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	689a      	ldr	r2, [r3, #8]
 8011920:	491e      	ldr	r1, [pc, #120]	; (801199c <inc_lock+0x118>)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	011b      	lsls	r3, r3, #4
 8011926:	440b      	add	r3, r1
 8011928:	3304      	adds	r3, #4
 801192a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	695a      	ldr	r2, [r3, #20]
 8011930:	491a      	ldr	r1, [pc, #104]	; (801199c <inc_lock+0x118>)
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	011b      	lsls	r3, r3, #4
 8011936:	440b      	add	r3, r1
 8011938:	3308      	adds	r3, #8
 801193a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801193c:	4a17      	ldr	r2, [pc, #92]	; (801199c <inc_lock+0x118>)
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	011b      	lsls	r3, r3, #4
 8011942:	4413      	add	r3, r2
 8011944:	330c      	adds	r3, #12
 8011946:	2200      	movs	r2, #0
 8011948:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d009      	beq.n	8011964 <inc_lock+0xe0>
 8011950:	4a12      	ldr	r2, [pc, #72]	; (801199c <inc_lock+0x118>)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	011b      	lsls	r3, r3, #4
 8011956:	4413      	add	r3, r2
 8011958:	330c      	adds	r3, #12
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d001      	beq.n	8011964 <inc_lock+0xe0>
 8011960:	2300      	movs	r3, #0
 8011962:	e015      	b.n	8011990 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d108      	bne.n	801197c <inc_lock+0xf8>
 801196a:	4a0c      	ldr	r2, [pc, #48]	; (801199c <inc_lock+0x118>)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	011b      	lsls	r3, r3, #4
 8011970:	4413      	add	r3, r2
 8011972:	330c      	adds	r3, #12
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	3301      	adds	r3, #1
 8011978:	b29a      	uxth	r2, r3
 801197a:	e001      	b.n	8011980 <inc_lock+0xfc>
 801197c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011980:	4906      	ldr	r1, [pc, #24]	; (801199c <inc_lock+0x118>)
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	440b      	add	r3, r1
 8011988:	330c      	adds	r3, #12
 801198a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3301      	adds	r3, #1
}
 8011990:	4618      	mov	r0, r3
 8011992:	3714      	adds	r7, #20
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	200481ac 	.word	0x200481ac

080119a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	607b      	str	r3, [r7, #4]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d825      	bhi.n	8011a00 <dec_lock+0x60>
		n = Files[i].ctr;
 80119b4:	4a17      	ldr	r2, [pc, #92]	; (8011a14 <dec_lock+0x74>)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	4413      	add	r3, r2
 80119bc:	330c      	adds	r3, #12
 80119be:	881b      	ldrh	r3, [r3, #0]
 80119c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80119c2:	89fb      	ldrh	r3, [r7, #14]
 80119c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119c8:	d101      	bne.n	80119ce <dec_lock+0x2e>
 80119ca:	2300      	movs	r3, #0
 80119cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80119ce:	89fb      	ldrh	r3, [r7, #14]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <dec_lock+0x3a>
 80119d4:	89fb      	ldrh	r3, [r7, #14]
 80119d6:	3b01      	subs	r3, #1
 80119d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80119da:	4a0e      	ldr	r2, [pc, #56]	; (8011a14 <dec_lock+0x74>)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	011b      	lsls	r3, r3, #4
 80119e0:	4413      	add	r3, r2
 80119e2:	330c      	adds	r3, #12
 80119e4:	89fa      	ldrh	r2, [r7, #14]
 80119e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80119e8:	89fb      	ldrh	r3, [r7, #14]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d105      	bne.n	80119fa <dec_lock+0x5a>
 80119ee:	4a09      	ldr	r2, [pc, #36]	; (8011a14 <dec_lock+0x74>)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	011b      	lsls	r3, r3, #4
 80119f4:	4413      	add	r3, r2
 80119f6:	2200      	movs	r2, #0
 80119f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	737b      	strb	r3, [r7, #13]
 80119fe:	e001      	b.n	8011a04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a00:	2302      	movs	r3, #2
 8011a02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a04:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	200481ac 	.word	0x200481ac

08011a18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a20:	2300      	movs	r3, #0
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	e010      	b.n	8011a48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a26:	4a0d      	ldr	r2, [pc, #52]	; (8011a5c <clear_lock+0x44>)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	011b      	lsls	r3, r3, #4
 8011a2c:	4413      	add	r3, r2
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d105      	bne.n	8011a42 <clear_lock+0x2a>
 8011a36:	4a09      	ldr	r2, [pc, #36]	; (8011a5c <clear_lock+0x44>)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	011b      	lsls	r3, r3, #4
 8011a3c:	4413      	add	r3, r2
 8011a3e:	2200      	movs	r2, #0
 8011a40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	3301      	adds	r3, #1
 8011a46:	60fb      	str	r3, [r7, #12]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	d9eb      	bls.n	8011a26 <clear_lock+0xe>
	}
}
 8011a4e:	bf00      	nop
 8011a50:	3714      	adds	r7, #20
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	200481ac 	.word	0x200481ac

08011a60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b086      	sub	sp, #24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	78db      	ldrb	r3, [r3, #3]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d034      	beq.n	8011ade <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	7858      	ldrb	r0, [r3, #1]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a84:	2301      	movs	r3, #1
 8011a86:	697a      	ldr	r2, [r7, #20]
 8011a88:	f7ff fd40 	bl	801150c <disk_write>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d002      	beq.n	8011a98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a92:	2301      	movs	r3, #1
 8011a94:	73fb      	strb	r3, [r7, #15]
 8011a96:	e022      	b.n	8011ade <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	1ad2      	subs	r2, r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a1b      	ldr	r3, [r3, #32]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d217      	bcs.n	8011ade <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	789b      	ldrb	r3, [r3, #2]
 8011ab2:	613b      	str	r3, [r7, #16]
 8011ab4:	e010      	b.n	8011ad8 <sync_window+0x78>
					wsect += fs->fsize;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6a1b      	ldr	r3, [r3, #32]
 8011aba:	697a      	ldr	r2, [r7, #20]
 8011abc:	4413      	add	r3, r2
 8011abe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7858      	ldrb	r0, [r3, #1]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aca:	2301      	movs	r3, #1
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	f7ff fd1d 	bl	801150c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	613b      	str	r3, [r7, #16]
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d8eb      	bhi.n	8011ab6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3718      	adds	r7, #24
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d01b      	beq.n	8011b38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff ffad 	bl	8011a60 <sync_window>
 8011b06:	4603      	mov	r3, r0
 8011b08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b0a:	7bfb      	ldrb	r3, [r7, #15]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d113      	bne.n	8011b38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7858      	ldrb	r0, [r3, #1]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	683a      	ldr	r2, [r7, #0]
 8011b1e:	f7ff fcd5 	bl	80114cc <disk_read>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d004      	beq.n	8011b32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b28:	f04f 33ff 	mov.w	r3, #4294967295
 8011b2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	683a      	ldr	r2, [r7, #0]
 8011b36:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7ff ff87 	bl	8011a60 <sync_window>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b56:	7bfb      	ldrb	r3, [r7, #15]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d159      	bne.n	8011c10 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	2b03      	cmp	r3, #3
 8011b62:	d149      	bne.n	8011bf8 <sync_fs+0xb4>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	791b      	ldrb	r3, [r3, #4]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d145      	bne.n	8011bf8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	899b      	ldrh	r3, [r3, #12]
 8011b76:	461a      	mov	r2, r3
 8011b78:	2100      	movs	r1, #0
 8011b7a:	f7ff fda8 	bl	80116ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	3338      	adds	r3, #56	; 0x38
 8011b82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7ff fd37 	bl	80115fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	3338      	adds	r3, #56	; 0x38
 8011b94:	4921      	ldr	r1, [pc, #132]	; (8011c1c <sync_fs+0xd8>)
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff fd4c 	bl	8011634 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	3338      	adds	r3, #56	; 0x38
 8011ba0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011ba4:	491e      	ldr	r1, [pc, #120]	; (8011c20 <sync_fs+0xdc>)
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7ff fd44 	bl	8011634 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3338      	adds	r3, #56	; 0x38
 8011bb0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	4619      	mov	r1, r3
 8011bba:	4610      	mov	r0, r2
 8011bbc:	f7ff fd3a 	bl	8011634 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3338      	adds	r3, #56	; 0x38
 8011bc4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	691b      	ldr	r3, [r3, #16]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4610      	mov	r0, r2
 8011bd0:	f7ff fd30 	bl	8011634 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	7858      	ldrb	r0, [r3, #1]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bec:	2301      	movs	r3, #1
 8011bee:	f7ff fc8d 	bl	801150c <disk_write>
			fs->fsi_flag = 0;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7ff fca3 	bl	801154c <disk_ioctl>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <sync_fs+0xcc>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	41615252 	.word	0x41615252
 8011c20:	61417272 	.word	0x61417272

08011c24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	3b02      	subs	r3, #2
 8011c32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	69db      	ldr	r3, [r3, #28]
 8011c38:	3b02      	subs	r3, #2
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d301      	bcc.n	8011c44 <clust2sect+0x20>
 8011c40:	2300      	movs	r3, #0
 8011c42:	e008      	b.n	8011c56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	895b      	ldrh	r3, [r3, #10]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	fb03 f202 	mul.w	r2, r3, r2
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c54:	4413      	add	r3, r2
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	370c      	adds	r7, #12
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b086      	sub	sp, #24
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
 8011c6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d904      	bls.n	8011c82 <get_fat+0x20>
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	69db      	ldr	r3, [r3, #28]
 8011c7c:	683a      	ldr	r2, [r7, #0]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d302      	bcc.n	8011c88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c82:	2301      	movs	r3, #1
 8011c84:	617b      	str	r3, [r7, #20]
 8011c86:	e0b7      	b.n	8011df8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c88:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d05a      	beq.n	8011d4c <get_fat+0xea>
 8011c96:	2b03      	cmp	r3, #3
 8011c98:	d07d      	beq.n	8011d96 <get_fat+0x134>
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	f040 80a2 	bne.w	8011de4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	60fb      	str	r3, [r7, #12]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	085b      	lsrs	r3, r3, #1
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	4413      	add	r3, r2
 8011cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	899b      	ldrh	r3, [r3, #12]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cbe:	4413      	add	r3, r2
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	6938      	ldr	r0, [r7, #16]
 8011cc4:	f7ff ff10 	bl	8011ae8 <move_window>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	f040 808d 	bne.w	8011dea <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	60fa      	str	r2, [r7, #12]
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	8992      	ldrh	r2, [r2, #12]
 8011cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cde:	fb02 f201 	mul.w	r2, r2, r1
 8011ce2:	1a9b      	subs	r3, r3, r2
 8011ce4:	693a      	ldr	r2, [r7, #16]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	899b      	ldrh	r3, [r3, #12]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cfe:	4413      	add	r3, r2
 8011d00:	4619      	mov	r1, r3
 8011d02:	6938      	ldr	r0, [r7, #16]
 8011d04:	f7ff fef0 	bl	8011ae8 <move_window>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d16f      	bne.n	8011dee <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	899b      	ldrh	r3, [r3, #12]
 8011d12:	461a      	mov	r2, r3
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d1a:	fb02 f201 	mul.w	r2, r2, r1
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	693a      	ldr	r2, [r7, #16]
 8011d22:	4413      	add	r3, r2
 8011d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d28:	021b      	lsls	r3, r3, #8
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	f003 0301 	and.w	r3, r3, #1
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d002      	beq.n	8011d42 <get_fat+0xe0>
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	091b      	lsrs	r3, r3, #4
 8011d40:	e002      	b.n	8011d48 <get_fat+0xe6>
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d48:	617b      	str	r3, [r7, #20]
			break;
 8011d4a:	e055      	b.n	8011df8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	899b      	ldrh	r3, [r3, #12]
 8011d54:	085b      	lsrs	r3, r3, #1
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	4619      	mov	r1, r3
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d60:	4413      	add	r3, r2
 8011d62:	4619      	mov	r1, r3
 8011d64:	6938      	ldr	r0, [r7, #16]
 8011d66:	f7ff febf 	bl	8011ae8 <move_window>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d140      	bne.n	8011df2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	693a      	ldr	r2, [r7, #16]
 8011d7c:	8992      	ldrh	r2, [r2, #12]
 8011d7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d82:	fb02 f200 	mul.w	r2, r2, r0
 8011d86:	1a9b      	subs	r3, r3, r2
 8011d88:	440b      	add	r3, r1
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff fbfc 	bl	8011588 <ld_word>
 8011d90:	4603      	mov	r3, r0
 8011d92:	617b      	str	r3, [r7, #20]
			break;
 8011d94:	e030      	b.n	8011df8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	899b      	ldrh	r3, [r3, #12]
 8011d9e:	089b      	lsrs	r3, r3, #2
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	4619      	mov	r1, r3
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011daa:	4413      	add	r3, r2
 8011dac:	4619      	mov	r1, r3
 8011dae:	6938      	ldr	r0, [r7, #16]
 8011db0:	f7ff fe9a 	bl	8011ae8 <move_window>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d11d      	bne.n	8011df6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	693a      	ldr	r2, [r7, #16]
 8011dc6:	8992      	ldrh	r2, [r2, #12]
 8011dc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dcc:	fb02 f200 	mul.w	r2, r2, r0
 8011dd0:	1a9b      	subs	r3, r3, r2
 8011dd2:	440b      	add	r3, r1
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7ff fbef 	bl	80115b8 <ld_dword>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011de0:	617b      	str	r3, [r7, #20]
			break;
 8011de2:	e009      	b.n	8011df8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011de4:	2301      	movs	r3, #1
 8011de6:	617b      	str	r3, [r7, #20]
 8011de8:	e006      	b.n	8011df8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dea:	bf00      	nop
 8011dec:	e004      	b.n	8011df8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dee:	bf00      	nop
 8011df0:	e002      	b.n	8011df8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011df2:	bf00      	nop
 8011df4:	e000      	b.n	8011df8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011df6:	bf00      	nop
		}
	}

	return val;
 8011df8:	697b      	ldr	r3, [r7, #20]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3718      	adds	r7, #24
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}

08011e02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e02:	b590      	push	{r4, r7, lr}
 8011e04:	b089      	sub	sp, #36	; 0x24
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	60f8      	str	r0, [r7, #12]
 8011e0a:	60b9      	str	r1, [r7, #8]
 8011e0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e0e:	2302      	movs	r3, #2
 8011e10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	f240 8106 	bls.w	8012026 <put_fat+0x224>
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	69db      	ldr	r3, [r3, #28]
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	f080 8100 	bcs.w	8012026 <put_fat+0x224>
		switch (fs->fs_type) {
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	f000 8088 	beq.w	8011f40 <put_fat+0x13e>
 8011e30:	2b03      	cmp	r3, #3
 8011e32:	f000 80b0 	beq.w	8011f96 <put_fat+0x194>
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	f040 80f5 	bne.w	8012026 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	61bb      	str	r3, [r7, #24]
 8011e40:	69bb      	ldr	r3, [r7, #24]
 8011e42:	085b      	lsrs	r3, r3, #1
 8011e44:	69ba      	ldr	r2, [r7, #24]
 8011e46:	4413      	add	r3, r2
 8011e48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	4619      	mov	r1, r3
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e5a:	4413      	add	r3, r2
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f7ff fe42 	bl	8011ae8 <move_window>
 8011e64:	4603      	mov	r3, r0
 8011e66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e68:	7ffb      	ldrb	r3, [r7, #31]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f040 80d4 	bne.w	8012018 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	1c5a      	adds	r2, r3, #1
 8011e7a:	61ba      	str	r2, [r7, #24]
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	8992      	ldrh	r2, [r2, #12]
 8011e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e84:	fb02 f200 	mul.w	r2, r2, r0
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	440b      	add	r3, r1
 8011e8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	f003 0301 	and.w	r3, r3, #1
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d00d      	beq.n	8011eb4 <put_fat+0xb2>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	b25b      	sxtb	r3, r3
 8011e9e:	f003 030f 	and.w	r3, r3, #15
 8011ea2:	b25a      	sxtb	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	011b      	lsls	r3, r3, #4
 8011eaa:	b25b      	sxtb	r3, r3
 8011eac:	4313      	orrs	r3, r2
 8011eae:	b25b      	sxtb	r3, r3
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	e001      	b.n	8011eb8 <put_fat+0xb6>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	697a      	ldr	r2, [r7, #20]
 8011eba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	899b      	ldrh	r3, [r3, #12]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ed2:	4413      	add	r3, r2
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff fe06 	bl	8011ae8 <move_window>
 8011edc:	4603      	mov	r3, r0
 8011ede:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ee0:	7ffb      	ldrb	r3, [r7, #31]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f040 809a 	bne.w	801201c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	899b      	ldrh	r3, [r3, #12]
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011efa:	fb02 f200 	mul.w	r2, r2, r0
 8011efe:	1a9b      	subs	r3, r3, r2
 8011f00:	440b      	add	r3, r1
 8011f02:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	f003 0301 	and.w	r3, r3, #1
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d003      	beq.n	8011f16 <put_fat+0x114>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	091b      	lsrs	r3, r3, #4
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	e00e      	b.n	8011f34 <put_fat+0x132>
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	b25b      	sxtb	r3, r3
 8011f1c:	f023 030f 	bic.w	r3, r3, #15
 8011f20:	b25a      	sxtb	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	0a1b      	lsrs	r3, r3, #8
 8011f26:	b25b      	sxtb	r3, r3
 8011f28:	f003 030f 	and.w	r3, r3, #15
 8011f2c:	b25b      	sxtb	r3, r3
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	b25b      	sxtb	r3, r3
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	697a      	ldr	r2, [r7, #20]
 8011f36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	70da      	strb	r2, [r3, #3]
			break;
 8011f3e:	e072      	b.n	8012026 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	899b      	ldrh	r3, [r3, #12]
 8011f48:	085b      	lsrs	r3, r3, #1
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f54:	4413      	add	r3, r2
 8011f56:	4619      	mov	r1, r3
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	f7ff fdc5 	bl	8011ae8 <move_window>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f62:	7ffb      	ldrb	r3, [r7, #31]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d15b      	bne.n	8012020 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	8992      	ldrh	r2, [r2, #12]
 8011f76:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f7a:	fb02 f200 	mul.w	r2, r2, r0
 8011f7e:	1a9b      	subs	r3, r3, r2
 8011f80:	440b      	add	r3, r1
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	b292      	uxth	r2, r2
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff fb38 	bl	80115fe <st_word>
			fs->wflag = 1;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2201      	movs	r2, #1
 8011f92:	70da      	strb	r2, [r3, #3]
			break;
 8011f94:	e047      	b.n	8012026 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	899b      	ldrh	r3, [r3, #12]
 8011f9e:	089b      	lsrs	r3, r3, #2
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011faa:	4413      	add	r3, r2
 8011fac:	4619      	mov	r1, r3
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f7ff fd9a 	bl	8011ae8 <move_window>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fb8:	7ffb      	ldrb	r3, [r7, #31]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d132      	bne.n	8012024 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	8992      	ldrh	r2, [r2, #12]
 8011fd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fd6:	fb02 f200 	mul.w	r2, r2, r0
 8011fda:	1a9b      	subs	r3, r3, r2
 8011fdc:	440b      	add	r3, r1
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7ff faea 	bl	80115b8 <ld_dword>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011fea:	4323      	orrs	r3, r4
 8011fec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	8992      	ldrh	r2, [r2, #12]
 8011ffc:	fbb3 f0f2 	udiv	r0, r3, r2
 8012000:	fb02 f200 	mul.w	r2, r2, r0
 8012004:	1a9b      	subs	r3, r3, r2
 8012006:	440b      	add	r3, r1
 8012008:	6879      	ldr	r1, [r7, #4]
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fb12 	bl	8011634 <st_dword>
			fs->wflag = 1;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2201      	movs	r2, #1
 8012014:	70da      	strb	r2, [r3, #3]
			break;
 8012016:	e006      	b.n	8012026 <put_fat+0x224>
			if (res != FR_OK) break;
 8012018:	bf00      	nop
 801201a:	e004      	b.n	8012026 <put_fat+0x224>
			if (res != FR_OK) break;
 801201c:	bf00      	nop
 801201e:	e002      	b.n	8012026 <put_fat+0x224>
			if (res != FR_OK) break;
 8012020:	bf00      	nop
 8012022:	e000      	b.n	8012026 <put_fat+0x224>
			if (res != FR_OK) break;
 8012024:	bf00      	nop
		}
	}
	return res;
 8012026:	7ffb      	ldrb	r3, [r7, #31]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3724      	adds	r7, #36	; 0x24
 801202c:	46bd      	mov	sp, r7
 801202e:	bd90      	pop	{r4, r7, pc}

08012030 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801203c:	2300      	movs	r3, #0
 801203e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	2b01      	cmp	r3, #1
 801204a:	d904      	bls.n	8012056 <remove_chain+0x26>
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	429a      	cmp	r2, r3
 8012054:	d301      	bcc.n	801205a <remove_chain+0x2a>
 8012056:	2302      	movs	r3, #2
 8012058:	e04b      	b.n	80120f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00c      	beq.n	801207a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012060:	f04f 32ff 	mov.w	r2, #4294967295
 8012064:	6879      	ldr	r1, [r7, #4]
 8012066:	69b8      	ldr	r0, [r7, #24]
 8012068:	f7ff fecb 	bl	8011e02 <put_fat>
 801206c:	4603      	mov	r3, r0
 801206e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012070:	7ffb      	ldrb	r3, [r7, #31]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d001      	beq.n	801207a <remove_chain+0x4a>
 8012076:	7ffb      	ldrb	r3, [r7, #31]
 8012078:	e03b      	b.n	80120f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801207a:	68b9      	ldr	r1, [r7, #8]
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f7ff fdf0 	bl	8011c62 <get_fat>
 8012082:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d031      	beq.n	80120ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d101      	bne.n	8012094 <remove_chain+0x64>
 8012090:	2302      	movs	r3, #2
 8012092:	e02e      	b.n	80120f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209a:	d101      	bne.n	80120a0 <remove_chain+0x70>
 801209c:	2301      	movs	r3, #1
 801209e:	e028      	b.n	80120f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120a0:	2200      	movs	r2, #0
 80120a2:	68b9      	ldr	r1, [r7, #8]
 80120a4:	69b8      	ldr	r0, [r7, #24]
 80120a6:	f7ff feac 	bl	8011e02 <put_fat>
 80120aa:	4603      	mov	r3, r0
 80120ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120ae:	7ffb      	ldrb	r3, [r7, #31]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d001      	beq.n	80120b8 <remove_chain+0x88>
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
 80120b6:	e01c      	b.n	80120f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	695a      	ldr	r2, [r3, #20]
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	69db      	ldr	r3, [r3, #28]
 80120c0:	3b02      	subs	r3, #2
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d20b      	bcs.n	80120de <remove_chain+0xae>
			fs->free_clst++;
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	695b      	ldr	r3, [r3, #20]
 80120ca:	1c5a      	adds	r2, r3, #1
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	791b      	ldrb	r3, [r3, #4]
 80120d4:	f043 0301 	orr.w	r3, r3, #1
 80120d8:	b2da      	uxtb	r2, r3
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	69db      	ldr	r3, [r3, #28]
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d3c6      	bcc.n	801207a <remove_chain+0x4a>
 80120ec:	e000      	b.n	80120f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80120ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80120f0:	2300      	movs	r3, #0
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3720      	adds	r7, #32
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b088      	sub	sp, #32
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
 8012102:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d10d      	bne.n	801212c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	691b      	ldr	r3, [r3, #16]
 8012114:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d004      	beq.n	8012126 <create_chain+0x2c>
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	69db      	ldr	r3, [r3, #28]
 8012120:	69ba      	ldr	r2, [r7, #24]
 8012122:	429a      	cmp	r2, r3
 8012124:	d31b      	bcc.n	801215e <create_chain+0x64>
 8012126:	2301      	movs	r3, #1
 8012128:	61bb      	str	r3, [r7, #24]
 801212a:	e018      	b.n	801215e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff fd97 	bl	8011c62 <get_fat>
 8012134:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d801      	bhi.n	8012140 <create_chain+0x46>
 801213c:	2301      	movs	r3, #1
 801213e:	e070      	b.n	8012222 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012146:	d101      	bne.n	801214c <create_chain+0x52>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	e06a      	b.n	8012222 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	69db      	ldr	r3, [r3, #28]
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	429a      	cmp	r2, r3
 8012154:	d201      	bcs.n	801215a <create_chain+0x60>
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	e063      	b.n	8012222 <create_chain+0x128>
		scl = clst;
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	3301      	adds	r3, #1
 8012166:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	69db      	ldr	r3, [r3, #28]
 801216c:	69fa      	ldr	r2, [r7, #28]
 801216e:	429a      	cmp	r2, r3
 8012170:	d307      	bcc.n	8012182 <create_chain+0x88>
				ncl = 2;
 8012172:	2302      	movs	r3, #2
 8012174:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012176:	69fa      	ldr	r2, [r7, #28]
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	429a      	cmp	r2, r3
 801217c:	d901      	bls.n	8012182 <create_chain+0x88>
 801217e:	2300      	movs	r3, #0
 8012180:	e04f      	b.n	8012222 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012182:	69f9      	ldr	r1, [r7, #28]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff fd6c 	bl	8011c62 <get_fat>
 801218a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00e      	beq.n	80121b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d003      	beq.n	80121a0 <create_chain+0xa6>
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219e:	d101      	bne.n	80121a4 <create_chain+0xaa>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	e03e      	b.n	8012222 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121a4:	69fa      	ldr	r2, [r7, #28]
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d1da      	bne.n	8012162 <create_chain+0x68>
 80121ac:	2300      	movs	r3, #0
 80121ae:	e038      	b.n	8012222 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121b2:	f04f 32ff 	mov.w	r2, #4294967295
 80121b6:	69f9      	ldr	r1, [r7, #28]
 80121b8:	6938      	ldr	r0, [r7, #16]
 80121ba:	f7ff fe22 	bl	8011e02 <put_fat>
 80121be:	4603      	mov	r3, r0
 80121c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d109      	bne.n	80121dc <create_chain+0xe2>
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d006      	beq.n	80121dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121ce:	69fa      	ldr	r2, [r7, #28]
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6938      	ldr	r0, [r7, #16]
 80121d4:	f7ff fe15 	bl	8011e02 <put_fat>
 80121d8:	4603      	mov	r3, r0
 80121da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80121dc:	7dfb      	ldrb	r3, [r7, #23]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d116      	bne.n	8012210 <create_chain+0x116>
		fs->last_clst = ncl;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	69fa      	ldr	r2, [r7, #28]
 80121e6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	695a      	ldr	r2, [r3, #20]
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	69db      	ldr	r3, [r3, #28]
 80121f0:	3b02      	subs	r3, #2
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d804      	bhi.n	8012200 <create_chain+0x106>
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	695b      	ldr	r3, [r3, #20]
 80121fa:	1e5a      	subs	r2, r3, #1
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	791b      	ldrb	r3, [r3, #4]
 8012204:	f043 0301 	orr.w	r3, r3, #1
 8012208:	b2da      	uxtb	r2, r3
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	711a      	strb	r2, [r3, #4]
 801220e:	e007      	b.n	8012220 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012210:	7dfb      	ldrb	r3, [r7, #23]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d102      	bne.n	801221c <create_chain+0x122>
 8012216:	f04f 33ff 	mov.w	r3, #4294967295
 801221a:	e000      	b.n	801221e <create_chain+0x124>
 801221c:	2301      	movs	r3, #1
 801221e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012220:	69fb      	ldr	r3, [r7, #28]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3720      	adds	r7, #32
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801222a:	b480      	push	{r7}
 801222c:	b087      	sub	sp, #28
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223e:	3304      	adds	r3, #4
 8012240:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	899b      	ldrh	r3, [r3, #12]
 8012246:	461a      	mov	r2, r3
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	fbb3 f3f2 	udiv	r3, r3, r2
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	8952      	ldrh	r2, [r2, #10]
 8012252:	fbb3 f3f2 	udiv	r3, r3, r2
 8012256:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	1d1a      	adds	r2, r3, #4
 801225c:	613a      	str	r2, [r7, #16]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d101      	bne.n	801226c <clmt_clust+0x42>
 8012268:	2300      	movs	r3, #0
 801226a:	e010      	b.n	801228e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801226c:	697a      	ldr	r2, [r7, #20]
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	429a      	cmp	r2, r3
 8012272:	d307      	bcc.n	8012284 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012274:	697a      	ldr	r2, [r7, #20]
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	617b      	str	r3, [r7, #20]
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	3304      	adds	r3, #4
 8012280:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012282:	e7e9      	b.n	8012258 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012284:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	4413      	add	r3, r2
}
 801228e:	4618      	mov	r0, r3
 8012290:	371c      	adds	r7, #28
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr

0801229a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b086      	sub	sp, #24
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
 80122a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122b0:	d204      	bcs.n	80122bc <dir_sdi+0x22>
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	f003 031f 	and.w	r3, r3, #31
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d001      	beq.n	80122c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122bc:	2302      	movs	r3, #2
 80122be:	e071      	b.n	80123a4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	683a      	ldr	r2, [r7, #0]
 80122c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d106      	bne.n	80122e0 <dir_sdi+0x46>
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	2b02      	cmp	r3, #2
 80122d8:	d902      	bls.n	80122e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d10c      	bne.n	8012300 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	095b      	lsrs	r3, r3, #5
 80122ea:	693a      	ldr	r2, [r7, #16]
 80122ec:	8912      	ldrh	r2, [r2, #8]
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d301      	bcc.n	80122f6 <dir_sdi+0x5c>
 80122f2:	2302      	movs	r3, #2
 80122f4:	e056      	b.n	80123a4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	61da      	str	r2, [r3, #28]
 80122fe:	e02d      	b.n	801235c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	895b      	ldrh	r3, [r3, #10]
 8012304:	461a      	mov	r2, r3
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	fb03 f302 	mul.w	r3, r3, r2
 801230e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012310:	e019      	b.n	8012346 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6979      	ldr	r1, [r7, #20]
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff fca3 	bl	8011c62 <get_fat>
 801231c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012324:	d101      	bne.n	801232a <dir_sdi+0x90>
 8012326:	2301      	movs	r3, #1
 8012328:	e03c      	b.n	80123a4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d904      	bls.n	801233a <dir_sdi+0xa0>
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	69db      	ldr	r3, [r3, #28]
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	429a      	cmp	r2, r3
 8012338:	d301      	bcc.n	801233e <dir_sdi+0xa4>
 801233a:	2302      	movs	r3, #2
 801233c:	e032      	b.n	80123a4 <dir_sdi+0x10a>
			ofs -= csz;
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012346:	683a      	ldr	r2, [r7, #0]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	429a      	cmp	r2, r3
 801234c:	d2e1      	bcs.n	8012312 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801234e:	6979      	ldr	r1, [r7, #20]
 8012350:	6938      	ldr	r0, [r7, #16]
 8012352:	f7ff fc67 	bl	8011c24 <clust2sect>
 8012356:	4602      	mov	r2, r0
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	697a      	ldr	r2, [r7, #20]
 8012360:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	69db      	ldr	r3, [r3, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d101      	bne.n	801236e <dir_sdi+0xd4>
 801236a:	2302      	movs	r3, #2
 801236c:	e01a      	b.n	80123a4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	69da      	ldr	r2, [r3, #28]
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	899b      	ldrh	r3, [r3, #12]
 8012376:	4619      	mov	r1, r3
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	fbb3 f3f1 	udiv	r3, r3, r1
 801237e:	441a      	add	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	899b      	ldrh	r3, [r3, #12]
 801238e:	461a      	mov	r2, r3
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	fbb3 f0f2 	udiv	r0, r3, r2
 8012396:	fb02 f200 	mul.w	r2, r2, r0
 801239a:	1a9b      	subs	r3, r3, r2
 801239c:	18ca      	adds	r2, r1, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123a2:	2300      	movs	r3, #0
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3718      	adds	r7, #24
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	695b      	ldr	r3, [r3, #20]
 80123c0:	3320      	adds	r3, #32
 80123c2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	69db      	ldr	r3, [r3, #28]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d003      	beq.n	80123d4 <dir_next+0x28>
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123d2:	d301      	bcc.n	80123d8 <dir_next+0x2c>
 80123d4:	2304      	movs	r3, #4
 80123d6:	e0bb      	b.n	8012550 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	899b      	ldrh	r3, [r3, #12]
 80123dc:	461a      	mov	r2, r3
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80123e4:	fb02 f201 	mul.w	r2, r2, r1
 80123e8:	1a9b      	subs	r3, r3, r2
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f040 809d 	bne.w	801252a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	1c5a      	adds	r2, r3, #1
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	699b      	ldr	r3, [r3, #24]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10b      	bne.n	801241a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	095b      	lsrs	r3, r3, #5
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	8912      	ldrh	r2, [r2, #8]
 801240a:	4293      	cmp	r3, r2
 801240c:	f0c0 808d 	bcc.w	801252a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	61da      	str	r2, [r3, #28]
 8012416:	2304      	movs	r3, #4
 8012418:	e09a      	b.n	8012550 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	899b      	ldrh	r3, [r3, #12]
 801241e:	461a      	mov	r2, r3
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	fbb3 f3f2 	udiv	r3, r3, r2
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	8952      	ldrh	r2, [r2, #10]
 801242a:	3a01      	subs	r2, #1
 801242c:	4013      	ands	r3, r2
 801242e:	2b00      	cmp	r3, #0
 8012430:	d17b      	bne.n	801252a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7ff fc11 	bl	8011c62 <get_fat>
 8012440:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d801      	bhi.n	801244c <dir_next+0xa0>
 8012448:	2302      	movs	r3, #2
 801244a:	e081      	b.n	8012550 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d101      	bne.n	8012458 <dir_next+0xac>
 8012454:	2301      	movs	r3, #1
 8012456:	e07b      	b.n	8012550 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	697a      	ldr	r2, [r7, #20]
 801245e:	429a      	cmp	r2, r3
 8012460:	d359      	bcc.n	8012516 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d104      	bne.n	8012472 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	61da      	str	r2, [r3, #28]
 801246e:	2304      	movs	r3, #4
 8012470:	e06e      	b.n	8012550 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	699b      	ldr	r3, [r3, #24]
 8012478:	4619      	mov	r1, r3
 801247a:	4610      	mov	r0, r2
 801247c:	f7ff fe3d 	bl	80120fa <create_chain>
 8012480:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d101      	bne.n	801248c <dir_next+0xe0>
 8012488:	2307      	movs	r3, #7
 801248a:	e061      	b.n	8012550 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d101      	bne.n	8012496 <dir_next+0xea>
 8012492:	2302      	movs	r3, #2
 8012494:	e05c      	b.n	8012550 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801249c:	d101      	bne.n	80124a2 <dir_next+0xf6>
 801249e:	2301      	movs	r3, #1
 80124a0:	e056      	b.n	8012550 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124a2:	68f8      	ldr	r0, [r7, #12]
 80124a4:	f7ff fadc 	bl	8011a60 <sync_window>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <dir_next+0x106>
 80124ae:	2301      	movs	r3, #1
 80124b0:	e04e      	b.n	8012550 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	899b      	ldrh	r3, [r3, #12]
 80124bc:	461a      	mov	r2, r3
 80124be:	2100      	movs	r1, #0
 80124c0:	f7ff f905 	bl	80116ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124c4:	2300      	movs	r3, #0
 80124c6:	613b      	str	r3, [r7, #16]
 80124c8:	6979      	ldr	r1, [r7, #20]
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f7ff fbaa 	bl	8011c24 <clust2sect>
 80124d0:	4602      	mov	r2, r0
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	635a      	str	r2, [r3, #52]	; 0x34
 80124d6:	e012      	b.n	80124fe <dir_next+0x152>
						fs->wflag = 1;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2201      	movs	r2, #1
 80124dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f7ff fabe 	bl	8011a60 <sync_window>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <dir_next+0x142>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e030      	b.n	8012550 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	3301      	adds	r3, #1
 80124f2:	613b      	str	r3, [r7, #16]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f8:	1c5a      	adds	r2, r3, #1
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	635a      	str	r2, [r3, #52]	; 0x34
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	895b      	ldrh	r3, [r3, #10]
 8012502:	461a      	mov	r2, r3
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	4293      	cmp	r3, r2
 8012508:	d3e6      	bcc.n	80124d8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	1ad2      	subs	r2, r2, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	697a      	ldr	r2, [r7, #20]
 801251a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801251c:	6979      	ldr	r1, [r7, #20]
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f7ff fb80 	bl	8011c24 <clust2sect>
 8012524:	4602      	mov	r2, r0
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	899b      	ldrh	r3, [r3, #12]
 801253a:	461a      	mov	r2, r3
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012542:	fb02 f200 	mul.w	r2, r2, r0
 8012546:	1a9b      	subs	r3, r3, r2
 8012548:	18ca      	adds	r2, r1, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012568:	2100      	movs	r1, #0
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7ff fe95 	bl	801229a <dir_sdi>
 8012570:	4603      	mov	r3, r0
 8012572:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d12b      	bne.n	80125d2 <dir_alloc+0x7a>
		n = 0;
 801257a:	2300      	movs	r3, #0
 801257c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	69db      	ldr	r3, [r3, #28]
 8012582:	4619      	mov	r1, r3
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f7ff faaf 	bl	8011ae8 <move_window>
 801258a:	4603      	mov	r3, r0
 801258c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801258e:	7dfb      	ldrb	r3, [r7, #23]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d11d      	bne.n	80125d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6a1b      	ldr	r3, [r3, #32]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	2be5      	cmp	r3, #229	; 0xe5
 801259c:	d004      	beq.n	80125a8 <dir_alloc+0x50>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6a1b      	ldr	r3, [r3, #32]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d107      	bne.n	80125b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	3301      	adds	r3, #1
 80125ac:	613b      	str	r3, [r7, #16]
 80125ae:	693a      	ldr	r2, [r7, #16]
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d102      	bne.n	80125bc <dir_alloc+0x64>
 80125b6:	e00c      	b.n	80125d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125b8:	2300      	movs	r3, #0
 80125ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125bc:	2101      	movs	r1, #1
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7ff fef4 	bl	80123ac <dir_next>
 80125c4:	4603      	mov	r3, r0
 80125c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d0d7      	beq.n	801257e <dir_alloc+0x26>
 80125ce:	e000      	b.n	80125d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80125d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125d2:	7dfb      	ldrb	r3, [r7, #23]
 80125d4:	2b04      	cmp	r3, #4
 80125d6:	d101      	bne.n	80125dc <dir_alloc+0x84>
 80125d8:	2307      	movs	r3, #7
 80125da:	75fb      	strb	r3, [r7, #23]
	return res;
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3718      	adds	r7, #24
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b084      	sub	sp, #16
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
 80125ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	331a      	adds	r3, #26
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fe ffc7 	bl	8011588 <ld_word>
 80125fa:	4603      	mov	r3, r0
 80125fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	2b03      	cmp	r3, #3
 8012604:	d109      	bne.n	801261a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	3314      	adds	r3, #20
 801260a:	4618      	mov	r0, r3
 801260c:	f7fe ffbc 	bl	8011588 <ld_word>
 8012610:	4603      	mov	r3, r0
 8012612:	041b      	lsls	r3, r3, #16
 8012614:	68fa      	ldr	r2, [r7, #12]
 8012616:	4313      	orrs	r3, r2
 8012618:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801261a:	68fb      	ldr	r3, [r7, #12]
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	331a      	adds	r3, #26
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	b292      	uxth	r2, r2
 8012638:	4611      	mov	r1, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe ffdf 	bl	80115fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	2b03      	cmp	r3, #3
 8012646:	d109      	bne.n	801265c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	f103 0214 	add.w	r2, r3, #20
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	0c1b      	lsrs	r3, r3, #16
 8012652:	b29b      	uxth	r3, r3
 8012654:	4619      	mov	r1, r3
 8012656:	4610      	mov	r0, r2
 8012658:	f7fe ffd1 	bl	80115fe <st_word>
	}
}
 801265c:	bf00      	nop
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801266e:	2304      	movs	r3, #4
 8012670:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012678:	e03c      	b.n	80126f4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	69db      	ldr	r3, [r3, #28]
 801267e:	4619      	mov	r1, r3
 8012680:	6938      	ldr	r0, [r7, #16]
 8012682:	f7ff fa31 	bl	8011ae8 <move_window>
 8012686:	4603      	mov	r3, r0
 8012688:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801268a:	7dfb      	ldrb	r3, [r7, #23]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d136      	bne.n	80126fe <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6a1b      	ldr	r3, [r3, #32]
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012698:	7bfb      	ldrb	r3, [r7, #15]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d102      	bne.n	80126a4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801269e:	2304      	movs	r3, #4
 80126a0:	75fb      	strb	r3, [r7, #23]
 80126a2:	e031      	b.n	8012708 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6a1b      	ldr	r3, [r3, #32]
 80126a8:	330b      	adds	r3, #11
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126b0:	73bb      	strb	r3, [r7, #14]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	7bba      	ldrb	r2, [r7, #14]
 80126b6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80126b8:	7bfb      	ldrb	r3, [r7, #15]
 80126ba:	2be5      	cmp	r3, #229	; 0xe5
 80126bc:	d011      	beq.n	80126e2 <dir_read+0x7e>
 80126be:	7bfb      	ldrb	r3, [r7, #15]
 80126c0:	2b2e      	cmp	r3, #46	; 0x2e
 80126c2:	d00e      	beq.n	80126e2 <dir_read+0x7e>
 80126c4:	7bbb      	ldrb	r3, [r7, #14]
 80126c6:	2b0f      	cmp	r3, #15
 80126c8:	d00b      	beq.n	80126e2 <dir_read+0x7e>
 80126ca:	7bbb      	ldrb	r3, [r7, #14]
 80126cc:	f023 0320 	bic.w	r3, r3, #32
 80126d0:	2b08      	cmp	r3, #8
 80126d2:	bf0c      	ite	eq
 80126d4:	2301      	moveq	r3, #1
 80126d6:	2300      	movne	r3, #0
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	461a      	mov	r2, r3
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	4293      	cmp	r3, r2
 80126e0:	d00f      	beq.n	8012702 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80126e2:	2100      	movs	r1, #0
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff fe61 	bl	80123ac <dir_next>
 80126ea:	4603      	mov	r3, r0
 80126ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d108      	bne.n	8012706 <dir_read+0xa2>
	while (dp->sect) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	69db      	ldr	r3, [r3, #28]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d1be      	bne.n	801267a <dir_read+0x16>
 80126fc:	e004      	b.n	8012708 <dir_read+0xa4>
		if (res != FR_OK) break;
 80126fe:	bf00      	nop
 8012700:	e002      	b.n	8012708 <dir_read+0xa4>
				break;
 8012702:	bf00      	nop
 8012704:	e000      	b.n	8012708 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012706:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012708:	7dfb      	ldrb	r3, [r7, #23]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d002      	beq.n	8012714 <dir_read+0xb0>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2200      	movs	r2, #0
 8012712:	61da      	str	r2, [r3, #28]
	return res;
 8012714:	7dfb      	ldrb	r3, [r7, #23]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b086      	sub	sp, #24
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801272c:	2100      	movs	r1, #0
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7ff fdb3 	bl	801229a <dir_sdi>
 8012734:	4603      	mov	r3, r0
 8012736:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012738:	7dfb      	ldrb	r3, [r7, #23]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <dir_find+0x24>
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	e03e      	b.n	80127c0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	4619      	mov	r1, r3
 8012748:	6938      	ldr	r0, [r7, #16]
 801274a:	f7ff f9cd 	bl	8011ae8 <move_window>
 801274e:	4603      	mov	r3, r0
 8012750:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012752:	7dfb      	ldrb	r3, [r7, #23]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d12f      	bne.n	80127b8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6a1b      	ldr	r3, [r3, #32]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012760:	7bfb      	ldrb	r3, [r7, #15]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d102      	bne.n	801276c <dir_find+0x4e>
 8012766:	2304      	movs	r3, #4
 8012768:	75fb      	strb	r3, [r7, #23]
 801276a:	e028      	b.n	80127be <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6a1b      	ldr	r3, [r3, #32]
 8012770:	330b      	adds	r3, #11
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012778:	b2da      	uxtb	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6a1b      	ldr	r3, [r3, #32]
 8012782:	330b      	adds	r3, #11
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	f003 0308 	and.w	r3, r3, #8
 801278a:	2b00      	cmp	r3, #0
 801278c:	d10a      	bne.n	80127a4 <dir_find+0x86>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a18      	ldr	r0, [r3, #32]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3324      	adds	r3, #36	; 0x24
 8012796:	220b      	movs	r2, #11
 8012798:	4619      	mov	r1, r3
 801279a:	f7fe ffb2 	bl	8011702 <mem_cmp>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d00b      	beq.n	80127bc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80127a4:	2100      	movs	r1, #0
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff fe00 	bl	80123ac <dir_next>
 80127ac:	4603      	mov	r3, r0
 80127ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80127b0:	7dfb      	ldrb	r3, [r7, #23]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d0c5      	beq.n	8012742 <dir_find+0x24>
 80127b6:	e002      	b.n	80127be <dir_find+0xa0>
		if (res != FR_OK) break;
 80127b8:	bf00      	nop
 80127ba:	e000      	b.n	80127be <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80127bc:	bf00      	nop

	return res;
 80127be:	7dfb      	ldrb	r3, [r7, #23]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3718      	adds	r7, #24
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80127d6:	2101      	movs	r1, #1
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f7ff febd 	bl	8012558 <dir_alloc>
 80127de:	4603      	mov	r3, r0
 80127e0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d11c      	bne.n	8012822 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	4619      	mov	r1, r3
 80127ee:	68b8      	ldr	r0, [r7, #8]
 80127f0:	f7ff f97a 	bl	8011ae8 <move_window>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d111      	bne.n	8012822 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6a1b      	ldr	r3, [r3, #32]
 8012802:	2220      	movs	r2, #32
 8012804:	2100      	movs	r1, #0
 8012806:	4618      	mov	r0, r3
 8012808:	f7fe ff61 	bl	80116ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6a18      	ldr	r0, [r3, #32]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	3324      	adds	r3, #36	; 0x24
 8012814:	220b      	movs	r2, #11
 8012816:	4619      	mov	r1, r3
 8012818:	f7fe ff38 	bl	801168c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	2201      	movs	r2, #1
 8012820:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012822:	7bfb      	ldrb	r3, [r7, #15]
}
 8012824:	4618      	mov	r0, r3
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	69db      	ldr	r3, [r3, #28]
 801283e:	4619      	mov	r1, r3
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f7ff f951 	bl	8011ae8 <move_window>
 8012846:	4603      	mov	r3, r0
 8012848:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801284a:	7afb      	ldrb	r3, [r7, #11]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d106      	bne.n	801285e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6a1b      	ldr	r3, [r3, #32]
 8012854:	22e5      	movs	r2, #229	; 0xe5
 8012856:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2201      	movs	r2, #1
 801285c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801285e:	7afb      	ldrb	r3, [r7, #11]
}
 8012860:	4618      	mov	r0, r3
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b088      	sub	sp, #32
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	60fb      	str	r3, [r7, #12]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	3324      	adds	r3, #36	; 0x24
 801287c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801287e:	220b      	movs	r2, #11
 8012880:	2120      	movs	r1, #32
 8012882:	68b8      	ldr	r0, [r7, #8]
 8012884:	f7fe ff23 	bl	80116ce <mem_set>
	si = i = 0; ni = 8;
 8012888:	2300      	movs	r3, #0
 801288a:	613b      	str	r3, [r7, #16]
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	617b      	str	r3, [r7, #20]
 8012890:	2308      	movs	r3, #8
 8012892:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	4413      	add	r3, r2
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2b2e      	cmp	r3, #46	; 0x2e
 801289e:	d12f      	bne.n	8012900 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	1c5a      	adds	r2, r3, #1
 80128a4:	617a      	str	r2, [r7, #20]
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	4413      	add	r3, r2
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80128ae:	7ffb      	ldrb	r3, [r7, #31]
 80128b0:	2b2e      	cmp	r3, #46	; 0x2e
 80128b2:	d10a      	bne.n	80128ca <create_name+0x62>
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2b02      	cmp	r3, #2
 80128b8:	d807      	bhi.n	80128ca <create_name+0x62>
			sfn[i++] = c;
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	613a      	str	r2, [r7, #16]
 80128c0:	68ba      	ldr	r2, [r7, #8]
 80128c2:	4413      	add	r3, r2
 80128c4:	7ffa      	ldrb	r2, [r7, #31]
 80128c6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80128c8:	e7ea      	b.n	80128a0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80128ca:	7ffb      	ldrb	r3, [r7, #31]
 80128cc:	2b2f      	cmp	r3, #47	; 0x2f
 80128ce:	d007      	beq.n	80128e0 <create_name+0x78>
 80128d0:	7ffb      	ldrb	r3, [r7, #31]
 80128d2:	2b5c      	cmp	r3, #92	; 0x5c
 80128d4:	d004      	beq.n	80128e0 <create_name+0x78>
 80128d6:	7ffb      	ldrb	r3, [r7, #31]
 80128d8:	2b20      	cmp	r3, #32
 80128da:	d901      	bls.n	80128e0 <create_name+0x78>
 80128dc:	2306      	movs	r3, #6
 80128de:	e084      	b.n	80129ea <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	441a      	add	r2, r3
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80128ea:	7ffb      	ldrb	r3, [r7, #31]
 80128ec:	2b20      	cmp	r3, #32
 80128ee:	d801      	bhi.n	80128f4 <create_name+0x8c>
 80128f0:	2224      	movs	r2, #36	; 0x24
 80128f2:	e000      	b.n	80128f6 <create_name+0x8e>
 80128f4:	2220      	movs	r2, #32
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	330b      	adds	r3, #11
 80128fa:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80128fc:	2300      	movs	r3, #0
 80128fe:	e074      	b.n	80129ea <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	1c5a      	adds	r2, r3, #1
 8012904:	617a      	str	r2, [r7, #20]
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	4413      	add	r3, r2
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801290e:	7ffb      	ldrb	r3, [r7, #31]
 8012910:	2b20      	cmp	r3, #32
 8012912:	d94e      	bls.n	80129b2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012914:	7ffb      	ldrb	r3, [r7, #31]
 8012916:	2b2f      	cmp	r3, #47	; 0x2f
 8012918:	d006      	beq.n	8012928 <create_name+0xc0>
 801291a:	7ffb      	ldrb	r3, [r7, #31]
 801291c:	2b5c      	cmp	r3, #92	; 0x5c
 801291e:	d110      	bne.n	8012942 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012920:	e002      	b.n	8012928 <create_name+0xc0>
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	3301      	adds	r3, #1
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	4413      	add	r3, r2
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b2f      	cmp	r3, #47	; 0x2f
 8012932:	d0f6      	beq.n	8012922 <create_name+0xba>
 8012934:	68fa      	ldr	r2, [r7, #12]
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	4413      	add	r3, r2
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b5c      	cmp	r3, #92	; 0x5c
 801293e:	d0f0      	beq.n	8012922 <create_name+0xba>
			break;
 8012940:	e038      	b.n	80129b4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012942:	7ffb      	ldrb	r3, [r7, #31]
 8012944:	2b2e      	cmp	r3, #46	; 0x2e
 8012946:	d003      	beq.n	8012950 <create_name+0xe8>
 8012948:	693a      	ldr	r2, [r7, #16]
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	429a      	cmp	r2, r3
 801294e:	d30c      	bcc.n	801296a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	2b0b      	cmp	r3, #11
 8012954:	d002      	beq.n	801295c <create_name+0xf4>
 8012956:	7ffb      	ldrb	r3, [r7, #31]
 8012958:	2b2e      	cmp	r3, #46	; 0x2e
 801295a:	d001      	beq.n	8012960 <create_name+0xf8>
 801295c:	2306      	movs	r3, #6
 801295e:	e044      	b.n	80129ea <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012960:	2308      	movs	r3, #8
 8012962:	613b      	str	r3, [r7, #16]
 8012964:	230b      	movs	r3, #11
 8012966:	61bb      	str	r3, [r7, #24]
			continue;
 8012968:	e022      	b.n	80129b0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801296a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801296e:	2b00      	cmp	r3, #0
 8012970:	da04      	bge.n	801297c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012972:	7ffb      	ldrb	r3, [r7, #31]
 8012974:	3b80      	subs	r3, #128	; 0x80
 8012976:	4a1f      	ldr	r2, [pc, #124]	; (80129f4 <create_name+0x18c>)
 8012978:	5cd3      	ldrb	r3, [r2, r3]
 801297a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801297c:	7ffb      	ldrb	r3, [r7, #31]
 801297e:	4619      	mov	r1, r3
 8012980:	481d      	ldr	r0, [pc, #116]	; (80129f8 <create_name+0x190>)
 8012982:	f7fe fee5 	bl	8011750 <chk_chr>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <create_name+0x128>
 801298c:	2306      	movs	r3, #6
 801298e:	e02c      	b.n	80129ea <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012990:	7ffb      	ldrb	r3, [r7, #31]
 8012992:	2b60      	cmp	r3, #96	; 0x60
 8012994:	d905      	bls.n	80129a2 <create_name+0x13a>
 8012996:	7ffb      	ldrb	r3, [r7, #31]
 8012998:	2b7a      	cmp	r3, #122	; 0x7a
 801299a:	d802      	bhi.n	80129a2 <create_name+0x13a>
 801299c:	7ffb      	ldrb	r3, [r7, #31]
 801299e:	3b20      	subs	r3, #32
 80129a0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	1c5a      	adds	r2, r3, #1
 80129a6:	613a      	str	r2, [r7, #16]
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	4413      	add	r3, r2
 80129ac:	7ffa      	ldrb	r2, [r7, #31]
 80129ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80129b0:	e7a6      	b.n	8012900 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80129b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80129b4:	68fa      	ldr	r2, [r7, #12]
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	441a      	add	r2, r3
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <create_name+0x160>
 80129c4:	2306      	movs	r3, #6
 80129c6:	e010      	b.n	80129ea <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	2be5      	cmp	r3, #229	; 0xe5
 80129ce:	d102      	bne.n	80129d6 <create_name+0x16e>
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	2205      	movs	r2, #5
 80129d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80129d6:	7ffb      	ldrb	r3, [r7, #31]
 80129d8:	2b20      	cmp	r3, #32
 80129da:	d801      	bhi.n	80129e0 <create_name+0x178>
 80129dc:	2204      	movs	r2, #4
 80129de:	e000      	b.n	80129e2 <create_name+0x17a>
 80129e0:	2200      	movs	r2, #0
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	330b      	adds	r3, #11
 80129e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80129e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3720      	adds	r7, #32
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	08018fac 	.word	0x08018fac
 80129f8:	08018f5c 	.word	0x08018f5c

080129fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b086      	sub	sp, #24
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	2b2f      	cmp	r3, #47	; 0x2f
 8012a16:	d00b      	beq.n	8012a30 <follow_path+0x34>
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a1e:	d007      	beq.n	8012a30 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	699a      	ldr	r2, [r3, #24]
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	609a      	str	r2, [r3, #8]
 8012a28:	e00d      	b.n	8012a46 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	603b      	str	r3, [r7, #0]
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	2b2f      	cmp	r3, #47	; 0x2f
 8012a36:	d0f8      	beq.n	8012a2a <follow_path+0x2e>
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a3e:	d0f4      	beq.n	8012a2a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2200      	movs	r2, #0
 8012a44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	2b1f      	cmp	r3, #31
 8012a4c:	d80a      	bhi.n	8012a64 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2280      	movs	r2, #128	; 0x80
 8012a52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012a56:	2100      	movs	r1, #0
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f7ff fc1e 	bl	801229a <dir_sdi>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	75fb      	strb	r3, [r7, #23]
 8012a62:	e05b      	b.n	8012b1c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a64:	463b      	mov	r3, r7
 8012a66:	4619      	mov	r1, r3
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7ff fefd 	bl	8012868 <create_name>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d14c      	bne.n	8012b12 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7ff fe50 	bl	801271e <dir_find>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d01b      	beq.n	8012ac8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012a90:	7dfb      	ldrb	r3, [r7, #23]
 8012a92:	2b04      	cmp	r3, #4
 8012a94:	d13f      	bne.n	8012b16 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012a96:	7afb      	ldrb	r3, [r7, #11]
 8012a98:	f003 0320 	and.w	r3, r3, #32
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00b      	beq.n	8012ab8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012aa0:	7afb      	ldrb	r3, [r7, #11]
 8012aa2:	f003 0304 	and.w	r3, r3, #4
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d031      	beq.n	8012b0e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2280      	movs	r2, #128	; 0x80
 8012aae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012ab6:	e02e      	b.n	8012b16 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012ab8:	7afb      	ldrb	r3, [r7, #11]
 8012aba:	f003 0304 	and.w	r3, r3, #4
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d129      	bne.n	8012b16 <follow_path+0x11a>
 8012ac2:	2305      	movs	r3, #5
 8012ac4:	75fb      	strb	r3, [r7, #23]
				break;
 8012ac6:	e026      	b.n	8012b16 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ac8:	7afb      	ldrb	r3, [r7, #11]
 8012aca:	f003 0304 	and.w	r3, r3, #4
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d123      	bne.n	8012b1a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	799b      	ldrb	r3, [r3, #6]
 8012ad6:	f003 0310 	and.w	r3, r3, #16
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d102      	bne.n	8012ae4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012ade:	2305      	movs	r3, #5
 8012ae0:	75fb      	strb	r3, [r7, #23]
 8012ae2:	e01b      	b.n	8012b1c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	695b      	ldr	r3, [r3, #20]
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	8992      	ldrh	r2, [r2, #12]
 8012af2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012af6:	fb02 f200 	mul.w	r2, r2, r0
 8012afa:	1a9b      	subs	r3, r3, r2
 8012afc:	440b      	add	r3, r1
 8012afe:	4619      	mov	r1, r3
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f7ff fd70 	bl	80125e6 <ld_clust>
 8012b06:	4602      	mov	r2, r0
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	609a      	str	r2, [r3, #8]
 8012b0c:	e7aa      	b.n	8012a64 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012b0e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b10:	e7a8      	b.n	8012a64 <follow_path+0x68>
			if (res != FR_OK) break;
 8012b12:	bf00      	nop
 8012b14:	e002      	b.n	8012b1c <follow_path+0x120>
				break;
 8012b16:	bf00      	nop
 8012b18:	e000      	b.n	8012b1c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b1a:	bf00      	nop
			}
		}
	}

	return res;
 8012b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012b26:	b480      	push	{r7}
 8012b28:	b087      	sub	sp, #28
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d031      	beq.n	8012ba0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	617b      	str	r3, [r7, #20]
 8012b42:	e002      	b.n	8012b4a <get_ldnumber+0x24>
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	3301      	adds	r3, #1
 8012b48:	617b      	str	r3, [r7, #20]
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b20      	cmp	r3, #32
 8012b50:	d903      	bls.n	8012b5a <get_ldnumber+0x34>
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	2b3a      	cmp	r3, #58	; 0x3a
 8012b58:	d1f4      	bne.n	8012b44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	2b3a      	cmp	r3, #58	; 0x3a
 8012b60:	d11c      	bne.n	8012b9c <get_ldnumber+0x76>
			tp = *path;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	1c5a      	adds	r2, r3, #1
 8012b6c:	60fa      	str	r2, [r7, #12]
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	3b30      	subs	r3, #48	; 0x30
 8012b72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	2b09      	cmp	r3, #9
 8012b78:	d80e      	bhi.n	8012b98 <get_ldnumber+0x72>
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d10a      	bne.n	8012b98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d107      	bne.n	8012b98 <get_ldnumber+0x72>
					vol = (int)i;
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	617b      	str	r3, [r7, #20]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	697a      	ldr	r2, [r7, #20]
 8012b96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	e002      	b.n	8012ba2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012ba0:	693b      	ldr	r3, [r7, #16]
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	371c      	adds	r7, #28
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
	...

08012bb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	70da      	strb	r2, [r3, #3]
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bc6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012bc8:	6839      	ldr	r1, [r7, #0]
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7fe ff8c 	bl	8011ae8 <move_window>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d001      	beq.n	8012bda <check_fs+0x2a>
 8012bd6:	2304      	movs	r3, #4
 8012bd8:	e038      	b.n	8012c4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3338      	adds	r3, #56	; 0x38
 8012bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe fcd0 	bl	8011588 <ld_word>
 8012be8:	4603      	mov	r3, r0
 8012bea:	461a      	mov	r2, r3
 8012bec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d001      	beq.n	8012bf8 <check_fs+0x48>
 8012bf4:	2303      	movs	r3, #3
 8012bf6:	e029      	b.n	8012c4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bfe:	2be9      	cmp	r3, #233	; 0xe9
 8012c00:	d009      	beq.n	8012c16 <check_fs+0x66>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c08:	2beb      	cmp	r3, #235	; 0xeb
 8012c0a:	d11e      	bne.n	8012c4a <check_fs+0x9a>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c12:	2b90      	cmp	r3, #144	; 0x90
 8012c14:	d119      	bne.n	8012c4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	3338      	adds	r3, #56	; 0x38
 8012c1a:	3336      	adds	r3, #54	; 0x36
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fe fccb 	bl	80115b8 <ld_dword>
 8012c22:	4603      	mov	r3, r0
 8012c24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c28:	4a0a      	ldr	r2, [pc, #40]	; (8012c54 <check_fs+0xa4>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d101      	bne.n	8012c32 <check_fs+0x82>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e00c      	b.n	8012c4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	3338      	adds	r3, #56	; 0x38
 8012c36:	3352      	adds	r3, #82	; 0x52
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fe fcbd 	bl	80115b8 <ld_dword>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	4b05      	ldr	r3, [pc, #20]	; (8012c58 <check_fs+0xa8>)
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d101      	bne.n	8012c4a <check_fs+0x9a>
 8012c46:	2300      	movs	r3, #0
 8012c48:	e000      	b.n	8012c4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012c4a:	2302      	movs	r3, #2
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	00544146 	.word	0x00544146
 8012c58:	33544146 	.word	0x33544146

08012c5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b096      	sub	sp, #88	; 0x58
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	4613      	mov	r3, r2
 8012c68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f7ff ff58 	bl	8012b26 <get_ldnumber>
 8012c76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da01      	bge.n	8012c82 <find_volume+0x26>
 8012c7e:	230b      	movs	r3, #11
 8012c80:	e268      	b.n	8013154 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012c82:	4ab0      	ldr	r2, [pc, #704]	; (8012f44 <find_volume+0x2e8>)
 8012c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <find_volume+0x3a>
 8012c92:	230c      	movs	r3, #12
 8012c94:	e25e      	b.n	8013154 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c9c:	79fb      	ldrb	r3, [r7, #7]
 8012c9e:	f023 0301 	bic.w	r3, r3, #1
 8012ca2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d01a      	beq.n	8012ce2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	785b      	ldrb	r3, [r3, #1]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7fe fbcb 	bl	801144c <disk_status>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cc0:	f003 0301 	and.w	r3, r3, #1
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10c      	bne.n	8012ce2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012cc8:	79fb      	ldrb	r3, [r7, #7]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d007      	beq.n	8012cde <find_volume+0x82>
 8012cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cd2:	f003 0304 	and.w	r3, r3, #4
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d001      	beq.n	8012cde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012cda:	230a      	movs	r3, #10
 8012cdc:	e23a      	b.n	8013154 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012cde:	2300      	movs	r3, #0
 8012ce0:	e238      	b.n	8013154 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	785b      	ldrb	r3, [r3, #1]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fe fbc3 	bl	8011480 <disk_initialize>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d04:	f003 0301 	and.w	r3, r3, #1
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d001      	beq.n	8012d10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012d0c:	2303      	movs	r3, #3
 8012d0e:	e221      	b.n	8013154 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d007      	beq.n	8012d26 <find_volume+0xca>
 8012d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d1a:	f003 0304 	and.w	r3, r3, #4
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012d22:	230a      	movs	r3, #10
 8012d24:	e216      	b.n	8013154 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d28:	7858      	ldrb	r0, [r3, #1]
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	330c      	adds	r3, #12
 8012d2e:	461a      	mov	r2, r3
 8012d30:	2102      	movs	r1, #2
 8012d32:	f7fe fc0b 	bl	801154c <disk_ioctl>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d001      	beq.n	8012d40 <find_volume+0xe4>
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	e209      	b.n	8013154 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d42:	899b      	ldrh	r3, [r3, #12]
 8012d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d48:	d80d      	bhi.n	8012d66 <find_volume+0x10a>
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	899b      	ldrh	r3, [r3, #12]
 8012d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d52:	d308      	bcc.n	8012d66 <find_volume+0x10a>
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	899b      	ldrh	r3, [r3, #12]
 8012d58:	461a      	mov	r2, r3
 8012d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5c:	899b      	ldrh	r3, [r3, #12]
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	4013      	ands	r3, r2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <find_volume+0x10e>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e1f4      	b.n	8013154 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d72:	f7ff ff1d 	bl	8012bb0 <check_fs>
 8012d76:	4603      	mov	r3, r0
 8012d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d80:	2b02      	cmp	r3, #2
 8012d82:	d14b      	bne.n	8012e1c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d84:	2300      	movs	r3, #0
 8012d86:	643b      	str	r3, [r7, #64]	; 0x40
 8012d88:	e01f      	b.n	8012dca <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d92:	011b      	lsls	r3, r3, #4
 8012d94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012d98:	4413      	add	r3, r2
 8012d9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	3304      	adds	r3, #4
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d006      	beq.n	8012db4 <find_volume+0x158>
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	3308      	adds	r3, #8
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe fc04 	bl	80115b8 <ld_dword>
 8012db0:	4602      	mov	r2, r0
 8012db2:	e000      	b.n	8012db6 <find_volume+0x15a>
 8012db4:	2200      	movs	r2, #0
 8012db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012dbe:	440b      	add	r3, r1
 8012dc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8012dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	d9dc      	bls.n	8012d8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <find_volume+0x184>
 8012dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012de8:	4413      	add	r3, r2
 8012dea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012dee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d005      	beq.n	8012e02 <find_volume+0x1a6>
 8012df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dfa:	f7ff fed9 	bl	8012bb0 <check_fs>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	e000      	b.n	8012e04 <find_volume+0x1a8>
 8012e02:	2303      	movs	r3, #3
 8012e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d905      	bls.n	8012e1c <find_volume+0x1c0>
 8012e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e12:	3301      	adds	r3, #1
 8012e14:	643b      	str	r3, [r7, #64]	; 0x40
 8012e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e18:	2b03      	cmp	r3, #3
 8012e1a:	d9e1      	bls.n	8012de0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e20:	2b04      	cmp	r3, #4
 8012e22:	d101      	bne.n	8012e28 <find_volume+0x1cc>
 8012e24:	2301      	movs	r3, #1
 8012e26:	e195      	b.n	8013154 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d901      	bls.n	8012e34 <find_volume+0x1d8>
 8012e30:	230d      	movs	r3, #13
 8012e32:	e18f      	b.n	8013154 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	3338      	adds	r3, #56	; 0x38
 8012e38:	330b      	adds	r3, #11
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fba4 	bl	8011588 <ld_word>
 8012e40:	4603      	mov	r3, r0
 8012e42:	461a      	mov	r2, r3
 8012e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e46:	899b      	ldrh	r3, [r3, #12]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d001      	beq.n	8012e50 <find_volume+0x1f4>
 8012e4c:	230d      	movs	r3, #13
 8012e4e:	e181      	b.n	8013154 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e52:	3338      	adds	r3, #56	; 0x38
 8012e54:	3316      	adds	r3, #22
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fe fb96 	bl	8011588 <ld_word>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <find_volume+0x218>
 8012e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e68:	3338      	adds	r3, #56	; 0x38
 8012e6a:	3324      	adds	r3, #36	; 0x24
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fe fba3 	bl	80115b8 <ld_dword>
 8012e72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e78:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e86:	789b      	ldrb	r3, [r3, #2]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d005      	beq.n	8012e98 <find_volume+0x23c>
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	789b      	ldrb	r3, [r3, #2]
 8012e90:	2b02      	cmp	r3, #2
 8012e92:	d001      	beq.n	8012e98 <find_volume+0x23c>
 8012e94:	230d      	movs	r3, #13
 8012e96:	e15d      	b.n	8013154 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9a:	789b      	ldrb	r3, [r3, #2]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ea0:	fb02 f303 	mul.w	r3, r2, r3
 8012ea4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb4:	895b      	ldrh	r3, [r3, #10]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d008      	beq.n	8012ecc <find_volume+0x270>
 8012eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebc:	895b      	ldrh	r3, [r3, #10]
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec2:	895b      	ldrh	r3, [r3, #10]
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d001      	beq.n	8012ed0 <find_volume+0x274>
 8012ecc:	230d      	movs	r3, #13
 8012ece:	e141      	b.n	8013154 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed2:	3338      	adds	r3, #56	; 0x38
 8012ed4:	3311      	adds	r3, #17
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fe fb56 	bl	8011588 <ld_word>
 8012edc:	4603      	mov	r3, r0
 8012ede:	461a      	mov	r2, r3
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee6:	891b      	ldrh	r3, [r3, #8]
 8012ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012eea:	8992      	ldrh	r2, [r2, #12]
 8012eec:	0952      	lsrs	r2, r2, #5
 8012eee:	b292      	uxth	r2, r2
 8012ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ef4:	fb02 f201 	mul.w	r2, r2, r1
 8012ef8:	1a9b      	subs	r3, r3, r2
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d001      	beq.n	8012f04 <find_volume+0x2a8>
 8012f00:	230d      	movs	r3, #13
 8012f02:	e127      	b.n	8013154 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f06:	3338      	adds	r3, #56	; 0x38
 8012f08:	3313      	adds	r3, #19
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fe fb3c 	bl	8011588 <ld_word>
 8012f10:	4603      	mov	r3, r0
 8012f12:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d106      	bne.n	8012f28 <find_volume+0x2cc>
 8012f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1c:	3338      	adds	r3, #56	; 0x38
 8012f1e:	3320      	adds	r3, #32
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe fb49 	bl	80115b8 <ld_dword>
 8012f26:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2a:	3338      	adds	r3, #56	; 0x38
 8012f2c:	330e      	adds	r3, #14
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fe fb2a 	bl	8011588 <ld_word>
 8012f34:	4603      	mov	r3, r0
 8012f36:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012f38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d104      	bne.n	8012f48 <find_volume+0x2ec>
 8012f3e:	230d      	movs	r3, #13
 8012f40:	e108      	b.n	8013154 <find_volume+0x4f8>
 8012f42:	bf00      	nop
 8012f44:	200481a4 	.word	0x200481a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012f48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f4c:	4413      	add	r3, r2
 8012f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f50:	8911      	ldrh	r1, [r2, #8]
 8012f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f54:	8992      	ldrh	r2, [r2, #12]
 8012f56:	0952      	lsrs	r2, r2, #5
 8012f58:	b292      	uxth	r2, r2
 8012f5a:	fbb1 f2f2 	udiv	r2, r1, r2
 8012f5e:	b292      	uxth	r2, r2
 8012f60:	4413      	add	r3, r2
 8012f62:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d201      	bcs.n	8012f70 <find_volume+0x314>
 8012f6c:	230d      	movs	r3, #13
 8012f6e:	e0f1      	b.n	8013154 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f78:	8952      	ldrh	r2, [r2, #10]
 8012f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d101      	bne.n	8012f8a <find_volume+0x32e>
 8012f86:	230d      	movs	r3, #13
 8012f88:	e0e4      	b.n	8013154 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012f8a:	2303      	movs	r3, #3
 8012f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d802      	bhi.n	8012fa0 <find_volume+0x344>
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d802      	bhi.n	8012fb0 <find_volume+0x354>
 8012faa:	2301      	movs	r3, #1
 8012fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb2:	1c9a      	adds	r2, r3, #2
 8012fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fbc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012fbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fc2:	441a      	add	r2, r3
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fcc:	441a      	add	r2, r3
 8012fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fd6:	2b03      	cmp	r3, #3
 8012fd8:	d11e      	bne.n	8013018 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fdc:	3338      	adds	r3, #56	; 0x38
 8012fde:	332a      	adds	r3, #42	; 0x2a
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fe fad1 	bl	8011588 <ld_word>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d001      	beq.n	8012ff0 <find_volume+0x394>
 8012fec:	230d      	movs	r3, #13
 8012fee:	e0b1      	b.n	8013154 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	891b      	ldrh	r3, [r3, #8]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d001      	beq.n	8012ffc <find_volume+0x3a0>
 8012ff8:	230d      	movs	r3, #13
 8012ffa:	e0ab      	b.n	8013154 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffe:	3338      	adds	r3, #56	; 0x38
 8013000:	332c      	adds	r3, #44	; 0x2c
 8013002:	4618      	mov	r0, r3
 8013004:	f7fe fad8 	bl	80115b8 <ld_dword>
 8013008:	4602      	mov	r2, r0
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013010:	69db      	ldr	r3, [r3, #28]
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	647b      	str	r3, [r7, #68]	; 0x44
 8013016:	e01f      	b.n	8013058 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301a:	891b      	ldrh	r3, [r3, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d101      	bne.n	8013024 <find_volume+0x3c8>
 8013020:	230d      	movs	r3, #13
 8013022:	e097      	b.n	8013154 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801302a:	441a      	add	r2, r3
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013034:	2b02      	cmp	r3, #2
 8013036:	d103      	bne.n	8013040 <find_volume+0x3e4>
 8013038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303a:	69db      	ldr	r3, [r3, #28]
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	e00a      	b.n	8013056 <find_volume+0x3fa>
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	69da      	ldr	r2, [r3, #28]
 8013044:	4613      	mov	r3, r2
 8013046:	005b      	lsls	r3, r3, #1
 8013048:	4413      	add	r3, r2
 801304a:	085a      	lsrs	r2, r3, #1
 801304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304e:	69db      	ldr	r3, [r3, #28]
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013056:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	6a1a      	ldr	r2, [r3, #32]
 801305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305e:	899b      	ldrh	r3, [r3, #12]
 8013060:	4619      	mov	r1, r3
 8013062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013064:	440b      	add	r3, r1
 8013066:	3b01      	subs	r3, #1
 8013068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801306a:	8989      	ldrh	r1, [r1, #12]
 801306c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013070:	429a      	cmp	r2, r3
 8013072:	d201      	bcs.n	8013078 <find_volume+0x41c>
 8013074:	230d      	movs	r3, #13
 8013076:	e06d      	b.n	8013154 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307a:	f04f 32ff 	mov.w	r2, #4294967295
 801307e:	615a      	str	r2, [r3, #20]
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	695a      	ldr	r2, [r3, #20]
 8013084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013086:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308a:	2280      	movs	r2, #128	; 0x80
 801308c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801308e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013092:	2b03      	cmp	r3, #3
 8013094:	d149      	bne.n	801312a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013098:	3338      	adds	r3, #56	; 0x38
 801309a:	3330      	adds	r3, #48	; 0x30
 801309c:	4618      	mov	r0, r3
 801309e:	f7fe fa73 	bl	8011588 <ld_word>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d140      	bne.n	801312a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80130a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130aa:	3301      	adds	r3, #1
 80130ac:	4619      	mov	r1, r3
 80130ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130b0:	f7fe fd1a 	bl	8011ae8 <move_window>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d137      	bne.n	801312a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80130ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130bc:	2200      	movs	r2, #0
 80130be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80130c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c2:	3338      	adds	r3, #56	; 0x38
 80130c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fe fa5d 	bl	8011588 <ld_word>
 80130ce:	4603      	mov	r3, r0
 80130d0:	461a      	mov	r2, r3
 80130d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d127      	bne.n	801312a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80130da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130dc:	3338      	adds	r3, #56	; 0x38
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fe fa6a 	bl	80115b8 <ld_dword>
 80130e4:	4602      	mov	r2, r0
 80130e6:	4b1d      	ldr	r3, [pc, #116]	; (801315c <find_volume+0x500>)
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d11e      	bne.n	801312a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80130ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ee:	3338      	adds	r3, #56	; 0x38
 80130f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fe fa5f 	bl	80115b8 <ld_dword>
 80130fa:	4602      	mov	r2, r0
 80130fc:	4b18      	ldr	r3, [pc, #96]	; (8013160 <find_volume+0x504>)
 80130fe:	429a      	cmp	r2, r3
 8013100:	d113      	bne.n	801312a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	3338      	adds	r3, #56	; 0x38
 8013106:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe fa54 	bl	80115b8 <ld_dword>
 8013110:	4602      	mov	r2, r0
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013118:	3338      	adds	r3, #56	; 0x38
 801311a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801311e:	4618      	mov	r0, r3
 8013120:	f7fe fa4a 	bl	80115b8 <ld_dword>
 8013124:	4602      	mov	r2, r0
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013130:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013132:	4b0c      	ldr	r3, [pc, #48]	; (8013164 <find_volume+0x508>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	3301      	adds	r3, #1
 8013138:	b29a      	uxth	r2, r3
 801313a:	4b0a      	ldr	r3, [pc, #40]	; (8013164 <find_volume+0x508>)
 801313c:	801a      	strh	r2, [r3, #0]
 801313e:	4b09      	ldr	r3, [pc, #36]	; (8013164 <find_volume+0x508>)
 8013140:	881a      	ldrh	r2, [r3, #0]
 8013142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013144:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013148:	2200      	movs	r2, #0
 801314a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801314c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801314e:	f7fe fc63 	bl	8011a18 <clear_lock>
#endif
	return FR_OK;
 8013152:	2300      	movs	r3, #0
}
 8013154:	4618      	mov	r0, r3
 8013156:	3758      	adds	r7, #88	; 0x58
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	41615252 	.word	0x41615252
 8013160:	61417272 	.word	0x61417272
 8013164:	200481a8 	.word	0x200481a8

08013168 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013172:	2309      	movs	r3, #9
 8013174:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d01c      	beq.n	80131b6 <validate+0x4e>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d018      	beq.n	80131b6 <validate+0x4e>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d013      	beq.n	80131b6 <validate+0x4e>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	889a      	ldrh	r2, [r3, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	88db      	ldrh	r3, [r3, #6]
 8013198:	429a      	cmp	r2, r3
 801319a:	d10c      	bne.n	80131b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	785b      	ldrb	r3, [r3, #1]
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fe f952 	bl	801144c <disk_status>
 80131a8:	4603      	mov	r3, r0
 80131aa:	f003 0301 	and.w	r3, r3, #1
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <validate+0x4e>
			res = FR_OK;
 80131b2:	2300      	movs	r3, #0
 80131b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d102      	bne.n	80131c2 <validate+0x5a>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	e000      	b.n	80131c4 <validate+0x5c>
 80131c2:	2300      	movs	r3, #0
 80131c4:	683a      	ldr	r2, [r7, #0]
 80131c6:	6013      	str	r3, [r2, #0]
	return res;
 80131c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3710      	adds	r7, #16
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
	...

080131d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b088      	sub	sp, #32
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	4613      	mov	r3, r2
 80131e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80131e6:	f107 0310 	add.w	r3, r7, #16
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ff fc9b 	bl	8012b26 <get_ldnumber>
 80131f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	da01      	bge.n	80131fc <f_mount+0x28>
 80131f8:	230b      	movs	r3, #11
 80131fa:	e02b      	b.n	8013254 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80131fc:	4a17      	ldr	r2, [pc, #92]	; (801325c <f_mount+0x88>)
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013204:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d005      	beq.n	8013218 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801320c:	69b8      	ldr	r0, [r7, #24]
 801320e:	f7fe fc03 	bl	8011a18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	2200      	movs	r2, #0
 8013216:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d002      	beq.n	8013224 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2200      	movs	r2, #0
 8013222:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	490d      	ldr	r1, [pc, #52]	; (801325c <f_mount+0x88>)
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d002      	beq.n	801323a <f_mount+0x66>
 8013234:	79fb      	ldrb	r3, [r7, #7]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d001      	beq.n	801323e <f_mount+0x6a>
 801323a:	2300      	movs	r3, #0
 801323c:	e00a      	b.n	8013254 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801323e:	f107 010c 	add.w	r1, r7, #12
 8013242:	f107 0308 	add.w	r3, r7, #8
 8013246:	2200      	movs	r2, #0
 8013248:	4618      	mov	r0, r3
 801324a:	f7ff fd07 	bl	8012c5c <find_volume>
 801324e:	4603      	mov	r3, r0
 8013250:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013252:	7dfb      	ldrb	r3, [r7, #23]
}
 8013254:	4618      	mov	r0, r3
 8013256:	3720      	adds	r7, #32
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	200481a4 	.word	0x200481a4

08013260 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b098      	sub	sp, #96	; 0x60
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	4613      	mov	r3, r2
 801326c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d101      	bne.n	8013278 <f_open+0x18>
 8013274:	2309      	movs	r3, #9
 8013276:	e1ba      	b.n	80135ee <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013278:	79fb      	ldrb	r3, [r7, #7]
 801327a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801327e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013280:	79fa      	ldrb	r2, [r7, #7]
 8013282:	f107 0110 	add.w	r1, r7, #16
 8013286:	f107 0308 	add.w	r3, r7, #8
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fce6 	bl	8012c5c <find_volume>
 8013290:	4603      	mov	r3, r0
 8013292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801329a:	2b00      	cmp	r3, #0
 801329c:	f040 819e 	bne.w	80135dc <f_open+0x37c>
		dj.obj.fs = fs;
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80132a4:	68ba      	ldr	r2, [r7, #8]
 80132a6:	f107 0314 	add.w	r3, r7, #20
 80132aa:	4611      	mov	r1, r2
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7ff fba5 	bl	80129fc <follow_path>
 80132b2:	4603      	mov	r3, r0
 80132b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80132b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d11a      	bne.n	80132f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80132c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80132c4:	b25b      	sxtb	r3, r3
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	da03      	bge.n	80132d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80132ca:	2306      	movs	r3, #6
 80132cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132d0:	e011      	b.n	80132f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132d2:	79fb      	ldrb	r3, [r7, #7]
 80132d4:	f023 0301 	bic.w	r3, r3, #1
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bf14      	ite	ne
 80132dc:	2301      	movne	r3, #1
 80132de:	2300      	moveq	r3, #0
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	461a      	mov	r2, r3
 80132e4:	f107 0314 	add.w	r3, r7, #20
 80132e8:	4611      	mov	r1, r2
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fe fa4c 	bl	8011788 <chk_lock>
 80132f0:	4603      	mov	r3, r0
 80132f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80132f6:	79fb      	ldrb	r3, [r7, #7]
 80132f8:	f003 031c 	and.w	r3, r3, #28
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d07e      	beq.n	80133fe <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013304:	2b00      	cmp	r3, #0
 8013306:	d017      	beq.n	8013338 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801330c:	2b04      	cmp	r3, #4
 801330e:	d10e      	bne.n	801332e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013310:	f7fe fa96 	bl	8011840 <enq_lock>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d006      	beq.n	8013328 <f_open+0xc8>
 801331a:	f107 0314 	add.w	r3, r7, #20
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff fa52 	bl	80127c8 <dir_register>
 8013324:	4603      	mov	r3, r0
 8013326:	e000      	b.n	801332a <f_open+0xca>
 8013328:	2312      	movs	r3, #18
 801332a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	f043 0308 	orr.w	r3, r3, #8
 8013334:	71fb      	strb	r3, [r7, #7]
 8013336:	e010      	b.n	801335a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013338:	7ebb      	ldrb	r3, [r7, #26]
 801333a:	f003 0311 	and.w	r3, r3, #17
 801333e:	2b00      	cmp	r3, #0
 8013340:	d003      	beq.n	801334a <f_open+0xea>
					res = FR_DENIED;
 8013342:	2307      	movs	r3, #7
 8013344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013348:	e007      	b.n	801335a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801334a:	79fb      	ldrb	r3, [r7, #7]
 801334c:	f003 0304 	and.w	r3, r3, #4
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <f_open+0xfa>
 8013354:	2308      	movs	r3, #8
 8013356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801335a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801335e:	2b00      	cmp	r3, #0
 8013360:	d167      	bne.n	8013432 <f_open+0x1d2>
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	f003 0308 	and.w	r3, r3, #8
 8013368:	2b00      	cmp	r3, #0
 801336a:	d062      	beq.n	8013432 <f_open+0x1d2>
				dw = GET_FATTIME();
 801336c:	4ba2      	ldr	r3, [pc, #648]	; (80135f8 <f_open+0x398>)
 801336e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013372:	330e      	adds	r3, #14
 8013374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013376:	4618      	mov	r0, r3
 8013378:	f7fe f95c 	bl	8011634 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337e:	3316      	adds	r3, #22
 8013380:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013382:	4618      	mov	r0, r3
 8013384:	f7fe f956 	bl	8011634 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338a:	330b      	adds	r3, #11
 801338c:	2220      	movs	r2, #32
 801338e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013394:	4611      	mov	r1, r2
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff f925 	bl	80125e6 <ld_clust>
 801339c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133a2:	2200      	movs	r2, #0
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff f93d 	bl	8012624 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80133aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ac:	331c      	adds	r3, #28
 80133ae:	2100      	movs	r1, #0
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fe f93f 	bl	8011634 <st_dword>
					fs->wflag = 1;
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	2201      	movs	r2, #1
 80133ba:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80133bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d037      	beq.n	8013432 <f_open+0x1d2>
						dw = fs->winsect;
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133c6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80133c8:	f107 0314 	add.w	r3, r7, #20
 80133cc:	2200      	movs	r2, #0
 80133ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fe fe2d 	bl	8012030 <remove_chain>
 80133d6:	4603      	mov	r3, r0
 80133d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80133dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d126      	bne.n	8013432 <f_open+0x1d2>
							res = move_window(fs, dw);
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fe fb7d 	bl	8011ae8 <move_window>
 80133ee:	4603      	mov	r3, r0
 80133f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133f8:	3a01      	subs	r2, #1
 80133fa:	611a      	str	r2, [r3, #16]
 80133fc:	e019      	b.n	8013432 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80133fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013402:	2b00      	cmp	r3, #0
 8013404:	d115      	bne.n	8013432 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013406:	7ebb      	ldrb	r3, [r7, #26]
 8013408:	f003 0310 	and.w	r3, r3, #16
 801340c:	2b00      	cmp	r3, #0
 801340e:	d003      	beq.n	8013418 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013410:	2304      	movs	r3, #4
 8013412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013416:	e00c      	b.n	8013432 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	f003 0302 	and.w	r3, r3, #2
 801341e:	2b00      	cmp	r3, #0
 8013420:	d007      	beq.n	8013432 <f_open+0x1d2>
 8013422:	7ebb      	ldrb	r3, [r7, #26]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <f_open+0x1d2>
						res = FR_DENIED;
 801342c:	2307      	movs	r3, #7
 801342e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013436:	2b00      	cmp	r3, #0
 8013438:	d128      	bne.n	801348c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801343a:	79fb      	ldrb	r3, [r7, #7]
 801343c:	f003 0308 	and.w	r3, r3, #8
 8013440:	2b00      	cmp	r3, #0
 8013442:	d003      	beq.n	801344c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801344a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801345a:	79fb      	ldrb	r3, [r7, #7]
 801345c:	f023 0301 	bic.w	r3, r3, #1
 8013460:	2b00      	cmp	r3, #0
 8013462:	bf14      	ite	ne
 8013464:	2301      	movne	r3, #1
 8013466:	2300      	moveq	r3, #0
 8013468:	b2db      	uxtb	r3, r3
 801346a:	461a      	mov	r2, r3
 801346c:	f107 0314 	add.w	r3, r7, #20
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f7fe fa06 	bl	8011884 <inc_lock>
 8013478:	4602      	mov	r2, r0
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d102      	bne.n	801348c <f_open+0x22c>
 8013486:	2302      	movs	r3, #2
 8013488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801348c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013490:	2b00      	cmp	r3, #0
 8013492:	f040 80a3 	bne.w	80135dc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f7ff f8a2 	bl	80125e6 <ld_clust>
 80134a2:	4602      	mov	r2, r0
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80134a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134aa:	331c      	adds	r3, #28
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fe f883 	bl	80115b8 <ld_dword>
 80134b2:	4602      	mov	r2, r0
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80134be:	693a      	ldr	r2, [r7, #16]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	88da      	ldrh	r2, [r3, #6]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	79fa      	ldrb	r2, [r7, #7]
 80134d0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2200      	movs	r2, #0
 80134d6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2200      	movs	r2, #0
 80134e2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	3330      	adds	r3, #48	; 0x30
 80134e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80134ec:	2100      	movs	r1, #0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fe f8ed 	bl	80116ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80134f4:	79fb      	ldrb	r3, [r7, #7]
 80134f6:	f003 0320 	and.w	r3, r3, #32
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d06e      	beq.n	80135dc <f_open+0x37c>
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d06a      	beq.n	80135dc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	68da      	ldr	r2, [r3, #12]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	895b      	ldrh	r3, [r3, #10]
 8013512:	461a      	mov	r2, r3
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	899b      	ldrh	r3, [r3, #12]
 8013518:	fb03 f302 	mul.w	r3, r3, r2
 801351c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	689b      	ldr	r3, [r3, #8]
 8013522:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	657b      	str	r3, [r7, #84]	; 0x54
 801352a:	e016      	b.n	801355a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013530:	4618      	mov	r0, r3
 8013532:	f7fe fb96 	bl	8011c62 <get_fat>
 8013536:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801353a:	2b01      	cmp	r3, #1
 801353c:	d802      	bhi.n	8013544 <f_open+0x2e4>
 801353e:	2302      	movs	r3, #2
 8013540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354a:	d102      	bne.n	8013552 <f_open+0x2f2>
 801354c:	2301      	movs	r3, #1
 801354e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	657b      	str	r3, [r7, #84]	; 0x54
 801355a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801355e:	2b00      	cmp	r3, #0
 8013560:	d103      	bne.n	801356a <f_open+0x30a>
 8013562:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013566:	429a      	cmp	r2, r3
 8013568:	d8e0      	bhi.n	801352c <f_open+0x2cc>
				}
				fp->clust = clst;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801356e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013574:	2b00      	cmp	r3, #0
 8013576:	d131      	bne.n	80135dc <f_open+0x37c>
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	899b      	ldrh	r3, [r3, #12]
 801357c:	461a      	mov	r2, r3
 801357e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013580:	fbb3 f1f2 	udiv	r1, r3, r2
 8013584:	fb02 f201 	mul.w	r2, r2, r1
 8013588:	1a9b      	subs	r3, r3, r2
 801358a:	2b00      	cmp	r3, #0
 801358c:	d026      	beq.n	80135dc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013592:	4618      	mov	r0, r3
 8013594:	f7fe fb46 	bl	8011c24 <clust2sect>
 8013598:	6478      	str	r0, [r7, #68]	; 0x44
 801359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801359c:	2b00      	cmp	r3, #0
 801359e:	d103      	bne.n	80135a8 <f_open+0x348>
						res = FR_INT_ERR;
 80135a0:	2302      	movs	r3, #2
 80135a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135a6:	e019      	b.n	80135dc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	899b      	ldrh	r3, [r3, #12]
 80135ac:	461a      	mov	r2, r3
 80135ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80135b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135b6:	441a      	add	r2, r3
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	7858      	ldrb	r0, [r3, #1]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6a1a      	ldr	r2, [r3, #32]
 80135ca:	2301      	movs	r3, #1
 80135cc:	f7fd ff7e 	bl	80114cc <disk_read>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d002      	beq.n	80135dc <f_open+0x37c>
 80135d6:	2301      	movs	r3, #1
 80135d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80135dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <f_open+0x38a>
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80135ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3760      	adds	r7, #96	; 0x60
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	274a0000 	.word	0x274a0000

080135fc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b08e      	sub	sp, #56	; 0x38
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	2200      	movs	r2, #0
 8013612:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f107 0214 	add.w	r2, r7, #20
 801361a:	4611      	mov	r1, r2
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff fda3 	bl	8013168 <validate>
 8013622:	4603      	mov	r3, r0
 8013624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801362c:	2b00      	cmp	r3, #0
 801362e:	d107      	bne.n	8013640 <f_read+0x44>
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	7d5b      	ldrb	r3, [r3, #21]
 8013634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801363c:	2b00      	cmp	r3, #0
 801363e:	d002      	beq.n	8013646 <f_read+0x4a>
 8013640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013644:	e135      	b.n	80138b2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	7d1b      	ldrb	r3, [r3, #20]
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	2b00      	cmp	r3, #0
 8013650:	d101      	bne.n	8013656 <f_read+0x5a>
 8013652:	2307      	movs	r3, #7
 8013654:	e12d      	b.n	80138b2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	68da      	ldr	r2, [r3, #12]
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	699b      	ldr	r3, [r3, #24]
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	429a      	cmp	r2, r3
 8013668:	f240 811e 	bls.w	80138a8 <f_read+0x2ac>
 801366c:	6a3b      	ldr	r3, [r7, #32]
 801366e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013670:	e11a      	b.n	80138a8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	699b      	ldr	r3, [r3, #24]
 8013676:	697a      	ldr	r2, [r7, #20]
 8013678:	8992      	ldrh	r2, [r2, #12]
 801367a:	fbb3 f1f2 	udiv	r1, r3, r2
 801367e:	fb02 f201 	mul.w	r2, r2, r1
 8013682:	1a9b      	subs	r3, r3, r2
 8013684:	2b00      	cmp	r3, #0
 8013686:	f040 80d5 	bne.w	8013834 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	697a      	ldr	r2, [r7, #20]
 8013690:	8992      	ldrh	r2, [r2, #12]
 8013692:	fbb3 f3f2 	udiv	r3, r3, r2
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	8952      	ldrh	r2, [r2, #10]
 801369a:	3a01      	subs	r2, #1
 801369c:	4013      	ands	r3, r2
 801369e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d12f      	bne.n	8013706 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	699b      	ldr	r3, [r3, #24]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d103      	bne.n	80136b6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	689b      	ldr	r3, [r3, #8]
 80136b2:	633b      	str	r3, [r7, #48]	; 0x30
 80136b4:	e013      	b.n	80136de <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d007      	beq.n	80136ce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	699b      	ldr	r3, [r3, #24]
 80136c2:	4619      	mov	r1, r3
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7fe fdb0 	bl	801222a <clmt_clust>
 80136ca:	6338      	str	r0, [r7, #48]	; 0x30
 80136cc:	e007      	b.n	80136de <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	69db      	ldr	r3, [r3, #28]
 80136d4:	4619      	mov	r1, r3
 80136d6:	4610      	mov	r0, r2
 80136d8:	f7fe fac3 	bl	8011c62 <get_fat>
 80136dc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d804      	bhi.n	80136ee <f_read+0xf2>
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2202      	movs	r2, #2
 80136e8:	755a      	strb	r2, [r3, #21]
 80136ea:	2302      	movs	r3, #2
 80136ec:	e0e1      	b.n	80138b2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f4:	d104      	bne.n	8013700 <f_read+0x104>
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2201      	movs	r2, #1
 80136fa:	755a      	strb	r2, [r3, #21]
 80136fc:	2301      	movs	r3, #1
 80136fe:	e0d8      	b.n	80138b2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013704:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013706:	697a      	ldr	r2, [r7, #20]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	69db      	ldr	r3, [r3, #28]
 801370c:	4619      	mov	r1, r3
 801370e:	4610      	mov	r0, r2
 8013710:	f7fe fa88 	bl	8011c24 <clust2sect>
 8013714:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d104      	bne.n	8013726 <f_read+0x12a>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2202      	movs	r2, #2
 8013720:	755a      	strb	r2, [r3, #21]
 8013722:	2302      	movs	r3, #2
 8013724:	e0c5      	b.n	80138b2 <f_read+0x2b6>
			sect += csect;
 8013726:	69ba      	ldr	r2, [r7, #24]
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	4413      	add	r3, r2
 801372c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	899b      	ldrh	r3, [r3, #12]
 8013732:	461a      	mov	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	fbb3 f3f2 	udiv	r3, r3, r2
 801373a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373e:	2b00      	cmp	r3, #0
 8013740:	d041      	beq.n	80137c6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	4413      	add	r3, r2
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	8952      	ldrh	r2, [r2, #10]
 801374c:	4293      	cmp	r3, r2
 801374e:	d905      	bls.n	801375c <f_read+0x160>
					cc = fs->csize - csect;
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	895b      	ldrh	r3, [r3, #10]
 8013754:	461a      	mov	r2, r3
 8013756:	69fb      	ldr	r3, [r7, #28]
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	7858      	ldrb	r0, [r3, #1]
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	69ba      	ldr	r2, [r7, #24]
 8013764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013766:	f7fd feb1 	bl	80114cc <disk_read>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d004      	beq.n	801377a <f_read+0x17e>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2201      	movs	r2, #1
 8013774:	755a      	strb	r2, [r3, #21]
 8013776:	2301      	movs	r3, #1
 8013778:	e09b      	b.n	80138b2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	7d1b      	ldrb	r3, [r3, #20]
 801377e:	b25b      	sxtb	r3, r3
 8013780:	2b00      	cmp	r3, #0
 8013782:	da18      	bge.n	80137b6 <f_read+0x1ba>
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	6a1a      	ldr	r2, [r3, #32]
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801378e:	429a      	cmp	r2, r3
 8013790:	d911      	bls.n	80137b6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6a1a      	ldr	r2, [r3, #32]
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	697a      	ldr	r2, [r7, #20]
 801379c:	8992      	ldrh	r2, [r2, #12]
 801379e:	fb02 f303 	mul.w	r3, r2, r3
 80137a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a4:	18d0      	adds	r0, r2, r3
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	899b      	ldrh	r3, [r3, #12]
 80137b0:	461a      	mov	r2, r3
 80137b2:	f7fd ff6b 	bl	801168c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	899b      	ldrh	r3, [r3, #12]
 80137ba:	461a      	mov	r2, r3
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	fb02 f303 	mul.w	r3, r2, r3
 80137c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80137c4:	e05c      	b.n	8013880 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	6a1b      	ldr	r3, [r3, #32]
 80137ca:	69ba      	ldr	r2, [r7, #24]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d02e      	beq.n	801382e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	7d1b      	ldrb	r3, [r3, #20]
 80137d4:	b25b      	sxtb	r3, r3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	da18      	bge.n	801380c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	7858      	ldrb	r0, [r3, #1]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6a1a      	ldr	r2, [r3, #32]
 80137e8:	2301      	movs	r3, #1
 80137ea:	f7fd fe8f 	bl	801150c <disk_write>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <f_read+0x202>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2201      	movs	r2, #1
 80137f8:	755a      	strb	r2, [r3, #21]
 80137fa:	2301      	movs	r3, #1
 80137fc:	e059      	b.n	80138b2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	7d1b      	ldrb	r3, [r3, #20]
 8013802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013806:	b2da      	uxtb	r2, r3
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	7858      	ldrb	r0, [r3, #1]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013816:	2301      	movs	r3, #1
 8013818:	69ba      	ldr	r2, [r7, #24]
 801381a:	f7fd fe57 	bl	80114cc <disk_read>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d004      	beq.n	801382e <f_read+0x232>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2201      	movs	r2, #1
 8013828:	755a      	strb	r2, [r3, #21]
 801382a:	2301      	movs	r3, #1
 801382c:	e041      	b.n	80138b2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	69ba      	ldr	r2, [r7, #24]
 8013832:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	899b      	ldrh	r3, [r3, #12]
 8013838:	4618      	mov	r0, r3
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	699b      	ldr	r3, [r3, #24]
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	8992      	ldrh	r2, [r2, #12]
 8013842:	fbb3 f1f2 	udiv	r1, r3, r2
 8013846:	fb02 f201 	mul.w	r2, r2, r1
 801384a:	1a9b      	subs	r3, r3, r2
 801384c:	1ac3      	subs	r3, r0, r3
 801384e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	429a      	cmp	r2, r3
 8013856:	d901      	bls.n	801385c <f_read+0x260>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	699b      	ldr	r3, [r3, #24]
 8013866:	697a      	ldr	r2, [r7, #20]
 8013868:	8992      	ldrh	r2, [r2, #12]
 801386a:	fbb3 f0f2 	udiv	r0, r3, r2
 801386e:	fb02 f200 	mul.w	r2, r2, r0
 8013872:	1a9b      	subs	r3, r3, r2
 8013874:	440b      	add	r3, r1
 8013876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013878:	4619      	mov	r1, r3
 801387a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801387c:	f7fd ff06 	bl	801168c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013884:	4413      	add	r3, r2
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	699a      	ldr	r2, [r3, #24]
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	441a      	add	r2, r3
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	619a      	str	r2, [r3, #24]
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389a:	441a      	add	r2, r3
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	f47f aee1 	bne.w	8013672 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80138b0:	2300      	movs	r3, #0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3738      	adds	r7, #56	; 0x38
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b08c      	sub	sp, #48	; 0x30
 80138be:	af00      	add	r7, sp, #0
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	60b9      	str	r1, [r7, #8]
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	2200      	movs	r2, #0
 80138d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	f107 0210 	add.w	r2, r7, #16
 80138d8:	4611      	mov	r1, r2
 80138da:	4618      	mov	r0, r3
 80138dc:	f7ff fc44 	bl	8013168 <validate>
 80138e0:	4603      	mov	r3, r0
 80138e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80138e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d107      	bne.n	80138fe <f_write+0x44>
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	7d5b      	ldrb	r3, [r3, #21]
 80138f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80138f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d002      	beq.n	8013904 <f_write+0x4a>
 80138fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013902:	e16a      	b.n	8013bda <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	7d1b      	ldrb	r3, [r3, #20]
 8013908:	f003 0302 	and.w	r3, r3, #2
 801390c:	2b00      	cmp	r3, #0
 801390e:	d101      	bne.n	8013914 <f_write+0x5a>
 8013910:	2307      	movs	r3, #7
 8013912:	e162      	b.n	8013bda <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	699a      	ldr	r2, [r3, #24]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	441a      	add	r2, r3
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	699b      	ldr	r3, [r3, #24]
 8013920:	429a      	cmp	r2, r3
 8013922:	f080 814c 	bcs.w	8013bbe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	699b      	ldr	r3, [r3, #24]
 801392a:	43db      	mvns	r3, r3
 801392c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801392e:	e146      	b.n	8013bbe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	699b      	ldr	r3, [r3, #24]
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	8992      	ldrh	r2, [r2, #12]
 8013938:	fbb3 f1f2 	udiv	r1, r3, r2
 801393c:	fb02 f201 	mul.w	r2, r2, r1
 8013940:	1a9b      	subs	r3, r3, r2
 8013942:	2b00      	cmp	r3, #0
 8013944:	f040 80f1 	bne.w	8013b2a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	699b      	ldr	r3, [r3, #24]
 801394c:	693a      	ldr	r2, [r7, #16]
 801394e:	8992      	ldrh	r2, [r2, #12]
 8013950:	fbb3 f3f2 	udiv	r3, r3, r2
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	8952      	ldrh	r2, [r2, #10]
 8013958:	3a01      	subs	r2, #1
 801395a:	4013      	ands	r3, r2
 801395c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d143      	bne.n	80139ec <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	699b      	ldr	r3, [r3, #24]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d10c      	bne.n	8013986 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	689b      	ldr	r3, [r3, #8]
 8013970:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	2b00      	cmp	r3, #0
 8013976:	d11a      	bne.n	80139ae <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2100      	movs	r1, #0
 801397c:	4618      	mov	r0, r3
 801397e:	f7fe fbbc 	bl	80120fa <create_chain>
 8013982:	62b8      	str	r0, [r7, #40]	; 0x28
 8013984:	e013      	b.n	80139ae <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398a:	2b00      	cmp	r3, #0
 801398c:	d007      	beq.n	801399e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	699b      	ldr	r3, [r3, #24]
 8013992:	4619      	mov	r1, r3
 8013994:	68f8      	ldr	r0, [r7, #12]
 8013996:	f7fe fc48 	bl	801222a <clmt_clust>
 801399a:	62b8      	str	r0, [r7, #40]	; 0x28
 801399c:	e007      	b.n	80139ae <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	69db      	ldr	r3, [r3, #28]
 80139a4:	4619      	mov	r1, r3
 80139a6:	4610      	mov	r0, r2
 80139a8:	f7fe fba7 	bl	80120fa <create_chain>
 80139ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80139ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f000 8109 	beq.w	8013bc8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80139b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d104      	bne.n	80139c6 <f_write+0x10c>
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2202      	movs	r2, #2
 80139c0:	755a      	strb	r2, [r3, #21]
 80139c2:	2302      	movs	r3, #2
 80139c4:	e109      	b.n	8013bda <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80139c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139cc:	d104      	bne.n	80139d8 <f_write+0x11e>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2201      	movs	r2, #1
 80139d2:	755a      	strb	r2, [r3, #21]
 80139d4:	2301      	movs	r3, #1
 80139d6:	e100      	b.n	8013bda <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	689b      	ldr	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d102      	bne.n	80139ec <f_write+0x132>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	7d1b      	ldrb	r3, [r3, #20]
 80139f0:	b25b      	sxtb	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	da18      	bge.n	8013a28 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	7858      	ldrb	r0, [r3, #1]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6a1a      	ldr	r2, [r3, #32]
 8013a04:	2301      	movs	r3, #1
 8013a06:	f7fd fd81 	bl	801150c <disk_write>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d004      	beq.n	8013a1a <f_write+0x160>
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2201      	movs	r2, #1
 8013a14:	755a      	strb	r2, [r3, #21]
 8013a16:	2301      	movs	r3, #1
 8013a18:	e0df      	b.n	8013bda <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	7d1b      	ldrb	r3, [r3, #20]
 8013a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	69db      	ldr	r3, [r3, #28]
 8013a2e:	4619      	mov	r1, r3
 8013a30:	4610      	mov	r0, r2
 8013a32:	f7fe f8f7 	bl	8011c24 <clust2sect>
 8013a36:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d104      	bne.n	8013a48 <f_write+0x18e>
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2202      	movs	r2, #2
 8013a42:	755a      	strb	r2, [r3, #21]
 8013a44:	2302      	movs	r3, #2
 8013a46:	e0c8      	b.n	8013bda <f_write+0x320>
			sect += csect;
 8013a48:	697a      	ldr	r2, [r7, #20]
 8013a4a:	69bb      	ldr	r3, [r7, #24]
 8013a4c:	4413      	add	r3, r2
 8013a4e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	899b      	ldrh	r3, [r3, #12]
 8013a54:	461a      	mov	r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a5c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013a5e:	6a3b      	ldr	r3, [r7, #32]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d043      	beq.n	8013aec <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013a64:	69ba      	ldr	r2, [r7, #24]
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	4413      	add	r3, r2
 8013a6a:	693a      	ldr	r2, [r7, #16]
 8013a6c:	8952      	ldrh	r2, [r2, #10]
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d905      	bls.n	8013a7e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	895b      	ldrh	r3, [r3, #10]
 8013a76:	461a      	mov	r2, r3
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	7858      	ldrb	r0, [r3, #1]
 8013a82:	6a3b      	ldr	r3, [r7, #32]
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	69f9      	ldr	r1, [r7, #28]
 8013a88:	f7fd fd40 	bl	801150c <disk_write>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <f_write+0x1e2>
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2201      	movs	r2, #1
 8013a96:	755a      	strb	r2, [r3, #21]
 8013a98:	2301      	movs	r3, #1
 8013a9a:	e09e      	b.n	8013bda <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	6a1a      	ldr	r2, [r3, #32]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	6a3a      	ldr	r2, [r7, #32]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d918      	bls.n	8013adc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6a1a      	ldr	r2, [r3, #32]
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	1ad3      	subs	r3, r2, r3
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	8992      	ldrh	r2, [r2, #12]
 8013abc:	fb02 f303 	mul.w	r3, r2, r3
 8013ac0:	69fa      	ldr	r2, [r7, #28]
 8013ac2:	18d1      	adds	r1, r2, r3
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	899b      	ldrh	r3, [r3, #12]
 8013ac8:	461a      	mov	r2, r3
 8013aca:	f7fd fddf 	bl	801168c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	7d1b      	ldrb	r3, [r3, #20]
 8013ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ad6:	b2da      	uxtb	r2, r3
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	899b      	ldrh	r3, [r3, #12]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	6a3b      	ldr	r3, [r7, #32]
 8013ae4:	fb02 f303 	mul.w	r3, r2, r3
 8013ae8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013aea:	e04b      	b.n	8013b84 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6a1b      	ldr	r3, [r3, #32]
 8013af0:	697a      	ldr	r2, [r7, #20]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d016      	beq.n	8013b24 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	699a      	ldr	r2, [r3, #24]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d210      	bcs.n	8013b24 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	7858      	ldrb	r0, [r3, #1]
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	697a      	ldr	r2, [r7, #20]
 8013b10:	f7fd fcdc 	bl	80114cc <disk_read>
 8013b14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d004      	beq.n	8013b24 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	755a      	strb	r2, [r3, #21]
 8013b20:	2301      	movs	r3, #1
 8013b22:	e05a      	b.n	8013bda <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	899b      	ldrh	r3, [r3, #12]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	699b      	ldr	r3, [r3, #24]
 8013b34:	693a      	ldr	r2, [r7, #16]
 8013b36:	8992      	ldrh	r2, [r2, #12]
 8013b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b3c:	fb02 f201 	mul.w	r2, r2, r1
 8013b40:	1a9b      	subs	r3, r3, r2
 8013b42:	1ac3      	subs	r3, r0, r3
 8013b44:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d901      	bls.n	8013b52 <f_write+0x298>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	693a      	ldr	r2, [r7, #16]
 8013b5e:	8992      	ldrh	r2, [r2, #12]
 8013b60:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b64:	fb02 f200 	mul.w	r2, r2, r0
 8013b68:	1a9b      	subs	r3, r3, r2
 8013b6a:	440b      	add	r3, r1
 8013b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b6e:	69f9      	ldr	r1, [r7, #28]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fd fd8b 	bl	801168c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	7d1b      	ldrb	r3, [r3, #20]
 8013b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b7e:	b2da      	uxtb	r2, r3
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013b84:	69fa      	ldr	r2, [r7, #28]
 8013b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b88:	4413      	add	r3, r2
 8013b8a:	61fb      	str	r3, [r7, #28]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	699a      	ldr	r2, [r3, #24]
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	441a      	add	r2, r3
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	619a      	str	r2, [r3, #24]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	68da      	ldr	r2, [r3, #12]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	699b      	ldr	r3, [r3, #24]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	bf38      	it	cc
 8013ba4:	461a      	movcc	r2, r3
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	60da      	str	r2, [r3, #12]
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	681a      	ldr	r2, [r3, #0]
 8013bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb0:	441a      	add	r2, r3
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	601a      	str	r2, [r3, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f47f aeb5 	bne.w	8013930 <f_write+0x76>
 8013bc6:	e000      	b.n	8013bca <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013bc8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7d1b      	ldrb	r3, [r3, #20]
 8013bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bd2:	b2da      	uxtb	r2, r3
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013bd8:	2300      	movs	r3, #0
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	3730      	adds	r7, #48	; 0x30
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
	...

08013be4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f107 0208 	add.w	r2, r7, #8
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7ff fab7 	bl	8013168 <validate>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013bfe:	7dfb      	ldrb	r3, [r7, #23]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d167      	bne.n	8013cd4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	7d1b      	ldrb	r3, [r3, #20]
 8013c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d061      	beq.n	8013cd4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	7d1b      	ldrb	r3, [r3, #20]
 8013c14:	b25b      	sxtb	r3, r3
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	da15      	bge.n	8013c46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	7858      	ldrb	r0, [r3, #1]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a1a      	ldr	r2, [r3, #32]
 8013c28:	2301      	movs	r3, #1
 8013c2a:	f7fd fc6f 	bl	801150c <disk_write>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <f_sync+0x54>
 8013c34:	2301      	movs	r3, #1
 8013c36:	e04e      	b.n	8013cd6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	7d1b      	ldrb	r3, [r3, #20]
 8013c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c40:	b2da      	uxtb	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c46:	4b26      	ldr	r3, [pc, #152]	; (8013ce0 <f_sync+0xfc>)
 8013c48:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c50:	4619      	mov	r1, r3
 8013c52:	4610      	mov	r0, r2
 8013c54:	f7fd ff48 	bl	8011ae8 <move_window>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013c5c:	7dfb      	ldrb	r3, [r7, #23]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d138      	bne.n	8013cd4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	330b      	adds	r3, #11
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	330b      	adds	r3, #11
 8013c72:	f042 0220 	orr.w	r2, r2, #32
 8013c76:	b2d2      	uxtb	r2, r2
 8013c78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6818      	ldr	r0, [r3, #0]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	461a      	mov	r2, r3
 8013c84:	68f9      	ldr	r1, [r7, #12]
 8013c86:	f7fe fccd 	bl	8012624 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f103 021c 	add.w	r2, r3, #28
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	4619      	mov	r1, r3
 8013c96:	4610      	mov	r0, r2
 8013c98:	f7fd fccc 	bl	8011634 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	3316      	adds	r3, #22
 8013ca0:	6939      	ldr	r1, [r7, #16]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7fd fcc6 	bl	8011634 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	3312      	adds	r3, #18
 8013cac:	2100      	movs	r1, #0
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fd fca5 	bl	80115fe <st_word>
					fs->wflag = 1;
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fd ff41 	bl	8011b44 <sync_fs>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	7d1b      	ldrb	r3, [r3, #20]
 8013cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cce:	b2da      	uxtb	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	274a0000 	.word	0x274a0000

08013ce4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7ff ff79 	bl	8013be4 <f_sync>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013cf6:	7bfb      	ldrb	r3, [r7, #15]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d118      	bne.n	8013d2e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f107 0208 	add.w	r2, r7, #8
 8013d02:	4611      	mov	r1, r2
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7ff fa2f 	bl	8013168 <validate>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d0e:	7bfb      	ldrb	r3, [r7, #15]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d10c      	bne.n	8013d2e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fd fe41 	bl	80119a0 <dec_lock>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013d22:	7bfb      	ldrb	r3, [r7, #15]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b091      	sub	sp, #68	; 0x44
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013d40:	f107 0108 	add.w	r1, r7, #8
 8013d44:	1d3b      	adds	r3, r7, #4
 8013d46:	2200      	movs	r2, #0
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fe ff87 	bl	8012c5c <find_volume>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013d54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d131      	bne.n	8013dc0 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	f107 030c 	add.w	r3, r7, #12
 8013d66:	4611      	mov	r1, r2
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fe fe47 	bl	80129fc <follow_path>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013d74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d11a      	bne.n	8013db2 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013d80:	b25b      	sxtb	r3, r3
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	da03      	bge.n	8013d8e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	619a      	str	r2, [r3, #24]
 8013d8c:	e011      	b.n	8013db2 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013d8e:	7cbb      	ldrb	r3, [r7, #18]
 8013d90:	f003 0310 	and.w	r3, r3, #16
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d009      	beq.n	8013dac <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d9c:	68bc      	ldr	r4, [r7, #8]
 8013d9e:	4611      	mov	r1, r2
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe fc20 	bl	80125e6 <ld_clust>
 8013da6:	4603      	mov	r3, r0
 8013da8:	61a3      	str	r3, [r4, #24]
 8013daa:	e002      	b.n	8013db2 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013dac:	2305      	movs	r3, #5
 8013dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013db6:	2b04      	cmp	r3, #4
 8013db8:	d102      	bne.n	8013dc0 <f_chdir+0x88>
 8013dba:	2305      	movs	r3, #5
 8013dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013dc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3744      	adds	r7, #68	; 0x44
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd90      	pop	{r4, r7, pc}

08013dcc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b090      	sub	sp, #64	; 0x40
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f107 0208 	add.w	r2, r7, #8
 8013ddc:	4611      	mov	r1, r2
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff f9c2 	bl	8013168 <validate>
 8013de4:	4603      	mov	r3, r0
 8013de6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013dea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d103      	bne.n	8013dfa <f_lseek+0x2e>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	7d5b      	ldrb	r3, [r3, #21]
 8013df6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d002      	beq.n	8013e08 <f_lseek+0x3c>
 8013e02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e06:	e201      	b.n	801420c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	f000 80d9 	beq.w	8013fc4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e18:	d15a      	bne.n	8013ed0 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e1e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	1d1a      	adds	r2, r3, #4
 8013e24:	627a      	str	r2, [r7, #36]	; 0x24
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	617b      	str	r3, [r7, #20]
 8013e2a:	2302      	movs	r3, #2
 8013e2c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d03a      	beq.n	8013eb0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3c:	613b      	str	r3, [r7, #16]
 8013e3e:	2300      	movs	r3, #0
 8013e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e44:	3302      	adds	r3, #2
 8013e46:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	60fb      	str	r3, [r7, #12]
 8013e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4e:	3301      	adds	r3, #1
 8013e50:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fd ff03 	bl	8011c62 <get_fat>
 8013e5c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d804      	bhi.n	8013e6e <f_lseek+0xa2>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2202      	movs	r2, #2
 8013e68:	755a      	strb	r2, [r3, #21]
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	e1ce      	b.n	801420c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e74:	d104      	bne.n	8013e80 <f_lseek+0xb4>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	755a      	strb	r2, [r3, #21]
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e1c5      	b.n	801420c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3301      	adds	r3, #1
 8013e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d0de      	beq.n	8013e48 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d809      	bhi.n	8013ea6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e94:	1d1a      	adds	r2, r3, #4
 8013e96:	627a      	str	r2, [r7, #36]	; 0x24
 8013e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e9a:	601a      	str	r2, [r3, #0]
 8013e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9e:	1d1a      	adds	r2, r3, #4
 8013ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8013ea2:	693a      	ldr	r2, [r7, #16]
 8013ea4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	69db      	ldr	r3, [r3, #28]
 8013eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d3c4      	bcc.n	8013e3a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eb6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d803      	bhi.n	8013ec8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	601a      	str	r2, [r3, #0]
 8013ec6:	e19f      	b.n	8014208 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013ec8:	2311      	movs	r3, #17
 8013eca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013ece:	e19b      	b.n	8014208 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	683a      	ldr	r2, [r7, #0]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d902      	bls.n	8013ee0 <f_lseek+0x114>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	683a      	ldr	r2, [r7, #0]
 8013ee4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 818d 	beq.w	8014208 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f7fe f998 	bl	801222a <clmt_clust>
 8013efa:	4602      	mov	r2, r0
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	69db      	ldr	r3, [r3, #28]
 8013f06:	4619      	mov	r1, r3
 8013f08:	4610      	mov	r0, r2
 8013f0a:	f7fd fe8b 	bl	8011c24 <clust2sect>
 8013f0e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d104      	bne.n	8013f20 <f_lseek+0x154>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2202      	movs	r2, #2
 8013f1a:	755a      	strb	r2, [r3, #21]
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	e175      	b.n	801420c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	3b01      	subs	r3, #1
 8013f24:	68ba      	ldr	r2, [r7, #8]
 8013f26:	8992      	ldrh	r2, [r2, #12]
 8013f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	8952      	ldrh	r2, [r2, #10]
 8013f30:	3a01      	subs	r2, #1
 8013f32:	4013      	ands	r3, r2
 8013f34:	69ba      	ldr	r2, [r7, #24]
 8013f36:	4413      	add	r3, r2
 8013f38:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	699b      	ldr	r3, [r3, #24]
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	8992      	ldrh	r2, [r2, #12]
 8013f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f46:	fb02 f201 	mul.w	r2, r2, r1
 8013f4a:	1a9b      	subs	r3, r3, r2
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f000 815b 	beq.w	8014208 <f_lseek+0x43c>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6a1b      	ldr	r3, [r3, #32]
 8013f56:	69ba      	ldr	r2, [r7, #24]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	f000 8155 	beq.w	8014208 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	7d1b      	ldrb	r3, [r3, #20]
 8013f62:	b25b      	sxtb	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	da18      	bge.n	8013f9a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	7858      	ldrb	r0, [r3, #1]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a1a      	ldr	r2, [r3, #32]
 8013f76:	2301      	movs	r3, #1
 8013f78:	f7fd fac8 	bl	801150c <disk_write>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d004      	beq.n	8013f8c <f_lseek+0x1c0>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2201      	movs	r2, #1
 8013f86:	755a      	strb	r2, [r3, #21]
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e13f      	b.n	801420c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	7d1b      	ldrb	r3, [r3, #20]
 8013f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f94:	b2da      	uxtb	r2, r3
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	7858      	ldrb	r0, [r3, #1]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	69ba      	ldr	r2, [r7, #24]
 8013fa8:	f7fd fa90 	bl	80114cc <disk_read>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d004      	beq.n	8013fbc <f_lseek+0x1f0>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	755a      	strb	r2, [r3, #21]
 8013fb8:	2301      	movs	r3, #1
 8013fba:	e127      	b.n	801420c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	69ba      	ldr	r2, [r7, #24]
 8013fc0:	621a      	str	r2, [r3, #32]
 8013fc2:	e121      	b.n	8014208 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	683a      	ldr	r2, [r7, #0]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d908      	bls.n	8013fe0 <f_lseek+0x214>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	7d1b      	ldrb	r3, [r3, #20]
 8013fd2:	f003 0302 	and.w	r3, r3, #2
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d102      	bne.n	8013fe0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	699b      	ldr	r3, [r3, #24]
 8013fe4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fee:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f000 80b5 	beq.w	8014162 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	895b      	ldrh	r3, [r3, #10]
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	899b      	ldrh	r3, [r3, #12]
 8014002:	fb03 f302 	mul.w	r3, r3, r2
 8014006:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014008:	6a3b      	ldr	r3, [r7, #32]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d01b      	beq.n	8014046 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	1e5a      	subs	r2, r3, #1
 8014012:	69fb      	ldr	r3, [r7, #28]
 8014014:	fbb2 f2f3 	udiv	r2, r2, r3
 8014018:	6a3b      	ldr	r3, [r7, #32]
 801401a:	1e59      	subs	r1, r3, #1
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014022:	429a      	cmp	r2, r3
 8014024:	d30f      	bcc.n	8014046 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	1e5a      	subs	r2, r3, #1
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	425b      	negs	r3, r3
 801402e:	401a      	ands	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	699b      	ldr	r3, [r3, #24]
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	69db      	ldr	r3, [r3, #28]
 8014042:	63bb      	str	r3, [r7, #56]	; 0x38
 8014044:	e022      	b.n	801408c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	689b      	ldr	r3, [r3, #8]
 801404a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	2b00      	cmp	r3, #0
 8014050:	d119      	bne.n	8014086 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2100      	movs	r1, #0
 8014056:	4618      	mov	r0, r3
 8014058:	f7fe f84f 	bl	80120fa <create_chain>
 801405c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014060:	2b01      	cmp	r3, #1
 8014062:	d104      	bne.n	801406e <f_lseek+0x2a2>
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2202      	movs	r2, #2
 8014068:	755a      	strb	r2, [r3, #21]
 801406a:	2302      	movs	r3, #2
 801406c:	e0ce      	b.n	801420c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014074:	d104      	bne.n	8014080 <f_lseek+0x2b4>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2201      	movs	r2, #1
 801407a:	755a      	strb	r2, [r3, #21]
 801407c:	2301      	movs	r3, #1
 801407e:	e0c5      	b.n	801420c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014084:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801408a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408e:	2b00      	cmp	r3, #0
 8014090:	d067      	beq.n	8014162 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014092:	e03a      	b.n	801410a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014094:	683a      	ldr	r2, [r7, #0]
 8014096:	69fb      	ldr	r3, [r7, #28]
 8014098:	1ad3      	subs	r3, r2, r3
 801409a:	603b      	str	r3, [r7, #0]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	699a      	ldr	r2, [r3, #24]
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	441a      	add	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	7d1b      	ldrb	r3, [r3, #20]
 80140ac:	f003 0302 	and.w	r3, r3, #2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d00b      	beq.n	80140cc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7fe f81e 	bl	80120fa <create_chain>
 80140be:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80140c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d108      	bne.n	80140d8 <f_lseek+0x30c>
							ofs = 0; break;
 80140c6:	2300      	movs	r3, #0
 80140c8:	603b      	str	r3, [r7, #0]
 80140ca:	e022      	b.n	8014112 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fd fdc6 	bl	8011c62 <get_fat>
 80140d6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140de:	d104      	bne.n	80140ea <f_lseek+0x31e>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2201      	movs	r2, #1
 80140e4:	755a      	strb	r2, [r3, #21]
 80140e6:	2301      	movs	r3, #1
 80140e8:	e090      	b.n	801420c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80140ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	d904      	bls.n	80140fa <f_lseek+0x32e>
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	69db      	ldr	r3, [r3, #28]
 80140f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d304      	bcc.n	8014104 <f_lseek+0x338>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2202      	movs	r2, #2
 80140fe:	755a      	strb	r2, [r3, #21]
 8014100:	2302      	movs	r3, #2
 8014102:	e083      	b.n	801420c <f_lseek+0x440>
					fp->clust = clst;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014108:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801410a:	683a      	ldr	r2, [r7, #0]
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	429a      	cmp	r2, r3
 8014110:	d8c0      	bhi.n	8014094 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	699a      	ldr	r2, [r3, #24]
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	441a      	add	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	899b      	ldrh	r3, [r3, #12]
 8014122:	461a      	mov	r2, r3
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	fbb3 f1f2 	udiv	r1, r3, r2
 801412a:	fb02 f201 	mul.w	r2, r2, r1
 801412e:	1a9b      	subs	r3, r3, r2
 8014130:	2b00      	cmp	r3, #0
 8014132:	d016      	beq.n	8014162 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014138:	4618      	mov	r0, r3
 801413a:	f7fd fd73 	bl	8011c24 <clust2sect>
 801413e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014142:	2b00      	cmp	r3, #0
 8014144:	d104      	bne.n	8014150 <f_lseek+0x384>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2202      	movs	r2, #2
 801414a:	755a      	strb	r2, [r3, #21]
 801414c:	2302      	movs	r3, #2
 801414e:	e05d      	b.n	801420c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	899b      	ldrh	r3, [r3, #12]
 8014154:	461a      	mov	r2, r3
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	fbb3 f3f2 	udiv	r3, r3, r2
 801415c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801415e:	4413      	add	r3, r2
 8014160:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	699a      	ldr	r2, [r3, #24]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	429a      	cmp	r2, r3
 801416c:	d90a      	bls.n	8014184 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	699a      	ldr	r2, [r3, #24]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	7d1b      	ldrb	r3, [r3, #20]
 801417a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801417e:	b2da      	uxtb	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	699b      	ldr	r3, [r3, #24]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	8992      	ldrh	r2, [r2, #12]
 801418c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014190:	fb02 f201 	mul.w	r2, r2, r1
 8014194:	1a9b      	subs	r3, r3, r2
 8014196:	2b00      	cmp	r3, #0
 8014198:	d036      	beq.n	8014208 <f_lseek+0x43c>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6a1b      	ldr	r3, [r3, #32]
 801419e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d031      	beq.n	8014208 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	7d1b      	ldrb	r3, [r3, #20]
 80141a8:	b25b      	sxtb	r3, r3
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	da18      	bge.n	80141e0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	7858      	ldrb	r0, [r3, #1]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6a1a      	ldr	r2, [r3, #32]
 80141bc:	2301      	movs	r3, #1
 80141be:	f7fd f9a5 	bl	801150c <disk_write>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d004      	beq.n	80141d2 <f_lseek+0x406>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2201      	movs	r2, #1
 80141cc:	755a      	strb	r2, [r3, #21]
 80141ce:	2301      	movs	r3, #1
 80141d0:	e01c      	b.n	801420c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	7d1b      	ldrb	r3, [r3, #20]
 80141d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	7858      	ldrb	r0, [r3, #1]
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141ea:	2301      	movs	r3, #1
 80141ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141ee:	f7fd f96d 	bl	80114cc <disk_read>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d004      	beq.n	8014202 <f_lseek+0x436>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2201      	movs	r2, #1
 80141fc:	755a      	strb	r2, [r3, #21]
 80141fe:	2301      	movs	r3, #1
 8014200:	e004      	b.n	801420c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014206:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801420c:	4618      	mov	r0, r3
 801420e:	3740      	adds	r7, #64	; 0x40
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b09e      	sub	sp, #120	; 0x78
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801421c:	2300      	movs	r3, #0
 801421e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014220:	f107 010c 	add.w	r1, r7, #12
 8014224:	1d3b      	adds	r3, r7, #4
 8014226:	2202      	movs	r2, #2
 8014228:	4618      	mov	r0, r3
 801422a:	f7fe fd17 	bl	8012c5c <find_volume>
 801422e:	4603      	mov	r3, r0
 8014230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014238:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801423c:	2b00      	cmp	r3, #0
 801423e:	f040 80a4 	bne.w	801438a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014248:	4611      	mov	r1, r2
 801424a:	4618      	mov	r0, r3
 801424c:	f7fe fbd6 	bl	80129fc <follow_path>
 8014250:	4603      	mov	r3, r0
 8014252:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014256:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801425a:	2b00      	cmp	r3, #0
 801425c:	d108      	bne.n	8014270 <f_unlink+0x5c>
 801425e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014262:	f003 0320 	and.w	r3, r3, #32
 8014266:	2b00      	cmp	r3, #0
 8014268:	d002      	beq.n	8014270 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801426a:	2306      	movs	r3, #6
 801426c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014270:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014274:	2b00      	cmp	r3, #0
 8014276:	d108      	bne.n	801428a <f_unlink+0x76>
 8014278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801427c:	2102      	movs	r1, #2
 801427e:	4618      	mov	r0, r3
 8014280:	f7fd fa82 	bl	8011788 <chk_lock>
 8014284:	4603      	mov	r3, r0
 8014286:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801428a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801428e:	2b00      	cmp	r3, #0
 8014290:	d17b      	bne.n	801438a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014292:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014296:	b25b      	sxtb	r3, r3
 8014298:	2b00      	cmp	r3, #0
 801429a:	da03      	bge.n	80142a4 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801429c:	2306      	movs	r3, #6
 801429e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142a2:	e008      	b.n	80142b6 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80142a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80142a8:	f003 0301 	and.w	r3, r3, #1
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80142b0:	2307      	movs	r3, #7
 80142b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80142b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d13d      	bne.n	801433a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142c2:	4611      	mov	r1, r2
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fe f98e 	bl	80125e6 <ld_clust>
 80142ca:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80142cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80142d0:	f003 0310 	and.w	r3, r3, #16
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d030      	beq.n	801433a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	699b      	ldr	r3, [r3, #24]
 80142dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80142de:	429a      	cmp	r2, r3
 80142e0:	d103      	bne.n	80142ea <f_unlink+0xd6>
						res = FR_DENIED;
 80142e2:	2307      	movs	r3, #7
 80142e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142e8:	e027      	b.n	801433a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80142ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142f0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80142f2:	f107 0310 	add.w	r3, r7, #16
 80142f6:	2100      	movs	r1, #0
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fd ffce 	bl	801229a <dir_sdi>
 80142fe:	4603      	mov	r3, r0
 8014300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014304:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014308:	2b00      	cmp	r3, #0
 801430a:	d116      	bne.n	801433a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801430c:	f107 0310 	add.w	r3, r7, #16
 8014310:	2100      	movs	r1, #0
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe f9a6 	bl	8012664 <dir_read>
 8014318:	4603      	mov	r3, r0
 801431a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801431e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014322:	2b00      	cmp	r3, #0
 8014324:	d102      	bne.n	801432c <f_unlink+0x118>
 8014326:	2307      	movs	r3, #7
 8014328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801432c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014330:	2b04      	cmp	r3, #4
 8014332:	d102      	bne.n	801433a <f_unlink+0x126>
 8014334:	2300      	movs	r3, #0
 8014336:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801433a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801433e:	2b00      	cmp	r3, #0
 8014340:	d123      	bne.n	801438a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014346:	4618      	mov	r0, r3
 8014348:	f7fe fa70 	bl	801282c <dir_remove>
 801434c:	4603      	mov	r3, r0
 801434e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014352:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014356:	2b00      	cmp	r3, #0
 8014358:	d10c      	bne.n	8014374 <f_unlink+0x160>
 801435a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801435c:	2b00      	cmp	r3, #0
 801435e:	d009      	beq.n	8014374 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014364:	2200      	movs	r2, #0
 8014366:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014368:	4618      	mov	r0, r3
 801436a:	f7fd fe61 	bl	8012030 <remove_chain>
 801436e:	4603      	mov	r3, r0
 8014370:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014374:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014378:	2b00      	cmp	r3, #0
 801437a:	d106      	bne.n	801438a <f_unlink+0x176>
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	4618      	mov	r0, r3
 8014380:	f7fd fbe0 	bl	8011b44 <sync_fs>
 8014384:	4603      	mov	r3, r0
 8014386:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801438a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801438e:	4618      	mov	r0, r3
 8014390:	3778      	adds	r7, #120	; 0x78
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
	...

08014398 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b096      	sub	sp, #88	; 0x58
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143a0:	f107 0108 	add.w	r1, r7, #8
 80143a4:	1d3b      	adds	r3, r7, #4
 80143a6:	2202      	movs	r2, #2
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fe fc57 	bl	8012c5c <find_volume>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80143b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f040 80fe 	bne.w	80145be <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	f107 030c 	add.w	r3, r7, #12
 80143c8:	4611      	mov	r1, r2
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7fe fb16 	bl	80129fc <follow_path>
 80143d0:	4603      	mov	r3, r0
 80143d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80143d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d102      	bne.n	80143e4 <f_mkdir+0x4c>
 80143de:	2308      	movs	r3, #8
 80143e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80143e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143e8:	2b04      	cmp	r3, #4
 80143ea:	d108      	bne.n	80143fe <f_mkdir+0x66>
 80143ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80143f0:	f003 0320 	and.w	r3, r3, #32
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d002      	beq.n	80143fe <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80143f8:	2306      	movs	r3, #6
 80143fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80143fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014402:	2b04      	cmp	r3, #4
 8014404:	f040 80db 	bne.w	80145be <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014408:	f107 030c 	add.w	r3, r7, #12
 801440c:	2100      	movs	r1, #0
 801440e:	4618      	mov	r0, r3
 8014410:	f7fd fe73 	bl	80120fa <create_chain>
 8014414:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	895b      	ldrh	r3, [r3, #10]
 801441a:	461a      	mov	r2, r3
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	899b      	ldrh	r3, [r3, #12]
 8014420:	fb03 f302 	mul.w	r3, r3, r2
 8014424:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014426:	2300      	movs	r3, #0
 8014428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <f_mkdir+0xa0>
 8014432:	2307      	movs	r3, #7
 8014434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801443a:	2b01      	cmp	r3, #1
 801443c:	d102      	bne.n	8014444 <f_mkdir+0xac>
 801443e:	2302      	movs	r3, #2
 8014440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801444a:	d102      	bne.n	8014452 <f_mkdir+0xba>
 801444c:	2301      	movs	r3, #1
 801444e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014456:	2b00      	cmp	r3, #0
 8014458:	d106      	bne.n	8014468 <f_mkdir+0xd0>
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	4618      	mov	r0, r3
 801445e:	f7fd faff 	bl	8011a60 <sync_window>
 8014462:	4603      	mov	r3, r0
 8014464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014468:	4b58      	ldr	r3, [pc, #352]	; (80145cc <f_mkdir+0x234>)
 801446a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801446c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014470:	2b00      	cmp	r3, #0
 8014472:	d16c      	bne.n	801454e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014478:	4618      	mov	r0, r3
 801447a:	f7fd fbd3 	bl	8011c24 <clust2sect>
 801447e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	3338      	adds	r3, #56	; 0x38
 8014484:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	899b      	ldrh	r3, [r3, #12]
 801448a:	461a      	mov	r2, r3
 801448c:	2100      	movs	r1, #0
 801448e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014490:	f7fd f91d 	bl	80116ce <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014494:	220b      	movs	r2, #11
 8014496:	2120      	movs	r1, #32
 8014498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801449a:	f7fd f918 	bl	80116ce <mem_set>
					dir[DIR_Name] = '.';
 801449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144a0:	222e      	movs	r2, #46	; 0x2e
 80144a2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80144a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144a6:	330b      	adds	r3, #11
 80144a8:	2210      	movs	r2, #16
 80144aa:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80144ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ae:	3316      	adds	r3, #22
 80144b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fd f8be 	bl	8011634 <st_dword>
					st_clust(fs, dir, dcl);
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80144bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fe f8b0 	bl	8012624 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80144c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144c6:	3320      	adds	r3, #32
 80144c8:	2220      	movs	r2, #32
 80144ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7fd f8dd 	bl	801168c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80144d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144d4:	3321      	adds	r3, #33	; 0x21
 80144d6:	222e      	movs	r2, #46	; 0x2e
 80144d8:	701a      	strb	r2, [r3, #0]
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	2b03      	cmp	r3, #3
 80144e4:	d106      	bne.n	80144f4 <f_mkdir+0x15c>
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d101      	bne.n	80144f4 <f_mkdir+0x15c>
 80144f0:	2300      	movs	r3, #0
 80144f2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80144f4:	68b8      	ldr	r0, [r7, #8]
 80144f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144f8:	3320      	adds	r3, #32
 80144fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144fc:	4619      	mov	r1, r3
 80144fe:	f7fe f891 	bl	8012624 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	895b      	ldrh	r3, [r3, #10]
 8014506:	653b      	str	r3, [r7, #80]	; 0x50
 8014508:	e01c      	b.n	8014544 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801450c:	1c5a      	adds	r2, r3, #1
 801450e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014510:	68ba      	ldr	r2, [r7, #8]
 8014512:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	2201      	movs	r2, #1
 8014518:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	4618      	mov	r0, r3
 801451e:	f7fd fa9f 	bl	8011a60 <sync_window>
 8014522:	4603      	mov	r3, r0
 8014524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801452c:	2b00      	cmp	r3, #0
 801452e:	d10d      	bne.n	801454c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	899b      	ldrh	r3, [r3, #12]
 8014534:	461a      	mov	r2, r3
 8014536:	2100      	movs	r1, #0
 8014538:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801453a:	f7fd f8c8 	bl	80116ce <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014540:	3b01      	subs	r3, #1
 8014542:	653b      	str	r3, [r7, #80]	; 0x50
 8014544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1df      	bne.n	801450a <f_mkdir+0x172>
 801454a:	e000      	b.n	801454e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801454c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801454e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014552:	2b00      	cmp	r3, #0
 8014554:	d107      	bne.n	8014566 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014556:	f107 030c 	add.w	r3, r7, #12
 801455a:	4618      	mov	r0, r3
 801455c:	f7fe f934 	bl	80127c8 <dir_register>
 8014560:	4603      	mov	r3, r0
 8014562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801456a:	2b00      	cmp	r3, #0
 801456c:	d120      	bne.n	80145b0 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014570:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014574:	3316      	adds	r3, #22
 8014576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014578:	4618      	mov	r0, r3
 801457a:	f7fd f85b 	bl	8011634 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe f84d 	bl	8012624 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801458a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801458c:	330b      	adds	r3, #11
 801458e:	2210      	movs	r2, #16
 8014590:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2201      	movs	r2, #1
 8014596:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801459c:	2b00      	cmp	r3, #0
 801459e:	d10e      	bne.n	80145be <f_mkdir+0x226>
					res = sync_fs(fs);
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fd face 	bl	8011b44 <sync_fs>
 80145a8:	4603      	mov	r3, r0
 80145aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80145ae:	e006      	b.n	80145be <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80145b0:	f107 030c 	add.w	r3, r7, #12
 80145b4:	2200      	movs	r2, #0
 80145b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fd fd39 	bl	8012030 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80145be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3758      	adds	r7, #88	; 0x58
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	274a0000 	.word	0x274a0000

080145d0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
	int n = 0;
 80145dc:	2300      	movs	r3, #0
 80145de:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80145e4:	e017      	b.n	8014616 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80145e6:	f107 0310 	add.w	r3, r7, #16
 80145ea:	f107 0114 	add.w	r1, r7, #20
 80145ee:	2201      	movs	r2, #1
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff f803 	bl	80135fc <f_read>
		if (rc != 1) break;
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d112      	bne.n	8014622 <f_gets+0x52>
		c = s[0];
 80145fc:	7d3b      	ldrb	r3, [r7, #20]
 80145fe:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014600:	69bb      	ldr	r3, [r7, #24]
 8014602:	1c5a      	adds	r2, r3, #1
 8014604:	61ba      	str	r2, [r7, #24]
 8014606:	7dfa      	ldrb	r2, [r7, #23]
 8014608:	701a      	strb	r2, [r3, #0]
		n++;
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	3301      	adds	r3, #1
 801460e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014610:	7dfb      	ldrb	r3, [r7, #23]
 8014612:	2b0a      	cmp	r3, #10
 8014614:	d007      	beq.n	8014626 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	3b01      	subs	r3, #1
 801461a:	69fa      	ldr	r2, [r7, #28]
 801461c:	429a      	cmp	r2, r3
 801461e:	dbe2      	blt.n	80145e6 <f_gets+0x16>
 8014620:	e002      	b.n	8014628 <f_gets+0x58>
		if (rc != 1) break;
 8014622:	bf00      	nop
 8014624:	e000      	b.n	8014628 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014626:	bf00      	nop
	}
	*p = 0;
 8014628:	69bb      	ldr	r3, [r7, #24]
 801462a:	2200      	movs	r2, #0
 801462c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <f_gets+0x68>
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	e000      	b.n	801463a <f_gets+0x6a>
 8014638:	2300      	movs	r3, #0
}
 801463a:	4618      	mov	r0, r3
 801463c:	3720      	adds	r7, #32
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
	...

08014644 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014644:	b480      	push	{r7}
 8014646:	b087      	sub	sp, #28
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	4613      	mov	r3, r2
 8014650:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014652:	2301      	movs	r3, #1
 8014654:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801465a:	4b1f      	ldr	r3, [pc, #124]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 801465c:	7a5b      	ldrb	r3, [r3, #9]
 801465e:	b2db      	uxtb	r3, r3
 8014660:	2b00      	cmp	r3, #0
 8014662:	d131      	bne.n	80146c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014664:	4b1c      	ldr	r3, [pc, #112]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 8014666:	7a5b      	ldrb	r3, [r3, #9]
 8014668:	b2db      	uxtb	r3, r3
 801466a:	461a      	mov	r2, r3
 801466c:	4b1a      	ldr	r3, [pc, #104]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 801466e:	2100      	movs	r1, #0
 8014670:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014672:	4b19      	ldr	r3, [pc, #100]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 8014674:	7a5b      	ldrb	r3, [r3, #9]
 8014676:	b2db      	uxtb	r3, r3
 8014678:	4a17      	ldr	r2, [pc, #92]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4413      	add	r3, r2
 801467e:	68fa      	ldr	r2, [r7, #12]
 8014680:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014682:	4b15      	ldr	r3, [pc, #84]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 8014684:	7a5b      	ldrb	r3, [r3, #9]
 8014686:	b2db      	uxtb	r3, r3
 8014688:	461a      	mov	r2, r3
 801468a:	4b13      	ldr	r3, [pc, #76]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 801468c:	4413      	add	r3, r2
 801468e:	79fa      	ldrb	r2, [r7, #7]
 8014690:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014692:	4b11      	ldr	r3, [pc, #68]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 8014694:	7a5b      	ldrb	r3, [r3, #9]
 8014696:	b2db      	uxtb	r3, r3
 8014698:	1c5a      	adds	r2, r3, #1
 801469a:	b2d1      	uxtb	r1, r2
 801469c:	4a0e      	ldr	r2, [pc, #56]	; (80146d8 <FATFS_LinkDriverEx+0x94>)
 801469e:	7251      	strb	r1, [r2, #9]
 80146a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146a2:	7dbb      	ldrb	r3, [r7, #22]
 80146a4:	3330      	adds	r3, #48	; 0x30
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	3301      	adds	r3, #1
 80146b0:	223a      	movs	r2, #58	; 0x3a
 80146b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	3302      	adds	r3, #2
 80146b8:	222f      	movs	r2, #47	; 0x2f
 80146ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	3303      	adds	r3, #3
 80146c0:	2200      	movs	r2, #0
 80146c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80146c4:	2300      	movs	r3, #0
 80146c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80146c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	371c      	adds	r7, #28
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	200481cc 	.word	0x200481cc

080146dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80146e6:	2200      	movs	r2, #0
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f7ff ffaa 	bl	8014644 <FATFS_LinkDriverEx>
 80146f0:	4603      	mov	r3, r0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3708      	adds	r7, #8
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <__cxa_guard_acquire>:
 80146fa:	6803      	ldr	r3, [r0, #0]
 80146fc:	07db      	lsls	r3, r3, #31
 80146fe:	d406      	bmi.n	801470e <__cxa_guard_acquire+0x14>
 8014700:	7843      	ldrb	r3, [r0, #1]
 8014702:	b103      	cbz	r3, 8014706 <__cxa_guard_acquire+0xc>
 8014704:	deff      	udf	#255	; 0xff
 8014706:	2301      	movs	r3, #1
 8014708:	7043      	strb	r3, [r0, #1]
 801470a:	4618      	mov	r0, r3
 801470c:	4770      	bx	lr
 801470e:	2000      	movs	r0, #0
 8014710:	4770      	bx	lr

08014712 <__cxa_guard_release>:
 8014712:	2301      	movs	r3, #1
 8014714:	6003      	str	r3, [r0, #0]
 8014716:	4770      	bx	lr

08014718 <__errno>:
 8014718:	4b01      	ldr	r3, [pc, #4]	; (8014720 <__errno+0x8>)
 801471a:	6818      	ldr	r0, [r3, #0]
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop
 8014720:	2000000c 	.word	0x2000000c

08014724 <__libc_init_array>:
 8014724:	b570      	push	{r4, r5, r6, lr}
 8014726:	4e0d      	ldr	r6, [pc, #52]	; (801475c <__libc_init_array+0x38>)
 8014728:	4c0d      	ldr	r4, [pc, #52]	; (8014760 <__libc_init_array+0x3c>)
 801472a:	1ba4      	subs	r4, r4, r6
 801472c:	10a4      	asrs	r4, r4, #2
 801472e:	2500      	movs	r5, #0
 8014730:	42a5      	cmp	r5, r4
 8014732:	d109      	bne.n	8014748 <__libc_init_array+0x24>
 8014734:	4e0b      	ldr	r6, [pc, #44]	; (8014764 <__libc_init_array+0x40>)
 8014736:	4c0c      	ldr	r4, [pc, #48]	; (8014768 <__libc_init_array+0x44>)
 8014738:	f004 f9e8 	bl	8018b0c <_init>
 801473c:	1ba4      	subs	r4, r4, r6
 801473e:	10a4      	asrs	r4, r4, #2
 8014740:	2500      	movs	r5, #0
 8014742:	42a5      	cmp	r5, r4
 8014744:	d105      	bne.n	8014752 <__libc_init_array+0x2e>
 8014746:	bd70      	pop	{r4, r5, r6, pc}
 8014748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801474c:	4798      	blx	r3
 801474e:	3501      	adds	r5, #1
 8014750:	e7ee      	b.n	8014730 <__libc_init_array+0xc>
 8014752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014756:	4798      	blx	r3
 8014758:	3501      	adds	r5, #1
 801475a:	e7f2      	b.n	8014742 <__libc_init_array+0x1e>
 801475c:	08019364 	.word	0x08019364
 8014760:	08019364 	.word	0x08019364
 8014764:	08019364 	.word	0x08019364
 8014768:	0801936c 	.word	0x0801936c

0801476c <memset>:
 801476c:	4402      	add	r2, r0
 801476e:	4603      	mov	r3, r0
 8014770:	4293      	cmp	r3, r2
 8014772:	d100      	bne.n	8014776 <memset+0xa>
 8014774:	4770      	bx	lr
 8014776:	f803 1b01 	strb.w	r1, [r3], #1
 801477a:	e7f9      	b.n	8014770 <memset+0x4>

0801477c <__cvt>:
 801477c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014780:	ec55 4b10 	vmov	r4, r5, d0
 8014784:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014786:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801478a:	2d00      	cmp	r5, #0
 801478c:	460e      	mov	r6, r1
 801478e:	4691      	mov	r9, r2
 8014790:	4619      	mov	r1, r3
 8014792:	bfb8      	it	lt
 8014794:	4622      	movlt	r2, r4
 8014796:	462b      	mov	r3, r5
 8014798:	f027 0720 	bic.w	r7, r7, #32
 801479c:	bfbb      	ittet	lt
 801479e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80147a2:	461d      	movlt	r5, r3
 80147a4:	2300      	movge	r3, #0
 80147a6:	232d      	movlt	r3, #45	; 0x2d
 80147a8:	bfb8      	it	lt
 80147aa:	4614      	movlt	r4, r2
 80147ac:	2f46      	cmp	r7, #70	; 0x46
 80147ae:	700b      	strb	r3, [r1, #0]
 80147b0:	d004      	beq.n	80147bc <__cvt+0x40>
 80147b2:	2f45      	cmp	r7, #69	; 0x45
 80147b4:	d100      	bne.n	80147b8 <__cvt+0x3c>
 80147b6:	3601      	adds	r6, #1
 80147b8:	2102      	movs	r1, #2
 80147ba:	e000      	b.n	80147be <__cvt+0x42>
 80147bc:	2103      	movs	r1, #3
 80147be:	ab03      	add	r3, sp, #12
 80147c0:	9301      	str	r3, [sp, #4]
 80147c2:	ab02      	add	r3, sp, #8
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	4632      	mov	r2, r6
 80147c8:	4653      	mov	r3, sl
 80147ca:	ec45 4b10 	vmov	d0, r4, r5
 80147ce:	f001 fdff 	bl	80163d0 <_dtoa_r>
 80147d2:	2f47      	cmp	r7, #71	; 0x47
 80147d4:	4680      	mov	r8, r0
 80147d6:	d102      	bne.n	80147de <__cvt+0x62>
 80147d8:	f019 0f01 	tst.w	r9, #1
 80147dc:	d026      	beq.n	801482c <__cvt+0xb0>
 80147de:	2f46      	cmp	r7, #70	; 0x46
 80147e0:	eb08 0906 	add.w	r9, r8, r6
 80147e4:	d111      	bne.n	801480a <__cvt+0x8e>
 80147e6:	f898 3000 	ldrb.w	r3, [r8]
 80147ea:	2b30      	cmp	r3, #48	; 0x30
 80147ec:	d10a      	bne.n	8014804 <__cvt+0x88>
 80147ee:	2200      	movs	r2, #0
 80147f0:	2300      	movs	r3, #0
 80147f2:	4620      	mov	r0, r4
 80147f4:	4629      	mov	r1, r5
 80147f6:	f7ec f97f 	bl	8000af8 <__aeabi_dcmpeq>
 80147fa:	b918      	cbnz	r0, 8014804 <__cvt+0x88>
 80147fc:	f1c6 0601 	rsb	r6, r6, #1
 8014800:	f8ca 6000 	str.w	r6, [sl]
 8014804:	f8da 3000 	ldr.w	r3, [sl]
 8014808:	4499      	add	r9, r3
 801480a:	2200      	movs	r2, #0
 801480c:	2300      	movs	r3, #0
 801480e:	4620      	mov	r0, r4
 8014810:	4629      	mov	r1, r5
 8014812:	f7ec f971 	bl	8000af8 <__aeabi_dcmpeq>
 8014816:	b938      	cbnz	r0, 8014828 <__cvt+0xac>
 8014818:	2230      	movs	r2, #48	; 0x30
 801481a:	9b03      	ldr	r3, [sp, #12]
 801481c:	454b      	cmp	r3, r9
 801481e:	d205      	bcs.n	801482c <__cvt+0xb0>
 8014820:	1c59      	adds	r1, r3, #1
 8014822:	9103      	str	r1, [sp, #12]
 8014824:	701a      	strb	r2, [r3, #0]
 8014826:	e7f8      	b.n	801481a <__cvt+0x9e>
 8014828:	f8cd 900c 	str.w	r9, [sp, #12]
 801482c:	9b03      	ldr	r3, [sp, #12]
 801482e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014830:	eba3 0308 	sub.w	r3, r3, r8
 8014834:	4640      	mov	r0, r8
 8014836:	6013      	str	r3, [r2, #0]
 8014838:	b004      	add	sp, #16
 801483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801483e <__exponent>:
 801483e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014840:	2900      	cmp	r1, #0
 8014842:	4604      	mov	r4, r0
 8014844:	bfba      	itte	lt
 8014846:	4249      	neglt	r1, r1
 8014848:	232d      	movlt	r3, #45	; 0x2d
 801484a:	232b      	movge	r3, #43	; 0x2b
 801484c:	2909      	cmp	r1, #9
 801484e:	f804 2b02 	strb.w	r2, [r4], #2
 8014852:	7043      	strb	r3, [r0, #1]
 8014854:	dd20      	ble.n	8014898 <__exponent+0x5a>
 8014856:	f10d 0307 	add.w	r3, sp, #7
 801485a:	461f      	mov	r7, r3
 801485c:	260a      	movs	r6, #10
 801485e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014862:	fb06 1115 	mls	r1, r6, r5, r1
 8014866:	3130      	adds	r1, #48	; 0x30
 8014868:	2d09      	cmp	r5, #9
 801486a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801486e:	f103 32ff 	add.w	r2, r3, #4294967295
 8014872:	4629      	mov	r1, r5
 8014874:	dc09      	bgt.n	801488a <__exponent+0x4c>
 8014876:	3130      	adds	r1, #48	; 0x30
 8014878:	3b02      	subs	r3, #2
 801487a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801487e:	42bb      	cmp	r3, r7
 8014880:	4622      	mov	r2, r4
 8014882:	d304      	bcc.n	801488e <__exponent+0x50>
 8014884:	1a10      	subs	r0, r2, r0
 8014886:	b003      	add	sp, #12
 8014888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801488a:	4613      	mov	r3, r2
 801488c:	e7e7      	b.n	801485e <__exponent+0x20>
 801488e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014892:	f804 2b01 	strb.w	r2, [r4], #1
 8014896:	e7f2      	b.n	801487e <__exponent+0x40>
 8014898:	2330      	movs	r3, #48	; 0x30
 801489a:	4419      	add	r1, r3
 801489c:	7083      	strb	r3, [r0, #2]
 801489e:	1d02      	adds	r2, r0, #4
 80148a0:	70c1      	strb	r1, [r0, #3]
 80148a2:	e7ef      	b.n	8014884 <__exponent+0x46>

080148a4 <_printf_float>:
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	b08d      	sub	sp, #52	; 0x34
 80148aa:	460c      	mov	r4, r1
 80148ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80148b0:	4616      	mov	r6, r2
 80148b2:	461f      	mov	r7, r3
 80148b4:	4605      	mov	r5, r0
 80148b6:	f002 fe7d 	bl	80175b4 <_localeconv_r>
 80148ba:	6803      	ldr	r3, [r0, #0]
 80148bc:	9304      	str	r3, [sp, #16]
 80148be:	4618      	mov	r0, r3
 80148c0:	f7eb fc9e 	bl	8000200 <strlen>
 80148c4:	2300      	movs	r3, #0
 80148c6:	930a      	str	r3, [sp, #40]	; 0x28
 80148c8:	f8d8 3000 	ldr.w	r3, [r8]
 80148cc:	9005      	str	r0, [sp, #20]
 80148ce:	3307      	adds	r3, #7
 80148d0:	f023 0307 	bic.w	r3, r3, #7
 80148d4:	f103 0208 	add.w	r2, r3, #8
 80148d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80148dc:	f8d4 b000 	ldr.w	fp, [r4]
 80148e0:	f8c8 2000 	str.w	r2, [r8]
 80148e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80148ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80148f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80148f4:	9307      	str	r3, [sp, #28]
 80148f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80148fa:	f04f 32ff 	mov.w	r2, #4294967295
 80148fe:	4ba7      	ldr	r3, [pc, #668]	; (8014b9c <_printf_float+0x2f8>)
 8014900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014904:	f7ec f92a 	bl	8000b5c <__aeabi_dcmpun>
 8014908:	bb70      	cbnz	r0, 8014968 <_printf_float+0xc4>
 801490a:	f04f 32ff 	mov.w	r2, #4294967295
 801490e:	4ba3      	ldr	r3, [pc, #652]	; (8014b9c <_printf_float+0x2f8>)
 8014910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014914:	f7ec f904 	bl	8000b20 <__aeabi_dcmple>
 8014918:	bb30      	cbnz	r0, 8014968 <_printf_float+0xc4>
 801491a:	2200      	movs	r2, #0
 801491c:	2300      	movs	r3, #0
 801491e:	4640      	mov	r0, r8
 8014920:	4649      	mov	r1, r9
 8014922:	f7ec f8f3 	bl	8000b0c <__aeabi_dcmplt>
 8014926:	b110      	cbz	r0, 801492e <_printf_float+0x8a>
 8014928:	232d      	movs	r3, #45	; 0x2d
 801492a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801492e:	4a9c      	ldr	r2, [pc, #624]	; (8014ba0 <_printf_float+0x2fc>)
 8014930:	4b9c      	ldr	r3, [pc, #624]	; (8014ba4 <_printf_float+0x300>)
 8014932:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014936:	bf8c      	ite	hi
 8014938:	4690      	movhi	r8, r2
 801493a:	4698      	movls	r8, r3
 801493c:	2303      	movs	r3, #3
 801493e:	f02b 0204 	bic.w	r2, fp, #4
 8014942:	6123      	str	r3, [r4, #16]
 8014944:	6022      	str	r2, [r4, #0]
 8014946:	f04f 0900 	mov.w	r9, #0
 801494a:	9700      	str	r7, [sp, #0]
 801494c:	4633      	mov	r3, r6
 801494e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014950:	4621      	mov	r1, r4
 8014952:	4628      	mov	r0, r5
 8014954:	f000 f9e6 	bl	8014d24 <_printf_common>
 8014958:	3001      	adds	r0, #1
 801495a:	f040 808d 	bne.w	8014a78 <_printf_float+0x1d4>
 801495e:	f04f 30ff 	mov.w	r0, #4294967295
 8014962:	b00d      	add	sp, #52	; 0x34
 8014964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014968:	4642      	mov	r2, r8
 801496a:	464b      	mov	r3, r9
 801496c:	4640      	mov	r0, r8
 801496e:	4649      	mov	r1, r9
 8014970:	f7ec f8f4 	bl	8000b5c <__aeabi_dcmpun>
 8014974:	b110      	cbz	r0, 801497c <_printf_float+0xd8>
 8014976:	4a8c      	ldr	r2, [pc, #560]	; (8014ba8 <_printf_float+0x304>)
 8014978:	4b8c      	ldr	r3, [pc, #560]	; (8014bac <_printf_float+0x308>)
 801497a:	e7da      	b.n	8014932 <_printf_float+0x8e>
 801497c:	6861      	ldr	r1, [r4, #4]
 801497e:	1c4b      	adds	r3, r1, #1
 8014980:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014984:	a80a      	add	r0, sp, #40	; 0x28
 8014986:	d13e      	bne.n	8014a06 <_printf_float+0x162>
 8014988:	2306      	movs	r3, #6
 801498a:	6063      	str	r3, [r4, #4]
 801498c:	2300      	movs	r3, #0
 801498e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014992:	ab09      	add	r3, sp, #36	; 0x24
 8014994:	9300      	str	r3, [sp, #0]
 8014996:	ec49 8b10 	vmov	d0, r8, r9
 801499a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801499e:	6022      	str	r2, [r4, #0]
 80149a0:	f8cd a004 	str.w	sl, [sp, #4]
 80149a4:	6861      	ldr	r1, [r4, #4]
 80149a6:	4628      	mov	r0, r5
 80149a8:	f7ff fee8 	bl	801477c <__cvt>
 80149ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80149b0:	2b47      	cmp	r3, #71	; 0x47
 80149b2:	4680      	mov	r8, r0
 80149b4:	d109      	bne.n	80149ca <_printf_float+0x126>
 80149b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b8:	1cd8      	adds	r0, r3, #3
 80149ba:	db02      	blt.n	80149c2 <_printf_float+0x11e>
 80149bc:	6862      	ldr	r2, [r4, #4]
 80149be:	4293      	cmp	r3, r2
 80149c0:	dd47      	ble.n	8014a52 <_printf_float+0x1ae>
 80149c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80149c6:	fa5f fa8a 	uxtb.w	sl, sl
 80149ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80149ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149d0:	d824      	bhi.n	8014a1c <_printf_float+0x178>
 80149d2:	3901      	subs	r1, #1
 80149d4:	4652      	mov	r2, sl
 80149d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80149da:	9109      	str	r1, [sp, #36]	; 0x24
 80149dc:	f7ff ff2f 	bl	801483e <__exponent>
 80149e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149e2:	1813      	adds	r3, r2, r0
 80149e4:	2a01      	cmp	r2, #1
 80149e6:	4681      	mov	r9, r0
 80149e8:	6123      	str	r3, [r4, #16]
 80149ea:	dc02      	bgt.n	80149f2 <_printf_float+0x14e>
 80149ec:	6822      	ldr	r2, [r4, #0]
 80149ee:	07d1      	lsls	r1, r2, #31
 80149f0:	d501      	bpl.n	80149f6 <_printf_float+0x152>
 80149f2:	3301      	adds	r3, #1
 80149f4:	6123      	str	r3, [r4, #16]
 80149f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d0a5      	beq.n	801494a <_printf_float+0xa6>
 80149fe:	232d      	movs	r3, #45	; 0x2d
 8014a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a04:	e7a1      	b.n	801494a <_printf_float+0xa6>
 8014a06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014a0a:	f000 8177 	beq.w	8014cfc <_printf_float+0x458>
 8014a0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014a12:	d1bb      	bne.n	801498c <_printf_float+0xe8>
 8014a14:	2900      	cmp	r1, #0
 8014a16:	d1b9      	bne.n	801498c <_printf_float+0xe8>
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e7b6      	b.n	801498a <_printf_float+0xe6>
 8014a1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014a20:	d119      	bne.n	8014a56 <_printf_float+0x1b2>
 8014a22:	2900      	cmp	r1, #0
 8014a24:	6863      	ldr	r3, [r4, #4]
 8014a26:	dd0c      	ble.n	8014a42 <_printf_float+0x19e>
 8014a28:	6121      	str	r1, [r4, #16]
 8014a2a:	b913      	cbnz	r3, 8014a32 <_printf_float+0x18e>
 8014a2c:	6822      	ldr	r2, [r4, #0]
 8014a2e:	07d2      	lsls	r2, r2, #31
 8014a30:	d502      	bpl.n	8014a38 <_printf_float+0x194>
 8014a32:	3301      	adds	r3, #1
 8014a34:	440b      	add	r3, r1
 8014a36:	6123      	str	r3, [r4, #16]
 8014a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8014a3c:	f04f 0900 	mov.w	r9, #0
 8014a40:	e7d9      	b.n	80149f6 <_printf_float+0x152>
 8014a42:	b913      	cbnz	r3, 8014a4a <_printf_float+0x1a6>
 8014a44:	6822      	ldr	r2, [r4, #0]
 8014a46:	07d0      	lsls	r0, r2, #31
 8014a48:	d501      	bpl.n	8014a4e <_printf_float+0x1aa>
 8014a4a:	3302      	adds	r3, #2
 8014a4c:	e7f3      	b.n	8014a36 <_printf_float+0x192>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	e7f1      	b.n	8014a36 <_printf_float+0x192>
 8014a52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014a56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	db05      	blt.n	8014a6a <_printf_float+0x1c6>
 8014a5e:	6822      	ldr	r2, [r4, #0]
 8014a60:	6123      	str	r3, [r4, #16]
 8014a62:	07d1      	lsls	r1, r2, #31
 8014a64:	d5e8      	bpl.n	8014a38 <_printf_float+0x194>
 8014a66:	3301      	adds	r3, #1
 8014a68:	e7e5      	b.n	8014a36 <_printf_float+0x192>
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	bfd4      	ite	le
 8014a6e:	f1c3 0302 	rsble	r3, r3, #2
 8014a72:	2301      	movgt	r3, #1
 8014a74:	4413      	add	r3, r2
 8014a76:	e7de      	b.n	8014a36 <_printf_float+0x192>
 8014a78:	6823      	ldr	r3, [r4, #0]
 8014a7a:	055a      	lsls	r2, r3, #21
 8014a7c:	d407      	bmi.n	8014a8e <_printf_float+0x1ea>
 8014a7e:	6923      	ldr	r3, [r4, #16]
 8014a80:	4642      	mov	r2, r8
 8014a82:	4631      	mov	r1, r6
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b8      	blx	r7
 8014a88:	3001      	adds	r0, #1
 8014a8a:	d12b      	bne.n	8014ae4 <_printf_float+0x240>
 8014a8c:	e767      	b.n	801495e <_printf_float+0xba>
 8014a8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014a92:	f240 80dc 	bls.w	8014c4e <_printf_float+0x3aa>
 8014a96:	2200      	movs	r2, #0
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014a9e:	f7ec f82b 	bl	8000af8 <__aeabi_dcmpeq>
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d033      	beq.n	8014b0e <_printf_float+0x26a>
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	4a41      	ldr	r2, [pc, #260]	; (8014bb0 <_printf_float+0x30c>)
 8014aaa:	4631      	mov	r1, r6
 8014aac:	4628      	mov	r0, r5
 8014aae:	47b8      	blx	r7
 8014ab0:	3001      	adds	r0, #1
 8014ab2:	f43f af54 	beq.w	801495e <_printf_float+0xba>
 8014ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014aba:	429a      	cmp	r2, r3
 8014abc:	db02      	blt.n	8014ac4 <_printf_float+0x220>
 8014abe:	6823      	ldr	r3, [r4, #0]
 8014ac0:	07d8      	lsls	r0, r3, #31
 8014ac2:	d50f      	bpl.n	8014ae4 <_printf_float+0x240>
 8014ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ac8:	4631      	mov	r1, r6
 8014aca:	4628      	mov	r0, r5
 8014acc:	47b8      	blx	r7
 8014ace:	3001      	adds	r0, #1
 8014ad0:	f43f af45 	beq.w	801495e <_printf_float+0xba>
 8014ad4:	f04f 0800 	mov.w	r8, #0
 8014ad8:	f104 091a 	add.w	r9, r4, #26
 8014adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	4543      	cmp	r3, r8
 8014ae2:	dc09      	bgt.n	8014af8 <_printf_float+0x254>
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	079b      	lsls	r3, r3, #30
 8014ae8:	f100 8103 	bmi.w	8014cf2 <_printf_float+0x44e>
 8014aec:	68e0      	ldr	r0, [r4, #12]
 8014aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014af0:	4298      	cmp	r0, r3
 8014af2:	bfb8      	it	lt
 8014af4:	4618      	movlt	r0, r3
 8014af6:	e734      	b.n	8014962 <_printf_float+0xbe>
 8014af8:	2301      	movs	r3, #1
 8014afa:	464a      	mov	r2, r9
 8014afc:	4631      	mov	r1, r6
 8014afe:	4628      	mov	r0, r5
 8014b00:	47b8      	blx	r7
 8014b02:	3001      	adds	r0, #1
 8014b04:	f43f af2b 	beq.w	801495e <_printf_float+0xba>
 8014b08:	f108 0801 	add.w	r8, r8, #1
 8014b0c:	e7e6      	b.n	8014adc <_printf_float+0x238>
 8014b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	dc2b      	bgt.n	8014b6c <_printf_float+0x2c8>
 8014b14:	2301      	movs	r3, #1
 8014b16:	4a26      	ldr	r2, [pc, #152]	; (8014bb0 <_printf_float+0x30c>)
 8014b18:	4631      	mov	r1, r6
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	47b8      	blx	r7
 8014b1e:	3001      	adds	r0, #1
 8014b20:	f43f af1d 	beq.w	801495e <_printf_float+0xba>
 8014b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b26:	b923      	cbnz	r3, 8014b32 <_printf_float+0x28e>
 8014b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b2a:	b913      	cbnz	r3, 8014b32 <_printf_float+0x28e>
 8014b2c:	6823      	ldr	r3, [r4, #0]
 8014b2e:	07d9      	lsls	r1, r3, #31
 8014b30:	d5d8      	bpl.n	8014ae4 <_printf_float+0x240>
 8014b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b36:	4631      	mov	r1, r6
 8014b38:	4628      	mov	r0, r5
 8014b3a:	47b8      	blx	r7
 8014b3c:	3001      	adds	r0, #1
 8014b3e:	f43f af0e 	beq.w	801495e <_printf_float+0xba>
 8014b42:	f04f 0900 	mov.w	r9, #0
 8014b46:	f104 0a1a 	add.w	sl, r4, #26
 8014b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b4c:	425b      	negs	r3, r3
 8014b4e:	454b      	cmp	r3, r9
 8014b50:	dc01      	bgt.n	8014b56 <_printf_float+0x2b2>
 8014b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b54:	e794      	b.n	8014a80 <_printf_float+0x1dc>
 8014b56:	2301      	movs	r3, #1
 8014b58:	4652      	mov	r2, sl
 8014b5a:	4631      	mov	r1, r6
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	47b8      	blx	r7
 8014b60:	3001      	adds	r0, #1
 8014b62:	f43f aefc 	beq.w	801495e <_printf_float+0xba>
 8014b66:	f109 0901 	add.w	r9, r9, #1
 8014b6a:	e7ee      	b.n	8014b4a <_printf_float+0x2a6>
 8014b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014b70:	429a      	cmp	r2, r3
 8014b72:	bfa8      	it	ge
 8014b74:	461a      	movge	r2, r3
 8014b76:	2a00      	cmp	r2, #0
 8014b78:	4691      	mov	r9, r2
 8014b7a:	dd07      	ble.n	8014b8c <_printf_float+0x2e8>
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	4631      	mov	r1, r6
 8014b80:	4642      	mov	r2, r8
 8014b82:	4628      	mov	r0, r5
 8014b84:	47b8      	blx	r7
 8014b86:	3001      	adds	r0, #1
 8014b88:	f43f aee9 	beq.w	801495e <_printf_float+0xba>
 8014b8c:	f104 031a 	add.w	r3, r4, #26
 8014b90:	f04f 0b00 	mov.w	fp, #0
 8014b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b98:	9306      	str	r3, [sp, #24]
 8014b9a:	e015      	b.n	8014bc8 <_printf_float+0x324>
 8014b9c:	7fefffff 	.word	0x7fefffff
 8014ba0:	08019030 	.word	0x08019030
 8014ba4:	0801902c 	.word	0x0801902c
 8014ba8:	08019038 	.word	0x08019038
 8014bac:	08019034 	.word	0x08019034
 8014bb0:	080191f3 	.word	0x080191f3
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	9a06      	ldr	r2, [sp, #24]
 8014bb8:	4631      	mov	r1, r6
 8014bba:	4628      	mov	r0, r5
 8014bbc:	47b8      	blx	r7
 8014bbe:	3001      	adds	r0, #1
 8014bc0:	f43f aecd 	beq.w	801495e <_printf_float+0xba>
 8014bc4:	f10b 0b01 	add.w	fp, fp, #1
 8014bc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014bcc:	ebaa 0309 	sub.w	r3, sl, r9
 8014bd0:	455b      	cmp	r3, fp
 8014bd2:	dcef      	bgt.n	8014bb4 <_printf_float+0x310>
 8014bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	44d0      	add	r8, sl
 8014bdc:	db15      	blt.n	8014c0a <_printf_float+0x366>
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	07da      	lsls	r2, r3, #31
 8014be2:	d412      	bmi.n	8014c0a <_printf_float+0x366>
 8014be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014be8:	eba3 020a 	sub.w	r2, r3, sl
 8014bec:	eba3 0a01 	sub.w	sl, r3, r1
 8014bf0:	4592      	cmp	sl, r2
 8014bf2:	bfa8      	it	ge
 8014bf4:	4692      	movge	sl, r2
 8014bf6:	f1ba 0f00 	cmp.w	sl, #0
 8014bfa:	dc0e      	bgt.n	8014c1a <_printf_float+0x376>
 8014bfc:	f04f 0800 	mov.w	r8, #0
 8014c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c04:	f104 091a 	add.w	r9, r4, #26
 8014c08:	e019      	b.n	8014c3e <_printf_float+0x39a>
 8014c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c0e:	4631      	mov	r1, r6
 8014c10:	4628      	mov	r0, r5
 8014c12:	47b8      	blx	r7
 8014c14:	3001      	adds	r0, #1
 8014c16:	d1e5      	bne.n	8014be4 <_printf_float+0x340>
 8014c18:	e6a1      	b.n	801495e <_printf_float+0xba>
 8014c1a:	4653      	mov	r3, sl
 8014c1c:	4642      	mov	r2, r8
 8014c1e:	4631      	mov	r1, r6
 8014c20:	4628      	mov	r0, r5
 8014c22:	47b8      	blx	r7
 8014c24:	3001      	adds	r0, #1
 8014c26:	d1e9      	bne.n	8014bfc <_printf_float+0x358>
 8014c28:	e699      	b.n	801495e <_printf_float+0xba>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	464a      	mov	r2, r9
 8014c2e:	4631      	mov	r1, r6
 8014c30:	4628      	mov	r0, r5
 8014c32:	47b8      	blx	r7
 8014c34:	3001      	adds	r0, #1
 8014c36:	f43f ae92 	beq.w	801495e <_printf_float+0xba>
 8014c3a:	f108 0801 	add.w	r8, r8, #1
 8014c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c42:	1a9b      	subs	r3, r3, r2
 8014c44:	eba3 030a 	sub.w	r3, r3, sl
 8014c48:	4543      	cmp	r3, r8
 8014c4a:	dcee      	bgt.n	8014c2a <_printf_float+0x386>
 8014c4c:	e74a      	b.n	8014ae4 <_printf_float+0x240>
 8014c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c50:	2a01      	cmp	r2, #1
 8014c52:	dc01      	bgt.n	8014c58 <_printf_float+0x3b4>
 8014c54:	07db      	lsls	r3, r3, #31
 8014c56:	d53a      	bpl.n	8014cce <_printf_float+0x42a>
 8014c58:	2301      	movs	r3, #1
 8014c5a:	4642      	mov	r2, r8
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4628      	mov	r0, r5
 8014c60:	47b8      	blx	r7
 8014c62:	3001      	adds	r0, #1
 8014c64:	f43f ae7b 	beq.w	801495e <_printf_float+0xba>
 8014c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	4628      	mov	r0, r5
 8014c70:	47b8      	blx	r7
 8014c72:	3001      	adds	r0, #1
 8014c74:	f108 0801 	add.w	r8, r8, #1
 8014c78:	f43f ae71 	beq.w	801495e <_printf_float+0xba>
 8014c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c7e:	2200      	movs	r2, #0
 8014c80:	f103 3aff 	add.w	sl, r3, #4294967295
 8014c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c88:	2300      	movs	r3, #0
 8014c8a:	f7eb ff35 	bl	8000af8 <__aeabi_dcmpeq>
 8014c8e:	b9c8      	cbnz	r0, 8014cc4 <_printf_float+0x420>
 8014c90:	4653      	mov	r3, sl
 8014c92:	4642      	mov	r2, r8
 8014c94:	4631      	mov	r1, r6
 8014c96:	4628      	mov	r0, r5
 8014c98:	47b8      	blx	r7
 8014c9a:	3001      	adds	r0, #1
 8014c9c:	d10e      	bne.n	8014cbc <_printf_float+0x418>
 8014c9e:	e65e      	b.n	801495e <_printf_float+0xba>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	4652      	mov	r2, sl
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	47b8      	blx	r7
 8014caa:	3001      	adds	r0, #1
 8014cac:	f43f ae57 	beq.w	801495e <_printf_float+0xba>
 8014cb0:	f108 0801 	add.w	r8, r8, #1
 8014cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	4543      	cmp	r3, r8
 8014cba:	dcf1      	bgt.n	8014ca0 <_printf_float+0x3fc>
 8014cbc:	464b      	mov	r3, r9
 8014cbe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014cc2:	e6de      	b.n	8014a82 <_printf_float+0x1de>
 8014cc4:	f04f 0800 	mov.w	r8, #0
 8014cc8:	f104 0a1a 	add.w	sl, r4, #26
 8014ccc:	e7f2      	b.n	8014cb4 <_printf_float+0x410>
 8014cce:	2301      	movs	r3, #1
 8014cd0:	e7df      	b.n	8014c92 <_printf_float+0x3ee>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	464a      	mov	r2, r9
 8014cd6:	4631      	mov	r1, r6
 8014cd8:	4628      	mov	r0, r5
 8014cda:	47b8      	blx	r7
 8014cdc:	3001      	adds	r0, #1
 8014cde:	f43f ae3e 	beq.w	801495e <_printf_float+0xba>
 8014ce2:	f108 0801 	add.w	r8, r8, #1
 8014ce6:	68e3      	ldr	r3, [r4, #12]
 8014ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014cea:	1a9b      	subs	r3, r3, r2
 8014cec:	4543      	cmp	r3, r8
 8014cee:	dcf0      	bgt.n	8014cd2 <_printf_float+0x42e>
 8014cf0:	e6fc      	b.n	8014aec <_printf_float+0x248>
 8014cf2:	f04f 0800 	mov.w	r8, #0
 8014cf6:	f104 0919 	add.w	r9, r4, #25
 8014cfa:	e7f4      	b.n	8014ce6 <_printf_float+0x442>
 8014cfc:	2900      	cmp	r1, #0
 8014cfe:	f43f ae8b 	beq.w	8014a18 <_printf_float+0x174>
 8014d02:	2300      	movs	r3, #0
 8014d04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014d08:	ab09      	add	r3, sp, #36	; 0x24
 8014d0a:	9300      	str	r3, [sp, #0]
 8014d0c:	ec49 8b10 	vmov	d0, r8, r9
 8014d10:	6022      	str	r2, [r4, #0]
 8014d12:	f8cd a004 	str.w	sl, [sp, #4]
 8014d16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7ff fd2e 	bl	801477c <__cvt>
 8014d20:	4680      	mov	r8, r0
 8014d22:	e648      	b.n	80149b6 <_printf_float+0x112>

08014d24 <_printf_common>:
 8014d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d28:	4691      	mov	r9, r2
 8014d2a:	461f      	mov	r7, r3
 8014d2c:	688a      	ldr	r2, [r1, #8]
 8014d2e:	690b      	ldr	r3, [r1, #16]
 8014d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014d34:	4293      	cmp	r3, r2
 8014d36:	bfb8      	it	lt
 8014d38:	4613      	movlt	r3, r2
 8014d3a:	f8c9 3000 	str.w	r3, [r9]
 8014d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014d42:	4606      	mov	r6, r0
 8014d44:	460c      	mov	r4, r1
 8014d46:	b112      	cbz	r2, 8014d4e <_printf_common+0x2a>
 8014d48:	3301      	adds	r3, #1
 8014d4a:	f8c9 3000 	str.w	r3, [r9]
 8014d4e:	6823      	ldr	r3, [r4, #0]
 8014d50:	0699      	lsls	r1, r3, #26
 8014d52:	bf42      	ittt	mi
 8014d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014d58:	3302      	addmi	r3, #2
 8014d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8014d5e:	6825      	ldr	r5, [r4, #0]
 8014d60:	f015 0506 	ands.w	r5, r5, #6
 8014d64:	d107      	bne.n	8014d76 <_printf_common+0x52>
 8014d66:	f104 0a19 	add.w	sl, r4, #25
 8014d6a:	68e3      	ldr	r3, [r4, #12]
 8014d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8014d70:	1a9b      	subs	r3, r3, r2
 8014d72:	42ab      	cmp	r3, r5
 8014d74:	dc28      	bgt.n	8014dc8 <_printf_common+0xa4>
 8014d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014d7a:	6822      	ldr	r2, [r4, #0]
 8014d7c:	3300      	adds	r3, #0
 8014d7e:	bf18      	it	ne
 8014d80:	2301      	movne	r3, #1
 8014d82:	0692      	lsls	r2, r2, #26
 8014d84:	d42d      	bmi.n	8014de2 <_printf_common+0xbe>
 8014d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014d8a:	4639      	mov	r1, r7
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	47c0      	blx	r8
 8014d90:	3001      	adds	r0, #1
 8014d92:	d020      	beq.n	8014dd6 <_printf_common+0xb2>
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	68e5      	ldr	r5, [r4, #12]
 8014d98:	f8d9 2000 	ldr.w	r2, [r9]
 8014d9c:	f003 0306 	and.w	r3, r3, #6
 8014da0:	2b04      	cmp	r3, #4
 8014da2:	bf08      	it	eq
 8014da4:	1aad      	subeq	r5, r5, r2
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	6922      	ldr	r2, [r4, #16]
 8014daa:	bf0c      	ite	eq
 8014dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014db0:	2500      	movne	r5, #0
 8014db2:	4293      	cmp	r3, r2
 8014db4:	bfc4      	itt	gt
 8014db6:	1a9b      	subgt	r3, r3, r2
 8014db8:	18ed      	addgt	r5, r5, r3
 8014dba:	f04f 0900 	mov.w	r9, #0
 8014dbe:	341a      	adds	r4, #26
 8014dc0:	454d      	cmp	r5, r9
 8014dc2:	d11a      	bne.n	8014dfa <_printf_common+0xd6>
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	e008      	b.n	8014dda <_printf_common+0xb6>
 8014dc8:	2301      	movs	r3, #1
 8014dca:	4652      	mov	r2, sl
 8014dcc:	4639      	mov	r1, r7
 8014dce:	4630      	mov	r0, r6
 8014dd0:	47c0      	blx	r8
 8014dd2:	3001      	adds	r0, #1
 8014dd4:	d103      	bne.n	8014dde <_printf_common+0xba>
 8014dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8014dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dde:	3501      	adds	r5, #1
 8014de0:	e7c3      	b.n	8014d6a <_printf_common+0x46>
 8014de2:	18e1      	adds	r1, r4, r3
 8014de4:	1c5a      	adds	r2, r3, #1
 8014de6:	2030      	movs	r0, #48	; 0x30
 8014de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014dec:	4422      	add	r2, r4
 8014dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014df6:	3302      	adds	r3, #2
 8014df8:	e7c5      	b.n	8014d86 <_printf_common+0x62>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	4622      	mov	r2, r4
 8014dfe:	4639      	mov	r1, r7
 8014e00:	4630      	mov	r0, r6
 8014e02:	47c0      	blx	r8
 8014e04:	3001      	adds	r0, #1
 8014e06:	d0e6      	beq.n	8014dd6 <_printf_common+0xb2>
 8014e08:	f109 0901 	add.w	r9, r9, #1
 8014e0c:	e7d8      	b.n	8014dc0 <_printf_common+0x9c>
	...

08014e10 <_printf_i>:
 8014e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014e18:	460c      	mov	r4, r1
 8014e1a:	7e09      	ldrb	r1, [r1, #24]
 8014e1c:	b085      	sub	sp, #20
 8014e1e:	296e      	cmp	r1, #110	; 0x6e
 8014e20:	4617      	mov	r7, r2
 8014e22:	4606      	mov	r6, r0
 8014e24:	4698      	mov	r8, r3
 8014e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e28:	f000 80b3 	beq.w	8014f92 <_printf_i+0x182>
 8014e2c:	d822      	bhi.n	8014e74 <_printf_i+0x64>
 8014e2e:	2963      	cmp	r1, #99	; 0x63
 8014e30:	d036      	beq.n	8014ea0 <_printf_i+0x90>
 8014e32:	d80a      	bhi.n	8014e4a <_printf_i+0x3a>
 8014e34:	2900      	cmp	r1, #0
 8014e36:	f000 80b9 	beq.w	8014fac <_printf_i+0x19c>
 8014e3a:	2958      	cmp	r1, #88	; 0x58
 8014e3c:	f000 8083 	beq.w	8014f46 <_printf_i+0x136>
 8014e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014e48:	e032      	b.n	8014eb0 <_printf_i+0xa0>
 8014e4a:	2964      	cmp	r1, #100	; 0x64
 8014e4c:	d001      	beq.n	8014e52 <_printf_i+0x42>
 8014e4e:	2969      	cmp	r1, #105	; 0x69
 8014e50:	d1f6      	bne.n	8014e40 <_printf_i+0x30>
 8014e52:	6820      	ldr	r0, [r4, #0]
 8014e54:	6813      	ldr	r3, [r2, #0]
 8014e56:	0605      	lsls	r5, r0, #24
 8014e58:	f103 0104 	add.w	r1, r3, #4
 8014e5c:	d52a      	bpl.n	8014eb4 <_printf_i+0xa4>
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	6011      	str	r1, [r2, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	da03      	bge.n	8014e6e <_printf_i+0x5e>
 8014e66:	222d      	movs	r2, #45	; 0x2d
 8014e68:	425b      	negs	r3, r3
 8014e6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014e6e:	486f      	ldr	r0, [pc, #444]	; (801502c <_printf_i+0x21c>)
 8014e70:	220a      	movs	r2, #10
 8014e72:	e039      	b.n	8014ee8 <_printf_i+0xd8>
 8014e74:	2973      	cmp	r1, #115	; 0x73
 8014e76:	f000 809d 	beq.w	8014fb4 <_printf_i+0x1a4>
 8014e7a:	d808      	bhi.n	8014e8e <_printf_i+0x7e>
 8014e7c:	296f      	cmp	r1, #111	; 0x6f
 8014e7e:	d020      	beq.n	8014ec2 <_printf_i+0xb2>
 8014e80:	2970      	cmp	r1, #112	; 0x70
 8014e82:	d1dd      	bne.n	8014e40 <_printf_i+0x30>
 8014e84:	6823      	ldr	r3, [r4, #0]
 8014e86:	f043 0320 	orr.w	r3, r3, #32
 8014e8a:	6023      	str	r3, [r4, #0]
 8014e8c:	e003      	b.n	8014e96 <_printf_i+0x86>
 8014e8e:	2975      	cmp	r1, #117	; 0x75
 8014e90:	d017      	beq.n	8014ec2 <_printf_i+0xb2>
 8014e92:	2978      	cmp	r1, #120	; 0x78
 8014e94:	d1d4      	bne.n	8014e40 <_printf_i+0x30>
 8014e96:	2378      	movs	r3, #120	; 0x78
 8014e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e9c:	4864      	ldr	r0, [pc, #400]	; (8015030 <_printf_i+0x220>)
 8014e9e:	e055      	b.n	8014f4c <_printf_i+0x13c>
 8014ea0:	6813      	ldr	r3, [r2, #0]
 8014ea2:	1d19      	adds	r1, r3, #4
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	6011      	str	r1, [r2, #0]
 8014ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	e08c      	b.n	8014fce <_printf_i+0x1be>
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	6011      	str	r1, [r2, #0]
 8014eb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ebc:	bf18      	it	ne
 8014ebe:	b21b      	sxthne	r3, r3
 8014ec0:	e7cf      	b.n	8014e62 <_printf_i+0x52>
 8014ec2:	6813      	ldr	r3, [r2, #0]
 8014ec4:	6825      	ldr	r5, [r4, #0]
 8014ec6:	1d18      	adds	r0, r3, #4
 8014ec8:	6010      	str	r0, [r2, #0]
 8014eca:	0628      	lsls	r0, r5, #24
 8014ecc:	d501      	bpl.n	8014ed2 <_printf_i+0xc2>
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	e002      	b.n	8014ed8 <_printf_i+0xc8>
 8014ed2:	0668      	lsls	r0, r5, #25
 8014ed4:	d5fb      	bpl.n	8014ece <_printf_i+0xbe>
 8014ed6:	881b      	ldrh	r3, [r3, #0]
 8014ed8:	4854      	ldr	r0, [pc, #336]	; (801502c <_printf_i+0x21c>)
 8014eda:	296f      	cmp	r1, #111	; 0x6f
 8014edc:	bf14      	ite	ne
 8014ede:	220a      	movne	r2, #10
 8014ee0:	2208      	moveq	r2, #8
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ee8:	6865      	ldr	r5, [r4, #4]
 8014eea:	60a5      	str	r5, [r4, #8]
 8014eec:	2d00      	cmp	r5, #0
 8014eee:	f2c0 8095 	blt.w	801501c <_printf_i+0x20c>
 8014ef2:	6821      	ldr	r1, [r4, #0]
 8014ef4:	f021 0104 	bic.w	r1, r1, #4
 8014ef8:	6021      	str	r1, [r4, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d13d      	bne.n	8014f7a <_printf_i+0x16a>
 8014efe:	2d00      	cmp	r5, #0
 8014f00:	f040 808e 	bne.w	8015020 <_printf_i+0x210>
 8014f04:	4665      	mov	r5, ip
 8014f06:	2a08      	cmp	r2, #8
 8014f08:	d10b      	bne.n	8014f22 <_printf_i+0x112>
 8014f0a:	6823      	ldr	r3, [r4, #0]
 8014f0c:	07db      	lsls	r3, r3, #31
 8014f0e:	d508      	bpl.n	8014f22 <_printf_i+0x112>
 8014f10:	6923      	ldr	r3, [r4, #16]
 8014f12:	6862      	ldr	r2, [r4, #4]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	bfde      	ittt	le
 8014f18:	2330      	movle	r3, #48	; 0x30
 8014f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014f22:	ebac 0305 	sub.w	r3, ip, r5
 8014f26:	6123      	str	r3, [r4, #16]
 8014f28:	f8cd 8000 	str.w	r8, [sp]
 8014f2c:	463b      	mov	r3, r7
 8014f2e:	aa03      	add	r2, sp, #12
 8014f30:	4621      	mov	r1, r4
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7ff fef6 	bl	8014d24 <_printf_common>
 8014f38:	3001      	adds	r0, #1
 8014f3a:	d14d      	bne.n	8014fd8 <_printf_i+0x1c8>
 8014f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f40:	b005      	add	sp, #20
 8014f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f46:	4839      	ldr	r0, [pc, #228]	; (801502c <_printf_i+0x21c>)
 8014f48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014f4c:	6813      	ldr	r3, [r2, #0]
 8014f4e:	6821      	ldr	r1, [r4, #0]
 8014f50:	1d1d      	adds	r5, r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	6015      	str	r5, [r2, #0]
 8014f56:	060a      	lsls	r2, r1, #24
 8014f58:	d50b      	bpl.n	8014f72 <_printf_i+0x162>
 8014f5a:	07ca      	lsls	r2, r1, #31
 8014f5c:	bf44      	itt	mi
 8014f5e:	f041 0120 	orrmi.w	r1, r1, #32
 8014f62:	6021      	strmi	r1, [r4, #0]
 8014f64:	b91b      	cbnz	r3, 8014f6e <_printf_i+0x15e>
 8014f66:	6822      	ldr	r2, [r4, #0]
 8014f68:	f022 0220 	bic.w	r2, r2, #32
 8014f6c:	6022      	str	r2, [r4, #0]
 8014f6e:	2210      	movs	r2, #16
 8014f70:	e7b7      	b.n	8014ee2 <_printf_i+0xd2>
 8014f72:	064d      	lsls	r5, r1, #25
 8014f74:	bf48      	it	mi
 8014f76:	b29b      	uxthmi	r3, r3
 8014f78:	e7ef      	b.n	8014f5a <_printf_i+0x14a>
 8014f7a:	4665      	mov	r5, ip
 8014f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f80:	fb02 3311 	mls	r3, r2, r1, r3
 8014f84:	5cc3      	ldrb	r3, [r0, r3]
 8014f86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	2900      	cmp	r1, #0
 8014f8e:	d1f5      	bne.n	8014f7c <_printf_i+0x16c>
 8014f90:	e7b9      	b.n	8014f06 <_printf_i+0xf6>
 8014f92:	6813      	ldr	r3, [r2, #0]
 8014f94:	6825      	ldr	r5, [r4, #0]
 8014f96:	6961      	ldr	r1, [r4, #20]
 8014f98:	1d18      	adds	r0, r3, #4
 8014f9a:	6010      	str	r0, [r2, #0]
 8014f9c:	0628      	lsls	r0, r5, #24
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	d501      	bpl.n	8014fa6 <_printf_i+0x196>
 8014fa2:	6019      	str	r1, [r3, #0]
 8014fa4:	e002      	b.n	8014fac <_printf_i+0x19c>
 8014fa6:	066a      	lsls	r2, r5, #25
 8014fa8:	d5fb      	bpl.n	8014fa2 <_printf_i+0x192>
 8014faa:	8019      	strh	r1, [r3, #0]
 8014fac:	2300      	movs	r3, #0
 8014fae:	6123      	str	r3, [r4, #16]
 8014fb0:	4665      	mov	r5, ip
 8014fb2:	e7b9      	b.n	8014f28 <_printf_i+0x118>
 8014fb4:	6813      	ldr	r3, [r2, #0]
 8014fb6:	1d19      	adds	r1, r3, #4
 8014fb8:	6011      	str	r1, [r2, #0]
 8014fba:	681d      	ldr	r5, [r3, #0]
 8014fbc:	6862      	ldr	r2, [r4, #4]
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	4628      	mov	r0, r5
 8014fc2:	f7eb f925 	bl	8000210 <memchr>
 8014fc6:	b108      	cbz	r0, 8014fcc <_printf_i+0x1bc>
 8014fc8:	1b40      	subs	r0, r0, r5
 8014fca:	6060      	str	r0, [r4, #4]
 8014fcc:	6863      	ldr	r3, [r4, #4]
 8014fce:	6123      	str	r3, [r4, #16]
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fd6:	e7a7      	b.n	8014f28 <_printf_i+0x118>
 8014fd8:	6923      	ldr	r3, [r4, #16]
 8014fda:	462a      	mov	r2, r5
 8014fdc:	4639      	mov	r1, r7
 8014fde:	4630      	mov	r0, r6
 8014fe0:	47c0      	blx	r8
 8014fe2:	3001      	adds	r0, #1
 8014fe4:	d0aa      	beq.n	8014f3c <_printf_i+0x12c>
 8014fe6:	6823      	ldr	r3, [r4, #0]
 8014fe8:	079b      	lsls	r3, r3, #30
 8014fea:	d413      	bmi.n	8015014 <_printf_i+0x204>
 8014fec:	68e0      	ldr	r0, [r4, #12]
 8014fee:	9b03      	ldr	r3, [sp, #12]
 8014ff0:	4298      	cmp	r0, r3
 8014ff2:	bfb8      	it	lt
 8014ff4:	4618      	movlt	r0, r3
 8014ff6:	e7a3      	b.n	8014f40 <_printf_i+0x130>
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	464a      	mov	r2, r9
 8014ffc:	4639      	mov	r1, r7
 8014ffe:	4630      	mov	r0, r6
 8015000:	47c0      	blx	r8
 8015002:	3001      	adds	r0, #1
 8015004:	d09a      	beq.n	8014f3c <_printf_i+0x12c>
 8015006:	3501      	adds	r5, #1
 8015008:	68e3      	ldr	r3, [r4, #12]
 801500a:	9a03      	ldr	r2, [sp, #12]
 801500c:	1a9b      	subs	r3, r3, r2
 801500e:	42ab      	cmp	r3, r5
 8015010:	dcf2      	bgt.n	8014ff8 <_printf_i+0x1e8>
 8015012:	e7eb      	b.n	8014fec <_printf_i+0x1dc>
 8015014:	2500      	movs	r5, #0
 8015016:	f104 0919 	add.w	r9, r4, #25
 801501a:	e7f5      	b.n	8015008 <_printf_i+0x1f8>
 801501c:	2b00      	cmp	r3, #0
 801501e:	d1ac      	bne.n	8014f7a <_printf_i+0x16a>
 8015020:	7803      	ldrb	r3, [r0, #0]
 8015022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015026:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801502a:	e76c      	b.n	8014f06 <_printf_i+0xf6>
 801502c:	0801903c 	.word	0x0801903c
 8015030:	0801904d 	.word	0x0801904d

08015034 <_scanf_float>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	469a      	mov	sl, r3
 801503a:	688b      	ldr	r3, [r1, #8]
 801503c:	4616      	mov	r6, r2
 801503e:	1e5a      	subs	r2, r3, #1
 8015040:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015044:	b087      	sub	sp, #28
 8015046:	bf83      	ittte	hi
 8015048:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801504c:	189b      	addhi	r3, r3, r2
 801504e:	9301      	strhi	r3, [sp, #4]
 8015050:	2300      	movls	r3, #0
 8015052:	bf86      	itte	hi
 8015054:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015058:	608b      	strhi	r3, [r1, #8]
 801505a:	9301      	strls	r3, [sp, #4]
 801505c:	680b      	ldr	r3, [r1, #0]
 801505e:	4688      	mov	r8, r1
 8015060:	f04f 0b00 	mov.w	fp, #0
 8015064:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015068:	f848 3b1c 	str.w	r3, [r8], #28
 801506c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015070:	4607      	mov	r7, r0
 8015072:	460c      	mov	r4, r1
 8015074:	4645      	mov	r5, r8
 8015076:	465a      	mov	r2, fp
 8015078:	46d9      	mov	r9, fp
 801507a:	f8cd b008 	str.w	fp, [sp, #8]
 801507e:	68a1      	ldr	r1, [r4, #8]
 8015080:	b181      	cbz	r1, 80150a4 <_scanf_float+0x70>
 8015082:	6833      	ldr	r3, [r6, #0]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	2b49      	cmp	r3, #73	; 0x49
 8015088:	d071      	beq.n	801516e <_scanf_float+0x13a>
 801508a:	d84d      	bhi.n	8015128 <_scanf_float+0xf4>
 801508c:	2b39      	cmp	r3, #57	; 0x39
 801508e:	d840      	bhi.n	8015112 <_scanf_float+0xde>
 8015090:	2b31      	cmp	r3, #49	; 0x31
 8015092:	f080 8088 	bcs.w	80151a6 <_scanf_float+0x172>
 8015096:	2b2d      	cmp	r3, #45	; 0x2d
 8015098:	f000 8090 	beq.w	80151bc <_scanf_float+0x188>
 801509c:	d815      	bhi.n	80150ca <_scanf_float+0x96>
 801509e:	2b2b      	cmp	r3, #43	; 0x2b
 80150a0:	f000 808c 	beq.w	80151bc <_scanf_float+0x188>
 80150a4:	f1b9 0f00 	cmp.w	r9, #0
 80150a8:	d003      	beq.n	80150b2 <_scanf_float+0x7e>
 80150aa:	6823      	ldr	r3, [r4, #0]
 80150ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80150b0:	6023      	str	r3, [r4, #0]
 80150b2:	3a01      	subs	r2, #1
 80150b4:	2a01      	cmp	r2, #1
 80150b6:	f200 80ea 	bhi.w	801528e <_scanf_float+0x25a>
 80150ba:	4545      	cmp	r5, r8
 80150bc:	f200 80dc 	bhi.w	8015278 <_scanf_float+0x244>
 80150c0:	2601      	movs	r6, #1
 80150c2:	4630      	mov	r0, r6
 80150c4:	b007      	add	sp, #28
 80150c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ca:	2b2e      	cmp	r3, #46	; 0x2e
 80150cc:	f000 809f 	beq.w	801520e <_scanf_float+0x1da>
 80150d0:	2b30      	cmp	r3, #48	; 0x30
 80150d2:	d1e7      	bne.n	80150a4 <_scanf_float+0x70>
 80150d4:	6820      	ldr	r0, [r4, #0]
 80150d6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80150da:	d064      	beq.n	80151a6 <_scanf_float+0x172>
 80150dc:	9b01      	ldr	r3, [sp, #4]
 80150de:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80150e2:	6020      	str	r0, [r4, #0]
 80150e4:	f109 0901 	add.w	r9, r9, #1
 80150e8:	b11b      	cbz	r3, 80150f2 <_scanf_float+0xbe>
 80150ea:	3b01      	subs	r3, #1
 80150ec:	3101      	adds	r1, #1
 80150ee:	9301      	str	r3, [sp, #4]
 80150f0:	60a1      	str	r1, [r4, #8]
 80150f2:	68a3      	ldr	r3, [r4, #8]
 80150f4:	3b01      	subs	r3, #1
 80150f6:	60a3      	str	r3, [r4, #8]
 80150f8:	6923      	ldr	r3, [r4, #16]
 80150fa:	3301      	adds	r3, #1
 80150fc:	6123      	str	r3, [r4, #16]
 80150fe:	6873      	ldr	r3, [r6, #4]
 8015100:	3b01      	subs	r3, #1
 8015102:	2b00      	cmp	r3, #0
 8015104:	6073      	str	r3, [r6, #4]
 8015106:	f340 80ac 	ble.w	8015262 <_scanf_float+0x22e>
 801510a:	6833      	ldr	r3, [r6, #0]
 801510c:	3301      	adds	r3, #1
 801510e:	6033      	str	r3, [r6, #0]
 8015110:	e7b5      	b.n	801507e <_scanf_float+0x4a>
 8015112:	2b45      	cmp	r3, #69	; 0x45
 8015114:	f000 8085 	beq.w	8015222 <_scanf_float+0x1ee>
 8015118:	2b46      	cmp	r3, #70	; 0x46
 801511a:	d06a      	beq.n	80151f2 <_scanf_float+0x1be>
 801511c:	2b41      	cmp	r3, #65	; 0x41
 801511e:	d1c1      	bne.n	80150a4 <_scanf_float+0x70>
 8015120:	2a01      	cmp	r2, #1
 8015122:	d1bf      	bne.n	80150a4 <_scanf_float+0x70>
 8015124:	2202      	movs	r2, #2
 8015126:	e046      	b.n	80151b6 <_scanf_float+0x182>
 8015128:	2b65      	cmp	r3, #101	; 0x65
 801512a:	d07a      	beq.n	8015222 <_scanf_float+0x1ee>
 801512c:	d818      	bhi.n	8015160 <_scanf_float+0x12c>
 801512e:	2b54      	cmp	r3, #84	; 0x54
 8015130:	d066      	beq.n	8015200 <_scanf_float+0x1cc>
 8015132:	d811      	bhi.n	8015158 <_scanf_float+0x124>
 8015134:	2b4e      	cmp	r3, #78	; 0x4e
 8015136:	d1b5      	bne.n	80150a4 <_scanf_float+0x70>
 8015138:	2a00      	cmp	r2, #0
 801513a:	d146      	bne.n	80151ca <_scanf_float+0x196>
 801513c:	f1b9 0f00 	cmp.w	r9, #0
 8015140:	d145      	bne.n	80151ce <_scanf_float+0x19a>
 8015142:	6821      	ldr	r1, [r4, #0]
 8015144:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015148:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801514c:	d13f      	bne.n	80151ce <_scanf_float+0x19a>
 801514e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015152:	6021      	str	r1, [r4, #0]
 8015154:	2201      	movs	r2, #1
 8015156:	e02e      	b.n	80151b6 <_scanf_float+0x182>
 8015158:	2b59      	cmp	r3, #89	; 0x59
 801515a:	d01e      	beq.n	801519a <_scanf_float+0x166>
 801515c:	2b61      	cmp	r3, #97	; 0x61
 801515e:	e7de      	b.n	801511e <_scanf_float+0xea>
 8015160:	2b6e      	cmp	r3, #110	; 0x6e
 8015162:	d0e9      	beq.n	8015138 <_scanf_float+0x104>
 8015164:	d815      	bhi.n	8015192 <_scanf_float+0x15e>
 8015166:	2b66      	cmp	r3, #102	; 0x66
 8015168:	d043      	beq.n	80151f2 <_scanf_float+0x1be>
 801516a:	2b69      	cmp	r3, #105	; 0x69
 801516c:	d19a      	bne.n	80150a4 <_scanf_float+0x70>
 801516e:	f1bb 0f00 	cmp.w	fp, #0
 8015172:	d138      	bne.n	80151e6 <_scanf_float+0x1b2>
 8015174:	f1b9 0f00 	cmp.w	r9, #0
 8015178:	d197      	bne.n	80150aa <_scanf_float+0x76>
 801517a:	6821      	ldr	r1, [r4, #0]
 801517c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015180:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015184:	d195      	bne.n	80150b2 <_scanf_float+0x7e>
 8015186:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801518a:	6021      	str	r1, [r4, #0]
 801518c:	f04f 0b01 	mov.w	fp, #1
 8015190:	e011      	b.n	80151b6 <_scanf_float+0x182>
 8015192:	2b74      	cmp	r3, #116	; 0x74
 8015194:	d034      	beq.n	8015200 <_scanf_float+0x1cc>
 8015196:	2b79      	cmp	r3, #121	; 0x79
 8015198:	d184      	bne.n	80150a4 <_scanf_float+0x70>
 801519a:	f1bb 0f07 	cmp.w	fp, #7
 801519e:	d181      	bne.n	80150a4 <_scanf_float+0x70>
 80151a0:	f04f 0b08 	mov.w	fp, #8
 80151a4:	e007      	b.n	80151b6 <_scanf_float+0x182>
 80151a6:	eb12 0f0b 	cmn.w	r2, fp
 80151aa:	f47f af7b 	bne.w	80150a4 <_scanf_float+0x70>
 80151ae:	6821      	ldr	r1, [r4, #0]
 80151b0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80151b4:	6021      	str	r1, [r4, #0]
 80151b6:	702b      	strb	r3, [r5, #0]
 80151b8:	3501      	adds	r5, #1
 80151ba:	e79a      	b.n	80150f2 <_scanf_float+0xbe>
 80151bc:	6821      	ldr	r1, [r4, #0]
 80151be:	0608      	lsls	r0, r1, #24
 80151c0:	f57f af70 	bpl.w	80150a4 <_scanf_float+0x70>
 80151c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80151c8:	e7f4      	b.n	80151b4 <_scanf_float+0x180>
 80151ca:	2a02      	cmp	r2, #2
 80151cc:	d047      	beq.n	801525e <_scanf_float+0x22a>
 80151ce:	f1bb 0f01 	cmp.w	fp, #1
 80151d2:	d003      	beq.n	80151dc <_scanf_float+0x1a8>
 80151d4:	f1bb 0f04 	cmp.w	fp, #4
 80151d8:	f47f af64 	bne.w	80150a4 <_scanf_float+0x70>
 80151dc:	f10b 0b01 	add.w	fp, fp, #1
 80151e0:	fa5f fb8b 	uxtb.w	fp, fp
 80151e4:	e7e7      	b.n	80151b6 <_scanf_float+0x182>
 80151e6:	f1bb 0f03 	cmp.w	fp, #3
 80151ea:	d0f7      	beq.n	80151dc <_scanf_float+0x1a8>
 80151ec:	f1bb 0f05 	cmp.w	fp, #5
 80151f0:	e7f2      	b.n	80151d8 <_scanf_float+0x1a4>
 80151f2:	f1bb 0f02 	cmp.w	fp, #2
 80151f6:	f47f af55 	bne.w	80150a4 <_scanf_float+0x70>
 80151fa:	f04f 0b03 	mov.w	fp, #3
 80151fe:	e7da      	b.n	80151b6 <_scanf_float+0x182>
 8015200:	f1bb 0f06 	cmp.w	fp, #6
 8015204:	f47f af4e 	bne.w	80150a4 <_scanf_float+0x70>
 8015208:	f04f 0b07 	mov.w	fp, #7
 801520c:	e7d3      	b.n	80151b6 <_scanf_float+0x182>
 801520e:	6821      	ldr	r1, [r4, #0]
 8015210:	0588      	lsls	r0, r1, #22
 8015212:	f57f af47 	bpl.w	80150a4 <_scanf_float+0x70>
 8015216:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801521a:	6021      	str	r1, [r4, #0]
 801521c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015220:	e7c9      	b.n	80151b6 <_scanf_float+0x182>
 8015222:	6821      	ldr	r1, [r4, #0]
 8015224:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015228:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801522c:	d006      	beq.n	801523c <_scanf_float+0x208>
 801522e:	0548      	lsls	r0, r1, #21
 8015230:	f57f af38 	bpl.w	80150a4 <_scanf_float+0x70>
 8015234:	f1b9 0f00 	cmp.w	r9, #0
 8015238:	f43f af3b 	beq.w	80150b2 <_scanf_float+0x7e>
 801523c:	0588      	lsls	r0, r1, #22
 801523e:	bf58      	it	pl
 8015240:	9802      	ldrpl	r0, [sp, #8]
 8015242:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015246:	bf58      	it	pl
 8015248:	eba9 0000 	subpl.w	r0, r9, r0
 801524c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015250:	bf58      	it	pl
 8015252:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015256:	6021      	str	r1, [r4, #0]
 8015258:	f04f 0900 	mov.w	r9, #0
 801525c:	e7ab      	b.n	80151b6 <_scanf_float+0x182>
 801525e:	2203      	movs	r2, #3
 8015260:	e7a9      	b.n	80151b6 <_scanf_float+0x182>
 8015262:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015266:	9205      	str	r2, [sp, #20]
 8015268:	4631      	mov	r1, r6
 801526a:	4638      	mov	r0, r7
 801526c:	4798      	blx	r3
 801526e:	9a05      	ldr	r2, [sp, #20]
 8015270:	2800      	cmp	r0, #0
 8015272:	f43f af04 	beq.w	801507e <_scanf_float+0x4a>
 8015276:	e715      	b.n	80150a4 <_scanf_float+0x70>
 8015278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801527c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015280:	4632      	mov	r2, r6
 8015282:	4638      	mov	r0, r7
 8015284:	4798      	blx	r3
 8015286:	6923      	ldr	r3, [r4, #16]
 8015288:	3b01      	subs	r3, #1
 801528a:	6123      	str	r3, [r4, #16]
 801528c:	e715      	b.n	80150ba <_scanf_float+0x86>
 801528e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015292:	2b06      	cmp	r3, #6
 8015294:	d80a      	bhi.n	80152ac <_scanf_float+0x278>
 8015296:	f1bb 0f02 	cmp.w	fp, #2
 801529a:	d968      	bls.n	801536e <_scanf_float+0x33a>
 801529c:	f1ab 0b03 	sub.w	fp, fp, #3
 80152a0:	fa5f fb8b 	uxtb.w	fp, fp
 80152a4:	eba5 0b0b 	sub.w	fp, r5, fp
 80152a8:	455d      	cmp	r5, fp
 80152aa:	d14b      	bne.n	8015344 <_scanf_float+0x310>
 80152ac:	6823      	ldr	r3, [r4, #0]
 80152ae:	05da      	lsls	r2, r3, #23
 80152b0:	d51f      	bpl.n	80152f2 <_scanf_float+0x2be>
 80152b2:	055b      	lsls	r3, r3, #21
 80152b4:	d468      	bmi.n	8015388 <_scanf_float+0x354>
 80152b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80152ba:	6923      	ldr	r3, [r4, #16]
 80152bc:	2965      	cmp	r1, #101	; 0x65
 80152be:	f103 33ff 	add.w	r3, r3, #4294967295
 80152c2:	f105 3bff 	add.w	fp, r5, #4294967295
 80152c6:	6123      	str	r3, [r4, #16]
 80152c8:	d00d      	beq.n	80152e6 <_scanf_float+0x2b2>
 80152ca:	2945      	cmp	r1, #69	; 0x45
 80152cc:	d00b      	beq.n	80152e6 <_scanf_float+0x2b2>
 80152ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80152d2:	4632      	mov	r2, r6
 80152d4:	4638      	mov	r0, r7
 80152d6:	4798      	blx	r3
 80152d8:	6923      	ldr	r3, [r4, #16]
 80152da:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80152de:	3b01      	subs	r3, #1
 80152e0:	f1a5 0b02 	sub.w	fp, r5, #2
 80152e4:	6123      	str	r3, [r4, #16]
 80152e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80152ea:	4632      	mov	r2, r6
 80152ec:	4638      	mov	r0, r7
 80152ee:	4798      	blx	r3
 80152f0:	465d      	mov	r5, fp
 80152f2:	6826      	ldr	r6, [r4, #0]
 80152f4:	f016 0610 	ands.w	r6, r6, #16
 80152f8:	d17a      	bne.n	80153f0 <_scanf_float+0x3bc>
 80152fa:	702e      	strb	r6, [r5, #0]
 80152fc:	6823      	ldr	r3, [r4, #0]
 80152fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015306:	d142      	bne.n	801538e <_scanf_float+0x35a>
 8015308:	9b02      	ldr	r3, [sp, #8]
 801530a:	eba9 0303 	sub.w	r3, r9, r3
 801530e:	425a      	negs	r2, r3
 8015310:	2b00      	cmp	r3, #0
 8015312:	d149      	bne.n	80153a8 <_scanf_float+0x374>
 8015314:	2200      	movs	r2, #0
 8015316:	4641      	mov	r1, r8
 8015318:	4638      	mov	r0, r7
 801531a:	f000 ff0d 	bl	8016138 <_strtod_r>
 801531e:	6825      	ldr	r5, [r4, #0]
 8015320:	f8da 3000 	ldr.w	r3, [sl]
 8015324:	f015 0f02 	tst.w	r5, #2
 8015328:	f103 0204 	add.w	r2, r3, #4
 801532c:	ec59 8b10 	vmov	r8, r9, d0
 8015330:	f8ca 2000 	str.w	r2, [sl]
 8015334:	d043      	beq.n	80153be <_scanf_float+0x38a>
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	e9c3 8900 	strd	r8, r9, [r3]
 801533c:	68e3      	ldr	r3, [r4, #12]
 801533e:	3301      	adds	r3, #1
 8015340:	60e3      	str	r3, [r4, #12]
 8015342:	e6be      	b.n	80150c2 <_scanf_float+0x8e>
 8015344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801534c:	4632      	mov	r2, r6
 801534e:	4638      	mov	r0, r7
 8015350:	4798      	blx	r3
 8015352:	6923      	ldr	r3, [r4, #16]
 8015354:	3b01      	subs	r3, #1
 8015356:	6123      	str	r3, [r4, #16]
 8015358:	e7a6      	b.n	80152a8 <_scanf_float+0x274>
 801535a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801535e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015362:	4632      	mov	r2, r6
 8015364:	4638      	mov	r0, r7
 8015366:	4798      	blx	r3
 8015368:	6923      	ldr	r3, [r4, #16]
 801536a:	3b01      	subs	r3, #1
 801536c:	6123      	str	r3, [r4, #16]
 801536e:	4545      	cmp	r5, r8
 8015370:	d8f3      	bhi.n	801535a <_scanf_float+0x326>
 8015372:	e6a5      	b.n	80150c0 <_scanf_float+0x8c>
 8015374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015378:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801537c:	4632      	mov	r2, r6
 801537e:	4638      	mov	r0, r7
 8015380:	4798      	blx	r3
 8015382:	6923      	ldr	r3, [r4, #16]
 8015384:	3b01      	subs	r3, #1
 8015386:	6123      	str	r3, [r4, #16]
 8015388:	4545      	cmp	r5, r8
 801538a:	d8f3      	bhi.n	8015374 <_scanf_float+0x340>
 801538c:	e698      	b.n	80150c0 <_scanf_float+0x8c>
 801538e:	9b03      	ldr	r3, [sp, #12]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d0bf      	beq.n	8015314 <_scanf_float+0x2e0>
 8015394:	9904      	ldr	r1, [sp, #16]
 8015396:	230a      	movs	r3, #10
 8015398:	4632      	mov	r2, r6
 801539a:	3101      	adds	r1, #1
 801539c:	4638      	mov	r0, r7
 801539e:	f000 ff57 	bl	8016250 <_strtol_r>
 80153a2:	9b03      	ldr	r3, [sp, #12]
 80153a4:	9d04      	ldr	r5, [sp, #16]
 80153a6:	1ac2      	subs	r2, r0, r3
 80153a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80153ac:	429d      	cmp	r5, r3
 80153ae:	bf28      	it	cs
 80153b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80153b4:	490f      	ldr	r1, [pc, #60]	; (80153f4 <_scanf_float+0x3c0>)
 80153b6:	4628      	mov	r0, r5
 80153b8:	f000 f858 	bl	801546c <siprintf>
 80153bc:	e7aa      	b.n	8015314 <_scanf_float+0x2e0>
 80153be:	f015 0504 	ands.w	r5, r5, #4
 80153c2:	d1b8      	bne.n	8015336 <_scanf_float+0x302>
 80153c4:	681f      	ldr	r7, [r3, #0]
 80153c6:	ee10 2a10 	vmov	r2, s0
 80153ca:	464b      	mov	r3, r9
 80153cc:	ee10 0a10 	vmov	r0, s0
 80153d0:	4649      	mov	r1, r9
 80153d2:	f7eb fbc3 	bl	8000b5c <__aeabi_dcmpun>
 80153d6:	b128      	cbz	r0, 80153e4 <_scanf_float+0x3b0>
 80153d8:	4628      	mov	r0, r5
 80153da:	f000 f80d 	bl	80153f8 <nanf>
 80153de:	ed87 0a00 	vstr	s0, [r7]
 80153e2:	e7ab      	b.n	801533c <_scanf_float+0x308>
 80153e4:	4640      	mov	r0, r8
 80153e6:	4649      	mov	r1, r9
 80153e8:	f7eb fc16 	bl	8000c18 <__aeabi_d2f>
 80153ec:	6038      	str	r0, [r7, #0]
 80153ee:	e7a5      	b.n	801533c <_scanf_float+0x308>
 80153f0:	2600      	movs	r6, #0
 80153f2:	e666      	b.n	80150c2 <_scanf_float+0x8e>
 80153f4:	0801905e 	.word	0x0801905e

080153f8 <nanf>:
 80153f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015400 <nanf+0x8>
 80153fc:	4770      	bx	lr
 80153fe:	bf00      	nop
 8015400:	7fc00000 	.word	0x7fc00000

08015404 <sniprintf>:
 8015404:	b40c      	push	{r2, r3}
 8015406:	b530      	push	{r4, r5, lr}
 8015408:	4b17      	ldr	r3, [pc, #92]	; (8015468 <sniprintf+0x64>)
 801540a:	1e0c      	subs	r4, r1, #0
 801540c:	b09d      	sub	sp, #116	; 0x74
 801540e:	681d      	ldr	r5, [r3, #0]
 8015410:	da08      	bge.n	8015424 <sniprintf+0x20>
 8015412:	238b      	movs	r3, #139	; 0x8b
 8015414:	602b      	str	r3, [r5, #0]
 8015416:	f04f 30ff 	mov.w	r0, #4294967295
 801541a:	b01d      	add	sp, #116	; 0x74
 801541c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015420:	b002      	add	sp, #8
 8015422:	4770      	bx	lr
 8015424:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015428:	f8ad 3014 	strh.w	r3, [sp, #20]
 801542c:	bf14      	ite	ne
 801542e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015432:	4623      	moveq	r3, r4
 8015434:	9304      	str	r3, [sp, #16]
 8015436:	9307      	str	r3, [sp, #28]
 8015438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801543c:	9002      	str	r0, [sp, #8]
 801543e:	9006      	str	r0, [sp, #24]
 8015440:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015444:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015446:	ab21      	add	r3, sp, #132	; 0x84
 8015448:	a902      	add	r1, sp, #8
 801544a:	4628      	mov	r0, r5
 801544c:	9301      	str	r3, [sp, #4]
 801544e:	f002 fdf3 	bl	8018038 <_svfiprintf_r>
 8015452:	1c43      	adds	r3, r0, #1
 8015454:	bfbc      	itt	lt
 8015456:	238b      	movlt	r3, #139	; 0x8b
 8015458:	602b      	strlt	r3, [r5, #0]
 801545a:	2c00      	cmp	r4, #0
 801545c:	d0dd      	beq.n	801541a <sniprintf+0x16>
 801545e:	9b02      	ldr	r3, [sp, #8]
 8015460:	2200      	movs	r2, #0
 8015462:	701a      	strb	r2, [r3, #0]
 8015464:	e7d9      	b.n	801541a <sniprintf+0x16>
 8015466:	bf00      	nop
 8015468:	2000000c 	.word	0x2000000c

0801546c <siprintf>:
 801546c:	b40e      	push	{r1, r2, r3}
 801546e:	b500      	push	{lr}
 8015470:	b09c      	sub	sp, #112	; 0x70
 8015472:	ab1d      	add	r3, sp, #116	; 0x74
 8015474:	9002      	str	r0, [sp, #8]
 8015476:	9006      	str	r0, [sp, #24]
 8015478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801547c:	4809      	ldr	r0, [pc, #36]	; (80154a4 <siprintf+0x38>)
 801547e:	9107      	str	r1, [sp, #28]
 8015480:	9104      	str	r1, [sp, #16]
 8015482:	4909      	ldr	r1, [pc, #36]	; (80154a8 <siprintf+0x3c>)
 8015484:	f853 2b04 	ldr.w	r2, [r3], #4
 8015488:	9105      	str	r1, [sp, #20]
 801548a:	6800      	ldr	r0, [r0, #0]
 801548c:	9301      	str	r3, [sp, #4]
 801548e:	a902      	add	r1, sp, #8
 8015490:	f002 fdd2 	bl	8018038 <_svfiprintf_r>
 8015494:	9b02      	ldr	r3, [sp, #8]
 8015496:	2200      	movs	r2, #0
 8015498:	701a      	strb	r2, [r3, #0]
 801549a:	b01c      	add	sp, #112	; 0x70
 801549c:	f85d eb04 	ldr.w	lr, [sp], #4
 80154a0:	b003      	add	sp, #12
 80154a2:	4770      	bx	lr
 80154a4:	2000000c 	.word	0x2000000c
 80154a8:	ffff0208 	.word	0xffff0208

080154ac <siscanf>:
 80154ac:	b40e      	push	{r1, r2, r3}
 80154ae:	b530      	push	{r4, r5, lr}
 80154b0:	b09c      	sub	sp, #112	; 0x70
 80154b2:	ac1f      	add	r4, sp, #124	; 0x7c
 80154b4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80154b8:	f854 5b04 	ldr.w	r5, [r4], #4
 80154bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80154c0:	9002      	str	r0, [sp, #8]
 80154c2:	9006      	str	r0, [sp, #24]
 80154c4:	f7ea fe9c 	bl	8000200 <strlen>
 80154c8:	4b0b      	ldr	r3, [pc, #44]	; (80154f8 <siscanf+0x4c>)
 80154ca:	9003      	str	r0, [sp, #12]
 80154cc:	9007      	str	r0, [sp, #28]
 80154ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80154d0:	480a      	ldr	r0, [pc, #40]	; (80154fc <siscanf+0x50>)
 80154d2:	9401      	str	r4, [sp, #4]
 80154d4:	2300      	movs	r3, #0
 80154d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80154d8:	9314      	str	r3, [sp, #80]	; 0x50
 80154da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80154e2:	462a      	mov	r2, r5
 80154e4:	4623      	mov	r3, r4
 80154e6:	a902      	add	r1, sp, #8
 80154e8:	6800      	ldr	r0, [r0, #0]
 80154ea:	f002 fef7 	bl	80182dc <__ssvfiscanf_r>
 80154ee:	b01c      	add	sp, #112	; 0x70
 80154f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154f4:	b003      	add	sp, #12
 80154f6:	4770      	bx	lr
 80154f8:	08015501 	.word	0x08015501
 80154fc:	2000000c 	.word	0x2000000c

08015500 <__seofread>:
 8015500:	2000      	movs	r0, #0
 8015502:	4770      	bx	lr

08015504 <strcpy>:
 8015504:	4603      	mov	r3, r0
 8015506:	f811 2b01 	ldrb.w	r2, [r1], #1
 801550a:	f803 2b01 	strb.w	r2, [r3], #1
 801550e:	2a00      	cmp	r2, #0
 8015510:	d1f9      	bne.n	8015506 <strcpy+0x2>
 8015512:	4770      	bx	lr

08015514 <sulp>:
 8015514:	b570      	push	{r4, r5, r6, lr}
 8015516:	4604      	mov	r4, r0
 8015518:	460d      	mov	r5, r1
 801551a:	ec45 4b10 	vmov	d0, r4, r5
 801551e:	4616      	mov	r6, r2
 8015520:	f002 fb46 	bl	8017bb0 <__ulp>
 8015524:	ec51 0b10 	vmov	r0, r1, d0
 8015528:	b17e      	cbz	r6, 801554a <sulp+0x36>
 801552a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801552e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015532:	2b00      	cmp	r3, #0
 8015534:	dd09      	ble.n	801554a <sulp+0x36>
 8015536:	051b      	lsls	r3, r3, #20
 8015538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801553c:	2400      	movs	r4, #0
 801553e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015542:	4622      	mov	r2, r4
 8015544:	462b      	mov	r3, r5
 8015546:	f7eb f86f 	bl	8000628 <__aeabi_dmul>
 801554a:	bd70      	pop	{r4, r5, r6, pc}
 801554c:	0000      	movs	r0, r0
	...

08015550 <_strtod_l>:
 8015550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015554:	461f      	mov	r7, r3
 8015556:	b0a1      	sub	sp, #132	; 0x84
 8015558:	2300      	movs	r3, #0
 801555a:	4681      	mov	r9, r0
 801555c:	4638      	mov	r0, r7
 801555e:	460e      	mov	r6, r1
 8015560:	9217      	str	r2, [sp, #92]	; 0x5c
 8015562:	931c      	str	r3, [sp, #112]	; 0x70
 8015564:	f002 f824 	bl	80175b0 <__localeconv_l>
 8015568:	4680      	mov	r8, r0
 801556a:	6800      	ldr	r0, [r0, #0]
 801556c:	f7ea fe48 	bl	8000200 <strlen>
 8015570:	f04f 0a00 	mov.w	sl, #0
 8015574:	4604      	mov	r4, r0
 8015576:	f04f 0b00 	mov.w	fp, #0
 801557a:	961b      	str	r6, [sp, #108]	; 0x6c
 801557c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801557e:	781a      	ldrb	r2, [r3, #0]
 8015580:	2a0d      	cmp	r2, #13
 8015582:	d832      	bhi.n	80155ea <_strtod_l+0x9a>
 8015584:	2a09      	cmp	r2, #9
 8015586:	d236      	bcs.n	80155f6 <_strtod_l+0xa6>
 8015588:	2a00      	cmp	r2, #0
 801558a:	d03e      	beq.n	801560a <_strtod_l+0xba>
 801558c:	2300      	movs	r3, #0
 801558e:	930d      	str	r3, [sp, #52]	; 0x34
 8015590:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015592:	782b      	ldrb	r3, [r5, #0]
 8015594:	2b30      	cmp	r3, #48	; 0x30
 8015596:	f040 80ac 	bne.w	80156f2 <_strtod_l+0x1a2>
 801559a:	786b      	ldrb	r3, [r5, #1]
 801559c:	2b58      	cmp	r3, #88	; 0x58
 801559e:	d001      	beq.n	80155a4 <_strtod_l+0x54>
 80155a0:	2b78      	cmp	r3, #120	; 0x78
 80155a2:	d167      	bne.n	8015674 <_strtod_l+0x124>
 80155a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155a6:	9301      	str	r3, [sp, #4]
 80155a8:	ab1c      	add	r3, sp, #112	; 0x70
 80155aa:	9300      	str	r3, [sp, #0]
 80155ac:	9702      	str	r7, [sp, #8]
 80155ae:	ab1d      	add	r3, sp, #116	; 0x74
 80155b0:	4a88      	ldr	r2, [pc, #544]	; (80157d4 <_strtod_l+0x284>)
 80155b2:	a91b      	add	r1, sp, #108	; 0x6c
 80155b4:	4648      	mov	r0, r9
 80155b6:	f001 fd12 	bl	8016fde <__gethex>
 80155ba:	f010 0407 	ands.w	r4, r0, #7
 80155be:	4606      	mov	r6, r0
 80155c0:	d005      	beq.n	80155ce <_strtod_l+0x7e>
 80155c2:	2c06      	cmp	r4, #6
 80155c4:	d12b      	bne.n	801561e <_strtod_l+0xce>
 80155c6:	3501      	adds	r5, #1
 80155c8:	2300      	movs	r3, #0
 80155ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80155cc:	930d      	str	r3, [sp, #52]	; 0x34
 80155ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f040 859a 	bne.w	801610a <_strtod_l+0xbba>
 80155d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155d8:	b1e3      	cbz	r3, 8015614 <_strtod_l+0xc4>
 80155da:	4652      	mov	r2, sl
 80155dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80155e0:	ec43 2b10 	vmov	d0, r2, r3
 80155e4:	b021      	add	sp, #132	; 0x84
 80155e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ea:	2a2b      	cmp	r2, #43	; 0x2b
 80155ec:	d015      	beq.n	801561a <_strtod_l+0xca>
 80155ee:	2a2d      	cmp	r2, #45	; 0x2d
 80155f0:	d004      	beq.n	80155fc <_strtod_l+0xac>
 80155f2:	2a20      	cmp	r2, #32
 80155f4:	d1ca      	bne.n	801558c <_strtod_l+0x3c>
 80155f6:	3301      	adds	r3, #1
 80155f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80155fa:	e7bf      	b.n	801557c <_strtod_l+0x2c>
 80155fc:	2201      	movs	r2, #1
 80155fe:	920d      	str	r2, [sp, #52]	; 0x34
 8015600:	1c5a      	adds	r2, r3, #1
 8015602:	921b      	str	r2, [sp, #108]	; 0x6c
 8015604:	785b      	ldrb	r3, [r3, #1]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d1c2      	bne.n	8015590 <_strtod_l+0x40>
 801560a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801560c:	961b      	str	r6, [sp, #108]	; 0x6c
 801560e:	2b00      	cmp	r3, #0
 8015610:	f040 8579 	bne.w	8016106 <_strtod_l+0xbb6>
 8015614:	4652      	mov	r2, sl
 8015616:	465b      	mov	r3, fp
 8015618:	e7e2      	b.n	80155e0 <_strtod_l+0x90>
 801561a:	2200      	movs	r2, #0
 801561c:	e7ef      	b.n	80155fe <_strtod_l+0xae>
 801561e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015620:	b13a      	cbz	r2, 8015632 <_strtod_l+0xe2>
 8015622:	2135      	movs	r1, #53	; 0x35
 8015624:	a81e      	add	r0, sp, #120	; 0x78
 8015626:	f002 fbbb 	bl	8017da0 <__copybits>
 801562a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801562c:	4648      	mov	r0, r9
 801562e:	f002 f828 	bl	8017682 <_Bfree>
 8015632:	3c01      	subs	r4, #1
 8015634:	2c04      	cmp	r4, #4
 8015636:	d806      	bhi.n	8015646 <_strtod_l+0xf6>
 8015638:	e8df f004 	tbb	[pc, r4]
 801563c:	1714030a 	.word	0x1714030a
 8015640:	0a          	.byte	0x0a
 8015641:	00          	.byte	0x00
 8015642:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015646:	0730      	lsls	r0, r6, #28
 8015648:	d5c1      	bpl.n	80155ce <_strtod_l+0x7e>
 801564a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801564e:	e7be      	b.n	80155ce <_strtod_l+0x7e>
 8015650:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015654:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015656:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801565a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801565e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015662:	e7f0      	b.n	8015646 <_strtod_l+0xf6>
 8015664:	f8df b170 	ldr.w	fp, [pc, #368]	; 80157d8 <_strtod_l+0x288>
 8015668:	e7ed      	b.n	8015646 <_strtod_l+0xf6>
 801566a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801566e:	f04f 3aff 	mov.w	sl, #4294967295
 8015672:	e7e8      	b.n	8015646 <_strtod_l+0xf6>
 8015674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015676:	1c5a      	adds	r2, r3, #1
 8015678:	921b      	str	r2, [sp, #108]	; 0x6c
 801567a:	785b      	ldrb	r3, [r3, #1]
 801567c:	2b30      	cmp	r3, #48	; 0x30
 801567e:	d0f9      	beq.n	8015674 <_strtod_l+0x124>
 8015680:	2b00      	cmp	r3, #0
 8015682:	d0a4      	beq.n	80155ce <_strtod_l+0x7e>
 8015684:	2301      	movs	r3, #1
 8015686:	2500      	movs	r5, #0
 8015688:	9306      	str	r3, [sp, #24]
 801568a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801568c:	9308      	str	r3, [sp, #32]
 801568e:	9507      	str	r5, [sp, #28]
 8015690:	9505      	str	r5, [sp, #20]
 8015692:	220a      	movs	r2, #10
 8015694:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015696:	7807      	ldrb	r7, [r0, #0]
 8015698:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801569c:	b2d9      	uxtb	r1, r3
 801569e:	2909      	cmp	r1, #9
 80156a0:	d929      	bls.n	80156f6 <_strtod_l+0x1a6>
 80156a2:	4622      	mov	r2, r4
 80156a4:	f8d8 1000 	ldr.w	r1, [r8]
 80156a8:	f003 f902 	bl	80188b0 <strncmp>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	d031      	beq.n	8015714 <_strtod_l+0x1c4>
 80156b0:	2000      	movs	r0, #0
 80156b2:	9c05      	ldr	r4, [sp, #20]
 80156b4:	9004      	str	r0, [sp, #16]
 80156b6:	463b      	mov	r3, r7
 80156b8:	4602      	mov	r2, r0
 80156ba:	2b65      	cmp	r3, #101	; 0x65
 80156bc:	d001      	beq.n	80156c2 <_strtod_l+0x172>
 80156be:	2b45      	cmp	r3, #69	; 0x45
 80156c0:	d114      	bne.n	80156ec <_strtod_l+0x19c>
 80156c2:	b924      	cbnz	r4, 80156ce <_strtod_l+0x17e>
 80156c4:	b910      	cbnz	r0, 80156cc <_strtod_l+0x17c>
 80156c6:	9b06      	ldr	r3, [sp, #24]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d09e      	beq.n	801560a <_strtod_l+0xba>
 80156cc:	2400      	movs	r4, #0
 80156ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80156d0:	1c73      	adds	r3, r6, #1
 80156d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80156d4:	7873      	ldrb	r3, [r6, #1]
 80156d6:	2b2b      	cmp	r3, #43	; 0x2b
 80156d8:	d078      	beq.n	80157cc <_strtod_l+0x27c>
 80156da:	2b2d      	cmp	r3, #45	; 0x2d
 80156dc:	d070      	beq.n	80157c0 <_strtod_l+0x270>
 80156de:	f04f 0c00 	mov.w	ip, #0
 80156e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80156e6:	2f09      	cmp	r7, #9
 80156e8:	d97c      	bls.n	80157e4 <_strtod_l+0x294>
 80156ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80156ec:	f04f 0e00 	mov.w	lr, #0
 80156f0:	e09a      	b.n	8015828 <_strtod_l+0x2d8>
 80156f2:	2300      	movs	r3, #0
 80156f4:	e7c7      	b.n	8015686 <_strtod_l+0x136>
 80156f6:	9905      	ldr	r1, [sp, #20]
 80156f8:	2908      	cmp	r1, #8
 80156fa:	bfdd      	ittte	le
 80156fc:	9907      	ldrle	r1, [sp, #28]
 80156fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8015702:	9307      	strle	r3, [sp, #28]
 8015704:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015708:	9b05      	ldr	r3, [sp, #20]
 801570a:	3001      	adds	r0, #1
 801570c:	3301      	adds	r3, #1
 801570e:	9305      	str	r3, [sp, #20]
 8015710:	901b      	str	r0, [sp, #108]	; 0x6c
 8015712:	e7bf      	b.n	8015694 <_strtod_l+0x144>
 8015714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015716:	191a      	adds	r2, r3, r4
 8015718:	921b      	str	r2, [sp, #108]	; 0x6c
 801571a:	9a05      	ldr	r2, [sp, #20]
 801571c:	5d1b      	ldrb	r3, [r3, r4]
 801571e:	2a00      	cmp	r2, #0
 8015720:	d037      	beq.n	8015792 <_strtod_l+0x242>
 8015722:	9c05      	ldr	r4, [sp, #20]
 8015724:	4602      	mov	r2, r0
 8015726:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801572a:	2909      	cmp	r1, #9
 801572c:	d913      	bls.n	8015756 <_strtod_l+0x206>
 801572e:	2101      	movs	r1, #1
 8015730:	9104      	str	r1, [sp, #16]
 8015732:	e7c2      	b.n	80156ba <_strtod_l+0x16a>
 8015734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015736:	1c5a      	adds	r2, r3, #1
 8015738:	921b      	str	r2, [sp, #108]	; 0x6c
 801573a:	785b      	ldrb	r3, [r3, #1]
 801573c:	3001      	adds	r0, #1
 801573e:	2b30      	cmp	r3, #48	; 0x30
 8015740:	d0f8      	beq.n	8015734 <_strtod_l+0x1e4>
 8015742:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015746:	2a08      	cmp	r2, #8
 8015748:	f200 84e4 	bhi.w	8016114 <_strtod_l+0xbc4>
 801574c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801574e:	9208      	str	r2, [sp, #32]
 8015750:	4602      	mov	r2, r0
 8015752:	2000      	movs	r0, #0
 8015754:	4604      	mov	r4, r0
 8015756:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801575a:	f100 0101 	add.w	r1, r0, #1
 801575e:	d012      	beq.n	8015786 <_strtod_l+0x236>
 8015760:	440a      	add	r2, r1
 8015762:	eb00 0c04 	add.w	ip, r0, r4
 8015766:	4621      	mov	r1, r4
 8015768:	270a      	movs	r7, #10
 801576a:	458c      	cmp	ip, r1
 801576c:	d113      	bne.n	8015796 <_strtod_l+0x246>
 801576e:	1821      	adds	r1, r4, r0
 8015770:	2908      	cmp	r1, #8
 8015772:	f104 0401 	add.w	r4, r4, #1
 8015776:	4404      	add	r4, r0
 8015778:	dc19      	bgt.n	80157ae <_strtod_l+0x25e>
 801577a:	9b07      	ldr	r3, [sp, #28]
 801577c:	210a      	movs	r1, #10
 801577e:	fb01 e303 	mla	r3, r1, r3, lr
 8015782:	9307      	str	r3, [sp, #28]
 8015784:	2100      	movs	r1, #0
 8015786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015788:	1c58      	adds	r0, r3, #1
 801578a:	901b      	str	r0, [sp, #108]	; 0x6c
 801578c:	785b      	ldrb	r3, [r3, #1]
 801578e:	4608      	mov	r0, r1
 8015790:	e7c9      	b.n	8015726 <_strtod_l+0x1d6>
 8015792:	9805      	ldr	r0, [sp, #20]
 8015794:	e7d3      	b.n	801573e <_strtod_l+0x1ee>
 8015796:	2908      	cmp	r1, #8
 8015798:	f101 0101 	add.w	r1, r1, #1
 801579c:	dc03      	bgt.n	80157a6 <_strtod_l+0x256>
 801579e:	9b07      	ldr	r3, [sp, #28]
 80157a0:	437b      	muls	r3, r7
 80157a2:	9307      	str	r3, [sp, #28]
 80157a4:	e7e1      	b.n	801576a <_strtod_l+0x21a>
 80157a6:	2910      	cmp	r1, #16
 80157a8:	bfd8      	it	le
 80157aa:	437d      	mulle	r5, r7
 80157ac:	e7dd      	b.n	801576a <_strtod_l+0x21a>
 80157ae:	2c10      	cmp	r4, #16
 80157b0:	bfdc      	itt	le
 80157b2:	210a      	movle	r1, #10
 80157b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80157b8:	e7e4      	b.n	8015784 <_strtod_l+0x234>
 80157ba:	2301      	movs	r3, #1
 80157bc:	9304      	str	r3, [sp, #16]
 80157be:	e781      	b.n	80156c4 <_strtod_l+0x174>
 80157c0:	f04f 0c01 	mov.w	ip, #1
 80157c4:	1cb3      	adds	r3, r6, #2
 80157c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80157c8:	78b3      	ldrb	r3, [r6, #2]
 80157ca:	e78a      	b.n	80156e2 <_strtod_l+0x192>
 80157cc:	f04f 0c00 	mov.w	ip, #0
 80157d0:	e7f8      	b.n	80157c4 <_strtod_l+0x274>
 80157d2:	bf00      	nop
 80157d4:	08019064 	.word	0x08019064
 80157d8:	7ff00000 	.word	0x7ff00000
 80157dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157de:	1c5f      	adds	r7, r3, #1
 80157e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80157e2:	785b      	ldrb	r3, [r3, #1]
 80157e4:	2b30      	cmp	r3, #48	; 0x30
 80157e6:	d0f9      	beq.n	80157dc <_strtod_l+0x28c>
 80157e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80157ec:	2f08      	cmp	r7, #8
 80157ee:	f63f af7d 	bhi.w	80156ec <_strtod_l+0x19c>
 80157f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80157f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157f8:	930a      	str	r3, [sp, #40]	; 0x28
 80157fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157fc:	1c5f      	adds	r7, r3, #1
 80157fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8015800:	785b      	ldrb	r3, [r3, #1]
 8015802:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015806:	f1b8 0f09 	cmp.w	r8, #9
 801580a:	d937      	bls.n	801587c <_strtod_l+0x32c>
 801580c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801580e:	1a7f      	subs	r7, r7, r1
 8015810:	2f08      	cmp	r7, #8
 8015812:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015816:	dc37      	bgt.n	8015888 <_strtod_l+0x338>
 8015818:	45be      	cmp	lr, r7
 801581a:	bfa8      	it	ge
 801581c:	46be      	movge	lr, r7
 801581e:	f1bc 0f00 	cmp.w	ip, #0
 8015822:	d001      	beq.n	8015828 <_strtod_l+0x2d8>
 8015824:	f1ce 0e00 	rsb	lr, lr, #0
 8015828:	2c00      	cmp	r4, #0
 801582a:	d151      	bne.n	80158d0 <_strtod_l+0x380>
 801582c:	2800      	cmp	r0, #0
 801582e:	f47f aece 	bne.w	80155ce <_strtod_l+0x7e>
 8015832:	9a06      	ldr	r2, [sp, #24]
 8015834:	2a00      	cmp	r2, #0
 8015836:	f47f aeca 	bne.w	80155ce <_strtod_l+0x7e>
 801583a:	9a04      	ldr	r2, [sp, #16]
 801583c:	2a00      	cmp	r2, #0
 801583e:	f47f aee4 	bne.w	801560a <_strtod_l+0xba>
 8015842:	2b4e      	cmp	r3, #78	; 0x4e
 8015844:	d027      	beq.n	8015896 <_strtod_l+0x346>
 8015846:	dc21      	bgt.n	801588c <_strtod_l+0x33c>
 8015848:	2b49      	cmp	r3, #73	; 0x49
 801584a:	f47f aede 	bne.w	801560a <_strtod_l+0xba>
 801584e:	49a0      	ldr	r1, [pc, #640]	; (8015ad0 <_strtod_l+0x580>)
 8015850:	a81b      	add	r0, sp, #108	; 0x6c
 8015852:	f001 fdf7 	bl	8017444 <__match>
 8015856:	2800      	cmp	r0, #0
 8015858:	f43f aed7 	beq.w	801560a <_strtod_l+0xba>
 801585c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801585e:	499d      	ldr	r1, [pc, #628]	; (8015ad4 <_strtod_l+0x584>)
 8015860:	3b01      	subs	r3, #1
 8015862:	a81b      	add	r0, sp, #108	; 0x6c
 8015864:	931b      	str	r3, [sp, #108]	; 0x6c
 8015866:	f001 fded 	bl	8017444 <__match>
 801586a:	b910      	cbnz	r0, 8015872 <_strtod_l+0x322>
 801586c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801586e:	3301      	adds	r3, #1
 8015870:	931b      	str	r3, [sp, #108]	; 0x6c
 8015872:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015ae8 <_strtod_l+0x598>
 8015876:	f04f 0a00 	mov.w	sl, #0
 801587a:	e6a8      	b.n	80155ce <_strtod_l+0x7e>
 801587c:	210a      	movs	r1, #10
 801587e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015882:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015886:	e7b8      	b.n	80157fa <_strtod_l+0x2aa>
 8015888:	46be      	mov	lr, r7
 801588a:	e7c8      	b.n	801581e <_strtod_l+0x2ce>
 801588c:	2b69      	cmp	r3, #105	; 0x69
 801588e:	d0de      	beq.n	801584e <_strtod_l+0x2fe>
 8015890:	2b6e      	cmp	r3, #110	; 0x6e
 8015892:	f47f aeba 	bne.w	801560a <_strtod_l+0xba>
 8015896:	4990      	ldr	r1, [pc, #576]	; (8015ad8 <_strtod_l+0x588>)
 8015898:	a81b      	add	r0, sp, #108	; 0x6c
 801589a:	f001 fdd3 	bl	8017444 <__match>
 801589e:	2800      	cmp	r0, #0
 80158a0:	f43f aeb3 	beq.w	801560a <_strtod_l+0xba>
 80158a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	2b28      	cmp	r3, #40	; 0x28
 80158aa:	d10e      	bne.n	80158ca <_strtod_l+0x37a>
 80158ac:	aa1e      	add	r2, sp, #120	; 0x78
 80158ae:	498b      	ldr	r1, [pc, #556]	; (8015adc <_strtod_l+0x58c>)
 80158b0:	a81b      	add	r0, sp, #108	; 0x6c
 80158b2:	f001 fddb 	bl	801746c <__hexnan>
 80158b6:	2805      	cmp	r0, #5
 80158b8:	d107      	bne.n	80158ca <_strtod_l+0x37a>
 80158ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80158bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80158c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80158c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80158c8:	e681      	b.n	80155ce <_strtod_l+0x7e>
 80158ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015af0 <_strtod_l+0x5a0>
 80158ce:	e7d2      	b.n	8015876 <_strtod_l+0x326>
 80158d0:	ebae 0302 	sub.w	r3, lr, r2
 80158d4:	9306      	str	r3, [sp, #24]
 80158d6:	9b05      	ldr	r3, [sp, #20]
 80158d8:	9807      	ldr	r0, [sp, #28]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	bf08      	it	eq
 80158de:	4623      	moveq	r3, r4
 80158e0:	2c10      	cmp	r4, #16
 80158e2:	9305      	str	r3, [sp, #20]
 80158e4:	46a0      	mov	r8, r4
 80158e6:	bfa8      	it	ge
 80158e8:	f04f 0810 	movge.w	r8, #16
 80158ec:	f7ea fe22 	bl	8000534 <__aeabi_ui2d>
 80158f0:	2c09      	cmp	r4, #9
 80158f2:	4682      	mov	sl, r0
 80158f4:	468b      	mov	fp, r1
 80158f6:	dc13      	bgt.n	8015920 <_strtod_l+0x3d0>
 80158f8:	9b06      	ldr	r3, [sp, #24]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	f43f ae67 	beq.w	80155ce <_strtod_l+0x7e>
 8015900:	9b06      	ldr	r3, [sp, #24]
 8015902:	dd7a      	ble.n	80159fa <_strtod_l+0x4aa>
 8015904:	2b16      	cmp	r3, #22
 8015906:	dc61      	bgt.n	80159cc <_strtod_l+0x47c>
 8015908:	4a75      	ldr	r2, [pc, #468]	; (8015ae0 <_strtod_l+0x590>)
 801590a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801590e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015912:	4652      	mov	r2, sl
 8015914:	465b      	mov	r3, fp
 8015916:	f7ea fe87 	bl	8000628 <__aeabi_dmul>
 801591a:	4682      	mov	sl, r0
 801591c:	468b      	mov	fp, r1
 801591e:	e656      	b.n	80155ce <_strtod_l+0x7e>
 8015920:	4b6f      	ldr	r3, [pc, #444]	; (8015ae0 <_strtod_l+0x590>)
 8015922:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015926:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801592a:	f7ea fe7d 	bl	8000628 <__aeabi_dmul>
 801592e:	4606      	mov	r6, r0
 8015930:	4628      	mov	r0, r5
 8015932:	460f      	mov	r7, r1
 8015934:	f7ea fdfe 	bl	8000534 <__aeabi_ui2d>
 8015938:	4602      	mov	r2, r0
 801593a:	460b      	mov	r3, r1
 801593c:	4630      	mov	r0, r6
 801593e:	4639      	mov	r1, r7
 8015940:	f7ea fcbc 	bl	80002bc <__adddf3>
 8015944:	2c0f      	cmp	r4, #15
 8015946:	4682      	mov	sl, r0
 8015948:	468b      	mov	fp, r1
 801594a:	ddd5      	ble.n	80158f8 <_strtod_l+0x3a8>
 801594c:	9b06      	ldr	r3, [sp, #24]
 801594e:	eba4 0808 	sub.w	r8, r4, r8
 8015952:	4498      	add	r8, r3
 8015954:	f1b8 0f00 	cmp.w	r8, #0
 8015958:	f340 8096 	ble.w	8015a88 <_strtod_l+0x538>
 801595c:	f018 030f 	ands.w	r3, r8, #15
 8015960:	d00a      	beq.n	8015978 <_strtod_l+0x428>
 8015962:	495f      	ldr	r1, [pc, #380]	; (8015ae0 <_strtod_l+0x590>)
 8015964:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015968:	4652      	mov	r2, sl
 801596a:	465b      	mov	r3, fp
 801596c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015970:	f7ea fe5a 	bl	8000628 <__aeabi_dmul>
 8015974:	4682      	mov	sl, r0
 8015976:	468b      	mov	fp, r1
 8015978:	f038 080f 	bics.w	r8, r8, #15
 801597c:	d073      	beq.n	8015a66 <_strtod_l+0x516>
 801597e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015982:	dd47      	ble.n	8015a14 <_strtod_l+0x4c4>
 8015984:	2400      	movs	r4, #0
 8015986:	46a0      	mov	r8, r4
 8015988:	9407      	str	r4, [sp, #28]
 801598a:	9405      	str	r4, [sp, #20]
 801598c:	2322      	movs	r3, #34	; 0x22
 801598e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015ae8 <_strtod_l+0x598>
 8015992:	f8c9 3000 	str.w	r3, [r9]
 8015996:	f04f 0a00 	mov.w	sl, #0
 801599a:	9b07      	ldr	r3, [sp, #28]
 801599c:	2b00      	cmp	r3, #0
 801599e:	f43f ae16 	beq.w	80155ce <_strtod_l+0x7e>
 80159a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80159a4:	4648      	mov	r0, r9
 80159a6:	f001 fe6c 	bl	8017682 <_Bfree>
 80159aa:	9905      	ldr	r1, [sp, #20]
 80159ac:	4648      	mov	r0, r9
 80159ae:	f001 fe68 	bl	8017682 <_Bfree>
 80159b2:	4641      	mov	r1, r8
 80159b4:	4648      	mov	r0, r9
 80159b6:	f001 fe64 	bl	8017682 <_Bfree>
 80159ba:	9907      	ldr	r1, [sp, #28]
 80159bc:	4648      	mov	r0, r9
 80159be:	f001 fe60 	bl	8017682 <_Bfree>
 80159c2:	4621      	mov	r1, r4
 80159c4:	4648      	mov	r0, r9
 80159c6:	f001 fe5c 	bl	8017682 <_Bfree>
 80159ca:	e600      	b.n	80155ce <_strtod_l+0x7e>
 80159cc:	9a06      	ldr	r2, [sp, #24]
 80159ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80159d2:	4293      	cmp	r3, r2
 80159d4:	dbba      	blt.n	801594c <_strtod_l+0x3fc>
 80159d6:	4d42      	ldr	r5, [pc, #264]	; (8015ae0 <_strtod_l+0x590>)
 80159d8:	f1c4 040f 	rsb	r4, r4, #15
 80159dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80159e0:	4652      	mov	r2, sl
 80159e2:	465b      	mov	r3, fp
 80159e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159e8:	f7ea fe1e 	bl	8000628 <__aeabi_dmul>
 80159ec:	9b06      	ldr	r3, [sp, #24]
 80159ee:	1b1c      	subs	r4, r3, r4
 80159f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80159f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159f8:	e78d      	b.n	8015916 <_strtod_l+0x3c6>
 80159fa:	f113 0f16 	cmn.w	r3, #22
 80159fe:	dba5      	blt.n	801594c <_strtod_l+0x3fc>
 8015a00:	4a37      	ldr	r2, [pc, #220]	; (8015ae0 <_strtod_l+0x590>)
 8015a02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015a06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015a0a:	4650      	mov	r0, sl
 8015a0c:	4659      	mov	r1, fp
 8015a0e:	f7ea ff35 	bl	800087c <__aeabi_ddiv>
 8015a12:	e782      	b.n	801591a <_strtod_l+0x3ca>
 8015a14:	2300      	movs	r3, #0
 8015a16:	4e33      	ldr	r6, [pc, #204]	; (8015ae4 <_strtod_l+0x594>)
 8015a18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015a1c:	4650      	mov	r0, sl
 8015a1e:	4659      	mov	r1, fp
 8015a20:	461d      	mov	r5, r3
 8015a22:	f1b8 0f01 	cmp.w	r8, #1
 8015a26:	dc21      	bgt.n	8015a6c <_strtod_l+0x51c>
 8015a28:	b10b      	cbz	r3, 8015a2e <_strtod_l+0x4de>
 8015a2a:	4682      	mov	sl, r0
 8015a2c:	468b      	mov	fp, r1
 8015a2e:	4b2d      	ldr	r3, [pc, #180]	; (8015ae4 <_strtod_l+0x594>)
 8015a30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015a34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015a38:	4652      	mov	r2, sl
 8015a3a:	465b      	mov	r3, fp
 8015a3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a40:	f7ea fdf2 	bl	8000628 <__aeabi_dmul>
 8015a44:	4b28      	ldr	r3, [pc, #160]	; (8015ae8 <_strtod_l+0x598>)
 8015a46:	460a      	mov	r2, r1
 8015a48:	400b      	ands	r3, r1
 8015a4a:	4928      	ldr	r1, [pc, #160]	; (8015aec <_strtod_l+0x59c>)
 8015a4c:	428b      	cmp	r3, r1
 8015a4e:	4682      	mov	sl, r0
 8015a50:	d898      	bhi.n	8015984 <_strtod_l+0x434>
 8015a52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015a56:	428b      	cmp	r3, r1
 8015a58:	bf86      	itte	hi
 8015a5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015af4 <_strtod_l+0x5a4>
 8015a5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015a62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015a66:	2300      	movs	r3, #0
 8015a68:	9304      	str	r3, [sp, #16]
 8015a6a:	e077      	b.n	8015b5c <_strtod_l+0x60c>
 8015a6c:	f018 0f01 	tst.w	r8, #1
 8015a70:	d006      	beq.n	8015a80 <_strtod_l+0x530>
 8015a72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7a:	f7ea fdd5 	bl	8000628 <__aeabi_dmul>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	3501      	adds	r5, #1
 8015a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015a86:	e7cc      	b.n	8015a22 <_strtod_l+0x4d2>
 8015a88:	d0ed      	beq.n	8015a66 <_strtod_l+0x516>
 8015a8a:	f1c8 0800 	rsb	r8, r8, #0
 8015a8e:	f018 020f 	ands.w	r2, r8, #15
 8015a92:	d00a      	beq.n	8015aaa <_strtod_l+0x55a>
 8015a94:	4b12      	ldr	r3, [pc, #72]	; (8015ae0 <_strtod_l+0x590>)
 8015a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a9a:	4650      	mov	r0, sl
 8015a9c:	4659      	mov	r1, fp
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7ea feeb 	bl	800087c <__aeabi_ddiv>
 8015aa6:	4682      	mov	sl, r0
 8015aa8:	468b      	mov	fp, r1
 8015aaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015aae:	d0da      	beq.n	8015a66 <_strtod_l+0x516>
 8015ab0:	f1b8 0f1f 	cmp.w	r8, #31
 8015ab4:	dd20      	ble.n	8015af8 <_strtod_l+0x5a8>
 8015ab6:	2400      	movs	r4, #0
 8015ab8:	46a0      	mov	r8, r4
 8015aba:	9407      	str	r4, [sp, #28]
 8015abc:	9405      	str	r4, [sp, #20]
 8015abe:	2322      	movs	r3, #34	; 0x22
 8015ac0:	f04f 0a00 	mov.w	sl, #0
 8015ac4:	f04f 0b00 	mov.w	fp, #0
 8015ac8:	f8c9 3000 	str.w	r3, [r9]
 8015acc:	e765      	b.n	801599a <_strtod_l+0x44a>
 8015ace:	bf00      	nop
 8015ad0:	08019031 	.word	0x08019031
 8015ad4:	080190bb 	.word	0x080190bb
 8015ad8:	08019039 	.word	0x08019039
 8015adc:	08019078 	.word	0x08019078
 8015ae0:	080190f8 	.word	0x080190f8
 8015ae4:	080190d0 	.word	0x080190d0
 8015ae8:	7ff00000 	.word	0x7ff00000
 8015aec:	7ca00000 	.word	0x7ca00000
 8015af0:	fff80000 	.word	0xfff80000
 8015af4:	7fefffff 	.word	0x7fefffff
 8015af8:	f018 0310 	ands.w	r3, r8, #16
 8015afc:	bf18      	it	ne
 8015afe:	236a      	movne	r3, #106	; 0x6a
 8015b00:	4da0      	ldr	r5, [pc, #640]	; (8015d84 <_strtod_l+0x834>)
 8015b02:	9304      	str	r3, [sp, #16]
 8015b04:	4650      	mov	r0, sl
 8015b06:	4659      	mov	r1, fp
 8015b08:	2300      	movs	r3, #0
 8015b0a:	f1b8 0f00 	cmp.w	r8, #0
 8015b0e:	f300 810a 	bgt.w	8015d26 <_strtod_l+0x7d6>
 8015b12:	b10b      	cbz	r3, 8015b18 <_strtod_l+0x5c8>
 8015b14:	4682      	mov	sl, r0
 8015b16:	468b      	mov	fp, r1
 8015b18:	9b04      	ldr	r3, [sp, #16]
 8015b1a:	b1bb      	cbz	r3, 8015b4c <_strtod_l+0x5fc>
 8015b1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015b20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	4659      	mov	r1, fp
 8015b28:	dd10      	ble.n	8015b4c <_strtod_l+0x5fc>
 8015b2a:	2b1f      	cmp	r3, #31
 8015b2c:	f340 8107 	ble.w	8015d3e <_strtod_l+0x7ee>
 8015b30:	2b34      	cmp	r3, #52	; 0x34
 8015b32:	bfde      	ittt	le
 8015b34:	3b20      	suble	r3, #32
 8015b36:	f04f 32ff 	movle.w	r2, #4294967295
 8015b3a:	fa02 f303 	lslle.w	r3, r2, r3
 8015b3e:	f04f 0a00 	mov.w	sl, #0
 8015b42:	bfcc      	ite	gt
 8015b44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015b48:	ea03 0b01 	andle.w	fp, r3, r1
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	2300      	movs	r3, #0
 8015b50:	4650      	mov	r0, sl
 8015b52:	4659      	mov	r1, fp
 8015b54:	f7ea ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d1ac      	bne.n	8015ab6 <_strtod_l+0x566>
 8015b5c:	9b07      	ldr	r3, [sp, #28]
 8015b5e:	9300      	str	r3, [sp, #0]
 8015b60:	9a05      	ldr	r2, [sp, #20]
 8015b62:	9908      	ldr	r1, [sp, #32]
 8015b64:	4623      	mov	r3, r4
 8015b66:	4648      	mov	r0, r9
 8015b68:	f001 fddd 	bl	8017726 <__s2b>
 8015b6c:	9007      	str	r0, [sp, #28]
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	f43f af08 	beq.w	8015984 <_strtod_l+0x434>
 8015b74:	9a06      	ldr	r2, [sp, #24]
 8015b76:	9b06      	ldr	r3, [sp, #24]
 8015b78:	2a00      	cmp	r2, #0
 8015b7a:	f1c3 0300 	rsb	r3, r3, #0
 8015b7e:	bfa8      	it	ge
 8015b80:	2300      	movge	r3, #0
 8015b82:	930e      	str	r3, [sp, #56]	; 0x38
 8015b84:	2400      	movs	r4, #0
 8015b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8015b8c:	46a0      	mov	r8, r4
 8015b8e:	9b07      	ldr	r3, [sp, #28]
 8015b90:	4648      	mov	r0, r9
 8015b92:	6859      	ldr	r1, [r3, #4]
 8015b94:	f001 fd41 	bl	801761a <_Balloc>
 8015b98:	9005      	str	r0, [sp, #20]
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	f43f aef6 	beq.w	801598c <_strtod_l+0x43c>
 8015ba0:	9b07      	ldr	r3, [sp, #28]
 8015ba2:	691a      	ldr	r2, [r3, #16]
 8015ba4:	3202      	adds	r2, #2
 8015ba6:	f103 010c 	add.w	r1, r3, #12
 8015baa:	0092      	lsls	r2, r2, #2
 8015bac:	300c      	adds	r0, #12
 8015bae:	f001 fd29 	bl	8017604 <memcpy>
 8015bb2:	aa1e      	add	r2, sp, #120	; 0x78
 8015bb4:	a91d      	add	r1, sp, #116	; 0x74
 8015bb6:	ec4b ab10 	vmov	d0, sl, fp
 8015bba:	4648      	mov	r0, r9
 8015bbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015bc0:	f002 f86c 	bl	8017c9c <__d2b>
 8015bc4:	901c      	str	r0, [sp, #112]	; 0x70
 8015bc6:	2800      	cmp	r0, #0
 8015bc8:	f43f aee0 	beq.w	801598c <_strtod_l+0x43c>
 8015bcc:	2101      	movs	r1, #1
 8015bce:	4648      	mov	r0, r9
 8015bd0:	f001 fe35 	bl	801783e <__i2b>
 8015bd4:	4680      	mov	r8, r0
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	f43f aed8 	beq.w	801598c <_strtod_l+0x43c>
 8015bdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015bde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015be0:	2e00      	cmp	r6, #0
 8015be2:	bfab      	itete	ge
 8015be4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015be6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015be8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015bea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015bec:	bfac      	ite	ge
 8015bee:	18f7      	addge	r7, r6, r3
 8015bf0:	1b9d      	sublt	r5, r3, r6
 8015bf2:	9b04      	ldr	r3, [sp, #16]
 8015bf4:	1af6      	subs	r6, r6, r3
 8015bf6:	4416      	add	r6, r2
 8015bf8:	4b63      	ldr	r3, [pc, #396]	; (8015d88 <_strtod_l+0x838>)
 8015bfa:	3e01      	subs	r6, #1
 8015bfc:	429e      	cmp	r6, r3
 8015bfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015c02:	f280 80af 	bge.w	8015d64 <_strtod_l+0x814>
 8015c06:	1b9b      	subs	r3, r3, r6
 8015c08:	2b1f      	cmp	r3, #31
 8015c0a:	eba2 0203 	sub.w	r2, r2, r3
 8015c0e:	f04f 0101 	mov.w	r1, #1
 8015c12:	f300 809b 	bgt.w	8015d4c <_strtod_l+0x7fc>
 8015c16:	fa01 f303 	lsl.w	r3, r1, r3
 8015c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c20:	18be      	adds	r6, r7, r2
 8015c22:	9b04      	ldr	r3, [sp, #16]
 8015c24:	42b7      	cmp	r7, r6
 8015c26:	4415      	add	r5, r2
 8015c28:	441d      	add	r5, r3
 8015c2a:	463b      	mov	r3, r7
 8015c2c:	bfa8      	it	ge
 8015c2e:	4633      	movge	r3, r6
 8015c30:	42ab      	cmp	r3, r5
 8015c32:	bfa8      	it	ge
 8015c34:	462b      	movge	r3, r5
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	bfc2      	ittt	gt
 8015c3a:	1af6      	subgt	r6, r6, r3
 8015c3c:	1aed      	subgt	r5, r5, r3
 8015c3e:	1aff      	subgt	r7, r7, r3
 8015c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c42:	b1bb      	cbz	r3, 8015c74 <_strtod_l+0x724>
 8015c44:	4641      	mov	r1, r8
 8015c46:	461a      	mov	r2, r3
 8015c48:	4648      	mov	r0, r9
 8015c4a:	f001 fe97 	bl	801797c <__pow5mult>
 8015c4e:	4680      	mov	r8, r0
 8015c50:	2800      	cmp	r0, #0
 8015c52:	f43f ae9b 	beq.w	801598c <_strtod_l+0x43c>
 8015c56:	4601      	mov	r1, r0
 8015c58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015c5a:	4648      	mov	r0, r9
 8015c5c:	f001 fdf8 	bl	8017850 <__multiply>
 8015c60:	900c      	str	r0, [sp, #48]	; 0x30
 8015c62:	2800      	cmp	r0, #0
 8015c64:	f43f ae92 	beq.w	801598c <_strtod_l+0x43c>
 8015c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c6a:	4648      	mov	r0, r9
 8015c6c:	f001 fd09 	bl	8017682 <_Bfree>
 8015c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c72:	931c      	str	r3, [sp, #112]	; 0x70
 8015c74:	2e00      	cmp	r6, #0
 8015c76:	dc7a      	bgt.n	8015d6e <_strtod_l+0x81e>
 8015c78:	9b06      	ldr	r3, [sp, #24]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	dd08      	ble.n	8015c90 <_strtod_l+0x740>
 8015c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015c80:	9905      	ldr	r1, [sp, #20]
 8015c82:	4648      	mov	r0, r9
 8015c84:	f001 fe7a 	bl	801797c <__pow5mult>
 8015c88:	9005      	str	r0, [sp, #20]
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	f43f ae7e 	beq.w	801598c <_strtod_l+0x43c>
 8015c90:	2d00      	cmp	r5, #0
 8015c92:	dd08      	ble.n	8015ca6 <_strtod_l+0x756>
 8015c94:	462a      	mov	r2, r5
 8015c96:	9905      	ldr	r1, [sp, #20]
 8015c98:	4648      	mov	r0, r9
 8015c9a:	f001 febd 	bl	8017a18 <__lshift>
 8015c9e:	9005      	str	r0, [sp, #20]
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	f43f ae73 	beq.w	801598c <_strtod_l+0x43c>
 8015ca6:	2f00      	cmp	r7, #0
 8015ca8:	dd08      	ble.n	8015cbc <_strtod_l+0x76c>
 8015caa:	4641      	mov	r1, r8
 8015cac:	463a      	mov	r2, r7
 8015cae:	4648      	mov	r0, r9
 8015cb0:	f001 feb2 	bl	8017a18 <__lshift>
 8015cb4:	4680      	mov	r8, r0
 8015cb6:	2800      	cmp	r0, #0
 8015cb8:	f43f ae68 	beq.w	801598c <_strtod_l+0x43c>
 8015cbc:	9a05      	ldr	r2, [sp, #20]
 8015cbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015cc0:	4648      	mov	r0, r9
 8015cc2:	f001 ff17 	bl	8017af4 <__mdiff>
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	f43f ae5f 	beq.w	801598c <_strtod_l+0x43c>
 8015cce:	68c3      	ldr	r3, [r0, #12]
 8015cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	60c3      	str	r3, [r0, #12]
 8015cd6:	4641      	mov	r1, r8
 8015cd8:	f001 fef2 	bl	8017ac0 <__mcmp>
 8015cdc:	2800      	cmp	r0, #0
 8015cde:	da55      	bge.n	8015d8c <_strtod_l+0x83c>
 8015ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ce2:	b9e3      	cbnz	r3, 8015d1e <_strtod_l+0x7ce>
 8015ce4:	f1ba 0f00 	cmp.w	sl, #0
 8015ce8:	d119      	bne.n	8015d1e <_strtod_l+0x7ce>
 8015cea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015cee:	b9b3      	cbnz	r3, 8015d1e <_strtod_l+0x7ce>
 8015cf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015cf4:	0d1b      	lsrs	r3, r3, #20
 8015cf6:	051b      	lsls	r3, r3, #20
 8015cf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015cfc:	d90f      	bls.n	8015d1e <_strtod_l+0x7ce>
 8015cfe:	6963      	ldr	r3, [r4, #20]
 8015d00:	b913      	cbnz	r3, 8015d08 <_strtod_l+0x7b8>
 8015d02:	6923      	ldr	r3, [r4, #16]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	dd0a      	ble.n	8015d1e <_strtod_l+0x7ce>
 8015d08:	4621      	mov	r1, r4
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	4648      	mov	r0, r9
 8015d0e:	f001 fe83 	bl	8017a18 <__lshift>
 8015d12:	4641      	mov	r1, r8
 8015d14:	4604      	mov	r4, r0
 8015d16:	f001 fed3 	bl	8017ac0 <__mcmp>
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	dc67      	bgt.n	8015dee <_strtod_l+0x89e>
 8015d1e:	9b04      	ldr	r3, [sp, #16]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d171      	bne.n	8015e08 <_strtod_l+0x8b8>
 8015d24:	e63d      	b.n	80159a2 <_strtod_l+0x452>
 8015d26:	f018 0f01 	tst.w	r8, #1
 8015d2a:	d004      	beq.n	8015d36 <_strtod_l+0x7e6>
 8015d2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d30:	f7ea fc7a 	bl	8000628 <__aeabi_dmul>
 8015d34:	2301      	movs	r3, #1
 8015d36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015d3a:	3508      	adds	r5, #8
 8015d3c:	e6e5      	b.n	8015b0a <_strtod_l+0x5ba>
 8015d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d42:	fa02 f303 	lsl.w	r3, r2, r3
 8015d46:	ea03 0a0a 	and.w	sl, r3, sl
 8015d4a:	e6ff      	b.n	8015b4c <_strtod_l+0x5fc>
 8015d4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015d50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015d54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015d58:	36e2      	adds	r6, #226	; 0xe2
 8015d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8015d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015d60:	910f      	str	r1, [sp, #60]	; 0x3c
 8015d62:	e75d      	b.n	8015c20 <_strtod_l+0x6d0>
 8015d64:	2300      	movs	r3, #0
 8015d66:	930a      	str	r3, [sp, #40]	; 0x28
 8015d68:	2301      	movs	r3, #1
 8015d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d6c:	e758      	b.n	8015c20 <_strtod_l+0x6d0>
 8015d6e:	4632      	mov	r2, r6
 8015d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d72:	4648      	mov	r0, r9
 8015d74:	f001 fe50 	bl	8017a18 <__lshift>
 8015d78:	901c      	str	r0, [sp, #112]	; 0x70
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	f47f af7c 	bne.w	8015c78 <_strtod_l+0x728>
 8015d80:	e604      	b.n	801598c <_strtod_l+0x43c>
 8015d82:	bf00      	nop
 8015d84:	08019090 	.word	0x08019090
 8015d88:	fffffc02 	.word	0xfffffc02
 8015d8c:	465d      	mov	r5, fp
 8015d8e:	f040 8086 	bne.w	8015e9e <_strtod_l+0x94e>
 8015d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d98:	b32a      	cbz	r2, 8015de6 <_strtod_l+0x896>
 8015d9a:	4aaf      	ldr	r2, [pc, #700]	; (8016058 <_strtod_l+0xb08>)
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	d153      	bne.n	8015e48 <_strtod_l+0x8f8>
 8015da0:	9b04      	ldr	r3, [sp, #16]
 8015da2:	4650      	mov	r0, sl
 8015da4:	b1d3      	cbz	r3, 8015ddc <_strtod_l+0x88c>
 8015da6:	4aad      	ldr	r2, [pc, #692]	; (801605c <_strtod_l+0xb0c>)
 8015da8:	402a      	ands	r2, r5
 8015daa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015dae:	f04f 31ff 	mov.w	r1, #4294967295
 8015db2:	d816      	bhi.n	8015de2 <_strtod_l+0x892>
 8015db4:	0d12      	lsrs	r2, r2, #20
 8015db6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015dba:	fa01 f303 	lsl.w	r3, r1, r3
 8015dbe:	4298      	cmp	r0, r3
 8015dc0:	d142      	bne.n	8015e48 <_strtod_l+0x8f8>
 8015dc2:	4ba7      	ldr	r3, [pc, #668]	; (8016060 <_strtod_l+0xb10>)
 8015dc4:	429d      	cmp	r5, r3
 8015dc6:	d102      	bne.n	8015dce <_strtod_l+0x87e>
 8015dc8:	3001      	adds	r0, #1
 8015dca:	f43f addf 	beq.w	801598c <_strtod_l+0x43c>
 8015dce:	4ba3      	ldr	r3, [pc, #652]	; (801605c <_strtod_l+0xb0c>)
 8015dd0:	402b      	ands	r3, r5
 8015dd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015dd6:	f04f 0a00 	mov.w	sl, #0
 8015dda:	e7a0      	b.n	8015d1e <_strtod_l+0x7ce>
 8015ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8015de0:	e7ed      	b.n	8015dbe <_strtod_l+0x86e>
 8015de2:	460b      	mov	r3, r1
 8015de4:	e7eb      	b.n	8015dbe <_strtod_l+0x86e>
 8015de6:	bb7b      	cbnz	r3, 8015e48 <_strtod_l+0x8f8>
 8015de8:	f1ba 0f00 	cmp.w	sl, #0
 8015dec:	d12c      	bne.n	8015e48 <_strtod_l+0x8f8>
 8015dee:	9904      	ldr	r1, [sp, #16]
 8015df0:	4a9a      	ldr	r2, [pc, #616]	; (801605c <_strtod_l+0xb0c>)
 8015df2:	465b      	mov	r3, fp
 8015df4:	b1f1      	cbz	r1, 8015e34 <_strtod_l+0x8e4>
 8015df6:	ea02 010b 	and.w	r1, r2, fp
 8015dfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015dfe:	dc19      	bgt.n	8015e34 <_strtod_l+0x8e4>
 8015e00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015e04:	f77f ae5b 	ble.w	8015abe <_strtod_l+0x56e>
 8015e08:	4a96      	ldr	r2, [pc, #600]	; (8016064 <_strtod_l+0xb14>)
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015e10:	4650      	mov	r0, sl
 8015e12:	4659      	mov	r1, fp
 8015e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015e18:	f7ea fc06 	bl	8000628 <__aeabi_dmul>
 8015e1c:	4682      	mov	sl, r0
 8015e1e:	468b      	mov	fp, r1
 8015e20:	2900      	cmp	r1, #0
 8015e22:	f47f adbe 	bne.w	80159a2 <_strtod_l+0x452>
 8015e26:	2800      	cmp	r0, #0
 8015e28:	f47f adbb 	bne.w	80159a2 <_strtod_l+0x452>
 8015e2c:	2322      	movs	r3, #34	; 0x22
 8015e2e:	f8c9 3000 	str.w	r3, [r9]
 8015e32:	e5b6      	b.n	80159a2 <_strtod_l+0x452>
 8015e34:	4013      	ands	r3, r2
 8015e36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015e3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015e3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015e42:	f04f 3aff 	mov.w	sl, #4294967295
 8015e46:	e76a      	b.n	8015d1e <_strtod_l+0x7ce>
 8015e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e4a:	b193      	cbz	r3, 8015e72 <_strtod_l+0x922>
 8015e4c:	422b      	tst	r3, r5
 8015e4e:	f43f af66 	beq.w	8015d1e <_strtod_l+0x7ce>
 8015e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e54:	9a04      	ldr	r2, [sp, #16]
 8015e56:	4650      	mov	r0, sl
 8015e58:	4659      	mov	r1, fp
 8015e5a:	b173      	cbz	r3, 8015e7a <_strtod_l+0x92a>
 8015e5c:	f7ff fb5a 	bl	8015514 <sulp>
 8015e60:	4602      	mov	r2, r0
 8015e62:	460b      	mov	r3, r1
 8015e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015e68:	f7ea fa28 	bl	80002bc <__adddf3>
 8015e6c:	4682      	mov	sl, r0
 8015e6e:	468b      	mov	fp, r1
 8015e70:	e755      	b.n	8015d1e <_strtod_l+0x7ce>
 8015e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e74:	ea13 0f0a 	tst.w	r3, sl
 8015e78:	e7e9      	b.n	8015e4e <_strtod_l+0x8fe>
 8015e7a:	f7ff fb4b 	bl	8015514 <sulp>
 8015e7e:	4602      	mov	r2, r0
 8015e80:	460b      	mov	r3, r1
 8015e82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015e86:	f7ea fa17 	bl	80002b8 <__aeabi_dsub>
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	4682      	mov	sl, r0
 8015e90:	468b      	mov	fp, r1
 8015e92:	f7ea fe31 	bl	8000af8 <__aeabi_dcmpeq>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	f47f ae11 	bne.w	8015abe <_strtod_l+0x56e>
 8015e9c:	e73f      	b.n	8015d1e <_strtod_l+0x7ce>
 8015e9e:	4641      	mov	r1, r8
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	f001 ff4a 	bl	8017d3a <__ratio>
 8015ea6:	ec57 6b10 	vmov	r6, r7, d0
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015eb0:	ee10 0a10 	vmov	r0, s0
 8015eb4:	4639      	mov	r1, r7
 8015eb6:	f7ea fe33 	bl	8000b20 <__aeabi_dcmple>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d077      	beq.n	8015fae <_strtod_l+0xa5e>
 8015ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d04a      	beq.n	8015f5a <_strtod_l+0xa0a>
 8015ec4:	4b68      	ldr	r3, [pc, #416]	; (8016068 <_strtod_l+0xb18>)
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ecc:	4f66      	ldr	r7, [pc, #408]	; (8016068 <_strtod_l+0xb18>)
 8015ece:	2600      	movs	r6, #0
 8015ed0:	4b62      	ldr	r3, [pc, #392]	; (801605c <_strtod_l+0xb0c>)
 8015ed2:	402b      	ands	r3, r5
 8015ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ed8:	4b64      	ldr	r3, [pc, #400]	; (801606c <_strtod_l+0xb1c>)
 8015eda:	429a      	cmp	r2, r3
 8015edc:	f040 80ce 	bne.w	801607c <_strtod_l+0xb2c>
 8015ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ee4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015ee8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015eec:	ec4b ab10 	vmov	d0, sl, fp
 8015ef0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015ef8:	f001 fe5a 	bl	8017bb0 <__ulp>
 8015efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f00:	ec53 2b10 	vmov	r2, r3, d0
 8015f04:	f7ea fb90 	bl	8000628 <__aeabi_dmul>
 8015f08:	4652      	mov	r2, sl
 8015f0a:	465b      	mov	r3, fp
 8015f0c:	f7ea f9d6 	bl	80002bc <__adddf3>
 8015f10:	460b      	mov	r3, r1
 8015f12:	4952      	ldr	r1, [pc, #328]	; (801605c <_strtod_l+0xb0c>)
 8015f14:	4a56      	ldr	r2, [pc, #344]	; (8016070 <_strtod_l+0xb20>)
 8015f16:	4019      	ands	r1, r3
 8015f18:	4291      	cmp	r1, r2
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	d95b      	bls.n	8015fd6 <_strtod_l+0xa86>
 8015f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d103      	bne.n	8015f30 <_strtod_l+0x9e0>
 8015f28:	9b08      	ldr	r3, [sp, #32]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	f43f ad2e 	beq.w	801598c <_strtod_l+0x43c>
 8015f30:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016060 <_strtod_l+0xb10>
 8015f34:	f04f 3aff 	mov.w	sl, #4294967295
 8015f38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f3a:	4648      	mov	r0, r9
 8015f3c:	f001 fba1 	bl	8017682 <_Bfree>
 8015f40:	9905      	ldr	r1, [sp, #20]
 8015f42:	4648      	mov	r0, r9
 8015f44:	f001 fb9d 	bl	8017682 <_Bfree>
 8015f48:	4641      	mov	r1, r8
 8015f4a:	4648      	mov	r0, r9
 8015f4c:	f001 fb99 	bl	8017682 <_Bfree>
 8015f50:	4621      	mov	r1, r4
 8015f52:	4648      	mov	r0, r9
 8015f54:	f001 fb95 	bl	8017682 <_Bfree>
 8015f58:	e619      	b.n	8015b8e <_strtod_l+0x63e>
 8015f5a:	f1ba 0f00 	cmp.w	sl, #0
 8015f5e:	d11a      	bne.n	8015f96 <_strtod_l+0xa46>
 8015f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f64:	b9eb      	cbnz	r3, 8015fa2 <_strtod_l+0xa52>
 8015f66:	2200      	movs	r2, #0
 8015f68:	4b3f      	ldr	r3, [pc, #252]	; (8016068 <_strtod_l+0xb18>)
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	f7ea fdcd 	bl	8000b0c <__aeabi_dcmplt>
 8015f72:	b9c8      	cbnz	r0, 8015fa8 <_strtod_l+0xa58>
 8015f74:	4630      	mov	r0, r6
 8015f76:	4639      	mov	r1, r7
 8015f78:	2200      	movs	r2, #0
 8015f7a:	4b3e      	ldr	r3, [pc, #248]	; (8016074 <_strtod_l+0xb24>)
 8015f7c:	f7ea fb54 	bl	8000628 <__aeabi_dmul>
 8015f80:	4606      	mov	r6, r0
 8015f82:	460f      	mov	r7, r1
 8015f84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015f88:	9618      	str	r6, [sp, #96]	; 0x60
 8015f8a:	9319      	str	r3, [sp, #100]	; 0x64
 8015f8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015f90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015f94:	e79c      	b.n	8015ed0 <_strtod_l+0x980>
 8015f96:	f1ba 0f01 	cmp.w	sl, #1
 8015f9a:	d102      	bne.n	8015fa2 <_strtod_l+0xa52>
 8015f9c:	2d00      	cmp	r5, #0
 8015f9e:	f43f ad8e 	beq.w	8015abe <_strtod_l+0x56e>
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	4b34      	ldr	r3, [pc, #208]	; (8016078 <_strtod_l+0xb28>)
 8015fa6:	e78f      	b.n	8015ec8 <_strtod_l+0x978>
 8015fa8:	2600      	movs	r6, #0
 8015faa:	4f32      	ldr	r7, [pc, #200]	; (8016074 <_strtod_l+0xb24>)
 8015fac:	e7ea      	b.n	8015f84 <_strtod_l+0xa34>
 8015fae:	4b31      	ldr	r3, [pc, #196]	; (8016074 <_strtod_l+0xb24>)
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	f7ea fb37 	bl	8000628 <__aeabi_dmul>
 8015fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	460f      	mov	r7, r1
 8015fc0:	b933      	cbnz	r3, 8015fd0 <_strtod_l+0xa80>
 8015fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fc6:	9010      	str	r0, [sp, #64]	; 0x40
 8015fc8:	9311      	str	r3, [sp, #68]	; 0x44
 8015fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015fce:	e7df      	b.n	8015f90 <_strtod_l+0xa40>
 8015fd0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015fd4:	e7f9      	b.n	8015fca <_strtod_l+0xa7a>
 8015fd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015fda:	9b04      	ldr	r3, [sp, #16]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1ab      	bne.n	8015f38 <_strtod_l+0x9e8>
 8015fe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015fe4:	0d1b      	lsrs	r3, r3, #20
 8015fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fe8:	051b      	lsls	r3, r3, #20
 8015fea:	429a      	cmp	r2, r3
 8015fec:	465d      	mov	r5, fp
 8015fee:	d1a3      	bne.n	8015f38 <_strtod_l+0x9e8>
 8015ff0:	4639      	mov	r1, r7
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	f7ea fdc8 	bl	8000b88 <__aeabi_d2iz>
 8015ff8:	f7ea faac 	bl	8000554 <__aeabi_i2d>
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	4602      	mov	r2, r0
 8016000:	4639      	mov	r1, r7
 8016002:	4630      	mov	r0, r6
 8016004:	f7ea f958 	bl	80002b8 <__aeabi_dsub>
 8016008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801600a:	4606      	mov	r6, r0
 801600c:	460f      	mov	r7, r1
 801600e:	b933      	cbnz	r3, 801601e <_strtod_l+0xace>
 8016010:	f1ba 0f00 	cmp.w	sl, #0
 8016014:	d103      	bne.n	801601e <_strtod_l+0xace>
 8016016:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801601a:	2d00      	cmp	r5, #0
 801601c:	d06d      	beq.n	80160fa <_strtod_l+0xbaa>
 801601e:	a30a      	add	r3, pc, #40	; (adr r3, 8016048 <_strtod_l+0xaf8>)
 8016020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016024:	4630      	mov	r0, r6
 8016026:	4639      	mov	r1, r7
 8016028:	f7ea fd70 	bl	8000b0c <__aeabi_dcmplt>
 801602c:	2800      	cmp	r0, #0
 801602e:	f47f acb8 	bne.w	80159a2 <_strtod_l+0x452>
 8016032:	a307      	add	r3, pc, #28	; (adr r3, 8016050 <_strtod_l+0xb00>)
 8016034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016038:	4630      	mov	r0, r6
 801603a:	4639      	mov	r1, r7
 801603c:	f7ea fd84 	bl	8000b48 <__aeabi_dcmpgt>
 8016040:	2800      	cmp	r0, #0
 8016042:	f43f af79 	beq.w	8015f38 <_strtod_l+0x9e8>
 8016046:	e4ac      	b.n	80159a2 <_strtod_l+0x452>
 8016048:	94a03595 	.word	0x94a03595
 801604c:	3fdfffff 	.word	0x3fdfffff
 8016050:	35afe535 	.word	0x35afe535
 8016054:	3fe00000 	.word	0x3fe00000
 8016058:	000fffff 	.word	0x000fffff
 801605c:	7ff00000 	.word	0x7ff00000
 8016060:	7fefffff 	.word	0x7fefffff
 8016064:	39500000 	.word	0x39500000
 8016068:	3ff00000 	.word	0x3ff00000
 801606c:	7fe00000 	.word	0x7fe00000
 8016070:	7c9fffff 	.word	0x7c9fffff
 8016074:	3fe00000 	.word	0x3fe00000
 8016078:	bff00000 	.word	0xbff00000
 801607c:	9b04      	ldr	r3, [sp, #16]
 801607e:	b333      	cbz	r3, 80160ce <_strtod_l+0xb7e>
 8016080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016082:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016086:	d822      	bhi.n	80160ce <_strtod_l+0xb7e>
 8016088:	a327      	add	r3, pc, #156	; (adr r3, 8016128 <_strtod_l+0xbd8>)
 801608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608e:	4630      	mov	r0, r6
 8016090:	4639      	mov	r1, r7
 8016092:	f7ea fd45 	bl	8000b20 <__aeabi_dcmple>
 8016096:	b1a0      	cbz	r0, 80160c2 <_strtod_l+0xb72>
 8016098:	4639      	mov	r1, r7
 801609a:	4630      	mov	r0, r6
 801609c:	f7ea fd9c 	bl	8000bd8 <__aeabi_d2uiz>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	bf08      	it	eq
 80160a4:	2001      	moveq	r0, #1
 80160a6:	f7ea fa45 	bl	8000534 <__aeabi_ui2d>
 80160aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160ac:	4606      	mov	r6, r0
 80160ae:	460f      	mov	r7, r1
 80160b0:	bb03      	cbnz	r3, 80160f4 <_strtod_l+0xba4>
 80160b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80160b6:	9012      	str	r0, [sp, #72]	; 0x48
 80160b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80160ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80160be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80160ca:	1a9b      	subs	r3, r3, r2
 80160cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80160ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80160d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80160d6:	f001 fd6b 	bl	8017bb0 <__ulp>
 80160da:	4650      	mov	r0, sl
 80160dc:	ec53 2b10 	vmov	r2, r3, d0
 80160e0:	4659      	mov	r1, fp
 80160e2:	f7ea faa1 	bl	8000628 <__aeabi_dmul>
 80160e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160ea:	f7ea f8e7 	bl	80002bc <__adddf3>
 80160ee:	4682      	mov	sl, r0
 80160f0:	468b      	mov	fp, r1
 80160f2:	e772      	b.n	8015fda <_strtod_l+0xa8a>
 80160f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80160f8:	e7df      	b.n	80160ba <_strtod_l+0xb6a>
 80160fa:	a30d      	add	r3, pc, #52	; (adr r3, 8016130 <_strtod_l+0xbe0>)
 80160fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016100:	f7ea fd04 	bl	8000b0c <__aeabi_dcmplt>
 8016104:	e79c      	b.n	8016040 <_strtod_l+0xaf0>
 8016106:	2300      	movs	r3, #0
 8016108:	930d      	str	r3, [sp, #52]	; 0x34
 801610a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801610c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801610e:	6013      	str	r3, [r2, #0]
 8016110:	f7ff ba61 	b.w	80155d6 <_strtod_l+0x86>
 8016114:	2b65      	cmp	r3, #101	; 0x65
 8016116:	f04f 0200 	mov.w	r2, #0
 801611a:	f43f ab4e 	beq.w	80157ba <_strtod_l+0x26a>
 801611e:	2101      	movs	r1, #1
 8016120:	4614      	mov	r4, r2
 8016122:	9104      	str	r1, [sp, #16]
 8016124:	f7ff bacb 	b.w	80156be <_strtod_l+0x16e>
 8016128:	ffc00000 	.word	0xffc00000
 801612c:	41dfffff 	.word	0x41dfffff
 8016130:	94a03595 	.word	0x94a03595
 8016134:	3fcfffff 	.word	0x3fcfffff

08016138 <_strtod_r>:
 8016138:	4b05      	ldr	r3, [pc, #20]	; (8016150 <_strtod_r+0x18>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	b410      	push	{r4}
 801613e:	6a1b      	ldr	r3, [r3, #32]
 8016140:	4c04      	ldr	r4, [pc, #16]	; (8016154 <_strtod_r+0x1c>)
 8016142:	2b00      	cmp	r3, #0
 8016144:	bf08      	it	eq
 8016146:	4623      	moveq	r3, r4
 8016148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801614c:	f7ff ba00 	b.w	8015550 <_strtod_l>
 8016150:	2000000c 	.word	0x2000000c
 8016154:	20000070 	.word	0x20000070

08016158 <_strtol_l.isra.0>:
 8016158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801615c:	4680      	mov	r8, r0
 801615e:	4689      	mov	r9, r1
 8016160:	4692      	mov	sl, r2
 8016162:	461e      	mov	r6, r3
 8016164:	460f      	mov	r7, r1
 8016166:	463d      	mov	r5, r7
 8016168:	9808      	ldr	r0, [sp, #32]
 801616a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801616e:	f001 fa0d 	bl	801758c <__locale_ctype_ptr_l>
 8016172:	4420      	add	r0, r4
 8016174:	7843      	ldrb	r3, [r0, #1]
 8016176:	f013 0308 	ands.w	r3, r3, #8
 801617a:	d132      	bne.n	80161e2 <_strtol_l.isra.0+0x8a>
 801617c:	2c2d      	cmp	r4, #45	; 0x2d
 801617e:	d132      	bne.n	80161e6 <_strtol_l.isra.0+0x8e>
 8016180:	787c      	ldrb	r4, [r7, #1]
 8016182:	1cbd      	adds	r5, r7, #2
 8016184:	2201      	movs	r2, #1
 8016186:	2e00      	cmp	r6, #0
 8016188:	d05d      	beq.n	8016246 <_strtol_l.isra.0+0xee>
 801618a:	2e10      	cmp	r6, #16
 801618c:	d109      	bne.n	80161a2 <_strtol_l.isra.0+0x4a>
 801618e:	2c30      	cmp	r4, #48	; 0x30
 8016190:	d107      	bne.n	80161a2 <_strtol_l.isra.0+0x4a>
 8016192:	782b      	ldrb	r3, [r5, #0]
 8016194:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016198:	2b58      	cmp	r3, #88	; 0x58
 801619a:	d14f      	bne.n	801623c <_strtol_l.isra.0+0xe4>
 801619c:	786c      	ldrb	r4, [r5, #1]
 801619e:	2610      	movs	r6, #16
 80161a0:	3502      	adds	r5, #2
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	bf14      	ite	ne
 80161a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80161aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80161ae:	2700      	movs	r7, #0
 80161b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80161b4:	4638      	mov	r0, r7
 80161b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80161ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80161be:	2b09      	cmp	r3, #9
 80161c0:	d817      	bhi.n	80161f2 <_strtol_l.isra.0+0x9a>
 80161c2:	461c      	mov	r4, r3
 80161c4:	42a6      	cmp	r6, r4
 80161c6:	dd23      	ble.n	8016210 <_strtol_l.isra.0+0xb8>
 80161c8:	1c7b      	adds	r3, r7, #1
 80161ca:	d007      	beq.n	80161dc <_strtol_l.isra.0+0x84>
 80161cc:	4584      	cmp	ip, r0
 80161ce:	d31c      	bcc.n	801620a <_strtol_l.isra.0+0xb2>
 80161d0:	d101      	bne.n	80161d6 <_strtol_l.isra.0+0x7e>
 80161d2:	45a6      	cmp	lr, r4
 80161d4:	db19      	blt.n	801620a <_strtol_l.isra.0+0xb2>
 80161d6:	fb00 4006 	mla	r0, r0, r6, r4
 80161da:	2701      	movs	r7, #1
 80161dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161e0:	e7eb      	b.n	80161ba <_strtol_l.isra.0+0x62>
 80161e2:	462f      	mov	r7, r5
 80161e4:	e7bf      	b.n	8016166 <_strtol_l.isra.0+0xe>
 80161e6:	2c2b      	cmp	r4, #43	; 0x2b
 80161e8:	bf04      	itt	eq
 80161ea:	1cbd      	addeq	r5, r7, #2
 80161ec:	787c      	ldrbeq	r4, [r7, #1]
 80161ee:	461a      	mov	r2, r3
 80161f0:	e7c9      	b.n	8016186 <_strtol_l.isra.0+0x2e>
 80161f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80161f6:	2b19      	cmp	r3, #25
 80161f8:	d801      	bhi.n	80161fe <_strtol_l.isra.0+0xa6>
 80161fa:	3c37      	subs	r4, #55	; 0x37
 80161fc:	e7e2      	b.n	80161c4 <_strtol_l.isra.0+0x6c>
 80161fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016202:	2b19      	cmp	r3, #25
 8016204:	d804      	bhi.n	8016210 <_strtol_l.isra.0+0xb8>
 8016206:	3c57      	subs	r4, #87	; 0x57
 8016208:	e7dc      	b.n	80161c4 <_strtol_l.isra.0+0x6c>
 801620a:	f04f 37ff 	mov.w	r7, #4294967295
 801620e:	e7e5      	b.n	80161dc <_strtol_l.isra.0+0x84>
 8016210:	1c7b      	adds	r3, r7, #1
 8016212:	d108      	bne.n	8016226 <_strtol_l.isra.0+0xce>
 8016214:	2322      	movs	r3, #34	; 0x22
 8016216:	f8c8 3000 	str.w	r3, [r8]
 801621a:	4608      	mov	r0, r1
 801621c:	f1ba 0f00 	cmp.w	sl, #0
 8016220:	d107      	bne.n	8016232 <_strtol_l.isra.0+0xda>
 8016222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016226:	b102      	cbz	r2, 801622a <_strtol_l.isra.0+0xd2>
 8016228:	4240      	negs	r0, r0
 801622a:	f1ba 0f00 	cmp.w	sl, #0
 801622e:	d0f8      	beq.n	8016222 <_strtol_l.isra.0+0xca>
 8016230:	b10f      	cbz	r7, 8016236 <_strtol_l.isra.0+0xde>
 8016232:	f105 39ff 	add.w	r9, r5, #4294967295
 8016236:	f8ca 9000 	str.w	r9, [sl]
 801623a:	e7f2      	b.n	8016222 <_strtol_l.isra.0+0xca>
 801623c:	2430      	movs	r4, #48	; 0x30
 801623e:	2e00      	cmp	r6, #0
 8016240:	d1af      	bne.n	80161a2 <_strtol_l.isra.0+0x4a>
 8016242:	2608      	movs	r6, #8
 8016244:	e7ad      	b.n	80161a2 <_strtol_l.isra.0+0x4a>
 8016246:	2c30      	cmp	r4, #48	; 0x30
 8016248:	d0a3      	beq.n	8016192 <_strtol_l.isra.0+0x3a>
 801624a:	260a      	movs	r6, #10
 801624c:	e7a9      	b.n	80161a2 <_strtol_l.isra.0+0x4a>
	...

08016250 <_strtol_r>:
 8016250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016252:	4c06      	ldr	r4, [pc, #24]	; (801626c <_strtol_r+0x1c>)
 8016254:	4d06      	ldr	r5, [pc, #24]	; (8016270 <_strtol_r+0x20>)
 8016256:	6824      	ldr	r4, [r4, #0]
 8016258:	6a24      	ldr	r4, [r4, #32]
 801625a:	2c00      	cmp	r4, #0
 801625c:	bf08      	it	eq
 801625e:	462c      	moveq	r4, r5
 8016260:	9400      	str	r4, [sp, #0]
 8016262:	f7ff ff79 	bl	8016158 <_strtol_l.isra.0>
 8016266:	b003      	add	sp, #12
 8016268:	bd30      	pop	{r4, r5, pc}
 801626a:	bf00      	nop
 801626c:	2000000c 	.word	0x2000000c
 8016270:	20000070 	.word	0x20000070

08016274 <_vsiprintf_r>:
 8016274:	b500      	push	{lr}
 8016276:	b09b      	sub	sp, #108	; 0x6c
 8016278:	9100      	str	r1, [sp, #0]
 801627a:	9104      	str	r1, [sp, #16]
 801627c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016280:	9105      	str	r1, [sp, #20]
 8016282:	9102      	str	r1, [sp, #8]
 8016284:	4905      	ldr	r1, [pc, #20]	; (801629c <_vsiprintf_r+0x28>)
 8016286:	9103      	str	r1, [sp, #12]
 8016288:	4669      	mov	r1, sp
 801628a:	f001 fed5 	bl	8018038 <_svfiprintf_r>
 801628e:	9b00      	ldr	r3, [sp, #0]
 8016290:	2200      	movs	r2, #0
 8016292:	701a      	strb	r2, [r3, #0]
 8016294:	b01b      	add	sp, #108	; 0x6c
 8016296:	f85d fb04 	ldr.w	pc, [sp], #4
 801629a:	bf00      	nop
 801629c:	ffff0208 	.word	0xffff0208

080162a0 <vsiprintf>:
 80162a0:	4613      	mov	r3, r2
 80162a2:	460a      	mov	r2, r1
 80162a4:	4601      	mov	r1, r0
 80162a6:	4802      	ldr	r0, [pc, #8]	; (80162b0 <vsiprintf+0x10>)
 80162a8:	6800      	ldr	r0, [r0, #0]
 80162aa:	f7ff bfe3 	b.w	8016274 <_vsiprintf_r>
 80162ae:	bf00      	nop
 80162b0:	2000000c 	.word	0x2000000c

080162b4 <quorem>:
 80162b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b8:	6903      	ldr	r3, [r0, #16]
 80162ba:	690c      	ldr	r4, [r1, #16]
 80162bc:	42a3      	cmp	r3, r4
 80162be:	4680      	mov	r8, r0
 80162c0:	f2c0 8082 	blt.w	80163c8 <quorem+0x114>
 80162c4:	3c01      	subs	r4, #1
 80162c6:	f101 0714 	add.w	r7, r1, #20
 80162ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80162ce:	f100 0614 	add.w	r6, r0, #20
 80162d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80162d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80162da:	eb06 030c 	add.w	r3, r6, ip
 80162de:	3501      	adds	r5, #1
 80162e0:	eb07 090c 	add.w	r9, r7, ip
 80162e4:	9301      	str	r3, [sp, #4]
 80162e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80162ea:	b395      	cbz	r5, 8016352 <quorem+0x9e>
 80162ec:	f04f 0a00 	mov.w	sl, #0
 80162f0:	4638      	mov	r0, r7
 80162f2:	46b6      	mov	lr, r6
 80162f4:	46d3      	mov	fp, sl
 80162f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80162fa:	b293      	uxth	r3, r2
 80162fc:	fb05 a303 	mla	r3, r5, r3, sl
 8016300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016304:	b29b      	uxth	r3, r3
 8016306:	ebab 0303 	sub.w	r3, fp, r3
 801630a:	0c12      	lsrs	r2, r2, #16
 801630c:	f8de b000 	ldr.w	fp, [lr]
 8016310:	fb05 a202 	mla	r2, r5, r2, sl
 8016314:	fa13 f38b 	uxtah	r3, r3, fp
 8016318:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801631c:	fa1f fb82 	uxth.w	fp, r2
 8016320:	f8de 2000 	ldr.w	r2, [lr]
 8016324:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801632c:	b29b      	uxth	r3, r3
 801632e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016332:	4581      	cmp	r9, r0
 8016334:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016338:	f84e 3b04 	str.w	r3, [lr], #4
 801633c:	d2db      	bcs.n	80162f6 <quorem+0x42>
 801633e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016342:	b933      	cbnz	r3, 8016352 <quorem+0x9e>
 8016344:	9b01      	ldr	r3, [sp, #4]
 8016346:	3b04      	subs	r3, #4
 8016348:	429e      	cmp	r6, r3
 801634a:	461a      	mov	r2, r3
 801634c:	d330      	bcc.n	80163b0 <quorem+0xfc>
 801634e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016352:	4640      	mov	r0, r8
 8016354:	f001 fbb4 	bl	8017ac0 <__mcmp>
 8016358:	2800      	cmp	r0, #0
 801635a:	db25      	blt.n	80163a8 <quorem+0xf4>
 801635c:	3501      	adds	r5, #1
 801635e:	4630      	mov	r0, r6
 8016360:	f04f 0c00 	mov.w	ip, #0
 8016364:	f857 2b04 	ldr.w	r2, [r7], #4
 8016368:	f8d0 e000 	ldr.w	lr, [r0]
 801636c:	b293      	uxth	r3, r2
 801636e:	ebac 0303 	sub.w	r3, ip, r3
 8016372:	0c12      	lsrs	r2, r2, #16
 8016374:	fa13 f38e 	uxtah	r3, r3, lr
 8016378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801637c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016380:	b29b      	uxth	r3, r3
 8016382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016386:	45b9      	cmp	r9, r7
 8016388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801638c:	f840 3b04 	str.w	r3, [r0], #4
 8016390:	d2e8      	bcs.n	8016364 <quorem+0xb0>
 8016392:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016396:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801639a:	b92a      	cbnz	r2, 80163a8 <quorem+0xf4>
 801639c:	3b04      	subs	r3, #4
 801639e:	429e      	cmp	r6, r3
 80163a0:	461a      	mov	r2, r3
 80163a2:	d30b      	bcc.n	80163bc <quorem+0x108>
 80163a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80163a8:	4628      	mov	r0, r5
 80163aa:	b003      	add	sp, #12
 80163ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b0:	6812      	ldr	r2, [r2, #0]
 80163b2:	3b04      	subs	r3, #4
 80163b4:	2a00      	cmp	r2, #0
 80163b6:	d1ca      	bne.n	801634e <quorem+0x9a>
 80163b8:	3c01      	subs	r4, #1
 80163ba:	e7c5      	b.n	8016348 <quorem+0x94>
 80163bc:	6812      	ldr	r2, [r2, #0]
 80163be:	3b04      	subs	r3, #4
 80163c0:	2a00      	cmp	r2, #0
 80163c2:	d1ef      	bne.n	80163a4 <quorem+0xf0>
 80163c4:	3c01      	subs	r4, #1
 80163c6:	e7ea      	b.n	801639e <quorem+0xea>
 80163c8:	2000      	movs	r0, #0
 80163ca:	e7ee      	b.n	80163aa <quorem+0xf6>
 80163cc:	0000      	movs	r0, r0
	...

080163d0 <_dtoa_r>:
 80163d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d4:	ec57 6b10 	vmov	r6, r7, d0
 80163d8:	b097      	sub	sp, #92	; 0x5c
 80163da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80163dc:	9106      	str	r1, [sp, #24]
 80163de:	4604      	mov	r4, r0
 80163e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80163e2:	9312      	str	r3, [sp, #72]	; 0x48
 80163e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80163e8:	e9cd 6700 	strd	r6, r7, [sp]
 80163ec:	b93d      	cbnz	r5, 80163fe <_dtoa_r+0x2e>
 80163ee:	2010      	movs	r0, #16
 80163f0:	f001 f8ee 	bl	80175d0 <malloc>
 80163f4:	6260      	str	r0, [r4, #36]	; 0x24
 80163f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80163fa:	6005      	str	r5, [r0, #0]
 80163fc:	60c5      	str	r5, [r0, #12]
 80163fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016400:	6819      	ldr	r1, [r3, #0]
 8016402:	b151      	cbz	r1, 801641a <_dtoa_r+0x4a>
 8016404:	685a      	ldr	r2, [r3, #4]
 8016406:	604a      	str	r2, [r1, #4]
 8016408:	2301      	movs	r3, #1
 801640a:	4093      	lsls	r3, r2
 801640c:	608b      	str	r3, [r1, #8]
 801640e:	4620      	mov	r0, r4
 8016410:	f001 f937 	bl	8017682 <_Bfree>
 8016414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016416:	2200      	movs	r2, #0
 8016418:	601a      	str	r2, [r3, #0]
 801641a:	1e3b      	subs	r3, r7, #0
 801641c:	bfbb      	ittet	lt
 801641e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016422:	9301      	strlt	r3, [sp, #4]
 8016424:	2300      	movge	r3, #0
 8016426:	2201      	movlt	r2, #1
 8016428:	bfac      	ite	ge
 801642a:	f8c8 3000 	strge.w	r3, [r8]
 801642e:	f8c8 2000 	strlt.w	r2, [r8]
 8016432:	4baf      	ldr	r3, [pc, #700]	; (80166f0 <_dtoa_r+0x320>)
 8016434:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016438:	ea33 0308 	bics.w	r3, r3, r8
 801643c:	d114      	bne.n	8016468 <_dtoa_r+0x98>
 801643e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016440:	f242 730f 	movw	r3, #9999	; 0x270f
 8016444:	6013      	str	r3, [r2, #0]
 8016446:	9b00      	ldr	r3, [sp, #0]
 8016448:	b923      	cbnz	r3, 8016454 <_dtoa_r+0x84>
 801644a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801644e:	2800      	cmp	r0, #0
 8016450:	f000 8542 	beq.w	8016ed8 <_dtoa_r+0xb08>
 8016454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016456:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016704 <_dtoa_r+0x334>
 801645a:	2b00      	cmp	r3, #0
 801645c:	f000 8544 	beq.w	8016ee8 <_dtoa_r+0xb18>
 8016460:	f10b 0303 	add.w	r3, fp, #3
 8016464:	f000 bd3e 	b.w	8016ee4 <_dtoa_r+0xb14>
 8016468:	e9dd 6700 	ldrd	r6, r7, [sp]
 801646c:	2200      	movs	r2, #0
 801646e:	2300      	movs	r3, #0
 8016470:	4630      	mov	r0, r6
 8016472:	4639      	mov	r1, r7
 8016474:	f7ea fb40 	bl	8000af8 <__aeabi_dcmpeq>
 8016478:	4681      	mov	r9, r0
 801647a:	b168      	cbz	r0, 8016498 <_dtoa_r+0xc8>
 801647c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801647e:	2301      	movs	r3, #1
 8016480:	6013      	str	r3, [r2, #0]
 8016482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016484:	2b00      	cmp	r3, #0
 8016486:	f000 8524 	beq.w	8016ed2 <_dtoa_r+0xb02>
 801648a:	4b9a      	ldr	r3, [pc, #616]	; (80166f4 <_dtoa_r+0x324>)
 801648c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801648e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016492:	6013      	str	r3, [r2, #0]
 8016494:	f000 bd28 	b.w	8016ee8 <_dtoa_r+0xb18>
 8016498:	aa14      	add	r2, sp, #80	; 0x50
 801649a:	a915      	add	r1, sp, #84	; 0x54
 801649c:	ec47 6b10 	vmov	d0, r6, r7
 80164a0:	4620      	mov	r0, r4
 80164a2:	f001 fbfb 	bl	8017c9c <__d2b>
 80164a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80164aa:	9004      	str	r0, [sp, #16]
 80164ac:	2d00      	cmp	r5, #0
 80164ae:	d07c      	beq.n	80165aa <_dtoa_r+0x1da>
 80164b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80164b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80164b8:	46b2      	mov	sl, r6
 80164ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80164be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80164c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80164c6:	2200      	movs	r2, #0
 80164c8:	4b8b      	ldr	r3, [pc, #556]	; (80166f8 <_dtoa_r+0x328>)
 80164ca:	4650      	mov	r0, sl
 80164cc:	4659      	mov	r1, fp
 80164ce:	f7e9 fef3 	bl	80002b8 <__aeabi_dsub>
 80164d2:	a381      	add	r3, pc, #516	; (adr r3, 80166d8 <_dtoa_r+0x308>)
 80164d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d8:	f7ea f8a6 	bl	8000628 <__aeabi_dmul>
 80164dc:	a380      	add	r3, pc, #512	; (adr r3, 80166e0 <_dtoa_r+0x310>)
 80164de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e2:	f7e9 feeb 	bl	80002bc <__adddf3>
 80164e6:	4606      	mov	r6, r0
 80164e8:	4628      	mov	r0, r5
 80164ea:	460f      	mov	r7, r1
 80164ec:	f7ea f832 	bl	8000554 <__aeabi_i2d>
 80164f0:	a37d      	add	r3, pc, #500	; (adr r3, 80166e8 <_dtoa_r+0x318>)
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	f7ea f897 	bl	8000628 <__aeabi_dmul>
 80164fa:	4602      	mov	r2, r0
 80164fc:	460b      	mov	r3, r1
 80164fe:	4630      	mov	r0, r6
 8016500:	4639      	mov	r1, r7
 8016502:	f7e9 fedb 	bl	80002bc <__adddf3>
 8016506:	4606      	mov	r6, r0
 8016508:	460f      	mov	r7, r1
 801650a:	f7ea fb3d 	bl	8000b88 <__aeabi_d2iz>
 801650e:	2200      	movs	r2, #0
 8016510:	4682      	mov	sl, r0
 8016512:	2300      	movs	r3, #0
 8016514:	4630      	mov	r0, r6
 8016516:	4639      	mov	r1, r7
 8016518:	f7ea faf8 	bl	8000b0c <__aeabi_dcmplt>
 801651c:	b148      	cbz	r0, 8016532 <_dtoa_r+0x162>
 801651e:	4650      	mov	r0, sl
 8016520:	f7ea f818 	bl	8000554 <__aeabi_i2d>
 8016524:	4632      	mov	r2, r6
 8016526:	463b      	mov	r3, r7
 8016528:	f7ea fae6 	bl	8000af8 <__aeabi_dcmpeq>
 801652c:	b908      	cbnz	r0, 8016532 <_dtoa_r+0x162>
 801652e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016532:	f1ba 0f16 	cmp.w	sl, #22
 8016536:	d859      	bhi.n	80165ec <_dtoa_r+0x21c>
 8016538:	4970      	ldr	r1, [pc, #448]	; (80166fc <_dtoa_r+0x32c>)
 801653a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801653e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016546:	f7ea faff 	bl	8000b48 <__aeabi_dcmpgt>
 801654a:	2800      	cmp	r0, #0
 801654c:	d050      	beq.n	80165f0 <_dtoa_r+0x220>
 801654e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016552:	2300      	movs	r3, #0
 8016554:	930f      	str	r3, [sp, #60]	; 0x3c
 8016556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016558:	1b5d      	subs	r5, r3, r5
 801655a:	f1b5 0801 	subs.w	r8, r5, #1
 801655e:	bf49      	itett	mi
 8016560:	f1c5 0301 	rsbmi	r3, r5, #1
 8016564:	2300      	movpl	r3, #0
 8016566:	9305      	strmi	r3, [sp, #20]
 8016568:	f04f 0800 	movmi.w	r8, #0
 801656c:	bf58      	it	pl
 801656e:	9305      	strpl	r3, [sp, #20]
 8016570:	f1ba 0f00 	cmp.w	sl, #0
 8016574:	db3e      	blt.n	80165f4 <_dtoa_r+0x224>
 8016576:	2300      	movs	r3, #0
 8016578:	44d0      	add	r8, sl
 801657a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801657e:	9307      	str	r3, [sp, #28]
 8016580:	9b06      	ldr	r3, [sp, #24]
 8016582:	2b09      	cmp	r3, #9
 8016584:	f200 8090 	bhi.w	80166a8 <_dtoa_r+0x2d8>
 8016588:	2b05      	cmp	r3, #5
 801658a:	bfc4      	itt	gt
 801658c:	3b04      	subgt	r3, #4
 801658e:	9306      	strgt	r3, [sp, #24]
 8016590:	9b06      	ldr	r3, [sp, #24]
 8016592:	f1a3 0302 	sub.w	r3, r3, #2
 8016596:	bfcc      	ite	gt
 8016598:	2500      	movgt	r5, #0
 801659a:	2501      	movle	r5, #1
 801659c:	2b03      	cmp	r3, #3
 801659e:	f200 808f 	bhi.w	80166c0 <_dtoa_r+0x2f0>
 80165a2:	e8df f003 	tbb	[pc, r3]
 80165a6:	7f7d      	.short	0x7f7d
 80165a8:	7131      	.short	0x7131
 80165aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80165ae:	441d      	add	r5, r3
 80165b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80165b4:	2820      	cmp	r0, #32
 80165b6:	dd13      	ble.n	80165e0 <_dtoa_r+0x210>
 80165b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80165bc:	9b00      	ldr	r3, [sp, #0]
 80165be:	fa08 f800 	lsl.w	r8, r8, r0
 80165c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80165c6:	fa23 f000 	lsr.w	r0, r3, r0
 80165ca:	ea48 0000 	orr.w	r0, r8, r0
 80165ce:	f7e9 ffb1 	bl	8000534 <__aeabi_ui2d>
 80165d2:	2301      	movs	r3, #1
 80165d4:	4682      	mov	sl, r0
 80165d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80165da:	3d01      	subs	r5, #1
 80165dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80165de:	e772      	b.n	80164c6 <_dtoa_r+0xf6>
 80165e0:	9b00      	ldr	r3, [sp, #0]
 80165e2:	f1c0 0020 	rsb	r0, r0, #32
 80165e6:	fa03 f000 	lsl.w	r0, r3, r0
 80165ea:	e7f0      	b.n	80165ce <_dtoa_r+0x1fe>
 80165ec:	2301      	movs	r3, #1
 80165ee:	e7b1      	b.n	8016554 <_dtoa_r+0x184>
 80165f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80165f2:	e7b0      	b.n	8016556 <_dtoa_r+0x186>
 80165f4:	9b05      	ldr	r3, [sp, #20]
 80165f6:	eba3 030a 	sub.w	r3, r3, sl
 80165fa:	9305      	str	r3, [sp, #20]
 80165fc:	f1ca 0300 	rsb	r3, sl, #0
 8016600:	9307      	str	r3, [sp, #28]
 8016602:	2300      	movs	r3, #0
 8016604:	930e      	str	r3, [sp, #56]	; 0x38
 8016606:	e7bb      	b.n	8016580 <_dtoa_r+0x1b0>
 8016608:	2301      	movs	r3, #1
 801660a:	930a      	str	r3, [sp, #40]	; 0x28
 801660c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801660e:	2b00      	cmp	r3, #0
 8016610:	dd59      	ble.n	80166c6 <_dtoa_r+0x2f6>
 8016612:	9302      	str	r3, [sp, #8]
 8016614:	4699      	mov	r9, r3
 8016616:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016618:	2200      	movs	r2, #0
 801661a:	6072      	str	r2, [r6, #4]
 801661c:	2204      	movs	r2, #4
 801661e:	f102 0014 	add.w	r0, r2, #20
 8016622:	4298      	cmp	r0, r3
 8016624:	6871      	ldr	r1, [r6, #4]
 8016626:	d953      	bls.n	80166d0 <_dtoa_r+0x300>
 8016628:	4620      	mov	r0, r4
 801662a:	f000 fff6 	bl	801761a <_Balloc>
 801662e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016630:	6030      	str	r0, [r6, #0]
 8016632:	f1b9 0f0e 	cmp.w	r9, #14
 8016636:	f8d3 b000 	ldr.w	fp, [r3]
 801663a:	f200 80e6 	bhi.w	801680a <_dtoa_r+0x43a>
 801663e:	2d00      	cmp	r5, #0
 8016640:	f000 80e3 	beq.w	801680a <_dtoa_r+0x43a>
 8016644:	ed9d 7b00 	vldr	d7, [sp]
 8016648:	f1ba 0f00 	cmp.w	sl, #0
 801664c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016650:	dd74      	ble.n	801673c <_dtoa_r+0x36c>
 8016652:	4a2a      	ldr	r2, [pc, #168]	; (80166fc <_dtoa_r+0x32c>)
 8016654:	f00a 030f 	and.w	r3, sl, #15
 8016658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801665c:	ed93 7b00 	vldr	d7, [r3]
 8016660:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016664:	06f0      	lsls	r0, r6, #27
 8016666:	ed8d 7b08 	vstr	d7, [sp, #32]
 801666a:	d565      	bpl.n	8016738 <_dtoa_r+0x368>
 801666c:	4b24      	ldr	r3, [pc, #144]	; (8016700 <_dtoa_r+0x330>)
 801666e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016672:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016676:	f7ea f901 	bl	800087c <__aeabi_ddiv>
 801667a:	e9cd 0100 	strd	r0, r1, [sp]
 801667e:	f006 060f 	and.w	r6, r6, #15
 8016682:	2503      	movs	r5, #3
 8016684:	4f1e      	ldr	r7, [pc, #120]	; (8016700 <_dtoa_r+0x330>)
 8016686:	e04c      	b.n	8016722 <_dtoa_r+0x352>
 8016688:	2301      	movs	r3, #1
 801668a:	930a      	str	r3, [sp, #40]	; 0x28
 801668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801668e:	4453      	add	r3, sl
 8016690:	f103 0901 	add.w	r9, r3, #1
 8016694:	9302      	str	r3, [sp, #8]
 8016696:	464b      	mov	r3, r9
 8016698:	2b01      	cmp	r3, #1
 801669a:	bfb8      	it	lt
 801669c:	2301      	movlt	r3, #1
 801669e:	e7ba      	b.n	8016616 <_dtoa_r+0x246>
 80166a0:	2300      	movs	r3, #0
 80166a2:	e7b2      	b.n	801660a <_dtoa_r+0x23a>
 80166a4:	2300      	movs	r3, #0
 80166a6:	e7f0      	b.n	801668a <_dtoa_r+0x2ba>
 80166a8:	2501      	movs	r5, #1
 80166aa:	2300      	movs	r3, #0
 80166ac:	9306      	str	r3, [sp, #24]
 80166ae:	950a      	str	r5, [sp, #40]	; 0x28
 80166b0:	f04f 33ff 	mov.w	r3, #4294967295
 80166b4:	9302      	str	r3, [sp, #8]
 80166b6:	4699      	mov	r9, r3
 80166b8:	2200      	movs	r2, #0
 80166ba:	2312      	movs	r3, #18
 80166bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80166be:	e7aa      	b.n	8016616 <_dtoa_r+0x246>
 80166c0:	2301      	movs	r3, #1
 80166c2:	930a      	str	r3, [sp, #40]	; 0x28
 80166c4:	e7f4      	b.n	80166b0 <_dtoa_r+0x2e0>
 80166c6:	2301      	movs	r3, #1
 80166c8:	9302      	str	r3, [sp, #8]
 80166ca:	4699      	mov	r9, r3
 80166cc:	461a      	mov	r2, r3
 80166ce:	e7f5      	b.n	80166bc <_dtoa_r+0x2ec>
 80166d0:	3101      	adds	r1, #1
 80166d2:	6071      	str	r1, [r6, #4]
 80166d4:	0052      	lsls	r2, r2, #1
 80166d6:	e7a2      	b.n	801661e <_dtoa_r+0x24e>
 80166d8:	636f4361 	.word	0x636f4361
 80166dc:	3fd287a7 	.word	0x3fd287a7
 80166e0:	8b60c8b3 	.word	0x8b60c8b3
 80166e4:	3fc68a28 	.word	0x3fc68a28
 80166e8:	509f79fb 	.word	0x509f79fb
 80166ec:	3fd34413 	.word	0x3fd34413
 80166f0:	7ff00000 	.word	0x7ff00000
 80166f4:	080191f4 	.word	0x080191f4
 80166f8:	3ff80000 	.word	0x3ff80000
 80166fc:	080190f8 	.word	0x080190f8
 8016700:	080190d0 	.word	0x080190d0
 8016704:	080190c1 	.word	0x080190c1
 8016708:	07f1      	lsls	r1, r6, #31
 801670a:	d508      	bpl.n	801671e <_dtoa_r+0x34e>
 801670c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016714:	f7e9 ff88 	bl	8000628 <__aeabi_dmul>
 8016718:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801671c:	3501      	adds	r5, #1
 801671e:	1076      	asrs	r6, r6, #1
 8016720:	3708      	adds	r7, #8
 8016722:	2e00      	cmp	r6, #0
 8016724:	d1f0      	bne.n	8016708 <_dtoa_r+0x338>
 8016726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801672a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801672e:	f7ea f8a5 	bl	800087c <__aeabi_ddiv>
 8016732:	e9cd 0100 	strd	r0, r1, [sp]
 8016736:	e01a      	b.n	801676e <_dtoa_r+0x39e>
 8016738:	2502      	movs	r5, #2
 801673a:	e7a3      	b.n	8016684 <_dtoa_r+0x2b4>
 801673c:	f000 80a0 	beq.w	8016880 <_dtoa_r+0x4b0>
 8016740:	f1ca 0600 	rsb	r6, sl, #0
 8016744:	4b9f      	ldr	r3, [pc, #636]	; (80169c4 <_dtoa_r+0x5f4>)
 8016746:	4fa0      	ldr	r7, [pc, #640]	; (80169c8 <_dtoa_r+0x5f8>)
 8016748:	f006 020f 	and.w	r2, r6, #15
 801674c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016758:	f7e9 ff66 	bl	8000628 <__aeabi_dmul>
 801675c:	e9cd 0100 	strd	r0, r1, [sp]
 8016760:	1136      	asrs	r6, r6, #4
 8016762:	2300      	movs	r3, #0
 8016764:	2502      	movs	r5, #2
 8016766:	2e00      	cmp	r6, #0
 8016768:	d17f      	bne.n	801686a <_dtoa_r+0x49a>
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1e1      	bne.n	8016732 <_dtoa_r+0x362>
 801676e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016770:	2b00      	cmp	r3, #0
 8016772:	f000 8087 	beq.w	8016884 <_dtoa_r+0x4b4>
 8016776:	e9dd 6700 	ldrd	r6, r7, [sp]
 801677a:	2200      	movs	r2, #0
 801677c:	4b93      	ldr	r3, [pc, #588]	; (80169cc <_dtoa_r+0x5fc>)
 801677e:	4630      	mov	r0, r6
 8016780:	4639      	mov	r1, r7
 8016782:	f7ea f9c3 	bl	8000b0c <__aeabi_dcmplt>
 8016786:	2800      	cmp	r0, #0
 8016788:	d07c      	beq.n	8016884 <_dtoa_r+0x4b4>
 801678a:	f1b9 0f00 	cmp.w	r9, #0
 801678e:	d079      	beq.n	8016884 <_dtoa_r+0x4b4>
 8016790:	9b02      	ldr	r3, [sp, #8]
 8016792:	2b00      	cmp	r3, #0
 8016794:	dd35      	ble.n	8016802 <_dtoa_r+0x432>
 8016796:	f10a 33ff 	add.w	r3, sl, #4294967295
 801679a:	9308      	str	r3, [sp, #32]
 801679c:	4639      	mov	r1, r7
 801679e:	2200      	movs	r2, #0
 80167a0:	4b8b      	ldr	r3, [pc, #556]	; (80169d0 <_dtoa_r+0x600>)
 80167a2:	4630      	mov	r0, r6
 80167a4:	f7e9 ff40 	bl	8000628 <__aeabi_dmul>
 80167a8:	e9cd 0100 	strd	r0, r1, [sp]
 80167ac:	9f02      	ldr	r7, [sp, #8]
 80167ae:	3501      	adds	r5, #1
 80167b0:	4628      	mov	r0, r5
 80167b2:	f7e9 fecf 	bl	8000554 <__aeabi_i2d>
 80167b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167ba:	f7e9 ff35 	bl	8000628 <__aeabi_dmul>
 80167be:	2200      	movs	r2, #0
 80167c0:	4b84      	ldr	r3, [pc, #528]	; (80169d4 <_dtoa_r+0x604>)
 80167c2:	f7e9 fd7b 	bl	80002bc <__adddf3>
 80167c6:	4605      	mov	r5, r0
 80167c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80167cc:	2f00      	cmp	r7, #0
 80167ce:	d15d      	bne.n	801688c <_dtoa_r+0x4bc>
 80167d0:	2200      	movs	r2, #0
 80167d2:	4b81      	ldr	r3, [pc, #516]	; (80169d8 <_dtoa_r+0x608>)
 80167d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167d8:	f7e9 fd6e 	bl	80002b8 <__aeabi_dsub>
 80167dc:	462a      	mov	r2, r5
 80167de:	4633      	mov	r3, r6
 80167e0:	e9cd 0100 	strd	r0, r1, [sp]
 80167e4:	f7ea f9b0 	bl	8000b48 <__aeabi_dcmpgt>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	f040 8288 	bne.w	8016cfe <_dtoa_r+0x92e>
 80167ee:	462a      	mov	r2, r5
 80167f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80167f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167f8:	f7ea f988 	bl	8000b0c <__aeabi_dcmplt>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	f040 827c 	bne.w	8016cfa <_dtoa_r+0x92a>
 8016802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016806:	e9cd 2300 	strd	r2, r3, [sp]
 801680a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801680c:	2b00      	cmp	r3, #0
 801680e:	f2c0 8150 	blt.w	8016ab2 <_dtoa_r+0x6e2>
 8016812:	f1ba 0f0e 	cmp.w	sl, #14
 8016816:	f300 814c 	bgt.w	8016ab2 <_dtoa_r+0x6e2>
 801681a:	4b6a      	ldr	r3, [pc, #424]	; (80169c4 <_dtoa_r+0x5f4>)
 801681c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016820:	ed93 7b00 	vldr	d7, [r3]
 8016824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016826:	2b00      	cmp	r3, #0
 8016828:	ed8d 7b02 	vstr	d7, [sp, #8]
 801682c:	f280 80d8 	bge.w	80169e0 <_dtoa_r+0x610>
 8016830:	f1b9 0f00 	cmp.w	r9, #0
 8016834:	f300 80d4 	bgt.w	80169e0 <_dtoa_r+0x610>
 8016838:	f040 825e 	bne.w	8016cf8 <_dtoa_r+0x928>
 801683c:	2200      	movs	r2, #0
 801683e:	4b66      	ldr	r3, [pc, #408]	; (80169d8 <_dtoa_r+0x608>)
 8016840:	ec51 0b17 	vmov	r0, r1, d7
 8016844:	f7e9 fef0 	bl	8000628 <__aeabi_dmul>
 8016848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801684c:	f7ea f972 	bl	8000b34 <__aeabi_dcmpge>
 8016850:	464f      	mov	r7, r9
 8016852:	464e      	mov	r6, r9
 8016854:	2800      	cmp	r0, #0
 8016856:	f040 8234 	bne.w	8016cc2 <_dtoa_r+0x8f2>
 801685a:	2331      	movs	r3, #49	; 0x31
 801685c:	f10b 0501 	add.w	r5, fp, #1
 8016860:	f88b 3000 	strb.w	r3, [fp]
 8016864:	f10a 0a01 	add.w	sl, sl, #1
 8016868:	e22f      	b.n	8016cca <_dtoa_r+0x8fa>
 801686a:	07f2      	lsls	r2, r6, #31
 801686c:	d505      	bpl.n	801687a <_dtoa_r+0x4aa>
 801686e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016872:	f7e9 fed9 	bl	8000628 <__aeabi_dmul>
 8016876:	3501      	adds	r5, #1
 8016878:	2301      	movs	r3, #1
 801687a:	1076      	asrs	r6, r6, #1
 801687c:	3708      	adds	r7, #8
 801687e:	e772      	b.n	8016766 <_dtoa_r+0x396>
 8016880:	2502      	movs	r5, #2
 8016882:	e774      	b.n	801676e <_dtoa_r+0x39e>
 8016884:	f8cd a020 	str.w	sl, [sp, #32]
 8016888:	464f      	mov	r7, r9
 801688a:	e791      	b.n	80167b0 <_dtoa_r+0x3e0>
 801688c:	4b4d      	ldr	r3, [pc, #308]	; (80169c4 <_dtoa_r+0x5f4>)
 801688e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016892:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016898:	2b00      	cmp	r3, #0
 801689a:	d047      	beq.n	801692c <_dtoa_r+0x55c>
 801689c:	4602      	mov	r2, r0
 801689e:	460b      	mov	r3, r1
 80168a0:	2000      	movs	r0, #0
 80168a2:	494e      	ldr	r1, [pc, #312]	; (80169dc <_dtoa_r+0x60c>)
 80168a4:	f7e9 ffea 	bl	800087c <__aeabi_ddiv>
 80168a8:	462a      	mov	r2, r5
 80168aa:	4633      	mov	r3, r6
 80168ac:	f7e9 fd04 	bl	80002b8 <__aeabi_dsub>
 80168b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80168b4:	465d      	mov	r5, fp
 80168b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168ba:	f7ea f965 	bl	8000b88 <__aeabi_d2iz>
 80168be:	4606      	mov	r6, r0
 80168c0:	f7e9 fe48 	bl	8000554 <__aeabi_i2d>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168cc:	f7e9 fcf4 	bl	80002b8 <__aeabi_dsub>
 80168d0:	3630      	adds	r6, #48	; 0x30
 80168d2:	f805 6b01 	strb.w	r6, [r5], #1
 80168d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80168da:	e9cd 0100 	strd	r0, r1, [sp]
 80168de:	f7ea f915 	bl	8000b0c <__aeabi_dcmplt>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d163      	bne.n	80169ae <_dtoa_r+0x5de>
 80168e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168ea:	2000      	movs	r0, #0
 80168ec:	4937      	ldr	r1, [pc, #220]	; (80169cc <_dtoa_r+0x5fc>)
 80168ee:	f7e9 fce3 	bl	80002b8 <__aeabi_dsub>
 80168f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80168f6:	f7ea f909 	bl	8000b0c <__aeabi_dcmplt>
 80168fa:	2800      	cmp	r0, #0
 80168fc:	f040 80b7 	bne.w	8016a6e <_dtoa_r+0x69e>
 8016900:	eba5 030b 	sub.w	r3, r5, fp
 8016904:	429f      	cmp	r7, r3
 8016906:	f77f af7c 	ble.w	8016802 <_dtoa_r+0x432>
 801690a:	2200      	movs	r2, #0
 801690c:	4b30      	ldr	r3, [pc, #192]	; (80169d0 <_dtoa_r+0x600>)
 801690e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016912:	f7e9 fe89 	bl	8000628 <__aeabi_dmul>
 8016916:	2200      	movs	r2, #0
 8016918:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801691c:	4b2c      	ldr	r3, [pc, #176]	; (80169d0 <_dtoa_r+0x600>)
 801691e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016922:	f7e9 fe81 	bl	8000628 <__aeabi_dmul>
 8016926:	e9cd 0100 	strd	r0, r1, [sp]
 801692a:	e7c4      	b.n	80168b6 <_dtoa_r+0x4e6>
 801692c:	462a      	mov	r2, r5
 801692e:	4633      	mov	r3, r6
 8016930:	f7e9 fe7a 	bl	8000628 <__aeabi_dmul>
 8016934:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016938:	eb0b 0507 	add.w	r5, fp, r7
 801693c:	465e      	mov	r6, fp
 801693e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016942:	f7ea f921 	bl	8000b88 <__aeabi_d2iz>
 8016946:	4607      	mov	r7, r0
 8016948:	f7e9 fe04 	bl	8000554 <__aeabi_i2d>
 801694c:	3730      	adds	r7, #48	; 0x30
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016956:	f7e9 fcaf 	bl	80002b8 <__aeabi_dsub>
 801695a:	f806 7b01 	strb.w	r7, [r6], #1
 801695e:	42ae      	cmp	r6, r5
 8016960:	e9cd 0100 	strd	r0, r1, [sp]
 8016964:	f04f 0200 	mov.w	r2, #0
 8016968:	d126      	bne.n	80169b8 <_dtoa_r+0x5e8>
 801696a:	4b1c      	ldr	r3, [pc, #112]	; (80169dc <_dtoa_r+0x60c>)
 801696c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016970:	f7e9 fca4 	bl	80002bc <__adddf3>
 8016974:	4602      	mov	r2, r0
 8016976:	460b      	mov	r3, r1
 8016978:	e9dd 0100 	ldrd	r0, r1, [sp]
 801697c:	f7ea f8e4 	bl	8000b48 <__aeabi_dcmpgt>
 8016980:	2800      	cmp	r0, #0
 8016982:	d174      	bne.n	8016a6e <_dtoa_r+0x69e>
 8016984:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016988:	2000      	movs	r0, #0
 801698a:	4914      	ldr	r1, [pc, #80]	; (80169dc <_dtoa_r+0x60c>)
 801698c:	f7e9 fc94 	bl	80002b8 <__aeabi_dsub>
 8016990:	4602      	mov	r2, r0
 8016992:	460b      	mov	r3, r1
 8016994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016998:	f7ea f8b8 	bl	8000b0c <__aeabi_dcmplt>
 801699c:	2800      	cmp	r0, #0
 801699e:	f43f af30 	beq.w	8016802 <_dtoa_r+0x432>
 80169a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80169a6:	2b30      	cmp	r3, #48	; 0x30
 80169a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80169ac:	d002      	beq.n	80169b4 <_dtoa_r+0x5e4>
 80169ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80169b2:	e04a      	b.n	8016a4a <_dtoa_r+0x67a>
 80169b4:	4615      	mov	r5, r2
 80169b6:	e7f4      	b.n	80169a2 <_dtoa_r+0x5d2>
 80169b8:	4b05      	ldr	r3, [pc, #20]	; (80169d0 <_dtoa_r+0x600>)
 80169ba:	f7e9 fe35 	bl	8000628 <__aeabi_dmul>
 80169be:	e9cd 0100 	strd	r0, r1, [sp]
 80169c2:	e7bc      	b.n	801693e <_dtoa_r+0x56e>
 80169c4:	080190f8 	.word	0x080190f8
 80169c8:	080190d0 	.word	0x080190d0
 80169cc:	3ff00000 	.word	0x3ff00000
 80169d0:	40240000 	.word	0x40240000
 80169d4:	401c0000 	.word	0x401c0000
 80169d8:	40140000 	.word	0x40140000
 80169dc:	3fe00000 	.word	0x3fe00000
 80169e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80169e4:	465d      	mov	r5, fp
 80169e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80169ea:	4630      	mov	r0, r6
 80169ec:	4639      	mov	r1, r7
 80169ee:	f7e9 ff45 	bl	800087c <__aeabi_ddiv>
 80169f2:	f7ea f8c9 	bl	8000b88 <__aeabi_d2iz>
 80169f6:	4680      	mov	r8, r0
 80169f8:	f7e9 fdac 	bl	8000554 <__aeabi_i2d>
 80169fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a00:	f7e9 fe12 	bl	8000628 <__aeabi_dmul>
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	4630      	mov	r0, r6
 8016a0a:	4639      	mov	r1, r7
 8016a0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016a10:	f7e9 fc52 	bl	80002b8 <__aeabi_dsub>
 8016a14:	f805 6b01 	strb.w	r6, [r5], #1
 8016a18:	eba5 060b 	sub.w	r6, r5, fp
 8016a1c:	45b1      	cmp	r9, r6
 8016a1e:	4602      	mov	r2, r0
 8016a20:	460b      	mov	r3, r1
 8016a22:	d139      	bne.n	8016a98 <_dtoa_r+0x6c8>
 8016a24:	f7e9 fc4a 	bl	80002bc <__adddf3>
 8016a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	460f      	mov	r7, r1
 8016a30:	f7ea f88a 	bl	8000b48 <__aeabi_dcmpgt>
 8016a34:	b9c8      	cbnz	r0, 8016a6a <_dtoa_r+0x69a>
 8016a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a3a:	4630      	mov	r0, r6
 8016a3c:	4639      	mov	r1, r7
 8016a3e:	f7ea f85b 	bl	8000af8 <__aeabi_dcmpeq>
 8016a42:	b110      	cbz	r0, 8016a4a <_dtoa_r+0x67a>
 8016a44:	f018 0f01 	tst.w	r8, #1
 8016a48:	d10f      	bne.n	8016a6a <_dtoa_r+0x69a>
 8016a4a:	9904      	ldr	r1, [sp, #16]
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f000 fe18 	bl	8017682 <_Bfree>
 8016a52:	2300      	movs	r3, #0
 8016a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a56:	702b      	strb	r3, [r5, #0]
 8016a58:	f10a 0301 	add.w	r3, sl, #1
 8016a5c:	6013      	str	r3, [r2, #0]
 8016a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f000 8241 	beq.w	8016ee8 <_dtoa_r+0xb18>
 8016a66:	601d      	str	r5, [r3, #0]
 8016a68:	e23e      	b.n	8016ee8 <_dtoa_r+0xb18>
 8016a6a:	f8cd a020 	str.w	sl, [sp, #32]
 8016a6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016a72:	2a39      	cmp	r2, #57	; 0x39
 8016a74:	f105 33ff 	add.w	r3, r5, #4294967295
 8016a78:	d108      	bne.n	8016a8c <_dtoa_r+0x6bc>
 8016a7a:	459b      	cmp	fp, r3
 8016a7c:	d10a      	bne.n	8016a94 <_dtoa_r+0x6c4>
 8016a7e:	9b08      	ldr	r3, [sp, #32]
 8016a80:	3301      	adds	r3, #1
 8016a82:	9308      	str	r3, [sp, #32]
 8016a84:	2330      	movs	r3, #48	; 0x30
 8016a86:	f88b 3000 	strb.w	r3, [fp]
 8016a8a:	465b      	mov	r3, fp
 8016a8c:	781a      	ldrb	r2, [r3, #0]
 8016a8e:	3201      	adds	r2, #1
 8016a90:	701a      	strb	r2, [r3, #0]
 8016a92:	e78c      	b.n	80169ae <_dtoa_r+0x5de>
 8016a94:	461d      	mov	r5, r3
 8016a96:	e7ea      	b.n	8016a6e <_dtoa_r+0x69e>
 8016a98:	2200      	movs	r2, #0
 8016a9a:	4b9b      	ldr	r3, [pc, #620]	; (8016d08 <_dtoa_r+0x938>)
 8016a9c:	f7e9 fdc4 	bl	8000628 <__aeabi_dmul>
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	4606      	mov	r6, r0
 8016aa6:	460f      	mov	r7, r1
 8016aa8:	f7ea f826 	bl	8000af8 <__aeabi_dcmpeq>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d09a      	beq.n	80169e6 <_dtoa_r+0x616>
 8016ab0:	e7cb      	b.n	8016a4a <_dtoa_r+0x67a>
 8016ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	f000 808b 	beq.w	8016bd0 <_dtoa_r+0x800>
 8016aba:	9a06      	ldr	r2, [sp, #24]
 8016abc:	2a01      	cmp	r2, #1
 8016abe:	dc6e      	bgt.n	8016b9e <_dtoa_r+0x7ce>
 8016ac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016ac2:	2a00      	cmp	r2, #0
 8016ac4:	d067      	beq.n	8016b96 <_dtoa_r+0x7c6>
 8016ac6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016aca:	9f07      	ldr	r7, [sp, #28]
 8016acc:	9d05      	ldr	r5, [sp, #20]
 8016ace:	9a05      	ldr	r2, [sp, #20]
 8016ad0:	2101      	movs	r1, #1
 8016ad2:	441a      	add	r2, r3
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	9205      	str	r2, [sp, #20]
 8016ad8:	4498      	add	r8, r3
 8016ada:	f000 feb0 	bl	801783e <__i2b>
 8016ade:	4606      	mov	r6, r0
 8016ae0:	2d00      	cmp	r5, #0
 8016ae2:	dd0c      	ble.n	8016afe <_dtoa_r+0x72e>
 8016ae4:	f1b8 0f00 	cmp.w	r8, #0
 8016ae8:	dd09      	ble.n	8016afe <_dtoa_r+0x72e>
 8016aea:	4545      	cmp	r5, r8
 8016aec:	9a05      	ldr	r2, [sp, #20]
 8016aee:	462b      	mov	r3, r5
 8016af0:	bfa8      	it	ge
 8016af2:	4643      	movge	r3, r8
 8016af4:	1ad2      	subs	r2, r2, r3
 8016af6:	9205      	str	r2, [sp, #20]
 8016af8:	1aed      	subs	r5, r5, r3
 8016afa:	eba8 0803 	sub.w	r8, r8, r3
 8016afe:	9b07      	ldr	r3, [sp, #28]
 8016b00:	b1eb      	cbz	r3, 8016b3e <_dtoa_r+0x76e>
 8016b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d067      	beq.n	8016bd8 <_dtoa_r+0x808>
 8016b08:	b18f      	cbz	r7, 8016b2e <_dtoa_r+0x75e>
 8016b0a:	4631      	mov	r1, r6
 8016b0c:	463a      	mov	r2, r7
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f000 ff34 	bl	801797c <__pow5mult>
 8016b14:	9a04      	ldr	r2, [sp, #16]
 8016b16:	4601      	mov	r1, r0
 8016b18:	4606      	mov	r6, r0
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f000 fe98 	bl	8017850 <__multiply>
 8016b20:	9904      	ldr	r1, [sp, #16]
 8016b22:	9008      	str	r0, [sp, #32]
 8016b24:	4620      	mov	r0, r4
 8016b26:	f000 fdac 	bl	8017682 <_Bfree>
 8016b2a:	9b08      	ldr	r3, [sp, #32]
 8016b2c:	9304      	str	r3, [sp, #16]
 8016b2e:	9b07      	ldr	r3, [sp, #28]
 8016b30:	1bda      	subs	r2, r3, r7
 8016b32:	d004      	beq.n	8016b3e <_dtoa_r+0x76e>
 8016b34:	9904      	ldr	r1, [sp, #16]
 8016b36:	4620      	mov	r0, r4
 8016b38:	f000 ff20 	bl	801797c <__pow5mult>
 8016b3c:	9004      	str	r0, [sp, #16]
 8016b3e:	2101      	movs	r1, #1
 8016b40:	4620      	mov	r0, r4
 8016b42:	f000 fe7c 	bl	801783e <__i2b>
 8016b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b48:	4607      	mov	r7, r0
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	f000 81d0 	beq.w	8016ef0 <_dtoa_r+0xb20>
 8016b50:	461a      	mov	r2, r3
 8016b52:	4601      	mov	r1, r0
 8016b54:	4620      	mov	r0, r4
 8016b56:	f000 ff11 	bl	801797c <__pow5mult>
 8016b5a:	9b06      	ldr	r3, [sp, #24]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	4607      	mov	r7, r0
 8016b60:	dc40      	bgt.n	8016be4 <_dtoa_r+0x814>
 8016b62:	9b00      	ldr	r3, [sp, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d139      	bne.n	8016bdc <_dtoa_r+0x80c>
 8016b68:	9b01      	ldr	r3, [sp, #4]
 8016b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d136      	bne.n	8016be0 <_dtoa_r+0x810>
 8016b72:	9b01      	ldr	r3, [sp, #4]
 8016b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016b78:	0d1b      	lsrs	r3, r3, #20
 8016b7a:	051b      	lsls	r3, r3, #20
 8016b7c:	b12b      	cbz	r3, 8016b8a <_dtoa_r+0x7ba>
 8016b7e:	9b05      	ldr	r3, [sp, #20]
 8016b80:	3301      	adds	r3, #1
 8016b82:	9305      	str	r3, [sp, #20]
 8016b84:	f108 0801 	add.w	r8, r8, #1
 8016b88:	2301      	movs	r3, #1
 8016b8a:	9307      	str	r3, [sp, #28]
 8016b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d12a      	bne.n	8016be8 <_dtoa_r+0x818>
 8016b92:	2001      	movs	r0, #1
 8016b94:	e030      	b.n	8016bf8 <_dtoa_r+0x828>
 8016b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016b9c:	e795      	b.n	8016aca <_dtoa_r+0x6fa>
 8016b9e:	9b07      	ldr	r3, [sp, #28]
 8016ba0:	f109 37ff 	add.w	r7, r9, #4294967295
 8016ba4:	42bb      	cmp	r3, r7
 8016ba6:	bfbf      	itttt	lt
 8016ba8:	9b07      	ldrlt	r3, [sp, #28]
 8016baa:	9707      	strlt	r7, [sp, #28]
 8016bac:	1afa      	sublt	r2, r7, r3
 8016bae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016bb0:	bfbb      	ittet	lt
 8016bb2:	189b      	addlt	r3, r3, r2
 8016bb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016bb6:	1bdf      	subge	r7, r3, r7
 8016bb8:	2700      	movlt	r7, #0
 8016bba:	f1b9 0f00 	cmp.w	r9, #0
 8016bbe:	bfb5      	itete	lt
 8016bc0:	9b05      	ldrlt	r3, [sp, #20]
 8016bc2:	9d05      	ldrge	r5, [sp, #20]
 8016bc4:	eba3 0509 	sublt.w	r5, r3, r9
 8016bc8:	464b      	movge	r3, r9
 8016bca:	bfb8      	it	lt
 8016bcc:	2300      	movlt	r3, #0
 8016bce:	e77e      	b.n	8016ace <_dtoa_r+0x6fe>
 8016bd0:	9f07      	ldr	r7, [sp, #28]
 8016bd2:	9d05      	ldr	r5, [sp, #20]
 8016bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016bd6:	e783      	b.n	8016ae0 <_dtoa_r+0x710>
 8016bd8:	9a07      	ldr	r2, [sp, #28]
 8016bda:	e7ab      	b.n	8016b34 <_dtoa_r+0x764>
 8016bdc:	2300      	movs	r3, #0
 8016bde:	e7d4      	b.n	8016b8a <_dtoa_r+0x7ba>
 8016be0:	9b00      	ldr	r3, [sp, #0]
 8016be2:	e7d2      	b.n	8016b8a <_dtoa_r+0x7ba>
 8016be4:	2300      	movs	r3, #0
 8016be6:	9307      	str	r3, [sp, #28]
 8016be8:	693b      	ldr	r3, [r7, #16]
 8016bea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016bee:	6918      	ldr	r0, [r3, #16]
 8016bf0:	f000 fdd7 	bl	80177a2 <__hi0bits>
 8016bf4:	f1c0 0020 	rsb	r0, r0, #32
 8016bf8:	4440      	add	r0, r8
 8016bfa:	f010 001f 	ands.w	r0, r0, #31
 8016bfe:	d047      	beq.n	8016c90 <_dtoa_r+0x8c0>
 8016c00:	f1c0 0320 	rsb	r3, r0, #32
 8016c04:	2b04      	cmp	r3, #4
 8016c06:	dd3b      	ble.n	8016c80 <_dtoa_r+0x8b0>
 8016c08:	9b05      	ldr	r3, [sp, #20]
 8016c0a:	f1c0 001c 	rsb	r0, r0, #28
 8016c0e:	4403      	add	r3, r0
 8016c10:	9305      	str	r3, [sp, #20]
 8016c12:	4405      	add	r5, r0
 8016c14:	4480      	add	r8, r0
 8016c16:	9b05      	ldr	r3, [sp, #20]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	dd05      	ble.n	8016c28 <_dtoa_r+0x858>
 8016c1c:	461a      	mov	r2, r3
 8016c1e:	9904      	ldr	r1, [sp, #16]
 8016c20:	4620      	mov	r0, r4
 8016c22:	f000 fef9 	bl	8017a18 <__lshift>
 8016c26:	9004      	str	r0, [sp, #16]
 8016c28:	f1b8 0f00 	cmp.w	r8, #0
 8016c2c:	dd05      	ble.n	8016c3a <_dtoa_r+0x86a>
 8016c2e:	4639      	mov	r1, r7
 8016c30:	4642      	mov	r2, r8
 8016c32:	4620      	mov	r0, r4
 8016c34:	f000 fef0 	bl	8017a18 <__lshift>
 8016c38:	4607      	mov	r7, r0
 8016c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c3c:	b353      	cbz	r3, 8016c94 <_dtoa_r+0x8c4>
 8016c3e:	4639      	mov	r1, r7
 8016c40:	9804      	ldr	r0, [sp, #16]
 8016c42:	f000 ff3d 	bl	8017ac0 <__mcmp>
 8016c46:	2800      	cmp	r0, #0
 8016c48:	da24      	bge.n	8016c94 <_dtoa_r+0x8c4>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	220a      	movs	r2, #10
 8016c4e:	9904      	ldr	r1, [sp, #16]
 8016c50:	4620      	mov	r0, r4
 8016c52:	f000 fd2d 	bl	80176b0 <__multadd>
 8016c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c58:	9004      	str	r0, [sp, #16]
 8016c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	f000 814d 	beq.w	8016efe <_dtoa_r+0xb2e>
 8016c64:	2300      	movs	r3, #0
 8016c66:	4631      	mov	r1, r6
 8016c68:	220a      	movs	r2, #10
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	f000 fd20 	bl	80176b0 <__multadd>
 8016c70:	9b02      	ldr	r3, [sp, #8]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	4606      	mov	r6, r0
 8016c76:	dc4f      	bgt.n	8016d18 <_dtoa_r+0x948>
 8016c78:	9b06      	ldr	r3, [sp, #24]
 8016c7a:	2b02      	cmp	r3, #2
 8016c7c:	dd4c      	ble.n	8016d18 <_dtoa_r+0x948>
 8016c7e:	e011      	b.n	8016ca4 <_dtoa_r+0x8d4>
 8016c80:	d0c9      	beq.n	8016c16 <_dtoa_r+0x846>
 8016c82:	9a05      	ldr	r2, [sp, #20]
 8016c84:	331c      	adds	r3, #28
 8016c86:	441a      	add	r2, r3
 8016c88:	9205      	str	r2, [sp, #20]
 8016c8a:	441d      	add	r5, r3
 8016c8c:	4498      	add	r8, r3
 8016c8e:	e7c2      	b.n	8016c16 <_dtoa_r+0x846>
 8016c90:	4603      	mov	r3, r0
 8016c92:	e7f6      	b.n	8016c82 <_dtoa_r+0x8b2>
 8016c94:	f1b9 0f00 	cmp.w	r9, #0
 8016c98:	dc38      	bgt.n	8016d0c <_dtoa_r+0x93c>
 8016c9a:	9b06      	ldr	r3, [sp, #24]
 8016c9c:	2b02      	cmp	r3, #2
 8016c9e:	dd35      	ble.n	8016d0c <_dtoa_r+0x93c>
 8016ca0:	f8cd 9008 	str.w	r9, [sp, #8]
 8016ca4:	9b02      	ldr	r3, [sp, #8]
 8016ca6:	b963      	cbnz	r3, 8016cc2 <_dtoa_r+0x8f2>
 8016ca8:	4639      	mov	r1, r7
 8016caa:	2205      	movs	r2, #5
 8016cac:	4620      	mov	r0, r4
 8016cae:	f000 fcff 	bl	80176b0 <__multadd>
 8016cb2:	4601      	mov	r1, r0
 8016cb4:	4607      	mov	r7, r0
 8016cb6:	9804      	ldr	r0, [sp, #16]
 8016cb8:	f000 ff02 	bl	8017ac0 <__mcmp>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	f73f adcc 	bgt.w	801685a <_dtoa_r+0x48a>
 8016cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cc4:	465d      	mov	r5, fp
 8016cc6:	ea6f 0a03 	mvn.w	sl, r3
 8016cca:	f04f 0900 	mov.w	r9, #0
 8016cce:	4639      	mov	r1, r7
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	f000 fcd6 	bl	8017682 <_Bfree>
 8016cd6:	2e00      	cmp	r6, #0
 8016cd8:	f43f aeb7 	beq.w	8016a4a <_dtoa_r+0x67a>
 8016cdc:	f1b9 0f00 	cmp.w	r9, #0
 8016ce0:	d005      	beq.n	8016cee <_dtoa_r+0x91e>
 8016ce2:	45b1      	cmp	r9, r6
 8016ce4:	d003      	beq.n	8016cee <_dtoa_r+0x91e>
 8016ce6:	4649      	mov	r1, r9
 8016ce8:	4620      	mov	r0, r4
 8016cea:	f000 fcca 	bl	8017682 <_Bfree>
 8016cee:	4631      	mov	r1, r6
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f000 fcc6 	bl	8017682 <_Bfree>
 8016cf6:	e6a8      	b.n	8016a4a <_dtoa_r+0x67a>
 8016cf8:	2700      	movs	r7, #0
 8016cfa:	463e      	mov	r6, r7
 8016cfc:	e7e1      	b.n	8016cc2 <_dtoa_r+0x8f2>
 8016cfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016d02:	463e      	mov	r6, r7
 8016d04:	e5a9      	b.n	801685a <_dtoa_r+0x48a>
 8016d06:	bf00      	nop
 8016d08:	40240000 	.word	0x40240000
 8016d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f000 80fa 	beq.w	8016f0c <_dtoa_r+0xb3c>
 8016d18:	2d00      	cmp	r5, #0
 8016d1a:	dd05      	ble.n	8016d28 <_dtoa_r+0x958>
 8016d1c:	4631      	mov	r1, r6
 8016d1e:	462a      	mov	r2, r5
 8016d20:	4620      	mov	r0, r4
 8016d22:	f000 fe79 	bl	8017a18 <__lshift>
 8016d26:	4606      	mov	r6, r0
 8016d28:	9b07      	ldr	r3, [sp, #28]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d04c      	beq.n	8016dc8 <_dtoa_r+0x9f8>
 8016d2e:	6871      	ldr	r1, [r6, #4]
 8016d30:	4620      	mov	r0, r4
 8016d32:	f000 fc72 	bl	801761a <_Balloc>
 8016d36:	6932      	ldr	r2, [r6, #16]
 8016d38:	3202      	adds	r2, #2
 8016d3a:	4605      	mov	r5, r0
 8016d3c:	0092      	lsls	r2, r2, #2
 8016d3e:	f106 010c 	add.w	r1, r6, #12
 8016d42:	300c      	adds	r0, #12
 8016d44:	f000 fc5e 	bl	8017604 <memcpy>
 8016d48:	2201      	movs	r2, #1
 8016d4a:	4629      	mov	r1, r5
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f000 fe63 	bl	8017a18 <__lshift>
 8016d52:	9b00      	ldr	r3, [sp, #0]
 8016d54:	f8cd b014 	str.w	fp, [sp, #20]
 8016d58:	f003 0301 	and.w	r3, r3, #1
 8016d5c:	46b1      	mov	r9, r6
 8016d5e:	9307      	str	r3, [sp, #28]
 8016d60:	4606      	mov	r6, r0
 8016d62:	4639      	mov	r1, r7
 8016d64:	9804      	ldr	r0, [sp, #16]
 8016d66:	f7ff faa5 	bl	80162b4 <quorem>
 8016d6a:	4649      	mov	r1, r9
 8016d6c:	4605      	mov	r5, r0
 8016d6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016d72:	9804      	ldr	r0, [sp, #16]
 8016d74:	f000 fea4 	bl	8017ac0 <__mcmp>
 8016d78:	4632      	mov	r2, r6
 8016d7a:	9000      	str	r0, [sp, #0]
 8016d7c:	4639      	mov	r1, r7
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f000 feb8 	bl	8017af4 <__mdiff>
 8016d84:	68c3      	ldr	r3, [r0, #12]
 8016d86:	4602      	mov	r2, r0
 8016d88:	bb03      	cbnz	r3, 8016dcc <_dtoa_r+0x9fc>
 8016d8a:	4601      	mov	r1, r0
 8016d8c:	9008      	str	r0, [sp, #32]
 8016d8e:	9804      	ldr	r0, [sp, #16]
 8016d90:	f000 fe96 	bl	8017ac0 <__mcmp>
 8016d94:	9a08      	ldr	r2, [sp, #32]
 8016d96:	4603      	mov	r3, r0
 8016d98:	4611      	mov	r1, r2
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	9308      	str	r3, [sp, #32]
 8016d9e:	f000 fc70 	bl	8017682 <_Bfree>
 8016da2:	9b08      	ldr	r3, [sp, #32]
 8016da4:	b9a3      	cbnz	r3, 8016dd0 <_dtoa_r+0xa00>
 8016da6:	9a06      	ldr	r2, [sp, #24]
 8016da8:	b992      	cbnz	r2, 8016dd0 <_dtoa_r+0xa00>
 8016daa:	9a07      	ldr	r2, [sp, #28]
 8016dac:	b982      	cbnz	r2, 8016dd0 <_dtoa_r+0xa00>
 8016dae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016db2:	d029      	beq.n	8016e08 <_dtoa_r+0xa38>
 8016db4:	9b00      	ldr	r3, [sp, #0]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	dd01      	ble.n	8016dbe <_dtoa_r+0x9ee>
 8016dba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016dbe:	9b05      	ldr	r3, [sp, #20]
 8016dc0:	1c5d      	adds	r5, r3, #1
 8016dc2:	f883 8000 	strb.w	r8, [r3]
 8016dc6:	e782      	b.n	8016cce <_dtoa_r+0x8fe>
 8016dc8:	4630      	mov	r0, r6
 8016dca:	e7c2      	b.n	8016d52 <_dtoa_r+0x982>
 8016dcc:	2301      	movs	r3, #1
 8016dce:	e7e3      	b.n	8016d98 <_dtoa_r+0x9c8>
 8016dd0:	9a00      	ldr	r2, [sp, #0]
 8016dd2:	2a00      	cmp	r2, #0
 8016dd4:	db04      	blt.n	8016de0 <_dtoa_r+0xa10>
 8016dd6:	d125      	bne.n	8016e24 <_dtoa_r+0xa54>
 8016dd8:	9a06      	ldr	r2, [sp, #24]
 8016dda:	bb1a      	cbnz	r2, 8016e24 <_dtoa_r+0xa54>
 8016ddc:	9a07      	ldr	r2, [sp, #28]
 8016dde:	bb0a      	cbnz	r2, 8016e24 <_dtoa_r+0xa54>
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	ddec      	ble.n	8016dbe <_dtoa_r+0x9ee>
 8016de4:	2201      	movs	r2, #1
 8016de6:	9904      	ldr	r1, [sp, #16]
 8016de8:	4620      	mov	r0, r4
 8016dea:	f000 fe15 	bl	8017a18 <__lshift>
 8016dee:	4639      	mov	r1, r7
 8016df0:	9004      	str	r0, [sp, #16]
 8016df2:	f000 fe65 	bl	8017ac0 <__mcmp>
 8016df6:	2800      	cmp	r0, #0
 8016df8:	dc03      	bgt.n	8016e02 <_dtoa_r+0xa32>
 8016dfa:	d1e0      	bne.n	8016dbe <_dtoa_r+0x9ee>
 8016dfc:	f018 0f01 	tst.w	r8, #1
 8016e00:	d0dd      	beq.n	8016dbe <_dtoa_r+0x9ee>
 8016e02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e06:	d1d8      	bne.n	8016dba <_dtoa_r+0x9ea>
 8016e08:	9b05      	ldr	r3, [sp, #20]
 8016e0a:	9a05      	ldr	r2, [sp, #20]
 8016e0c:	1c5d      	adds	r5, r3, #1
 8016e0e:	2339      	movs	r3, #57	; 0x39
 8016e10:	7013      	strb	r3, [r2, #0]
 8016e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016e16:	2b39      	cmp	r3, #57	; 0x39
 8016e18:	f105 32ff 	add.w	r2, r5, #4294967295
 8016e1c:	d04f      	beq.n	8016ebe <_dtoa_r+0xaee>
 8016e1e:	3301      	adds	r3, #1
 8016e20:	7013      	strb	r3, [r2, #0]
 8016e22:	e754      	b.n	8016cce <_dtoa_r+0x8fe>
 8016e24:	9a05      	ldr	r2, [sp, #20]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	f102 0501 	add.w	r5, r2, #1
 8016e2c:	dd06      	ble.n	8016e3c <_dtoa_r+0xa6c>
 8016e2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e32:	d0e9      	beq.n	8016e08 <_dtoa_r+0xa38>
 8016e34:	f108 0801 	add.w	r8, r8, #1
 8016e38:	9b05      	ldr	r3, [sp, #20]
 8016e3a:	e7c2      	b.n	8016dc2 <_dtoa_r+0x9f2>
 8016e3c:	9a02      	ldr	r2, [sp, #8]
 8016e3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016e42:	eba5 030b 	sub.w	r3, r5, fp
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d021      	beq.n	8016e8e <_dtoa_r+0xabe>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	220a      	movs	r2, #10
 8016e4e:	9904      	ldr	r1, [sp, #16]
 8016e50:	4620      	mov	r0, r4
 8016e52:	f000 fc2d 	bl	80176b0 <__multadd>
 8016e56:	45b1      	cmp	r9, r6
 8016e58:	9004      	str	r0, [sp, #16]
 8016e5a:	f04f 0300 	mov.w	r3, #0
 8016e5e:	f04f 020a 	mov.w	r2, #10
 8016e62:	4649      	mov	r1, r9
 8016e64:	4620      	mov	r0, r4
 8016e66:	d105      	bne.n	8016e74 <_dtoa_r+0xaa4>
 8016e68:	f000 fc22 	bl	80176b0 <__multadd>
 8016e6c:	4681      	mov	r9, r0
 8016e6e:	4606      	mov	r6, r0
 8016e70:	9505      	str	r5, [sp, #20]
 8016e72:	e776      	b.n	8016d62 <_dtoa_r+0x992>
 8016e74:	f000 fc1c 	bl	80176b0 <__multadd>
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4681      	mov	r9, r0
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	220a      	movs	r2, #10
 8016e80:	4620      	mov	r0, r4
 8016e82:	f000 fc15 	bl	80176b0 <__multadd>
 8016e86:	4606      	mov	r6, r0
 8016e88:	e7f2      	b.n	8016e70 <_dtoa_r+0xaa0>
 8016e8a:	f04f 0900 	mov.w	r9, #0
 8016e8e:	2201      	movs	r2, #1
 8016e90:	9904      	ldr	r1, [sp, #16]
 8016e92:	4620      	mov	r0, r4
 8016e94:	f000 fdc0 	bl	8017a18 <__lshift>
 8016e98:	4639      	mov	r1, r7
 8016e9a:	9004      	str	r0, [sp, #16]
 8016e9c:	f000 fe10 	bl	8017ac0 <__mcmp>
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	dcb6      	bgt.n	8016e12 <_dtoa_r+0xa42>
 8016ea4:	d102      	bne.n	8016eac <_dtoa_r+0xadc>
 8016ea6:	f018 0f01 	tst.w	r8, #1
 8016eaa:	d1b2      	bne.n	8016e12 <_dtoa_r+0xa42>
 8016eac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016eb0:	2b30      	cmp	r3, #48	; 0x30
 8016eb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8016eb6:	f47f af0a 	bne.w	8016cce <_dtoa_r+0x8fe>
 8016eba:	4615      	mov	r5, r2
 8016ebc:	e7f6      	b.n	8016eac <_dtoa_r+0xadc>
 8016ebe:	4593      	cmp	fp, r2
 8016ec0:	d105      	bne.n	8016ece <_dtoa_r+0xafe>
 8016ec2:	2331      	movs	r3, #49	; 0x31
 8016ec4:	f10a 0a01 	add.w	sl, sl, #1
 8016ec8:	f88b 3000 	strb.w	r3, [fp]
 8016ecc:	e6ff      	b.n	8016cce <_dtoa_r+0x8fe>
 8016ece:	4615      	mov	r5, r2
 8016ed0:	e79f      	b.n	8016e12 <_dtoa_r+0xa42>
 8016ed2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016f38 <_dtoa_r+0xb68>
 8016ed6:	e007      	b.n	8016ee8 <_dtoa_r+0xb18>
 8016ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016eda:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016f3c <_dtoa_r+0xb6c>
 8016ede:	b11b      	cbz	r3, 8016ee8 <_dtoa_r+0xb18>
 8016ee0:	f10b 0308 	add.w	r3, fp, #8
 8016ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016ee6:	6013      	str	r3, [r2, #0]
 8016ee8:	4658      	mov	r0, fp
 8016eea:	b017      	add	sp, #92	; 0x5c
 8016eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef0:	9b06      	ldr	r3, [sp, #24]
 8016ef2:	2b01      	cmp	r3, #1
 8016ef4:	f77f ae35 	ble.w	8016b62 <_dtoa_r+0x792>
 8016ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016efa:	9307      	str	r3, [sp, #28]
 8016efc:	e649      	b.n	8016b92 <_dtoa_r+0x7c2>
 8016efe:	9b02      	ldr	r3, [sp, #8]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	dc03      	bgt.n	8016f0c <_dtoa_r+0xb3c>
 8016f04:	9b06      	ldr	r3, [sp, #24]
 8016f06:	2b02      	cmp	r3, #2
 8016f08:	f73f aecc 	bgt.w	8016ca4 <_dtoa_r+0x8d4>
 8016f0c:	465d      	mov	r5, fp
 8016f0e:	4639      	mov	r1, r7
 8016f10:	9804      	ldr	r0, [sp, #16]
 8016f12:	f7ff f9cf 	bl	80162b4 <quorem>
 8016f16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f1a:	f805 8b01 	strb.w	r8, [r5], #1
 8016f1e:	9a02      	ldr	r2, [sp, #8]
 8016f20:	eba5 030b 	sub.w	r3, r5, fp
 8016f24:	429a      	cmp	r2, r3
 8016f26:	ddb0      	ble.n	8016e8a <_dtoa_r+0xaba>
 8016f28:	2300      	movs	r3, #0
 8016f2a:	220a      	movs	r2, #10
 8016f2c:	9904      	ldr	r1, [sp, #16]
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f000 fbbe 	bl	80176b0 <__multadd>
 8016f34:	9004      	str	r0, [sp, #16]
 8016f36:	e7ea      	b.n	8016f0e <_dtoa_r+0xb3e>
 8016f38:	080191f3 	.word	0x080191f3
 8016f3c:	080190b8 	.word	0x080190b8

08016f40 <rshift>:
 8016f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f42:	6906      	ldr	r6, [r0, #16]
 8016f44:	114b      	asrs	r3, r1, #5
 8016f46:	429e      	cmp	r6, r3
 8016f48:	f100 0414 	add.w	r4, r0, #20
 8016f4c:	dd30      	ble.n	8016fb0 <rshift+0x70>
 8016f4e:	f011 011f 	ands.w	r1, r1, #31
 8016f52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016f56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016f5a:	d108      	bne.n	8016f6e <rshift+0x2e>
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	42b2      	cmp	r2, r6
 8016f60:	460b      	mov	r3, r1
 8016f62:	d211      	bcs.n	8016f88 <rshift+0x48>
 8016f64:	f852 3b04 	ldr.w	r3, [r2], #4
 8016f68:	f841 3b04 	str.w	r3, [r1], #4
 8016f6c:	e7f7      	b.n	8016f5e <rshift+0x1e>
 8016f6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016f72:	f1c1 0c20 	rsb	ip, r1, #32
 8016f76:	40cd      	lsrs	r5, r1
 8016f78:	3204      	adds	r2, #4
 8016f7a:	4623      	mov	r3, r4
 8016f7c:	42b2      	cmp	r2, r6
 8016f7e:	4617      	mov	r7, r2
 8016f80:	d30c      	bcc.n	8016f9c <rshift+0x5c>
 8016f82:	601d      	str	r5, [r3, #0]
 8016f84:	b105      	cbz	r5, 8016f88 <rshift+0x48>
 8016f86:	3304      	adds	r3, #4
 8016f88:	1b1a      	subs	r2, r3, r4
 8016f8a:	42a3      	cmp	r3, r4
 8016f8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016f90:	bf08      	it	eq
 8016f92:	2300      	moveq	r3, #0
 8016f94:	6102      	str	r2, [r0, #16]
 8016f96:	bf08      	it	eq
 8016f98:	6143      	streq	r3, [r0, #20]
 8016f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f9c:	683f      	ldr	r7, [r7, #0]
 8016f9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8016fa2:	433d      	orrs	r5, r7
 8016fa4:	f843 5b04 	str.w	r5, [r3], #4
 8016fa8:	f852 5b04 	ldr.w	r5, [r2], #4
 8016fac:	40cd      	lsrs	r5, r1
 8016fae:	e7e5      	b.n	8016f7c <rshift+0x3c>
 8016fb0:	4623      	mov	r3, r4
 8016fb2:	e7e9      	b.n	8016f88 <rshift+0x48>

08016fb4 <__hexdig_fun>:
 8016fb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016fb8:	2b09      	cmp	r3, #9
 8016fba:	d802      	bhi.n	8016fc2 <__hexdig_fun+0xe>
 8016fbc:	3820      	subs	r0, #32
 8016fbe:	b2c0      	uxtb	r0, r0
 8016fc0:	4770      	bx	lr
 8016fc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016fc6:	2b05      	cmp	r3, #5
 8016fc8:	d801      	bhi.n	8016fce <__hexdig_fun+0x1a>
 8016fca:	3847      	subs	r0, #71	; 0x47
 8016fcc:	e7f7      	b.n	8016fbe <__hexdig_fun+0xa>
 8016fce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016fd2:	2b05      	cmp	r3, #5
 8016fd4:	d801      	bhi.n	8016fda <__hexdig_fun+0x26>
 8016fd6:	3827      	subs	r0, #39	; 0x27
 8016fd8:	e7f1      	b.n	8016fbe <__hexdig_fun+0xa>
 8016fda:	2000      	movs	r0, #0
 8016fdc:	4770      	bx	lr

08016fde <__gethex>:
 8016fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe2:	b08b      	sub	sp, #44	; 0x2c
 8016fe4:	468a      	mov	sl, r1
 8016fe6:	9002      	str	r0, [sp, #8]
 8016fe8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016fea:	9306      	str	r3, [sp, #24]
 8016fec:	4690      	mov	r8, r2
 8016fee:	f000 fadf 	bl	80175b0 <__localeconv_l>
 8016ff2:	6803      	ldr	r3, [r0, #0]
 8016ff4:	9303      	str	r3, [sp, #12]
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7e9 f902 	bl	8000200 <strlen>
 8016ffc:	9b03      	ldr	r3, [sp, #12]
 8016ffe:	9001      	str	r0, [sp, #4]
 8017000:	4403      	add	r3, r0
 8017002:	f04f 0b00 	mov.w	fp, #0
 8017006:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801700a:	9307      	str	r3, [sp, #28]
 801700c:	f8da 3000 	ldr.w	r3, [sl]
 8017010:	3302      	adds	r3, #2
 8017012:	461f      	mov	r7, r3
 8017014:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017018:	2830      	cmp	r0, #48	; 0x30
 801701a:	d06c      	beq.n	80170f6 <__gethex+0x118>
 801701c:	f7ff ffca 	bl	8016fb4 <__hexdig_fun>
 8017020:	4604      	mov	r4, r0
 8017022:	2800      	cmp	r0, #0
 8017024:	d16a      	bne.n	80170fc <__gethex+0x11e>
 8017026:	9a01      	ldr	r2, [sp, #4]
 8017028:	9903      	ldr	r1, [sp, #12]
 801702a:	4638      	mov	r0, r7
 801702c:	f001 fc40 	bl	80188b0 <strncmp>
 8017030:	2800      	cmp	r0, #0
 8017032:	d166      	bne.n	8017102 <__gethex+0x124>
 8017034:	9b01      	ldr	r3, [sp, #4]
 8017036:	5cf8      	ldrb	r0, [r7, r3]
 8017038:	18fe      	adds	r6, r7, r3
 801703a:	f7ff ffbb 	bl	8016fb4 <__hexdig_fun>
 801703e:	2800      	cmp	r0, #0
 8017040:	d062      	beq.n	8017108 <__gethex+0x12a>
 8017042:	4633      	mov	r3, r6
 8017044:	7818      	ldrb	r0, [r3, #0]
 8017046:	2830      	cmp	r0, #48	; 0x30
 8017048:	461f      	mov	r7, r3
 801704a:	f103 0301 	add.w	r3, r3, #1
 801704e:	d0f9      	beq.n	8017044 <__gethex+0x66>
 8017050:	f7ff ffb0 	bl	8016fb4 <__hexdig_fun>
 8017054:	fab0 f580 	clz	r5, r0
 8017058:	096d      	lsrs	r5, r5, #5
 801705a:	4634      	mov	r4, r6
 801705c:	f04f 0b01 	mov.w	fp, #1
 8017060:	463a      	mov	r2, r7
 8017062:	4616      	mov	r6, r2
 8017064:	3201      	adds	r2, #1
 8017066:	7830      	ldrb	r0, [r6, #0]
 8017068:	f7ff ffa4 	bl	8016fb4 <__hexdig_fun>
 801706c:	2800      	cmp	r0, #0
 801706e:	d1f8      	bne.n	8017062 <__gethex+0x84>
 8017070:	9a01      	ldr	r2, [sp, #4]
 8017072:	9903      	ldr	r1, [sp, #12]
 8017074:	4630      	mov	r0, r6
 8017076:	f001 fc1b 	bl	80188b0 <strncmp>
 801707a:	b950      	cbnz	r0, 8017092 <__gethex+0xb4>
 801707c:	b954      	cbnz	r4, 8017094 <__gethex+0xb6>
 801707e:	9b01      	ldr	r3, [sp, #4]
 8017080:	18f4      	adds	r4, r6, r3
 8017082:	4622      	mov	r2, r4
 8017084:	4616      	mov	r6, r2
 8017086:	3201      	adds	r2, #1
 8017088:	7830      	ldrb	r0, [r6, #0]
 801708a:	f7ff ff93 	bl	8016fb4 <__hexdig_fun>
 801708e:	2800      	cmp	r0, #0
 8017090:	d1f8      	bne.n	8017084 <__gethex+0xa6>
 8017092:	b10c      	cbz	r4, 8017098 <__gethex+0xba>
 8017094:	1ba4      	subs	r4, r4, r6
 8017096:	00a4      	lsls	r4, r4, #2
 8017098:	7833      	ldrb	r3, [r6, #0]
 801709a:	2b50      	cmp	r3, #80	; 0x50
 801709c:	d001      	beq.n	80170a2 <__gethex+0xc4>
 801709e:	2b70      	cmp	r3, #112	; 0x70
 80170a0:	d140      	bne.n	8017124 <__gethex+0x146>
 80170a2:	7873      	ldrb	r3, [r6, #1]
 80170a4:	2b2b      	cmp	r3, #43	; 0x2b
 80170a6:	d031      	beq.n	801710c <__gethex+0x12e>
 80170a8:	2b2d      	cmp	r3, #45	; 0x2d
 80170aa:	d033      	beq.n	8017114 <__gethex+0x136>
 80170ac:	1c71      	adds	r1, r6, #1
 80170ae:	f04f 0900 	mov.w	r9, #0
 80170b2:	7808      	ldrb	r0, [r1, #0]
 80170b4:	f7ff ff7e 	bl	8016fb4 <__hexdig_fun>
 80170b8:	1e43      	subs	r3, r0, #1
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	2b18      	cmp	r3, #24
 80170be:	d831      	bhi.n	8017124 <__gethex+0x146>
 80170c0:	f1a0 0210 	sub.w	r2, r0, #16
 80170c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80170c8:	f7ff ff74 	bl	8016fb4 <__hexdig_fun>
 80170cc:	1e43      	subs	r3, r0, #1
 80170ce:	b2db      	uxtb	r3, r3
 80170d0:	2b18      	cmp	r3, #24
 80170d2:	d922      	bls.n	801711a <__gethex+0x13c>
 80170d4:	f1b9 0f00 	cmp.w	r9, #0
 80170d8:	d000      	beq.n	80170dc <__gethex+0xfe>
 80170da:	4252      	negs	r2, r2
 80170dc:	4414      	add	r4, r2
 80170de:	f8ca 1000 	str.w	r1, [sl]
 80170e2:	b30d      	cbz	r5, 8017128 <__gethex+0x14a>
 80170e4:	f1bb 0f00 	cmp.w	fp, #0
 80170e8:	bf0c      	ite	eq
 80170ea:	2706      	moveq	r7, #6
 80170ec:	2700      	movne	r7, #0
 80170ee:	4638      	mov	r0, r7
 80170f0:	b00b      	add	sp, #44	; 0x2c
 80170f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f6:	f10b 0b01 	add.w	fp, fp, #1
 80170fa:	e78a      	b.n	8017012 <__gethex+0x34>
 80170fc:	2500      	movs	r5, #0
 80170fe:	462c      	mov	r4, r5
 8017100:	e7ae      	b.n	8017060 <__gethex+0x82>
 8017102:	463e      	mov	r6, r7
 8017104:	2501      	movs	r5, #1
 8017106:	e7c7      	b.n	8017098 <__gethex+0xba>
 8017108:	4604      	mov	r4, r0
 801710a:	e7fb      	b.n	8017104 <__gethex+0x126>
 801710c:	f04f 0900 	mov.w	r9, #0
 8017110:	1cb1      	adds	r1, r6, #2
 8017112:	e7ce      	b.n	80170b2 <__gethex+0xd4>
 8017114:	f04f 0901 	mov.w	r9, #1
 8017118:	e7fa      	b.n	8017110 <__gethex+0x132>
 801711a:	230a      	movs	r3, #10
 801711c:	fb03 0202 	mla	r2, r3, r2, r0
 8017120:	3a10      	subs	r2, #16
 8017122:	e7cf      	b.n	80170c4 <__gethex+0xe6>
 8017124:	4631      	mov	r1, r6
 8017126:	e7da      	b.n	80170de <__gethex+0x100>
 8017128:	1bf3      	subs	r3, r6, r7
 801712a:	3b01      	subs	r3, #1
 801712c:	4629      	mov	r1, r5
 801712e:	2b07      	cmp	r3, #7
 8017130:	dc49      	bgt.n	80171c6 <__gethex+0x1e8>
 8017132:	9802      	ldr	r0, [sp, #8]
 8017134:	f000 fa71 	bl	801761a <_Balloc>
 8017138:	9b01      	ldr	r3, [sp, #4]
 801713a:	f100 0914 	add.w	r9, r0, #20
 801713e:	f04f 0b00 	mov.w	fp, #0
 8017142:	f1c3 0301 	rsb	r3, r3, #1
 8017146:	4605      	mov	r5, r0
 8017148:	f8cd 9010 	str.w	r9, [sp, #16]
 801714c:	46da      	mov	sl, fp
 801714e:	9308      	str	r3, [sp, #32]
 8017150:	42b7      	cmp	r7, r6
 8017152:	d33b      	bcc.n	80171cc <__gethex+0x1ee>
 8017154:	9804      	ldr	r0, [sp, #16]
 8017156:	f840 ab04 	str.w	sl, [r0], #4
 801715a:	eba0 0009 	sub.w	r0, r0, r9
 801715e:	1080      	asrs	r0, r0, #2
 8017160:	6128      	str	r0, [r5, #16]
 8017162:	0147      	lsls	r7, r0, #5
 8017164:	4650      	mov	r0, sl
 8017166:	f000 fb1c 	bl	80177a2 <__hi0bits>
 801716a:	f8d8 6000 	ldr.w	r6, [r8]
 801716e:	1a3f      	subs	r7, r7, r0
 8017170:	42b7      	cmp	r7, r6
 8017172:	dd64      	ble.n	801723e <__gethex+0x260>
 8017174:	1bbf      	subs	r7, r7, r6
 8017176:	4639      	mov	r1, r7
 8017178:	4628      	mov	r0, r5
 801717a:	f000 fe2b 	bl	8017dd4 <__any_on>
 801717e:	4682      	mov	sl, r0
 8017180:	b178      	cbz	r0, 80171a2 <__gethex+0x1c4>
 8017182:	1e7b      	subs	r3, r7, #1
 8017184:	1159      	asrs	r1, r3, #5
 8017186:	f003 021f 	and.w	r2, r3, #31
 801718a:	f04f 0a01 	mov.w	sl, #1
 801718e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017192:	fa0a f202 	lsl.w	r2, sl, r2
 8017196:	420a      	tst	r2, r1
 8017198:	d003      	beq.n	80171a2 <__gethex+0x1c4>
 801719a:	4553      	cmp	r3, sl
 801719c:	dc46      	bgt.n	801722c <__gethex+0x24e>
 801719e:	f04f 0a02 	mov.w	sl, #2
 80171a2:	4639      	mov	r1, r7
 80171a4:	4628      	mov	r0, r5
 80171a6:	f7ff fecb 	bl	8016f40 <rshift>
 80171aa:	443c      	add	r4, r7
 80171ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80171b0:	42a3      	cmp	r3, r4
 80171b2:	da52      	bge.n	801725a <__gethex+0x27c>
 80171b4:	4629      	mov	r1, r5
 80171b6:	9802      	ldr	r0, [sp, #8]
 80171b8:	f000 fa63 	bl	8017682 <_Bfree>
 80171bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171be:	2300      	movs	r3, #0
 80171c0:	6013      	str	r3, [r2, #0]
 80171c2:	27a3      	movs	r7, #163	; 0xa3
 80171c4:	e793      	b.n	80170ee <__gethex+0x110>
 80171c6:	3101      	adds	r1, #1
 80171c8:	105b      	asrs	r3, r3, #1
 80171ca:	e7b0      	b.n	801712e <__gethex+0x150>
 80171cc:	1e73      	subs	r3, r6, #1
 80171ce:	9305      	str	r3, [sp, #20]
 80171d0:	9a07      	ldr	r2, [sp, #28]
 80171d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d018      	beq.n	801720c <__gethex+0x22e>
 80171da:	f1bb 0f20 	cmp.w	fp, #32
 80171de:	d107      	bne.n	80171f0 <__gethex+0x212>
 80171e0:	9b04      	ldr	r3, [sp, #16]
 80171e2:	f8c3 a000 	str.w	sl, [r3]
 80171e6:	3304      	adds	r3, #4
 80171e8:	f04f 0a00 	mov.w	sl, #0
 80171ec:	9304      	str	r3, [sp, #16]
 80171ee:	46d3      	mov	fp, sl
 80171f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80171f4:	f7ff fede 	bl	8016fb4 <__hexdig_fun>
 80171f8:	f000 000f 	and.w	r0, r0, #15
 80171fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8017200:	ea4a 0a00 	orr.w	sl, sl, r0
 8017204:	f10b 0b04 	add.w	fp, fp, #4
 8017208:	9b05      	ldr	r3, [sp, #20]
 801720a:	e00d      	b.n	8017228 <__gethex+0x24a>
 801720c:	9b05      	ldr	r3, [sp, #20]
 801720e:	9a08      	ldr	r2, [sp, #32]
 8017210:	4413      	add	r3, r2
 8017212:	42bb      	cmp	r3, r7
 8017214:	d3e1      	bcc.n	80171da <__gethex+0x1fc>
 8017216:	4618      	mov	r0, r3
 8017218:	9a01      	ldr	r2, [sp, #4]
 801721a:	9903      	ldr	r1, [sp, #12]
 801721c:	9309      	str	r3, [sp, #36]	; 0x24
 801721e:	f001 fb47 	bl	80188b0 <strncmp>
 8017222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017224:	2800      	cmp	r0, #0
 8017226:	d1d8      	bne.n	80171da <__gethex+0x1fc>
 8017228:	461e      	mov	r6, r3
 801722a:	e791      	b.n	8017150 <__gethex+0x172>
 801722c:	1eb9      	subs	r1, r7, #2
 801722e:	4628      	mov	r0, r5
 8017230:	f000 fdd0 	bl	8017dd4 <__any_on>
 8017234:	2800      	cmp	r0, #0
 8017236:	d0b2      	beq.n	801719e <__gethex+0x1c0>
 8017238:	f04f 0a03 	mov.w	sl, #3
 801723c:	e7b1      	b.n	80171a2 <__gethex+0x1c4>
 801723e:	da09      	bge.n	8017254 <__gethex+0x276>
 8017240:	1bf7      	subs	r7, r6, r7
 8017242:	4629      	mov	r1, r5
 8017244:	463a      	mov	r2, r7
 8017246:	9802      	ldr	r0, [sp, #8]
 8017248:	f000 fbe6 	bl	8017a18 <__lshift>
 801724c:	1be4      	subs	r4, r4, r7
 801724e:	4605      	mov	r5, r0
 8017250:	f100 0914 	add.w	r9, r0, #20
 8017254:	f04f 0a00 	mov.w	sl, #0
 8017258:	e7a8      	b.n	80171ac <__gethex+0x1ce>
 801725a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801725e:	42a0      	cmp	r0, r4
 8017260:	dd6a      	ble.n	8017338 <__gethex+0x35a>
 8017262:	1b04      	subs	r4, r0, r4
 8017264:	42a6      	cmp	r6, r4
 8017266:	dc2e      	bgt.n	80172c6 <__gethex+0x2e8>
 8017268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801726c:	2b02      	cmp	r3, #2
 801726e:	d022      	beq.n	80172b6 <__gethex+0x2d8>
 8017270:	2b03      	cmp	r3, #3
 8017272:	d024      	beq.n	80172be <__gethex+0x2e0>
 8017274:	2b01      	cmp	r3, #1
 8017276:	d115      	bne.n	80172a4 <__gethex+0x2c6>
 8017278:	42a6      	cmp	r6, r4
 801727a:	d113      	bne.n	80172a4 <__gethex+0x2c6>
 801727c:	2e01      	cmp	r6, #1
 801727e:	dc0b      	bgt.n	8017298 <__gethex+0x2ba>
 8017280:	9a06      	ldr	r2, [sp, #24]
 8017282:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017286:	6013      	str	r3, [r2, #0]
 8017288:	2301      	movs	r3, #1
 801728a:	612b      	str	r3, [r5, #16]
 801728c:	f8c9 3000 	str.w	r3, [r9]
 8017290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017292:	2762      	movs	r7, #98	; 0x62
 8017294:	601d      	str	r5, [r3, #0]
 8017296:	e72a      	b.n	80170ee <__gethex+0x110>
 8017298:	1e71      	subs	r1, r6, #1
 801729a:	4628      	mov	r0, r5
 801729c:	f000 fd9a 	bl	8017dd4 <__any_on>
 80172a0:	2800      	cmp	r0, #0
 80172a2:	d1ed      	bne.n	8017280 <__gethex+0x2a2>
 80172a4:	4629      	mov	r1, r5
 80172a6:	9802      	ldr	r0, [sp, #8]
 80172a8:	f000 f9eb 	bl	8017682 <_Bfree>
 80172ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80172ae:	2300      	movs	r3, #0
 80172b0:	6013      	str	r3, [r2, #0]
 80172b2:	2750      	movs	r7, #80	; 0x50
 80172b4:	e71b      	b.n	80170ee <__gethex+0x110>
 80172b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d0e1      	beq.n	8017280 <__gethex+0x2a2>
 80172bc:	e7f2      	b.n	80172a4 <__gethex+0x2c6>
 80172be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d1dd      	bne.n	8017280 <__gethex+0x2a2>
 80172c4:	e7ee      	b.n	80172a4 <__gethex+0x2c6>
 80172c6:	1e67      	subs	r7, r4, #1
 80172c8:	f1ba 0f00 	cmp.w	sl, #0
 80172cc:	d131      	bne.n	8017332 <__gethex+0x354>
 80172ce:	b127      	cbz	r7, 80172da <__gethex+0x2fc>
 80172d0:	4639      	mov	r1, r7
 80172d2:	4628      	mov	r0, r5
 80172d4:	f000 fd7e 	bl	8017dd4 <__any_on>
 80172d8:	4682      	mov	sl, r0
 80172da:	117a      	asrs	r2, r7, #5
 80172dc:	2301      	movs	r3, #1
 80172de:	f007 071f 	and.w	r7, r7, #31
 80172e2:	fa03 f707 	lsl.w	r7, r3, r7
 80172e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80172ea:	4621      	mov	r1, r4
 80172ec:	421f      	tst	r7, r3
 80172ee:	4628      	mov	r0, r5
 80172f0:	bf18      	it	ne
 80172f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80172f6:	1b36      	subs	r6, r6, r4
 80172f8:	f7ff fe22 	bl	8016f40 <rshift>
 80172fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017300:	2702      	movs	r7, #2
 8017302:	f1ba 0f00 	cmp.w	sl, #0
 8017306:	d048      	beq.n	801739a <__gethex+0x3bc>
 8017308:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801730c:	2b02      	cmp	r3, #2
 801730e:	d015      	beq.n	801733c <__gethex+0x35e>
 8017310:	2b03      	cmp	r3, #3
 8017312:	d017      	beq.n	8017344 <__gethex+0x366>
 8017314:	2b01      	cmp	r3, #1
 8017316:	d109      	bne.n	801732c <__gethex+0x34e>
 8017318:	f01a 0f02 	tst.w	sl, #2
 801731c:	d006      	beq.n	801732c <__gethex+0x34e>
 801731e:	f8d9 3000 	ldr.w	r3, [r9]
 8017322:	ea4a 0a03 	orr.w	sl, sl, r3
 8017326:	f01a 0f01 	tst.w	sl, #1
 801732a:	d10e      	bne.n	801734a <__gethex+0x36c>
 801732c:	f047 0710 	orr.w	r7, r7, #16
 8017330:	e033      	b.n	801739a <__gethex+0x3bc>
 8017332:	f04f 0a01 	mov.w	sl, #1
 8017336:	e7d0      	b.n	80172da <__gethex+0x2fc>
 8017338:	2701      	movs	r7, #1
 801733a:	e7e2      	b.n	8017302 <__gethex+0x324>
 801733c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801733e:	f1c3 0301 	rsb	r3, r3, #1
 8017342:	9315      	str	r3, [sp, #84]	; 0x54
 8017344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017346:	2b00      	cmp	r3, #0
 8017348:	d0f0      	beq.n	801732c <__gethex+0x34e>
 801734a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801734e:	f105 0314 	add.w	r3, r5, #20
 8017352:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017356:	eb03 010a 	add.w	r1, r3, sl
 801735a:	f04f 0c00 	mov.w	ip, #0
 801735e:	4618      	mov	r0, r3
 8017360:	f853 2b04 	ldr.w	r2, [r3], #4
 8017364:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017368:	d01c      	beq.n	80173a4 <__gethex+0x3c6>
 801736a:	3201      	adds	r2, #1
 801736c:	6002      	str	r2, [r0, #0]
 801736e:	2f02      	cmp	r7, #2
 8017370:	f105 0314 	add.w	r3, r5, #20
 8017374:	d138      	bne.n	80173e8 <__gethex+0x40a>
 8017376:	f8d8 2000 	ldr.w	r2, [r8]
 801737a:	3a01      	subs	r2, #1
 801737c:	42b2      	cmp	r2, r6
 801737e:	d10a      	bne.n	8017396 <__gethex+0x3b8>
 8017380:	1171      	asrs	r1, r6, #5
 8017382:	2201      	movs	r2, #1
 8017384:	f006 061f 	and.w	r6, r6, #31
 8017388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801738c:	fa02 f606 	lsl.w	r6, r2, r6
 8017390:	421e      	tst	r6, r3
 8017392:	bf18      	it	ne
 8017394:	4617      	movne	r7, r2
 8017396:	f047 0720 	orr.w	r7, r7, #32
 801739a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801739c:	601d      	str	r5, [r3, #0]
 801739e:	9b06      	ldr	r3, [sp, #24]
 80173a0:	601c      	str	r4, [r3, #0]
 80173a2:	e6a4      	b.n	80170ee <__gethex+0x110>
 80173a4:	4299      	cmp	r1, r3
 80173a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80173aa:	d8d8      	bhi.n	801735e <__gethex+0x380>
 80173ac:	68ab      	ldr	r3, [r5, #8]
 80173ae:	4599      	cmp	r9, r3
 80173b0:	db12      	blt.n	80173d8 <__gethex+0x3fa>
 80173b2:	6869      	ldr	r1, [r5, #4]
 80173b4:	9802      	ldr	r0, [sp, #8]
 80173b6:	3101      	adds	r1, #1
 80173b8:	f000 f92f 	bl	801761a <_Balloc>
 80173bc:	692a      	ldr	r2, [r5, #16]
 80173be:	3202      	adds	r2, #2
 80173c0:	f105 010c 	add.w	r1, r5, #12
 80173c4:	4683      	mov	fp, r0
 80173c6:	0092      	lsls	r2, r2, #2
 80173c8:	300c      	adds	r0, #12
 80173ca:	f000 f91b 	bl	8017604 <memcpy>
 80173ce:	4629      	mov	r1, r5
 80173d0:	9802      	ldr	r0, [sp, #8]
 80173d2:	f000 f956 	bl	8017682 <_Bfree>
 80173d6:	465d      	mov	r5, fp
 80173d8:	692b      	ldr	r3, [r5, #16]
 80173da:	1c5a      	adds	r2, r3, #1
 80173dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80173e0:	612a      	str	r2, [r5, #16]
 80173e2:	2201      	movs	r2, #1
 80173e4:	615a      	str	r2, [r3, #20]
 80173e6:	e7c2      	b.n	801736e <__gethex+0x390>
 80173e8:	692a      	ldr	r2, [r5, #16]
 80173ea:	454a      	cmp	r2, r9
 80173ec:	dd0b      	ble.n	8017406 <__gethex+0x428>
 80173ee:	2101      	movs	r1, #1
 80173f0:	4628      	mov	r0, r5
 80173f2:	f7ff fda5 	bl	8016f40 <rshift>
 80173f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80173fa:	3401      	adds	r4, #1
 80173fc:	42a3      	cmp	r3, r4
 80173fe:	f6ff aed9 	blt.w	80171b4 <__gethex+0x1d6>
 8017402:	2701      	movs	r7, #1
 8017404:	e7c7      	b.n	8017396 <__gethex+0x3b8>
 8017406:	f016 061f 	ands.w	r6, r6, #31
 801740a:	d0fa      	beq.n	8017402 <__gethex+0x424>
 801740c:	449a      	add	sl, r3
 801740e:	f1c6 0620 	rsb	r6, r6, #32
 8017412:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017416:	f000 f9c4 	bl	80177a2 <__hi0bits>
 801741a:	42b0      	cmp	r0, r6
 801741c:	dbe7      	blt.n	80173ee <__gethex+0x410>
 801741e:	e7f0      	b.n	8017402 <__gethex+0x424>

08017420 <L_shift>:
 8017420:	f1c2 0208 	rsb	r2, r2, #8
 8017424:	0092      	lsls	r2, r2, #2
 8017426:	b570      	push	{r4, r5, r6, lr}
 8017428:	f1c2 0620 	rsb	r6, r2, #32
 801742c:	6843      	ldr	r3, [r0, #4]
 801742e:	6804      	ldr	r4, [r0, #0]
 8017430:	fa03 f506 	lsl.w	r5, r3, r6
 8017434:	432c      	orrs	r4, r5
 8017436:	40d3      	lsrs	r3, r2
 8017438:	6004      	str	r4, [r0, #0]
 801743a:	f840 3f04 	str.w	r3, [r0, #4]!
 801743e:	4288      	cmp	r0, r1
 8017440:	d3f4      	bcc.n	801742c <L_shift+0xc>
 8017442:	bd70      	pop	{r4, r5, r6, pc}

08017444 <__match>:
 8017444:	b530      	push	{r4, r5, lr}
 8017446:	6803      	ldr	r3, [r0, #0]
 8017448:	3301      	adds	r3, #1
 801744a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801744e:	b914      	cbnz	r4, 8017456 <__match+0x12>
 8017450:	6003      	str	r3, [r0, #0]
 8017452:	2001      	movs	r0, #1
 8017454:	bd30      	pop	{r4, r5, pc}
 8017456:	f813 2b01 	ldrb.w	r2, [r3], #1
 801745a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801745e:	2d19      	cmp	r5, #25
 8017460:	bf98      	it	ls
 8017462:	3220      	addls	r2, #32
 8017464:	42a2      	cmp	r2, r4
 8017466:	d0f0      	beq.n	801744a <__match+0x6>
 8017468:	2000      	movs	r0, #0
 801746a:	e7f3      	b.n	8017454 <__match+0x10>

0801746c <__hexnan>:
 801746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017470:	680b      	ldr	r3, [r1, #0]
 8017472:	6801      	ldr	r1, [r0, #0]
 8017474:	115f      	asrs	r7, r3, #5
 8017476:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801747a:	f013 031f 	ands.w	r3, r3, #31
 801747e:	b087      	sub	sp, #28
 8017480:	bf18      	it	ne
 8017482:	3704      	addne	r7, #4
 8017484:	2500      	movs	r5, #0
 8017486:	1f3e      	subs	r6, r7, #4
 8017488:	4682      	mov	sl, r0
 801748a:	4690      	mov	r8, r2
 801748c:	9301      	str	r3, [sp, #4]
 801748e:	f847 5c04 	str.w	r5, [r7, #-4]
 8017492:	46b1      	mov	r9, r6
 8017494:	4634      	mov	r4, r6
 8017496:	9502      	str	r5, [sp, #8]
 8017498:	46ab      	mov	fp, r5
 801749a:	784a      	ldrb	r2, [r1, #1]
 801749c:	1c4b      	adds	r3, r1, #1
 801749e:	9303      	str	r3, [sp, #12]
 80174a0:	b342      	cbz	r2, 80174f4 <__hexnan+0x88>
 80174a2:	4610      	mov	r0, r2
 80174a4:	9105      	str	r1, [sp, #20]
 80174a6:	9204      	str	r2, [sp, #16]
 80174a8:	f7ff fd84 	bl	8016fb4 <__hexdig_fun>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d143      	bne.n	8017538 <__hexnan+0xcc>
 80174b0:	9a04      	ldr	r2, [sp, #16]
 80174b2:	9905      	ldr	r1, [sp, #20]
 80174b4:	2a20      	cmp	r2, #32
 80174b6:	d818      	bhi.n	80174ea <__hexnan+0x7e>
 80174b8:	9b02      	ldr	r3, [sp, #8]
 80174ba:	459b      	cmp	fp, r3
 80174bc:	dd13      	ble.n	80174e6 <__hexnan+0x7a>
 80174be:	454c      	cmp	r4, r9
 80174c0:	d206      	bcs.n	80174d0 <__hexnan+0x64>
 80174c2:	2d07      	cmp	r5, #7
 80174c4:	dc04      	bgt.n	80174d0 <__hexnan+0x64>
 80174c6:	462a      	mov	r2, r5
 80174c8:	4649      	mov	r1, r9
 80174ca:	4620      	mov	r0, r4
 80174cc:	f7ff ffa8 	bl	8017420 <L_shift>
 80174d0:	4544      	cmp	r4, r8
 80174d2:	d944      	bls.n	801755e <__hexnan+0xf2>
 80174d4:	2300      	movs	r3, #0
 80174d6:	f1a4 0904 	sub.w	r9, r4, #4
 80174da:	f844 3c04 	str.w	r3, [r4, #-4]
 80174de:	f8cd b008 	str.w	fp, [sp, #8]
 80174e2:	464c      	mov	r4, r9
 80174e4:	461d      	mov	r5, r3
 80174e6:	9903      	ldr	r1, [sp, #12]
 80174e8:	e7d7      	b.n	801749a <__hexnan+0x2e>
 80174ea:	2a29      	cmp	r2, #41	; 0x29
 80174ec:	d14a      	bne.n	8017584 <__hexnan+0x118>
 80174ee:	3102      	adds	r1, #2
 80174f0:	f8ca 1000 	str.w	r1, [sl]
 80174f4:	f1bb 0f00 	cmp.w	fp, #0
 80174f8:	d044      	beq.n	8017584 <__hexnan+0x118>
 80174fa:	454c      	cmp	r4, r9
 80174fc:	d206      	bcs.n	801750c <__hexnan+0xa0>
 80174fe:	2d07      	cmp	r5, #7
 8017500:	dc04      	bgt.n	801750c <__hexnan+0xa0>
 8017502:	462a      	mov	r2, r5
 8017504:	4649      	mov	r1, r9
 8017506:	4620      	mov	r0, r4
 8017508:	f7ff ff8a 	bl	8017420 <L_shift>
 801750c:	4544      	cmp	r4, r8
 801750e:	d928      	bls.n	8017562 <__hexnan+0xf6>
 8017510:	4643      	mov	r3, r8
 8017512:	f854 2b04 	ldr.w	r2, [r4], #4
 8017516:	f843 2b04 	str.w	r2, [r3], #4
 801751a:	42a6      	cmp	r6, r4
 801751c:	d2f9      	bcs.n	8017512 <__hexnan+0xa6>
 801751e:	2200      	movs	r2, #0
 8017520:	f843 2b04 	str.w	r2, [r3], #4
 8017524:	429e      	cmp	r6, r3
 8017526:	d2fb      	bcs.n	8017520 <__hexnan+0xb4>
 8017528:	6833      	ldr	r3, [r6, #0]
 801752a:	b91b      	cbnz	r3, 8017534 <__hexnan+0xc8>
 801752c:	4546      	cmp	r6, r8
 801752e:	d127      	bne.n	8017580 <__hexnan+0x114>
 8017530:	2301      	movs	r3, #1
 8017532:	6033      	str	r3, [r6, #0]
 8017534:	2005      	movs	r0, #5
 8017536:	e026      	b.n	8017586 <__hexnan+0x11a>
 8017538:	3501      	adds	r5, #1
 801753a:	2d08      	cmp	r5, #8
 801753c:	f10b 0b01 	add.w	fp, fp, #1
 8017540:	dd06      	ble.n	8017550 <__hexnan+0xe4>
 8017542:	4544      	cmp	r4, r8
 8017544:	d9cf      	bls.n	80174e6 <__hexnan+0x7a>
 8017546:	2300      	movs	r3, #0
 8017548:	f844 3c04 	str.w	r3, [r4, #-4]
 801754c:	2501      	movs	r5, #1
 801754e:	3c04      	subs	r4, #4
 8017550:	6822      	ldr	r2, [r4, #0]
 8017552:	f000 000f 	and.w	r0, r0, #15
 8017556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801755a:	6020      	str	r0, [r4, #0]
 801755c:	e7c3      	b.n	80174e6 <__hexnan+0x7a>
 801755e:	2508      	movs	r5, #8
 8017560:	e7c1      	b.n	80174e6 <__hexnan+0x7a>
 8017562:	9b01      	ldr	r3, [sp, #4]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d0df      	beq.n	8017528 <__hexnan+0xbc>
 8017568:	f04f 32ff 	mov.w	r2, #4294967295
 801756c:	f1c3 0320 	rsb	r3, r3, #32
 8017570:	fa22 f303 	lsr.w	r3, r2, r3
 8017574:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017578:	401a      	ands	r2, r3
 801757a:	f847 2c04 	str.w	r2, [r7, #-4]
 801757e:	e7d3      	b.n	8017528 <__hexnan+0xbc>
 8017580:	3e04      	subs	r6, #4
 8017582:	e7d1      	b.n	8017528 <__hexnan+0xbc>
 8017584:	2004      	movs	r0, #4
 8017586:	b007      	add	sp, #28
 8017588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801758c <__locale_ctype_ptr_l>:
 801758c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017590:	4770      	bx	lr
	...

08017594 <__locale_ctype_ptr>:
 8017594:	4b04      	ldr	r3, [pc, #16]	; (80175a8 <__locale_ctype_ptr+0x14>)
 8017596:	4a05      	ldr	r2, [pc, #20]	; (80175ac <__locale_ctype_ptr+0x18>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	6a1b      	ldr	r3, [r3, #32]
 801759c:	2b00      	cmp	r3, #0
 801759e:	bf08      	it	eq
 80175a0:	4613      	moveq	r3, r2
 80175a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80175a6:	4770      	bx	lr
 80175a8:	2000000c 	.word	0x2000000c
 80175ac:	20000070 	.word	0x20000070

080175b0 <__localeconv_l>:
 80175b0:	30f0      	adds	r0, #240	; 0xf0
 80175b2:	4770      	bx	lr

080175b4 <_localeconv_r>:
 80175b4:	4b04      	ldr	r3, [pc, #16]	; (80175c8 <_localeconv_r+0x14>)
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	6a18      	ldr	r0, [r3, #32]
 80175ba:	4b04      	ldr	r3, [pc, #16]	; (80175cc <_localeconv_r+0x18>)
 80175bc:	2800      	cmp	r0, #0
 80175be:	bf08      	it	eq
 80175c0:	4618      	moveq	r0, r3
 80175c2:	30f0      	adds	r0, #240	; 0xf0
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop
 80175c8:	2000000c 	.word	0x2000000c
 80175cc:	20000070 	.word	0x20000070

080175d0 <malloc>:
 80175d0:	4b02      	ldr	r3, [pc, #8]	; (80175dc <malloc+0xc>)
 80175d2:	4601      	mov	r1, r0
 80175d4:	6818      	ldr	r0, [r3, #0]
 80175d6:	f000 bc7b 	b.w	8017ed0 <_malloc_r>
 80175da:	bf00      	nop
 80175dc:	2000000c 	.word	0x2000000c

080175e0 <__ascii_mbtowc>:
 80175e0:	b082      	sub	sp, #8
 80175e2:	b901      	cbnz	r1, 80175e6 <__ascii_mbtowc+0x6>
 80175e4:	a901      	add	r1, sp, #4
 80175e6:	b142      	cbz	r2, 80175fa <__ascii_mbtowc+0x1a>
 80175e8:	b14b      	cbz	r3, 80175fe <__ascii_mbtowc+0x1e>
 80175ea:	7813      	ldrb	r3, [r2, #0]
 80175ec:	600b      	str	r3, [r1, #0]
 80175ee:	7812      	ldrb	r2, [r2, #0]
 80175f0:	1c10      	adds	r0, r2, #0
 80175f2:	bf18      	it	ne
 80175f4:	2001      	movne	r0, #1
 80175f6:	b002      	add	sp, #8
 80175f8:	4770      	bx	lr
 80175fa:	4610      	mov	r0, r2
 80175fc:	e7fb      	b.n	80175f6 <__ascii_mbtowc+0x16>
 80175fe:	f06f 0001 	mvn.w	r0, #1
 8017602:	e7f8      	b.n	80175f6 <__ascii_mbtowc+0x16>

08017604 <memcpy>:
 8017604:	b510      	push	{r4, lr}
 8017606:	1e43      	subs	r3, r0, #1
 8017608:	440a      	add	r2, r1
 801760a:	4291      	cmp	r1, r2
 801760c:	d100      	bne.n	8017610 <memcpy+0xc>
 801760e:	bd10      	pop	{r4, pc}
 8017610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017618:	e7f7      	b.n	801760a <memcpy+0x6>

0801761a <_Balloc>:
 801761a:	b570      	push	{r4, r5, r6, lr}
 801761c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801761e:	4604      	mov	r4, r0
 8017620:	460e      	mov	r6, r1
 8017622:	b93d      	cbnz	r5, 8017634 <_Balloc+0x1a>
 8017624:	2010      	movs	r0, #16
 8017626:	f7ff ffd3 	bl	80175d0 <malloc>
 801762a:	6260      	str	r0, [r4, #36]	; 0x24
 801762c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017630:	6005      	str	r5, [r0, #0]
 8017632:	60c5      	str	r5, [r0, #12]
 8017634:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017636:	68eb      	ldr	r3, [r5, #12]
 8017638:	b183      	cbz	r3, 801765c <_Balloc+0x42>
 801763a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801763c:	68db      	ldr	r3, [r3, #12]
 801763e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017642:	b9b8      	cbnz	r0, 8017674 <_Balloc+0x5a>
 8017644:	2101      	movs	r1, #1
 8017646:	fa01 f506 	lsl.w	r5, r1, r6
 801764a:	1d6a      	adds	r2, r5, #5
 801764c:	0092      	lsls	r2, r2, #2
 801764e:	4620      	mov	r0, r4
 8017650:	f000 fbe1 	bl	8017e16 <_calloc_r>
 8017654:	b160      	cbz	r0, 8017670 <_Balloc+0x56>
 8017656:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801765a:	e00e      	b.n	801767a <_Balloc+0x60>
 801765c:	2221      	movs	r2, #33	; 0x21
 801765e:	2104      	movs	r1, #4
 8017660:	4620      	mov	r0, r4
 8017662:	f000 fbd8 	bl	8017e16 <_calloc_r>
 8017666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017668:	60e8      	str	r0, [r5, #12]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d1e4      	bne.n	801763a <_Balloc+0x20>
 8017670:	2000      	movs	r0, #0
 8017672:	bd70      	pop	{r4, r5, r6, pc}
 8017674:	6802      	ldr	r2, [r0, #0]
 8017676:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801767a:	2300      	movs	r3, #0
 801767c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017680:	e7f7      	b.n	8017672 <_Balloc+0x58>

08017682 <_Bfree>:
 8017682:	b570      	push	{r4, r5, r6, lr}
 8017684:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017686:	4606      	mov	r6, r0
 8017688:	460d      	mov	r5, r1
 801768a:	b93c      	cbnz	r4, 801769c <_Bfree+0x1a>
 801768c:	2010      	movs	r0, #16
 801768e:	f7ff ff9f 	bl	80175d0 <malloc>
 8017692:	6270      	str	r0, [r6, #36]	; 0x24
 8017694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017698:	6004      	str	r4, [r0, #0]
 801769a:	60c4      	str	r4, [r0, #12]
 801769c:	b13d      	cbz	r5, 80176ae <_Bfree+0x2c>
 801769e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80176a0:	686a      	ldr	r2, [r5, #4]
 80176a2:	68db      	ldr	r3, [r3, #12]
 80176a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80176a8:	6029      	str	r1, [r5, #0]
 80176aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80176ae:	bd70      	pop	{r4, r5, r6, pc}

080176b0 <__multadd>:
 80176b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176b4:	690d      	ldr	r5, [r1, #16]
 80176b6:	461f      	mov	r7, r3
 80176b8:	4606      	mov	r6, r0
 80176ba:	460c      	mov	r4, r1
 80176bc:	f101 0c14 	add.w	ip, r1, #20
 80176c0:	2300      	movs	r3, #0
 80176c2:	f8dc 0000 	ldr.w	r0, [ip]
 80176c6:	b281      	uxth	r1, r0
 80176c8:	fb02 7101 	mla	r1, r2, r1, r7
 80176cc:	0c0f      	lsrs	r7, r1, #16
 80176ce:	0c00      	lsrs	r0, r0, #16
 80176d0:	fb02 7000 	mla	r0, r2, r0, r7
 80176d4:	b289      	uxth	r1, r1
 80176d6:	3301      	adds	r3, #1
 80176d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80176dc:	429d      	cmp	r5, r3
 80176de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80176e2:	f84c 1b04 	str.w	r1, [ip], #4
 80176e6:	dcec      	bgt.n	80176c2 <__multadd+0x12>
 80176e8:	b1d7      	cbz	r7, 8017720 <__multadd+0x70>
 80176ea:	68a3      	ldr	r3, [r4, #8]
 80176ec:	42ab      	cmp	r3, r5
 80176ee:	dc12      	bgt.n	8017716 <__multadd+0x66>
 80176f0:	6861      	ldr	r1, [r4, #4]
 80176f2:	4630      	mov	r0, r6
 80176f4:	3101      	adds	r1, #1
 80176f6:	f7ff ff90 	bl	801761a <_Balloc>
 80176fa:	6922      	ldr	r2, [r4, #16]
 80176fc:	3202      	adds	r2, #2
 80176fe:	f104 010c 	add.w	r1, r4, #12
 8017702:	4680      	mov	r8, r0
 8017704:	0092      	lsls	r2, r2, #2
 8017706:	300c      	adds	r0, #12
 8017708:	f7ff ff7c 	bl	8017604 <memcpy>
 801770c:	4621      	mov	r1, r4
 801770e:	4630      	mov	r0, r6
 8017710:	f7ff ffb7 	bl	8017682 <_Bfree>
 8017714:	4644      	mov	r4, r8
 8017716:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801771a:	3501      	adds	r5, #1
 801771c:	615f      	str	r7, [r3, #20]
 801771e:	6125      	str	r5, [r4, #16]
 8017720:	4620      	mov	r0, r4
 8017722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017726 <__s2b>:
 8017726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801772a:	460c      	mov	r4, r1
 801772c:	4615      	mov	r5, r2
 801772e:	461f      	mov	r7, r3
 8017730:	2209      	movs	r2, #9
 8017732:	3308      	adds	r3, #8
 8017734:	4606      	mov	r6, r0
 8017736:	fb93 f3f2 	sdiv	r3, r3, r2
 801773a:	2100      	movs	r1, #0
 801773c:	2201      	movs	r2, #1
 801773e:	429a      	cmp	r2, r3
 8017740:	db20      	blt.n	8017784 <__s2b+0x5e>
 8017742:	4630      	mov	r0, r6
 8017744:	f7ff ff69 	bl	801761a <_Balloc>
 8017748:	9b08      	ldr	r3, [sp, #32]
 801774a:	6143      	str	r3, [r0, #20]
 801774c:	2d09      	cmp	r5, #9
 801774e:	f04f 0301 	mov.w	r3, #1
 8017752:	6103      	str	r3, [r0, #16]
 8017754:	dd19      	ble.n	801778a <__s2b+0x64>
 8017756:	f104 0809 	add.w	r8, r4, #9
 801775a:	46c1      	mov	r9, r8
 801775c:	442c      	add	r4, r5
 801775e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017762:	4601      	mov	r1, r0
 8017764:	3b30      	subs	r3, #48	; 0x30
 8017766:	220a      	movs	r2, #10
 8017768:	4630      	mov	r0, r6
 801776a:	f7ff ffa1 	bl	80176b0 <__multadd>
 801776e:	45a1      	cmp	r9, r4
 8017770:	d1f5      	bne.n	801775e <__s2b+0x38>
 8017772:	eb08 0405 	add.w	r4, r8, r5
 8017776:	3c08      	subs	r4, #8
 8017778:	1b2d      	subs	r5, r5, r4
 801777a:	1963      	adds	r3, r4, r5
 801777c:	42bb      	cmp	r3, r7
 801777e:	db07      	blt.n	8017790 <__s2b+0x6a>
 8017780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017784:	0052      	lsls	r2, r2, #1
 8017786:	3101      	adds	r1, #1
 8017788:	e7d9      	b.n	801773e <__s2b+0x18>
 801778a:	340a      	adds	r4, #10
 801778c:	2509      	movs	r5, #9
 801778e:	e7f3      	b.n	8017778 <__s2b+0x52>
 8017790:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017794:	4601      	mov	r1, r0
 8017796:	3b30      	subs	r3, #48	; 0x30
 8017798:	220a      	movs	r2, #10
 801779a:	4630      	mov	r0, r6
 801779c:	f7ff ff88 	bl	80176b0 <__multadd>
 80177a0:	e7eb      	b.n	801777a <__s2b+0x54>

080177a2 <__hi0bits>:
 80177a2:	0c02      	lsrs	r2, r0, #16
 80177a4:	0412      	lsls	r2, r2, #16
 80177a6:	4603      	mov	r3, r0
 80177a8:	b9b2      	cbnz	r2, 80177d8 <__hi0bits+0x36>
 80177aa:	0403      	lsls	r3, r0, #16
 80177ac:	2010      	movs	r0, #16
 80177ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80177b2:	bf04      	itt	eq
 80177b4:	021b      	lsleq	r3, r3, #8
 80177b6:	3008      	addeq	r0, #8
 80177b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80177bc:	bf04      	itt	eq
 80177be:	011b      	lsleq	r3, r3, #4
 80177c0:	3004      	addeq	r0, #4
 80177c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80177c6:	bf04      	itt	eq
 80177c8:	009b      	lsleq	r3, r3, #2
 80177ca:	3002      	addeq	r0, #2
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	db06      	blt.n	80177de <__hi0bits+0x3c>
 80177d0:	005b      	lsls	r3, r3, #1
 80177d2:	d503      	bpl.n	80177dc <__hi0bits+0x3a>
 80177d4:	3001      	adds	r0, #1
 80177d6:	4770      	bx	lr
 80177d8:	2000      	movs	r0, #0
 80177da:	e7e8      	b.n	80177ae <__hi0bits+0xc>
 80177dc:	2020      	movs	r0, #32
 80177de:	4770      	bx	lr

080177e0 <__lo0bits>:
 80177e0:	6803      	ldr	r3, [r0, #0]
 80177e2:	f013 0207 	ands.w	r2, r3, #7
 80177e6:	4601      	mov	r1, r0
 80177e8:	d00b      	beq.n	8017802 <__lo0bits+0x22>
 80177ea:	07da      	lsls	r2, r3, #31
 80177ec:	d423      	bmi.n	8017836 <__lo0bits+0x56>
 80177ee:	0798      	lsls	r0, r3, #30
 80177f0:	bf49      	itett	mi
 80177f2:	085b      	lsrmi	r3, r3, #1
 80177f4:	089b      	lsrpl	r3, r3, #2
 80177f6:	2001      	movmi	r0, #1
 80177f8:	600b      	strmi	r3, [r1, #0]
 80177fa:	bf5c      	itt	pl
 80177fc:	600b      	strpl	r3, [r1, #0]
 80177fe:	2002      	movpl	r0, #2
 8017800:	4770      	bx	lr
 8017802:	b298      	uxth	r0, r3
 8017804:	b9a8      	cbnz	r0, 8017832 <__lo0bits+0x52>
 8017806:	0c1b      	lsrs	r3, r3, #16
 8017808:	2010      	movs	r0, #16
 801780a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801780e:	bf04      	itt	eq
 8017810:	0a1b      	lsreq	r3, r3, #8
 8017812:	3008      	addeq	r0, #8
 8017814:	071a      	lsls	r2, r3, #28
 8017816:	bf04      	itt	eq
 8017818:	091b      	lsreq	r3, r3, #4
 801781a:	3004      	addeq	r0, #4
 801781c:	079a      	lsls	r2, r3, #30
 801781e:	bf04      	itt	eq
 8017820:	089b      	lsreq	r3, r3, #2
 8017822:	3002      	addeq	r0, #2
 8017824:	07da      	lsls	r2, r3, #31
 8017826:	d402      	bmi.n	801782e <__lo0bits+0x4e>
 8017828:	085b      	lsrs	r3, r3, #1
 801782a:	d006      	beq.n	801783a <__lo0bits+0x5a>
 801782c:	3001      	adds	r0, #1
 801782e:	600b      	str	r3, [r1, #0]
 8017830:	4770      	bx	lr
 8017832:	4610      	mov	r0, r2
 8017834:	e7e9      	b.n	801780a <__lo0bits+0x2a>
 8017836:	2000      	movs	r0, #0
 8017838:	4770      	bx	lr
 801783a:	2020      	movs	r0, #32
 801783c:	4770      	bx	lr

0801783e <__i2b>:
 801783e:	b510      	push	{r4, lr}
 8017840:	460c      	mov	r4, r1
 8017842:	2101      	movs	r1, #1
 8017844:	f7ff fee9 	bl	801761a <_Balloc>
 8017848:	2201      	movs	r2, #1
 801784a:	6144      	str	r4, [r0, #20]
 801784c:	6102      	str	r2, [r0, #16]
 801784e:	bd10      	pop	{r4, pc}

08017850 <__multiply>:
 8017850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017854:	4614      	mov	r4, r2
 8017856:	690a      	ldr	r2, [r1, #16]
 8017858:	6923      	ldr	r3, [r4, #16]
 801785a:	429a      	cmp	r2, r3
 801785c:	bfb8      	it	lt
 801785e:	460b      	movlt	r3, r1
 8017860:	4688      	mov	r8, r1
 8017862:	bfbc      	itt	lt
 8017864:	46a0      	movlt	r8, r4
 8017866:	461c      	movlt	r4, r3
 8017868:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801786c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017870:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017874:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017878:	eb07 0609 	add.w	r6, r7, r9
 801787c:	42b3      	cmp	r3, r6
 801787e:	bfb8      	it	lt
 8017880:	3101      	addlt	r1, #1
 8017882:	f7ff feca 	bl	801761a <_Balloc>
 8017886:	f100 0514 	add.w	r5, r0, #20
 801788a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801788e:	462b      	mov	r3, r5
 8017890:	2200      	movs	r2, #0
 8017892:	4573      	cmp	r3, lr
 8017894:	d316      	bcc.n	80178c4 <__multiply+0x74>
 8017896:	f104 0214 	add.w	r2, r4, #20
 801789a:	f108 0114 	add.w	r1, r8, #20
 801789e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80178a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	9b00      	ldr	r3, [sp, #0]
 80178aa:	9201      	str	r2, [sp, #4]
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d80c      	bhi.n	80178ca <__multiply+0x7a>
 80178b0:	2e00      	cmp	r6, #0
 80178b2:	dd03      	ble.n	80178bc <__multiply+0x6c>
 80178b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d05d      	beq.n	8017978 <__multiply+0x128>
 80178bc:	6106      	str	r6, [r0, #16]
 80178be:	b003      	add	sp, #12
 80178c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c4:	f843 2b04 	str.w	r2, [r3], #4
 80178c8:	e7e3      	b.n	8017892 <__multiply+0x42>
 80178ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80178ce:	f1bb 0f00 	cmp.w	fp, #0
 80178d2:	d023      	beq.n	801791c <__multiply+0xcc>
 80178d4:	4689      	mov	r9, r1
 80178d6:	46ac      	mov	ip, r5
 80178d8:	f04f 0800 	mov.w	r8, #0
 80178dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80178e0:	f8dc a000 	ldr.w	sl, [ip]
 80178e4:	b2a3      	uxth	r3, r4
 80178e6:	fa1f fa8a 	uxth.w	sl, sl
 80178ea:	fb0b a303 	mla	r3, fp, r3, sl
 80178ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80178f2:	f8dc 4000 	ldr.w	r4, [ip]
 80178f6:	4443      	add	r3, r8
 80178f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80178fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8017900:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017904:	46e2      	mov	sl, ip
 8017906:	b29b      	uxth	r3, r3
 8017908:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801790c:	454f      	cmp	r7, r9
 801790e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017912:	f84a 3b04 	str.w	r3, [sl], #4
 8017916:	d82b      	bhi.n	8017970 <__multiply+0x120>
 8017918:	f8cc 8004 	str.w	r8, [ip, #4]
 801791c:	9b01      	ldr	r3, [sp, #4]
 801791e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017922:	3204      	adds	r2, #4
 8017924:	f1ba 0f00 	cmp.w	sl, #0
 8017928:	d020      	beq.n	801796c <__multiply+0x11c>
 801792a:	682b      	ldr	r3, [r5, #0]
 801792c:	4689      	mov	r9, r1
 801792e:	46a8      	mov	r8, r5
 8017930:	f04f 0b00 	mov.w	fp, #0
 8017934:	f8b9 c000 	ldrh.w	ip, [r9]
 8017938:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801793c:	fb0a 440c 	mla	r4, sl, ip, r4
 8017940:	445c      	add	r4, fp
 8017942:	46c4      	mov	ip, r8
 8017944:	b29b      	uxth	r3, r3
 8017946:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801794a:	f84c 3b04 	str.w	r3, [ip], #4
 801794e:	f859 3b04 	ldr.w	r3, [r9], #4
 8017952:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017956:	0c1b      	lsrs	r3, r3, #16
 8017958:	fb0a b303 	mla	r3, sl, r3, fp
 801795c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017960:	454f      	cmp	r7, r9
 8017962:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017966:	d805      	bhi.n	8017974 <__multiply+0x124>
 8017968:	f8c8 3004 	str.w	r3, [r8, #4]
 801796c:	3504      	adds	r5, #4
 801796e:	e79b      	b.n	80178a8 <__multiply+0x58>
 8017970:	46d4      	mov	ip, sl
 8017972:	e7b3      	b.n	80178dc <__multiply+0x8c>
 8017974:	46e0      	mov	r8, ip
 8017976:	e7dd      	b.n	8017934 <__multiply+0xe4>
 8017978:	3e01      	subs	r6, #1
 801797a:	e799      	b.n	80178b0 <__multiply+0x60>

0801797c <__pow5mult>:
 801797c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017980:	4615      	mov	r5, r2
 8017982:	f012 0203 	ands.w	r2, r2, #3
 8017986:	4606      	mov	r6, r0
 8017988:	460f      	mov	r7, r1
 801798a:	d007      	beq.n	801799c <__pow5mult+0x20>
 801798c:	3a01      	subs	r2, #1
 801798e:	4c21      	ldr	r4, [pc, #132]	; (8017a14 <__pow5mult+0x98>)
 8017990:	2300      	movs	r3, #0
 8017992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017996:	f7ff fe8b 	bl	80176b0 <__multadd>
 801799a:	4607      	mov	r7, r0
 801799c:	10ad      	asrs	r5, r5, #2
 801799e:	d035      	beq.n	8017a0c <__pow5mult+0x90>
 80179a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80179a2:	b93c      	cbnz	r4, 80179b4 <__pow5mult+0x38>
 80179a4:	2010      	movs	r0, #16
 80179a6:	f7ff fe13 	bl	80175d0 <malloc>
 80179aa:	6270      	str	r0, [r6, #36]	; 0x24
 80179ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80179b0:	6004      	str	r4, [r0, #0]
 80179b2:	60c4      	str	r4, [r0, #12]
 80179b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80179b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80179bc:	b94c      	cbnz	r4, 80179d2 <__pow5mult+0x56>
 80179be:	f240 2171 	movw	r1, #625	; 0x271
 80179c2:	4630      	mov	r0, r6
 80179c4:	f7ff ff3b 	bl	801783e <__i2b>
 80179c8:	2300      	movs	r3, #0
 80179ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80179ce:	4604      	mov	r4, r0
 80179d0:	6003      	str	r3, [r0, #0]
 80179d2:	f04f 0800 	mov.w	r8, #0
 80179d6:	07eb      	lsls	r3, r5, #31
 80179d8:	d50a      	bpl.n	80179f0 <__pow5mult+0x74>
 80179da:	4639      	mov	r1, r7
 80179dc:	4622      	mov	r2, r4
 80179de:	4630      	mov	r0, r6
 80179e0:	f7ff ff36 	bl	8017850 <__multiply>
 80179e4:	4639      	mov	r1, r7
 80179e6:	4681      	mov	r9, r0
 80179e8:	4630      	mov	r0, r6
 80179ea:	f7ff fe4a 	bl	8017682 <_Bfree>
 80179ee:	464f      	mov	r7, r9
 80179f0:	106d      	asrs	r5, r5, #1
 80179f2:	d00b      	beq.n	8017a0c <__pow5mult+0x90>
 80179f4:	6820      	ldr	r0, [r4, #0]
 80179f6:	b938      	cbnz	r0, 8017a08 <__pow5mult+0x8c>
 80179f8:	4622      	mov	r2, r4
 80179fa:	4621      	mov	r1, r4
 80179fc:	4630      	mov	r0, r6
 80179fe:	f7ff ff27 	bl	8017850 <__multiply>
 8017a02:	6020      	str	r0, [r4, #0]
 8017a04:	f8c0 8000 	str.w	r8, [r0]
 8017a08:	4604      	mov	r4, r0
 8017a0a:	e7e4      	b.n	80179d6 <__pow5mult+0x5a>
 8017a0c:	4638      	mov	r0, r7
 8017a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a12:	bf00      	nop
 8017a14:	080191c0 	.word	0x080191c0

08017a18 <__lshift>:
 8017a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a1c:	460c      	mov	r4, r1
 8017a1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017a22:	6923      	ldr	r3, [r4, #16]
 8017a24:	6849      	ldr	r1, [r1, #4]
 8017a26:	eb0a 0903 	add.w	r9, sl, r3
 8017a2a:	68a3      	ldr	r3, [r4, #8]
 8017a2c:	4607      	mov	r7, r0
 8017a2e:	4616      	mov	r6, r2
 8017a30:	f109 0501 	add.w	r5, r9, #1
 8017a34:	42ab      	cmp	r3, r5
 8017a36:	db32      	blt.n	8017a9e <__lshift+0x86>
 8017a38:	4638      	mov	r0, r7
 8017a3a:	f7ff fdee 	bl	801761a <_Balloc>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	4680      	mov	r8, r0
 8017a42:	f100 0114 	add.w	r1, r0, #20
 8017a46:	461a      	mov	r2, r3
 8017a48:	4553      	cmp	r3, sl
 8017a4a:	db2b      	blt.n	8017aa4 <__lshift+0x8c>
 8017a4c:	6920      	ldr	r0, [r4, #16]
 8017a4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017a52:	f104 0314 	add.w	r3, r4, #20
 8017a56:	f016 021f 	ands.w	r2, r6, #31
 8017a5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017a62:	d025      	beq.n	8017ab0 <__lshift+0x98>
 8017a64:	f1c2 0e20 	rsb	lr, r2, #32
 8017a68:	2000      	movs	r0, #0
 8017a6a:	681e      	ldr	r6, [r3, #0]
 8017a6c:	468a      	mov	sl, r1
 8017a6e:	4096      	lsls	r6, r2
 8017a70:	4330      	orrs	r0, r6
 8017a72:	f84a 0b04 	str.w	r0, [sl], #4
 8017a76:	f853 0b04 	ldr.w	r0, [r3], #4
 8017a7a:	459c      	cmp	ip, r3
 8017a7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8017a80:	d814      	bhi.n	8017aac <__lshift+0x94>
 8017a82:	6048      	str	r0, [r1, #4]
 8017a84:	b108      	cbz	r0, 8017a8a <__lshift+0x72>
 8017a86:	f109 0502 	add.w	r5, r9, #2
 8017a8a:	3d01      	subs	r5, #1
 8017a8c:	4638      	mov	r0, r7
 8017a8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8017a92:	4621      	mov	r1, r4
 8017a94:	f7ff fdf5 	bl	8017682 <_Bfree>
 8017a98:	4640      	mov	r0, r8
 8017a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a9e:	3101      	adds	r1, #1
 8017aa0:	005b      	lsls	r3, r3, #1
 8017aa2:	e7c7      	b.n	8017a34 <__lshift+0x1c>
 8017aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017aa8:	3301      	adds	r3, #1
 8017aaa:	e7cd      	b.n	8017a48 <__lshift+0x30>
 8017aac:	4651      	mov	r1, sl
 8017aae:	e7dc      	b.n	8017a6a <__lshift+0x52>
 8017ab0:	3904      	subs	r1, #4
 8017ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ab6:	f841 2f04 	str.w	r2, [r1, #4]!
 8017aba:	459c      	cmp	ip, r3
 8017abc:	d8f9      	bhi.n	8017ab2 <__lshift+0x9a>
 8017abe:	e7e4      	b.n	8017a8a <__lshift+0x72>

08017ac0 <__mcmp>:
 8017ac0:	6903      	ldr	r3, [r0, #16]
 8017ac2:	690a      	ldr	r2, [r1, #16]
 8017ac4:	1a9b      	subs	r3, r3, r2
 8017ac6:	b530      	push	{r4, r5, lr}
 8017ac8:	d10c      	bne.n	8017ae4 <__mcmp+0x24>
 8017aca:	0092      	lsls	r2, r2, #2
 8017acc:	3014      	adds	r0, #20
 8017ace:	3114      	adds	r1, #20
 8017ad0:	1884      	adds	r4, r0, r2
 8017ad2:	4411      	add	r1, r2
 8017ad4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017ad8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017adc:	4295      	cmp	r5, r2
 8017ade:	d003      	beq.n	8017ae8 <__mcmp+0x28>
 8017ae0:	d305      	bcc.n	8017aee <__mcmp+0x2e>
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	bd30      	pop	{r4, r5, pc}
 8017ae8:	42a0      	cmp	r0, r4
 8017aea:	d3f3      	bcc.n	8017ad4 <__mcmp+0x14>
 8017aec:	e7fa      	b.n	8017ae4 <__mcmp+0x24>
 8017aee:	f04f 33ff 	mov.w	r3, #4294967295
 8017af2:	e7f7      	b.n	8017ae4 <__mcmp+0x24>

08017af4 <__mdiff>:
 8017af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017af8:	460d      	mov	r5, r1
 8017afa:	4607      	mov	r7, r0
 8017afc:	4611      	mov	r1, r2
 8017afe:	4628      	mov	r0, r5
 8017b00:	4614      	mov	r4, r2
 8017b02:	f7ff ffdd 	bl	8017ac0 <__mcmp>
 8017b06:	1e06      	subs	r6, r0, #0
 8017b08:	d108      	bne.n	8017b1c <__mdiff+0x28>
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4638      	mov	r0, r7
 8017b0e:	f7ff fd84 	bl	801761a <_Balloc>
 8017b12:	2301      	movs	r3, #1
 8017b14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b1c:	bfa4      	itt	ge
 8017b1e:	4623      	movge	r3, r4
 8017b20:	462c      	movge	r4, r5
 8017b22:	4638      	mov	r0, r7
 8017b24:	6861      	ldr	r1, [r4, #4]
 8017b26:	bfa6      	itte	ge
 8017b28:	461d      	movge	r5, r3
 8017b2a:	2600      	movge	r6, #0
 8017b2c:	2601      	movlt	r6, #1
 8017b2e:	f7ff fd74 	bl	801761a <_Balloc>
 8017b32:	692b      	ldr	r3, [r5, #16]
 8017b34:	60c6      	str	r6, [r0, #12]
 8017b36:	6926      	ldr	r6, [r4, #16]
 8017b38:	f105 0914 	add.w	r9, r5, #20
 8017b3c:	f104 0214 	add.w	r2, r4, #20
 8017b40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017b44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017b48:	f100 0514 	add.w	r5, r0, #20
 8017b4c:	f04f 0e00 	mov.w	lr, #0
 8017b50:	f852 ab04 	ldr.w	sl, [r2], #4
 8017b54:	f859 4b04 	ldr.w	r4, [r9], #4
 8017b58:	fa1e f18a 	uxtah	r1, lr, sl
 8017b5c:	b2a3      	uxth	r3, r4
 8017b5e:	1ac9      	subs	r1, r1, r3
 8017b60:	0c23      	lsrs	r3, r4, #16
 8017b62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017b66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017b6a:	b289      	uxth	r1, r1
 8017b6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017b70:	45c8      	cmp	r8, r9
 8017b72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017b76:	4694      	mov	ip, r2
 8017b78:	f845 3b04 	str.w	r3, [r5], #4
 8017b7c:	d8e8      	bhi.n	8017b50 <__mdiff+0x5c>
 8017b7e:	45bc      	cmp	ip, r7
 8017b80:	d304      	bcc.n	8017b8c <__mdiff+0x98>
 8017b82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017b86:	b183      	cbz	r3, 8017baa <__mdiff+0xb6>
 8017b88:	6106      	str	r6, [r0, #16]
 8017b8a:	e7c5      	b.n	8017b18 <__mdiff+0x24>
 8017b8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017b90:	fa1e f381 	uxtah	r3, lr, r1
 8017b94:	141a      	asrs	r2, r3, #16
 8017b96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ba0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017ba4:	f845 3b04 	str.w	r3, [r5], #4
 8017ba8:	e7e9      	b.n	8017b7e <__mdiff+0x8a>
 8017baa:	3e01      	subs	r6, #1
 8017bac:	e7e9      	b.n	8017b82 <__mdiff+0x8e>
	...

08017bb0 <__ulp>:
 8017bb0:	4b12      	ldr	r3, [pc, #72]	; (8017bfc <__ulp+0x4c>)
 8017bb2:	ee10 2a90 	vmov	r2, s1
 8017bb6:	401a      	ands	r2, r3
 8017bb8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	dd04      	ble.n	8017bca <__ulp+0x1a>
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	ec41 0b10 	vmov	d0, r0, r1
 8017bc8:	4770      	bx	lr
 8017bca:	425b      	negs	r3, r3
 8017bcc:	151b      	asrs	r3, r3, #20
 8017bce:	2b13      	cmp	r3, #19
 8017bd0:	f04f 0000 	mov.w	r0, #0
 8017bd4:	f04f 0100 	mov.w	r1, #0
 8017bd8:	dc04      	bgt.n	8017be4 <__ulp+0x34>
 8017bda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017bde:	fa42 f103 	asr.w	r1, r2, r3
 8017be2:	e7ef      	b.n	8017bc4 <__ulp+0x14>
 8017be4:	3b14      	subs	r3, #20
 8017be6:	2b1e      	cmp	r3, #30
 8017be8:	f04f 0201 	mov.w	r2, #1
 8017bec:	bfda      	itte	le
 8017bee:	f1c3 031f 	rsble	r3, r3, #31
 8017bf2:	fa02 f303 	lslle.w	r3, r2, r3
 8017bf6:	4613      	movgt	r3, r2
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	e7e3      	b.n	8017bc4 <__ulp+0x14>
 8017bfc:	7ff00000 	.word	0x7ff00000

08017c00 <__b2d>:
 8017c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c02:	6905      	ldr	r5, [r0, #16]
 8017c04:	f100 0714 	add.w	r7, r0, #20
 8017c08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017c0c:	1f2e      	subs	r6, r5, #4
 8017c0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017c12:	4620      	mov	r0, r4
 8017c14:	f7ff fdc5 	bl	80177a2 <__hi0bits>
 8017c18:	f1c0 0320 	rsb	r3, r0, #32
 8017c1c:	280a      	cmp	r0, #10
 8017c1e:	600b      	str	r3, [r1, #0]
 8017c20:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017c98 <__b2d+0x98>
 8017c24:	dc14      	bgt.n	8017c50 <__b2d+0x50>
 8017c26:	f1c0 0e0b 	rsb	lr, r0, #11
 8017c2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8017c2e:	42b7      	cmp	r7, r6
 8017c30:	ea41 030c 	orr.w	r3, r1, ip
 8017c34:	bf34      	ite	cc
 8017c36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017c3a:	2100      	movcs	r1, #0
 8017c3c:	3015      	adds	r0, #21
 8017c3e:	fa04 f000 	lsl.w	r0, r4, r0
 8017c42:	fa21 f10e 	lsr.w	r1, r1, lr
 8017c46:	ea40 0201 	orr.w	r2, r0, r1
 8017c4a:	ec43 2b10 	vmov	d0, r2, r3
 8017c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c50:	42b7      	cmp	r7, r6
 8017c52:	bf3a      	itte	cc
 8017c54:	f1a5 0608 	subcc.w	r6, r5, #8
 8017c58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017c5c:	2100      	movcs	r1, #0
 8017c5e:	380b      	subs	r0, #11
 8017c60:	d015      	beq.n	8017c8e <__b2d+0x8e>
 8017c62:	4084      	lsls	r4, r0
 8017c64:	f1c0 0520 	rsb	r5, r0, #32
 8017c68:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017c6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017c70:	42be      	cmp	r6, r7
 8017c72:	fa21 fc05 	lsr.w	ip, r1, r5
 8017c76:	ea44 030c 	orr.w	r3, r4, ip
 8017c7a:	bf8c      	ite	hi
 8017c7c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017c80:	2400      	movls	r4, #0
 8017c82:	fa01 f000 	lsl.w	r0, r1, r0
 8017c86:	40ec      	lsrs	r4, r5
 8017c88:	ea40 0204 	orr.w	r2, r0, r4
 8017c8c:	e7dd      	b.n	8017c4a <__b2d+0x4a>
 8017c8e:	ea44 030c 	orr.w	r3, r4, ip
 8017c92:	460a      	mov	r2, r1
 8017c94:	e7d9      	b.n	8017c4a <__b2d+0x4a>
 8017c96:	bf00      	nop
 8017c98:	3ff00000 	.word	0x3ff00000

08017c9c <__d2b>:
 8017c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ca0:	460e      	mov	r6, r1
 8017ca2:	2101      	movs	r1, #1
 8017ca4:	ec59 8b10 	vmov	r8, r9, d0
 8017ca8:	4615      	mov	r5, r2
 8017caa:	f7ff fcb6 	bl	801761a <_Balloc>
 8017cae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017cb2:	4607      	mov	r7, r0
 8017cb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017cb8:	bb34      	cbnz	r4, 8017d08 <__d2b+0x6c>
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	f1b8 0300 	subs.w	r3, r8, #0
 8017cc0:	d027      	beq.n	8017d12 <__d2b+0x76>
 8017cc2:	a802      	add	r0, sp, #8
 8017cc4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017cc8:	f7ff fd8a 	bl	80177e0 <__lo0bits>
 8017ccc:	9900      	ldr	r1, [sp, #0]
 8017cce:	b1f0      	cbz	r0, 8017d0e <__d2b+0x72>
 8017cd0:	9a01      	ldr	r2, [sp, #4]
 8017cd2:	f1c0 0320 	rsb	r3, r0, #32
 8017cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8017cda:	430b      	orrs	r3, r1
 8017cdc:	40c2      	lsrs	r2, r0
 8017cde:	617b      	str	r3, [r7, #20]
 8017ce0:	9201      	str	r2, [sp, #4]
 8017ce2:	9b01      	ldr	r3, [sp, #4]
 8017ce4:	61bb      	str	r3, [r7, #24]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	bf14      	ite	ne
 8017cea:	2102      	movne	r1, #2
 8017cec:	2101      	moveq	r1, #1
 8017cee:	6139      	str	r1, [r7, #16]
 8017cf0:	b1c4      	cbz	r4, 8017d24 <__d2b+0x88>
 8017cf2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017cf6:	4404      	add	r4, r0
 8017cf8:	6034      	str	r4, [r6, #0]
 8017cfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017cfe:	6028      	str	r0, [r5, #0]
 8017d00:	4638      	mov	r0, r7
 8017d02:	b003      	add	sp, #12
 8017d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d0c:	e7d5      	b.n	8017cba <__d2b+0x1e>
 8017d0e:	6179      	str	r1, [r7, #20]
 8017d10:	e7e7      	b.n	8017ce2 <__d2b+0x46>
 8017d12:	a801      	add	r0, sp, #4
 8017d14:	f7ff fd64 	bl	80177e0 <__lo0bits>
 8017d18:	9b01      	ldr	r3, [sp, #4]
 8017d1a:	617b      	str	r3, [r7, #20]
 8017d1c:	2101      	movs	r1, #1
 8017d1e:	6139      	str	r1, [r7, #16]
 8017d20:	3020      	adds	r0, #32
 8017d22:	e7e5      	b.n	8017cf0 <__d2b+0x54>
 8017d24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017d28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017d2c:	6030      	str	r0, [r6, #0]
 8017d2e:	6918      	ldr	r0, [r3, #16]
 8017d30:	f7ff fd37 	bl	80177a2 <__hi0bits>
 8017d34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017d38:	e7e1      	b.n	8017cfe <__d2b+0x62>

08017d3a <__ratio>:
 8017d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3e:	4688      	mov	r8, r1
 8017d40:	4669      	mov	r1, sp
 8017d42:	4681      	mov	r9, r0
 8017d44:	f7ff ff5c 	bl	8017c00 <__b2d>
 8017d48:	a901      	add	r1, sp, #4
 8017d4a:	4640      	mov	r0, r8
 8017d4c:	ec57 6b10 	vmov	r6, r7, d0
 8017d50:	f7ff ff56 	bl	8017c00 <__b2d>
 8017d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017d58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017d5c:	eba3 0c02 	sub.w	ip, r3, r2
 8017d60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017d64:	1a9b      	subs	r3, r3, r2
 8017d66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017d6a:	ec5b ab10 	vmov	sl, fp, d0
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	bfce      	itee	gt
 8017d72:	463a      	movgt	r2, r7
 8017d74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017d78:	465a      	movle	r2, fp
 8017d7a:	4659      	mov	r1, fp
 8017d7c:	463d      	mov	r5, r7
 8017d7e:	bfd4      	ite	le
 8017d80:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017d84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017d88:	4630      	mov	r0, r6
 8017d8a:	ee10 2a10 	vmov	r2, s0
 8017d8e:	460b      	mov	r3, r1
 8017d90:	4629      	mov	r1, r5
 8017d92:	f7e8 fd73 	bl	800087c <__aeabi_ddiv>
 8017d96:	ec41 0b10 	vmov	d0, r0, r1
 8017d9a:	b003      	add	sp, #12
 8017d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017da0 <__copybits>:
 8017da0:	3901      	subs	r1, #1
 8017da2:	b510      	push	{r4, lr}
 8017da4:	1149      	asrs	r1, r1, #5
 8017da6:	6914      	ldr	r4, [r2, #16]
 8017da8:	3101      	adds	r1, #1
 8017daa:	f102 0314 	add.w	r3, r2, #20
 8017dae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017db2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017db6:	42a3      	cmp	r3, r4
 8017db8:	4602      	mov	r2, r0
 8017dba:	d303      	bcc.n	8017dc4 <__copybits+0x24>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	428a      	cmp	r2, r1
 8017dc0:	d305      	bcc.n	8017dce <__copybits+0x2e>
 8017dc2:	bd10      	pop	{r4, pc}
 8017dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dc8:	f840 2b04 	str.w	r2, [r0], #4
 8017dcc:	e7f3      	b.n	8017db6 <__copybits+0x16>
 8017dce:	f842 3b04 	str.w	r3, [r2], #4
 8017dd2:	e7f4      	b.n	8017dbe <__copybits+0x1e>

08017dd4 <__any_on>:
 8017dd4:	f100 0214 	add.w	r2, r0, #20
 8017dd8:	6900      	ldr	r0, [r0, #16]
 8017dda:	114b      	asrs	r3, r1, #5
 8017ddc:	4298      	cmp	r0, r3
 8017dde:	b510      	push	{r4, lr}
 8017de0:	db11      	blt.n	8017e06 <__any_on+0x32>
 8017de2:	dd0a      	ble.n	8017dfa <__any_on+0x26>
 8017de4:	f011 011f 	ands.w	r1, r1, #31
 8017de8:	d007      	beq.n	8017dfa <__any_on+0x26>
 8017dea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017dee:	fa24 f001 	lsr.w	r0, r4, r1
 8017df2:	fa00 f101 	lsl.w	r1, r0, r1
 8017df6:	428c      	cmp	r4, r1
 8017df8:	d10b      	bne.n	8017e12 <__any_on+0x3e>
 8017dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017dfe:	4293      	cmp	r3, r2
 8017e00:	d803      	bhi.n	8017e0a <__any_on+0x36>
 8017e02:	2000      	movs	r0, #0
 8017e04:	bd10      	pop	{r4, pc}
 8017e06:	4603      	mov	r3, r0
 8017e08:	e7f7      	b.n	8017dfa <__any_on+0x26>
 8017e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017e0e:	2900      	cmp	r1, #0
 8017e10:	d0f5      	beq.n	8017dfe <__any_on+0x2a>
 8017e12:	2001      	movs	r0, #1
 8017e14:	e7f6      	b.n	8017e04 <__any_on+0x30>

08017e16 <_calloc_r>:
 8017e16:	b538      	push	{r3, r4, r5, lr}
 8017e18:	fb02 f401 	mul.w	r4, r2, r1
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	f000 f857 	bl	8017ed0 <_malloc_r>
 8017e22:	4605      	mov	r5, r0
 8017e24:	b118      	cbz	r0, 8017e2e <_calloc_r+0x18>
 8017e26:	4622      	mov	r2, r4
 8017e28:	2100      	movs	r1, #0
 8017e2a:	f7fc fc9f 	bl	801476c <memset>
 8017e2e:	4628      	mov	r0, r5
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
	...

08017e34 <_free_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4605      	mov	r5, r0
 8017e38:	2900      	cmp	r1, #0
 8017e3a:	d045      	beq.n	8017ec8 <_free_r+0x94>
 8017e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e40:	1f0c      	subs	r4, r1, #4
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	bfb8      	it	lt
 8017e46:	18e4      	addlt	r4, r4, r3
 8017e48:	f000 fe30 	bl	8018aac <__malloc_lock>
 8017e4c:	4a1f      	ldr	r2, [pc, #124]	; (8017ecc <_free_r+0x98>)
 8017e4e:	6813      	ldr	r3, [r2, #0]
 8017e50:	4610      	mov	r0, r2
 8017e52:	b933      	cbnz	r3, 8017e62 <_free_r+0x2e>
 8017e54:	6063      	str	r3, [r4, #4]
 8017e56:	6014      	str	r4, [r2, #0]
 8017e58:	4628      	mov	r0, r5
 8017e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e5e:	f000 be26 	b.w	8018aae <__malloc_unlock>
 8017e62:	42a3      	cmp	r3, r4
 8017e64:	d90c      	bls.n	8017e80 <_free_r+0x4c>
 8017e66:	6821      	ldr	r1, [r4, #0]
 8017e68:	1862      	adds	r2, r4, r1
 8017e6a:	4293      	cmp	r3, r2
 8017e6c:	bf04      	itt	eq
 8017e6e:	681a      	ldreq	r2, [r3, #0]
 8017e70:	685b      	ldreq	r3, [r3, #4]
 8017e72:	6063      	str	r3, [r4, #4]
 8017e74:	bf04      	itt	eq
 8017e76:	1852      	addeq	r2, r2, r1
 8017e78:	6022      	streq	r2, [r4, #0]
 8017e7a:	6004      	str	r4, [r0, #0]
 8017e7c:	e7ec      	b.n	8017e58 <_free_r+0x24>
 8017e7e:	4613      	mov	r3, r2
 8017e80:	685a      	ldr	r2, [r3, #4]
 8017e82:	b10a      	cbz	r2, 8017e88 <_free_r+0x54>
 8017e84:	42a2      	cmp	r2, r4
 8017e86:	d9fa      	bls.n	8017e7e <_free_r+0x4a>
 8017e88:	6819      	ldr	r1, [r3, #0]
 8017e8a:	1858      	adds	r0, r3, r1
 8017e8c:	42a0      	cmp	r0, r4
 8017e8e:	d10b      	bne.n	8017ea8 <_free_r+0x74>
 8017e90:	6820      	ldr	r0, [r4, #0]
 8017e92:	4401      	add	r1, r0
 8017e94:	1858      	adds	r0, r3, r1
 8017e96:	4282      	cmp	r2, r0
 8017e98:	6019      	str	r1, [r3, #0]
 8017e9a:	d1dd      	bne.n	8017e58 <_free_r+0x24>
 8017e9c:	6810      	ldr	r0, [r2, #0]
 8017e9e:	6852      	ldr	r2, [r2, #4]
 8017ea0:	605a      	str	r2, [r3, #4]
 8017ea2:	4401      	add	r1, r0
 8017ea4:	6019      	str	r1, [r3, #0]
 8017ea6:	e7d7      	b.n	8017e58 <_free_r+0x24>
 8017ea8:	d902      	bls.n	8017eb0 <_free_r+0x7c>
 8017eaa:	230c      	movs	r3, #12
 8017eac:	602b      	str	r3, [r5, #0]
 8017eae:	e7d3      	b.n	8017e58 <_free_r+0x24>
 8017eb0:	6820      	ldr	r0, [r4, #0]
 8017eb2:	1821      	adds	r1, r4, r0
 8017eb4:	428a      	cmp	r2, r1
 8017eb6:	bf04      	itt	eq
 8017eb8:	6811      	ldreq	r1, [r2, #0]
 8017eba:	6852      	ldreq	r2, [r2, #4]
 8017ebc:	6062      	str	r2, [r4, #4]
 8017ebe:	bf04      	itt	eq
 8017ec0:	1809      	addeq	r1, r1, r0
 8017ec2:	6021      	streq	r1, [r4, #0]
 8017ec4:	605c      	str	r4, [r3, #4]
 8017ec6:	e7c7      	b.n	8017e58 <_free_r+0x24>
 8017ec8:	bd38      	pop	{r3, r4, r5, pc}
 8017eca:	bf00      	nop
 8017ecc:	200481d8 	.word	0x200481d8

08017ed0 <_malloc_r>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	1ccd      	adds	r5, r1, #3
 8017ed4:	f025 0503 	bic.w	r5, r5, #3
 8017ed8:	3508      	adds	r5, #8
 8017eda:	2d0c      	cmp	r5, #12
 8017edc:	bf38      	it	cc
 8017ede:	250c      	movcc	r5, #12
 8017ee0:	2d00      	cmp	r5, #0
 8017ee2:	4606      	mov	r6, r0
 8017ee4:	db01      	blt.n	8017eea <_malloc_r+0x1a>
 8017ee6:	42a9      	cmp	r1, r5
 8017ee8:	d903      	bls.n	8017ef2 <_malloc_r+0x22>
 8017eea:	230c      	movs	r3, #12
 8017eec:	6033      	str	r3, [r6, #0]
 8017eee:	2000      	movs	r0, #0
 8017ef0:	bd70      	pop	{r4, r5, r6, pc}
 8017ef2:	f000 fddb 	bl	8018aac <__malloc_lock>
 8017ef6:	4a21      	ldr	r2, [pc, #132]	; (8017f7c <_malloc_r+0xac>)
 8017ef8:	6814      	ldr	r4, [r2, #0]
 8017efa:	4621      	mov	r1, r4
 8017efc:	b991      	cbnz	r1, 8017f24 <_malloc_r+0x54>
 8017efe:	4c20      	ldr	r4, [pc, #128]	; (8017f80 <_malloc_r+0xb0>)
 8017f00:	6823      	ldr	r3, [r4, #0]
 8017f02:	b91b      	cbnz	r3, 8017f0c <_malloc_r+0x3c>
 8017f04:	4630      	mov	r0, r6
 8017f06:	f000 fc91 	bl	801882c <_sbrk_r>
 8017f0a:	6020      	str	r0, [r4, #0]
 8017f0c:	4629      	mov	r1, r5
 8017f0e:	4630      	mov	r0, r6
 8017f10:	f000 fc8c 	bl	801882c <_sbrk_r>
 8017f14:	1c43      	adds	r3, r0, #1
 8017f16:	d124      	bne.n	8017f62 <_malloc_r+0x92>
 8017f18:	230c      	movs	r3, #12
 8017f1a:	6033      	str	r3, [r6, #0]
 8017f1c:	4630      	mov	r0, r6
 8017f1e:	f000 fdc6 	bl	8018aae <__malloc_unlock>
 8017f22:	e7e4      	b.n	8017eee <_malloc_r+0x1e>
 8017f24:	680b      	ldr	r3, [r1, #0]
 8017f26:	1b5b      	subs	r3, r3, r5
 8017f28:	d418      	bmi.n	8017f5c <_malloc_r+0x8c>
 8017f2a:	2b0b      	cmp	r3, #11
 8017f2c:	d90f      	bls.n	8017f4e <_malloc_r+0x7e>
 8017f2e:	600b      	str	r3, [r1, #0]
 8017f30:	50cd      	str	r5, [r1, r3]
 8017f32:	18cc      	adds	r4, r1, r3
 8017f34:	4630      	mov	r0, r6
 8017f36:	f000 fdba 	bl	8018aae <__malloc_unlock>
 8017f3a:	f104 000b 	add.w	r0, r4, #11
 8017f3e:	1d23      	adds	r3, r4, #4
 8017f40:	f020 0007 	bic.w	r0, r0, #7
 8017f44:	1ac3      	subs	r3, r0, r3
 8017f46:	d0d3      	beq.n	8017ef0 <_malloc_r+0x20>
 8017f48:	425a      	negs	r2, r3
 8017f4a:	50e2      	str	r2, [r4, r3]
 8017f4c:	e7d0      	b.n	8017ef0 <_malloc_r+0x20>
 8017f4e:	428c      	cmp	r4, r1
 8017f50:	684b      	ldr	r3, [r1, #4]
 8017f52:	bf16      	itet	ne
 8017f54:	6063      	strne	r3, [r4, #4]
 8017f56:	6013      	streq	r3, [r2, #0]
 8017f58:	460c      	movne	r4, r1
 8017f5a:	e7eb      	b.n	8017f34 <_malloc_r+0x64>
 8017f5c:	460c      	mov	r4, r1
 8017f5e:	6849      	ldr	r1, [r1, #4]
 8017f60:	e7cc      	b.n	8017efc <_malloc_r+0x2c>
 8017f62:	1cc4      	adds	r4, r0, #3
 8017f64:	f024 0403 	bic.w	r4, r4, #3
 8017f68:	42a0      	cmp	r0, r4
 8017f6a:	d005      	beq.n	8017f78 <_malloc_r+0xa8>
 8017f6c:	1a21      	subs	r1, r4, r0
 8017f6e:	4630      	mov	r0, r6
 8017f70:	f000 fc5c 	bl	801882c <_sbrk_r>
 8017f74:	3001      	adds	r0, #1
 8017f76:	d0cf      	beq.n	8017f18 <_malloc_r+0x48>
 8017f78:	6025      	str	r5, [r4, #0]
 8017f7a:	e7db      	b.n	8017f34 <_malloc_r+0x64>
 8017f7c:	200481d8 	.word	0x200481d8
 8017f80:	200481dc 	.word	0x200481dc

08017f84 <__ssputs_r>:
 8017f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f88:	688e      	ldr	r6, [r1, #8]
 8017f8a:	429e      	cmp	r6, r3
 8017f8c:	4682      	mov	sl, r0
 8017f8e:	460c      	mov	r4, r1
 8017f90:	4690      	mov	r8, r2
 8017f92:	4699      	mov	r9, r3
 8017f94:	d837      	bhi.n	8018006 <__ssputs_r+0x82>
 8017f96:	898a      	ldrh	r2, [r1, #12]
 8017f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f9c:	d031      	beq.n	8018002 <__ssputs_r+0x7e>
 8017f9e:	6825      	ldr	r5, [r4, #0]
 8017fa0:	6909      	ldr	r1, [r1, #16]
 8017fa2:	1a6f      	subs	r7, r5, r1
 8017fa4:	6965      	ldr	r5, [r4, #20]
 8017fa6:	2302      	movs	r3, #2
 8017fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fac:	fb95 f5f3 	sdiv	r5, r5, r3
 8017fb0:	f109 0301 	add.w	r3, r9, #1
 8017fb4:	443b      	add	r3, r7
 8017fb6:	429d      	cmp	r5, r3
 8017fb8:	bf38      	it	cc
 8017fba:	461d      	movcc	r5, r3
 8017fbc:	0553      	lsls	r3, r2, #21
 8017fbe:	d530      	bpl.n	8018022 <__ssputs_r+0x9e>
 8017fc0:	4629      	mov	r1, r5
 8017fc2:	f7ff ff85 	bl	8017ed0 <_malloc_r>
 8017fc6:	4606      	mov	r6, r0
 8017fc8:	b950      	cbnz	r0, 8017fe0 <__ssputs_r+0x5c>
 8017fca:	230c      	movs	r3, #12
 8017fcc:	f8ca 3000 	str.w	r3, [sl]
 8017fd0:	89a3      	ldrh	r3, [r4, #12]
 8017fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fd6:	81a3      	strh	r3, [r4, #12]
 8017fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fe0:	463a      	mov	r2, r7
 8017fe2:	6921      	ldr	r1, [r4, #16]
 8017fe4:	f7ff fb0e 	bl	8017604 <memcpy>
 8017fe8:	89a3      	ldrh	r3, [r4, #12]
 8017fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ff2:	81a3      	strh	r3, [r4, #12]
 8017ff4:	6126      	str	r6, [r4, #16]
 8017ff6:	6165      	str	r5, [r4, #20]
 8017ff8:	443e      	add	r6, r7
 8017ffa:	1bed      	subs	r5, r5, r7
 8017ffc:	6026      	str	r6, [r4, #0]
 8017ffe:	60a5      	str	r5, [r4, #8]
 8018000:	464e      	mov	r6, r9
 8018002:	454e      	cmp	r6, r9
 8018004:	d900      	bls.n	8018008 <__ssputs_r+0x84>
 8018006:	464e      	mov	r6, r9
 8018008:	4632      	mov	r2, r6
 801800a:	4641      	mov	r1, r8
 801800c:	6820      	ldr	r0, [r4, #0]
 801800e:	f000 fd34 	bl	8018a7a <memmove>
 8018012:	68a3      	ldr	r3, [r4, #8]
 8018014:	1b9b      	subs	r3, r3, r6
 8018016:	60a3      	str	r3, [r4, #8]
 8018018:	6823      	ldr	r3, [r4, #0]
 801801a:	441e      	add	r6, r3
 801801c:	6026      	str	r6, [r4, #0]
 801801e:	2000      	movs	r0, #0
 8018020:	e7dc      	b.n	8017fdc <__ssputs_r+0x58>
 8018022:	462a      	mov	r2, r5
 8018024:	f000 fd44 	bl	8018ab0 <_realloc_r>
 8018028:	4606      	mov	r6, r0
 801802a:	2800      	cmp	r0, #0
 801802c:	d1e2      	bne.n	8017ff4 <__ssputs_r+0x70>
 801802e:	6921      	ldr	r1, [r4, #16]
 8018030:	4650      	mov	r0, sl
 8018032:	f7ff feff 	bl	8017e34 <_free_r>
 8018036:	e7c8      	b.n	8017fca <__ssputs_r+0x46>

08018038 <_svfiprintf_r>:
 8018038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803c:	461d      	mov	r5, r3
 801803e:	898b      	ldrh	r3, [r1, #12]
 8018040:	061f      	lsls	r7, r3, #24
 8018042:	b09d      	sub	sp, #116	; 0x74
 8018044:	4680      	mov	r8, r0
 8018046:	460c      	mov	r4, r1
 8018048:	4616      	mov	r6, r2
 801804a:	d50f      	bpl.n	801806c <_svfiprintf_r+0x34>
 801804c:	690b      	ldr	r3, [r1, #16]
 801804e:	b96b      	cbnz	r3, 801806c <_svfiprintf_r+0x34>
 8018050:	2140      	movs	r1, #64	; 0x40
 8018052:	f7ff ff3d 	bl	8017ed0 <_malloc_r>
 8018056:	6020      	str	r0, [r4, #0]
 8018058:	6120      	str	r0, [r4, #16]
 801805a:	b928      	cbnz	r0, 8018068 <_svfiprintf_r+0x30>
 801805c:	230c      	movs	r3, #12
 801805e:	f8c8 3000 	str.w	r3, [r8]
 8018062:	f04f 30ff 	mov.w	r0, #4294967295
 8018066:	e0c8      	b.n	80181fa <_svfiprintf_r+0x1c2>
 8018068:	2340      	movs	r3, #64	; 0x40
 801806a:	6163      	str	r3, [r4, #20]
 801806c:	2300      	movs	r3, #0
 801806e:	9309      	str	r3, [sp, #36]	; 0x24
 8018070:	2320      	movs	r3, #32
 8018072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018076:	2330      	movs	r3, #48	; 0x30
 8018078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801807c:	9503      	str	r5, [sp, #12]
 801807e:	f04f 0b01 	mov.w	fp, #1
 8018082:	4637      	mov	r7, r6
 8018084:	463d      	mov	r5, r7
 8018086:	f815 3b01 	ldrb.w	r3, [r5], #1
 801808a:	b10b      	cbz	r3, 8018090 <_svfiprintf_r+0x58>
 801808c:	2b25      	cmp	r3, #37	; 0x25
 801808e:	d13e      	bne.n	801810e <_svfiprintf_r+0xd6>
 8018090:	ebb7 0a06 	subs.w	sl, r7, r6
 8018094:	d00b      	beq.n	80180ae <_svfiprintf_r+0x76>
 8018096:	4653      	mov	r3, sl
 8018098:	4632      	mov	r2, r6
 801809a:	4621      	mov	r1, r4
 801809c:	4640      	mov	r0, r8
 801809e:	f7ff ff71 	bl	8017f84 <__ssputs_r>
 80180a2:	3001      	adds	r0, #1
 80180a4:	f000 80a4 	beq.w	80181f0 <_svfiprintf_r+0x1b8>
 80180a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180aa:	4453      	add	r3, sl
 80180ac:	9309      	str	r3, [sp, #36]	; 0x24
 80180ae:	783b      	ldrb	r3, [r7, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	f000 809d 	beq.w	80181f0 <_svfiprintf_r+0x1b8>
 80180b6:	2300      	movs	r3, #0
 80180b8:	f04f 32ff 	mov.w	r2, #4294967295
 80180bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180c0:	9304      	str	r3, [sp, #16]
 80180c2:	9307      	str	r3, [sp, #28]
 80180c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180c8:	931a      	str	r3, [sp, #104]	; 0x68
 80180ca:	462f      	mov	r7, r5
 80180cc:	2205      	movs	r2, #5
 80180ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80180d2:	4850      	ldr	r0, [pc, #320]	; (8018214 <_svfiprintf_r+0x1dc>)
 80180d4:	f7e8 f89c 	bl	8000210 <memchr>
 80180d8:	9b04      	ldr	r3, [sp, #16]
 80180da:	b9d0      	cbnz	r0, 8018112 <_svfiprintf_r+0xda>
 80180dc:	06d9      	lsls	r1, r3, #27
 80180de:	bf44      	itt	mi
 80180e0:	2220      	movmi	r2, #32
 80180e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180e6:	071a      	lsls	r2, r3, #28
 80180e8:	bf44      	itt	mi
 80180ea:	222b      	movmi	r2, #43	; 0x2b
 80180ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180f0:	782a      	ldrb	r2, [r5, #0]
 80180f2:	2a2a      	cmp	r2, #42	; 0x2a
 80180f4:	d015      	beq.n	8018122 <_svfiprintf_r+0xea>
 80180f6:	9a07      	ldr	r2, [sp, #28]
 80180f8:	462f      	mov	r7, r5
 80180fa:	2000      	movs	r0, #0
 80180fc:	250a      	movs	r5, #10
 80180fe:	4639      	mov	r1, r7
 8018100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018104:	3b30      	subs	r3, #48	; 0x30
 8018106:	2b09      	cmp	r3, #9
 8018108:	d94d      	bls.n	80181a6 <_svfiprintf_r+0x16e>
 801810a:	b1b8      	cbz	r0, 801813c <_svfiprintf_r+0x104>
 801810c:	e00f      	b.n	801812e <_svfiprintf_r+0xf6>
 801810e:	462f      	mov	r7, r5
 8018110:	e7b8      	b.n	8018084 <_svfiprintf_r+0x4c>
 8018112:	4a40      	ldr	r2, [pc, #256]	; (8018214 <_svfiprintf_r+0x1dc>)
 8018114:	1a80      	subs	r0, r0, r2
 8018116:	fa0b f000 	lsl.w	r0, fp, r0
 801811a:	4318      	orrs	r0, r3
 801811c:	9004      	str	r0, [sp, #16]
 801811e:	463d      	mov	r5, r7
 8018120:	e7d3      	b.n	80180ca <_svfiprintf_r+0x92>
 8018122:	9a03      	ldr	r2, [sp, #12]
 8018124:	1d11      	adds	r1, r2, #4
 8018126:	6812      	ldr	r2, [r2, #0]
 8018128:	9103      	str	r1, [sp, #12]
 801812a:	2a00      	cmp	r2, #0
 801812c:	db01      	blt.n	8018132 <_svfiprintf_r+0xfa>
 801812e:	9207      	str	r2, [sp, #28]
 8018130:	e004      	b.n	801813c <_svfiprintf_r+0x104>
 8018132:	4252      	negs	r2, r2
 8018134:	f043 0302 	orr.w	r3, r3, #2
 8018138:	9207      	str	r2, [sp, #28]
 801813a:	9304      	str	r3, [sp, #16]
 801813c:	783b      	ldrb	r3, [r7, #0]
 801813e:	2b2e      	cmp	r3, #46	; 0x2e
 8018140:	d10c      	bne.n	801815c <_svfiprintf_r+0x124>
 8018142:	787b      	ldrb	r3, [r7, #1]
 8018144:	2b2a      	cmp	r3, #42	; 0x2a
 8018146:	d133      	bne.n	80181b0 <_svfiprintf_r+0x178>
 8018148:	9b03      	ldr	r3, [sp, #12]
 801814a:	1d1a      	adds	r2, r3, #4
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	9203      	str	r2, [sp, #12]
 8018150:	2b00      	cmp	r3, #0
 8018152:	bfb8      	it	lt
 8018154:	f04f 33ff 	movlt.w	r3, #4294967295
 8018158:	3702      	adds	r7, #2
 801815a:	9305      	str	r3, [sp, #20]
 801815c:	4d2e      	ldr	r5, [pc, #184]	; (8018218 <_svfiprintf_r+0x1e0>)
 801815e:	7839      	ldrb	r1, [r7, #0]
 8018160:	2203      	movs	r2, #3
 8018162:	4628      	mov	r0, r5
 8018164:	f7e8 f854 	bl	8000210 <memchr>
 8018168:	b138      	cbz	r0, 801817a <_svfiprintf_r+0x142>
 801816a:	2340      	movs	r3, #64	; 0x40
 801816c:	1b40      	subs	r0, r0, r5
 801816e:	fa03 f000 	lsl.w	r0, r3, r0
 8018172:	9b04      	ldr	r3, [sp, #16]
 8018174:	4303      	orrs	r3, r0
 8018176:	3701      	adds	r7, #1
 8018178:	9304      	str	r3, [sp, #16]
 801817a:	7839      	ldrb	r1, [r7, #0]
 801817c:	4827      	ldr	r0, [pc, #156]	; (801821c <_svfiprintf_r+0x1e4>)
 801817e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018182:	2206      	movs	r2, #6
 8018184:	1c7e      	adds	r6, r7, #1
 8018186:	f7e8 f843 	bl	8000210 <memchr>
 801818a:	2800      	cmp	r0, #0
 801818c:	d038      	beq.n	8018200 <_svfiprintf_r+0x1c8>
 801818e:	4b24      	ldr	r3, [pc, #144]	; (8018220 <_svfiprintf_r+0x1e8>)
 8018190:	bb13      	cbnz	r3, 80181d8 <_svfiprintf_r+0x1a0>
 8018192:	9b03      	ldr	r3, [sp, #12]
 8018194:	3307      	adds	r3, #7
 8018196:	f023 0307 	bic.w	r3, r3, #7
 801819a:	3308      	adds	r3, #8
 801819c:	9303      	str	r3, [sp, #12]
 801819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181a0:	444b      	add	r3, r9
 80181a2:	9309      	str	r3, [sp, #36]	; 0x24
 80181a4:	e76d      	b.n	8018082 <_svfiprintf_r+0x4a>
 80181a6:	fb05 3202 	mla	r2, r5, r2, r3
 80181aa:	2001      	movs	r0, #1
 80181ac:	460f      	mov	r7, r1
 80181ae:	e7a6      	b.n	80180fe <_svfiprintf_r+0xc6>
 80181b0:	2300      	movs	r3, #0
 80181b2:	3701      	adds	r7, #1
 80181b4:	9305      	str	r3, [sp, #20]
 80181b6:	4619      	mov	r1, r3
 80181b8:	250a      	movs	r5, #10
 80181ba:	4638      	mov	r0, r7
 80181bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181c0:	3a30      	subs	r2, #48	; 0x30
 80181c2:	2a09      	cmp	r2, #9
 80181c4:	d903      	bls.n	80181ce <_svfiprintf_r+0x196>
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d0c8      	beq.n	801815c <_svfiprintf_r+0x124>
 80181ca:	9105      	str	r1, [sp, #20]
 80181cc:	e7c6      	b.n	801815c <_svfiprintf_r+0x124>
 80181ce:	fb05 2101 	mla	r1, r5, r1, r2
 80181d2:	2301      	movs	r3, #1
 80181d4:	4607      	mov	r7, r0
 80181d6:	e7f0      	b.n	80181ba <_svfiprintf_r+0x182>
 80181d8:	ab03      	add	r3, sp, #12
 80181da:	9300      	str	r3, [sp, #0]
 80181dc:	4622      	mov	r2, r4
 80181de:	4b11      	ldr	r3, [pc, #68]	; (8018224 <_svfiprintf_r+0x1ec>)
 80181e0:	a904      	add	r1, sp, #16
 80181e2:	4640      	mov	r0, r8
 80181e4:	f7fc fb5e 	bl	80148a4 <_printf_float>
 80181e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80181ec:	4681      	mov	r9, r0
 80181ee:	d1d6      	bne.n	801819e <_svfiprintf_r+0x166>
 80181f0:	89a3      	ldrh	r3, [r4, #12]
 80181f2:	065b      	lsls	r3, r3, #25
 80181f4:	f53f af35 	bmi.w	8018062 <_svfiprintf_r+0x2a>
 80181f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181fa:	b01d      	add	sp, #116	; 0x74
 80181fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018200:	ab03      	add	r3, sp, #12
 8018202:	9300      	str	r3, [sp, #0]
 8018204:	4622      	mov	r2, r4
 8018206:	4b07      	ldr	r3, [pc, #28]	; (8018224 <_svfiprintf_r+0x1ec>)
 8018208:	a904      	add	r1, sp, #16
 801820a:	4640      	mov	r0, r8
 801820c:	f7fc fe00 	bl	8014e10 <_printf_i>
 8018210:	e7ea      	b.n	80181e8 <_svfiprintf_r+0x1b0>
 8018212:	bf00      	nop
 8018214:	080191cc 	.word	0x080191cc
 8018218:	080191d2 	.word	0x080191d2
 801821c:	080191d6 	.word	0x080191d6
 8018220:	080148a5 	.word	0x080148a5
 8018224:	08017f85 	.word	0x08017f85

08018228 <_sungetc_r>:
 8018228:	b538      	push	{r3, r4, r5, lr}
 801822a:	1c4b      	adds	r3, r1, #1
 801822c:	4614      	mov	r4, r2
 801822e:	d103      	bne.n	8018238 <_sungetc_r+0x10>
 8018230:	f04f 35ff 	mov.w	r5, #4294967295
 8018234:	4628      	mov	r0, r5
 8018236:	bd38      	pop	{r3, r4, r5, pc}
 8018238:	8993      	ldrh	r3, [r2, #12]
 801823a:	f023 0320 	bic.w	r3, r3, #32
 801823e:	8193      	strh	r3, [r2, #12]
 8018240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018242:	6852      	ldr	r2, [r2, #4]
 8018244:	b2cd      	uxtb	r5, r1
 8018246:	b18b      	cbz	r3, 801826c <_sungetc_r+0x44>
 8018248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801824a:	4293      	cmp	r3, r2
 801824c:	dd08      	ble.n	8018260 <_sungetc_r+0x38>
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	1e5a      	subs	r2, r3, #1
 8018252:	6022      	str	r2, [r4, #0]
 8018254:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018258:	6863      	ldr	r3, [r4, #4]
 801825a:	3301      	adds	r3, #1
 801825c:	6063      	str	r3, [r4, #4]
 801825e:	e7e9      	b.n	8018234 <_sungetc_r+0xc>
 8018260:	4621      	mov	r1, r4
 8018262:	f000 fbc3 	bl	80189ec <__submore>
 8018266:	2800      	cmp	r0, #0
 8018268:	d0f1      	beq.n	801824e <_sungetc_r+0x26>
 801826a:	e7e1      	b.n	8018230 <_sungetc_r+0x8>
 801826c:	6921      	ldr	r1, [r4, #16]
 801826e:	6823      	ldr	r3, [r4, #0]
 8018270:	b151      	cbz	r1, 8018288 <_sungetc_r+0x60>
 8018272:	4299      	cmp	r1, r3
 8018274:	d208      	bcs.n	8018288 <_sungetc_r+0x60>
 8018276:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801827a:	42a9      	cmp	r1, r5
 801827c:	d104      	bne.n	8018288 <_sungetc_r+0x60>
 801827e:	3b01      	subs	r3, #1
 8018280:	3201      	adds	r2, #1
 8018282:	6023      	str	r3, [r4, #0]
 8018284:	6062      	str	r2, [r4, #4]
 8018286:	e7d5      	b.n	8018234 <_sungetc_r+0xc>
 8018288:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801828c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018290:	6363      	str	r3, [r4, #52]	; 0x34
 8018292:	2303      	movs	r3, #3
 8018294:	63a3      	str	r3, [r4, #56]	; 0x38
 8018296:	4623      	mov	r3, r4
 8018298:	f803 5f46 	strb.w	r5, [r3, #70]!
 801829c:	6023      	str	r3, [r4, #0]
 801829e:	2301      	movs	r3, #1
 80182a0:	e7dc      	b.n	801825c <_sungetc_r+0x34>

080182a2 <__ssrefill_r>:
 80182a2:	b510      	push	{r4, lr}
 80182a4:	460c      	mov	r4, r1
 80182a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80182a8:	b169      	cbz	r1, 80182c6 <__ssrefill_r+0x24>
 80182aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182ae:	4299      	cmp	r1, r3
 80182b0:	d001      	beq.n	80182b6 <__ssrefill_r+0x14>
 80182b2:	f7ff fdbf 	bl	8017e34 <_free_r>
 80182b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80182b8:	6063      	str	r3, [r4, #4]
 80182ba:	2000      	movs	r0, #0
 80182bc:	6360      	str	r0, [r4, #52]	; 0x34
 80182be:	b113      	cbz	r3, 80182c6 <__ssrefill_r+0x24>
 80182c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80182c2:	6023      	str	r3, [r4, #0]
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	6923      	ldr	r3, [r4, #16]
 80182c8:	6023      	str	r3, [r4, #0]
 80182ca:	2300      	movs	r3, #0
 80182cc:	6063      	str	r3, [r4, #4]
 80182ce:	89a3      	ldrh	r3, [r4, #12]
 80182d0:	f043 0320 	orr.w	r3, r3, #32
 80182d4:	81a3      	strh	r3, [r4, #12]
 80182d6:	f04f 30ff 	mov.w	r0, #4294967295
 80182da:	e7f3      	b.n	80182c4 <__ssrefill_r+0x22>

080182dc <__ssvfiscanf_r>:
 80182dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182e0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80182e4:	460c      	mov	r4, r1
 80182e6:	2100      	movs	r1, #0
 80182e8:	9144      	str	r1, [sp, #272]	; 0x110
 80182ea:	9145      	str	r1, [sp, #276]	; 0x114
 80182ec:	499f      	ldr	r1, [pc, #636]	; (801856c <__ssvfiscanf_r+0x290>)
 80182ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80182f0:	f10d 0804 	add.w	r8, sp, #4
 80182f4:	499e      	ldr	r1, [pc, #632]	; (8018570 <__ssvfiscanf_r+0x294>)
 80182f6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018574 <__ssvfiscanf_r+0x298>
 80182fa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80182fe:	4606      	mov	r6, r0
 8018300:	4692      	mov	sl, r2
 8018302:	91a1      	str	r1, [sp, #644]	; 0x284
 8018304:	9300      	str	r3, [sp, #0]
 8018306:	270a      	movs	r7, #10
 8018308:	f89a 3000 	ldrb.w	r3, [sl]
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 812a 	beq.w	8018566 <__ssvfiscanf_r+0x28a>
 8018312:	4655      	mov	r5, sl
 8018314:	f7ff f93e 	bl	8017594 <__locale_ctype_ptr>
 8018318:	f815 bb01 	ldrb.w	fp, [r5], #1
 801831c:	4458      	add	r0, fp
 801831e:	7843      	ldrb	r3, [r0, #1]
 8018320:	f013 0308 	ands.w	r3, r3, #8
 8018324:	d01c      	beq.n	8018360 <__ssvfiscanf_r+0x84>
 8018326:	6863      	ldr	r3, [r4, #4]
 8018328:	2b00      	cmp	r3, #0
 801832a:	dd12      	ble.n	8018352 <__ssvfiscanf_r+0x76>
 801832c:	f7ff f932 	bl	8017594 <__locale_ctype_ptr>
 8018330:	6823      	ldr	r3, [r4, #0]
 8018332:	781a      	ldrb	r2, [r3, #0]
 8018334:	4410      	add	r0, r2
 8018336:	7842      	ldrb	r2, [r0, #1]
 8018338:	0712      	lsls	r2, r2, #28
 801833a:	d401      	bmi.n	8018340 <__ssvfiscanf_r+0x64>
 801833c:	46aa      	mov	sl, r5
 801833e:	e7e3      	b.n	8018308 <__ssvfiscanf_r+0x2c>
 8018340:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018342:	3201      	adds	r2, #1
 8018344:	9245      	str	r2, [sp, #276]	; 0x114
 8018346:	6862      	ldr	r2, [r4, #4]
 8018348:	3301      	adds	r3, #1
 801834a:	3a01      	subs	r2, #1
 801834c:	6062      	str	r2, [r4, #4]
 801834e:	6023      	str	r3, [r4, #0]
 8018350:	e7e9      	b.n	8018326 <__ssvfiscanf_r+0x4a>
 8018352:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018354:	4621      	mov	r1, r4
 8018356:	4630      	mov	r0, r6
 8018358:	4798      	blx	r3
 801835a:	2800      	cmp	r0, #0
 801835c:	d0e6      	beq.n	801832c <__ssvfiscanf_r+0x50>
 801835e:	e7ed      	b.n	801833c <__ssvfiscanf_r+0x60>
 8018360:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018364:	f040 8082 	bne.w	801846c <__ssvfiscanf_r+0x190>
 8018368:	9343      	str	r3, [sp, #268]	; 0x10c
 801836a:	9341      	str	r3, [sp, #260]	; 0x104
 801836c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018370:	2b2a      	cmp	r3, #42	; 0x2a
 8018372:	d103      	bne.n	801837c <__ssvfiscanf_r+0xa0>
 8018374:	2310      	movs	r3, #16
 8018376:	9341      	str	r3, [sp, #260]	; 0x104
 8018378:	f10a 0502 	add.w	r5, sl, #2
 801837c:	46aa      	mov	sl, r5
 801837e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018382:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018386:	2a09      	cmp	r2, #9
 8018388:	d922      	bls.n	80183d0 <__ssvfiscanf_r+0xf4>
 801838a:	2203      	movs	r2, #3
 801838c:	4879      	ldr	r0, [pc, #484]	; (8018574 <__ssvfiscanf_r+0x298>)
 801838e:	f7e7 ff3f 	bl	8000210 <memchr>
 8018392:	b138      	cbz	r0, 80183a4 <__ssvfiscanf_r+0xc8>
 8018394:	eba0 0309 	sub.w	r3, r0, r9
 8018398:	2001      	movs	r0, #1
 801839a:	4098      	lsls	r0, r3
 801839c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801839e:	4318      	orrs	r0, r3
 80183a0:	9041      	str	r0, [sp, #260]	; 0x104
 80183a2:	46aa      	mov	sl, r5
 80183a4:	f89a 3000 	ldrb.w	r3, [sl]
 80183a8:	2b67      	cmp	r3, #103	; 0x67
 80183aa:	f10a 0501 	add.w	r5, sl, #1
 80183ae:	d82b      	bhi.n	8018408 <__ssvfiscanf_r+0x12c>
 80183b0:	2b65      	cmp	r3, #101	; 0x65
 80183b2:	f080 809f 	bcs.w	80184f4 <__ssvfiscanf_r+0x218>
 80183b6:	2b47      	cmp	r3, #71	; 0x47
 80183b8:	d810      	bhi.n	80183dc <__ssvfiscanf_r+0x100>
 80183ba:	2b45      	cmp	r3, #69	; 0x45
 80183bc:	f080 809a 	bcs.w	80184f4 <__ssvfiscanf_r+0x218>
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d06c      	beq.n	801849e <__ssvfiscanf_r+0x1c2>
 80183c4:	2b25      	cmp	r3, #37	; 0x25
 80183c6:	d051      	beq.n	801846c <__ssvfiscanf_r+0x190>
 80183c8:	2303      	movs	r3, #3
 80183ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80183cc:	9742      	str	r7, [sp, #264]	; 0x108
 80183ce:	e027      	b.n	8018420 <__ssvfiscanf_r+0x144>
 80183d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80183d2:	fb07 1303 	mla	r3, r7, r3, r1
 80183d6:	3b30      	subs	r3, #48	; 0x30
 80183d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80183da:	e7cf      	b.n	801837c <__ssvfiscanf_r+0xa0>
 80183dc:	2b5b      	cmp	r3, #91	; 0x5b
 80183de:	d06a      	beq.n	80184b6 <__ssvfiscanf_r+0x1da>
 80183e0:	d80c      	bhi.n	80183fc <__ssvfiscanf_r+0x120>
 80183e2:	2b58      	cmp	r3, #88	; 0x58
 80183e4:	d1f0      	bne.n	80183c8 <__ssvfiscanf_r+0xec>
 80183e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80183e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183ec:	9241      	str	r2, [sp, #260]	; 0x104
 80183ee:	2210      	movs	r2, #16
 80183f0:	9242      	str	r2, [sp, #264]	; 0x108
 80183f2:	2b6e      	cmp	r3, #110	; 0x6e
 80183f4:	bf8c      	ite	hi
 80183f6:	2304      	movhi	r3, #4
 80183f8:	2303      	movls	r3, #3
 80183fa:	e010      	b.n	801841e <__ssvfiscanf_r+0x142>
 80183fc:	2b63      	cmp	r3, #99	; 0x63
 80183fe:	d065      	beq.n	80184cc <__ssvfiscanf_r+0x1f0>
 8018400:	2b64      	cmp	r3, #100	; 0x64
 8018402:	d1e1      	bne.n	80183c8 <__ssvfiscanf_r+0xec>
 8018404:	9742      	str	r7, [sp, #264]	; 0x108
 8018406:	e7f4      	b.n	80183f2 <__ssvfiscanf_r+0x116>
 8018408:	2b70      	cmp	r3, #112	; 0x70
 801840a:	d04b      	beq.n	80184a4 <__ssvfiscanf_r+0x1c8>
 801840c:	d826      	bhi.n	801845c <__ssvfiscanf_r+0x180>
 801840e:	2b6e      	cmp	r3, #110	; 0x6e
 8018410:	d062      	beq.n	80184d8 <__ssvfiscanf_r+0x1fc>
 8018412:	d84c      	bhi.n	80184ae <__ssvfiscanf_r+0x1d2>
 8018414:	2b69      	cmp	r3, #105	; 0x69
 8018416:	d1d7      	bne.n	80183c8 <__ssvfiscanf_r+0xec>
 8018418:	2300      	movs	r3, #0
 801841a:	9342      	str	r3, [sp, #264]	; 0x108
 801841c:	2303      	movs	r3, #3
 801841e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018420:	6863      	ldr	r3, [r4, #4]
 8018422:	2b00      	cmp	r3, #0
 8018424:	dd68      	ble.n	80184f8 <__ssvfiscanf_r+0x21c>
 8018426:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018428:	0659      	lsls	r1, r3, #25
 801842a:	d407      	bmi.n	801843c <__ssvfiscanf_r+0x160>
 801842c:	f7ff f8b2 	bl	8017594 <__locale_ctype_ptr>
 8018430:	6823      	ldr	r3, [r4, #0]
 8018432:	781a      	ldrb	r2, [r3, #0]
 8018434:	4410      	add	r0, r2
 8018436:	7842      	ldrb	r2, [r0, #1]
 8018438:	0712      	lsls	r2, r2, #28
 801843a:	d464      	bmi.n	8018506 <__ssvfiscanf_r+0x22a>
 801843c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801843e:	2b02      	cmp	r3, #2
 8018440:	dc73      	bgt.n	801852a <__ssvfiscanf_r+0x24e>
 8018442:	466b      	mov	r3, sp
 8018444:	4622      	mov	r2, r4
 8018446:	a941      	add	r1, sp, #260	; 0x104
 8018448:	4630      	mov	r0, r6
 801844a:	f000 f897 	bl	801857c <_scanf_chars>
 801844e:	2801      	cmp	r0, #1
 8018450:	f000 8089 	beq.w	8018566 <__ssvfiscanf_r+0x28a>
 8018454:	2802      	cmp	r0, #2
 8018456:	f47f af71 	bne.w	801833c <__ssvfiscanf_r+0x60>
 801845a:	e01d      	b.n	8018498 <__ssvfiscanf_r+0x1bc>
 801845c:	2b75      	cmp	r3, #117	; 0x75
 801845e:	d0d1      	beq.n	8018404 <__ssvfiscanf_r+0x128>
 8018460:	2b78      	cmp	r3, #120	; 0x78
 8018462:	d0c0      	beq.n	80183e6 <__ssvfiscanf_r+0x10a>
 8018464:	2b73      	cmp	r3, #115	; 0x73
 8018466:	d1af      	bne.n	80183c8 <__ssvfiscanf_r+0xec>
 8018468:	2302      	movs	r3, #2
 801846a:	e7d8      	b.n	801841e <__ssvfiscanf_r+0x142>
 801846c:	6863      	ldr	r3, [r4, #4]
 801846e:	2b00      	cmp	r3, #0
 8018470:	dd0c      	ble.n	801848c <__ssvfiscanf_r+0x1b0>
 8018472:	6823      	ldr	r3, [r4, #0]
 8018474:	781a      	ldrb	r2, [r3, #0]
 8018476:	455a      	cmp	r2, fp
 8018478:	d175      	bne.n	8018566 <__ssvfiscanf_r+0x28a>
 801847a:	3301      	adds	r3, #1
 801847c:	6862      	ldr	r2, [r4, #4]
 801847e:	6023      	str	r3, [r4, #0]
 8018480:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018482:	3a01      	subs	r2, #1
 8018484:	3301      	adds	r3, #1
 8018486:	6062      	str	r2, [r4, #4]
 8018488:	9345      	str	r3, [sp, #276]	; 0x114
 801848a:	e757      	b.n	801833c <__ssvfiscanf_r+0x60>
 801848c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801848e:	4621      	mov	r1, r4
 8018490:	4630      	mov	r0, r6
 8018492:	4798      	blx	r3
 8018494:	2800      	cmp	r0, #0
 8018496:	d0ec      	beq.n	8018472 <__ssvfiscanf_r+0x196>
 8018498:	9844      	ldr	r0, [sp, #272]	; 0x110
 801849a:	2800      	cmp	r0, #0
 801849c:	d159      	bne.n	8018552 <__ssvfiscanf_r+0x276>
 801849e:	f04f 30ff 	mov.w	r0, #4294967295
 80184a2:	e05c      	b.n	801855e <__ssvfiscanf_r+0x282>
 80184a4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80184a6:	f042 0220 	orr.w	r2, r2, #32
 80184aa:	9241      	str	r2, [sp, #260]	; 0x104
 80184ac:	e79b      	b.n	80183e6 <__ssvfiscanf_r+0x10a>
 80184ae:	2308      	movs	r3, #8
 80184b0:	9342      	str	r3, [sp, #264]	; 0x108
 80184b2:	2304      	movs	r3, #4
 80184b4:	e7b3      	b.n	801841e <__ssvfiscanf_r+0x142>
 80184b6:	4629      	mov	r1, r5
 80184b8:	4640      	mov	r0, r8
 80184ba:	f000 f9c7 	bl	801884c <__sccl>
 80184be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80184c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184c4:	9341      	str	r3, [sp, #260]	; 0x104
 80184c6:	4605      	mov	r5, r0
 80184c8:	2301      	movs	r3, #1
 80184ca:	e7a8      	b.n	801841e <__ssvfiscanf_r+0x142>
 80184cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80184ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184d2:	9341      	str	r3, [sp, #260]	; 0x104
 80184d4:	2300      	movs	r3, #0
 80184d6:	e7a2      	b.n	801841e <__ssvfiscanf_r+0x142>
 80184d8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80184da:	06c3      	lsls	r3, r0, #27
 80184dc:	f53f af2e 	bmi.w	801833c <__ssvfiscanf_r+0x60>
 80184e0:	9b00      	ldr	r3, [sp, #0]
 80184e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80184e4:	1d19      	adds	r1, r3, #4
 80184e6:	9100      	str	r1, [sp, #0]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	07c0      	lsls	r0, r0, #31
 80184ec:	bf4c      	ite	mi
 80184ee:	801a      	strhmi	r2, [r3, #0]
 80184f0:	601a      	strpl	r2, [r3, #0]
 80184f2:	e723      	b.n	801833c <__ssvfiscanf_r+0x60>
 80184f4:	2305      	movs	r3, #5
 80184f6:	e792      	b.n	801841e <__ssvfiscanf_r+0x142>
 80184f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80184fa:	4621      	mov	r1, r4
 80184fc:	4630      	mov	r0, r6
 80184fe:	4798      	blx	r3
 8018500:	2800      	cmp	r0, #0
 8018502:	d090      	beq.n	8018426 <__ssvfiscanf_r+0x14a>
 8018504:	e7c8      	b.n	8018498 <__ssvfiscanf_r+0x1bc>
 8018506:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018508:	3201      	adds	r2, #1
 801850a:	9245      	str	r2, [sp, #276]	; 0x114
 801850c:	6862      	ldr	r2, [r4, #4]
 801850e:	3a01      	subs	r2, #1
 8018510:	2a00      	cmp	r2, #0
 8018512:	6062      	str	r2, [r4, #4]
 8018514:	dd02      	ble.n	801851c <__ssvfiscanf_r+0x240>
 8018516:	3301      	adds	r3, #1
 8018518:	6023      	str	r3, [r4, #0]
 801851a:	e787      	b.n	801842c <__ssvfiscanf_r+0x150>
 801851c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801851e:	4621      	mov	r1, r4
 8018520:	4630      	mov	r0, r6
 8018522:	4798      	blx	r3
 8018524:	2800      	cmp	r0, #0
 8018526:	d081      	beq.n	801842c <__ssvfiscanf_r+0x150>
 8018528:	e7b6      	b.n	8018498 <__ssvfiscanf_r+0x1bc>
 801852a:	2b04      	cmp	r3, #4
 801852c:	dc06      	bgt.n	801853c <__ssvfiscanf_r+0x260>
 801852e:	466b      	mov	r3, sp
 8018530:	4622      	mov	r2, r4
 8018532:	a941      	add	r1, sp, #260	; 0x104
 8018534:	4630      	mov	r0, r6
 8018536:	f000 f885 	bl	8018644 <_scanf_i>
 801853a:	e788      	b.n	801844e <__ssvfiscanf_r+0x172>
 801853c:	4b0e      	ldr	r3, [pc, #56]	; (8018578 <__ssvfiscanf_r+0x29c>)
 801853e:	2b00      	cmp	r3, #0
 8018540:	f43f aefc 	beq.w	801833c <__ssvfiscanf_r+0x60>
 8018544:	466b      	mov	r3, sp
 8018546:	4622      	mov	r2, r4
 8018548:	a941      	add	r1, sp, #260	; 0x104
 801854a:	4630      	mov	r0, r6
 801854c:	f7fc fd72 	bl	8015034 <_scanf_float>
 8018550:	e77d      	b.n	801844e <__ssvfiscanf_r+0x172>
 8018552:	89a3      	ldrh	r3, [r4, #12]
 8018554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018558:	bf18      	it	ne
 801855a:	f04f 30ff 	movne.w	r0, #4294967295
 801855e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018566:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018568:	e7f9      	b.n	801855e <__ssvfiscanf_r+0x282>
 801856a:	bf00      	nop
 801856c:	08018229 	.word	0x08018229
 8018570:	080182a3 	.word	0x080182a3
 8018574:	080191d2 	.word	0x080191d2
 8018578:	08015035 	.word	0x08015035

0801857c <_scanf_chars>:
 801857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018580:	4615      	mov	r5, r2
 8018582:	688a      	ldr	r2, [r1, #8]
 8018584:	4680      	mov	r8, r0
 8018586:	460c      	mov	r4, r1
 8018588:	b932      	cbnz	r2, 8018598 <_scanf_chars+0x1c>
 801858a:	698a      	ldr	r2, [r1, #24]
 801858c:	2a00      	cmp	r2, #0
 801858e:	bf14      	ite	ne
 8018590:	f04f 32ff 	movne.w	r2, #4294967295
 8018594:	2201      	moveq	r2, #1
 8018596:	608a      	str	r2, [r1, #8]
 8018598:	6822      	ldr	r2, [r4, #0]
 801859a:	06d1      	lsls	r1, r2, #27
 801859c:	bf5f      	itttt	pl
 801859e:	681a      	ldrpl	r2, [r3, #0]
 80185a0:	1d11      	addpl	r1, r2, #4
 80185a2:	6019      	strpl	r1, [r3, #0]
 80185a4:	6817      	ldrpl	r7, [r2, #0]
 80185a6:	2600      	movs	r6, #0
 80185a8:	69a3      	ldr	r3, [r4, #24]
 80185aa:	b1db      	cbz	r3, 80185e4 <_scanf_chars+0x68>
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d107      	bne.n	80185c0 <_scanf_chars+0x44>
 80185b0:	682b      	ldr	r3, [r5, #0]
 80185b2:	6962      	ldr	r2, [r4, #20]
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	5cd3      	ldrb	r3, [r2, r3]
 80185b8:	b9a3      	cbnz	r3, 80185e4 <_scanf_chars+0x68>
 80185ba:	2e00      	cmp	r6, #0
 80185bc:	d132      	bne.n	8018624 <_scanf_chars+0xa8>
 80185be:	e006      	b.n	80185ce <_scanf_chars+0x52>
 80185c0:	2b02      	cmp	r3, #2
 80185c2:	d007      	beq.n	80185d4 <_scanf_chars+0x58>
 80185c4:	2e00      	cmp	r6, #0
 80185c6:	d12d      	bne.n	8018624 <_scanf_chars+0xa8>
 80185c8:	69a3      	ldr	r3, [r4, #24]
 80185ca:	2b01      	cmp	r3, #1
 80185cc:	d12a      	bne.n	8018624 <_scanf_chars+0xa8>
 80185ce:	2001      	movs	r0, #1
 80185d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d4:	f7fe ffde 	bl	8017594 <__locale_ctype_ptr>
 80185d8:	682b      	ldr	r3, [r5, #0]
 80185da:	781b      	ldrb	r3, [r3, #0]
 80185dc:	4418      	add	r0, r3
 80185de:	7843      	ldrb	r3, [r0, #1]
 80185e0:	071b      	lsls	r3, r3, #28
 80185e2:	d4ef      	bmi.n	80185c4 <_scanf_chars+0x48>
 80185e4:	6823      	ldr	r3, [r4, #0]
 80185e6:	06da      	lsls	r2, r3, #27
 80185e8:	bf5e      	ittt	pl
 80185ea:	682b      	ldrpl	r3, [r5, #0]
 80185ec:	781b      	ldrbpl	r3, [r3, #0]
 80185ee:	703b      	strbpl	r3, [r7, #0]
 80185f0:	682a      	ldr	r2, [r5, #0]
 80185f2:	686b      	ldr	r3, [r5, #4]
 80185f4:	f102 0201 	add.w	r2, r2, #1
 80185f8:	602a      	str	r2, [r5, #0]
 80185fa:	68a2      	ldr	r2, [r4, #8]
 80185fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8018600:	f102 32ff 	add.w	r2, r2, #4294967295
 8018604:	606b      	str	r3, [r5, #4]
 8018606:	f106 0601 	add.w	r6, r6, #1
 801860a:	bf58      	it	pl
 801860c:	3701      	addpl	r7, #1
 801860e:	60a2      	str	r2, [r4, #8]
 8018610:	b142      	cbz	r2, 8018624 <_scanf_chars+0xa8>
 8018612:	2b00      	cmp	r3, #0
 8018614:	dcc8      	bgt.n	80185a8 <_scanf_chars+0x2c>
 8018616:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801861a:	4629      	mov	r1, r5
 801861c:	4640      	mov	r0, r8
 801861e:	4798      	blx	r3
 8018620:	2800      	cmp	r0, #0
 8018622:	d0c1      	beq.n	80185a8 <_scanf_chars+0x2c>
 8018624:	6823      	ldr	r3, [r4, #0]
 8018626:	f013 0310 	ands.w	r3, r3, #16
 801862a:	d105      	bne.n	8018638 <_scanf_chars+0xbc>
 801862c:	68e2      	ldr	r2, [r4, #12]
 801862e:	3201      	adds	r2, #1
 8018630:	60e2      	str	r2, [r4, #12]
 8018632:	69a2      	ldr	r2, [r4, #24]
 8018634:	b102      	cbz	r2, 8018638 <_scanf_chars+0xbc>
 8018636:	703b      	strb	r3, [r7, #0]
 8018638:	6923      	ldr	r3, [r4, #16]
 801863a:	441e      	add	r6, r3
 801863c:	6126      	str	r6, [r4, #16]
 801863e:	2000      	movs	r0, #0
 8018640:	e7c6      	b.n	80185d0 <_scanf_chars+0x54>
	...

08018644 <_scanf_i>:
 8018644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018648:	469a      	mov	sl, r3
 801864a:	4b74      	ldr	r3, [pc, #464]	; (801881c <_scanf_i+0x1d8>)
 801864c:	460c      	mov	r4, r1
 801864e:	4683      	mov	fp, r0
 8018650:	4616      	mov	r6, r2
 8018652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018656:	b087      	sub	sp, #28
 8018658:	ab03      	add	r3, sp, #12
 801865a:	68a7      	ldr	r7, [r4, #8]
 801865c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018660:	4b6f      	ldr	r3, [pc, #444]	; (8018820 <_scanf_i+0x1dc>)
 8018662:	69a1      	ldr	r1, [r4, #24]
 8018664:	4a6f      	ldr	r2, [pc, #444]	; (8018824 <_scanf_i+0x1e0>)
 8018666:	2903      	cmp	r1, #3
 8018668:	bf08      	it	eq
 801866a:	461a      	moveq	r2, r3
 801866c:	1e7b      	subs	r3, r7, #1
 801866e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018672:	bf84      	itt	hi
 8018674:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018678:	60a3      	strhi	r3, [r4, #8]
 801867a:	6823      	ldr	r3, [r4, #0]
 801867c:	9200      	str	r2, [sp, #0]
 801867e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018682:	bf88      	it	hi
 8018684:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018688:	f104 091c 	add.w	r9, r4, #28
 801868c:	6023      	str	r3, [r4, #0]
 801868e:	bf8c      	ite	hi
 8018690:	197f      	addhi	r7, r7, r5
 8018692:	2700      	movls	r7, #0
 8018694:	464b      	mov	r3, r9
 8018696:	f04f 0800 	mov.w	r8, #0
 801869a:	9301      	str	r3, [sp, #4]
 801869c:	6831      	ldr	r1, [r6, #0]
 801869e:	ab03      	add	r3, sp, #12
 80186a0:	2202      	movs	r2, #2
 80186a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80186a6:	7809      	ldrb	r1, [r1, #0]
 80186a8:	f7e7 fdb2 	bl	8000210 <memchr>
 80186ac:	9b01      	ldr	r3, [sp, #4]
 80186ae:	b330      	cbz	r0, 80186fe <_scanf_i+0xba>
 80186b0:	f1b8 0f01 	cmp.w	r8, #1
 80186b4:	d15a      	bne.n	801876c <_scanf_i+0x128>
 80186b6:	6862      	ldr	r2, [r4, #4]
 80186b8:	b92a      	cbnz	r2, 80186c6 <_scanf_i+0x82>
 80186ba:	6822      	ldr	r2, [r4, #0]
 80186bc:	2108      	movs	r1, #8
 80186be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80186c2:	6061      	str	r1, [r4, #4]
 80186c4:	6022      	str	r2, [r4, #0]
 80186c6:	6822      	ldr	r2, [r4, #0]
 80186c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80186cc:	6022      	str	r2, [r4, #0]
 80186ce:	68a2      	ldr	r2, [r4, #8]
 80186d0:	1e51      	subs	r1, r2, #1
 80186d2:	60a1      	str	r1, [r4, #8]
 80186d4:	b19a      	cbz	r2, 80186fe <_scanf_i+0xba>
 80186d6:	6832      	ldr	r2, [r6, #0]
 80186d8:	1c51      	adds	r1, r2, #1
 80186da:	6031      	str	r1, [r6, #0]
 80186dc:	7812      	ldrb	r2, [r2, #0]
 80186de:	701a      	strb	r2, [r3, #0]
 80186e0:	1c5d      	adds	r5, r3, #1
 80186e2:	6873      	ldr	r3, [r6, #4]
 80186e4:	3b01      	subs	r3, #1
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	6073      	str	r3, [r6, #4]
 80186ea:	dc07      	bgt.n	80186fc <_scanf_i+0xb8>
 80186ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80186f0:	4631      	mov	r1, r6
 80186f2:	4658      	mov	r0, fp
 80186f4:	4798      	blx	r3
 80186f6:	2800      	cmp	r0, #0
 80186f8:	f040 8086 	bne.w	8018808 <_scanf_i+0x1c4>
 80186fc:	462b      	mov	r3, r5
 80186fe:	f108 0801 	add.w	r8, r8, #1
 8018702:	f1b8 0f03 	cmp.w	r8, #3
 8018706:	d1c8      	bne.n	801869a <_scanf_i+0x56>
 8018708:	6862      	ldr	r2, [r4, #4]
 801870a:	b90a      	cbnz	r2, 8018710 <_scanf_i+0xcc>
 801870c:	220a      	movs	r2, #10
 801870e:	6062      	str	r2, [r4, #4]
 8018710:	6862      	ldr	r2, [r4, #4]
 8018712:	4945      	ldr	r1, [pc, #276]	; (8018828 <_scanf_i+0x1e4>)
 8018714:	6960      	ldr	r0, [r4, #20]
 8018716:	9301      	str	r3, [sp, #4]
 8018718:	1a89      	subs	r1, r1, r2
 801871a:	f000 f897 	bl	801884c <__sccl>
 801871e:	9b01      	ldr	r3, [sp, #4]
 8018720:	f04f 0800 	mov.w	r8, #0
 8018724:	461d      	mov	r5, r3
 8018726:	68a3      	ldr	r3, [r4, #8]
 8018728:	6822      	ldr	r2, [r4, #0]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d03a      	beq.n	80187a4 <_scanf_i+0x160>
 801872e:	6831      	ldr	r1, [r6, #0]
 8018730:	6960      	ldr	r0, [r4, #20]
 8018732:	f891 c000 	ldrb.w	ip, [r1]
 8018736:	f810 000c 	ldrb.w	r0, [r0, ip]
 801873a:	2800      	cmp	r0, #0
 801873c:	d032      	beq.n	80187a4 <_scanf_i+0x160>
 801873e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018742:	d121      	bne.n	8018788 <_scanf_i+0x144>
 8018744:	0510      	lsls	r0, r2, #20
 8018746:	d51f      	bpl.n	8018788 <_scanf_i+0x144>
 8018748:	f108 0801 	add.w	r8, r8, #1
 801874c:	b117      	cbz	r7, 8018754 <_scanf_i+0x110>
 801874e:	3301      	adds	r3, #1
 8018750:	3f01      	subs	r7, #1
 8018752:	60a3      	str	r3, [r4, #8]
 8018754:	6873      	ldr	r3, [r6, #4]
 8018756:	3b01      	subs	r3, #1
 8018758:	2b00      	cmp	r3, #0
 801875a:	6073      	str	r3, [r6, #4]
 801875c:	dd1b      	ble.n	8018796 <_scanf_i+0x152>
 801875e:	6833      	ldr	r3, [r6, #0]
 8018760:	3301      	adds	r3, #1
 8018762:	6033      	str	r3, [r6, #0]
 8018764:	68a3      	ldr	r3, [r4, #8]
 8018766:	3b01      	subs	r3, #1
 8018768:	60a3      	str	r3, [r4, #8]
 801876a:	e7dc      	b.n	8018726 <_scanf_i+0xe2>
 801876c:	f1b8 0f02 	cmp.w	r8, #2
 8018770:	d1ad      	bne.n	80186ce <_scanf_i+0x8a>
 8018772:	6822      	ldr	r2, [r4, #0]
 8018774:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018778:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801877c:	d1bf      	bne.n	80186fe <_scanf_i+0xba>
 801877e:	2110      	movs	r1, #16
 8018780:	6061      	str	r1, [r4, #4]
 8018782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018786:	e7a1      	b.n	80186cc <_scanf_i+0x88>
 8018788:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801878c:	6022      	str	r2, [r4, #0]
 801878e:	780b      	ldrb	r3, [r1, #0]
 8018790:	702b      	strb	r3, [r5, #0]
 8018792:	3501      	adds	r5, #1
 8018794:	e7de      	b.n	8018754 <_scanf_i+0x110>
 8018796:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801879a:	4631      	mov	r1, r6
 801879c:	4658      	mov	r0, fp
 801879e:	4798      	blx	r3
 80187a0:	2800      	cmp	r0, #0
 80187a2:	d0df      	beq.n	8018764 <_scanf_i+0x120>
 80187a4:	6823      	ldr	r3, [r4, #0]
 80187a6:	05d9      	lsls	r1, r3, #23
 80187a8:	d50c      	bpl.n	80187c4 <_scanf_i+0x180>
 80187aa:	454d      	cmp	r5, r9
 80187ac:	d908      	bls.n	80187c0 <_scanf_i+0x17c>
 80187ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80187b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80187b6:	4632      	mov	r2, r6
 80187b8:	4658      	mov	r0, fp
 80187ba:	4798      	blx	r3
 80187bc:	1e6f      	subs	r7, r5, #1
 80187be:	463d      	mov	r5, r7
 80187c0:	454d      	cmp	r5, r9
 80187c2:	d029      	beq.n	8018818 <_scanf_i+0x1d4>
 80187c4:	6822      	ldr	r2, [r4, #0]
 80187c6:	f012 0210 	ands.w	r2, r2, #16
 80187ca:	d113      	bne.n	80187f4 <_scanf_i+0x1b0>
 80187cc:	702a      	strb	r2, [r5, #0]
 80187ce:	6863      	ldr	r3, [r4, #4]
 80187d0:	9e00      	ldr	r6, [sp, #0]
 80187d2:	4649      	mov	r1, r9
 80187d4:	4658      	mov	r0, fp
 80187d6:	47b0      	blx	r6
 80187d8:	f8da 3000 	ldr.w	r3, [sl]
 80187dc:	6821      	ldr	r1, [r4, #0]
 80187de:	1d1a      	adds	r2, r3, #4
 80187e0:	f8ca 2000 	str.w	r2, [sl]
 80187e4:	f011 0f20 	tst.w	r1, #32
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	d010      	beq.n	801880e <_scanf_i+0x1ca>
 80187ec:	6018      	str	r0, [r3, #0]
 80187ee:	68e3      	ldr	r3, [r4, #12]
 80187f0:	3301      	adds	r3, #1
 80187f2:	60e3      	str	r3, [r4, #12]
 80187f4:	eba5 0509 	sub.w	r5, r5, r9
 80187f8:	44a8      	add	r8, r5
 80187fa:	6925      	ldr	r5, [r4, #16]
 80187fc:	4445      	add	r5, r8
 80187fe:	6125      	str	r5, [r4, #16]
 8018800:	2000      	movs	r0, #0
 8018802:	b007      	add	sp, #28
 8018804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018808:	f04f 0800 	mov.w	r8, #0
 801880c:	e7ca      	b.n	80187a4 <_scanf_i+0x160>
 801880e:	07ca      	lsls	r2, r1, #31
 8018810:	bf4c      	ite	mi
 8018812:	8018      	strhmi	r0, [r3, #0]
 8018814:	6018      	strpl	r0, [r3, #0]
 8018816:	e7ea      	b.n	80187ee <_scanf_i+0x1aa>
 8018818:	2001      	movs	r0, #1
 801881a:	e7f2      	b.n	8018802 <_scanf_i+0x1be>
 801881c:	08018f6c 	.word	0x08018f6c
 8018820:	08016251 	.word	0x08016251
 8018824:	080189c9 	.word	0x080189c9
 8018828:	080191ed 	.word	0x080191ed

0801882c <_sbrk_r>:
 801882c:	b538      	push	{r3, r4, r5, lr}
 801882e:	4c06      	ldr	r4, [pc, #24]	; (8018848 <_sbrk_r+0x1c>)
 8018830:	2300      	movs	r3, #0
 8018832:	4605      	mov	r5, r0
 8018834:	4608      	mov	r0, r1
 8018836:	6023      	str	r3, [r4, #0]
 8018838:	f7ee ffe0 	bl	80077fc <_sbrk>
 801883c:	1c43      	adds	r3, r0, #1
 801883e:	d102      	bne.n	8018846 <_sbrk_r+0x1a>
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	b103      	cbz	r3, 8018846 <_sbrk_r+0x1a>
 8018844:	602b      	str	r3, [r5, #0]
 8018846:	bd38      	pop	{r3, r4, r5, pc}
 8018848:	2004cb74 	.word	0x2004cb74

0801884c <__sccl>:
 801884c:	b570      	push	{r4, r5, r6, lr}
 801884e:	780b      	ldrb	r3, [r1, #0]
 8018850:	2b5e      	cmp	r3, #94	; 0x5e
 8018852:	bf13      	iteet	ne
 8018854:	1c4a      	addne	r2, r1, #1
 8018856:	1c8a      	addeq	r2, r1, #2
 8018858:	784b      	ldrbeq	r3, [r1, #1]
 801885a:	2100      	movne	r1, #0
 801885c:	bf08      	it	eq
 801885e:	2101      	moveq	r1, #1
 8018860:	1e44      	subs	r4, r0, #1
 8018862:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018866:	f804 1f01 	strb.w	r1, [r4, #1]!
 801886a:	42ac      	cmp	r4, r5
 801886c:	d1fb      	bne.n	8018866 <__sccl+0x1a>
 801886e:	b913      	cbnz	r3, 8018876 <__sccl+0x2a>
 8018870:	3a01      	subs	r2, #1
 8018872:	4610      	mov	r0, r2
 8018874:	bd70      	pop	{r4, r5, r6, pc}
 8018876:	f081 0401 	eor.w	r4, r1, #1
 801887a:	54c4      	strb	r4, [r0, r3]
 801887c:	1c51      	adds	r1, r2, #1
 801887e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018882:	2d2d      	cmp	r5, #45	; 0x2d
 8018884:	f101 36ff 	add.w	r6, r1, #4294967295
 8018888:	460a      	mov	r2, r1
 801888a:	d006      	beq.n	801889a <__sccl+0x4e>
 801888c:	2d5d      	cmp	r5, #93	; 0x5d
 801888e:	d0f0      	beq.n	8018872 <__sccl+0x26>
 8018890:	b90d      	cbnz	r5, 8018896 <__sccl+0x4a>
 8018892:	4632      	mov	r2, r6
 8018894:	e7ed      	b.n	8018872 <__sccl+0x26>
 8018896:	462b      	mov	r3, r5
 8018898:	e7ef      	b.n	801887a <__sccl+0x2e>
 801889a:	780e      	ldrb	r6, [r1, #0]
 801889c:	2e5d      	cmp	r6, #93	; 0x5d
 801889e:	d0fa      	beq.n	8018896 <__sccl+0x4a>
 80188a0:	42b3      	cmp	r3, r6
 80188a2:	dcf8      	bgt.n	8018896 <__sccl+0x4a>
 80188a4:	3301      	adds	r3, #1
 80188a6:	429e      	cmp	r6, r3
 80188a8:	54c4      	strb	r4, [r0, r3]
 80188aa:	dcfb      	bgt.n	80188a4 <__sccl+0x58>
 80188ac:	3102      	adds	r1, #2
 80188ae:	e7e6      	b.n	801887e <__sccl+0x32>

080188b0 <strncmp>:
 80188b0:	b510      	push	{r4, lr}
 80188b2:	b16a      	cbz	r2, 80188d0 <strncmp+0x20>
 80188b4:	3901      	subs	r1, #1
 80188b6:	1884      	adds	r4, r0, r2
 80188b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80188bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80188c0:	4293      	cmp	r3, r2
 80188c2:	d103      	bne.n	80188cc <strncmp+0x1c>
 80188c4:	42a0      	cmp	r0, r4
 80188c6:	d001      	beq.n	80188cc <strncmp+0x1c>
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d1f5      	bne.n	80188b8 <strncmp+0x8>
 80188cc:	1a98      	subs	r0, r3, r2
 80188ce:	bd10      	pop	{r4, pc}
 80188d0:	4610      	mov	r0, r2
 80188d2:	e7fc      	b.n	80188ce <strncmp+0x1e>

080188d4 <_strtoul_l.isra.0>:
 80188d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188d8:	4680      	mov	r8, r0
 80188da:	4689      	mov	r9, r1
 80188dc:	4692      	mov	sl, r2
 80188de:	461e      	mov	r6, r3
 80188e0:	460f      	mov	r7, r1
 80188e2:	463d      	mov	r5, r7
 80188e4:	9808      	ldr	r0, [sp, #32]
 80188e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188ea:	f7fe fe4f 	bl	801758c <__locale_ctype_ptr_l>
 80188ee:	4420      	add	r0, r4
 80188f0:	7843      	ldrb	r3, [r0, #1]
 80188f2:	f013 0308 	ands.w	r3, r3, #8
 80188f6:	d130      	bne.n	801895a <_strtoul_l.isra.0+0x86>
 80188f8:	2c2d      	cmp	r4, #45	; 0x2d
 80188fa:	d130      	bne.n	801895e <_strtoul_l.isra.0+0x8a>
 80188fc:	787c      	ldrb	r4, [r7, #1]
 80188fe:	1cbd      	adds	r5, r7, #2
 8018900:	2101      	movs	r1, #1
 8018902:	2e00      	cmp	r6, #0
 8018904:	d05c      	beq.n	80189c0 <_strtoul_l.isra.0+0xec>
 8018906:	2e10      	cmp	r6, #16
 8018908:	d109      	bne.n	801891e <_strtoul_l.isra.0+0x4a>
 801890a:	2c30      	cmp	r4, #48	; 0x30
 801890c:	d107      	bne.n	801891e <_strtoul_l.isra.0+0x4a>
 801890e:	782b      	ldrb	r3, [r5, #0]
 8018910:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018914:	2b58      	cmp	r3, #88	; 0x58
 8018916:	d14e      	bne.n	80189b6 <_strtoul_l.isra.0+0xe2>
 8018918:	786c      	ldrb	r4, [r5, #1]
 801891a:	2610      	movs	r6, #16
 801891c:	3502      	adds	r5, #2
 801891e:	f04f 32ff 	mov.w	r2, #4294967295
 8018922:	2300      	movs	r3, #0
 8018924:	fbb2 f2f6 	udiv	r2, r2, r6
 8018928:	fb06 fc02 	mul.w	ip, r6, r2
 801892c:	ea6f 0c0c 	mvn.w	ip, ip
 8018930:	4618      	mov	r0, r3
 8018932:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018936:	2f09      	cmp	r7, #9
 8018938:	d817      	bhi.n	801896a <_strtoul_l.isra.0+0x96>
 801893a:	463c      	mov	r4, r7
 801893c:	42a6      	cmp	r6, r4
 801893e:	dd23      	ble.n	8018988 <_strtoul_l.isra.0+0xb4>
 8018940:	2b00      	cmp	r3, #0
 8018942:	db1e      	blt.n	8018982 <_strtoul_l.isra.0+0xae>
 8018944:	4282      	cmp	r2, r0
 8018946:	d31c      	bcc.n	8018982 <_strtoul_l.isra.0+0xae>
 8018948:	d101      	bne.n	801894e <_strtoul_l.isra.0+0x7a>
 801894a:	45a4      	cmp	ip, r4
 801894c:	db19      	blt.n	8018982 <_strtoul_l.isra.0+0xae>
 801894e:	fb00 4006 	mla	r0, r0, r6, r4
 8018952:	2301      	movs	r3, #1
 8018954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018958:	e7eb      	b.n	8018932 <_strtoul_l.isra.0+0x5e>
 801895a:	462f      	mov	r7, r5
 801895c:	e7c1      	b.n	80188e2 <_strtoul_l.isra.0+0xe>
 801895e:	2c2b      	cmp	r4, #43	; 0x2b
 8018960:	bf04      	itt	eq
 8018962:	1cbd      	addeq	r5, r7, #2
 8018964:	787c      	ldrbeq	r4, [r7, #1]
 8018966:	4619      	mov	r1, r3
 8018968:	e7cb      	b.n	8018902 <_strtoul_l.isra.0+0x2e>
 801896a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801896e:	2f19      	cmp	r7, #25
 8018970:	d801      	bhi.n	8018976 <_strtoul_l.isra.0+0xa2>
 8018972:	3c37      	subs	r4, #55	; 0x37
 8018974:	e7e2      	b.n	801893c <_strtoul_l.isra.0+0x68>
 8018976:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801897a:	2f19      	cmp	r7, #25
 801897c:	d804      	bhi.n	8018988 <_strtoul_l.isra.0+0xb4>
 801897e:	3c57      	subs	r4, #87	; 0x57
 8018980:	e7dc      	b.n	801893c <_strtoul_l.isra.0+0x68>
 8018982:	f04f 33ff 	mov.w	r3, #4294967295
 8018986:	e7e5      	b.n	8018954 <_strtoul_l.isra.0+0x80>
 8018988:	2b00      	cmp	r3, #0
 801898a:	da09      	bge.n	80189a0 <_strtoul_l.isra.0+0xcc>
 801898c:	2322      	movs	r3, #34	; 0x22
 801898e:	f8c8 3000 	str.w	r3, [r8]
 8018992:	f04f 30ff 	mov.w	r0, #4294967295
 8018996:	f1ba 0f00 	cmp.w	sl, #0
 801899a:	d107      	bne.n	80189ac <_strtoul_l.isra.0+0xd8>
 801899c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189a0:	b101      	cbz	r1, 80189a4 <_strtoul_l.isra.0+0xd0>
 80189a2:	4240      	negs	r0, r0
 80189a4:	f1ba 0f00 	cmp.w	sl, #0
 80189a8:	d0f8      	beq.n	801899c <_strtoul_l.isra.0+0xc8>
 80189aa:	b10b      	cbz	r3, 80189b0 <_strtoul_l.isra.0+0xdc>
 80189ac:	f105 39ff 	add.w	r9, r5, #4294967295
 80189b0:	f8ca 9000 	str.w	r9, [sl]
 80189b4:	e7f2      	b.n	801899c <_strtoul_l.isra.0+0xc8>
 80189b6:	2430      	movs	r4, #48	; 0x30
 80189b8:	2e00      	cmp	r6, #0
 80189ba:	d1b0      	bne.n	801891e <_strtoul_l.isra.0+0x4a>
 80189bc:	2608      	movs	r6, #8
 80189be:	e7ae      	b.n	801891e <_strtoul_l.isra.0+0x4a>
 80189c0:	2c30      	cmp	r4, #48	; 0x30
 80189c2:	d0a4      	beq.n	801890e <_strtoul_l.isra.0+0x3a>
 80189c4:	260a      	movs	r6, #10
 80189c6:	e7aa      	b.n	801891e <_strtoul_l.isra.0+0x4a>

080189c8 <_strtoul_r>:
 80189c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189ca:	4c06      	ldr	r4, [pc, #24]	; (80189e4 <_strtoul_r+0x1c>)
 80189cc:	4d06      	ldr	r5, [pc, #24]	; (80189e8 <_strtoul_r+0x20>)
 80189ce:	6824      	ldr	r4, [r4, #0]
 80189d0:	6a24      	ldr	r4, [r4, #32]
 80189d2:	2c00      	cmp	r4, #0
 80189d4:	bf08      	it	eq
 80189d6:	462c      	moveq	r4, r5
 80189d8:	9400      	str	r4, [sp, #0]
 80189da:	f7ff ff7b 	bl	80188d4 <_strtoul_l.isra.0>
 80189de:	b003      	add	sp, #12
 80189e0:	bd30      	pop	{r4, r5, pc}
 80189e2:	bf00      	nop
 80189e4:	2000000c 	.word	0x2000000c
 80189e8:	20000070 	.word	0x20000070

080189ec <__submore>:
 80189ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f0:	460c      	mov	r4, r1
 80189f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80189f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189f8:	4299      	cmp	r1, r3
 80189fa:	d11d      	bne.n	8018a38 <__submore+0x4c>
 80189fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018a00:	f7ff fa66 	bl	8017ed0 <_malloc_r>
 8018a04:	b918      	cbnz	r0, 8018a0e <__submore+0x22>
 8018a06:	f04f 30ff 	mov.w	r0, #4294967295
 8018a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a12:	63a3      	str	r3, [r4, #56]	; 0x38
 8018a14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018a18:	6360      	str	r0, [r4, #52]	; 0x34
 8018a1a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018a1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018a22:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018a26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018a2a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018a2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018a32:	6020      	str	r0, [r4, #0]
 8018a34:	2000      	movs	r0, #0
 8018a36:	e7e8      	b.n	8018a0a <__submore+0x1e>
 8018a38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018a3a:	0077      	lsls	r7, r6, #1
 8018a3c:	463a      	mov	r2, r7
 8018a3e:	f000 f837 	bl	8018ab0 <_realloc_r>
 8018a42:	4605      	mov	r5, r0
 8018a44:	2800      	cmp	r0, #0
 8018a46:	d0de      	beq.n	8018a06 <__submore+0x1a>
 8018a48:	eb00 0806 	add.w	r8, r0, r6
 8018a4c:	4601      	mov	r1, r0
 8018a4e:	4632      	mov	r2, r6
 8018a50:	4640      	mov	r0, r8
 8018a52:	f7fe fdd7 	bl	8017604 <memcpy>
 8018a56:	f8c4 8000 	str.w	r8, [r4]
 8018a5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018a5e:	e7e9      	b.n	8018a34 <__submore+0x48>

08018a60 <__ascii_wctomb>:
 8018a60:	b149      	cbz	r1, 8018a76 <__ascii_wctomb+0x16>
 8018a62:	2aff      	cmp	r2, #255	; 0xff
 8018a64:	bf85      	ittet	hi
 8018a66:	238a      	movhi	r3, #138	; 0x8a
 8018a68:	6003      	strhi	r3, [r0, #0]
 8018a6a:	700a      	strbls	r2, [r1, #0]
 8018a6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018a70:	bf98      	it	ls
 8018a72:	2001      	movls	r0, #1
 8018a74:	4770      	bx	lr
 8018a76:	4608      	mov	r0, r1
 8018a78:	4770      	bx	lr

08018a7a <memmove>:
 8018a7a:	4288      	cmp	r0, r1
 8018a7c:	b510      	push	{r4, lr}
 8018a7e:	eb01 0302 	add.w	r3, r1, r2
 8018a82:	d807      	bhi.n	8018a94 <memmove+0x1a>
 8018a84:	1e42      	subs	r2, r0, #1
 8018a86:	4299      	cmp	r1, r3
 8018a88:	d00a      	beq.n	8018aa0 <memmove+0x26>
 8018a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018a92:	e7f8      	b.n	8018a86 <memmove+0xc>
 8018a94:	4283      	cmp	r3, r0
 8018a96:	d9f5      	bls.n	8018a84 <memmove+0xa>
 8018a98:	1881      	adds	r1, r0, r2
 8018a9a:	1ad2      	subs	r2, r2, r3
 8018a9c:	42d3      	cmn	r3, r2
 8018a9e:	d100      	bne.n	8018aa2 <memmove+0x28>
 8018aa0:	bd10      	pop	{r4, pc}
 8018aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018aa6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018aaa:	e7f7      	b.n	8018a9c <memmove+0x22>

08018aac <__malloc_lock>:
 8018aac:	4770      	bx	lr

08018aae <__malloc_unlock>:
 8018aae:	4770      	bx	lr

08018ab0 <_realloc_r>:
 8018ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ab2:	4607      	mov	r7, r0
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	460e      	mov	r6, r1
 8018ab8:	b921      	cbnz	r1, 8018ac4 <_realloc_r+0x14>
 8018aba:	4611      	mov	r1, r2
 8018abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018ac0:	f7ff ba06 	b.w	8017ed0 <_malloc_r>
 8018ac4:	b922      	cbnz	r2, 8018ad0 <_realloc_r+0x20>
 8018ac6:	f7ff f9b5 	bl	8017e34 <_free_r>
 8018aca:	4625      	mov	r5, r4
 8018acc:	4628      	mov	r0, r5
 8018ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ad0:	f000 f814 	bl	8018afc <_malloc_usable_size_r>
 8018ad4:	42a0      	cmp	r0, r4
 8018ad6:	d20f      	bcs.n	8018af8 <_realloc_r+0x48>
 8018ad8:	4621      	mov	r1, r4
 8018ada:	4638      	mov	r0, r7
 8018adc:	f7ff f9f8 	bl	8017ed0 <_malloc_r>
 8018ae0:	4605      	mov	r5, r0
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	d0f2      	beq.n	8018acc <_realloc_r+0x1c>
 8018ae6:	4631      	mov	r1, r6
 8018ae8:	4622      	mov	r2, r4
 8018aea:	f7fe fd8b 	bl	8017604 <memcpy>
 8018aee:	4631      	mov	r1, r6
 8018af0:	4638      	mov	r0, r7
 8018af2:	f7ff f99f 	bl	8017e34 <_free_r>
 8018af6:	e7e9      	b.n	8018acc <_realloc_r+0x1c>
 8018af8:	4635      	mov	r5, r6
 8018afa:	e7e7      	b.n	8018acc <_realloc_r+0x1c>

08018afc <_malloc_usable_size_r>:
 8018afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b00:	1f18      	subs	r0, r3, #4
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	bfbc      	itt	lt
 8018b06:	580b      	ldrlt	r3, [r1, r0]
 8018b08:	18c0      	addlt	r0, r0, r3
 8018b0a:	4770      	bx	lr

08018b0c <_init>:
 8018b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b0e:	bf00      	nop
 8018b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b12:	bc08      	pop	{r3}
 8018b14:	469e      	mov	lr, r3
 8018b16:	4770      	bx	lr

08018b18 <_fini>:
 8018b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b1a:	bf00      	nop
 8018b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b1e:	bc08      	pop	{r3}
 8018b20:	469e      	mov	lr, r3
 8018b22:	4770      	bx	lr
