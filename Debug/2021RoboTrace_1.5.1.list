
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b28  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08018ce8  08018ce8  00028ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019864  08019864  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019864  08019864  00029864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801986c  0801986c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801986c  0801986c  0002986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019874  08019874  00029874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c90  200001e0  08019a54  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e70  08019a54  00030e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000390f4  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000794d  00000000  00000000  00069300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  00070c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe8  00000000  00000000  00072ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035241  00000000  00000000  00074ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025bc1  00000000  00000000  000aa121  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c33  00000000  00000000  000cfce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4e8  00000000  00000000  001e0990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018cd0 	.word	0x08018cd0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018cd0 	.word	0x08018cd0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fb1e 	bl	800a618 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e968 	.word	0x2003e968

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fb06 	bl	800a618 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e968 	.word	0x2003e968

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 f9a7 	bl	800a374 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 ff0e 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 ff08 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 ff02 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fefc 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fef6 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fef0 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 feea 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 fee4 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fede 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fed8 	bl	8008e48 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fecc 	bl	8008e48 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fec6 	bl	8008e48 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f9a5 	bl	8016478 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f8c6 	bl	800e348 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f8c2 	bl	800e348 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003ebbc 	.word	0x2003ebbc
 80011e0:	2003e8a0 	.word	0x2003e8a0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fc56 	bl	8012dfc <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d7ac 	.word	0x2003d7ac

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f014 f821 	bl	80155e0 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fc9a 	bl	8012ee4 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fc95 	bl	8012ee4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 fa03 	bl	80129d2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018ce8 	.word	0x08018ce8
 80015f8:	2003d71c 	.word	0x2003d71c
 80015fc:	2003d7ac 	.word	0x2003d7ac
 8001600:	2003d79c 	.word	0x2003d79c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fc11 	bl	8012e50 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fe7c 	bl	801332c <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fc0b 	bl	8012e50 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 ffbc 	bl	80155e0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fc38 	bl	8012ee4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 f9a6 	bl	80129d2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fbaa 	bl	8012dfc <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d61c 	.word	0x2003d61c
 80016b8:	2003c4dc 	.word	0x2003c4dc
 80016bc:	08018d04 	.word	0x08018d04
 80016c0:	08018ce8 	.word	0x08018ce8
 80016c4:	2003d71c 	.word	0x2003d71c
 80016c8:	2003d7ac 	.word	0x2003d7ac
 80016cc:	2003d79c 	.word	0x2003d79c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 ffbf 	bl	8015688 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 ffda 	bl	80136e8 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 fb5c 	bl	8012dfc <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018cf4 	.word	0x08018cf4
 8001754:	2003d71c 	.word	0x2003d71c
 8001758:	2003d7ac 	.word	0x2003d7ac

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 ff79 	bl	8015688 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 ff94 	bl	80136e8 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 fb16 	bl	8012dfc <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018d00 	.word	0x08018d00
 80017e0:	2003d71c 	.word	0x2003d71c
 80017e4:	2003d7ac 	.word	0x2003d7ac

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fd78 	bl	80122ec <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018d10 	.word	0x08018d10
 800181c:	2003c5dc 	.word	0x2003c5dc

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 ff57 	bl	80156e0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 ff53 	bl	80156e0 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d61c 	.word	0x2003d61c
 8001848:	2003c4dc 	.word	0x2003c4dc

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fe2d 	bl	80134b0 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fafa 	bl	8012e50 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fd89 	bl	8012378 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 faf2 	bl	8012e50 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d61c 	.word	0x2003d61c
 8001874:	2003c4dc 	.word	0x2003c4dc
 8001878:	2003d7ac 	.word	0x2003d7ac
 800187c:	08018d04 	.word	0x08018d04

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d71c 	.word	0x2003d71c

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fd50 	bl	800a374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fef9 	bl	800d6d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00c f826 	bl	800d93c <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fd3c 	bl	800a374 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e848 	.word	0x2003e848

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fd1f 	bl	800a374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fec8 	bl	800d6d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fec2 	bl	800d6d4 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fd0c 	bl	800a374 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e848 	.word	0x2003e848

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7e4 	.word	0x2003e7e4
 8001a2c:	2003e7e2 	.word	0x2003e7e2
 8001a30:	2003e7dc 	.word	0x2003e7dc

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 f9ca 	bl	8008e48 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08018d14 	.word	0x08018d14
 8001ac0:	08018d20 	.word	0x08018d20
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7e4 	.word	0x2003e7e4
 8001b6c:	2003e7e2 	.word	0x2003e7e2
 8001b70:	2003e7dc 	.word	0x2003e7dc
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f914 	bl	8008e48 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f8be 	bl	8008e48 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08018d24 	.word	0x08018d24
 8001d34:	08018d30 	.word	0x08018d30

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fc5f 	bl	800a618 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fd53 	bl	800a814 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9fc 	.word	0x2003e9fc

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fc27 	bl	800a618 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9fc 	.word	0x2003e9fc

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 fa7d 	bl	800a344 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 fa6d 	bl	800a344 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 fa5c 	bl	800a344 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 fa4c 	bl	800a344 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 fa3c 	bl	800a344 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 fa2d 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 fa27 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 fa21 	bl	800a374 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 fa17 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 fa11 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 fa0b 	bl	800a374 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 fa01 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 f9fb 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 f9f5 	bl	800a374 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 f9eb 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 f9e5 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 f9df 	bl	800a374 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 f9d5 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 f9cf 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 f9c9 	bl	800a374 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 f9bf 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 f9b9 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 f9b3 	bl	800a374 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 f9a9 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 f9a3 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f99d 	bl	800a374 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f993 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f98d 	bl	800a374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f987 	bl	800a374 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f96e 	bl	800a374 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f963 	bl	800a374 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f959 	bl	800a374 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f94e 	bl	800a374 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fea6 	bl	8008f14 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e920 	.word	0x2003e920

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fd03 	bl	8008e48 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fc76 	bl	8004e7c <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018d3c 	.word	0x08018d3c
 800266c:	08018d48 	.word	0x08018d48
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002810:	334e      	adds	r3, #78	; 0x4e
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800281c:	3350      	adds	r3, #80	; 0x50
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3352      	adds	r3, #82	; 0x52
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800285c:	335c      	adds	r3, #92	; 0x5c
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]

{
	motor_ = motor;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002884:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f241 726f 	movw	r2, #5999	; 0x176f
 800289c:	4293      	cmp	r3, r2
 800289e:	d80e      	bhi.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17e>
		velocity_table_[i] = 0;
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028a8:	3314      	adds	r3, #20
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	e7eb      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	82bb      	strh	r3, [r7, #20]
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	2b63      	cmp	r3, #99	; 0x63
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
		crossline_distance_[i] = 0;
 80028c8:	8abb      	ldrh	r3, [r7, #20]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	e7ed      	b.n	80028c2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x182>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	827b      	strh	r3, [r7, #18]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d20e      	bcs.n	8002910 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
		sideline_distance_[i] = 0;
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	e7ec      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1aa>
	}
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002974:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029d4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdcd 	bl	8000578 <__aeabi_f2d>
 80029de:	a318      	add	r3, pc, #96	; (adr r3, 8002a40 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4625      	mov	r5, r4
 80029ee:	461c      	mov	r4, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdbf 	bl	8000578 <__aeabi_f2d>
 80029fa:	a313      	add	r3, pc, #76	; (adr r3, 8002a48 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4618      	mov	r0, r3
 8002a16:	4621      	mov	r1, r4
 8002a18:	f7fe f8fe 	bl	8000c18 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a24:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	ee07 3a90 	vmov	s15, r3

}
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3fb47ae1 	.word	0x3fb47ae1
 8002a48:	d70a3d71 	.word	0xd70a3d71
 8002a4c:	3fed70a3 	.word	0x3fed70a3
 8002a50:	2000025c 	.word	0x2000025c
 8002a54:	20000280 	.word	0x20000280
 8002a58:	20000260 	.word	0x20000260
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff59 	bl	8002920 <_ZN9LineTrace9calcErrorEv>
 8002a6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	a32a      	add	r3, pc, #168	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_ddiv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe f8a2 	bl	8000c18 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd3e 	bl	8000578 <__aeabi_f2d>
 8002afc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd91 	bl	8000628 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fe f87d 	bl	8000c18 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4610      	mov	r0, r2
 8002b52:	f002 fd75 	bl	8005640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6013      	str	r3, [r2, #0]

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000288 	.word	0x20000288
 8002b74:	20000284 	.word	0x20000284

08002b78 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc8f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f836 	bl	8004c00 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fd61 	bl	8004660 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fdc6 	bl	800474c <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d50f      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d506      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d94d      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ca2:	3352      	adds	r3, #82	; 0x52
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cae:	3318      	adds	r3, #24
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f9b3 	bl	8004024 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cbe:	e032      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 fa1f 	bl	8004104 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e028      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd0f      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd06      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d908      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000268 	.word	0x20000268
 8002d38:	2000026c 	.word	0x2000026c
 8002d3c:	2000028f 	.word	0x2000028f
 8002d40:	44160000 	.word	0x44160000
 8002d44:	2000028c 	.word	0x2000028c
 8002d48:	2000028e 	.word	0x2000028e
 8002d4c:	43fa0000 	.word	0x43fa0000

08002d50 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d62:	3318      	adds	r3, #24
 8002d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d133      	bne.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x84>
		if(radius < 200) velocity = 1.3;
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002ed0 <_ZN9LineTrace15radius2VelocityEf+0x180>
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d501      	bpl.n	8002d82 <_ZN9LineTrace15radius2VelocityEf+0x32>
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002d80:	60fb      	str	r3, [r7, #12]
		if(radius < 500) velocity = 1.6;
 8002d82:	edd7 7a00 	vldr	s15, [r7]
 8002d86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	d502      	bpl.n	8002d9a <_ZN9LineTrace15radius2VelocityEf+0x4a>
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <_ZN9LineTrace15radius2VelocityEf+0x18c>)
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e08f      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 1.8;
 8002d9a:	edd7 7a00 	vldr	s15, [r7]
 8002d9e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d502      	bpl.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0x62>
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e083      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.0;
 8002db2:	edd7 7a00 	vldr	s15, [r7]
 8002db6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d503      	bpl.n	8002dcc <_ZN9LineTrace15radius2VelocityEf+0x7c>
 8002dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e076      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity_;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e072      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dda:	3318      	adds	r3, #24
 8002ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d168      	bne.n	8002eb6 <_ZN9LineTrace15radius2VelocityEf+0x166>
		if(radius < 100) velocity = min_velocity2_;
 8002de4:	edd7 7a00 	vldr	s15, [r7]
 8002de8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002eec <_ZN9LineTrace15radius2VelocityEf+0x19c>
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d504      	bpl.n	8002e00 <_ZN9LineTrace15radius2VelocityEf+0xb0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e05c      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 150) velocity = 1.4;
 8002e00:	edd7 7a00 	vldr	s15, [r7]
 8002e04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002ef0 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8002e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	d502      	bpl.n	8002e18 <_ZN9LineTrace15radius2VelocityEf+0xc8>
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <_ZN9LineTrace15radius2VelocityEf+0x1a4>)
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e050      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 300) velocity = 1.5;
 8002e18:	edd7 7a00 	vldr	s15, [r7]
 8002e1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x1a8>
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d503      	bpl.n	8002e32 <_ZN9LineTrace15radius2VelocityEf+0xe2>
 8002e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e043      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 500) velocity = 1.7;
 8002e32:	edd7 7a00 	vldr	s15, [r7]
 8002e36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d502      	bpl.n	8002e4a <_ZN9LineTrace15radius2VelocityEf+0xfa>
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <_ZN9LineTrace15radius2VelocityEf+0x1ac>)
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e037      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 800) velocity = 1.8;
 8002e4a:	edd7 7a00 	vldr	s15, [r7]
 8002e4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f00 <_ZN9LineTrace15radius2VelocityEf+0x1b0>
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d502      	bpl.n	8002e62 <_ZN9LineTrace15radius2VelocityEf+0x112>
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e02b      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1000) velocity = 2.0;
 8002e62:	edd7 7a00 	vldr	s15, [r7]
 8002e66:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f04 <_ZN9LineTrace15radius2VelocityEf+0x1b4>
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d503      	bpl.n	8002e7c <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8002e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01e      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 2.2;
 8002e7c:	edd7 7a00 	vldr	s15, [r7]
 8002e80:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d502      	bpl.n	8002e94 <_ZN9LineTrace15radius2VelocityEf+0x144>
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <_ZN9LineTrace15radius2VelocityEf+0x1b8>)
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e012      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.4;
 8002e94:	edd7 7a00 	vldr	s15, [r7]
 8002e98:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d502      	bpl.n	8002eac <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <_ZN9LineTrace15radius2VelocityEf+0x1bc>)
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e006      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity2_;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e001      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}
	else velocity = 1.3;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002eb8:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	ee07 3a90 	vmov	s15, r3
}
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	43480000 	.word	0x43480000
 8002ed4:	3fa66666 	.word	0x3fa66666
 8002ed8:	43fa0000 	.word	0x43fa0000
 8002edc:	3fcccccd 	.word	0x3fcccccd
 8002ee0:	44bb8000 	.word	0x44bb8000
 8002ee4:	3fe66666 	.word	0x3fe66666
 8002ee8:	44fa0000 	.word	0x44fa0000
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	43160000 	.word	0x43160000
 8002ef4:	3fb33333 	.word	0x3fb33333
 8002ef8:	43960000 	.word	0x43960000
 8002efc:	3fd9999a 	.word	0x3fd9999a
 8002f00:	44480000 	.word	0x44480000
 8002f04:	447a0000 	.word	0x447a0000
 8002f08:	400ccccd 	.word	0x400ccccd
 8002f0c:	4019999a 	.word	0x4019999a

08002f10 <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	; 0x2c
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fafa 	bl	8004516 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f22:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fb00 	bl	800452e <_ZN6Logger20getThetaArrayPointerEv>
 8002f2e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f30:	2300      	movs	r3, #0
 8002f32:	837b      	strh	r3, [r7, #26]
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d84b      	bhi.n	8002fd6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	d101      	bne.n	8002f68 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002f66:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f74:	eeb0 0a66 	vmov.f32	s0, s13
 8002f78:	f7ff fbd2 	bl	8002720 <_ZSt3absf>
 8002f7c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f84:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800302c <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	db01      	blt.n	8002f96 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002f94:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f96:	8b7c      	ldrh	r4, [r7, #26]
 8002f98:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fed7 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8002fa2:	eef0 7a40 	vmov.f32	s15, s0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fac:	3314      	adds	r3, #20
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fce:	8b7b      	ldrh	r3, [r7, #26]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	837b      	strh	r3, [r7, #26]
 8002fd4:	e7ae      	b.n	8002f34 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fdc:	3358      	adds	r3, #88	; 0x58
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	6939      	ldr	r1, [r7, #16]
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f919 	bl	8003220 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ff4:	3354      	adds	r3, #84	; 0x54
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	6939      	ldr	r1, [r7, #16]
 8002ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f9b5 	bl	8003370 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800300c:	3354      	adds	r3, #84	; 0x54
 800300e:	2200      	movs	r2, #0
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	f241 7270 	movw	r2, #6000	; 0x1770
 8003016:	4907      	ldr	r1, [pc, #28]	; (8003034 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 800301a:	f7fe faf3 	bl	8001604 <sd_write_array_float>

}
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	3727c5ac 	.word	0x3727c5ac
 800302c:	459c4000 	.word	0x459c4000
 8003030:	459c4000 	.word	0x459c4000
 8003034:	08018d8c 	.word	0x08018d8c
 8003038:	08018d9c 	.word	0x08018d9c
 800303c:	00000000 	.word	0x00000000

08003040 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b08c      	sub	sp, #48	; 0x30
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69d8      	ldr	r0, [r3, #28]
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1b8>)
 800304e:	4a6b      	ldr	r2, [pc, #428]	; (80031fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8003050:	496b      	ldr	r1, [pc, #428]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003052:	f001 fae8 	bl	8004626 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800305c:	331c      	adds	r3, #28
 800305e:	2264      	movs	r2, #100	; 0x64
 8003060:	4968      	ldr	r1, [pc, #416]	; (8003204 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003062:	4867      	ldr	r0, [pc, #412]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003064:	f7fe fb34 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800306e:	33ac      	adds	r3, #172	; 0xac
 8003070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003074:	4964      	ldr	r1, [pc, #400]	; (8003208 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8003076:	4862      	ldr	r0, [pc, #392]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003078:	f7fe fb2a 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4618      	mov	r0, r3
 8003082:	f001 fa48 	bl	8004516 <_ZN6Logger23getDistanceArrayPointerEv>
 8003086:	61f8      	str	r0, [r7, #28]
	p_theta= logger_->getThetaArrayPointer();
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fa4e 	bl	800452e <_ZN6Logger20getThetaArrayPointerEv>
 8003092:	61b8      	str	r0, [r7, #24]

	float temp_distance, temp_theta;
	float pre_radius = 0;;
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800309a:	2300      	movs	r3, #0
 800309c:	847b      	strh	r3, [r7, #34]	; 0x22
 800309e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030a0:	f241 726f 	movw	r2, #5999	; 0x176f
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d86c      	bhi.n	8003182 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x142>

		temp_distance = p_distance[i];
 80030a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]
		temp_theta = p_theta[i];
 80030b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 80030c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d101      	bne.n	80030d2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x92>
 80030ce:	4b4f      	ldr	r3, [pc, #316]	; (800320c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
		float radius_origin = abs(temp_distance / temp_theta);
 80030d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030de:	eeb0 0a66 	vmov.f32	s0, s13
 80030e2:	f7ff fb1d 	bl	8002720 <_ZSt3absf>
 80030e6:	eef0 7a40 	vmov.f32	s15, s0
 80030ea:	edc7 7a02 	vstr	s15, [r7, #8]
		if(radius_origin >= 5000) radius_origin = 5000;
 80030ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003210 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>
 80030f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fe:	db01      	blt.n	8003104 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xc4>
 8003100:	4b44      	ldr	r3, [pc, #272]	; (8003214 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>)
 8003102:	60bb      	str	r3, [r7, #8]

		float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa36 	bl	8000578 <__aeabi_f2d>
 800310c:	a336      	add	r3, pc, #216	; (adr r3, 80031e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1a8>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa89 	bl	8000628 <__aeabi_dmul>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	4625      	mov	r5, r4
 800311c:	461c      	mov	r4, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fa29 	bl	8000578 <__aeabi_f2d>
 8003126:	a332      	add	r3, pc, #200	; (adr r3, 80031f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1b0>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd fa7c 	bl	8000628 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd f8c0 	bl	80002bc <__adddf3>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	4618      	mov	r0, r3
 8003142:	4621      	mov	r1, r4
 8003144:	f7fd fd68 	bl	8000c18 <__aeabi_d2f>
 8003148:	4603      	mov	r3, r0
 800314a:	613b      	str	r3, [r7, #16]
		velocity_table_[i] = radius_lpf;
 800314c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003154:	3314      	adds	r3, #20
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	601a      	str	r2, [r3, #0]
		//velocity_table_[i] = radius2Velocity(radius);
		pre_radius = radius_origin;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60fb      	str	r3, [r7, #12]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	3324      	adds	r3, #36	; 0x24
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800317a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800317c:	3301      	adds	r3, #1
 800317e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003180:	e78d      	b.n	800309e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x5e>
	}
	for(uint16_t i = 1; i < LOG_DATA_SIZE_DIS; i++){
 8003182:	2301      	movs	r3, #1
 8003184:	843b      	strh	r3, [r7, #32]
 8003186:	8c3b      	ldrh	r3, [r7, #32]
 8003188:	f241 726f 	movw	r2, #5999	; 0x176f
 800318c:	4293      	cmp	r3, r2
 800318e:	d803      	bhi.n	8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x158>
 8003190:	8c3b      	ldrh	r3, [r7, #32]
 8003192:	3301      	adds	r3, #1
 8003194:	843b      	strh	r3, [r7, #32]
 8003196:	e7f6      	b.n	8003186 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x146>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800319e:	3358      	adds	r3, #88	; 0x58
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	eeb0 0a67 	vmov.f32	s0, s15
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f838 	bl	8003220 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031b6:	3354      	adds	r3, #84	; 0x54
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	69f9      	ldr	r1, [r7, #28]
 80031be:	eeb0 0a67 	vmov.f32	s0, s15
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8d4 	bl	8003370 <_ZN9LineTrace20accelerateProcessingEfPKf>


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	2200      	movs	r2, #0
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	f241 7270 	movw	r2, #6000	; 0x1770
 80031d8:	490f      	ldr	r1, [pc, #60]	; (8003218 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80031dc:	f7fe fa12 	bl	8001604 <sd_write_array_float>

}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bdb0      	pop	{r4, r5, r7, pc}
 80031e8:	9999999a 	.word	0x9999999a
 80031ec:	3fa99999 	.word	0x3fa99999
 80031f0:	66666666 	.word	0x66666666
 80031f4:	3fee6666 	.word	0x3fee6666
 80031f8:	08018da8 	.word	0x08018da8
 80031fc:	08018db4 	.word	0x08018db4
 8003200:	08018d9c 	.word	0x08018d9c
 8003204:	08018dc4 	.word	0x08018dc4
 8003208:	08018dd4 	.word	0x08018dd4
 800320c:	3727c5ac 	.word	0x3727c5ac
 8003210:	459c4000 	.word	0x459c4000
 8003214:	459c4000 	.word	0x459c4000
 8003218:	08018d8c 	.word	0x08018d8c
 800321c:	00000000 	.word	0x00000000

08003220 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	ed87 0a02 	vstr	s0, [r7, #8]
 800322c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800322e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003232:	83fb      	strh	r3, [r7, #30]
 8003234:	8bfb      	ldrh	r3, [r7, #30]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8091 	beq.w	800335e <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800323c:	8bfb      	ldrh	r3, [r7, #30]
 800323e:	3b01      	subs	r3, #1
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003246:	3314      	adds	r3, #20
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	8bfb      	ldrh	r3, [r7, #30]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800325a:	3314      	adds	r3, #20
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800326e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	dd6c      	ble.n	8003356 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800327c:	8bfb      	ldrh	r3, [r7, #30]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f976 	bl	8000578 <__aeabi_f2d>
 800328c:	a336      	add	r3, pc, #216	; (adr r3, 8003368 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd f9c9 	bl	8000628 <__aeabi_dmul>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	4625      	mov	r5, r4
 800329c:	461c      	mov	r4, r3
 800329e:	69b8      	ldr	r0, [r7, #24]
 80032a0:	f7fd f96a 	bl	8000578 <__aeabi_f2d>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4620      	mov	r0, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	f7fd fae6 	bl	800087c <__aeabi_ddiv>
 80032b0:	4603      	mov	r3, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	4618      	mov	r0, r3
 80032b6:	4621      	mov	r1, r4
 80032b8:	f7fd fcae 	bl	8000c18 <__aeabi_d2f>
 80032bc:	4603      	mov	r3, r0
 80032be:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80032c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80032c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80032d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80032d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	dd39      	ble.n	8003356 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032e2:	8bfb      	ldrh	r3, [r7, #30]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032ea:	3314      	adds	r3, #20
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f93f 	bl	8000578 <__aeabi_f2d>
 80032fa:	4604      	mov	r4, r0
 80032fc:	460d      	mov	r5, r1
 80032fe:	8bfb      	ldrh	r3, [r7, #30]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	ed93 7a00 	vldr	s14, [r3]
 800330a:	edd7 7a02 	vldr	s15, [r7, #8]
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	ee17 0a90 	vmov	r0, s15
 8003316:	f7fd f92f 	bl	8000578 <__aeabi_f2d>
 800331a:	a313      	add	r3, pc, #76	; (adr r3, 8003368 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f982 	bl	8000628 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fc ffc6 	bl	80002bc <__adddf3>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	4619      	mov	r1, r3
 8003336:	4622      	mov	r2, r4
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	1e5c      	subs	r4, r3, #1
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	f7fd fc6a 	bl	8000c18 <__aeabi_d2f>
 8003344:	4601      	mov	r1, r0
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800334c:	3314      	adds	r3, #20
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003356:	8bfb      	ldrh	r3, [r7, #30]
 8003358:	3b01      	subs	r3, #1
 800335a:	83fb      	strh	r3, [r7, #30]
 800335c:	e76a      	b.n	8003234 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	d2f1a9fc 	.word	0xd2f1a9fc
 800336c:	3f50624d 	.word	0x3f50624d

08003370 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	ed87 0a02 	vstr	s0, [r7, #8]
 800337c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800337e:	2300      	movs	r3, #0
 8003380:	83fb      	strh	r3, [r7, #30]
 8003382:	8bfb      	ldrh	r3, [r7, #30]
 8003384:	f241 726f 	movw	r2, #5999	; 0x176f
 8003388:	4293      	cmp	r3, r2
 800338a:	f200 8091 	bhi.w	80034b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800338e:	8bfb      	ldrh	r3, [r7, #30]
 8003390:	3301      	adds	r3, #1
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003398:	3314      	adds	r3, #20
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	ed93 7a00 	vldr	s14, [r3]
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033ac:	3314      	adds	r3, #20
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80033c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033cc:	dd6c      	ble.n	80034a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 80033ce:	8bfb      	ldrh	r3, [r7, #30]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f8cd 	bl	8000578 <__aeabi_f2d>
 80033de:	a336      	add	r3, pc, #216	; (adr r3, 80034b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f920 	bl	8000628 <__aeabi_dmul>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	4625      	mov	r5, r4
 80033ee:	461c      	mov	r4, r3
 80033f0:	69b8      	ldr	r0, [r7, #24]
 80033f2:	f7fd f8c1 	bl	8000578 <__aeabi_f2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fd fa3d 	bl	800087c <__aeabi_ddiv>
 8003402:	4603      	mov	r3, r0
 8003404:	460c      	mov	r4, r1
 8003406:	4618      	mov	r0, r3
 8003408:	4621      	mov	r1, r4
 800340a:	f7fd fc05 	bl	8000c18 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003412:	edd7 6a06 	vldr	s13, [r7, #24]
 8003416:	ed97 7a05 	vldr	s14, [r7, #20]
 800341a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341e:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003422:	ed97 7a04 	vldr	s14, [r7, #16]
 8003426:	edd7 7a02 	vldr	s15, [r7, #8]
 800342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd39      	ble.n	80034a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800343c:	3314      	adds	r3, #20
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f896 	bl	8000578 <__aeabi_f2d>
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	8bfb      	ldrh	r3, [r7, #30]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	ed93 7a00 	vldr	s14, [r3]
 800345c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003464:	ee17 0a90 	vmov	r0, s15
 8003468:	f7fd f886 	bl	8000578 <__aeabi_f2d>
 800346c:	a312      	add	r3, pc, #72	; (adr r3, 80034b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f8d9 	bl	8000628 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fc ff1d 	bl	80002bc <__adddf3>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	4619      	mov	r1, r3
 8003488:	4622      	mov	r2, r4
 800348a:	8bfb      	ldrh	r3, [r7, #30]
 800348c:	1c5c      	adds	r4, r3, #1
 800348e:	4608      	mov	r0, r1
 8003490:	4611      	mov	r1, r2
 8003492:	f7fd fbc1 	bl	8000c18 <__aeabi_d2f>
 8003496:	4601      	mov	r1, r0
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800349e:	3314      	adds	r3, #20
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	3301      	adds	r3, #1
 80034ac:	83fb      	strh	r3, [r7, #30]
 80034ae:	e768      	b.n	8003382 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdb0      	pop	{r4, r5, r7, pc}
 80034b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034bc:	3f50624d 	.word	0x3f50624d

080034c0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ce:	3314      	adds	r3, #20
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8087 	beq.w	80035e6 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd ffc5 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80034e2:	eeb0 7a40 	vmov.f32	s14, s0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034ec:	3350      	adds	r3, #80	; 0x50
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	bfac      	ite	ge
 80034fc:	2301      	movge	r3, #1
 80034fe:	2300      	movlt	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d025      	beq.n	8003552 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800350c:	3350      	adds	r3, #80	; 0x50
 800350e:	ed93 7a00 	vldr	s14, [r3]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003518:	3316      	adds	r3, #22
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	3324      	adds	r3, #36	; 0x24
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003532:	3350      	adds	r3, #80	; 0x50
 8003534:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800353e:	3316      	adds	r3, #22
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800354c:	3316      	adds	r3, #22
 800354e:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003550:	e7c2      	b.n	80034d8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003558:	3316      	adds	r3, #22
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003560:	4293      	cmp	r3, r2
 8003562:	d906      	bls.n	8003572 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800356a:	3316      	adds	r3, #22
 800356c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003570:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800357e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd ff71 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800358a:	eef0 7a40 	vmov.f32	s15, s0
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003590:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800359a:	3316      	adds	r3, #22
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80035a0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a8:	3316      	adds	r3, #22
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80035b2:	3314      	adds	r3, #20
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f985 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ce:	3316      	adds	r3, #22
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80035d8:	3314      	adds	r3, #20
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a06      	ldr	r2, [pc, #24]	; (80035fc <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 80035e4:	6013      	str	r3, [r2, #0]

	}
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000270 	.word	0x20000270
 80035f4:	20000274 	.word	0x20000274
 80035f8:	20000278 	.word	0x20000278
 80035fc:	2000027c 	.word	0x2000027c

08003600 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd ff1c 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003616:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fadd 	bl	8004bde <_ZN8Odometry8getThetaEv>
 8003624:	ec54 3b10 	vmov	r3, r4, d0
 8003628:	4618      	mov	r0, r3
 800362a:	4621      	mov	r1, r4
 800362c:	f7fd faf4 	bl	8000c18 <__aeabi_d2f>
 8003630:	4603      	mov	r3, r0
 8003632:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003634:	edd7 7a04 	vldr	s15, [r7, #16]
 8003638:	eef5 7a40 	vcmp.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d101      	bne.n	8003646 <_ZN9LineTrace8isStableEv+0x46>
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <_ZN9LineTrace8isStableEv+0xd0>)
 8003644:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003646:	ed97 7a02 	vldr	s14, [r7, #8]
 800364a:	edd7 7a04 	vldr	s15, [r7, #16]
 800364e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003652:	eeb0 0a66 	vmov.f32	s0, s13
 8003656:	f7ff f863 	bl	8002720 <_ZSt3absf>
 800365a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800365e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003662:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036d4 <_ZN9LineTrace8isStableEv+0xd4>
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	db01      	blt.n	8003674 <_ZN9LineTrace8isStableEv+0x74>
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <_ZN9LineTrace8isStableEv+0xd8>)
 8003672:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800367a:	3352      	adds	r3, #82	; 0x52
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 8003684:	2200      	movs	r2, #0
 8003686:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800368e:	3352      	adds	r3, #82	; 0x52
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003694:	edd7 7a03 	vldr	s15, [r7, #12]
 8003698:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80036e0 <_ZN9LineTrace8isStableEv+0xe0>
 800369c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	db06      	blt.n	80036b4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	e002      	b.n	80036ba <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	2b16      	cmp	r3, #22
 80036c0:	d901      	bls.n	80036c6 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	3727c5ac 	.word	0x3727c5ac
 80036d4:	459c4000 	.word	0x459c4000
 80036d8:	459c4000 	.word	0x459c4000
 80036dc:	20000290 	.word	0x20000290
 80036e0:	44fa0000 	.word	0x44fa0000

080036e4 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80036ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f0:	2201      	movs	r2, #1
 80036f2:	4942      	ldr	r1, [pc, #264]	; (80037fc <_ZN9LineTrace4initEv+0x118>)
 80036f4:	4842      	ldr	r0, [pc, #264]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80036f6:	f7fd ffeb 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80036fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036fe:	2201      	movs	r2, #1
 8003700:	4940      	ldr	r1, [pc, #256]	; (8003804 <_ZN9LineTrace4initEv+0x120>)
 8003702:	483f      	ldr	r0, [pc, #252]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003704:	f7fd ffe4 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	2201      	movs	r2, #1
 800370e:	493e      	ldr	r1, [pc, #248]	; (8003808 <_ZN9LineTrace4initEv+0x124>)
 8003710:	483b      	ldr	r0, [pc, #236]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003712:	f7fd ffdd 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003716:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800371a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800371e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003722:	eeb0 1a66 	vmov.f32	s2, s13
 8003726:	eef0 0a47 	vmov.f32	s1, s14
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f87a 	bl	8003828 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	2201      	movs	r2, #1
 800373a:	4934      	ldr	r1, [pc, #208]	; (800380c <_ZN9LineTrace4initEv+0x128>)
 800373c:	4830      	ldr	r0, [pc, #192]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800373e:	f7fd ffc7 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	2201      	movs	r2, #1
 8003748:	4931      	ldr	r1, [pc, #196]	; (8003810 <_ZN9LineTrace4initEv+0x12c>)
 800374a:	482d      	ldr	r0, [pc, #180]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800374c:	f7fd ffc0 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003750:	f107 0318 	add.w	r3, r7, #24
 8003754:	2201      	movs	r2, #1
 8003756:	492f      	ldr	r1, [pc, #188]	; (8003814 <_ZN9LineTrace4initEv+0x130>)
 8003758:	4829      	ldr	r0, [pc, #164]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800375a:	f7fd ffb9 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	2201      	movs	r2, #1
 8003764:	492c      	ldr	r1, [pc, #176]	; (8003818 <_ZN9LineTrace4initEv+0x134>)
 8003766:	4826      	ldr	r0, [pc, #152]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003768:	f7fd ffb2 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	2201      	movs	r2, #1
 8003772:	492a      	ldr	r1, [pc, #168]	; (800381c <_ZN9LineTrace4initEv+0x138>)
 8003774:	4822      	ldr	r0, [pc, #136]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003776:	f7fd ffab 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800377a:	edd7 7a08 	vldr	s15, [r7, #32]
 800377e:	eeb0 0a67 	vmov.f32	s0, s15
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8a5 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003788:	edd7 7a07 	vldr	s15, [r7, #28]
 800378c:	eeb0 0a67 	vmov.f32	s0, s15
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8ad 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003796:	edd7 7a06 	vldr	s15, [r7, #24]
 800379a:	eeb0 0a67 	vmov.f32	s0, s15
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8b5 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80037a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8be 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80037b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c7 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	2201      	movs	r2, #1
 80037c6:	4916      	ldr	r1, [pc, #88]	; (8003820 <_ZN9LineTrace4initEv+0x13c>)
 80037c8:	480d      	ldr	r0, [pc, #52]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80037ca:	f7fd ff81 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2201      	movs	r2, #1
 80037d4:	4913      	ldr	r1, [pc, #76]	; (8003824 <_ZN9LineTrace4initEv+0x140>)
 80037d6:	480a      	ldr	r0, [pc, #40]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80037d8:	f7fd ff7a 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80037dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80037e4:	eef0 0a47 	vmov.f32	s1, s14
 80037e8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f90c 	bl	8003a0a <_ZN9LineTrace12setMaxAccDecEff>
}
 80037f2:	bf00      	nop
 80037f4:	3730      	adds	r7, #48	; 0x30
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08018de0 	.word	0x08018de0
 8003800:	08018de8 	.word	0x08018de8
 8003804:	08018df0 	.word	0x08018df0
 8003808:	08018df8 	.word	0x08018df8
 800380c:	08018e00 	.word	0x08018e00
 8003810:	08018e0c 	.word	0x08018e0c
 8003814:	08018e18 	.word	0x08018e18
 8003818:	08018e24 	.word	0x08018e24
 800381c:	08018e30 	.word	0x08018e30
 8003820:	08018e3c 	.word	0x08018e3c
 8003824:	08018e44 	.word	0x08018e44

08003828 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	ed87 0a02 	vstr	s0, [r7, #8]
 8003834:	edc7 0a01 	vstr	s1, [r7, #4]
 8003838:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
	return kp_;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	ee07 3a90 	vmov	s15, r3
}
 800386a:	eeb0 0a67 	vmov.f32	s0, s15
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	ee07 3a90 	vmov	s15, r3
}
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
	return kd_;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	ee07 3a90 	vmov	s15, r3
}
 80038a6:	eeb0 0a67 	vmov.f32	s0, s15
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	ee07 3a90 	vmov	s15, r3
}
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003998:	ee07 3a90 	vmov	s15, r3
}
 800399c:	eeb0 0a67 	vmov.f32	s0, s15
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b8:	ee07 3a90 	vmov	s15, r3
}
 80039bc:	eeb0 0a67 	vmov.f32	s0, s15
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	ee07 3a90 	vmov	s15, r3
}
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	ee07 3a90 	vmov	s15, r3
}
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a16:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a20:	3354      	adds	r3, #84	; 0x54
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a2c:	3358      	adds	r3, #88	; 0x58
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a4c:	3354      	adds	r3, #84	; 0x54
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	ee07 3a90 	vmov	s15, r3
}
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a70:	3358      	adds	r3, #88	; 0x58
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	ee07 3a90 	vmov	s15, r3
}
 8003a78:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80fc 	beq.w	8003c94 <_ZN9LineTrace4flipEv+0x20c>
		// ---- line following processing -----//
		pidTrace();
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fe ffdf 	bl	8002a60 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003aa2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa9a 	bl	8003fe0 <_ZN9LineTrace16isTargetDistanceEf>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d028      	beq.n	8003b04 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9f8 	bl	8003ea8 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fda1 	bl	8003600 <_ZN9LineTrace8isStableEv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <_ZN9LineTrace4flipEv+0x56>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fb27 	bl	800511c <_ZN10SideSensor9getStatusEv>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d101      	bne.n	8003ade <_ZN9LineTrace4flipEv+0x56>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <_ZN9LineTrace4flipEv+0x58>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003aea:	3351      	adds	r3, #81	; 0x51
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd fcd7 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f87e 	bl	8004c00 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fcdb 	bl	80034c0 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff f860 	bl	8002bd0 <_ZN9LineTrace11isCrossLineEv>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fb26 	bl	800516c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fcea 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fb36 	bl	80051a0 <_ZN10SideSensor13getIgnoreFlagEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00f      	beq.n	8003b5a <_ZN9LineTrace4flipEv+0xd2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd fcce 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003b44:	eeb0 7a40 	vmov.f32	s14, s0
 8003b48:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003c9c <_ZN9LineTrace4flipEv+0x214>
 8003b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	db01      	blt.n	8003b5a <_ZN9LineTrace4flipEv+0xd2>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <_ZN9LineTrace4flipEv+0xd4>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fb0e 	bl	8005186 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b70:	3351      	adds	r3, #81	; 0x51
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <_ZN9LineTrace4flipEv+0x108>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 facd 	bl	800511c <_ZN10SideSensor9getStatusEv>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d101      	bne.n	8003b90 <_ZN9LineTrace4flipEv+0x108>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <_ZN9LineTrace4flipEv+0x10a>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d020      	beq.n	8003bd8 <_ZN9LineTrace4flipEv+0x150>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa73 	bl	8004092 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003bac:	e008      	b.n	8003bc0 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fade 	bl	8004170 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bba:	335c      	adds	r3, #92	; 0x5c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bc6:	3351      	adds	r3, #81	; 0x51
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bd2:	3352      	adds	r3, #82	; 0x52
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bde:	3351      	adds	r3, #81	; 0x51
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <_ZN9LineTrace4flipEv+0x170>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	330c      	adds	r3, #12
 8003bea:	2201      	movs	r2, #1
 8003bec:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fa3f 	bl	8002074 <_ZN3LED2LREaa>
 8003bf6:	e007      	b.n	8003c08 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fa36 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fd31 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003ca0 <_ZN9LineTrace4flipEv+0x218>
 8003c20:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003ca0 <_ZN9LineTrace4flipEv+0x218>
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fd0b 	bl	8005640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c30:	335c      	adds	r3, #92	; 0x5c
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c3e:	335c      	adds	r3, #92	; 0x5c
 8003c40:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c48:	335c      	adds	r3, #92	; 0x5c
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d906      	bls.n	8003c62 <_ZN9LineTrace4flipEv+0x1da>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c5a:	335c      	adds	r3, #92	; 0x5c
 8003c5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c60:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 500) led_.LR(-1, 1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c68:	335c      	adds	r3, #92	; 0x5c
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c70:	d808      	bhi.n	8003c84 <_ZN9LineTrace4flipEv+0x1fc>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	330c      	adds	r3, #12
 8003c76:	2201      	movs	r2, #1
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe f9f9 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003c82:	e007      	b.n	8003c94 <_ZN9LineTrace4flipEv+0x20c>
		else led_.LR(-1, 0);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	330c      	adds	r3, #12
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f9f0 	bl	8002074 <_ZN3LED2LREaa>
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	43480000 	.word	0x43480000
 8003ca0:	00000000 	.word	0x00000000

08003ca4 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fd16 	bl	80056f2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fa3e 	bl	800514c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003cd6:	334c      	adds	r3, #76	; 0x4c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ce2:	334e      	adds	r3, #78	; 0x4e
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	801a      	strh	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fd07 	bl	8005718 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f04f 31ff 	mov.w	r1, #4294967295
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe f9ad 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d20:	3318      	adds	r3, #24
 8003d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69d8      	ldr	r0, [r3, #28]
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <_ZN9LineTrace4stopEv+0xb4>)
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <_ZN9LineTrace4stopEv+0xb8>)
 8003d32:	491e      	ldr	r1, [pc, #120]	; (8003dac <_ZN9LineTrace4stopEv+0xbc>)
 8003d34:	f000 fc30 	bl	8004598 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003d38:	e006      	b.n	8003d48 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69d8      	ldr	r0, [r3, #28]
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <_ZN9LineTrace4stopEv+0xc0>)
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <_ZN9LineTrace4stopEv+0xc4>)
 8003d42:	491a      	ldr	r1, [pc, #104]	; (8003dac <_ZN9LineTrace4stopEv+0xbc>)
 8003d44:	f000 fc4b 	bl	80045de <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d4e:	331c      	adds	r3, #28
 8003d50:	2200      	movs	r2, #0
 8003d52:	9200      	str	r2, [sp, #0]
 8003d54:	2264      	movs	r2, #100	; 0x64
 8003d56:	4918      	ldr	r1, [pc, #96]	; (8003db8 <_ZN9LineTrace4stopEv+0xc8>)
 8003d58:	4814      	ldr	r0, [pc, #80]	; (8003dac <_ZN9LineTrace4stopEv+0xbc>)
 8003d5a:	f7fd fc53 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003d64:	33ac      	adds	r3, #172	; 0xac
 8003d66:	2200      	movs	r2, #0
 8003d68:	9200      	str	r2, [sp, #0]
 8003d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d6e:	4913      	ldr	r1, [pc, #76]	; (8003dbc <_ZN9LineTrace4stopEv+0xcc>)
 8003d70:	480e      	ldr	r0, [pc, #56]	; (8003dac <_ZN9LineTrace4stopEv+0xbc>)
 8003d72:	f7fd fc47 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe f977 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fcb5 	bl	80046fa <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fc63 	bl	8004660 <_ZN6Logger10resetLogs2Ev>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08018da8 	.word	0x08018da8
 8003da8:	08018db4 	.word	0x08018db4
 8003dac:	08018d9c 	.word	0x08018d9c
 8003db0:	08018e4c 	.word	0x08018e4c
 8003db4:	08018e58 	.word	0x08018e58
 8003db8:	08018dc4 	.word	0x08018dc4
 8003dbc:	08018dd4 	.word	0x08018dd4

08003dc0 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	737b      	strb	r3, [r7, #13]
	start();
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff67 	bl	8003ca4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003dd6:	7b7b      	ldrb	r3, [r7, #13]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d15b      	bne.n	8003e94 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <_ZN9LineTrace7runningEv+0x28>
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d030      	beq.n	8003e48 <_ZN9LineTrace7runningEv+0x88>
 8003de6:	e054      	b.n	8003e92 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f9a1 	bl	8005134 <_ZN10SideSensor16getWhiteLineCntREv>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d044      	beq.n	8003e8c <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe feb8 	bl	8002b78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e0e:	3318      	adds	r3, #24
 8003e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f89f 	bl	8003f5c <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd fb6b 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd fb49 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	330c      	adds	r3, #12
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe f919 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003e42:	230a      	movs	r3, #10
 8003e44:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003e46:	e021      	b.n	8003e8c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f971 	bl	8005134 <_ZN10SideSensor16getWhiteLineCntREv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe fea3 	bl	8002bae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f88a 	bl	8003f82 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003e6e:	2064      	movs	r0, #100	; 0x64
 8003e70:	f004 ffea 	bl	8008e48 <HAL_Delay>

				setTargetVelocity(0);
 8003e74:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003ea4 <_ZN9LineTrace7runningEv+0xe4>
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fd2a 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e82:	f004 ffe1 	bl	8008e48 <HAL_Delay>

				goal_flag = true;
 8003e86:	2301      	movs	r3, #1
 8003e88:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003e8a:	e001      	b.n	8003e90 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003e8c:	bf00      	nop
 8003e8e:	e7a2      	b.n	8003dd6 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003e90:	bf00      	nop
	while(goal_flag == false){
 8003e92:	e7a0      	b.n	8003dd6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff2b 	bl	8003cf0 <_ZN9LineTrace4stopEv>
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	00000000 	.word	0x00000000

08003ea8 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	ed2d 8b02 	vpush	{d8}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d046      	beq.n	8003f4c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11c      	bne.n	8003f08 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69dc      	ldr	r4, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fab9 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003edc:	eeb0 8a40 	vmov.f32	s16, s0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fe7a 	bl	8004bde <_ZN8Odometry8getThetaEv>
 8003eea:	ec53 2b10 	vmov	r2, r3, d0
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fe91 	bl	8000c18 <__aeabi_d2f>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	ee00 3a90 	vmov	s1, r3
 8003efc:	eeb0 0a48 	vmov.f32	s0, s16
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fa78 	bl	80043f6 <_ZN6Logger21storeDistanceAndThetaEff>
 8003f06:	e01b      	b.n	8003f40 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69dc      	ldr	r4, [r3, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fc1d 	bl	8005750 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003f16:	eeb0 8a40 	vmov.f32	s16, s0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fe5d 	bl	8004bde <_ZN8Odometry8getThetaEv>
 8003f24:	ec53 2b10 	vmov	r2, r3, d0
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f7fc fe74 	bl	8000c18 <__aeabi_d2f>
 8003f30:	4603      	mov	r3, r0
 8003f32:	ee00 3a90 	vmov	s1, r3
 8003f36:	eeb0 0a48 	vmov.f32	s0, s16
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 faa2 	bl	8004484 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003f4a:	801a      	strh	r2, [r3, #0]
	}
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	ecbd 8b02 	vpop	{d8}
 8003f56:	bd90      	pop	{r4, r7, pc}
 8003f58:	20000264 	.word	0x20000264

08003f5c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd faab 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f74:	3314      	adds	r3, #20
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f90:	3314      	adds	r3, #20
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f9c:	3316      	adds	r3, #22
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003fa8:	3350      	adds	r3, #80	; 0x50
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fce:	3318      	adds	r3, #24
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	801a      	strh	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fd fa2a 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003ffa:	eeb0 7a40 	vmov.f32	s14, s0
 8003ffe:	edd7 7a00 	vldr	s15, [r7]
 8004002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004036:	334c      	adds	r3, #76	; 0x4c
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461c      	mov	r4, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7fd fa15 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004042:	eef0 7a40 	vmov.f32	s15, s0
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 800404c:	3306      	adds	r3, #6
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800405e:	334c      	adds	r3, #76	; 0x4c
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800406c:	334c      	adds	r3, #76	; 0x4c
 800406e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004076:	334c      	adds	r3, #76	; 0x4c
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	2b63      	cmp	r3, #99	; 0x63
 800407c:	d905      	bls.n	800408a <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004084:	334c      	adds	r3, #76	; 0x4c
 8004086:	2263      	movs	r2, #99	; 0x63
 8004088:	801a      	strh	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}

08004092 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040a4:	334e      	adds	r3, #78	; 0x4e
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	461c      	mov	r4, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fd f9de 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80040b0:	eef0 7a40 	vmov.f32	s15, s0
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 80040ba:	332a      	adds	r3, #42	; 0x2a
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	3304      	adds	r3, #4
 80040c2:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040cc:	334e      	adds	r3, #78	; 0x4e
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040da:	334e      	adds	r3, #78	; 0x4e
 80040dc:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e4:	334e      	adds	r3, #78	; 0x4e
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ec:	d306      	bcc.n	80040fc <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040f4:	334e      	adds	r3, #78	; 0x4e
 80040f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040fa:	801a      	strh	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}

08004104 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6959      	ldr	r1, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004116:	334c      	adds	r3, #76	; 0x4c
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004120:	3306      	adds	r3, #6
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	eeb0 0a67 	vmov.f32	s0, s15
 8004130:	4608      	mov	r0, r1
 8004132:	f7fd f9aa 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800413c:	334c      	adds	r3, #76	; 0x4c
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800414a:	334c      	adds	r3, #76	; 0x4c
 800414c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004154:	334c      	adds	r3, #76	; 0x4c
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	2b63      	cmp	r3, #99	; 0x63
 800415a:	d905      	bls.n	8004168 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004162:	334c      	adds	r3, #76	; 0x4c
 8004164:	2263      	movs	r2, #99	; 0x63
 8004166:	801a      	strh	r2, [r3, #0]

}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004178:	2300      	movs	r3, #0
 800417a:	82fb      	strh	r3, [r7, #22]
 800417c:	8afb      	ldrh	r3, [r7, #22]
 800417e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004182:	d239      	bcs.n	80041f8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004184:	8afb      	ldrh	r3, [r7, #22]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800418c:	332a      	adds	r3, #42	; 0x2a
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd f965 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80041a2:	eeb0 7a40 	vmov.f32	s14, s0
 80041a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041ae:	eeb0 0a67 	vmov.f32	s0, s15
 80041b2:	f7fe fab5 	bl	8002720 <_ZSt3absf>
 80041b6:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80041ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80041be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004220 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 80041c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d811      	bhi.n	80041f0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6959      	ldr	r1, [r3, #20]
 80041d0:	8afb      	ldrh	r3, [r7, #22]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80041d8:	332a      	adds	r3, #42	; 0x2a
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	eeb0 0a67 	vmov.f32	s0, s15
 80041e8:	4608      	mov	r0, r1
 80041ea:	f7fd f94e 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 80041ee:	e003      	b.n	80041f8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80041f0:	8afb      	ldrh	r3, [r7, #22]
 80041f2:	3301      	adds	r3, #1
 80041f4:	82fb      	strh	r3, [r7, #22]
 80041f6:	e7c1      	b.n	800417c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041fe:	334e      	adds	r3, #78	; 0x4e
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004206:	d306      	bcc.n	8004216 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800420e:	334e      	adds	r3, #78	; 0x4e
 8004210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004214:	801a      	strh	r2, [r3, #0]

}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	42a00000 	.word	0x42a00000

08004224 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004232:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004240:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004244:	2200      	movs	r2, #0
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800424e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800425c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004260:	2200      	movs	r2, #0
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004280:	f7fd fab2 	bl	80017e8 <sd_mount>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004294:	f7fc ff04 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004298:	2100      	movs	r1, #0
 800429a:	2000      	movs	r0, #0
 800429c:	f7fc ff10 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80042a0:	4815      	ldr	r0, [pc, #84]	; (80042f8 <_ZN6Logger10sdCardInitEv+0x84>)
 80042a2:	f7fc ff37 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80042a6:	2101      	movs	r1, #1
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7fc ff09 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80042ae:	4813      	ldr	r0, [pc, #76]	; (80042fc <_ZN6Logger10sdCardInitEv+0x88>)
 80042b0:	f7fc ff30 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80042b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042b8:	f004 fdc6 	bl	8008e48 <HAL_Delay>

	  ret = true;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e015      	b.n	80042ee <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80042c2:	f7fc feed 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80042c6:	2100      	movs	r1, #0
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7fc fef9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80042ce:	480a      	ldr	r0, [pc, #40]	; (80042f8 <_ZN6Logger10sdCardInitEv+0x84>)
 80042d0:	f7fc ff20 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80042d4:	2101      	movs	r1, #1
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fc fef2 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80042dc:	4808      	ldr	r0, [pc, #32]	; (8004300 <_ZN6Logger10sdCardInitEv+0x8c>)
 80042de:	f7fc ff19 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80042e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042e6:	f004 fdaf 	bl	8008e48 <HAL_Delay>

	  ret = false;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	08018e68 	.word	0x08018e68
 80042fc:	08018e74 	.word	0x08018e74
 8004300:	08018e7c 	.word	0x08018e7c

08004304 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004316:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d027      	beq.n	8004370 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004326:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800433c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800434c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004350:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004358:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <_ZN6Logger8storeLogEf+0x6c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004368:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800436c:	2200      	movs	r2, #0
 800436e:	801a      	strh	r2, [r3, #0]
	}
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800438e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d028      	beq.n	80043ea <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800439e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043b6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043ca:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043d2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <_ZN6Logger9storeLog2Ef+0x6e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043e6:	2200      	movs	r2, #0
 80043e8:	801a      	strh	r2, [r3, #0]
	}
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8004402:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800440c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	3302      	adds	r3, #2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004424:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004430:	3312      	adds	r3, #18
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004440:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004450:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004454:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800445c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	f241 726f 	movw	r2, #5999	; 0x176f
 8004466:	4293      	cmp	r3, r2
 8004468:	d906      	bls.n	8004478 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004470:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004474:	2200      	movs	r2, #0
 8004476:	801a      	strh	r2, [r3, #0]
	//}
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004490:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800449a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80044a6:	3322      	adds	r3, #34	; 0x22
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044b6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80044c2:	3352      	adds	r3, #82	; 0x52
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044d2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044e2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044e6:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	f241 726f 	movw	r2, #5999	; 0x176f
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d906      	bls.n	800450a <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004502:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004506:	2200      	movs	r2, #0
 8004508:	801a      	strh	r2, [r3, #0]
	//}
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3308      	adds	r3, #8
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800453c:	3348      	adds	r3, #72	; 0x48
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	2201      	movs	r2, #1
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fd f84e 	bl	8001604 <sd_write_array_float>
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	2300      	movs	r3, #0
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	2201      	movs	r2, #1
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f7fd f83a 	bl	8001604 <sd_write_array_float>
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f103 0208 	add.w	r2, r3, #8
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	f241 7270 	movw	r2, #6000	; 0x1770
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f7fd f823 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80045c4:	3348      	adds	r3, #72	; 0x48
 80045c6:	2200      	movs	r2, #0
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	f241 7270 	movw	r2, #6000	; 0x1770
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f7fd f817 	bl	8001604 <sd_write_array_float>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af02      	add	r7, sp, #8
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80045f2:	3388      	adds	r3, #136	; 0x88
 80045f4:	2200      	movs	r2, #0
 80045f6:	9200      	str	r2, [sp, #0]
 80045f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	68b8      	ldr	r0, [r7, #8]
 8004600:	f7fd f800 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800460a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800460e:	2200      	movs	r2, #0
 8004610:	9200      	str	r2, [sp, #0]
 8004612:	f241 7270 	movw	r2, #6000	; 0x1770
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fc fff3 	bl	8001604 <sd_write_array_float>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	f241 7270 	movw	r2, #6000	; 0x1770
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f7fd f846 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800464a:	3348      	adds	r3, #72	; 0x48
 800464c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f7fd f83c 	bl	80016d0 <sd_read_array_float>
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004660:	b480      	push	{r7}
 8004662:	b08b      	sub	sp, #44	; 0x2c
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800466e:	3388      	adds	r3, #136	; 0x88
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800467c:	3340      	adds	r3, #64	; 0x40
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	d009      	beq.n	800469c <_ZN6Logger10resetLogs2Ev+0x3c>
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	617b      	str	r3, [r7, #20]
		log = 0;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3304      	adds	r3, #4
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e7f1      	b.n	8004680 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80046a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80046b2:	3340      	adds	r3, #64	; 0x40
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d009      	beq.n	80046d2 <_ZN6Logger10resetLogs2Ev+0x72>
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	60bb      	str	r3, [r7, #8]
		log = 0;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	3304      	adds	r3, #4
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	e7f1      	b.n	80046b6 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046d8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046dc:	2200      	movs	r2, #0
 80046de:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046e6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80046ea:	2200      	movs	r2, #0
 80046ec:	801a      	strh	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	372c      	adds	r7, #44	; 0x2c
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004708:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004716:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800471a:	2200      	movs	r2, #0
 800471c:	801a      	strh	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <_ZN6Logger5startEv>:

void Logger::start()
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004738:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800475a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	805a      	strh	r2, [r3, #2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004798:	2108      	movs	r1, #8
 800479a:	4805      	ldr	r0, [pc, #20]	; (80047b0 <_ZN5Motor4initEv+0x20>)
 800479c:	f009 fd04 	bl	800e1a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80047a0:	210c      	movs	r1, #12
 80047a2:	4803      	ldr	r0, [pc, #12]	; (80047b0 <_ZN5Motor4initEv+0x20>)
 80047a4:	f009 fd00 	bl	800e1a8 <HAL_TIM_PWM_Start>

}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	2003e8e0 	.word	0x2003e8e0

080047b4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da0d      	bge.n	80047e2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80047c6:	2200      	movs	r2, #0
 80047c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047cc:	481f      	ldr	r0, [pc, #124]	; (800484c <_ZN5Motor9motorCtrlEv+0x98>)
 80047ce:	f005 fdd1 	bl	800a374 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	425b      	negs	r3, r3
 80047dc:	b29b      	uxth	r3, r3
 80047de:	81fb      	strh	r3, [r7, #14]
 80047e0:	e00a      	b.n	80047f8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80047e2:	2201      	movs	r2, #1
 80047e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047e8:	4818      	ldr	r0, [pc, #96]	; (800484c <_ZN5Motor9motorCtrlEv+0x98>)
 80047ea:	f005 fdc3 	bl	800a374 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0d      	bge.n	800481e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004802:	2201      	movs	r2, #1
 8004804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004808:	4810      	ldr	r0, [pc, #64]	; (800484c <_ZN5Motor9motorCtrlEv+0x98>)
 800480a:	f005 fdb3 	bl	800a374 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004814:	b29b      	uxth	r3, r3
 8004816:	425b      	negs	r3, r3
 8004818:	b29b      	uxth	r3, r3
 800481a:	81bb      	strh	r3, [r7, #12]
 800481c:	e00a      	b.n	8004834 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800481e:	2200      	movs	r2, #0
 8004820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004824:	4809      	ldr	r0, [pc, #36]	; (800484c <_ZN5Motor9motorCtrlEv+0x98>)
 8004826:	f005 fda5 	bl	800a374 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004830:	b29b      	uxth	r3, r3
 8004832:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004834:	89fa      	ldrh	r2, [r7, #14]
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 800483c:	89ba      	ldrh	r2, [r7, #12]
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40020c00 	.word	0x40020c00
 8004850:	2003e8e0 	.word	0x2003e8e0

08004854 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6178      	str	r0, [r7, #20]
 800485c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004860:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	4b30      	ldr	r3, [pc, #192]	; (800492c <_ZN5Motor8setRatioEdd+0xd8>)
 800486a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800486e:	f7fc f96b 	bl	8000b48 <__aeabi_dcmpgt>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <_ZN5Motor8setRatioEdd+0x30>
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	4c2b      	ldr	r4, [pc, #172]	; (800492c <_ZN5Motor8setRatioEdd+0xd8>)
 800487e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004882:	e00e      	b.n	80048a2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <_ZN5Motor8setRatioEdd+0xdc>)
 800488a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800488e:	f7fc f93d 	bl	8000b0c <__aeabi_dcmplt>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <_ZN5Motor8setRatioEdd+0x4e>
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	4c24      	ldr	r4, [pc, #144]	; (8004930 <_ZN5Motor8setRatioEdd+0xdc>)
 800489e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <_ZN5Motor8setRatioEdd+0xd8>)
 80048a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ac:	f7fc f94c 	bl	8000b48 <__aeabi_dcmpgt>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <_ZN5Motor8setRatioEdd+0x6e>
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	4c1c      	ldr	r4, [pc, #112]	; (800492c <_ZN5Motor8setRatioEdd+0xd8>)
 80048bc:	e9c7 3400 	strd	r3, r4, [r7]
 80048c0:	e00e      	b.n	80048e0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <_ZN5Motor8setRatioEdd+0xdc>)
 80048c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048cc:	f7fc f91e 	bl	8000b0c <__aeabi_dcmplt>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <_ZN5Motor8setRatioEdd+0x8c>
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	4c15      	ldr	r4, [pc, #84]	; (8004930 <_ZN5Motor8setRatioEdd+0xdc>)
 80048dc:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <_ZN5Motor8setRatioEdd+0xe0>)
 80048e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ea:	f7fb fe9d 	bl	8000628 <__aeabi_dmul>
 80048ee:	4603      	mov	r3, r0
 80048f0:	460c      	mov	r4, r1
 80048f2:	4618      	mov	r0, r3
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7fc f947 	bl	8000b88 <__aeabi_d2iz>
 80048fa:	4603      	mov	r3, r0
 80048fc:	b21a      	sxth	r2, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <_ZN5Motor8setRatioEdd+0xe0>)
 8004908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800490c:	f7fb fe8c 	bl	8000628 <__aeabi_dmul>
 8004910:	4603      	mov	r3, r0
 8004912:	460c      	mov	r4, r1
 8004914:	4618      	mov	r0, r3
 8004916:	4621      	mov	r1, r4
 8004918:	f7fc f936 	bl	8000b88 <__aeabi_d2iz>
 800491c:	4603      	mov	r3, r0
 800491e:	b21a      	sxth	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	805a      	strh	r2, [r3, #2]

}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}
 800492c:	3ff00000 	.word	0x3ff00000
 8004930:	bff00000 	.word	0xbff00000
 8004934:	409c2000 	.word	0x409c2000

08004938 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004938:	b490      	push	{r4, r7}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	f04f 0400 	mov.w	r4, #0
 8004988:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	609a      	str	r2, [r3, #8]
}
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc90      	pop	{r4, r7}
 80049a8:	4770      	bx	lr
 80049aa:	0000      	movs	r0, r0
 80049ac:	0000      	movs	r0, r0
	...

080049b0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fd f8da 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 80049c4:	ee10 3a10 	vmov	r3, s0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fdd5 	bl	8000578 <__aeabi_f2d>
 80049ce:	4603      	mov	r3, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc fd28 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80049e0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80049e4:	a376      	add	r3, pc, #472	; (adr r3, 8004bc0 <_ZN8Odometry12calcPotitionEv+0x210>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ee:	f7fb fe1b 	bl	8000628 <__aeabi_dmul>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7fb fdb8 	bl	8000578 <__aeabi_f2d>
 8004a08:	4682      	mov	sl, r0
 8004a0a:	468b      	mov	fp, r1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a20:	f7fb ff2c 	bl	800087c <__aeabi_ddiv>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	f7fb fc46 	bl	80002bc <__adddf3>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	ec43 2b17 	vmov	d7, r2, r3
 8004a38:	eeb0 0a47 	vmov.f32	s0, s14
 8004a3c:	eef0 0a67 	vmov.f32	s1, s15
 8004a40:	f00e fef6 	bl	8013830 <cos>
 8004a44:	ec53 2b10 	vmov	r2, r3, d0
 8004a48:	4650      	mov	r0, sl
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	f7fb fdec 	bl	8000628 <__aeabi_dmul>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fb fc30 	bl	80002bc <__adddf3>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fb fd83 	bl	8000578 <__aeabi_f2d>
 8004a72:	4682      	mov	sl, r0
 8004a74:	468b      	mov	fp, r1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a8a:	f7fb fef7 	bl	800087c <__aeabi_ddiv>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4640      	mov	r0, r8
 8004a94:	4649      	mov	r1, r9
 8004a96:	f7fb fc11 	bl	80002bc <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	ec43 2b17 	vmov	d7, r2, r3
 8004aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8004aa6:	eef0 0a67 	vmov.f32	s1, s15
 8004aaa:	f00e ff05 	bl	80138b8 <sin>
 8004aae:	ec53 2b10 	vmov	r2, r3, d0
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	f7fb fdb7 	bl	8000628 <__aeabi_dmul>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fb fbfb 	bl	80002bc <__adddf3>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	460c      	mov	r4, r1
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004adc:	461a      	mov	r2, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	f7fb fbec 	bl	80002bc <__adddf3>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004afa:	eeb0 0a47 	vmov.f32	s0, s14
 8004afe:	eef0 0a67 	vmov.f32	s1, s15
 8004b02:	f00e fe95 	bl	8013830 <cos>
 8004b06:	ec51 0b10 	vmov	r0, r1, d0
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004b10:	f7fb fd8a 	bl	8000628 <__aeabi_dmul>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb fbce 	bl	80002bc <__adddf3>
 8004b20:	4603      	mov	r3, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	ed93 7b08 	vldr	d7, [r3, #32]
 8004b36:	eeb0 0a47 	vmov.f32	s0, s14
 8004b3a:	eef0 0a67 	vmov.f32	s1, s15
 8004b3e:	f00e febb 	bl	80138b8 <sin>
 8004b42:	ec51 0b10 	vmov	r0, r1, d0
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004b4c:	f7fb fd6c 	bl	8000628 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	f7fb fbb0 	bl	80002bc <__adddf3>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4621      	mov	r1, r4
 8004b70:	f7fc f852 	bl	8000c18 <__aeabi_d2f>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004b78:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004b80:	4618      	mov	r0, r3
 8004b82:	4621      	mov	r1, r4
 8004b84:	f7fc f848 	bl	8000c18 <__aeabi_d2f>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004b8c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b94:	4618      	mov	r0, r3
 8004b96:	4621      	mov	r1, r4
 8004b98:	f7fc f83e 	bl	8000c18 <__aeabi_d2f>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004ba0:	601a      	str	r2, [r3, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bac:	f3af 8000 	nop.w
 8004bb0:	405b8000 	.word	0x405b8000
 8004bb4:	20000294 	.word	0x20000294
 8004bb8:	20000298 	.word	0x20000298
 8004bbc:	2000029c 	.word	0x2000029c
 8004bc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004bc4:	3f50624d 	.word	0x3f50624d

08004bc8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff feed 	bl	80049b0 <_ZN8Odometry12calcPotitionEv>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004bde:	b490      	push	{r4, r7}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
	return theta_;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004bec:	ec44 3b17 	vmov	d7, r3, r4
}
 8004bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8004bf4:	eef0 0a67 	vmov.f32	s1, s15
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc90      	pop	{r4, r7}
 8004bfe:	4770      	bx	lr

08004c00 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004c00:	b490      	push	{r4, r7}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	f04f 0400 	mov.w	r4, #0
 8004c2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc90      	pop	{r4, r7}
 8004c3a:	4770      	bx	lr

08004c3c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004c3c:	b490      	push	{r4, r7}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	f04f 0400 	mov.w	r4, #0
 8004c62:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c7a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004c7e:	2200      	movs	r2, #0
 8004c80:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004c82:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <_ZN13PathFollowingC1Ev+0xec>)
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <_ZN13PathFollowingC1Ev+0xec>)
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004c9e:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <_ZN13PathFollowingC1Ev+0xec>)
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	f04f 0400 	mov.w	r4, #0
 8004ca8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004cba:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	f04f 0400 	mov.w	r4, #0
 8004cd2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	f04f 0400 	mov.w	r4, #0
 8004cee:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004cf2:	4a0e      	ldr	r2, [pc, #56]	; (8004d2c <_ZN13PathFollowingC1Ev+0xf0>)
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	f04f 0400 	mov.w	r4, #0
 8004cfc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <_ZN13PathFollowingC1Ev+0xf4>)
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	f04f 0400 	mov.w	r4, #0
 8004d0a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004d0e:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <_ZN13PathFollowingC1Ev+0xf4>)
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc90      	pop	{r4, r7}
 8004d26:	4770      	bx	lr
 8004d28:	2003ede0 	.word	0x2003ede0
 8004d2c:	2003ed70 	.word	0x2003ed70
 8004d30:	2003edd0 	.word	0x2003edd0

08004d34 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004d3c:	f001 fc92 	bl	8006664 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	2201      	movs	r2, #1
 8004d46:	4915      	ldr	r1, [pc, #84]	; (8004d9c <_ZN13PathFollowing4initEv+0x68>)
 8004d48:	4815      	ldr	r0, [pc, #84]	; (8004da0 <_ZN13PathFollowing4initEv+0x6c>)
 8004d4a:	f7fc fd07 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	2201      	movs	r2, #1
 8004d54:	4913      	ldr	r1, [pc, #76]	; (8004da4 <_ZN13PathFollowing4initEv+0x70>)
 8004d56:	4812      	ldr	r0, [pc, #72]	; (8004da0 <_ZN13PathFollowing4initEv+0x6c>)
 8004d58:	f7fc fd00 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	2201      	movs	r2, #1
 8004d62:	4911      	ldr	r1, [pc, #68]	; (8004da8 <_ZN13PathFollowing4initEv+0x74>)
 8004d64:	480e      	ldr	r0, [pc, #56]	; (8004da0 <_ZN13PathFollowing4initEv+0x6c>)
 8004d66:	f7fc fcf9 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004d6a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d6e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d72:	ed97 5b02 	vldr	d5, [r7, #8]
 8004d76:	eeb0 2a45 	vmov.f32	s4, s10
 8004d7a:	eef0 2a65 	vmov.f32	s5, s11
 8004d7e:	eeb0 1a46 	vmov.f32	s2, s12
 8004d82:	eef0 1a66 	vmov.f32	s3, s13
 8004d86:	eeb0 0a47 	vmov.f32	s0, s14
 8004d8a:	eef0 0a67 	vmov.f32	s1, s15
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f80c 	bl	8004dac <_ZN13PathFollowing7setGainEddd>
}
 8004d94:	bf00      	nop
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	08018e84 	.word	0x08018e84
 8004da0:	08018e8c 	.word	0x08018e8c
 8004da4:	08018e94 	.word	0x08018e94
 8004da8:	08018e9c 	.word	0x08018e9c

08004dac <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004dac:	b490      	push	{r4, r7}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	61f8      	str	r0, [r7, #28]
 8004db4:	ed87 0b04 	vstr	d0, [r7, #16]
 8004db8:	ed87 1b02 	vstr	d1, [r7, #8]
 8004dbc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004dc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004dc6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004dca:	4a07      	ldr	r2, [pc, #28]	; (8004de8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004dcc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004dd0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004dd6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004dda:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004dde:	bf00      	nop
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc90      	pop	{r4, r7}
 8004de6:	4770      	bx	lr
 8004de8:	2003ede0 	.word	0x2003ede0

08004dec <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004df4:	2088      	movs	r0, #136	; 0x88
 8004df6:	f7fd f802 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004dfa:	2080      	movs	r0, #128	; 0x80
 8004dfc:	f7fc ffff 	bl	8001dfe <INA260_init>
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004e10:	2188      	movs	r1, #136	; 0x88
 8004e12:	2002      	movs	r0, #2
 8004e14:	f7fc ff90 	bl	8001d38 <INA260_read>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fb9a 	bl	8000554 <__aeabi_i2d>
 8004e20:	a30c      	add	r3, pc, #48	; (adr r3, 8004e54 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f7fb fbff 	bl	8000628 <__aeabi_dmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	4621      	mov	r1, r4
 8004e32:	f7fb fef1 	bl	8000c18 <__aeabi_d2f>
 8004e36:	4602      	mov	r2, r0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a03      	ldr	r2, [pc, #12]	; (8004e50 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}
 8004e4c:	f3af 8000 	nop.w
 8004e50:	200002a0 	.word	0x200002a0
 8004e54:	47ae147b 	.word	0x47ae147b
 8004e58:	3f547ae1 	.word	0x3f547ae1

08004e5c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	ee07 3a90 	vmov	s15, r3

}
 8004e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4822      	ldr	r0, [pc, #136]	; (8004f14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e8c:	f005 fa5a 	bl	800a344 <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004ea8:	2108      	movs	r1, #8
 8004eaa:	481a      	ldr	r0, [pc, #104]	; (8004f14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004eac:	f005 fa4a 	bl	800a344 <HAL_GPIO_ReadPin>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004ec8:	2110      	movs	r1, #16
 8004eca:	4812      	ldr	r0, [pc, #72]	; (8004f14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004ecc:	f005 fa3a 	bl	800a344 <HAL_GPIO_ReadPin>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	480a      	ldr	r0, [pc, #40]	; (8004f14 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004eec:	f005 fa2a 	bl	800a344 <HAL_GPIO_ReadPin>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf0c      	ite	eq
 8004ef6:	2301      	moveq	r3, #1
 8004ef8:	2300      	movne	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	f043 0308 	orr.w	r3, r3, #8
 8004f06:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004f08:	89fb      	ldrh	r3, [r7, #14]

}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40020c00 	.word	0x40020c00

08004f18 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	805a      	strh	r2, [r3, #2]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	809a      	strh	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	719a      	strb	r2, [r3, #6]
{

}
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	799b      	ldrb	r3, [r3, #6]
 8004f54:	f083 0301 	eor.w	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80c7 	beq.w	80050ee <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004f60:	4b65      	ldr	r3, [pc, #404]	; (80050f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d027      	beq.n	8004fbe <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004f6e:	2104      	movs	r1, #4
 8004f70:	4862      	ldr	r0, [pc, #392]	; (80050fc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f72:	f005 f9e7 	bl	800a344 <HAL_GPIO_ReadPin>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004f86:	4b5e      	ldr	r3, [pc, #376]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e002      	b.n	8004f9a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004f94:	4b5a      	ldr	r3, [pc, #360]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004f9a:	4b59      	ldr	r3, [pc, #356]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d93f      	bls.n	8005022 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004fb0:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004fb6:	4b52      	ldr	r3, [pc, #328]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e031      	b.n	8005022 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004fbe:	4b4e      	ldr	r3, [pc, #312]	; (80050f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02d      	beq.n	8005022 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	484c      	ldr	r0, [pc, #304]	; (80050fc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004fca:	f005 f9bb 	bl	800a344 <HAL_GPIO_ReadPin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004fde:	4b48      	ldr	r3, [pc, #288]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	4b46      	ldr	r3, [pc, #280]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004fec:	4b44      	ldr	r3, [pc, #272]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004ff2:	4b43      	ldr	r3, [pc, #268]	; (8005100 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d913      	bls.n	8005022 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8005008:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	889b      	ldrh	r3, [r3, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	889a      	ldrh	r2, [r3, #4]
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005020:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d027      	beq.n	8005080 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005034:	4835      	ldr	r0, [pc, #212]	; (800510c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005036:	f005 f985 	bl	800a344 <HAL_GPIO_ReadPin>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e002      	b.n	800505e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800505a:	2200      	movs	r2, #0
 800505c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d90c      	bls.n	8005080 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	b29a      	uxth	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800507a:	4b25      	ldr	r3, [pc, #148]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800507c:	2200      	movs	r2, #0
 800507e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02e      	beq.n	80050e6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800508c:	481f      	ldr	r0, [pc, #124]	; (800510c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800508e:	f005 f959 	bl	800a344 <HAL_GPIO_ReadPin>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80050a2:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e002      	b.n	80050b6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d913      	bls.n	80050e6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	f083 0302 	eor.w	r3, r3, #2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	885b      	ldrh	r3, [r3, #2]
 80050d6:	3301      	adds	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	885a      	ldrh	r2, [r3, #2]
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80050e4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	881a      	ldrh	r2, [r3, #0]
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80050ec:	801a      	strh	r2, [r3, #0]
	}

}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200002aa 	.word	0x200002aa
 80050fc:	40021000 	.word	0x40021000
 8005100:	200002ae 	.word	0x200002ae
 8005104:	200002a8 	.word	0x200002a8
 8005108:	200002ab 	.word	0x200002ab
 800510c:	40020c00 	.word	0x40020c00
 8005110:	200002ac 	.word	0x200002ac
 8005114:	200002a6 	.word	0x200002a6
 8005118:	200002a4 	.word	0x200002a4

0800511c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	return status_;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	881b      	ldrh	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	889b      	ldrh	r3, [r3, #4]
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	809a      	strh	r2, [r3, #4]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	719a      	strb	r2, [r3, #6]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	719a      	strb	r2, [r3, #6]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	799b      	ldrb	r3, [r3, #6]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80051c8:	3308      	adds	r3, #8
 80051ca:	4611      	mov	r1, r2
 80051cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f00f fbad 	bl	8014930 <memcpy>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	08018ec0 	.word	0x08018ec0

0800520c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	ed97 0a00 	vldr	s0, [r7]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f86a 	bl	8004304 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800523a:	eeb0 0a67 	vmov.f32	s0, s15
 800523e:	4610      	mov	r0, r2
 8005240:	f7ff f89c 	bl	800437c <_ZN6Logger9storeLog2Ef>
	}

}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800525a:	4908      	ldr	r1, [pc, #32]	; (800527c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff f974 	bl	800454a <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005268:	4904      	ldr	r1, [pc, #16]	; (800527c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff f980 	bl	8004570 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	080190b4 	.word	0x080190b4
 800527c:	080190c0 	.word	0x080190c0
 8005280:	080190cc 	.word	0x080190cc

08005284 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005292:	2b00      	cmp	r3, #0
 8005294:	d046      	beq.n	8005324 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3204      	adds	r2, #4
 80052a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80052ac:	ee07 3a90 	vmov	s15, r3
 80052b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80052c4:	3301      	adds	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052d4:	4a15      	ldr	r2, [pc, #84]	; (800532c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80052d6:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80052de:	2bf9      	cmp	r3, #249	; 0xf9
 80052e0:	d903      	bls.n	80052ea <_ZN20SystemIdentification10updateMsigEv+0x66>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	22fa      	movs	r2, #250	; 0xfa
 80052e6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685c      	ldr	r4, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f93f 	bl	8000578 <__aeabi_f2d>
 80052fa:	4605      	mov	r5, r0
 80052fc:	460e      	mov	r6, r1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005304:	eef1 7a67 	vneg.f32	s15, s15
 8005308:	ee17 3a90 	vmov	r3, s15
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb f933 	bl	8000578 <__aeabi_f2d>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	ec43 2b11 	vmov	d1, r2, r3
 800531a:	ec46 5b10 	vmov	d0, r5, r6
 800531e:	4620      	mov	r0, r4
 8005320:	f7ff fa98 	bl	8004854 <_ZN5Motor8setRatioEdd>

	}

}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532c:	200002b0 	.word	0x200002b0

08005330 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff f9e4 	bl	800472a <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	0000      	movs	r0, r0
 8005374:	0000      	movs	r0, r0
	...

08005378 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f9e1 	bl	800474c <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80053b8 <_ZN20SystemIdentification4stopEv+0x40>
 80053a2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80053b8 <_ZN20SystemIdentification4stopEv+0x40>
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fa54 	bl	8004854 <_ZN5Motor8setRatioEdd>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	f3af 8000 	nop.w
	...

080053c0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	615a      	str	r2, [r3, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	619a      	str	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	621a      	str	r2, [r3, #32]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	f107 020c 	add.w	r2, r7, #12
 8005468:	f107 0110 	add.w	r1, r7, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb ffcb 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005472:	ed97 7a04 	vldr	s14, [r7, #16]
 8005476:	edd7 7a03 	vldr	s15, [r7, #12]
 800547a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800547e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005486:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7fb f874 	bl	8000578 <__aeabi_f2d>
 8005490:	a30b      	add	r3, pc, #44	; (adr r3, 80054c0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f8c7 	bl	8000628 <__aeabi_dmul>
 800549a:	4603      	mov	r3, r0
 800549c:	460c      	mov	r4, r1
 800549e:	4618      	mov	r0, r3
 80054a0:	4621      	mov	r1, r4
 80054a2:	f7fb fbb9 	bl	8000c18 <__aeabi_d2f>
 80054a6:	4602      	mov	r2, r0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	ee07 3a90 	vmov	s15, r3
}
 80054b4:	eeb0 0a67 	vmov.f32	s0, s15
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd90      	pop	{r4, r7, pc}
 80054be:	bf00      	nop
 80054c0:	1ab1d998 	.word	0x1ab1d998
 80054c4:	3f7830b5 	.word	0x3f7830b5

080054c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	ed93 7a00 	vldr	s14, [r3]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80054dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80054ee:	4b48      	ldr	r3, [pc, #288]	; (8005610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	edd3 7a04 	vldr	s15, [r3, #16]
 8005504:	ed97 7a05 	vldr	s14, [r7, #20]
 8005508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005510:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb f82f 	bl	8000578 <__aeabi_f2d>
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed93 7a06 	vldr	s14, [r3, #24]
 8005524:	edd7 7a05 	vldr	s15, [r7, #20]
 8005528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552c:	ee17 0a90 	vmov	r0, s15
 8005530:	f7fb f822 	bl	8000578 <__aeabi_f2d>
 8005534:	a334      	add	r3, pc, #208	; (adr r3, 8005608 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fb f875 	bl	8000628 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fa feb9 	bl	80002bc <__adddf3>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	4618      	mov	r0, r3
 8005550:	4621      	mov	r1, r4
 8005552:	f7fb fb61 	bl	8000c18 <__aeabi_d2f>
 8005556:	4602      	mov	r2, r0
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800555a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005562:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	edd7 6a05 	vldr	s13, [r7, #20]
 800556c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005574:	ee17 0a90 	vmov	r0, s15
 8005578:	f7fa fffe 	bl	8000578 <__aeabi_f2d>
 800557c:	a322      	add	r3, pc, #136	; (adr r3, 8005608 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fb f97b 	bl	800087c <__aeabi_ddiv>
 8005586:	4603      	mov	r3, r0
 8005588:	460c      	mov	r4, r1
 800558a:	4618      	mov	r0, r3
 800558c:	4621      	mov	r1, r4
 800558e:	f7fb fb43 	bl	8000c18 <__aeabi_d2f>
 8005592:	4603      	mov	r3, r0
 8005594:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005596:	ed97 7a04 	vldr	s14, [r7, #16]
 800559a:	edd7 7a03 	vldr	s15, [r7, #12]
 800559e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80055a4:	edd3 7a00 	vldr	s15, [r3]
 80055a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ac:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80055ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80055be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c2:	ee17 0a90 	vmov	r0, s15
 80055c6:	f7fa ffd7 	bl	8000578 <__aeabi_f2d>
 80055ca:	4605      	mov	r5, r0
 80055cc:	460e      	mov	r6, r1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80055d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055dc:	ee17 0a90 	vmov	r0, s15
 80055e0:	f7fa ffca 	bl	8000578 <__aeabi_f2d>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	ec43 2b11 	vmov	d1, r2, r3
 80055ec:	ec46 5b10 	vmov	d0, r5, r6
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7ff f92f 	bl	8004854 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80055f6:	4a07      	ldr	r2, [pc, #28]	; (8005614 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6013      	str	r3, [r2, #0]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005604:	f3af 8000 	nop.w
 8005608:	d2f1a9fc 	.word	0xd2f1a9fc
 800560c:	3f50624d 	.word	0x3f50624d
 8005610:	200002b8 	.word	0x200002b8
 8005614:	200002b4 	.word	0x200002b4

08005618 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	ed87 0a02 	vstr	s0, [r7, #8]
 8005624:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	605a      	str	r2, [r3, #4]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	ed87 0a02 	vstr	s0, [r7, #8]
 800564c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	ed87 0a02 	vstr	s0, [r7, #8]
 8005674:	edc7 0a01 	vstr	s1, [r7, #4]
 8005678:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	615a      	str	r2, [r3, #20]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80056a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80056aa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff febf 	bl	8005458 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff feef 	bl	80054c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005748 <_ZN12VelocityCtrl4stopEv+0x30>
 8005730:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005748 <_ZN12VelocityCtrl4stopEv+0x30>
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff f88d 	bl	8004854 <_ZN5Motor8setRatioEdd>

}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	f3af 8000 	nop.w
	...

08005750 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	ee07 3a90 	vmov	s15, r3
}
 8005760:	eeb0 0a67 	vmov.f32	s0, s15
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005782:	f001 fe27 	bl	80073d4 <cppFlip100ns>

		tim7_timer++;
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800578e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <HAL_TIM_PeriodElapsedCallback+0x30>
 800579a:	4b18      	ldr	r3, [pc, #96]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80057aa:	f001 fdc9 	bl	8007340 <cppFlip1ms>

		tim6_timer++;
 80057ae:	4b16      	ldr	r3, [pc, #88]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80057b6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a10      	ldr	r2, [pc, #64]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d902      	bls.n	80057c8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a0f      	ldr	r2, [pc, #60]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80057d2:	f001 fe09 	bl	80073e8 <cppFlip10ms>

		tim13_timer++;
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057de:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a06      	ldr	r2, [pc, #24]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d902      	bls.n	80057f0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
	}

}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40001400 	.word	0x40001400
 80057fc:	2003ea94 	.word	0x2003ea94
 8005800:	0001869f 	.word	0x0001869f
 8005804:	40001000 	.word	0x40001000
 8005808:	2003ea50 	.word	0x2003ea50
 800580c:	40001c00 	.word	0x40001c00
 8005810:	2003ea98 	.word	0x2003ea98

08005814 <init>:

void init()
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005818:	2201      	movs	r2, #1
 800581a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800581e:	4808      	ldr	r0, [pc, #32]	; (8005840 <init+0x2c>)
 8005820:	f004 fda8 	bl	800a374 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005824:	4807      	ldr	r0, [pc, #28]	; (8005844 <init+0x30>)
 8005826:	f008 fc70 	bl	800e10a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800582a:	4807      	ldr	r0, [pc, #28]	; (8005848 <init+0x34>)
 800582c:	f008 fc6d 	bl	800e10a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005830:	4806      	ldr	r0, [pc, #24]	; (800584c <init+0x38>)
 8005832:	f008 fc6a 	bl	800e10a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005836:	f001 fce3 	bl	8007200 <cppInit>

	//path_following_initialize();

}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	2003eb7c 	.word	0x2003eb7c
 8005848:	2003ed20 	.word	0x2003ed20
 800584c:	2003ea9c 	.word	0x2003ea9c

08005850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005854:	f003 fa86 	bl	8008d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005858:	f000 f82a 	bl	80058b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800585c:	f000 fdbc 	bl	80063d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005860:	f000 fd8a 	bl	8006378 <MX_DMA_Init>
  MX_I2C2_Init();
 8005864:	f000 f9e8 	bl	8005c38 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005868:	f000 fa14 	bl	8005c94 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800586c:	f000 fa32 	bl	8005cd4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005870:	f000 fa66 	bl	8005d40 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005874:	f000 fb70 	bl	8005f58 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005878:	f000 fc3c 	bl	80060f4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800587c:	f000 fd52 	bl	8006324 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005880:	f00a fc16 	bl	80100b0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005884:	f000 fbcc 	bl	8006020 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005888:	f000 f9a8 	bl	8005bdc <MX_I2C1_Init>
  MX_TIM3_Init();
 800588c:	f000 fb00 	bl	8005e90 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005890:	f000 fc88 	bl	80061a4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005894:	f000 fcd4 	bl	8006240 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005898:	f000 f898 	bl	80059cc <MX_ADC2_Init>
  MX_TIM7_Init();
 800589c:	f000 fbf6 	bl	800608c <MX_TIM7_Init>
  MX_TIM13_Init();
 80058a0:	f000 fd1c 	bl	80062dc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80058a4:	f7ff ffb6 	bl	8005814 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80058a8:	f001 fdb6 	bl	8007418 <cppLoop>
 80058ac:	e7fc      	b.n	80058a8 <main+0x58>
	...

080058b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b0a4      	sub	sp, #144	; 0x90
 80058b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80058ba:	2234      	movs	r2, #52	; 0x34
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f00f f841 	bl	8014946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	223c      	movs	r2, #60	; 0x3c
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f00f f832 	bl	8014946 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <SystemClock_Config+0x114>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a36      	ldr	r2, [pc, #216]	; (80059c4 <SystemClock_Config+0x114>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <SystemClock_Config+0x114>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <SystemClock_Config+0x118>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <SystemClock_Config+0x118>)
 8005908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <SystemClock_Config+0x118>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800591a:	2301      	movs	r3, #1
 800591c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800591e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005922:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005924:	2302      	movs	r3, #2
 8005926:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800592c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800592e:	2308      	movs	r3, #8
 8005930:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005932:	23b4      	movs	r3, #180	; 0xb4
 8005934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005938:	2302      	movs	r3, #2
 800593a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800593e:	2308      	movs	r3, #8
 8005940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005944:	2302      	movs	r3, #2
 8005946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800594a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800594e:	4618      	mov	r0, r3
 8005950:	f006 f932 	bl	800bbb8 <HAL_RCC_OscConfig>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800595a:	f000 fe7f 	bl	800665c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800595e:	f005 fcad 	bl	800b2bc <HAL_PWREx_EnableOverDrive>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005968:	f000 fe78 	bl	800665c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800596c:	230f      	movs	r3, #15
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005970:	2302      	movs	r3, #2
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005974:	2300      	movs	r3, #0
 8005976:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800597c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800597e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005982:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005988:	2105      	movs	r1, #5
 800598a:	4618      	mov	r0, r3
 800598c:	f005 fce6 	bl	800b35c <HAL_RCC_ClockConfig>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005996:	f000 fe61 	bl	800665c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800599a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800599e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80059a0:	2300      	movs	r3, #0
 80059a2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80059a4:	2300      	movs	r3, #0
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 fec5 	bl	800b73c <HAL_RCCEx_PeriphCLKConfig>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80059b8:	f000 fe50 	bl	800665c <Error_Handler>
  }
}
 80059bc:	bf00      	nop
 80059be:	3790      	adds	r7, #144	; 0x90
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40007000 	.word	0x40007000

080059cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80059d2:	463b      	mov	r3, r7
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80059de:	4b7c      	ldr	r3, [pc, #496]	; (8005bd0 <MX_ADC2_Init+0x204>)
 80059e0:	4a7c      	ldr	r2, [pc, #496]	; (8005bd4 <MX_ADC2_Init+0x208>)
 80059e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80059e4:	4b7a      	ldr	r3, [pc, #488]	; (8005bd0 <MX_ADC2_Init+0x204>)
 80059e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <MX_ADC2_Init+0x204>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80059f2:	4b77      	ldr	r3, [pc, #476]	; (8005bd0 <MX_ADC2_Init+0x204>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80059f8:	4b75      	ldr	r3, [pc, #468]	; (8005bd0 <MX_ADC2_Init+0x204>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80059fe:	4b74      	ldr	r3, [pc, #464]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a06:	4b72      	ldr	r3, [pc, #456]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a0c:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a0e:	4a72      	ldr	r2, [pc, #456]	; (8005bd8 <MX_ADC2_Init+0x20c>)
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a12:	4b6f      	ldr	r3, [pc, #444]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005a18:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a1a:	220e      	movs	r2, #14
 8005a1c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005a1e:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a26:	4b6a      	ldr	r3, [pc, #424]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005a2c:	4868      	ldr	r0, [pc, #416]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a2e:	f003 fa2d 	bl	8008e8c <HAL_ADC_Init>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005a38:	f000 fe10 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005a3c:	230a      	movs	r3, #10
 8005a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005a44:	2306      	movs	r3, #6
 8005a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4860      	ldr	r0, [pc, #384]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a4e:	f003 fb71 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005a58:	f000 fe00 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005a5c:	230b      	movs	r3, #11
 8005a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005a60:	2302      	movs	r3, #2
 8005a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a64:	463b      	mov	r3, r7
 8005a66:	4619      	mov	r1, r3
 8005a68:	4859      	ldr	r0, [pc, #356]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a6a:	f003 fb63 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005a74:	f000 fdf2 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a78:	230c      	movs	r3, #12
 8005a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a80:	463b      	mov	r3, r7
 8005a82:	4619      	mov	r1, r3
 8005a84:	4852      	ldr	r0, [pc, #328]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005a86:	f003 fb55 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005a90:	f000 fde4 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a94:	230d      	movs	r3, #13
 8005a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005a98:	2304      	movs	r3, #4
 8005a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	484b      	ldr	r0, [pc, #300]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005aa2:	f003 fb47 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005aac:	f000 fdd6 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005ab4:	2305      	movs	r3, #5
 8005ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ab8:	463b      	mov	r3, r7
 8005aba:	4619      	mov	r1, r3
 8005abc:	4844      	ldr	r0, [pc, #272]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005abe:	f003 fb39 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ac8:	f000 fdc8 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005acc:	2301      	movs	r3, #1
 8005ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ad0:	2306      	movs	r3, #6
 8005ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	483d      	ldr	r0, [pc, #244]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005ada:	f003 fb2b 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ae4:	f000 fdba 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005aec:	2307      	movs	r3, #7
 8005aee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005af0:	463b      	mov	r3, r7
 8005af2:	4619      	mov	r1, r3
 8005af4:	4836      	ldr	r0, [pc, #216]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005af6:	f003 fb1d 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005b00:	f000 fdac 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005b04:	2303      	movs	r3, #3
 8005b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005b08:	2308      	movs	r3, #8
 8005b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	4619      	mov	r1, r3
 8005b10:	482f      	ldr	r0, [pc, #188]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b12:	f003 fb0f 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005b1c:	f000 fd9e 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005b20:	2304      	movs	r3, #4
 8005b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005b24:	2309      	movs	r3, #9
 8005b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4828      	ldr	r0, [pc, #160]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b2e:	f003 fb01 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005b38:	f000 fd90 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005b3c:	2305      	movs	r3, #5
 8005b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005b40:	230a      	movs	r3, #10
 8005b42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b44:	463b      	mov	r3, r7
 8005b46:	4619      	mov	r1, r3
 8005b48:	4821      	ldr	r0, [pc, #132]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b4a:	f003 faf3 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005b54:	f000 fd82 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005b58:	2306      	movs	r3, #6
 8005b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005b5c:	230b      	movs	r3, #11
 8005b5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b60:	463b      	mov	r3, r7
 8005b62:	4619      	mov	r1, r3
 8005b64:	481a      	ldr	r0, [pc, #104]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b66:	f003 fae5 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005b70:	f000 fd74 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005b74:	2307      	movs	r3, #7
 8005b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005b78:	230c      	movs	r3, #12
 8005b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4813      	ldr	r0, [pc, #76]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b82:	f003 fad7 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005b8c:	f000 fd66 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005b90:	2308      	movs	r3, #8
 8005b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005b94:	230d      	movs	r3, #13
 8005b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b98:	463b      	mov	r3, r7
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	480c      	ldr	r0, [pc, #48]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005b9e:	f003 fac9 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005ba8:	f000 fd58 	bl	800665c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005bac:	2309      	movs	r3, #9
 8005bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005bb0:	230e      	movs	r3, #14
 8005bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <MX_ADC2_Init+0x204>)
 8005bba:	f003 fabb 	bl	8009134 <HAL_ADC_ConfigChannel>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005bc4:	f000 fd4a 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2003e920 	.word	0x2003e920
 8005bd4:	40012100 	.word	0x40012100
 8005bd8:	0f000001 	.word	0x0f000001

08005bdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <MX_I2C1_Init+0x54>)
 8005be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005be8:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <MX_I2C1_Init+0x58>)
 8005bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005c14:	2280      	movs	r2, #128	; 0x80
 8005c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c18:	4804      	ldr	r0, [pc, #16]	; (8005c2c <MX_I2C1_Init+0x50>)
 8005c1a:	f004 fbc5 	bl	800a3a8 <HAL_I2C_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c24:	f000 fd1a 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c28:	bf00      	nop
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	2003e968 	.word	0x2003e968
 8005c30:	40005400 	.word	0x40005400
 8005c34:	000186a0 	.word	0x000186a0

08005c38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <MX_I2C2_Init+0x54>)
 8005c40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c44:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <MX_I2C2_Init+0x58>)
 8005c46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c74:	4804      	ldr	r0, [pc, #16]	; (8005c88 <MX_I2C2_Init+0x50>)
 8005c76:	f004 fb97 	bl	800a3a8 <HAL_I2C_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c80:	f000 fcec 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2003e9fc 	.word	0x2003e9fc
 8005c8c:	40005800 	.word	0x40005800
 8005c90:	000186a0 	.word	0x000186a0

08005c94 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <MX_SDIO_SD_Init+0x3c>)
 8005c9c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005ca4:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <MX_SDIO_SD_Init+0x38>)
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	2003ebfc 	.word	0x2003ebfc
 8005cd0:	40012c00 	.word	0x40012c00

08005cd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005cd8:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <MX_SPI2_Init+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ce4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d08:	2228      	movs	r2, #40	; 0x28
 8005d0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d20:	220a      	movs	r2, #10
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005d24:	4804      	ldr	r0, [pc, #16]	; (8005d38 <MX_SPI2_Init+0x64>)
 8005d26:	f007 fc71 	bl	800d60c <HAL_SPI_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005d30:	f000 fc94 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	2003e848 	.word	0x2003e848
 8005d3c:	40003800 	.word	0x40003800

08005d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b09a      	sub	sp, #104	; 0x68
 8005d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d4a:	2224      	movs	r2, #36	; 0x24
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f00e fdf9 	bl	8014946 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d5e:	f107 0320 	add.w	r3, r7, #32
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	615a      	str	r2, [r3, #20]
 8005d70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d72:	463b      	mov	r3, r7
 8005d74:	2220      	movs	r2, #32
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00e fde4 	bl	8014946 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d7e:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005d80:	4a42      	ldr	r2, [pc, #264]	; (8005e8c <MX_TIM1_Init+0x14c>)
 8005d82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d8a:	4b3f      	ldr	r3, [pc, #252]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005d90:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d98:	4b3b      	ldr	r3, [pc, #236]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d9e:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005daa:	4837      	ldr	r0, [pc, #220]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005dac:	f008 f9d1 	bl	800e152 <HAL_TIM_PWM_Init>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005db6:	f000 fc51 	bl	800665c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005dde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005de2:	4619      	mov	r1, r3
 8005de4:	4828      	ldr	r0, [pc, #160]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005de6:	f008 fa1d 	bl	800e224 <HAL_TIM_Encoder_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005df0:	f000 fc34 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005df4:	2300      	movs	r3, #0
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e00:	4619      	mov	r1, r3
 8005e02:	4821      	ldr	r0, [pc, #132]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005e04:	f008 ff44 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005e0e:	f000 fc25 	bl	800665c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e12:	2360      	movs	r3, #96	; 0x60
 8005e14:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e2e:	f107 0320 	add.w	r3, r7, #32
 8005e32:	2208      	movs	r2, #8
 8005e34:	4619      	mov	r1, r3
 8005e36:	4814      	ldr	r0, [pc, #80]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005e38:	f008 fbc6 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005e42:	f000 fc0b 	bl	800665c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e64:	463b      	mov	r3, r7
 8005e66:	4619      	mov	r1, r3
 8005e68:	4807      	ldr	r0, [pc, #28]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005e6a:	f008 ff8d 	bl	800ed88 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005e74:	f000 fbf2 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e78:	4803      	ldr	r0, [pc, #12]	; (8005e88 <MX_TIM1_Init+0x148>)
 8005e7a:	f000 ffdf 	bl	8006e3c <HAL_TIM_MspPostInit>

}
 8005e7e:	bf00      	nop
 8005e80:	3768      	adds	r7, #104	; 0x68
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2003ebbc 	.word	0x2003ebbc
 8005e8c:	40010000 	.word	0x40010000

08005e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e96:	f107 0320 	add.w	r3, r7, #32
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	615a      	str	r2, [r3, #20]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <MX_TIM3_Init+0xc4>)
 8005eb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005ec4:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ecc:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ed8:	481d      	ldr	r0, [pc, #116]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005eda:	f008 f93a 	bl	800e152 <HAL_TIM_PWM_Init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005ee4:	f000 fbba 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ef0:	f107 0320 	add.w	r3, r7, #32
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4816      	ldr	r0, [pc, #88]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005ef8:	f008 feca 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005f02:	f000 fbab 	bl	800665c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f06:	2360      	movs	r3, #96	; 0x60
 8005f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	480c      	ldr	r0, [pc, #48]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005f1e:	f008 fb53 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005f28:	f000 fb98 	bl	800665c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	2204      	movs	r2, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005f34:	f008 fb48 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005f3e:	f000 fb8d 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005f42:	4803      	ldr	r0, [pc, #12]	; (8005f50 <MX_TIM3_Init+0xc0>)
 8005f44:	f000 ff7a 	bl	8006e3c <HAL_TIM_MspPostInit>

}
 8005f48:	bf00      	nop
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2003ea54 	.word	0x2003ea54
 8005f54:	40000400 	.word	0x40000400

08005f58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f5e:	f107 0320 	add.w	r3, r7, #32
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	609a      	str	r2, [r3, #8]
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	611a      	str	r2, [r3, #16]
 8005f76:	615a      	str	r2, [r3, #20]
 8005f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005f7a:	4b27      	ldr	r3, [pc, #156]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <MX_TIM4_Init+0xc4>)
 8005f7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005f8c:	4b22      	ldr	r3, [pc, #136]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f8e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005f92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f94:	4b20      	ldr	r3, [pc, #128]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f9a:	4b1f      	ldr	r3, [pc, #124]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005fa0:	481d      	ldr	r0, [pc, #116]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005fa2:	f008 f8d6 	bl	800e152 <HAL_TIM_PWM_Init>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005fac:	f000 fb56 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005fb8:	f107 0320 	add.w	r3, r7, #32
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4816      	ldr	r0, [pc, #88]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005fc0:	f008 fe66 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005fca:	f000 fb47 	bl	800665c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fce:	2360      	movs	r3, #96	; 0x60
 8005fd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	480c      	ldr	r0, [pc, #48]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005fe6:	f008 faef 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005ff0:	f000 fb34 	bl	800665c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4807      	ldr	r0, [pc, #28]	; (8006018 <MX_TIM4_Init+0xc0>)
 8005ffc:	f008 fae4 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006006:	f000 fb29 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800600a:	4803      	ldr	r0, [pc, #12]	; (8006018 <MX_TIM4_Init+0xc0>)
 800600c:	f000 ff16 	bl	8006e3c <HAL_TIM_MspPostInit>

}
 8006010:	bf00      	nop
 8006012:	3728      	adds	r7, #40	; 0x28
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2003e8e0 	.word	0x2003e8e0
 800601c:	40000800 	.word	0x40000800

08006020 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006026:	463b      	mov	r3, r7
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <MX_TIM6_Init+0x64>)
 8006030:	4a15      	ldr	r2, [pc, #84]	; (8006088 <MX_TIM6_Init+0x68>)
 8006032:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <MX_TIM6_Init+0x64>)
 8006036:	2259      	movs	r2, #89	; 0x59
 8006038:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <MX_TIM6_Init+0x64>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <MX_TIM6_Init+0x64>)
 8006042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006046:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006048:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <MX_TIM6_Init+0x64>)
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800604e:	480d      	ldr	r0, [pc, #52]	; (8006084 <MX_TIM6_Init+0x64>)
 8006050:	f008 f830 	bl	800e0b4 <HAL_TIM_Base_Init>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800605a:	f000 faff 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800605e:	2300      	movs	r3, #0
 8006060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006062:	2300      	movs	r3, #0
 8006064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006066:	463b      	mov	r3, r7
 8006068:	4619      	mov	r1, r3
 800606a:	4806      	ldr	r0, [pc, #24]	; (8006084 <MX_TIM6_Init+0x64>)
 800606c:	f008 fe10 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006076:	f000 faf1 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	2003eb7c 	.word	0x2003eb7c
 8006088:	40001000 	.word	0x40001000

0800608c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006092:	463b      	mov	r3, r7
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <MX_TIM7_Init+0x60>)
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <MX_TIM7_Init+0x64>)
 800609e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <MX_TIM7_Init+0x60>)
 80060a2:	22b3      	movs	r2, #179	; 0xb3
 80060a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <MX_TIM7_Init+0x60>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <MX_TIM7_Init+0x60>)
 80060ae:	2231      	movs	r2, #49	; 0x31
 80060b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <MX_TIM7_Init+0x60>)
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <MX_TIM7_Init+0x60>)
 80060ba:	f007 fffb 	bl	800e0b4 <HAL_TIM_Base_Init>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80060c4:	f000 faca 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c8:	2300      	movs	r3, #0
 80060ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80060d0:	463b      	mov	r3, r7
 80060d2:	4619      	mov	r1, r3
 80060d4:	4805      	ldr	r0, [pc, #20]	; (80060ec <MX_TIM7_Init+0x60>)
 80060d6:	f008 fddb 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80060e0:	f000 fabc 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	2003ed20 	.word	0x2003ed20
 80060f0:	40001400 	.word	0x40001400

080060f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08c      	sub	sp, #48	; 0x30
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f00e fc1f 	bl	8014946 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006110:	4b22      	ldr	r3, [pc, #136]	; (800619c <MX_TIM8_Init+0xa8>)
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <MX_TIM8_Init+0xac>)
 8006114:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006116:	4b21      	ldr	r3, [pc, #132]	; (800619c <MX_TIM8_Init+0xa8>)
 8006118:	2200      	movs	r2, #0
 800611a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800611c:	4b1f      	ldr	r3, [pc, #124]	; (800619c <MX_TIM8_Init+0xa8>)
 800611e:	2210      	movs	r2, #16
 8006120:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006122:	4b1e      	ldr	r3, [pc, #120]	; (800619c <MX_TIM8_Init+0xa8>)
 8006124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006128:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800612a:	4b1c      	ldr	r3, [pc, #112]	; (800619c <MX_TIM8_Init+0xa8>)
 800612c:	2200      	movs	r2, #0
 800612e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <MX_TIM8_Init+0xa8>)
 8006132:	2200      	movs	r2, #0
 8006134:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006136:	4b19      	ldr	r3, [pc, #100]	; (800619c <MX_TIM8_Init+0xa8>)
 8006138:	2200      	movs	r2, #0
 800613a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800613c:	2303      	movs	r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006144:	2301      	movs	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006150:	2300      	movs	r3, #0
 8006152:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006154:	2301      	movs	r3, #1
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006158:	2300      	movs	r3, #0
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	4619      	mov	r1, r3
 8006166:	480d      	ldr	r0, [pc, #52]	; (800619c <MX_TIM8_Init+0xa8>)
 8006168:	f008 f85c 	bl	800e224 <HAL_TIM_Encoder_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006172:	f000 fa73 	bl	800665c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4806      	ldr	r0, [pc, #24]	; (800619c <MX_TIM8_Init+0xa8>)
 8006184:	f008 fd84 	bl	800ec90 <HAL_TIMEx_MasterConfigSynchronization>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800618e:	f000 fa65 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006192:	bf00      	nop
 8006194:	3730      	adds	r7, #48	; 0x30
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	2003e8a0 	.word	0x2003e8a0
 80061a0:	40010400 	.word	0x40010400

080061a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]
 80061b8:	615a      	str	r2, [r3, #20]
 80061ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80061bc:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <MX_TIM10_Init+0x94>)
 80061be:	4a1f      	ldr	r2, [pc, #124]	; (800623c <MX_TIM10_Init+0x98>)
 80061c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <MX_TIM10_Init+0x94>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061c8:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <MX_TIM10_Init+0x94>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <MX_TIM10_Init+0x94>)
 80061d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <MX_TIM10_Init+0x94>)
 80061d8:	2200      	movs	r2, #0
 80061da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <MX_TIM10_Init+0x94>)
 80061de:	2200      	movs	r2, #0
 80061e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80061e2:	4815      	ldr	r0, [pc, #84]	; (8006238 <MX_TIM10_Init+0x94>)
 80061e4:	f007 ff66 	bl	800e0b4 <HAL_TIM_Base_Init>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80061ee:	f000 fa35 	bl	800665c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80061f2:	4811      	ldr	r0, [pc, #68]	; (8006238 <MX_TIM10_Init+0x94>)
 80061f4:	f007 ffad 	bl	800e152 <HAL_TIM_PWM_Init>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80061fe:	f000 fa2d 	bl	800665c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006202:	2360      	movs	r3, #96	; 0x60
 8006204:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	2200      	movs	r2, #0
 8006216:	4619      	mov	r1, r3
 8006218:	4807      	ldr	r0, [pc, #28]	; (8006238 <MX_TIM10_Init+0x94>)
 800621a:	f008 f9d5 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006224:	f000 fa1a 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <MX_TIM10_Init+0x94>)
 800622a:	f000 fe07 	bl	8006e3c <HAL_TIM_MspPostInit>

}
 800622e:	bf00      	nop
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	2003e9bc 	.word	0x2003e9bc
 800623c:	40014400 	.word	0x40014400

08006240 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	611a      	str	r2, [r3, #16]
 8006254:	615a      	str	r2, [r3, #20]
 8006256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <MX_TIM11_Init+0x94>)
 800625a:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <MX_TIM11_Init+0x98>)
 800625c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800625e:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <MX_TIM11_Init+0x94>)
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <MX_TIM11_Init+0x94>)
 8006266:	2200      	movs	r2, #0
 8006268:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <MX_TIM11_Init+0x94>)
 800626c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006270:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006272:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <MX_TIM11_Init+0x94>)
 8006274:	2200      	movs	r2, #0
 8006276:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <MX_TIM11_Init+0x94>)
 800627a:	2200      	movs	r2, #0
 800627c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800627e:	4815      	ldr	r0, [pc, #84]	; (80062d4 <MX_TIM11_Init+0x94>)
 8006280:	f007 ff18 	bl	800e0b4 <HAL_TIM_Base_Init>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800628a:	f000 f9e7 	bl	800665c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800628e:	4811      	ldr	r0, [pc, #68]	; (80062d4 <MX_TIM11_Init+0x94>)
 8006290:	f007 ff5f 	bl	800e152 <HAL_TIM_PWM_Init>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800629a:	f000 f9df 	bl	800665c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800629e:	2360      	movs	r3, #96	; 0x60
 80062a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	2200      	movs	r2, #0
 80062b2:	4619      	mov	r1, r3
 80062b4:	4807      	ldr	r0, [pc, #28]	; (80062d4 <MX_TIM11_Init+0x94>)
 80062b6:	f008 f987 	bl	800e5c8 <HAL_TIM_PWM_ConfigChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80062c0:	f000 f9cc 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80062c4:	4803      	ldr	r0, [pc, #12]	; (80062d4 <MX_TIM11_Init+0x94>)
 80062c6:	f000 fdb9 	bl	8006e3c <HAL_TIM_MspPostInit>

}
 80062ca:	bf00      	nop
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2003eadc 	.word	0x2003eadc
 80062d8:	40014800 	.word	0x40014800

080062dc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80062e0:	4b0e      	ldr	r3, [pc, #56]	; (800631c <MX_TIM13_Init+0x40>)
 80062e2:	4a0f      	ldr	r2, [pc, #60]	; (8006320 <MX_TIM13_Init+0x44>)
 80062e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <MX_TIM13_Init+0x40>)
 80062e8:	2259      	movs	r2, #89	; 0x59
 80062ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <MX_TIM13_Init+0x40>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <MX_TIM13_Init+0x40>)
 80062f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80062f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062fa:	4b08      	ldr	r3, [pc, #32]	; (800631c <MX_TIM13_Init+0x40>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <MX_TIM13_Init+0x40>)
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006306:	4805      	ldr	r0, [pc, #20]	; (800631c <MX_TIM13_Init+0x40>)
 8006308:	f007 fed4 	bl	800e0b4 <HAL_TIM_Base_Init>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006312:	f000 f9a3 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006316:	bf00      	nop
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2003ea9c 	.word	0x2003ea9c
 8006320:	40001c00 	.word	0x40001c00

08006324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <MX_USART2_UART_Init+0x50>)
 800632c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 8006330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 800633e:	2200      	movs	r2, #0
 8006340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 8006344:	2200      	movs	r2, #0
 8006346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 800634a:	220c      	movs	r2, #12
 800634c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800634e:	4b08      	ldr	r3, [pc, #32]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 8006350:	2200      	movs	r2, #0
 8006352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 8006356:	2200      	movs	r2, #0
 8006358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800635a:	4805      	ldr	r0, [pc, #20]	; (8006370 <MX_USART2_UART_Init+0x4c>)
 800635c:	f008 fd7a 	bl	800ee54 <HAL_UART_Init>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006366:	f000 f979 	bl	800665c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	2003ec80 	.word	0x2003ec80
 8006374:	40004400 	.word	0x40004400

08006378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <MX_DMA_Init+0x5c>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <MX_DMA_Init+0x5c>)
 8006388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800638c:	6313      	str	r3, [r2, #48]	; 0x30
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <MX_DMA_Init+0x5c>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2100      	movs	r1, #0
 800639e:	203a      	movs	r0, #58	; 0x3a
 80063a0:	f003 fa53 	bl	800984a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80063a4:	203a      	movs	r0, #58	; 0x3a
 80063a6:	f003 fa6c 	bl	8009882 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	203b      	movs	r0, #59	; 0x3b
 80063b0:	f003 fa4b 	bl	800984a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80063b4:	203b      	movs	r0, #59	; 0x3b
 80063b6:	f003 fa64 	bl	8009882 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2100      	movs	r1, #0
 80063be:	2045      	movs	r0, #69	; 0x45
 80063c0:	f003 fa43 	bl	800984a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80063c4:	2045      	movs	r0, #69	; 0x45
 80063c6:	f003 fa5c 	bl	8009882 <HAL_NVIC_EnableIRQ>

}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800

080063d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08c      	sub	sp, #48	; 0x30
 80063dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063de:	f107 031c 	add.w	r3, r7, #28
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	609a      	str	r2, [r3, #8]
 80063ea:	60da      	str	r2, [r3, #12]
 80063ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	4b94      	ldr	r3, [pc, #592]	; (8006644 <MX_GPIO_Init+0x26c>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4a93      	ldr	r2, [pc, #588]	; (8006644 <MX_GPIO_Init+0x26c>)
 80063f8:	f043 0310 	orr.w	r3, r3, #16
 80063fc:	6313      	str	r3, [r2, #48]	; 0x30
 80063fe:	4b91      	ldr	r3, [pc, #580]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	4b8d      	ldr	r3, [pc, #564]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	4a8c      	ldr	r2, [pc, #560]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006418:	6313      	str	r3, [r2, #48]	; 0x30
 800641a:	4b8a      	ldr	r3, [pc, #552]	; (8006644 <MX_GPIO_Init+0x26c>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	4b86      	ldr	r3, [pc, #536]	; (8006644 <MX_GPIO_Init+0x26c>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	4a85      	ldr	r2, [pc, #532]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006430:	f043 0304 	orr.w	r3, r3, #4
 8006434:	6313      	str	r3, [r2, #48]	; 0x30
 8006436:	4b83      	ldr	r3, [pc, #524]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b7f      	ldr	r3, [pc, #508]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	4a7e      	ldr	r2, [pc, #504]	; (8006644 <MX_GPIO_Init+0x26c>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6313      	str	r3, [r2, #48]	; 0x30
 8006452:	4b7c      	ldr	r3, [pc, #496]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	4b78      	ldr	r3, [pc, #480]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a77      	ldr	r2, [pc, #476]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006468:	f043 0302 	orr.w	r3, r3, #2
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b75      	ldr	r3, [pc, #468]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	4b71      	ldr	r3, [pc, #452]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	4a70      	ldr	r2, [pc, #448]	; (8006644 <MX_GPIO_Init+0x26c>)
 8006484:	f043 0308 	orr.w	r3, r3, #8
 8006488:	6313      	str	r3, [r2, #48]	; 0x30
 800648a:	4b6e      	ldr	r3, [pc, #440]	; (8006644 <MX_GPIO_Init+0x26c>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006496:	2200      	movs	r2, #0
 8006498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800649c:	486a      	ldr	r0, [pc, #424]	; (8006648 <MX_GPIO_Init+0x270>)
 800649e:	f003 ff69 	bl	800a374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80064a2:	2200      	movs	r2, #0
 80064a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064a8:	4868      	ldr	r0, [pc, #416]	; (800664c <MX_GPIO_Init+0x274>)
 80064aa:	f003 ff63 	bl	800a374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80064ae:	2200      	movs	r2, #0
 80064b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064b4:	4866      	ldr	r0, [pc, #408]	; (8006650 <MX_GPIO_Init+0x278>)
 80064b6:	f003 ff5d 	bl	800a374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80064ba:	2200      	movs	r2, #0
 80064bc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80064c0:	4864      	ldr	r0, [pc, #400]	; (8006654 <MX_GPIO_Init+0x27c>)
 80064c2:	f003 ff57 	bl	800a374 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064c6:	2304      	movs	r3, #4
 80064c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064d2:	f107 031c 	add.w	r3, r7, #28
 80064d6:	4619      	mov	r1, r3
 80064d8:	485b      	ldr	r0, [pc, #364]	; (8006648 <MX_GPIO_Init+0x270>)
 80064da:	f003 fd89 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80064de:	230f      	movs	r3, #15
 80064e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064e2:	2303      	movs	r3, #3
 80064e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ea:	f107 031c 	add.w	r3, r7, #28
 80064ee:	4619      	mov	r1, r3
 80064f0:	4859      	ldr	r0, [pc, #356]	; (8006658 <MX_GPIO_Init+0x280>)
 80064f2:	f003 fd7d 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80064f6:	23e1      	movs	r3, #225	; 0xe1
 80064f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064fa:	2303      	movs	r3, #3
 80064fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006502:	f107 031c 	add.w	r3, r7, #28
 8006506:	4619      	mov	r1, r3
 8006508:	4852      	ldr	r0, [pc, #328]	; (8006654 <MX_GPIO_Init+0x27c>)
 800650a:	f003 fd71 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800650e:	2303      	movs	r3, #3
 8006510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006512:	2303      	movs	r3, #3
 8006514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651a:	f107 031c 	add.w	r3, r7, #28
 800651e:	4619      	mov	r1, r3
 8006520:	484a      	ldr	r0, [pc, #296]	; (800664c <MX_GPIO_Init+0x274>)
 8006522:	f003 fd65 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006526:	2304      	movs	r3, #4
 8006528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800652a:	2300      	movs	r3, #0
 800652c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800652e:	2301      	movs	r3, #1
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006532:	f107 031c 	add.w	r3, r7, #28
 8006536:	4619      	mov	r1, r3
 8006538:	4844      	ldr	r0, [pc, #272]	; (800664c <MX_GPIO_Init+0x274>)
 800653a:	f003 fd59 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800653e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006544:	2300      	movs	r3, #0
 8006546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006548:	2301      	movs	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800654c:	f107 031c 	add.w	r3, r7, #28
 8006550:	4619      	mov	r1, r3
 8006552:	483d      	ldr	r0, [pc, #244]	; (8006648 <MX_GPIO_Init+0x270>)
 8006554:	f003 fd4c 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800655c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800655e:	2301      	movs	r3, #1
 8006560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006562:	2300      	movs	r3, #0
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006566:	2300      	movs	r3, #0
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800656a:	f107 031c 	add.w	r3, r7, #28
 800656e:	4619      	mov	r1, r3
 8006570:	4835      	ldr	r0, [pc, #212]	; (8006648 <MX_GPIO_Init+0x270>)
 8006572:	f003 fd3d 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800657a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800657c:	2301      	movs	r3, #1
 800657e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006580:	2300      	movs	r3, #0
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006584:	2300      	movs	r3, #0
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006588:	f107 031c 	add.w	r3, r7, #28
 800658c:	4619      	mov	r1, r3
 800658e:	482f      	ldr	r0, [pc, #188]	; (800664c <MX_GPIO_Init+0x274>)
 8006590:	f003 fd2e 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800659a:	2300      	movs	r3, #0
 800659c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	4619      	mov	r1, r3
 80065a8:	4829      	ldr	r0, [pc, #164]	; (8006650 <MX_GPIO_Init+0x278>)
 80065aa:	f003 fd21 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065b4:	2301      	movs	r3, #1
 80065b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065bc:	2300      	movs	r3, #0
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065c0:	f107 031c 	add.w	r3, r7, #28
 80065c4:	4619      	mov	r1, r3
 80065c6:	4822      	ldr	r0, [pc, #136]	; (8006650 <MX_GPIO_Init+0x278>)
 80065c8:	f003 fd12 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80065cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065d2:	2301      	movs	r3, #1
 80065d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065d6:	2301      	movs	r3, #1
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065da:	2300      	movs	r3, #0
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065de:	f107 031c 	add.w	r3, r7, #28
 80065e2:	4619      	mov	r1, r3
 80065e4:	481a      	ldr	r0, [pc, #104]	; (8006650 <MX_GPIO_Init+0x278>)
 80065e6:	f003 fd03 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80065ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80065ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065f0:	2301      	movs	r3, #1
 80065f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065fc:	f107 031c 	add.w	r3, r7, #28
 8006600:	4619      	mov	r1, r3
 8006602:	4814      	ldr	r0, [pc, #80]	; (8006654 <MX_GPIO_Init+0x27c>)
 8006604:	f003 fcf4 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800660e:	2300      	movs	r3, #0
 8006610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006612:	2300      	movs	r3, #0
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006616:	f107 031c 	add.w	r3, r7, #28
 800661a:	4619      	mov	r1, r3
 800661c:	480d      	ldr	r0, [pc, #52]	; (8006654 <MX_GPIO_Init+0x27c>)
 800661e:	f003 fce7 	bl	8009ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006622:	239b      	movs	r3, #155	; 0x9b
 8006624:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800662a:	2301      	movs	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	4619      	mov	r1, r3
 8006634:	4806      	ldr	r0, [pc, #24]	; (8006650 <MX_GPIO_Init+0x278>)
 8006636:	f003 fcdb 	bl	8009ff0 <HAL_GPIO_Init>

}
 800663a:	bf00      	nop
 800663c:	3730      	adds	r7, #48	; 0x30
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40023800 	.word	0x40023800
 8006648:	40021000 	.word	0x40021000
 800664c:	40020400 	.word	0x40020400
 8006650:	40020c00 	.word	0x40020c00
 8006654:	40020000 	.word	0x40020000
 8006658:	40020800 	.word	0x40020800

0800665c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006662:	e7fe      	b.n	8006662 <Error_Handler+0x6>

08006664 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006668:	bf00      	nop
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <HAL_MspInit+0x4c>)
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <HAL_MspInit+0x4c>)
 8006684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006688:	6453      	str	r3, [r2, #68]	; 0x44
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <HAL_MspInit+0x4c>)
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <HAL_MspInit+0x4c>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <HAL_MspInit+0x4c>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6413      	str	r3, [r2, #64]	; 0x40
 80066a6:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <HAL_MspInit+0x4c>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800

080066c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08c      	sub	sp, #48	; 0x30
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066cc:	f107 031c 	add.w	r3, r7, #28
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_ADC_MspInit+0x148>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f040 808e 	bne.w	8006804 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80066e8:	2300      	movs	r3, #0
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	4b48      	ldr	r3, [pc, #288]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	4a47      	ldr	r2, [pc, #284]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 80066f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066f6:	6453      	str	r3, [r2, #68]	; 0x44
 80066f8:	4b45      	ldr	r3, [pc, #276]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 80066fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	4b41      	ldr	r3, [pc, #260]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	4a40      	ldr	r2, [pc, #256]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 800670e:	f043 0304 	orr.w	r3, r3, #4
 8006712:	6313      	str	r3, [r2, #48]	; 0x30
 8006714:	4b3e      	ldr	r3, [pc, #248]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	4b3a      	ldr	r3, [pc, #232]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	4a39      	ldr	r2, [pc, #228]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	6313      	str	r3, [r2, #48]	; 0x30
 8006730:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	4a32      	ldr	r2, [pc, #200]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	6313      	str	r3, [r2, #48]	; 0x30
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_ADC_MspInit+0x14c>)
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006758:	230f      	movs	r3, #15
 800675a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800675c:	2303      	movs	r3, #3
 800675e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	4619      	mov	r1, r3
 800676a:	482a      	ldr	r0, [pc, #168]	; (8006814 <HAL_ADC_MspInit+0x150>)
 800676c:	f003 fc40 	bl	8009ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006770:	23ff      	movs	r3, #255	; 0xff
 8006772:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006774:	2303      	movs	r3, #3
 8006776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006778:	2300      	movs	r3, #0
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800677c:	f107 031c 	add.w	r3, r7, #28
 8006780:	4619      	mov	r1, r3
 8006782:	4825      	ldr	r0, [pc, #148]	; (8006818 <HAL_ADC_MspInit+0x154>)
 8006784:	f003 fc34 	bl	8009ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006788:	2303      	movs	r3, #3
 800678a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800678c:	2303      	movs	r3, #3
 800678e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006794:	f107 031c 	add.w	r3, r7, #28
 8006798:	4619      	mov	r1, r3
 800679a:	4820      	ldr	r0, [pc, #128]	; (800681c <HAL_ADC_MspInit+0x158>)
 800679c:	f003 fc28 	bl	8009ff0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80067a0:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067a2:	4a20      	ldr	r2, [pc, #128]	; (8006824 <HAL_ADC_MspInit+0x160>)
 80067a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067ae:	4b1c      	ldr	r3, [pc, #112]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80067b4:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80067ba:	4b19      	ldr	r3, [pc, #100]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067e0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067e2:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80067e8:	480d      	ldr	r0, [pc, #52]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067ea:	f003 f865 	bl	80098b8 <HAL_DMA_Init>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80067f4:	f7ff ff32 	bl	800665c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a09      	ldr	r2, [pc, #36]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
 80067fe:	4a08      	ldr	r2, [pc, #32]	; (8006820 <HAL_ADC_MspInit+0x15c>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006804:	bf00      	nop
 8006806:	3730      	adds	r7, #48	; 0x30
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40012100 	.word	0x40012100
 8006810:	40023800 	.word	0x40023800
 8006814:	40020800 	.word	0x40020800
 8006818:	40020000 	.word	0x40020000
 800681c:	40020400 	.word	0x40020400
 8006820:	2003ecc0 	.word	0x2003ecc0
 8006824:	40026440 	.word	0x40026440

08006828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08c      	sub	sp, #48	; 0x30
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	f107 031c 	add.w	r3, r7, #28
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a32      	ldr	r2, [pc, #200]	; (8006910 <HAL_I2C_MspInit+0xe8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d12c      	bne.n	80068a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	4b31      	ldr	r3, [pc, #196]	; (8006914 <HAL_I2C_MspInit+0xec>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	4a30      	ldr	r2, [pc, #192]	; (8006914 <HAL_I2C_MspInit+0xec>)
 8006854:	f043 0302 	orr.w	r3, r3, #2
 8006858:	6313      	str	r3, [r2, #48]	; 0x30
 800685a:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <HAL_I2C_MspInit+0xec>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006866:	23c0      	movs	r3, #192	; 0xc0
 8006868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800686a:	2312      	movs	r3, #18
 800686c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800686e:	2301      	movs	r3, #1
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006876:	2304      	movs	r3, #4
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800687a:	f107 031c 	add.w	r3, r7, #28
 800687e:	4619      	mov	r1, r3
 8006880:	4825      	ldr	r0, [pc, #148]	; (8006918 <HAL_I2C_MspInit+0xf0>)
 8006882:	f003 fbb5 	bl	8009ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <HAL_I2C_MspInit+0xec>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	4a21      	ldr	r2, [pc, #132]	; (8006914 <HAL_I2C_MspInit+0xec>)
 8006890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006894:	6413      	str	r3, [r2, #64]	; 0x40
 8006896:	4b1f      	ldr	r3, [pc, #124]	; (8006914 <HAL_I2C_MspInit+0xec>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80068a2:	e031      	b.n	8006908 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1c      	ldr	r2, [pc, #112]	; (800691c <HAL_I2C_MspInit+0xf4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d12c      	bne.n	8006908 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	4b18      	ldr	r3, [pc, #96]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30
 80068be:	4b15      	ldr	r3, [pc, #84]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80068ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80068ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068d0:	2312      	movs	r3, #18
 80068d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068d4:	2301      	movs	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d8:	2303      	movs	r3, #3
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80068dc:	2304      	movs	r3, #4
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068e0:	f107 031c 	add.w	r3, r7, #28
 80068e4:	4619      	mov	r1, r3
 80068e6:	480c      	ldr	r0, [pc, #48]	; (8006918 <HAL_I2C_MspInit+0xf0>)
 80068e8:	f003 fb82 	bl	8009ff0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	4a07      	ldr	r2, [pc, #28]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068fa:	6413      	str	r3, [r2, #64]	; 0x40
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <HAL_I2C_MspInit+0xec>)
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	bf00      	nop
 800690a:	3730      	adds	r7, #48	; 0x30
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40005400 	.word	0x40005400
 8006914:	40023800 	.word	0x40023800
 8006918:	40020400 	.word	0x40020400
 800691c:	40005800 	.word	0x40005800

08006920 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a69      	ldr	r2, [pc, #420]	; (8006ae4 <HAL_SD_MspInit+0x1c4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f040 80cb 	bne.w	8006ada <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	4b67      	ldr	r3, [pc, #412]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	4a66      	ldr	r2, [pc, #408]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 800694e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006952:	6453      	str	r3, [r2, #68]	; 0x44
 8006954:	4b64      	ldr	r3, [pc, #400]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	4b60      	ldr	r3, [pc, #384]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	4a5f      	ldr	r2, [pc, #380]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	6313      	str	r3, [r2, #48]	; 0x30
 8006970:	4b5d      	ldr	r3, [pc, #372]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800697c:	2300      	movs	r3, #0
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	4b59      	ldr	r3, [pc, #356]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	4a58      	ldr	r2, [pc, #352]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	6313      	str	r3, [r2, #48]	; 0x30
 800698c:	4b56      	ldr	r3, [pc, #344]	; (8006ae8 <HAL_SD_MspInit+0x1c8>)
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006998:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800699c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699e:	2302      	movs	r3, #2
 80069a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a6:	2303      	movs	r3, #3
 80069a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80069aa:	230c      	movs	r3, #12
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	4619      	mov	r1, r3
 80069b4:	484d      	ldr	r0, [pc, #308]	; (8006aec <HAL_SD_MspInit+0x1cc>)
 80069b6:	f003 fb1b 	bl	8009ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80069ba:	2304      	movs	r3, #4
 80069bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c6:	2303      	movs	r3, #3
 80069c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80069ca:	230c      	movs	r3, #12
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	4619      	mov	r1, r3
 80069d4:	4846      	ldr	r0, [pc, #280]	; (8006af0 <HAL_SD_MspInit+0x1d0>)
 80069d6:	f003 fb0b 	bl	8009ff0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80069da:	4b46      	ldr	r3, [pc, #280]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069dc:	4a46      	ldr	r2, [pc, #280]	; (8006af8 <HAL_SD_MspInit+0x1d8>)
 80069de:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80069e0:	4b44      	ldr	r3, [pc, #272]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069e6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069ee:	4b41      	ldr	r3, [pc, #260]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069f4:	4b3f      	ldr	r3, [pc, #252]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069fa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069fc:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 80069fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a04:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006a0c:	4b39      	ldr	r3, [pc, #228]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a0e:	2220      	movs	r2, #32
 8006a10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a12:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a18:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a1a:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a20:	4b34      	ldr	r3, [pc, #208]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a22:	2203      	movs	r2, #3
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006a26:	4b33      	ldr	r3, [pc, #204]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006a36:	482f      	ldr	r0, [pc, #188]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a38:	f002 ff3e 	bl	80098b8 <HAL_DMA_Init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006a42:	f7ff fe0b 	bl	800665c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a4c:	4a29      	ldr	r2, [pc, #164]	; (8006af4 <HAL_SD_MspInit+0x1d4>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a54:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <HAL_SD_MspInit+0x1e0>)
 8006a56:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006a58:	4b28      	ldr	r3, [pc, #160]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a5e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a60:	4b26      	ldr	r3, [pc, #152]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a62:	2240      	movs	r2, #64	; 0x40
 8006a64:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a66:	4b25      	ldr	r3, [pc, #148]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a6c:	4b23      	ldr	r3, [pc, #140]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a72:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a74:	4b21      	ldr	r3, [pc, #132]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a7a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a7c:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a82:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a86:	2220      	movs	r2, #32
 8006a88:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a8a:	4b1c      	ldr	r3, [pc, #112]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a90:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a94:	2204      	movs	r2, #4
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a9e:	4b17      	ldr	r3, [pc, #92]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006aa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006aa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006aae:	4813      	ldr	r0, [pc, #76]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006ab0:	f002 ff02 	bl	80098b8 <HAL_DMA_Init>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006aba:	f7ff fdcf 	bl	800665c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <HAL_SD_MspInit+0x1dc>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	2031      	movs	r0, #49	; 0x31
 8006ad0:	f002 febb 	bl	800984a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006ad4:	2031      	movs	r0, #49	; 0x31
 8006ad6:	f002 fed4 	bl	8009882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006ada:	bf00      	nop
 8006adc:	3728      	adds	r7, #40	; 0x28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40020800 	.word	0x40020800
 8006af0:	40020c00 	.word	0x40020c00
 8006af4:	2003e7e8 	.word	0x2003e7e8
 8006af8:	40026458 	.word	0x40026458
 8006afc:	2003eb1c 	.word	0x2003eb1c
 8006b00:	400264a0 	.word	0x400264a0

08006b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 0314 	add.w	r3, r7, #20
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <HAL_SPI_MspInit+0x84>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d12c      	bne.n	8006b80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b4c:	f043 0302 	orr.w	r3, r3, #2
 8006b50:	6313      	str	r3, [r2, #48]	; 0x30
 8006b52:	4b0e      	ldr	r3, [pc, #56]	; (8006b8c <HAL_SPI_MspInit+0x88>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006b5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b64:	2302      	movs	r3, #2
 8006b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b70:	2305      	movs	r3, #5
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b74:	f107 0314 	add.w	r3, r7, #20
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4805      	ldr	r0, [pc, #20]	; (8006b90 <HAL_SPI_MspInit+0x8c>)
 8006b7c:	f003 fa38 	bl	8009ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b80:	bf00      	nop
 8006b82:	3728      	adds	r7, #40	; 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40003800 	.word	0x40003800
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40020400 	.word	0x40020400

08006b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9c:	f107 031c 	add.w	r3, r7, #28
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <HAL_TIM_PWM_MspInit+0xd4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d12d      	bne.n	8006c12 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bc6:	4b29      	ldr	r3, [pc, #164]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bdc:	f043 0310 	orr.w	r3, r3, #16
 8006be0:	6313      	str	r3, [r2, #48]	; 0x30
 8006be2:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006bee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c04:	f107 031c 	add.w	r3, r7, #28
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4819      	ldr	r0, [pc, #100]	; (8006c70 <HAL_TIM_PWM_MspInit+0xdc>)
 8006c0c:	f003 f9f0 	bl	8009ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006c10:	e026      	b.n	8006c60 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <HAL_TIM_PWM_MspInit+0xe0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10e      	bne.n	8006c3a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	693b      	ldr	r3, [r7, #16]
}
 8006c38:	e012      	b.n	8006c60 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <HAL_TIM_PWM_MspInit+0xe4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10d      	bne.n	8006c60 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c4e:	f043 0304 	orr.w	r3, r3, #4
 8006c52:	6413      	str	r3, [r2, #64]	; 0x40
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	bf00      	nop
 8006c62:	3730      	adds	r7, #48	; 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40021000 	.word	0x40021000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800

08006c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a3e      	ldr	r2, [pc, #248]	; (8006d84 <HAL_TIM_Base_MspInit+0x108>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d116      	bne.n	8006cbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	4a3c      	ldr	r2, [pc, #240]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006c98:	f043 0310 	orr.w	r3, r3, #16
 8006c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c9e:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2101      	movs	r1, #1
 8006cae:	2036      	movs	r0, #54	; 0x36
 8006cb0:	f002 fdcb 	bl	800984a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006cb4:	2036      	movs	r0, #54	; 0x36
 8006cb6:	f002 fde4 	bl	8009882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006cba:	e05e      	b.n	8006d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a32      	ldr	r2, [pc, #200]	; (8006d8c <HAL_TIM_Base_MspInit+0x110>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d116      	bne.n	8006cf4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006cd0:	f043 0320 	orr.w	r3, r3, #32
 8006cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd6:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	2037      	movs	r0, #55	; 0x37
 8006ce8:	f002 fdaf 	bl	800984a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006cec:	2037      	movs	r0, #55	; 0x37
 8006cee:	f002 fdc8 	bl	8009882 <HAL_NVIC_EnableIRQ>
}
 8006cf2:	e042      	b.n	8006d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	; (8006d90 <HAL_TIM_Base_MspInit+0x114>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	697b      	ldr	r3, [r7, #20]
}
 8006d1a:	e02e      	b.n	8006d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <HAL_TIM_Base_MspInit+0x118>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d10e      	bne.n	8006d44 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d34:	6453      	str	r3, [r2, #68]	; 0x44
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]
}
 8006d42:	e01a      	b.n	8006d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <HAL_TIM_Base_MspInit+0x11c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d115      	bne.n	8006d7a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <HAL_TIM_Base_MspInit+0x10c>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	202c      	movs	r0, #44	; 0x2c
 8006d70:	f002 fd6b 	bl	800984a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006d74:	202c      	movs	r0, #44	; 0x2c
 8006d76:	f002 fd84 	bl	8009882 <HAL_NVIC_EnableIRQ>
}
 8006d7a:	bf00      	nop
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40001000 	.word	0x40001000
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40001400 	.word	0x40001400
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800
 8006d98:	40001c00 	.word	0x40001c00

08006d9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <HAL_TIM_Encoder_MspInit+0x94>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d133      	bne.n	8006e26 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006dc8:	f043 0302 	orr.w	r3, r3, #2
 8006dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006dce:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006df6:	23c0      	movs	r3, #192	; 0xc0
 8006df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006e06:	2303      	movs	r3, #3
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e0a:	f107 0314 	add.w	r3, r7, #20
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006e12:	f003 f8ed 	bl	8009ff0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	202c      	movs	r0, #44	; 0x2c
 8006e1c:	f002 fd15 	bl	800984a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006e20:	202c      	movs	r0, #44	; 0x2c
 8006e22:	f002 fd2e 	bl	8009882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006e26:	bf00      	nop
 8006e28:	3728      	adds	r7, #40	; 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40010400 	.word	0x40010400
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40020800 	.word	0x40020800

08006e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08c      	sub	sp, #48	; 0x30
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e44:	f107 031c 	add.w	r3, r7, #28
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5c      	ldr	r2, [pc, #368]	; (8006fcc <HAL_TIM_MspPostInit+0x190>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d11f      	bne.n	8006e9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	4b5b      	ldr	r3, [pc, #364]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	4a5a      	ldr	r2, [pc, #360]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006e68:	f043 0310 	orr.w	r3, r3, #16
 8006e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e6e:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e80:	2302      	movs	r3, #2
 8006e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e90:	f107 031c 	add.w	r3, r7, #28
 8006e94:	4619      	mov	r1, r3
 8006e96:	484f      	ldr	r0, [pc, #316]	; (8006fd4 <HAL_TIM_MspPostInit+0x198>)
 8006e98:	f003 f8aa 	bl	8009ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006e9c:	e091      	b.n	8006fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a4d      	ldr	r2, [pc, #308]	; (8006fd8 <HAL_TIM_MspPostInit+0x19c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d11e      	bne.n	8006ee6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a47      	ldr	r2, [pc, #284]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006eb2:	f043 0302 	orr.w	r3, r3, #2
 8006eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb8:	4b45      	ldr	r3, [pc, #276]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ec4:	2330      	movs	r3, #48	; 0x30
 8006ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed8:	f107 031c 	add.w	r3, r7, #28
 8006edc:	4619      	mov	r1, r3
 8006ede:	483f      	ldr	r0, [pc, #252]	; (8006fdc <HAL_TIM_MspPostInit+0x1a0>)
 8006ee0:	f003 f886 	bl	8009ff0 <HAL_GPIO_Init>
}
 8006ee4:	e06d      	b.n	8006fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a3d      	ldr	r2, [pc, #244]	; (8006fe0 <HAL_TIM_MspPostInit+0x1a4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d11f      	bne.n	8006f30 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	4a35      	ldr	r2, [pc, #212]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006efa:	f043 0308 	orr.w	r3, r3, #8
 8006efe:	6313      	str	r3, [r2, #48]	; 0x30
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006f0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f12:	2302      	movs	r3, #2
 8006f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f22:	f107 031c 	add.w	r3, r7, #28
 8006f26:	4619      	mov	r1, r3
 8006f28:	482e      	ldr	r0, [pc, #184]	; (8006fe4 <HAL_TIM_MspPostInit+0x1a8>)
 8006f2a:	f003 f861 	bl	8009ff0 <HAL_GPIO_Init>
}
 8006f2e:	e048      	b.n	8006fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2c      	ldr	r2, [pc, #176]	; (8006fe8 <HAL_TIM_MspPostInit+0x1ac>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d11f      	bne.n	8006f7a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4a:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f64:	2300      	movs	r3, #0
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f6c:	f107 031c 	add.w	r3, r7, #28
 8006f70:	4619      	mov	r1, r3
 8006f72:	481a      	ldr	r0, [pc, #104]	; (8006fdc <HAL_TIM_MspPostInit+0x1a0>)
 8006f74:	f003 f83c 	bl	8009ff0 <HAL_GPIO_Init>
}
 8006f78:	e023      	b.n	8006fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1b      	ldr	r2, [pc, #108]	; (8006fec <HAL_TIM_MspPostInit+0x1b0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d11e      	bne.n	8006fc2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f84:	2300      	movs	r3, #0
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f8e:	f043 0302 	orr.w	r3, r3, #2
 8006f92:	6313      	str	r3, [r2, #48]	; 0x30
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <HAL_TIM_MspPostInit+0x194>)
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb6:	f107 031c 	add.w	r3, r7, #28
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4807      	ldr	r0, [pc, #28]	; (8006fdc <HAL_TIM_MspPostInit+0x1a0>)
 8006fbe:	f003 f817 	bl	8009ff0 <HAL_GPIO_Init>
}
 8006fc2:	bf00      	nop
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40020400 	.word	0x40020400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40020c00 	.word	0x40020c00
 8006fe8:	40014400 	.word	0x40014400
 8006fec:	40014800 	.word	0x40014800

08006ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	605a      	str	r2, [r3, #4]
 8007002:	609a      	str	r2, [r3, #8]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a19      	ldr	r2, [pc, #100]	; (8007074 <HAL_UART_MspInit+0x84>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d12b      	bne.n	800706a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <HAL_UART_MspInit+0x88>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <HAL_UART_MspInit+0x88>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	6413      	str	r3, [r2, #64]	; 0x40
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <HAL_UART_MspInit+0x88>)
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <HAL_UART_MspInit+0x88>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	4a10      	ldr	r2, [pc, #64]	; (8007078 <HAL_UART_MspInit+0x88>)
 8007038:	f043 0308 	orr.w	r3, r3, #8
 800703c:	6313      	str	r3, [r2, #48]	; 0x30
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <HAL_UART_MspInit+0x88>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800704a:	2360      	movs	r3, #96	; 0x60
 800704c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704e:	2302      	movs	r3, #2
 8007050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007056:	2303      	movs	r3, #3
 8007058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800705a:	2307      	movs	r3, #7
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800705e:	f107 0314 	add.w	r3, r7, #20
 8007062:	4619      	mov	r1, r3
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <HAL_UART_MspInit+0x8c>)
 8007066:	f002 ffc3 	bl	8009ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800706a:	bf00      	nop
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40004400 	.word	0x40004400
 8007078:	40023800 	.word	0x40023800
 800707c:	40020c00 	.word	0x40020c00

08007080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007084:	e7fe      	b.n	8007084 <NMI_Handler+0x4>

08007086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007086:	b480      	push	{r7}
 8007088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800708a:	e7fe      	b.n	800708a <HardFault_Handler+0x4>

0800708c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007090:	e7fe      	b.n	8007090 <MemManage_Handler+0x4>

08007092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007092:	b480      	push	{r7}
 8007094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007096:	e7fe      	b.n	8007096 <BusFault_Handler+0x4>

08007098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800709c:	e7fe      	b.n	800709c <UsageFault_Handler+0x4>

0800709e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800709e:	b480      	push	{r7}
 80070a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070a2:	bf00      	nop
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070cc:	f001 fe9c 	bl	8008e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80070d8:	4803      	ldr	r0, [pc, #12]	; (80070e8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80070da:	f007 f96c 	bl	800e3b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80070de:	4803      	ldr	r0, [pc, #12]	; (80070ec <TIM8_UP_TIM13_IRQHandler+0x18>)
 80070e0:	f007 f969 	bl	800e3b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80070e4:	bf00      	nop
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	2003e8a0 	.word	0x2003e8a0
 80070ec:	2003ea9c 	.word	0x2003ea9c

080070f0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80070f4:	4802      	ldr	r0, [pc, #8]	; (8007100 <SDIO_IRQHandler+0x10>)
 80070f6:	f005 fa05 	bl	800c504 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2003ebfc 	.word	0x2003ebfc

08007104 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007108:	4802      	ldr	r0, [pc, #8]	; (8007114 <TIM6_DAC_IRQHandler+0x10>)
 800710a:	f007 f954 	bl	800e3b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800710e:	bf00      	nop
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2003eb7c 	.word	0x2003eb7c

08007118 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800711c:	4802      	ldr	r0, [pc, #8]	; (8007128 <TIM7_IRQHandler+0x10>)
 800711e:	f007 f94a 	bl	800e3b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	2003ed20 	.word	0x2003ed20

0800712c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007130:	4802      	ldr	r0, [pc, #8]	; (800713c <DMA2_Stream2_IRQHandler+0x10>)
 8007132:	f002 fce9 	bl	8009b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007136:	bf00      	nop
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	2003ecc0 	.word	0x2003ecc0

08007140 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007144:	4802      	ldr	r0, [pc, #8]	; (8007150 <DMA2_Stream3_IRQHandler+0x10>)
 8007146:	f002 fcdf 	bl	8009b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800714a:	bf00      	nop
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	2003e7e8 	.word	0x2003e7e8

08007154 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007158:	4802      	ldr	r0, [pc, #8]	; (8007164 <DMA2_Stream6_IRQHandler+0x10>)
 800715a:	f002 fcd5 	bl	8009b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2003eb1c 	.word	0x2003eb1c

08007168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007170:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <_sbrk+0x5c>)
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <_sbrk+0x60>)
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <_sbrk+0x64>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007184:	4b11      	ldr	r3, [pc, #68]	; (80071cc <_sbrk+0x64>)
 8007186:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <_sbrk+0x68>)
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800718a:	4b10      	ldr	r3, [pc, #64]	; (80071cc <_sbrk+0x64>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	429a      	cmp	r2, r3
 8007196:	d207      	bcs.n	80071a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007198:	f00d fba0 	bl	80148dc <__errno>
 800719c:	4602      	mov	r2, r0
 800719e:	230c      	movs	r3, #12
 80071a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	e009      	b.n	80071bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071a8:	4b08      	ldr	r3, [pc, #32]	; (80071cc <_sbrk+0x64>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <_sbrk+0x64>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	4a05      	ldr	r2, [pc, #20]	; (80071cc <_sbrk+0x64>)
 80071b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20050000 	.word	0x20050000
 80071c8:	00000800 	.word	0x00000800
 80071cc:	200002bc 	.word	0x200002bc
 80071d0:	20040e70 	.word	0x20040e70

080071d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071d8:	4b08      	ldr	r3, [pc, #32]	; (80071fc <SystemInit+0x28>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <SystemInit+0x28>)
 80071e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <SystemInit+0x28>)
 80071ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071ee:	609a      	str	r2, [r3, #8]
#endif
}
 80071f0:	bf00      	nop
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	e000ed00 	.word	0xe000ed00

08007200 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007200:	b598      	push	{r3, r4, r7, lr}
 8007202:	af00      	add	r7, sp, #0
	lcd_init();
 8007204:	f7f9 ff08 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007208:	483a      	ldr	r0, [pc, #232]	; (80072f4 <cppInit+0xf4>)
 800720a:	f7fd fdef 	bl	8004dec <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800720e:	2064      	movs	r0, #100	; 0x64
 8007210:	f001 fe1a 	bl	8008e48 <HAL_Delay>
	power_sensor.updateValues();
 8007214:	4837      	ldr	r0, [pc, #220]	; (80072f4 <cppInit+0xf4>)
 8007216:	f7fd fdf7 	bl	8004e08 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800721a:	f7f9 ff41 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800721e:	2100      	movs	r1, #0
 8007220:	2000      	movs	r0, #0
 8007222:	f7f9 ff4d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007226:	4834      	ldr	r0, [pc, #208]	; (80072f8 <cppInit+0xf8>)
 8007228:	f7f9 ff74 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800722c:	2101      	movs	r1, #1
 800722e:	2000      	movs	r0, #0
 8007230:	f7f9 ff46 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007234:	482f      	ldr	r0, [pc, #188]	; (80072f4 <cppInit+0xf4>)
 8007236:	f7fd fe11 	bl	8004e5c <_ZN11PowerSensor17getButteryVoltageEv>
 800723a:	ee10 3a10 	vmov	r3, s0
 800723e:	4618      	mov	r0, r3
 8007240:	f7f9 f99a 	bl	8000578 <__aeabi_f2d>
 8007244:	4603      	mov	r3, r0
 8007246:	460c      	mov	r4, r1
 8007248:	461a      	mov	r2, r3
 800724a:	4623      	mov	r3, r4
 800724c:	482b      	ldr	r0, [pc, #172]	; (80072fc <cppInit+0xfc>)
 800724e:	f7f9 ff61 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007256:	f001 fdf7 	bl	8008e48 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800725a:	4829      	ldr	r0, [pc, #164]	; (8007300 <cppInit+0x100>)
 800725c:	f7fd f80a 	bl	8004274 <_ZN6Logger10sdCardInitEv>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <cppInit+0x76>
		led.fullColor('G');
 8007266:	2147      	movs	r1, #71	; 0x47
 8007268:	4826      	ldr	r0, [pc, #152]	; (8007304 <cppInit+0x104>)
 800726a:	f7fa fe47 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800726e:	2064      	movs	r0, #100	; 0x64
 8007270:	f001 fdea 	bl	8008e48 <HAL_Delay>
 8007274:	e006      	b.n	8007284 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007276:	2152      	movs	r1, #82	; 0x52
 8007278:	4822      	ldr	r0, [pc, #136]	; (8007304 <cppInit+0x104>)
 800727a:	f7fa fe3f 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800727e:	2064      	movs	r0, #100	; 0x64
 8007280:	f001 fde2 	bl	8008e48 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007284:	4820      	ldr	r0, [pc, #128]	; (8007308 <cppInit+0x108>)
 8007286:	f7fa ff95 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800728a:	4820      	ldr	r0, [pc, #128]	; (800730c <cppInit+0x10c>)
 800728c:	f7fd fa80 	bl	8004790 <_ZN5Motor4initEv>
	encoder.init();
 8007290:	481f      	ldr	r0, [pc, #124]	; (8007310 <cppInit+0x110>)
 8007292:	f7f9 ff8b 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007296:	481f      	ldr	r0, [pc, #124]	; (8007314 <cppInit+0x114>)
 8007298:	f7fa fbee 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 800729c:	481e      	ldr	r0, [pc, #120]	; (8007318 <cppInit+0x118>)
 800729e:	f7fc fa21 	bl	80036e4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80072a2:	4819      	ldr	r0, [pc, #100]	; (8007308 <cppInit+0x108>)
 80072a4:	f7fb f8c6 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80072a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ac:	f001 fdcc 	bl	8008e48 <HAL_Delay>

	led.fullColor('M');
 80072b0:	214d      	movs	r1, #77	; 0x4d
 80072b2:	4814      	ldr	r0, [pc, #80]	; (8007304 <cppInit+0x104>)
 80072b4:	f7fa fe22 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 80072b8:	4816      	ldr	r0, [pc, #88]	; (8007314 <cppInit+0x114>)
 80072ba:	f7fa fca7 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80072be:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800731c <cppInit+0x11c>
 80072c2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007320 <cppInit+0x120>
 80072c6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007324 <cppInit+0x124>
 80072ca:	4817      	ldr	r0, [pc, #92]	; (8007328 <cppInit+0x128>)
 80072cc:	f7fe f9cc 	bl	8005668 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80072d0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800732c <cppInit+0x12c>
 80072d4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007330 <cppInit+0x130>
 80072d8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007334 <cppInit+0x134>
 80072dc:	4812      	ldr	r0, [pc, #72]	; (8007328 <cppInit+0x128>)
 80072de:	f7fe f9dc 	bl	800569a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80072e2:	4815      	ldr	r0, [pc, #84]	; (8007338 <cppInit+0x138>)
 80072e4:	f7fd fc8c 	bl	8004c00 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80072e8:	4814      	ldr	r0, [pc, #80]	; (800733c <cppInit+0x13c>)
 80072ea:	f7fd fd23 	bl	8004d34 <_ZN13PathFollowing4initEv>

}
 80072ee:	bf00      	nop
 80072f0:	bd98      	pop	{r3, r4, r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200005d0 	.word	0x200005d0
 80072f8:	080190e4 	.word	0x080190e4
 80072fc:	080190ec 	.word	0x080190ec
 8007300:	200005f0 	.word	0x200005f0
 8007304:	200005cc 	.word	0x200005cc
 8007308:	200002c0 	.word	0x200002c0
 800730c:	200005c8 	.word	0x200005c8
 8007310:	20017d00 	.word	0x20017d00
 8007314:	200005dc 	.word	0x200005dc
 8007318:	20017da0 	.word	0x20017da0
 800731c:	3cceca68 	.word	0x3cceca68
 8007320:	4180f06f 	.word	0x4180f06f
 8007324:	3fea2d0e 	.word	0x3fea2d0e
 8007328:	20017d20 	.word	0x20017d20
 800732c:	3ab7dacd 	.word	0x3ab7dacd
 8007330:	3f5e3fbc 	.word	0x3f5e3fbc
 8007334:	3d8eefa2 	.word	0x3d8eefa2
 8007338:	20017d60 	.word	0x20017d60
 800733c:	20024d10 	.word	0x20024d10

08007340 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007344:	4819      	ldr	r0, [pc, #100]	; (80073ac <cppFlip1ms+0x6c>)
 8007346:	f7fa ff93 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800734a:	4819      	ldr	r0, [pc, #100]	; (80073b0 <cppFlip1ms+0x70>)
 800734c:	f7fa fbbc 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007350:	4818      	ldr	r0, [pc, #96]	; (80073b4 <cppFlip1ms+0x74>)
 8007352:	f7f9 ff4d 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007356:	4818      	ldr	r0, [pc, #96]	; (80073b8 <cppFlip1ms+0x78>)
 8007358:	f7fc fb96 	bl	8003a88 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800735c:	4817      	ldr	r0, [pc, #92]	; (80073bc <cppFlip1ms+0x7c>)
 800735e:	f7fe f9b5 	bl	80056cc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007362:	4817      	ldr	r0, [pc, #92]	; (80073c0 <cppFlip1ms+0x80>)
 8007364:	f7fd fc30 	bl	8004bc8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007368:	4816      	ldr	r0, [pc, #88]	; (80073c4 <cppFlip1ms+0x84>)
 800736a:	f7fd fded 	bl	8004f48 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800736e:	4816      	ldr	r0, [pc, #88]	; (80073c8 <cppFlip1ms+0x88>)
 8007370:	f7fd fa20 	bl	80047b4 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <cppFlip1ms+0x8c>)
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <cppFlip1ms+0x8c>)
 800737e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007380:	4b12      	ldr	r3, [pc, #72]	; (80073cc <cppFlip1ms+0x8c>)
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d90c      	bls.n	80073a2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007388:	4809      	ldr	r0, [pc, #36]	; (80073b0 <cppFlip1ms+0x70>)
 800738a:	f7fa fbf5 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800738e:	eef0 7a40 	vmov.f32	s15, s0
 8007392:	eeb0 0a67 	vmov.f32	s0, s15
 8007396:	480e      	ldr	r0, [pc, #56]	; (80073d0 <cppFlip1ms+0x90>)
 8007398:	f7fd ff38 	bl	800520c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <cppFlip1ms+0x8c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80073a2:	4804      	ldr	r0, [pc, #16]	; (80073b4 <cppFlip1ms+0x74>)
 80073a4:	f7fa f80e 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200002c0 	.word	0x200002c0
 80073b0:	200005dc 	.word	0x200005dc
 80073b4:	20017d00 	.word	0x20017d00
 80073b8:	20017da0 	.word	0x20017da0
 80073bc:	20017d20 	.word	0x20017d20
 80073c0:	20017d60 	.word	0x20017d60
 80073c4:	200005b8 	.word	0x200005b8
 80073c8:	200005c8 	.word	0x200005c8
 80073cc:	2003c438 	.word	0x2003c438
 80073d0:	20024b00 	.word	0x20024b00

080073d4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80073d8:	4802      	ldr	r0, [pc, #8]	; (80073e4 <cppFlip100ns+0x10>)
 80073da:	f7fa fefb 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200002c0 	.word	0x200002c0

080073e8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80073ec:	4b08      	ldr	r3, [pc, #32]	; (8007410 <cppFlip10ms+0x28>)
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <cppFlip10ms+0x28>)
 80073f6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <cppFlip10ms+0x28>)
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	2b06      	cmp	r3, #6
 80073fe:	d905      	bls.n	800740c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007400:	4804      	ldr	r0, [pc, #16]	; (8007414 <cppFlip10ms+0x2c>)
 8007402:	f7fd ff3f 	bl	8005284 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007406:	4b02      	ldr	r3, [pc, #8]	; (8007410 <cppFlip10ms+0x28>)
 8007408:	2200      	movs	r2, #0
 800740a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800740c:	bf00      	nop
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2003c43a 	.word	0x2003c43a
 8007414:	20024b00 	.word	0x20024b00

08007418 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b087      	sub	sp, #28
 800741c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 800741e:	4baf      	ldr	r3, [pc, #700]	; (80076dc <cppLoop+0x2c4>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	f3bf 8f5b 	dmb	ish
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d015      	beq.n	8007466 <cppLoop+0x4e>
 800743a:	48a8      	ldr	r0, [pc, #672]	; (80076dc <cppLoop+0x2c4>)
 800743c:	f00c f9e9 	bl	8013812 <__cxa_guard_acquire>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	bf14      	ite	ne
 8007446:	2301      	movne	r3, #1
 8007448:	2300      	moveq	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <cppLoop+0x4e>
 8007450:	48a3      	ldr	r0, [pc, #652]	; (80076e0 <cppLoop+0x2c8>)
 8007452:	f7fc fa02 	bl	800385a <_ZN9LineTrace5getKpEv>
 8007456:	eef0 7a40 	vmov.f32	s15, s0
 800745a:	4ba2      	ldr	r3, [pc, #648]	; (80076e4 <cppLoop+0x2cc>)
 800745c:	edc3 7a00 	vstr	s15, [r3]
 8007460:	489e      	ldr	r0, [pc, #632]	; (80076dc <cppLoop+0x2c4>)
 8007462:	f00c f9e2 	bl	801382a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007466:	4ba0      	ldr	r3, [pc, #640]	; (80076e8 <cppLoop+0x2d0>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f3bf 8f5b 	dmb	ish
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d015      	beq.n	80074ae <cppLoop+0x96>
 8007482:	4899      	ldr	r0, [pc, #612]	; (80076e8 <cppLoop+0x2d0>)
 8007484:	f00c f9c5 	bl	8013812 <__cxa_guard_acquire>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	bf14      	ite	ne
 800748e:	2301      	movne	r3, #1
 8007490:	2300      	moveq	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <cppLoop+0x96>
 8007498:	4891      	ldr	r0, [pc, #580]	; (80076e0 <cppLoop+0x2c8>)
 800749a:	f7fc f9ed 	bl	8003878 <_ZN9LineTrace5getKiEv>
 800749e:	eef0 7a40 	vmov.f32	s15, s0
 80074a2:	4b92      	ldr	r3, [pc, #584]	; (80076ec <cppLoop+0x2d4>)
 80074a4:	edc3 7a00 	vstr	s15, [r3]
 80074a8:	488f      	ldr	r0, [pc, #572]	; (80076e8 <cppLoop+0x2d0>)
 80074aa:	f00c f9be 	bl	801382a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80074ae:	4b90      	ldr	r3, [pc, #576]	; (80076f0 <cppLoop+0x2d8>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	f3bf 8f5b 	dmb	ish
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf0c      	ite	eq
 80074c0:	2301      	moveq	r3, #1
 80074c2:	2300      	movne	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d015      	beq.n	80074f6 <cppLoop+0xde>
 80074ca:	4889      	ldr	r0, [pc, #548]	; (80076f0 <cppLoop+0x2d8>)
 80074cc:	f00c f9a1 	bl	8013812 <__cxa_guard_acquire>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf14      	ite	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	2300      	moveq	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <cppLoop+0xde>
 80074e0:	487f      	ldr	r0, [pc, #508]	; (80076e0 <cppLoop+0x2c8>)
 80074e2:	f7fc f9d8 	bl	8003896 <_ZN9LineTrace5getKdEv>
 80074e6:	eef0 7a40 	vmov.f32	s15, s0
 80074ea:	4b82      	ldr	r3, [pc, #520]	; (80076f4 <cppLoop+0x2dc>)
 80074ec:	edc3 7a00 	vstr	s15, [r3]
 80074f0:	487f      	ldr	r0, [pc, #508]	; (80076f0 <cppLoop+0x2d8>)
 80074f2:	f00c f99a 	bl	801382a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80074f6:	4b80      	ldr	r3, [pc, #512]	; (80076f8 <cppLoop+0x2e0>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f3bf 8f5b 	dmb	ish
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	bf0c      	ite	eq
 8007508:	2301      	moveq	r3, #1
 800750a:	2300      	movne	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d015      	beq.n	800753e <cppLoop+0x126>
 8007512:	4879      	ldr	r0, [pc, #484]	; (80076f8 <cppLoop+0x2e0>)
 8007514:	f00c f97d 	bl	8013812 <__cxa_guard_acquire>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	bf14      	ite	ne
 800751e:	2301      	movne	r3, #1
 8007520:	2300      	moveq	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <cppLoop+0x126>
 8007528:	486d      	ldr	r0, [pc, #436]	; (80076e0 <cppLoop+0x2c8>)
 800752a:	f7fc fa20 	bl	800396e <_ZN9LineTrace17getTargetVelocityEv>
 800752e:	eef0 7a40 	vmov.f32	s15, s0
 8007532:	4b72      	ldr	r3, [pc, #456]	; (80076fc <cppLoop+0x2e4>)
 8007534:	edc3 7a00 	vstr	s15, [r3]
 8007538:	486f      	ldr	r0, [pc, #444]	; (80076f8 <cppLoop+0x2e0>)
 800753a:	f00c f976 	bl	801382a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800753e:	4b70      	ldr	r3, [pc, #448]	; (8007700 <cppLoop+0x2e8>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f3bf 8f5b 	dmb	ish
 8007546:	b2db      	uxtb	r3, r3
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	bf0c      	ite	eq
 8007550:	2301      	moveq	r3, #1
 8007552:	2300      	movne	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d015      	beq.n	8007586 <cppLoop+0x16e>
 800755a:	4869      	ldr	r0, [pc, #420]	; (8007700 <cppLoop+0x2e8>)
 800755c:	f00c f959 	bl	8013812 <__cxa_guard_acquire>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <cppLoop+0x16e>
 8007570:	485b      	ldr	r0, [pc, #364]	; (80076e0 <cppLoop+0x2c8>)
 8007572:	f7fc fa0b 	bl	800398c <_ZN9LineTrace14getMaxVelocityEv>
 8007576:	eef0 7a40 	vmov.f32	s15, s0
 800757a:	4b62      	ldr	r3, [pc, #392]	; (8007704 <cppLoop+0x2ec>)
 800757c:	edc3 7a00 	vstr	s15, [r3]
 8007580:	485f      	ldr	r0, [pc, #380]	; (8007700 <cppLoop+0x2e8>)
 8007582:	f00c f952 	bl	801382a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007586:	4b60      	ldr	r3, [pc, #384]	; (8007708 <cppLoop+0x2f0>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	f3bf 8f5b 	dmb	ish
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d015      	beq.n	80075ce <cppLoop+0x1b6>
 80075a2:	4859      	ldr	r0, [pc, #356]	; (8007708 <cppLoop+0x2f0>)
 80075a4:	f00c f935 	bl	8013812 <__cxa_guard_acquire>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <cppLoop+0x1b6>
 80075b8:	4849      	ldr	r0, [pc, #292]	; (80076e0 <cppLoop+0x2c8>)
 80075ba:	f7fc f9f6 	bl	80039aa <_ZN9LineTrace15getMaxVelocity2Ev>
 80075be:	eef0 7a40 	vmov.f32	s15, s0
 80075c2:	4b52      	ldr	r3, [pc, #328]	; (800770c <cppLoop+0x2f4>)
 80075c4:	edc3 7a00 	vstr	s15, [r3]
 80075c8:	484f      	ldr	r0, [pc, #316]	; (8007708 <cppLoop+0x2f0>)
 80075ca:	f00c f92e 	bl	801382a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80075ce:	4b50      	ldr	r3, [pc, #320]	; (8007710 <cppLoop+0x2f8>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f3bf 8f5b 	dmb	ish
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d015      	beq.n	8007616 <cppLoop+0x1fe>
 80075ea:	4849      	ldr	r0, [pc, #292]	; (8007710 <cppLoop+0x2f8>)
 80075ec:	f00c f911 	bl	8013812 <__cxa_guard_acquire>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2301      	movne	r3, #1
 80075f8:	2300      	moveq	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <cppLoop+0x1fe>
 8007600:	4837      	ldr	r0, [pc, #220]	; (80076e0 <cppLoop+0x2c8>)
 8007602:	f7fc f9e2 	bl	80039ca <_ZN9LineTrace14getMinVelocityEv>
 8007606:	eef0 7a40 	vmov.f32	s15, s0
 800760a:	4b42      	ldr	r3, [pc, #264]	; (8007714 <cppLoop+0x2fc>)
 800760c:	edc3 7a00 	vstr	s15, [r3]
 8007610:	483f      	ldr	r0, [pc, #252]	; (8007710 <cppLoop+0x2f8>)
 8007612:	f00c f90a 	bl	801382a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007616:	4b40      	ldr	r3, [pc, #256]	; (8007718 <cppLoop+0x300>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	f3bf 8f5b 	dmb	ish
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d015      	beq.n	800765e <cppLoop+0x246>
 8007632:	4839      	ldr	r0, [pc, #228]	; (8007718 <cppLoop+0x300>)
 8007634:	f00c f8ed 	bl	8013812 <__cxa_guard_acquire>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <cppLoop+0x246>
 8007648:	4825      	ldr	r0, [pc, #148]	; (80076e0 <cppLoop+0x2c8>)
 800764a:	f7fc f9ce 	bl	80039ea <_ZN9LineTrace15getMinVelocity2Ev>
 800764e:	eef0 7a40 	vmov.f32	s15, s0
 8007652:	4b32      	ldr	r3, [pc, #200]	; (800771c <cppLoop+0x304>)
 8007654:	edc3 7a00 	vstr	s15, [r3]
 8007658:	482f      	ldr	r0, [pc, #188]	; (8007718 <cppLoop+0x300>)
 800765a:	f00c f8e6 	bl	801382a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800765e:	4b30      	ldr	r3, [pc, #192]	; (8007720 <cppLoop+0x308>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f3bf 8f5b 	dmb	ish
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d015      	beq.n	80076a6 <cppLoop+0x28e>
 800767a:	4829      	ldr	r0, [pc, #164]	; (8007720 <cppLoop+0x308>)
 800767c:	f00c f8c9 	bl	8013812 <__cxa_guard_acquire>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf14      	ite	ne
 8007686:	2301      	movne	r3, #1
 8007688:	2300      	moveq	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <cppLoop+0x28e>
 8007690:	4813      	ldr	r0, [pc, #76]	; (80076e0 <cppLoop+0x2c8>)
 8007692:	f7fc f9d4 	bl	8003a3e <_ZN9LineTrace9getMaxAccEv>
 8007696:	eef0 7a40 	vmov.f32	s15, s0
 800769a:	4b22      	ldr	r3, [pc, #136]	; (8007724 <cppLoop+0x30c>)
 800769c:	edc3 7a00 	vstr	s15, [r3]
 80076a0:	481f      	ldr	r0, [pc, #124]	; (8007720 <cppLoop+0x308>)
 80076a2:	f00c f8c2 	bl	801382a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <cppLoop+0x310>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f3bf 8f5b 	dmb	ish
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d03f      	beq.n	8007742 <cppLoop+0x32a>
 80076c2:	4819      	ldr	r0, [pc, #100]	; (8007728 <cppLoop+0x310>)
 80076c4:	f00c f8a5 	bl	8013812 <__cxa_guard_acquire>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bf14      	ite	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	2300      	moveq	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d034      	beq.n	8007742 <cppLoop+0x32a>
 80076d8:	e028      	b.n	800772c <cppLoop+0x314>
 80076da:	bf00      	nop
 80076dc:	2003c448 	.word	0x2003c448
 80076e0:	20017da0 	.word	0x20017da0
 80076e4:	2003c444 	.word	0x2003c444
 80076e8:	2003c450 	.word	0x2003c450
 80076ec:	2003c44c 	.word	0x2003c44c
 80076f0:	2003c458 	.word	0x2003c458
 80076f4:	2003c454 	.word	0x2003c454
 80076f8:	2003c460 	.word	0x2003c460
 80076fc:	2003c45c 	.word	0x2003c45c
 8007700:	2003c468 	.word	0x2003c468
 8007704:	2003c464 	.word	0x2003c464
 8007708:	2003c470 	.word	0x2003c470
 800770c:	2003c46c 	.word	0x2003c46c
 8007710:	2003c478 	.word	0x2003c478
 8007714:	2003c474 	.word	0x2003c474
 8007718:	2003c480 	.word	0x2003c480
 800771c:	2003c47c 	.word	0x2003c47c
 8007720:	2003c488 	.word	0x2003c488
 8007724:	2003c484 	.word	0x2003c484
 8007728:	2003c490 	.word	0x2003c490
 800772c:	48c0      	ldr	r0, [pc, #768]	; (8007a30 <cppLoop+0x618>)
 800772e:	f7fc f998 	bl	8003a62 <_ZN9LineTrace9getMaxDecEv>
 8007732:	eef0 7a40 	vmov.f32	s15, s0
 8007736:	4bbf      	ldr	r3, [pc, #764]	; (8007a34 <cppLoop+0x61c>)
 8007738:	edc3 7a00 	vstr	s15, [r3]
 800773c:	48be      	ldr	r0, [pc, #760]	; (8007a38 <cppLoop+0x620>)
 800773e:	f00c f874 	bl	801382a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007742:	48be      	ldr	r0, [pc, #760]	; (8007a3c <cppLoop+0x624>)
 8007744:	f7fd fb9a 	bl	8004e7c <_ZN12RotarySwitch8getValueEv>
 8007748:	4603      	mov	r3, r0
 800774a:	2b0f      	cmp	r3, #15
 800774c:	f201 823f 	bhi.w	8008bce <cppLoop+0x17b6>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <cppLoop+0x340>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007799 	.word	0x08007799
 800775c:	08007b8f 	.word	0x08007b8f
 8007760:	08007c23 	.word	0x08007c23
 8007764:	08007dbd 	.word	0x08007dbd
 8007768:	08007e89 	.word	0x08007e89
 800776c:	08008109 	.word	0x08008109
 8007770:	080081d5 	.word	0x080081d5
 8007774:	08008467 	.word	0x08008467
 8007778:	080086ed 	.word	0x080086ed
 800777c:	08008717 	.word	0x08008717
 8007780:	080087d3 	.word	0x080087d3
 8007784:	08008843 	.word	0x08008843
 8007788:	080088df 	.word	0x080088df
 800778c:	08008979 	.word	0x08008979
 8007790:	08008a81 	.word	0x08008a81
 8007794:	08008b29 	.word	0x08008b29
	case 0:
		led.fullColor('W');
 8007798:	2157      	movs	r1, #87	; 0x57
 800779a:	48a9      	ldr	r0, [pc, #676]	; (8007a40 <cppLoop+0x628>)
 800779c:	f7fa fbae 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80077a0:	f7f9 fc7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077a4:	2100      	movs	r1, #0
 80077a6:	2000      	movs	r0, #0
 80077a8:	f7f9 fc8a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80077ac:	48a0      	ldr	r0, [pc, #640]	; (8007a30 <cppLoop+0x618>)
 80077ae:	f7fc f854 	bl	800385a <_ZN9LineTrace5getKpEv>
 80077b2:	eeb0 7a40 	vmov.f32	s14, s0
 80077b6:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8007a44 <cppLoop+0x62c>
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	ee17 0a90 	vmov	r0, s15
 80077c2:	f7f8 fed9 	bl	8000578 <__aeabi_f2d>
 80077c6:	4603      	mov	r3, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	461a      	mov	r2, r3
 80077cc:	4623      	mov	r3, r4
 80077ce:	489e      	ldr	r0, [pc, #632]	; (8007a48 <cppLoop+0x630>)
 80077d0:	f7f9 fca0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077d4:	2101      	movs	r1, #1
 80077d6:	2000      	movs	r0, #0
 80077d8:	f7f9 fc72 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80077dc:	4894      	ldr	r0, [pc, #592]	; (8007a30 <cppLoop+0x618>)
 80077de:	f7fc f84b 	bl	8003878 <_ZN9LineTrace5getKiEv>
 80077e2:	eeb0 7a40 	vmov.f32	s14, s0
 80077e6:	eddf 7a99 	vldr	s15, [pc, #612]	; 8007a4c <cppLoop+0x634>
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	ee17 0a90 	vmov	r0, s15
 80077f2:	f7f8 fec1 	bl	8000578 <__aeabi_f2d>
 80077f6:	4605      	mov	r5, r0
 80077f8:	460e      	mov	r6, r1
 80077fa:	488d      	ldr	r0, [pc, #564]	; (8007a30 <cppLoop+0x618>)
 80077fc:	f7fc f84b 	bl	8003896 <_ZN9LineTrace5getKdEv>
 8007800:	eeb0 7a40 	vmov.f32	s14, s0
 8007804:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007a50 <cppLoop+0x638>
 8007808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780c:	ee17 0a90 	vmov	r0, s15
 8007810:	f7f8 feb2 	bl	8000578 <__aeabi_f2d>
 8007814:	4603      	mov	r3, r0
 8007816:	460c      	mov	r4, r1
 8007818:	e9cd 3400 	strd	r3, r4, [sp]
 800781c:	462a      	mov	r2, r5
 800781e:	4633      	mov	r3, r6
 8007820:	488c      	ldr	r0, [pc, #560]	; (8007a54 <cppLoop+0x63c>)
 8007822:	f7f9 fc77 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007826:	488c      	ldr	r0, [pc, #560]	; (8007a58 <cppLoop+0x640>)
 8007828:	f7fa fb04 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800782c:	4603      	mov	r3, r0
 800782e:	2b08      	cmp	r3, #8
 8007830:	bf0c      	ite	eq
 8007832:	2301      	moveq	r3, #1
 8007834:	2300      	movne	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d022      	beq.n	8007882 <cppLoop+0x46a>
			led.LR(-1, 1);
 800783c:	2201      	movs	r2, #1
 800783e:	f04f 31ff 	mov.w	r1, #4294967295
 8007842:	487f      	ldr	r0, [pc, #508]	; (8007a40 <cppLoop+0x628>)
 8007844:	f7fa fc16 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007848:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800784c:	f001 fafc 	bl	8008e48 <HAL_Delay>

			selector++;
 8007850:	4b82      	ldr	r3, [pc, #520]	; (8007a5c <cppLoop+0x644>)
 8007852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007856:	b29b      	uxth	r3, r3
 8007858:	3301      	adds	r3, #1
 800785a:	b29b      	uxth	r3, r3
 800785c:	b21a      	sxth	r2, r3
 800785e:	4b7f      	ldr	r3, [pc, #508]	; (8007a5c <cppLoop+0x644>)
 8007860:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007862:	4b7e      	ldr	r3, [pc, #504]	; (8007a5c <cppLoop+0x644>)
 8007864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007868:	2b02      	cmp	r3, #2
 800786a:	dd02      	ble.n	8007872 <cppLoop+0x45a>
 800786c:	4b7b      	ldr	r3, [pc, #492]	; (8007a5c <cppLoop+0x644>)
 800786e:	2200      	movs	r2, #0
 8007870:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007872:	2200      	movs	r2, #0
 8007874:	f04f 31ff 	mov.w	r1, #4294967295
 8007878:	4871      	ldr	r0, [pc, #452]	; (8007a40 <cppLoop+0x628>)
 800787a:	f7fa fbfb 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800787e:	f001 b9a8 	b.w	8008bd2 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_R){
 8007882:	4875      	ldr	r0, [pc, #468]	; (8007a58 <cppLoop+0x640>)
 8007884:	f7fa fad6 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007888:	4603      	mov	r3, r0
 800788a:	2b10      	cmp	r3, #16
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d059      	beq.n	800794c <cppLoop+0x534>
			led.LR(-1, 1);
 8007898:	2201      	movs	r2, #1
 800789a:	f04f 31ff 	mov.w	r1, #4294967295
 800789e:	4868      	ldr	r0, [pc, #416]	; (8007a40 <cppLoop+0x628>)
 80078a0:	f7fa fbe8 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80078a4:	2064      	movs	r0, #100	; 0x64
 80078a6:	f001 facf 	bl	8008e48 <HAL_Delay>
			if(selector == 0){
 80078aa:	4b6c      	ldr	r3, [pc, #432]	; (8007a5c <cppLoop+0x644>)
 80078ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d113      	bne.n	80078dc <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 80078b4:	4b6a      	ldr	r3, [pc, #424]	; (8007a60 <cppLoop+0x648>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7f8 fe5d 	bl	8000578 <__aeabi_f2d>
 80078be:	a356      	add	r3, pc, #344	; (adr r3, 8007a18 <cppLoop+0x600>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 fcfa 	bl	80002bc <__adddf3>
 80078c8:	4603      	mov	r3, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	4618      	mov	r0, r3
 80078ce:	4621      	mov	r1, r4
 80078d0:	f7f9 f9a2 	bl	8000c18 <__aeabi_d2f>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b62      	ldr	r3, [pc, #392]	; (8007a60 <cppLoop+0x648>)
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e02b      	b.n	8007934 <cppLoop+0x51c>
			else if(selector == 1){
 80078dc:	4b5f      	ldr	r3, [pc, #380]	; (8007a5c <cppLoop+0x644>)
 80078de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d113      	bne.n	800790e <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 80078e6:	4b5f      	ldr	r3, [pc, #380]	; (8007a64 <cppLoop+0x64c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7f8 fe44 	bl	8000578 <__aeabi_f2d>
 80078f0:	a34b      	add	r3, pc, #300	; (adr r3, 8007a20 <cppLoop+0x608>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fce1 	bl	80002bc <__adddf3>
 80078fa:	4603      	mov	r3, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	4618      	mov	r0, r3
 8007900:	4621      	mov	r1, r4
 8007902:	f7f9 f989 	bl	8000c18 <__aeabi_d2f>
 8007906:	4602      	mov	r2, r0
 8007908:	4b56      	ldr	r3, [pc, #344]	; (8007a64 <cppLoop+0x64c>)
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e012      	b.n	8007934 <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 800790e:	4b56      	ldr	r3, [pc, #344]	; (8007a68 <cppLoop+0x650>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f7f8 fe30 	bl	8000578 <__aeabi_f2d>
 8007918:	a343      	add	r3, pc, #268	; (adr r3, 8007a28 <cppLoop+0x610>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fccd 	bl	80002bc <__adddf3>
 8007922:	4603      	mov	r3, r0
 8007924:	460c      	mov	r4, r1
 8007926:	4618      	mov	r0, r3
 8007928:	4621      	mov	r1, r4
 800792a:	f7f9 f975 	bl	8000c18 <__aeabi_d2f>
 800792e:	4602      	mov	r2, r0
 8007930:	4b4d      	ldr	r3, [pc, #308]	; (8007a68 <cppLoop+0x650>)
 8007932:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007934:	2152      	movs	r1, #82	; 0x52
 8007936:	4842      	ldr	r0, [pc, #264]	; (8007a40 <cppLoop+0x628>)
 8007938:	f7fa fae0 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800793c:	2200      	movs	r2, #0
 800793e:	f04f 31ff 	mov.w	r1, #4294967295
 8007942:	483f      	ldr	r0, [pc, #252]	; (8007a40 <cppLoop+0x628>)
 8007944:	f7fa fb96 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007948:	f001 b943 	b.w	8008bd2 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_L){
 800794c:	4842      	ldr	r0, [pc, #264]	; (8007a58 <cppLoop+0x640>)
 800794e:	f7fa fa71 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007952:	4603      	mov	r3, r0
 8007954:	2b01      	cmp	r3, #1
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8084 	beq.w	8007a6c <cppLoop+0x654>
			led.LR(-1, 1);
 8007964:	2201      	movs	r2, #1
 8007966:	f04f 31ff 	mov.w	r1, #4294967295
 800796a:	4835      	ldr	r0, [pc, #212]	; (8007a40 <cppLoop+0x628>)
 800796c:	f7fa fb82 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007970:	2064      	movs	r0, #100	; 0x64
 8007972:	f001 fa69 	bl	8008e48 <HAL_Delay>
			if(selector == 0){
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <cppLoop+0x644>)
 8007978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d113      	bne.n	80079a8 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 8007980:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <cppLoop+0x648>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f7f8 fdf7 	bl	8000578 <__aeabi_f2d>
 800798a:	a323      	add	r3, pc, #140	; (adr r3, 8007a18 <cppLoop+0x600>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc92 	bl	80002b8 <__aeabi_dsub>
 8007994:	4603      	mov	r3, r0
 8007996:	460c      	mov	r4, r1
 8007998:	4618      	mov	r0, r3
 800799a:	4621      	mov	r1, r4
 800799c:	f7f9 f93c 	bl	8000c18 <__aeabi_d2f>
 80079a0:	4602      	mov	r2, r0
 80079a2:	4b2f      	ldr	r3, [pc, #188]	; (8007a60 <cppLoop+0x648>)
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e02b      	b.n	8007a00 <cppLoop+0x5e8>
			else if(selector == 1){
 80079a8:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <cppLoop+0x644>)
 80079aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d113      	bne.n	80079da <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 80079b2:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <cppLoop+0x64c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7f8 fdde 	bl	8000578 <__aeabi_f2d>
 80079bc:	a318      	add	r3, pc, #96	; (adr r3, 8007a20 <cppLoop+0x608>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fc79 	bl	80002b8 <__aeabi_dsub>
 80079c6:	4603      	mov	r3, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	4618      	mov	r0, r3
 80079cc:	4621      	mov	r1, r4
 80079ce:	f7f9 f923 	bl	8000c18 <__aeabi_d2f>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <cppLoop+0x64c>)
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e012      	b.n	8007a00 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 80079da:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <cppLoop+0x650>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fdca 	bl	8000578 <__aeabi_f2d>
 80079e4:	a310      	add	r3, pc, #64	; (adr r3, 8007a28 <cppLoop+0x610>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fc65 	bl	80002b8 <__aeabi_dsub>
 80079ee:	4603      	mov	r3, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	4618      	mov	r0, r3
 80079f4:	4621      	mov	r1, r4
 80079f6:	f7f9 f90f 	bl	8000c18 <__aeabi_d2f>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <cppLoop+0x650>)
 80079fe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007a00:	2152      	movs	r1, #82	; 0x52
 8007a02:	480f      	ldr	r0, [pc, #60]	; (8007a40 <cppLoop+0x628>)
 8007a04:	f7fa fa7a 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007a0e:	480c      	ldr	r0, [pc, #48]	; (8007a40 <cppLoop+0x628>)
 8007a10:	f7fa fb30 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a14:	f001 b8dd 	b.w	8008bd2 <cppLoop+0x17ba>
 8007a18:	88e368f1 	.word	0x88e368f1
 8007a1c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007a20:	eb1c432d 	.word	0xeb1c432d
 8007a24:	3f1a36e2 	.word	0x3f1a36e2
 8007a28:	a0b5ed8d 	.word	0xa0b5ed8d
 8007a2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007a30:	20017da0 	.word	0x20017da0
 8007a34:	2003c48c 	.word	0x2003c48c
 8007a38:	2003c490 	.word	0x2003c490
 8007a3c:	200005c4 	.word	0x200005c4
 8007a40:	200005cc 	.word	0x200005cc
 8007a44:	447a0000 	.word	0x447a0000
 8007a48:	080190f0 	.word	0x080190f0
 8007a4c:	42c80000 	.word	0x42c80000
 8007a50:	461c4000 	.word	0x461c4000
 8007a54:	080190fc 	.word	0x080190fc
 8007a58:	200005c0 	.word	0x200005c0
 8007a5c:	2003c43c 	.word	0x2003c43c
 8007a60:	2003c444 	.word	0x2003c444
 8007a64:	2003c44c 	.word	0x2003c44c
 8007a68:	2003c454 	.word	0x2003c454
		else if(joy_stick.getValue() == JOY_D){
 8007a6c:	48c4      	ldr	r0, [pc, #784]	; (8007d80 <cppLoop+0x968>)
 8007a6e:	f7fa f9e1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	bf0c      	ite	eq
 8007a78:	2301      	moveq	r3, #1
 8007a7a:	2300      	movne	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03d      	beq.n	8007afe <cppLoop+0x6e6>
			led.LR(-1, 1);
 8007a82:	2201      	movs	r2, #1
 8007a84:	f04f 31ff 	mov.w	r1, #4294967295
 8007a88:	48be      	ldr	r0, [pc, #760]	; (8007d84 <cppLoop+0x96c>)
 8007a8a:	f7fa faf3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007a8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a92:	f001 f9d9 	bl	8008e48 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8007a96:	f107 030c 	add.w	r3, r7, #12
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	49ba      	ldr	r1, [pc, #744]	; (8007d88 <cppLoop+0x970>)
 8007a9e:	48bb      	ldr	r0, [pc, #748]	; (8007d8c <cppLoop+0x974>)
 8007aa0:	f7f9 fe16 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007aa4:	f107 0308 	add.w	r3, r7, #8
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	49b9      	ldr	r1, [pc, #740]	; (8007d90 <cppLoop+0x978>)
 8007aac:	48b7      	ldr	r0, [pc, #732]	; (8007d8c <cppLoop+0x974>)
 8007aae:	f7f9 fe0f 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	49b7      	ldr	r1, [pc, #732]	; (8007d94 <cppLoop+0x97c>)
 8007ab8:	48b4      	ldr	r0, [pc, #720]	; (8007d8c <cppLoop+0x974>)
 8007aba:	f7f9 fe09 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8007abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ac2:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ac6:	edd7 6a01 	vldr	s13, [r7, #4]
 8007aca:	eeb0 1a66 	vmov.f32	s2, s13
 8007ace:	eef0 0a47 	vmov.f32	s1, s14
 8007ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad6:	48b0      	ldr	r0, [pc, #704]	; (8007d98 <cppLoop+0x980>)
 8007ad8:	f7fb fea6 	bl	8003828 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4aaf      	ldr	r2, [pc, #700]	; (8007d9c <cppLoop+0x984>)
 8007ae0:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4aae      	ldr	r2, [pc, #696]	; (8007da0 <cppLoop+0x988>)
 8007ae6:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4aae      	ldr	r2, [pc, #696]	; (8007da4 <cppLoop+0x98c>)
 8007aec:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007aee:	2200      	movs	r2, #0
 8007af0:	f04f 31ff 	mov.w	r1, #4294967295
 8007af4:	48a3      	ldr	r0, [pc, #652]	; (8007d84 <cppLoop+0x96c>)
 8007af6:	f7fa fabd 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007afa:	f001 b86a 	b.w	8008bd2 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_C){
 8007afe:	48a0      	ldr	r0, [pc, #640]	; (8007d80 <cppLoop+0x968>)
 8007b00:	f7fa f998 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f001 805e 	beq.w	8008bd2 <cppLoop+0x17ba>
			led.LR(-1, 1);
 8007b16:	2201      	movs	r2, #1
 8007b18:	f04f 31ff 	mov.w	r1, #4294967295
 8007b1c:	4899      	ldr	r0, [pc, #612]	; (8007d84 <cppLoop+0x96c>)
 8007b1e:	f7fa faa9 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007b22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007b26:	f001 f98f 	bl	8008e48 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4b9b      	ldr	r3, [pc, #620]	; (8007d9c <cppLoop+0x984>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	4995      	ldr	r1, [pc, #596]	; (8007d88 <cppLoop+0x970>)
 8007b34:	4895      	ldr	r0, [pc, #596]	; (8007d8c <cppLoop+0x974>)
 8007b36:	f7f9 fd65 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4b98      	ldr	r3, [pc, #608]	; (8007da0 <cppLoop+0x988>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	4993      	ldr	r1, [pc, #588]	; (8007d90 <cppLoop+0x978>)
 8007b44:	4891      	ldr	r0, [pc, #580]	; (8007d8c <cppLoop+0x974>)
 8007b46:	f7f9 fd5d 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4b95      	ldr	r3, [pc, #596]	; (8007da4 <cppLoop+0x98c>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	4990      	ldr	r1, [pc, #576]	; (8007d94 <cppLoop+0x97c>)
 8007b54:	488d      	ldr	r0, [pc, #564]	; (8007d8c <cppLoop+0x974>)
 8007b56:	f7f9 fd55 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007b5a:	4b90      	ldr	r3, [pc, #576]	; (8007d9c <cppLoop+0x984>)
 8007b5c:	edd3 7a00 	vldr	s15, [r3]
 8007b60:	4b8f      	ldr	r3, [pc, #572]	; (8007da0 <cppLoop+0x988>)
 8007b62:	ed93 7a00 	vldr	s14, [r3]
 8007b66:	4b8f      	ldr	r3, [pc, #572]	; (8007da4 <cppLoop+0x98c>)
 8007b68:	edd3 6a00 	vldr	s13, [r3]
 8007b6c:	eeb0 1a66 	vmov.f32	s2, s13
 8007b70:	eef0 0a47 	vmov.f32	s1, s14
 8007b74:	eeb0 0a67 	vmov.f32	s0, s15
 8007b78:	4887      	ldr	r0, [pc, #540]	; (8007d98 <cppLoop+0x980>)
 8007b7a:	f7fb fe55 	bl	8003828 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f04f 31ff 	mov.w	r1, #4294967295
 8007b84:	487f      	ldr	r0, [pc, #508]	; (8007d84 <cppLoop+0x96c>)
 8007b86:	f7fa fa75 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b8a:	f001 b822 	b.w	8008bd2 <cppLoop+0x17ba>

	case 1:
		led.fullColor('C');
 8007b8e:	2143      	movs	r1, #67	; 0x43
 8007b90:	487c      	ldr	r0, [pc, #496]	; (8007d84 <cppLoop+0x96c>)
 8007b92:	f7fa f9b3 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b96:	f7f9 fa83 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7f9 fa8f 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007ba2:	4881      	ldr	r0, [pc, #516]	; (8007da8 <cppLoop+0x990>)
 8007ba4:	f7f9 fab6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ba8:	2101      	movs	r1, #1
 8007baa:	2000      	movs	r0, #0
 8007bac:	f7f9 fa88 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007bb0:	4b7e      	ldr	r3, [pc, #504]	; (8007dac <cppLoop+0x994>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f8 fcdf 	bl	8000578 <__aeabi_f2d>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	487b      	ldr	r0, [pc, #492]	; (8007db0 <cppLoop+0x998>)
 8007bc4:	f7f9 faa6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007bc8:	486d      	ldr	r0, [pc, #436]	; (8007d80 <cppLoop+0x968>)
 8007bca:	f7fa f933 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 87fb 	beq.w	8008bd6 <cppLoop+0x17be>
			HAL_Delay(500);
 8007be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007be4:	f001 f930 	bl	8008e48 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007be8:	4b70      	ldr	r3, [pc, #448]	; (8007dac <cppLoop+0x994>)
 8007bea:	edd3 7a00 	vldr	s15, [r3]
 8007bee:	eeb0 0a67 	vmov.f32	s0, s15
 8007bf2:	4869      	ldr	r0, [pc, #420]	; (8007d98 <cppLoop+0x980>)
 8007bf4:	f7fb fe6d 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4861      	ldr	r0, [pc, #388]	; (8007d84 <cppLoop+0x96c>)
 8007c00:	f7fa fa38 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007c04:	2100      	movs	r1, #0
 8007c06:	4864      	ldr	r0, [pc, #400]	; (8007d98 <cppLoop+0x980>)
 8007c08:	f7fc f9d8 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007c0c:	4862      	ldr	r0, [pc, #392]	; (8007d98 <cppLoop+0x980>)
 8007c0e:	f7fc f8d7 	bl	8003dc0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295
 8007c16:	2100      	movs	r1, #0
 8007c18:	485a      	ldr	r0, [pc, #360]	; (8007d84 <cppLoop+0x96c>)
 8007c1a:	f7fa fa2b 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007c1e:	f000 bfda 	b.w	8008bd6 <cppLoop+0x17be>

	case 2:
		led.fullColor('B');
 8007c22:	2142      	movs	r1, #66	; 0x42
 8007c24:	4857      	ldr	r0, [pc, #348]	; (8007d84 <cppLoop+0x96c>)
 8007c26:	f7fa f969 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c2a:	f7f9 fa39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	2000      	movs	r0, #0
 8007c32:	f7f9 fa45 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007c36:	485c      	ldr	r0, [pc, #368]	; (8007da8 <cppLoop+0x990>)
 8007c38:	f7f9 fa6c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f7f9 fa3e 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007c44:	4b59      	ldr	r3, [pc, #356]	; (8007dac <cppLoop+0x994>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7f8 fc95 	bl	8000578 <__aeabi_f2d>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	460c      	mov	r4, r1
 8007c52:	461a      	mov	r2, r3
 8007c54:	4623      	mov	r3, r4
 8007c56:	4857      	ldr	r0, [pc, #348]	; (8007db4 <cppLoop+0x99c>)
 8007c58:	f7f9 fa5c 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007c5c:	4848      	ldr	r0, [pc, #288]	; (8007d80 <cppLoop+0x968>)
 8007c5e:	f7fa f8e9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d023      	beq.n	8007cba <cppLoop+0x8a2>
			led.LR(-1, 1);
 8007c72:	2201      	movs	r2, #1
 8007c74:	f04f 31ff 	mov.w	r1, #4294967295
 8007c78:	4842      	ldr	r0, [pc, #264]	; (8007d84 <cppLoop+0x96c>)
 8007c7a:	f7fa f9fb 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c7e:	2064      	movs	r0, #100	; 0x64
 8007c80:	f001 f8e2 	bl	8008e48 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007c84:	4b49      	ldr	r3, [pc, #292]	; (8007dac <cppLoop+0x994>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7f8 fc75 	bl	8000578 <__aeabi_f2d>
 8007c8e:	a33a      	add	r3, pc, #232	; (adr r3, 8007d78 <cppLoop+0x960>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fb12 	bl	80002bc <__adddf3>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f7f8 ffba 	bl	8000c18 <__aeabi_d2f>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	4b41      	ldr	r3, [pc, #260]	; (8007dac <cppLoop+0x994>)
 8007ca8:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007caa:	2200      	movs	r2, #0
 8007cac:	f04f 31ff 	mov.w	r1, #4294967295
 8007cb0:	4834      	ldr	r0, [pc, #208]	; (8007d84 <cppLoop+0x96c>)
 8007cb2:	f7fa f9df 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007cb6:	f000 bf90 	b.w	8008bda <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_L){
 8007cba:	4831      	ldr	r0, [pc, #196]	; (8007d80 <cppLoop+0x968>)
 8007cbc:	f7fa f8ba 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	bf0c      	ite	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	2300      	movne	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d023      	beq.n	8007d18 <cppLoop+0x900>
			led.LR(-1, 1);
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd6:	482b      	ldr	r0, [pc, #172]	; (8007d84 <cppLoop+0x96c>)
 8007cd8:	f7fa f9cc 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007cdc:	2064      	movs	r0, #100	; 0x64
 8007cde:	f001 f8b3 	bl	8008e48 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007ce2:	4b32      	ldr	r3, [pc, #200]	; (8007dac <cppLoop+0x994>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7f8 fc46 	bl	8000578 <__aeabi_f2d>
 8007cec:	a322      	add	r3, pc, #136	; (adr r3, 8007d78 <cppLoop+0x960>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fae1 	bl	80002b8 <__aeabi_dsub>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	f7f8 ff8b 	bl	8000c18 <__aeabi_d2f>
 8007d02:	4602      	mov	r2, r0
 8007d04:	4b29      	ldr	r3, [pc, #164]	; (8007dac <cppLoop+0x994>)
 8007d06:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d0e:	481d      	ldr	r0, [pc, #116]	; (8007d84 <cppLoop+0x96c>)
 8007d10:	f7fa f9b0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007d14:	f000 bf61 	b.w	8008bda <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_C){
 8007d18:	4819      	ldr	r0, [pc, #100]	; (8007d80 <cppLoop+0x968>)
 8007d1a:	f7fa f88b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8755 	beq.w	8008bda <cppLoop+0x17c2>
			led.LR(-1, 1);
 8007d30:	2201      	movs	r2, #1
 8007d32:	f04f 31ff 	mov.w	r1, #4294967295
 8007d36:	4813      	ldr	r0, [pc, #76]	; (8007d84 <cppLoop+0x96c>)
 8007d38:	f7fa f99c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007d3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d40:	f001 f882 	bl	8008e48 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007d44:	2300      	movs	r3, #0
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4b18      	ldr	r3, [pc, #96]	; (8007dac <cppLoop+0x994>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	491a      	ldr	r1, [pc, #104]	; (8007db8 <cppLoop+0x9a0>)
 8007d4e:	480f      	ldr	r0, [pc, #60]	; (8007d8c <cppLoop+0x974>)
 8007d50:	f7f9 fc58 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007d54:	4b15      	ldr	r3, [pc, #84]	; (8007dac <cppLoop+0x994>)
 8007d56:	edd3 7a00 	vldr	s15, [r3]
 8007d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5e:	480e      	ldr	r0, [pc, #56]	; (8007d98 <cppLoop+0x980>)
 8007d60:	f7fb fdb7 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007d64:	2200      	movs	r2, #0
 8007d66:	f04f 31ff 	mov.w	r1, #4294967295
 8007d6a:	4806      	ldr	r0, [pc, #24]	; (8007d84 <cppLoop+0x96c>)
 8007d6c:	f7fa f982 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007d70:	f000 bf33 	b.w	8008bda <cppLoop+0x17c2>
 8007d74:	f3af 8000 	nop.w
 8007d78:	9999999a 	.word	0x9999999a
 8007d7c:	3fb99999 	.word	0x3fb99999
 8007d80:	200005c0 	.word	0x200005c0
 8007d84:	200005cc 	.word	0x200005cc
 8007d88:	0801910c 	.word	0x0801910c
 8007d8c:	08019114 	.word	0x08019114
 8007d90:	0801911c 	.word	0x0801911c
 8007d94:	08019124 	.word	0x08019124
 8007d98:	20017da0 	.word	0x20017da0
 8007d9c:	2003c444 	.word	0x2003c444
 8007da0:	2003c44c 	.word	0x2003c44c
 8007da4:	2003c454 	.word	0x2003c454
 8007da8:	0801912c 	.word	0x0801912c
 8007dac:	2003c45c 	.word	0x2003c45c
 8007db0:	08019138 	.word	0x08019138
 8007db4:	08019144 	.word	0x08019144
 8007db8:	08019150 	.word	0x08019150

	case 3:
		led.fullColor('Y');
 8007dbc:	2159      	movs	r1, #89	; 0x59
 8007dbe:	48aa      	ldr	r0, [pc, #680]	; (8008068 <cppLoop+0xc50>)
 8007dc0:	f7fa f89c 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007dc4:	f7f9 f96c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007dc8:	2100      	movs	r1, #0
 8007dca:	2000      	movs	r0, #0
 8007dcc:	f7f9 f978 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007dd0:	4ba6      	ldr	r3, [pc, #664]	; (800806c <cppLoop+0xc54>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f8 fbcf 	bl	8000578 <__aeabi_f2d>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	461a      	mov	r2, r3
 8007de0:	4623      	mov	r3, r4
 8007de2:	48a3      	ldr	r0, [pc, #652]	; (8008070 <cppLoop+0xc58>)
 8007de4:	f7f9 f996 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007de8:	2101      	movs	r1, #1
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7f9 f968 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007df0:	4ba0      	ldr	r3, [pc, #640]	; (8008074 <cppLoop+0xc5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f8 fbbf 	bl	8000578 <__aeabi_f2d>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4623      	mov	r3, r4
 8007e02:	489d      	ldr	r0, [pc, #628]	; (8008078 <cppLoop+0xc60>)
 8007e04:	f7f9 f986 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007e08:	489c      	ldr	r0, [pc, #624]	; (800807c <cppLoop+0xc64>)
 8007e0a:	f7fa f813 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 86df 	beq.w	8008bde <cppLoop+0x17c6>
			HAL_Delay(500);
 8007e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e24:	f001 f810 	bl	8008e48 <HAL_Delay>

			led.LR(1, -1);
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	488e      	ldr	r0, [pc, #568]	; (8008068 <cppLoop+0xc50>)
 8007e30:	f7fa f920 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007e34:	2101      	movs	r1, #1
 8007e36:	4892      	ldr	r0, [pc, #584]	; (8008080 <cppLoop+0xc68>)
 8007e38:	f7fc f8c0 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007e3c:	4b8d      	ldr	r3, [pc, #564]	; (8008074 <cppLoop+0xc5c>)
 8007e3e:	edd3 7a00 	vldr	s15, [r3]
 8007e42:	eeb0 0a67 	vmov.f32	s0, s15
 8007e46:	488e      	ldr	r0, [pc, #568]	; (8008080 <cppLoop+0xc68>)
 8007e48:	f7fb fd43 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007e4c:	4b87      	ldr	r3, [pc, #540]	; (800806c <cppLoop+0xc54>)
 8007e4e:	edd3 7a00 	vldr	s15, [r3]
 8007e52:	eeb0 0a67 	vmov.f32	s0, s15
 8007e56:	488a      	ldr	r0, [pc, #552]	; (8008080 <cppLoop+0xc68>)
 8007e58:	f7fb fd4a 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007e5c:	4b85      	ldr	r3, [pc, #532]	; (8008074 <cppLoop+0xc5c>)
 8007e5e:	edd3 7a00 	vldr	s15, [r3]
 8007e62:	eeb0 0a67 	vmov.f32	s0, s15
 8007e66:	4886      	ldr	r0, [pc, #536]	; (8008080 <cppLoop+0xc68>)
 8007e68:	f7fb fd61 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007e6c:	4884      	ldr	r0, [pc, #528]	; (8008080 <cppLoop+0xc68>)
 8007e6e:	f7fb f84f 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007e72:	4883      	ldr	r0, [pc, #524]	; (8008080 <cppLoop+0xc68>)
 8007e74:	f7fb ffa4 	bl	8003dc0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	487a      	ldr	r0, [pc, #488]	; (8008068 <cppLoop+0xc50>)
 8007e80:	f7fa f8f8 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007e84:	f000 beab 	b.w	8008bde <cppLoop+0x17c6>

	case 4:
		led.fullColor('G');
 8007e88:	2147      	movs	r1, #71	; 0x47
 8007e8a:	4877      	ldr	r0, [pc, #476]	; (8008068 <cppLoop+0xc50>)
 8007e8c:	f7fa f836 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e90:	f7f9 f906 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e94:	2100      	movs	r1, #0
 8007e96:	2000      	movs	r0, #0
 8007e98:	f7f9 f912 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007e9c:	4878      	ldr	r0, [pc, #480]	; (8008080 <cppLoop+0xc68>)
 8007e9e:	f7fb fd75 	bl	800398c <_ZN9LineTrace14getMaxVelocityEv>
 8007ea2:	ee10 3a10 	vmov	r3, s0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 fb66 	bl	8000578 <__aeabi_f2d>
 8007eac:	4603      	mov	r3, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	486e      	ldr	r0, [pc, #440]	; (8008070 <cppLoop+0xc58>)
 8007eb6:	f7f9 f92d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007eba:	2101      	movs	r1, #1
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f7f9 f8ff 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007ec2:	486f      	ldr	r0, [pc, #444]	; (8008080 <cppLoop+0xc68>)
 8007ec4:	f7fb fd81 	bl	80039ca <_ZN9LineTrace14getMinVelocityEv>
 8007ec8:	ee10 3a10 	vmov	r3, s0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb53 	bl	8000578 <__aeabi_f2d>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4623      	mov	r3, r4
 8007eda:	486a      	ldr	r0, [pc, #424]	; (8008084 <cppLoop+0xc6c>)
 8007edc:	f7f9 f91a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007ee0:	4866      	ldr	r0, [pc, #408]	; (800807c <cppLoop+0xc64>)
 8007ee2:	f7f9 ffa7 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	bf0c      	ite	eq
 8007eec:	2301      	moveq	r3, #1
 8007eee:	2300      	movne	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d022      	beq.n	8007f3c <cppLoop+0xb24>
			led.LR(-1, 1);
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8007efc:	485a      	ldr	r0, [pc, #360]	; (8008068 <cppLoop+0xc50>)
 8007efe:	f7fa f8b9 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f06:	f000 ff9f 	bl	8008e48 <HAL_Delay>

			selector_vel++;
 8007f0a:	4b5f      	ldr	r3, [pc, #380]	; (8008088 <cppLoop+0xc70>)
 8007f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3301      	adds	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	b21a      	sxth	r2, r3
 8007f18:	4b5b      	ldr	r3, [pc, #364]	; (8008088 <cppLoop+0xc70>)
 8007f1a:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007f1c:	4b5a      	ldr	r3, [pc, #360]	; (8008088 <cppLoop+0xc70>)
 8007f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	dd02      	ble.n	8007f2c <cppLoop+0xb14>
 8007f26:	4b58      	ldr	r3, [pc, #352]	; (8008088 <cppLoop+0xc70>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f32:	484d      	ldr	r0, [pc, #308]	; (8008068 <cppLoop+0xc50>)
 8007f34:	f7fa f89e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007f38:	f000 be53 	b.w	8008be2 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_R){
 8007f3c:	484f      	ldr	r0, [pc, #316]	; (800807c <cppLoop+0xc64>)
 8007f3e:	f7f9 ff79 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	bf0c      	ite	eq
 8007f48:	2301      	moveq	r3, #1
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d03c      	beq.n	8007fcc <cppLoop+0xbb4>
			led.LR(-1, 1);
 8007f52:	2201      	movs	r2, #1
 8007f54:	f04f 31ff 	mov.w	r1, #4294967295
 8007f58:	4843      	ldr	r0, [pc, #268]	; (8008068 <cppLoop+0xc50>)
 8007f5a:	f7fa f88b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f5e:	2064      	movs	r0, #100	; 0x64
 8007f60:	f000 ff72 	bl	8008e48 <HAL_Delay>
			if(selector_vel == 0)
 8007f64:	4b48      	ldr	r3, [pc, #288]	; (8008088 <cppLoop+0xc70>)
 8007f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d113      	bne.n	8007f96 <cppLoop+0xb7e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8007f6e:	4b3f      	ldr	r3, [pc, #252]	; (800806c <cppLoop+0xc54>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f8 fb00 	bl	8000578 <__aeabi_f2d>
 8007f78:	a339      	add	r3, pc, #228	; (adr r3, 8008060 <cppLoop+0xc48>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f99d 	bl	80002bc <__adddf3>
 8007f82:	4603      	mov	r3, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	4618      	mov	r0, r3
 8007f88:	4621      	mov	r1, r4
 8007f8a:	f7f8 fe45 	bl	8000c18 <__aeabi_d2f>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <cppLoop+0xc54>)
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e012      	b.n	8007fbc <cppLoop+0xba4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8007f96:	4b37      	ldr	r3, [pc, #220]	; (8008074 <cppLoop+0xc5c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 faec 	bl	8000578 <__aeabi_f2d>
 8007fa0:	a32f      	add	r3, pc, #188	; (adr r3, 8008060 <cppLoop+0xc48>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f989 	bl	80002bc <__adddf3>
 8007faa:	4603      	mov	r3, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	f7f8 fe31 	bl	8000c18 <__aeabi_d2f>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <cppLoop+0xc5c>)
 8007fba:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc2:	4829      	ldr	r0, [pc, #164]	; (8008068 <cppLoop+0xc50>)
 8007fc4:	f7fa f856 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007fc8:	f000 be0b 	b.w	8008be2 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_L){
 8007fcc:	482b      	ldr	r0, [pc, #172]	; (800807c <cppLoop+0xc64>)
 8007fce:	f7f9 ff31 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2301      	moveq	r3, #1
 8007fda:	2300      	movne	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d054      	beq.n	800808c <cppLoop+0xc74>
			led.LR(-1, 1);
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe8:	481f      	ldr	r0, [pc, #124]	; (8008068 <cppLoop+0xc50>)
 8007fea:	f7fa f843 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fee:	2064      	movs	r0, #100	; 0x64
 8007ff0:	f000 ff2a 	bl	8008e48 <HAL_Delay>
			if(selector_vel == 0)
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <cppLoop+0xc70>)
 8007ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d113      	bne.n	8008026 <cppLoop+0xc0e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	; (800806c <cppLoop+0xc54>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 fab8 	bl	8000578 <__aeabi_f2d>
 8008008:	a315      	add	r3, pc, #84	; (adr r3, 8008060 <cppLoop+0xc48>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 f953 	bl	80002b8 <__aeabi_dsub>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	4618      	mov	r0, r3
 8008018:	4621      	mov	r1, r4
 800801a:	f7f8 fdfd 	bl	8000c18 <__aeabi_d2f>
 800801e:	4602      	mov	r2, r0
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <cppLoop+0xc54>)
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e012      	b.n	800804c <cppLoop+0xc34>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008026:	4b13      	ldr	r3, [pc, #76]	; (8008074 <cppLoop+0xc5c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f7f8 faa4 	bl	8000578 <__aeabi_f2d>
 8008030:	a30b      	add	r3, pc, #44	; (adr r3, 8008060 <cppLoop+0xc48>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 f93f 	bl	80002b8 <__aeabi_dsub>
 800803a:	4603      	mov	r3, r0
 800803c:	460c      	mov	r4, r1
 800803e:	4618      	mov	r0, r3
 8008040:	4621      	mov	r1, r4
 8008042:	f7f8 fde9 	bl	8000c18 <__aeabi_d2f>
 8008046:	4602      	mov	r2, r0
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <cppLoop+0xc5c>)
 800804a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800804c:	2200      	movs	r2, #0
 800804e:	f04f 31ff 	mov.w	r1, #4294967295
 8008052:	4805      	ldr	r0, [pc, #20]	; (8008068 <cppLoop+0xc50>)
 8008054:	f7fa f80e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008058:	f000 bdc3 	b.w	8008be2 <cppLoop+0x17ca>
 800805c:	f3af 8000 	nop.w
 8008060:	9999999a 	.word	0x9999999a
 8008064:	3fb99999 	.word	0x3fb99999
 8008068:	200005cc 	.word	0x200005cc
 800806c:	2003c464 	.word	0x2003c464
 8008070:	0801915c 	.word	0x0801915c
 8008074:	2003c474 	.word	0x2003c474
 8008078:	08019138 	.word	0x08019138
 800807c:	200005c0 	.word	0x200005c0
 8008080:	20017da0 	.word	0x20017da0
 8008084:	08019144 	.word	0x08019144
 8008088:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_C){
 800808c:	48bc      	ldr	r0, [pc, #752]	; (8008380 <cppLoop+0xf68>)
 800808e:	f7f9 fed1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008092:	4603      	mov	r3, r0
 8008094:	2b02      	cmp	r3, #2
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 859f 	beq.w	8008be2 <cppLoop+0x17ca>
			led.LR(-1, 1);
 80080a4:	2201      	movs	r2, #1
 80080a6:	f04f 31ff 	mov.w	r1, #4294967295
 80080aa:	48b6      	ldr	r0, [pc, #728]	; (8008384 <cppLoop+0xf6c>)
 80080ac:	f7f9 ffe2 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080b4:	f000 fec8 	bl	8008e48 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80080b8:	2300      	movs	r3, #0
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4bb2      	ldr	r3, [pc, #712]	; (8008388 <cppLoop+0xf70>)
 80080be:	2201      	movs	r2, #1
 80080c0:	49b2      	ldr	r1, [pc, #712]	; (800838c <cppLoop+0xf74>)
 80080c2:	48b3      	ldr	r0, [pc, #716]	; (8008390 <cppLoop+0xf78>)
 80080c4:	f7f9 fa9e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80080c8:	2300      	movs	r3, #0
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4bb1      	ldr	r3, [pc, #708]	; (8008394 <cppLoop+0xf7c>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	49b1      	ldr	r1, [pc, #708]	; (8008398 <cppLoop+0xf80>)
 80080d2:	48af      	ldr	r0, [pc, #700]	; (8008390 <cppLoop+0xf78>)
 80080d4:	f7f9 fa96 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80080d8:	4bab      	ldr	r3, [pc, #684]	; (8008388 <cppLoop+0xf70>)
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	eeb0 0a67 	vmov.f32	s0, s15
 80080e2:	48ae      	ldr	r0, [pc, #696]	; (800839c <cppLoop+0xf84>)
 80080e4:	f7fb fc04 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80080e8:	4baa      	ldr	r3, [pc, #680]	; (8008394 <cppLoop+0xf7c>)
 80080ea:	edd3 7a00 	vldr	s15, [r3]
 80080ee:	eeb0 0a67 	vmov.f32	s0, s15
 80080f2:	48aa      	ldr	r0, [pc, #680]	; (800839c <cppLoop+0xf84>)
 80080f4:	f7fb fc1b 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80080f8:	2200      	movs	r2, #0
 80080fa:	f04f 31ff 	mov.w	r1, #4294967295
 80080fe:	48a1      	ldr	r0, [pc, #644]	; (8008384 <cppLoop+0xf6c>)
 8008100:	f7f9 ffb8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008104:	f000 bd6d 	b.w	8008be2 <cppLoop+0x17ca>

	case 5:
		led.fullColor('M');
 8008108:	214d      	movs	r1, #77	; 0x4d
 800810a:	489e      	ldr	r0, [pc, #632]	; (8008384 <cppLoop+0xf6c>)
 800810c:	f7f9 fef6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008110:	f7f8 ffc6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008114:	2100      	movs	r1, #0
 8008116:	2000      	movs	r0, #0
 8008118:	f7f8 ffd2 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 800811c:	4ba0      	ldr	r3, [pc, #640]	; (80083a0 <cppLoop+0xf88>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f7f8 fa29 	bl	8000578 <__aeabi_f2d>
 8008126:	4603      	mov	r3, r0
 8008128:	460c      	mov	r4, r1
 800812a:	461a      	mov	r2, r3
 800812c:	4623      	mov	r3, r4
 800812e:	489d      	ldr	r0, [pc, #628]	; (80083a4 <cppLoop+0xf8c>)
 8008130:	f7f8 fff0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008134:	2101      	movs	r1, #1
 8008136:	2000      	movs	r0, #0
 8008138:	f7f8 ffc2 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800813c:	4b9a      	ldr	r3, [pc, #616]	; (80083a8 <cppLoop+0xf90>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f7f8 fa19 	bl	8000578 <__aeabi_f2d>
 8008146:	4603      	mov	r3, r0
 8008148:	460c      	mov	r4, r1
 800814a:	461a      	mov	r2, r3
 800814c:	4623      	mov	r3, r4
 800814e:	4897      	ldr	r0, [pc, #604]	; (80083ac <cppLoop+0xf94>)
 8008150:	f7f8 ffe0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008154:	488a      	ldr	r0, [pc, #552]	; (8008380 <cppLoop+0xf68>)
 8008156:	f7f9 fe6d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800815a:	4603      	mov	r3, r0
 800815c:	2b02      	cmp	r3, #2
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 853d 	beq.w	8008be6 <cppLoop+0x17ce>
			HAL_Delay(500);
 800816c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008170:	f000 fe6a 	bl	8008e48 <HAL_Delay>

			led.LR(1, -1);
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	2101      	movs	r1, #1
 800817a:	4882      	ldr	r0, [pc, #520]	; (8008384 <cppLoop+0xf6c>)
 800817c:	f7f9 ff7a 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008180:	2102      	movs	r1, #2
 8008182:	4886      	ldr	r0, [pc, #536]	; (800839c <cppLoop+0xf84>)
 8008184:	f7fb ff1a 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008188:	4b87      	ldr	r3, [pc, #540]	; (80083a8 <cppLoop+0xf90>)
 800818a:	edd3 7a00 	vldr	s15, [r3]
 800818e:	eeb0 0a67 	vmov.f32	s0, s15
 8008192:	4882      	ldr	r0, [pc, #520]	; (800839c <cppLoop+0xf84>)
 8008194:	f7fb fb9d 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008198:	4b81      	ldr	r3, [pc, #516]	; (80083a0 <cppLoop+0xf88>)
 800819a:	edd3 7a00 	vldr	s15, [r3]
 800819e:	eeb0 0a67 	vmov.f32	s0, s15
 80081a2:	487e      	ldr	r0, [pc, #504]	; (800839c <cppLoop+0xf84>)
 80081a4:	f7fb fbb3 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80081a8:	4b7f      	ldr	r3, [pc, #508]	; (80083a8 <cppLoop+0xf90>)
 80081aa:	edd3 7a00 	vldr	s15, [r3]
 80081ae:	eeb0 0a67 	vmov.f32	s0, s15
 80081b2:	487a      	ldr	r0, [pc, #488]	; (800839c <cppLoop+0xf84>)
 80081b4:	f7fb fbcb 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80081b8:	4878      	ldr	r0, [pc, #480]	; (800839c <cppLoop+0xf84>)
 80081ba:	f7fa fea9 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80081be:	4877      	ldr	r0, [pc, #476]	; (800839c <cppLoop+0xf84>)
 80081c0:	f7fb fdfe 	bl	8003dc0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	2100      	movs	r1, #0
 80081ca:	486e      	ldr	r0, [pc, #440]	; (8008384 <cppLoop+0xf6c>)
 80081cc:	f7f9 ff52 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80081d0:	f000 bd09 	b.w	8008be6 <cppLoop+0x17ce>

	case 6:
		led.fullColor('R');
 80081d4:	2152      	movs	r1, #82	; 0x52
 80081d6:	486b      	ldr	r0, [pc, #428]	; (8008384 <cppLoop+0xf6c>)
 80081d8:	f7f9 fe90 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80081dc:	f7f8 ff60 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081e0:	2100      	movs	r1, #0
 80081e2:	2000      	movs	r0, #0
 80081e4:	f7f8 ff6c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80081e8:	486c      	ldr	r0, [pc, #432]	; (800839c <cppLoop+0xf84>)
 80081ea:	f7fb fbde 	bl	80039aa <_ZN9LineTrace15getMaxVelocity2Ev>
 80081ee:	ee10 3a10 	vmov	r3, s0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7f8 f9c0 	bl	8000578 <__aeabi_f2d>
 80081f8:	4603      	mov	r3, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	461a      	mov	r2, r3
 80081fe:	4623      	mov	r3, r4
 8008200:	4868      	ldr	r0, [pc, #416]	; (80083a4 <cppLoop+0xf8c>)
 8008202:	f7f8 ff87 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008206:	2101      	movs	r1, #1
 8008208:	2000      	movs	r0, #0
 800820a:	f7f8 ff59 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800820e:	4863      	ldr	r0, [pc, #396]	; (800839c <cppLoop+0xf84>)
 8008210:	f7fb fbeb 	bl	80039ea <_ZN9LineTrace15getMinVelocity2Ev>
 8008214:	ee10 3a10 	vmov	r3, s0
 8008218:	4618      	mov	r0, r3
 800821a:	f7f8 f9ad 	bl	8000578 <__aeabi_f2d>
 800821e:	4603      	mov	r3, r0
 8008220:	460c      	mov	r4, r1
 8008222:	461a      	mov	r2, r3
 8008224:	4623      	mov	r3, r4
 8008226:	4862      	ldr	r0, [pc, #392]	; (80083b0 <cppLoop+0xf98>)
 8008228:	f7f8 ff74 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800822c:	4854      	ldr	r0, [pc, #336]	; (8008380 <cppLoop+0xf68>)
 800822e:	f7f9 fe01 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008232:	4603      	mov	r3, r0
 8008234:	2b08      	cmp	r3, #8
 8008236:	bf0c      	ite	eq
 8008238:	2301      	moveq	r3, #1
 800823a:	2300      	movne	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d022      	beq.n	8008288 <cppLoop+0xe70>
			led.LR(-1, 1);
 8008242:	2201      	movs	r2, #1
 8008244:	f04f 31ff 	mov.w	r1, #4294967295
 8008248:	484e      	ldr	r0, [pc, #312]	; (8008384 <cppLoop+0xf6c>)
 800824a:	f7f9 ff13 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800824e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008252:	f000 fdf9 	bl	8008e48 <HAL_Delay>

			selector_vel2++;
 8008256:	4b57      	ldr	r3, [pc, #348]	; (80083b4 <cppLoop+0xf9c>)
 8008258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800825c:	b29b      	uxth	r3, r3
 800825e:	3301      	adds	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	b21a      	sxth	r2, r3
 8008264:	4b53      	ldr	r3, [pc, #332]	; (80083b4 <cppLoop+0xf9c>)
 8008266:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008268:	4b52      	ldr	r3, [pc, #328]	; (80083b4 <cppLoop+0xf9c>)
 800826a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800826e:	2b01      	cmp	r3, #1
 8008270:	dd02      	ble.n	8008278 <cppLoop+0xe60>
 8008272:	4b50      	ldr	r3, [pc, #320]	; (80083b4 <cppLoop+0xf9c>)
 8008274:	2200      	movs	r2, #0
 8008276:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008278:	2200      	movs	r2, #0
 800827a:	f04f 31ff 	mov.w	r1, #4294967295
 800827e:	4841      	ldr	r0, [pc, #260]	; (8008384 <cppLoop+0xf6c>)
 8008280:	f7f9 fef8 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008284:	f000 bcb1 	b.w	8008bea <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_R){
 8008288:	483d      	ldr	r0, [pc, #244]	; (8008380 <cppLoop+0xf68>)
 800828a:	f7f9 fdd3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800828e:	4603      	mov	r3, r0
 8008290:	2b10      	cmp	r3, #16
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d03c      	beq.n	8008318 <cppLoop+0xf00>
			led.LR(-1, 1);
 800829e:	2201      	movs	r2, #1
 80082a0:	f04f 31ff 	mov.w	r1, #4294967295
 80082a4:	4837      	ldr	r0, [pc, #220]	; (8008384 <cppLoop+0xf6c>)
 80082a6:	f7f9 fee5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082aa:	2064      	movs	r0, #100	; 0x64
 80082ac:	f000 fdcc 	bl	8008e48 <HAL_Delay>
			if(selector_vel2 == 0)
 80082b0:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <cppLoop+0xf9c>)
 80082b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d113      	bne.n	80082e2 <cppLoop+0xeca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80082ba:	4b39      	ldr	r3, [pc, #228]	; (80083a0 <cppLoop+0xf88>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f8 f95a 	bl	8000578 <__aeabi_f2d>
 80082c4:	a32c      	add	r3, pc, #176	; (adr r3, 8008378 <cppLoop+0xf60>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 fff7 	bl	80002bc <__adddf3>
 80082ce:	4603      	mov	r3, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	4618      	mov	r0, r3
 80082d4:	4621      	mov	r1, r4
 80082d6:	f7f8 fc9f 	bl	8000c18 <__aeabi_d2f>
 80082da:	4602      	mov	r2, r0
 80082dc:	4b30      	ldr	r3, [pc, #192]	; (80083a0 <cppLoop+0xf88>)
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e012      	b.n	8008308 <cppLoop+0xef0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80082e2:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <cppLoop+0xf90>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f8 f946 	bl	8000578 <__aeabi_f2d>
 80082ec:	a322      	add	r3, pc, #136	; (adr r3, 8008378 <cppLoop+0xf60>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f7f7 ffe3 	bl	80002bc <__adddf3>
 80082f6:	4603      	mov	r3, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	4618      	mov	r0, r3
 80082fc:	4621      	mov	r1, r4
 80082fe:	f7f8 fc8b 	bl	8000c18 <__aeabi_d2f>
 8008302:	4602      	mov	r2, r0
 8008304:	4b28      	ldr	r3, [pc, #160]	; (80083a8 <cppLoop+0xf90>)
 8008306:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008308:	2200      	movs	r2, #0
 800830a:	f04f 31ff 	mov.w	r1, #4294967295
 800830e:	481d      	ldr	r0, [pc, #116]	; (8008384 <cppLoop+0xf6c>)
 8008310:	f7f9 feb0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008314:	f000 bc69 	b.w	8008bea <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_L){
 8008318:	4819      	ldr	r0, [pc, #100]	; (8008380 <cppLoop+0xf68>)
 800831a:	f7f9 fd8b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d05e      	beq.n	80083ec <cppLoop+0xfd4>
			led.LR(-1, 1);
 800832e:	2201      	movs	r2, #1
 8008330:	f04f 31ff 	mov.w	r1, #4294967295
 8008334:	4813      	ldr	r0, [pc, #76]	; (8008384 <cppLoop+0xf6c>)
 8008336:	f7f9 fe9d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800833a:	2064      	movs	r0, #100	; 0x64
 800833c:	f000 fd84 	bl	8008e48 <HAL_Delay>
			if(selector_vel2 == 0)
 8008340:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <cppLoop+0xf9c>)
 8008342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d136      	bne.n	80083b8 <cppLoop+0xfa0>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <cppLoop+0xf88>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7f8 f912 	bl	8000578 <__aeabi_f2d>
 8008354:	a308      	add	r3, pc, #32	; (adr r3, 8008378 <cppLoop+0xf60>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ffad 	bl	80002b8 <__aeabi_dsub>
 800835e:	4603      	mov	r3, r0
 8008360:	460c      	mov	r4, r1
 8008362:	4618      	mov	r0, r3
 8008364:	4621      	mov	r1, r4
 8008366:	f7f8 fc57 	bl	8000c18 <__aeabi_d2f>
 800836a:	4602      	mov	r2, r0
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <cppLoop+0xf88>)
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e035      	b.n	80083de <cppLoop+0xfc6>
 8008372:	bf00      	nop
 8008374:	f3af 8000 	nop.w
 8008378:	9999999a 	.word	0x9999999a
 800837c:	3fb99999 	.word	0x3fb99999
 8008380:	200005c0 	.word	0x200005c0
 8008384:	200005cc 	.word	0x200005cc
 8008388:	2003c464 	.word	0x2003c464
 800838c:	08019168 	.word	0x08019168
 8008390:	08019114 	.word	0x08019114
 8008394:	2003c474 	.word	0x2003c474
 8008398:	08019174 	.word	0x08019174
 800839c:	20017da0 	.word	0x20017da0
 80083a0:	2003c46c 	.word	0x2003c46c
 80083a4:	08019180 	.word	0x08019180
 80083a8:	2003c47c 	.word	0x2003c47c
 80083ac:	08019138 	.word	0x08019138
 80083b0:	08019144 	.word	0x08019144
 80083b4:	2003c442 	.word	0x2003c442
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80083b8:	4bbd      	ldr	r3, [pc, #756]	; (80086b0 <cppLoop+0x1298>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7f8 f8db 	bl	8000578 <__aeabi_f2d>
 80083c2:	a3b9      	add	r3, pc, #740	; (adr r3, 80086a8 <cppLoop+0x1290>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f7 ff76 	bl	80002b8 <__aeabi_dsub>
 80083cc:	4603      	mov	r3, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	4618      	mov	r0, r3
 80083d2:	4621      	mov	r1, r4
 80083d4:	f7f8 fc20 	bl	8000c18 <__aeabi_d2f>
 80083d8:	4602      	mov	r2, r0
 80083da:	4bb5      	ldr	r3, [pc, #724]	; (80086b0 <cppLoop+0x1298>)
 80083dc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083de:	2200      	movs	r2, #0
 80083e0:	f04f 31ff 	mov.w	r1, #4294967295
 80083e4:	48b3      	ldr	r0, [pc, #716]	; (80086b4 <cppLoop+0x129c>)
 80083e6:	f7f9 fe45 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80083ea:	e3fe      	b.n	8008bea <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_C){
 80083ec:	48b2      	ldr	r0, [pc, #712]	; (80086b8 <cppLoop+0x12a0>)
 80083ee:	f7f9 fd21 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	bf0c      	ite	eq
 80083f8:	2301      	moveq	r3, #1
 80083fa:	2300      	movne	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 83f3 	beq.w	8008bea <cppLoop+0x17d2>
			led.LR(-1, 1);
 8008404:	2201      	movs	r2, #1
 8008406:	f04f 31ff 	mov.w	r1, #4294967295
 800840a:	48aa      	ldr	r0, [pc, #680]	; (80086b4 <cppLoop+0x129c>)
 800840c:	f7f9 fe32 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008410:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008414:	f000 fd18 	bl	8008e48 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4ba7      	ldr	r3, [pc, #668]	; (80086bc <cppLoop+0x12a4>)
 800841e:	2201      	movs	r2, #1
 8008420:	49a7      	ldr	r1, [pc, #668]	; (80086c0 <cppLoop+0x12a8>)
 8008422:	48a8      	ldr	r0, [pc, #672]	; (80086c4 <cppLoop+0x12ac>)
 8008424:	f7f9 f8ee 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4ba0      	ldr	r3, [pc, #640]	; (80086b0 <cppLoop+0x1298>)
 800842e:	2201      	movs	r2, #1
 8008430:	49a5      	ldr	r1, [pc, #660]	; (80086c8 <cppLoop+0x12b0>)
 8008432:	48a4      	ldr	r0, [pc, #656]	; (80086c4 <cppLoop+0x12ac>)
 8008434:	f7f9 f8e6 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008438:	4ba0      	ldr	r3, [pc, #640]	; (80086bc <cppLoop+0x12a4>)
 800843a:	edd3 7a00 	vldr	s15, [r3]
 800843e:	eeb0 0a67 	vmov.f32	s0, s15
 8008442:	48a2      	ldr	r0, [pc, #648]	; (80086cc <cppLoop+0x12b4>)
 8008444:	f7fb fa63 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008448:	4b99      	ldr	r3, [pc, #612]	; (80086b0 <cppLoop+0x1298>)
 800844a:	edd3 7a00 	vldr	s15, [r3]
 800844e:	eeb0 0a67 	vmov.f32	s0, s15
 8008452:	489e      	ldr	r0, [pc, #632]	; (80086cc <cppLoop+0x12b4>)
 8008454:	f7fb fa7b 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008458:	2200      	movs	r2, #0
 800845a:	f04f 31ff 	mov.w	r1, #4294967295
 800845e:	4895      	ldr	r0, [pc, #596]	; (80086b4 <cppLoop+0x129c>)
 8008460:	f7f9 fe08 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008464:	e3c1      	b.n	8008bea <cppLoop+0x17d2>

	case 7:
		led.fullColor('W');
 8008466:	2157      	movs	r1, #87	; 0x57
 8008468:	4892      	ldr	r0, [pc, #584]	; (80086b4 <cppLoop+0x129c>)
 800846a:	f7f9 fd47 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800846e:	f7f8 fe17 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008472:	2100      	movs	r1, #0
 8008474:	2000      	movs	r0, #0
 8008476:	f7f8 fe23 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800847a:	4894      	ldr	r0, [pc, #592]	; (80086cc <cppLoop+0x12b4>)
 800847c:	f7fb fadf 	bl	8003a3e <_ZN9LineTrace9getMaxAccEv>
 8008480:	ee10 3a10 	vmov	r3, s0
 8008484:	4618      	mov	r0, r3
 8008486:	f7f8 f877 	bl	8000578 <__aeabi_f2d>
 800848a:	4603      	mov	r3, r0
 800848c:	460c      	mov	r4, r1
 800848e:	461a      	mov	r2, r3
 8008490:	4623      	mov	r3, r4
 8008492:	488f      	ldr	r0, [pc, #572]	; (80086d0 <cppLoop+0x12b8>)
 8008494:	f7f8 fe3e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008498:	2101      	movs	r1, #1
 800849a:	2000      	movs	r0, #0
 800849c:	f7f8 fe10 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80084a0:	488a      	ldr	r0, [pc, #552]	; (80086cc <cppLoop+0x12b4>)
 80084a2:	f7fb fade 	bl	8003a62 <_ZN9LineTrace9getMaxDecEv>
 80084a6:	ee10 3a10 	vmov	r3, s0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f8 f864 	bl	8000578 <__aeabi_f2d>
 80084b0:	4603      	mov	r3, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	461a      	mov	r2, r3
 80084b6:	4623      	mov	r3, r4
 80084b8:	4886      	ldr	r0, [pc, #536]	; (80086d4 <cppLoop+0x12bc>)
 80084ba:	f7f8 fe2b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084be:	487e      	ldr	r0, [pc, #504]	; (80086b8 <cppLoop+0x12a0>)
 80084c0:	f7f9 fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	bf0c      	ite	eq
 80084ca:	2301      	moveq	r3, #1
 80084cc:	2300      	movne	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d021      	beq.n	8008518 <cppLoop+0x1100>
			led.LR(-1, 1);
 80084d4:	2201      	movs	r2, #1
 80084d6:	f04f 31ff 	mov.w	r1, #4294967295
 80084da:	4876      	ldr	r0, [pc, #472]	; (80086b4 <cppLoop+0x129c>)
 80084dc:	f7f9 fdca 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084e4:	f000 fcb0 	bl	8008e48 <HAL_Delay>

			selector_acc++;
 80084e8:	4b7b      	ldr	r3, [pc, #492]	; (80086d8 <cppLoop+0x12c0>)
 80084ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3301      	adds	r3, #1
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	b21a      	sxth	r2, r3
 80084f6:	4b78      	ldr	r3, [pc, #480]	; (80086d8 <cppLoop+0x12c0>)
 80084f8:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80084fa:	4b77      	ldr	r3, [pc, #476]	; (80086d8 <cppLoop+0x12c0>)
 80084fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008500:	2b01      	cmp	r3, #1
 8008502:	dd02      	ble.n	800850a <cppLoop+0x10f2>
 8008504:	4b74      	ldr	r3, [pc, #464]	; (80086d8 <cppLoop+0x12c0>)
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800850a:	2200      	movs	r2, #0
 800850c:	f04f 31ff 	mov.w	r1, #4294967295
 8008510:	4868      	ldr	r0, [pc, #416]	; (80086b4 <cppLoop+0x129c>)
 8008512:	f7f9 fdaf 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008516:	e36a      	b.n	8008bee <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_R){
 8008518:	4867      	ldr	r0, [pc, #412]	; (80086b8 <cppLoop+0x12a0>)
 800851a:	f7f9 fc8b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800851e:	4603      	mov	r3, r0
 8008520:	2b10      	cmp	r3, #16
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d03b      	beq.n	80085a6 <cppLoop+0x118e>
			led.LR(-1, 1);
 800852e:	2201      	movs	r2, #1
 8008530:	f04f 31ff 	mov.w	r1, #4294967295
 8008534:	485f      	ldr	r0, [pc, #380]	; (80086b4 <cppLoop+0x129c>)
 8008536:	f7f9 fd9d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800853a:	2064      	movs	r0, #100	; 0x64
 800853c:	f000 fc84 	bl	8008e48 <HAL_Delay>
			if(selector_acc == 0){
 8008540:	4b65      	ldr	r3, [pc, #404]	; (80086d8 <cppLoop+0x12c0>)
 8008542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d113      	bne.n	8008572 <cppLoop+0x115a>
				adj_acc = adj_acc + 0.1;
 800854a:	4b64      	ldr	r3, [pc, #400]	; (80086dc <cppLoop+0x12c4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7f8 f812 	bl	8000578 <__aeabi_f2d>
 8008554:	a354      	add	r3, pc, #336	; (adr r3, 80086a8 <cppLoop+0x1290>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 feaf 	bl	80002bc <__adddf3>
 800855e:	4603      	mov	r3, r0
 8008560:	460c      	mov	r4, r1
 8008562:	4618      	mov	r0, r3
 8008564:	4621      	mov	r1, r4
 8008566:	f7f8 fb57 	bl	8000c18 <__aeabi_d2f>
 800856a:	4602      	mov	r2, r0
 800856c:	4b5b      	ldr	r3, [pc, #364]	; (80086dc <cppLoop+0x12c4>)
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e012      	b.n	8008598 <cppLoop+0x1180>
				adj_dec = adj_dec + 0.1;
 8008572:	4b5b      	ldr	r3, [pc, #364]	; (80086e0 <cppLoop+0x12c8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7f7 fffe 	bl	8000578 <__aeabi_f2d>
 800857c:	a34a      	add	r3, pc, #296	; (adr r3, 80086a8 <cppLoop+0x1290>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fe9b 	bl	80002bc <__adddf3>
 8008586:	4603      	mov	r3, r0
 8008588:	460c      	mov	r4, r1
 800858a:	4618      	mov	r0, r3
 800858c:	4621      	mov	r1, r4
 800858e:	f7f8 fb43 	bl	8000c18 <__aeabi_d2f>
 8008592:	4602      	mov	r2, r0
 8008594:	4b52      	ldr	r3, [pc, #328]	; (80086e0 <cppLoop+0x12c8>)
 8008596:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008598:	2200      	movs	r2, #0
 800859a:	f04f 31ff 	mov.w	r1, #4294967295
 800859e:	4845      	ldr	r0, [pc, #276]	; (80086b4 <cppLoop+0x129c>)
 80085a0:	f7f9 fd68 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80085a4:	e323      	b.n	8008bee <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_L){
 80085a6:	4844      	ldr	r0, [pc, #272]	; (80086b8 <cppLoop+0x12a0>)
 80085a8:	f7f9 fc44 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	bf0c      	ite	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	2300      	movne	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d03b      	beq.n	8008634 <cppLoop+0x121c>
			led.LR(-1, 1);
 80085bc:	2201      	movs	r2, #1
 80085be:	f04f 31ff 	mov.w	r1, #4294967295
 80085c2:	483c      	ldr	r0, [pc, #240]	; (80086b4 <cppLoop+0x129c>)
 80085c4:	f7f9 fd56 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085c8:	2064      	movs	r0, #100	; 0x64
 80085ca:	f000 fc3d 	bl	8008e48 <HAL_Delay>
			if(selector_acc == 0){
 80085ce:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <cppLoop+0x12c0>)
 80085d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d113      	bne.n	8008600 <cppLoop+0x11e8>
				adj_acc = adj_acc - 0.1;
 80085d8:	4b40      	ldr	r3, [pc, #256]	; (80086dc <cppLoop+0x12c4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7f7 ffcb 	bl	8000578 <__aeabi_f2d>
 80085e2:	a331      	add	r3, pc, #196	; (adr r3, 80086a8 <cppLoop+0x1290>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f7 fe66 	bl	80002b8 <__aeabi_dsub>
 80085ec:	4603      	mov	r3, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4618      	mov	r0, r3
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7f8 fb10 	bl	8000c18 <__aeabi_d2f>
 80085f8:	4602      	mov	r2, r0
 80085fa:	4b38      	ldr	r3, [pc, #224]	; (80086dc <cppLoop+0x12c4>)
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e012      	b.n	8008626 <cppLoop+0x120e>
				adj_dec = adj_dec - 0.1;
 8008600:	4b37      	ldr	r3, [pc, #220]	; (80086e0 <cppLoop+0x12c8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7f7 ffb7 	bl	8000578 <__aeabi_f2d>
 800860a:	a327      	add	r3, pc, #156	; (adr r3, 80086a8 <cppLoop+0x1290>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fe52 	bl	80002b8 <__aeabi_dsub>
 8008614:	4603      	mov	r3, r0
 8008616:	460c      	mov	r4, r1
 8008618:	4618      	mov	r0, r3
 800861a:	4621      	mov	r1, r4
 800861c:	f7f8 fafc 	bl	8000c18 <__aeabi_d2f>
 8008620:	4602      	mov	r2, r0
 8008622:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <cppLoop+0x12c8>)
 8008624:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008626:	2200      	movs	r2, #0
 8008628:	f04f 31ff 	mov.w	r1, #4294967295
 800862c:	4821      	ldr	r0, [pc, #132]	; (80086b4 <cppLoop+0x129c>)
 800862e:	f7f9 fd21 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008632:	e2dc      	b.n	8008bee <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_C){
 8008634:	4820      	ldr	r0, [pc, #128]	; (80086b8 <cppLoop+0x12a0>)
 8008636:	f7f9 fbfd 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800863a:	4603      	mov	r3, r0
 800863c:	2b02      	cmp	r3, #2
 800863e:	bf0c      	ite	eq
 8008640:	2301      	moveq	r3, #1
 8008642:	2300      	movne	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 82d1 	beq.w	8008bee <cppLoop+0x17d6>
			led.LR(-1, 1);
 800864c:	2201      	movs	r2, #1
 800864e:	f04f 31ff 	mov.w	r1, #4294967295
 8008652:	4818      	ldr	r0, [pc, #96]	; (80086b4 <cppLoop+0x129c>)
 8008654:	f7f9 fd0e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008658:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800865c:	f000 fbf4 	bl	8008e48 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <cppLoop+0x12c4>)
 8008666:	2201      	movs	r2, #1
 8008668:	491e      	ldr	r1, [pc, #120]	; (80086e4 <cppLoop+0x12cc>)
 800866a:	4816      	ldr	r0, [pc, #88]	; (80086c4 <cppLoop+0x12ac>)
 800866c:	f7f8 ffca 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008670:	2300      	movs	r3, #0
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <cppLoop+0x12c8>)
 8008676:	2201      	movs	r2, #1
 8008678:	491b      	ldr	r1, [pc, #108]	; (80086e8 <cppLoop+0x12d0>)
 800867a:	4812      	ldr	r0, [pc, #72]	; (80086c4 <cppLoop+0x12ac>)
 800867c:	f7f8 ffc2 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008680:	4b16      	ldr	r3, [pc, #88]	; (80086dc <cppLoop+0x12c4>)
 8008682:	edd3 7a00 	vldr	s15, [r3]
 8008686:	4b16      	ldr	r3, [pc, #88]	; (80086e0 <cppLoop+0x12c8>)
 8008688:	ed93 7a00 	vldr	s14, [r3]
 800868c:	eef0 0a47 	vmov.f32	s1, s14
 8008690:	eeb0 0a67 	vmov.f32	s0, s15
 8008694:	480d      	ldr	r0, [pc, #52]	; (80086cc <cppLoop+0x12b4>)
 8008696:	f7fb f9b8 	bl	8003a0a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800869a:	2200      	movs	r2, #0
 800869c:	f04f 31ff 	mov.w	r1, #4294967295
 80086a0:	4804      	ldr	r0, [pc, #16]	; (80086b4 <cppLoop+0x129c>)
 80086a2:	f7f9 fce7 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80086a6:	e2a2      	b.n	8008bee <cppLoop+0x17d6>
 80086a8:	9999999a 	.word	0x9999999a
 80086ac:	3fb99999 	.word	0x3fb99999
 80086b0:	2003c47c 	.word	0x2003c47c
 80086b4:	200005cc 	.word	0x200005cc
 80086b8:	200005c0 	.word	0x200005c0
 80086bc:	2003c46c 	.word	0x2003c46c
 80086c0:	0801918c 	.word	0x0801918c
 80086c4:	08019114 	.word	0x08019114
 80086c8:	08019198 	.word	0x08019198
 80086cc:	20017da0 	.word	0x20017da0
 80086d0:	080191a4 	.word	0x080191a4
 80086d4:	080191b0 	.word	0x080191b0
 80086d8:	2003c43e 	.word	0x2003c43e
 80086dc:	2003c484 	.word	0x2003c484
 80086e0:	2003c48c 	.word	0x2003c48c
 80086e4:	080191bc 	.word	0x080191bc
 80086e8:	080191c4 	.word	0x080191c4

	case 8:
		led.fullColor('~');
 80086ec:	217e      	movs	r1, #126	; 0x7e
 80086ee:	48ca      	ldr	r0, [pc, #808]	; (8008a18 <cppLoop+0x1600>)
 80086f0:	f7f9 fc04 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80086f4:	f7f8 fcd4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086f8:	2100      	movs	r1, #0
 80086fa:	2000      	movs	r0, #0
 80086fc:	f7f8 fce0 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8008700:	48c6      	ldr	r0, [pc, #792]	; (8008a1c <cppLoop+0x1604>)
 8008702:	f7f8 fd07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008706:	2101      	movs	r1, #1
 8008708:	2000      	movs	r0, #0
 800870a:	f7f8 fcd9 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800870e:	48c4      	ldr	r0, [pc, #784]	; (8008a20 <cppLoop+0x1608>)
 8008710:	f7f8 fd00 	bl	8001114 <lcd_printf>

		break;
 8008714:	e27a      	b.n	8008c0c <cppLoop+0x17f4>

	case 9:
		led.fullColor('~');
 8008716:	217e      	movs	r1, #126	; 0x7e
 8008718:	48bf      	ldr	r0, [pc, #764]	; (8008a18 <cppLoop+0x1600>)
 800871a:	f7f9 fbef 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800871e:	f7f8 fcbf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008722:	2100      	movs	r1, #0
 8008724:	2000      	movs	r0, #0
 8008726:	f7f8 fccb 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800872a:	48be      	ldr	r0, [pc, #760]	; (8008a24 <cppLoop+0x160c>)
 800872c:	f7f8 fcf2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008730:	2101      	movs	r1, #1
 8008732:	2000      	movs	r0, #0
 8008734:	f7f8 fcc4 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008738:	48bb      	ldr	r0, [pc, #748]	; (8008a28 <cppLoop+0x1610>)
 800873a:	f7f8 fceb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800873e:	48bb      	ldr	r0, [pc, #748]	; (8008a2c <cppLoop+0x1614>)
 8008740:	f7f9 fb78 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008744:	4603      	mov	r3, r0
 8008746:	2b02      	cmp	r3, #2
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 824e 	beq.w	8008bf2 <cppLoop+0x17da>
			led.LR(-1, 1);
 8008756:	2201      	movs	r2, #1
 8008758:	f04f 31ff 	mov.w	r1, #4294967295
 800875c:	48ae      	ldr	r0, [pc, #696]	; (8008a18 <cppLoop+0x1600>)
 800875e:	f7f9 fc89 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008766:	f000 fb6f 	bl	8008e48 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800876a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8008a30 <cppLoop+0x1618>
 800876e:	48b1      	ldr	r0, [pc, #708]	; (8008a34 <cppLoop+0x161c>)
 8008770:	f7fb f8a0 	bl	80038b4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008774:	48af      	ldr	r0, [pc, #700]	; (8008a34 <cppLoop+0x161c>)
 8008776:	f7fb fa95 	bl	8003ca4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800877a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800877e:	f000 fb63 	bl	8008e48 <HAL_Delay>

			led.fullColor('R');
 8008782:	2152      	movs	r1, #82	; 0x52
 8008784:	48a4      	ldr	r0, [pc, #656]	; (8008a18 <cppLoop+0x1600>)
 8008786:	f7f9 fbb9 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800878a:	48ab      	ldr	r0, [pc, #684]	; (8008a38 <cppLoop+0x1620>)
 800878c:	f7f8 fe8c 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008790:	f242 7010 	movw	r0, #10000	; 0x2710
 8008794:	f000 fb58 	bl	8008e48 <HAL_Delay>

			line_trace.stop();
 8008798:	48a6      	ldr	r0, [pc, #664]	; (8008a34 <cppLoop+0x161c>)
 800879a:	f7fb faa9 	bl	8003cf0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800879e:	49a7      	ldr	r1, [pc, #668]	; (8008a3c <cppLoop+0x1624>)
 80087a0:	48a7      	ldr	r0, [pc, #668]	; (8008a40 <cppLoop+0x1628>)
 80087a2:	f7f8 feba 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 80087a6:	48a4      	ldr	r0, [pc, #656]	; (8008a38 <cppLoop+0x1620>)
 80087a8:	f7f8 fe42 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80087ac:	eef0 7a40 	vmov.f32	s15, s0
 80087b0:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 80087b4:	463b      	mov	r3, r7
 80087b6:	2201      	movs	r2, #1
 80087b8:	4619      	mov	r1, r3
 80087ba:	2001      	movs	r0, #1
 80087bc:	f7f8 fed0 	bl	8001560 <sd_write_float>
			user_fclose();
 80087c0:	f7f8 febe 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 80087c4:	2200      	movs	r2, #0
 80087c6:	f04f 31ff 	mov.w	r1, #4294967295
 80087ca:	4893      	ldr	r0, [pc, #588]	; (8008a18 <cppLoop+0x1600>)
 80087cc:	f7f9 fc52 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80087d0:	e20f      	b.n	8008bf2 <cppLoop+0x17da>

	case 10:
		led.fullColor('~');
 80087d2:	217e      	movs	r1, #126	; 0x7e
 80087d4:	4890      	ldr	r0, [pc, #576]	; (8008a18 <cppLoop+0x1600>)
 80087d6:	f7f9 fb91 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80087da:	f7f8 fc61 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087de:	2100      	movs	r1, #0
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7f8 fc6d 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80087e6:	4897      	ldr	r0, [pc, #604]	; (8008a44 <cppLoop+0x162c>)
 80087e8:	f7f8 fc94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087ec:	2101      	movs	r1, #1
 80087ee:	2000      	movs	r0, #0
 80087f0:	f7f8 fc66 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80087f4:	4894      	ldr	r0, [pc, #592]	; (8008a48 <cppLoop+0x1630>)
 80087f6:	f7f8 fc8d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80087fa:	488c      	ldr	r0, [pc, #560]	; (8008a2c <cppLoop+0x1614>)
 80087fc:	f7f9 fb1a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008800:	4603      	mov	r3, r0
 8008802:	2b02      	cmp	r3, #2
 8008804:	bf0c      	ite	eq
 8008806:	2301      	moveq	r3, #1
 8008808:	2300      	movne	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 81f2 	beq.w	8008bf6 <cppLoop+0x17de>
			HAL_Delay(500);
 8008812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008816:	f000 fb17 	bl	8008e48 <HAL_Delay>
			led.LR(-1, 1);
 800881a:	2201      	movs	r2, #1
 800881c:	f04f 31ff 	mov.w	r1, #4294967295
 8008820:	487d      	ldr	r0, [pc, #500]	; (8008a18 <cppLoop+0x1600>)
 8008822:	f7f9 fc27 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8008826:	2101      	movs	r1, #1
 8008828:	4882      	ldr	r0, [pc, #520]	; (8008a34 <cppLoop+0x161c>)
 800882a:	f7fb fbc7 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 800882e:	4881      	ldr	r0, [pc, #516]	; (8008a34 <cppLoop+0x161c>)
 8008830:	f7fa fc06 	bl	8003040 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008834:	2200      	movs	r2, #0
 8008836:	f04f 31ff 	mov.w	r1, #4294967295
 800883a:	4877      	ldr	r0, [pc, #476]	; (8008a18 <cppLoop+0x1600>)
 800883c:	f7f9 fc1a 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008840:	e1d9      	b.n	8008bf6 <cppLoop+0x17de>

	case 11:
		led.fullColor('~');
 8008842:	217e      	movs	r1, #126	; 0x7e
 8008844:	4874      	ldr	r0, [pc, #464]	; (8008a18 <cppLoop+0x1600>)
 8008846:	f7f9 fb59 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800884a:	f7f8 fc29 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800884e:	2100      	movs	r1, #0
 8008850:	2000      	movs	r0, #0
 8008852:	f7f8 fc35 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8008856:	487d      	ldr	r0, [pc, #500]	; (8008a4c <cppLoop+0x1634>)
 8008858:	f7f8 fc5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800885c:	2101      	movs	r1, #1
 800885e:	2000      	movs	r0, #0
 8008860:	f7f8 fc2e 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008864:	487a      	ldr	r0, [pc, #488]	; (8008a50 <cppLoop+0x1638>)
 8008866:	f7f8 fc55 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800886a:	4870      	ldr	r0, [pc, #448]	; (8008a2c <cppLoop+0x1614>)
 800886c:	f7f9 fae2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008870:	4603      	mov	r3, r0
 8008872:	2b02      	cmp	r3, #2
 8008874:	bf0c      	ite	eq
 8008876:	2301      	moveq	r3, #1
 8008878:	2300      	movne	r3, #0
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 81bc 	beq.w	8008bfa <cppLoop+0x17e2>
			HAL_Delay(1500);
 8008882:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008886:	f000 fadf 	bl	8008e48 <HAL_Delay>
			led.LR(-1, 1);
 800888a:	2201      	movs	r2, #1
 800888c:	f04f 31ff 	mov.w	r1, #4294967295
 8008890:	4861      	ldr	r0, [pc, #388]	; (8008a18 <cppLoop+0x1600>)
 8008892:	f7f9 fbef 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008896:	486f      	ldr	r0, [pc, #444]	; (8008a54 <cppLoop+0x163c>)
 8008898:	f7fb ff47 	bl	800472a <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800889c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8008a00 <cppLoop+0x15e8>
 80088a0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8008a08 <cppLoop+0x15f0>
 80088a4:	486c      	ldr	r0, [pc, #432]	; (8008a58 <cppLoop+0x1640>)
 80088a6:	f7fb ffd5 	bl	8004854 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80088aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088ae:	f000 facb 	bl	8008e48 <HAL_Delay>

			logger.stop();
 80088b2:	4868      	ldr	r0, [pc, #416]	; (8008a54 <cppLoop+0x163c>)
 80088b4:	f7fb ff4a 	bl	800474c <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80088b8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8008a10 <cppLoop+0x15f8>
 80088bc:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8008a10 <cppLoop+0x15f8>
 80088c0:	4865      	ldr	r0, [pc, #404]	; (8008a58 <cppLoop+0x1640>)
 80088c2:	f7fb ffc7 	bl	8004854 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80088c6:	4a65      	ldr	r2, [pc, #404]	; (8008a5c <cppLoop+0x1644>)
 80088c8:	4965      	ldr	r1, [pc, #404]	; (8008a60 <cppLoop+0x1648>)
 80088ca:	4862      	ldr	r0, [pc, #392]	; (8008a54 <cppLoop+0x163c>)
 80088cc:	f7fb fe3d 	bl	800454a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80088d0:	2200      	movs	r2, #0
 80088d2:	f04f 31ff 	mov.w	r1, #4294967295
 80088d6:	4850      	ldr	r0, [pc, #320]	; (8008a18 <cppLoop+0x1600>)
 80088d8:	f7f9 fbcc 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80088dc:	e18d      	b.n	8008bfa <cppLoop+0x17e2>

	case 12:
		led.fullColor('~');
 80088de:	217e      	movs	r1, #126	; 0x7e
 80088e0:	484d      	ldr	r0, [pc, #308]	; (8008a18 <cppLoop+0x1600>)
 80088e2:	f7f9 fb0b 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80088e6:	f7f8 fbdb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088ea:	2100      	movs	r1, #0
 80088ec:	2000      	movs	r0, #0
 80088ee:	f7f8 fbe7 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80088f2:	485c      	ldr	r0, [pc, #368]	; (8008a64 <cppLoop+0x164c>)
 80088f4:	f7f8 fc0e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088f8:	2101      	movs	r1, #1
 80088fa:	2000      	movs	r0, #0
 80088fc:	f7f8 fbe0 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008900:	4859      	ldr	r0, [pc, #356]	; (8008a68 <cppLoop+0x1650>)
 8008902:	f7f8 fc07 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008906:	4849      	ldr	r0, [pc, #292]	; (8008a2c <cppLoop+0x1614>)
 8008908:	f7f9 fa94 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800890c:	4603      	mov	r3, r0
 800890e:	2b02      	cmp	r3, #2
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 8170 	beq.w	8008bfe <cppLoop+0x17e6>
			HAL_Delay(1500);
 800891e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008922:	f000 fa91 	bl	8008e48 <HAL_Delay>
			led.LR(-1, 1);
 8008926:	2201      	movs	r2, #1
 8008928:	f04f 31ff 	mov.w	r1, #4294967295
 800892c:	483a      	ldr	r0, [pc, #232]	; (8008a18 <cppLoop+0x1600>)
 800892e:	f7f9 fba1 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008932:	4848      	ldr	r0, [pc, #288]	; (8008a54 <cppLoop+0x163c>)
 8008934:	f7fb fef9 	bl	800472a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8008938:	484c      	ldr	r0, [pc, #304]	; (8008a6c <cppLoop+0x1654>)
 800893a:	f7fc feda 	bl	80056f2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800893e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8008a30 <cppLoop+0x1618>
 8008942:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008946:	4849      	ldr	r0, [pc, #292]	; (8008a6c <cppLoop+0x1654>)
 8008948:	f7fc fe66 	bl	8005618 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800894c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008950:	f000 fa7a 	bl	8008e48 <HAL_Delay>

			logger.stop();
 8008954:	483f      	ldr	r0, [pc, #252]	; (8008a54 <cppLoop+0x163c>)
 8008956:	f7fb fef9 	bl	800474c <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800895a:	4844      	ldr	r0, [pc, #272]	; (8008a6c <cppLoop+0x1654>)
 800895c:	f7fc fedc 	bl	8005718 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008960:	4a43      	ldr	r2, [pc, #268]	; (8008a70 <cppLoop+0x1658>)
 8008962:	493f      	ldr	r1, [pc, #252]	; (8008a60 <cppLoop+0x1648>)
 8008964:	483b      	ldr	r0, [pc, #236]	; (8008a54 <cppLoop+0x163c>)
 8008966:	f7fb fdf0 	bl	800454a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800896a:	2200      	movs	r2, #0
 800896c:	f04f 31ff 	mov.w	r1, #4294967295
 8008970:	4829      	ldr	r0, [pc, #164]	; (8008a18 <cppLoop+0x1600>)
 8008972:	f7f9 fb7f 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008976:	e142      	b.n	8008bfe <cppLoop+0x17e6>

	case 13:
		led.fullColor('~');
 8008978:	217e      	movs	r1, #126	; 0x7e
 800897a:	4827      	ldr	r0, [pc, #156]	; (8008a18 <cppLoop+0x1600>)
 800897c:	f7f9 fabe 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008980:	f7f8 fb8e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008984:	2100      	movs	r1, #0
 8008986:	2000      	movs	r0, #0
 8008988:	f7f8 fb9a 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800898c:	4839      	ldr	r0, [pc, #228]	; (8008a74 <cppLoop+0x165c>)
 800898e:	f7f8 fbc1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008992:	2101      	movs	r1, #1
 8008994:	2000      	movs	r0, #0
 8008996:	f7f8 fb93 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800899a:	482d      	ldr	r0, [pc, #180]	; (8008a50 <cppLoop+0x1638>)
 800899c:	f7f8 fbba 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80089a0:	4822      	ldr	r0, [pc, #136]	; (8008a2c <cppLoop+0x1614>)
 80089a2:	f7f9 fa47 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8125 	beq.w	8008c02 <cppLoop+0x17ea>
			led.LR(-1, 1);
 80089b8:	2201      	movs	r2, #1
 80089ba:	f04f 31ff 	mov.w	r1, #4294967295
 80089be:	4816      	ldr	r0, [pc, #88]	; (8008a18 <cppLoop+0x1600>)
 80089c0:	f7f9 fb58 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80089c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80089c8:	f000 fa3e 	bl	8008e48 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80089cc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008a78 <cppLoop+0x1660>
 80089d0:	482a      	ldr	r0, [pc, #168]	; (8008a7c <cppLoop+0x1664>)
 80089d2:	f7fc fcad 	bl	8005330 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80089d6:	4829      	ldr	r0, [pc, #164]	; (8008a7c <cppLoop+0x1664>)
 80089d8:	f7fc fcba 	bl	8005350 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80089dc:	f244 405c 	movw	r0, #17500	; 0x445c
 80089e0:	f000 fa32 	bl	8008e48 <HAL_Delay>
			sys_ident.stop();
 80089e4:	4825      	ldr	r0, [pc, #148]	; (8008a7c <cppLoop+0x1664>)
 80089e6:	f7fc fcc7 	bl	8005378 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80089ea:	4824      	ldr	r0, [pc, #144]	; (8008a7c <cppLoop+0x1664>)
 80089ec:	f7fc fc2e 	bl	800524c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80089f0:	2200      	movs	r2, #0
 80089f2:	f04f 31ff 	mov.w	r1, #4294967295
 80089f6:	4808      	ldr	r0, [pc, #32]	; (8008a18 <cppLoop+0x1600>)
 80089f8:	f7f9 fb3c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80089fc:	e101      	b.n	8008c02 <cppLoop+0x17ea>
 80089fe:	bf00      	nop
 8008a00:	33333333 	.word	0x33333333
 8008a04:	bfd33333 	.word	0xbfd33333
 8008a08:	33333333 	.word	0x33333333
 8008a0c:	3fd33333 	.word	0x3fd33333
	...
 8008a18:	200005cc 	.word	0x200005cc
 8008a1c:	080191cc 	.word	0x080191cc
 8008a20:	080191d8 	.word	0x080191d8
 8008a24:	080191e4 	.word	0x080191e4
 8008a28:	080191ec 	.word	0x080191ec
 8008a2c:	200005c0 	.word	0x200005c0
 8008a30:	00000000 	.word	0x00000000
 8008a34:	20017da0 	.word	0x20017da0
 8008a38:	20017d00 	.word	0x20017d00
 8008a3c:	080191f8 	.word	0x080191f8
 8008a40:	08019200 	.word	0x08019200
 8008a44:	0801920c 	.word	0x0801920c
 8008a48:	08019218 	.word	0x08019218
 8008a4c:	08019224 	.word	0x08019224
 8008a50:	0801922c 	.word	0x0801922c
 8008a54:	200005f0 	.word	0x200005f0
 8008a58:	200005c8 	.word	0x200005c8
 8008a5c:	08019234 	.word	0x08019234
 8008a60:	08019240 	.word	0x08019240
 8008a64:	0801924c 	.word	0x0801924c
 8008a68:	08019250 	.word	0x08019250
 8008a6c:	20017d20 	.word	0x20017d20
 8008a70:	0801925c 	.word	0x0801925c
 8008a74:	08019268 	.word	0x08019268
 8008a78:	3e99999a 	.word	0x3e99999a
 8008a7c:	20024b00 	.word	0x20024b00

	case 14:
		led.fullColor('W');
 8008a80:	2157      	movs	r1, #87	; 0x57
 8008a82:	4866      	ldr	r0, [pc, #408]	; (8008c1c <cppLoop+0x1804>)
 8008a84:	f7f9 fa3a 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a88:	f7f8 fb0a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	2000      	movs	r0, #0
 8008a90:	f7f8 fb16 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008a94:	4862      	ldr	r0, [pc, #392]	; (8008c20 <cppLoop+0x1808>)
 8008a96:	f7f8 fb3d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f7f8 fb0f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008aa2:	4b60      	ldr	r3, [pc, #384]	; (8008c24 <cppLoop+0x180c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f7 fd66 	bl	8000578 <__aeabi_f2d>
 8008aac:	4603      	mov	r3, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4623      	mov	r3, r4
 8008ab4:	485c      	ldr	r0, [pc, #368]	; (8008c28 <cppLoop+0x1810>)
 8008ab6:	f7f8 fb2d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008aba:	485c      	ldr	r0, [pc, #368]	; (8008c2c <cppLoop+0x1814>)
 8008abc:	f7f9 f9ba 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 809a 	beq.w	8008c06 <cppLoop+0x17ee>
			HAL_Delay(500);
 8008ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ad6:	f000 f9b7 	bl	8008e48 <HAL_Delay>

			led.LR(1, -1);
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	2101      	movs	r1, #1
 8008ae0:	484e      	ldr	r0, [pc, #312]	; (8008c1c <cppLoop+0x1804>)
 8008ae2:	f7f9 fac7 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	4851      	ldr	r0, [pc, #324]	; (8008c30 <cppLoop+0x1818>)
 8008aea:	f7fb fa67 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008aee:	4b4d      	ldr	r3, [pc, #308]	; (8008c24 <cppLoop+0x180c>)
 8008af0:	edd3 7a00 	vldr	s15, [r3]
 8008af4:	eeb0 0a67 	vmov.f32	s0, s15
 8008af8:	484d      	ldr	r0, [pc, #308]	; (8008c30 <cppLoop+0x1818>)
 8008afa:	f7fa feea 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008afe:	4b49      	ldr	r3, [pc, #292]	; (8008c24 <cppLoop+0x180c>)
 8008b00:	edd3 7a00 	vldr	s15, [r3]
 8008b04:	eeb0 0a67 	vmov.f32	s0, s15
 8008b08:	4849      	ldr	r0, [pc, #292]	; (8008c30 <cppLoop+0x1818>)
 8008b0a:	f7fa fef1 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008b0e:	4848      	ldr	r0, [pc, #288]	; (8008c30 <cppLoop+0x1818>)
 8008b10:	f7fa fa96 	bl	8003040 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008b14:	4846      	ldr	r0, [pc, #280]	; (8008c30 <cppLoop+0x1818>)
 8008b16:	f7fb f953 	bl	8003dc0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1e:	2100      	movs	r1, #0
 8008b20:	483e      	ldr	r0, [pc, #248]	; (8008c1c <cppLoop+0x1804>)
 8008b22:	f7f9 faa7 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008b26:	e06e      	b.n	8008c06 <cppLoop+0x17ee>

	case 15:
		led.fullColor('W');
 8008b28:	2157      	movs	r1, #87	; 0x57
 8008b2a:	483c      	ldr	r0, [pc, #240]	; (8008c1c <cppLoop+0x1804>)
 8008b2c:	f7f9 f9e6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b30:	f7f8 fab6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b34:	2100      	movs	r1, #0
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7f8 fac2 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008b3c:	483d      	ldr	r0, [pc, #244]	; (8008c34 <cppLoop+0x181c>)
 8008b3e:	f7f8 fae9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b42:	2101      	movs	r1, #1
 8008b44:	2000      	movs	r0, #0
 8008b46:	f7f8 fabb 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008b4a:	4b3b      	ldr	r3, [pc, #236]	; (8008c38 <cppLoop+0x1820>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f7 fd12 	bl	8000578 <__aeabi_f2d>
 8008b54:	4603      	mov	r3, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4623      	mov	r3, r4
 8008b5c:	4832      	ldr	r0, [pc, #200]	; (8008c28 <cppLoop+0x1810>)
 8008b5e:	f7f8 fad9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008b62:	4832      	ldr	r0, [pc, #200]	; (8008c2c <cppLoop+0x1814>)
 8008b64:	f7f9 f966 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d048      	beq.n	8008c0a <cppLoop+0x17f2>
			HAL_Delay(500);
 8008b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b7c:	f000 f964 	bl	8008e48 <HAL_Delay>

			led.LR(1, -1);
 8008b80:	f04f 32ff 	mov.w	r2, #4294967295
 8008b84:	2101      	movs	r1, #1
 8008b86:	4825      	ldr	r0, [pc, #148]	; (8008c1c <cppLoop+0x1804>)
 8008b88:	f7f9 fa74 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	4828      	ldr	r0, [pc, #160]	; (8008c30 <cppLoop+0x1818>)
 8008b90:	f7fb fa14 	bl	8003fbc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008b94:	4b28      	ldr	r3, [pc, #160]	; (8008c38 <cppLoop+0x1820>)
 8008b96:	edd3 7a00 	vldr	s15, [r3]
 8008b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b9e:	4824      	ldr	r0, [pc, #144]	; (8008c30 <cppLoop+0x1818>)
 8008ba0:	f7fa fe97 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008ba4:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <cppLoop+0x1820>)
 8008ba6:	edd3 7a00 	vldr	s15, [r3]
 8008baa:	eeb0 0a67 	vmov.f32	s0, s15
 8008bae:	4820      	ldr	r0, [pc, #128]	; (8008c30 <cppLoop+0x1818>)
 8008bb0:	f7fa fe9e 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008bb4:	481e      	ldr	r0, [pc, #120]	; (8008c30 <cppLoop+0x1818>)
 8008bb6:	f7fa fa43 	bl	8003040 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008bba:	481d      	ldr	r0, [pc, #116]	; (8008c30 <cppLoop+0x1818>)
 8008bbc:	f7fb f900 	bl	8003dc0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4815      	ldr	r0, [pc, #84]	; (8008c1c <cppLoop+0x1804>)
 8008bc8:	f7f9 fa54 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008bcc:	e01d      	b.n	8008c0a <cppLoop+0x17f2>

	default:
		break;
 8008bce:	bf00      	nop
 8008bd0:	e01c      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bd2:	bf00      	nop
 8008bd4:	e01a      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bd6:	bf00      	nop
 8008bd8:	e018      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bda:	bf00      	nop
 8008bdc:	e016      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bde:	bf00      	nop
 8008be0:	e014      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008be2:	bf00      	nop
 8008be4:	e012      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008be6:	bf00      	nop
 8008be8:	e010      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bea:	bf00      	nop
 8008bec:	e00e      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bee:	bf00      	nop
 8008bf0:	e00c      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bf2:	bf00      	nop
 8008bf4:	e00a      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bf6:	bf00      	nop
 8008bf8:	e008      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bfa:	bf00      	nop
 8008bfc:	e006      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008bfe:	bf00      	nop
 8008c00:	e004      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008c02:	bf00      	nop
 8008c04:	e002      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <cppLoop+0x17f4>
		break;
 8008c0a:	bf00      	nop

	}

	HAL_Delay(30);
 8008c0c:	201e      	movs	r0, #30
 8008c0e:	f000 f91b 	bl	8008e48 <HAL_Delay>

}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200005cc 	.word	0x200005cc
 8008c20:	08019270 	.word	0x08019270
 8008c24:	2003c46c 	.word	0x2003c46c
 8008c28:	08019138 	.word	0x08019138
 8008c2c:	200005c0 	.word	0x200005c0
 8008c30:	20017da0 	.word	0x20017da0
 8008c34:	0801927c 	.word	0x0801927c
 8008c38:	2003c464 	.word	0x2003c464

08008c3c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af06      	add	r7, sp, #24
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d13d      	bne.n	8008cc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d138      	bne.n	8008cc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008c56:	481e      	ldr	r0, [pc, #120]	; (8008cd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008c58:	f7f9 fa44 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008c5c:	481d      	ldr	r0, [pc, #116]	; (8008cd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008c5e:	f7fc f95b 	bl	8004f18 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008c62:	481d      	ldr	r0, [pc, #116]	; (8008cd8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008c64:	f7f9 f8da 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008c68:	481c      	ldr	r0, [pc, #112]	; (8008cdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c6a:	f7fb fd80 	bl	800476e <_ZN5MotorC1Ev>
IMU imu;
 8008c6e:	481c      	ldr	r0, [pc, #112]	; (8008ce0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c70:	f7f8 fee0 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008c74:	481b      	ldr	r0, [pc, #108]	; (8008ce4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c76:	f7fb fad5 	bl	8004224 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008c7a:	481b      	ldr	r0, [pc, #108]	; (8008ce8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c7c:	f7f8 fa6a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008c80:	4b17      	ldr	r3, [pc, #92]	; (8008ce0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c82:	4a19      	ldr	r2, [pc, #100]	; (8008ce8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c84:	4915      	ldr	r1, [pc, #84]	; (8008cdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c86:	4819      	ldr	r0, [pc, #100]	; (8008cec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c88:	f7fc fb9a 	bl	80053c0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008c8c:	4b17      	ldr	r3, [pc, #92]	; (8008cec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c8e:	4a14      	ldr	r2, [pc, #80]	; (8008ce0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c90:	4915      	ldr	r1, [pc, #84]	; (8008ce8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c92:	4817      	ldr	r0, [pc, #92]	; (8008cf0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008c94:	f7fb fe50 	bl	8004938 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008c98:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008cae:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008cb0:	490a      	ldr	r1, [pc, #40]	; (8008cdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008cb2:	4810      	ldr	r0, [pc, #64]	; (8008cf4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008cb4:	f7f9 fd44 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008cba:	490a      	ldr	r1, [pc, #40]	; (8008ce4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008cbc:	480e      	ldr	r0, [pc, #56]	; (8008cf8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008cbe:	f7fc fa7b 	bl	80051b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008cc2:	480e      	ldr	r0, [pc, #56]	; (8008cfc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008cc4:	f7fb ffba 	bl	8004c3c <_ZN13PathFollowingC1Ev>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	200002c0 	.word	0x200002c0
 8008cd4:	200005b8 	.word	0x200005b8
 8008cd8:	200005c0 	.word	0x200005c0
 8008cdc:	200005c8 	.word	0x200005c8
 8008ce0:	200005dc 	.word	0x200005dc
 8008ce4:	200005f0 	.word	0x200005f0
 8008ce8:	20017d00 	.word	0x20017d00
 8008cec:	20017d20 	.word	0x20017d20
 8008cf0:	20017d60 	.word	0x20017d60
 8008cf4:	20017da0 	.word	0x20017da0
 8008cf8:	20024b00 	.word	0x20024b00
 8008cfc:	20024d10 	.word	0x20024d10

08008d00 <_GLOBAL__sub_I_line_sensor>:
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7ff ff97 	bl	8008c3c <_Z41__static_initialization_and_destruction_0ii>
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d16:	e003      	b.n	8008d20 <LoopCopyDataInit>

08008d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d1e:	3104      	adds	r1, #4

08008d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d20:	480b      	ldr	r0, [pc, #44]	; (8008d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d28:	d3f6      	bcc.n	8008d18 <CopyDataInit>
  ldr  r2, =_sbss
 8008d2a:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d2c:	e002      	b.n	8008d34 <LoopFillZerobss>

08008d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d30:	f842 3b04 	str.w	r3, [r2], #4

08008d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d38:	d3f9      	bcc.n	8008d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008d3a:	f7fe fa4b 	bl	80071d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d3e:	f00b fdd3 	bl	80148e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d42:	f7fc fd85 	bl	8005850 <main>
  bx  lr    
 8008d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008d48:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008d4c:	08019878 	.word	0x08019878
  ldr  r0, =_sdata
 8008d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d54:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008d58:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008d5c:	20040e70 	.word	0x20040e70

08008d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d60:	e7fe      	b.n	8008d60 <ADC_IRQHandler>
	...

08008d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d68:	4b0e      	ldr	r3, [pc, #56]	; (8008da4 <HAL_Init+0x40>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a0d      	ldr	r2, [pc, #52]	; (8008da4 <HAL_Init+0x40>)
 8008d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <HAL_Init+0x40>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <HAL_Init+0x40>)
 8008d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <HAL_Init+0x40>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <HAL_Init+0x40>)
 8008d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d8c:	2003      	movs	r0, #3
 8008d8e:	f000 fd51 	bl	8009834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d92:	2000      	movs	r0, #0
 8008d94:	f000 f808 	bl	8008da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d98:	f7fd fc6c 	bl	8006674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40023c00 	.word	0x40023c00

08008da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008db0:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <HAL_InitTick+0x54>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <HAL_InitTick+0x58>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fd69 	bl	800989e <HAL_SYSTICK_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e00e      	b.n	8008df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b0f      	cmp	r3, #15
 8008dda:	d80a      	bhi.n	8008df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ddc:	2200      	movs	r2, #0
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	f000 fd31 	bl	800984a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008de8:	4a06      	ldr	r2, [pc, #24]	; (8008e04 <HAL_InitTick+0x5c>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e000      	b.n	8008df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000000 	.word	0x20000000
 8008e00:	20000008 	.word	0x20000008
 8008e04:	20000004 	.word	0x20000004

08008e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <HAL_IncTick+0x20>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <HAL_IncTick+0x24>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4413      	add	r3, r2
 8008e18:	4a04      	ldr	r2, [pc, #16]	; (8008e2c <HAL_IncTick+0x24>)
 8008e1a:	6013      	str	r3, [r2, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000008 	.word	0x20000008
 8008e2c:	2003edf8 	.word	0x2003edf8

08008e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
  return uwTick;
 8008e34:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <HAL_GetTick+0x14>)
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	2003edf8 	.word	0x2003edf8

08008e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e50:	f7ff ffee 	bl	8008e30 <HAL_GetTick>
 8008e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d005      	beq.n	8008e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HAL_Delay+0x40>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e6e:	bf00      	nop
 8008e70:	f7ff ffde 	bl	8008e30 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d8f7      	bhi.n	8008e70 <HAL_Delay+0x28>
  {
  }
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000008 	.word	0x20000008

08008e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e033      	b.n	8008f0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7fd fc0a 	bl	80066c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f003 0310 	and.w	r3, r3, #16
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d118      	bne.n	8008efc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008ed2:	f023 0302 	bic.w	r3, r3, #2
 8008ed6:	f043 0202 	orr.w	r2, r3, #2
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa5a 	bl	8009398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	f043 0201 	orr.w	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8008efa:	e001      	b.n	8008f00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_ADC_Start_DMA+0x1e>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e0cc      	b.n	80090cc <HAL_ADC_Start_DMA+0x1b8>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d018      	beq.n	8008f7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f58:	4b5e      	ldr	r3, [pc, #376]	; (80090d4 <HAL_ADC_Start_DMA+0x1c0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a5e      	ldr	r2, [pc, #376]	; (80090d8 <HAL_ADC_Start_DMA+0x1c4>)
 8008f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f62:	0c9a      	lsrs	r2, r3, #18
 8008f64:	4613      	mov	r3, r2
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	4413      	add	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f6c:	e002      	b.n	8008f74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f9      	bne.n	8008f6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	f040 80a0 	bne.w	80090ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f92:	f023 0301 	bic.w	r3, r3, #1
 8008f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008fb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc8:	d106      	bne.n	8008fd8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	f023 0206 	bic.w	r2, r3, #6
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	645a      	str	r2, [r3, #68]	; 0x44
 8008fd6:	e002      	b.n	8008fde <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fe6:	4b3d      	ldr	r3, [pc, #244]	; (80090dc <HAL_ADC_Start_DMA+0x1c8>)
 8008fe8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	4a3c      	ldr	r2, [pc, #240]	; (80090e0 <HAL_ADC_Start_DMA+0x1cc>)
 8008ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	4a3b      	ldr	r2, [pc, #236]	; (80090e4 <HAL_ADC_Start_DMA+0x1d0>)
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	4a3a      	ldr	r2, [pc, #232]	; (80090e8 <HAL_ADC_Start_DMA+0x1d4>)
 8009000:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800900a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800901a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800902a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	334c      	adds	r3, #76	; 0x4c
 8009036:	4619      	mov	r1, r3
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f000 fcea 	bl	8009a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f003 031f 	and.w	r3, r3, #31
 8009048:	2b00      	cmp	r3, #0
 800904a:	d12a      	bne.n	80090a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a26      	ldr	r2, [pc, #152]	; (80090ec <HAL_ADC_Start_DMA+0x1d8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d015      	beq.n	8009082 <HAL_ADC_Start_DMA+0x16e>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a25      	ldr	r2, [pc, #148]	; (80090f0 <HAL_ADC_Start_DMA+0x1dc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d105      	bne.n	800906c <HAL_ADC_Start_DMA+0x158>
 8009060:	4b1e      	ldr	r3, [pc, #120]	; (80090dc <HAL_ADC_Start_DMA+0x1c8>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <HAL_ADC_Start_DMA+0x1e0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d129      	bne.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <HAL_ADC_Start_DMA+0x1c8>)
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d823      	bhi.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11c      	bne.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800909e:	609a      	str	r2, [r3, #8]
 80090a0:	e013      	b.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a11      	ldr	r2, [pc, #68]	; (80090ec <HAL_ADC_Start_DMA+0x1d8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d10e      	bne.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d107      	bne.n	80090ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20000000 	.word	0x20000000
 80090d8:	431bde83 	.word	0x431bde83
 80090dc:	40012300 	.word	0x40012300
 80090e0:	08009591 	.word	0x08009591
 80090e4:	0800964b 	.word	0x0800964b
 80090e8:	08009667 	.word	0x08009667
 80090ec:	40012000 	.word	0x40012000
 80090f0:	40012100 	.word	0x40012100
 80090f4:	40012200 	.word	0x40012200

080090f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_ADC_ConfigChannel+0x1c>
 800914c:	2302      	movs	r3, #2
 800914e:	e113      	b.n	8009378 <HAL_ADC_ConfigChannel+0x244>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b09      	cmp	r3, #9
 800915e:	d925      	bls.n	80091ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68d9      	ldr	r1, [r3, #12]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	3b1e      	subs	r3, #30
 8009176:	2207      	movs	r2, #7
 8009178:	fa02 f303 	lsl.w	r3, r2, r3
 800917c:	43da      	mvns	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	400a      	ands	r2, r1
 8009184:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68d9      	ldr	r1, [r3, #12]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	4618      	mov	r0, r3
 8009198:	4603      	mov	r3, r0
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4403      	add	r3, r0
 800919e:	3b1e      	subs	r3, #30
 80091a0:	409a      	lsls	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	e022      	b.n	80091f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6919      	ldr	r1, [r3, #16]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	4613      	mov	r3, r2
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	4413      	add	r3, r2
 80091c0:	2207      	movs	r2, #7
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	43da      	mvns	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	400a      	ands	r2, r1
 80091ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6919      	ldr	r1, [r3, #16]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	4618      	mov	r0, r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4403      	add	r3, r0
 80091e8:	409a      	lsls	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b06      	cmp	r3, #6
 80091f8:	d824      	bhi.n	8009244 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	3b05      	subs	r3, #5
 800920c:	221f      	movs	r2, #31
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	43da      	mvns	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	400a      	ands	r2, r1
 800921a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	4618      	mov	r0, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	3b05      	subs	r3, #5
 8009236:	fa00 f203 	lsl.w	r2, r0, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	635a      	str	r2, [r3, #52]	; 0x34
 8009242:	e04c      	b.n	80092de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b0c      	cmp	r3, #12
 800924a:	d824      	bhi.n	8009296 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	3b23      	subs	r3, #35	; 0x23
 800925e:	221f      	movs	r2, #31
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	43da      	mvns	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	400a      	ands	r2, r1
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	4618      	mov	r0, r3
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	3b23      	subs	r3, #35	; 0x23
 8009288:	fa00 f203 	lsl.w	r2, r0, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
 8009294:	e023      	b.n	80092de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	3b41      	subs	r3, #65	; 0x41
 80092a8:	221f      	movs	r2, #31
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	43da      	mvns	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	400a      	ands	r2, r1
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4618      	mov	r0, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	3b41      	subs	r3, #65	; 0x41
 80092d2:	fa00 f203 	lsl.w	r2, r0, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092de:	4b29      	ldr	r3, [pc, #164]	; (8009384 <HAL_ADC_ConfigChannel+0x250>)
 80092e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a28      	ldr	r2, [pc, #160]	; (8009388 <HAL_ADC_ConfigChannel+0x254>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d10f      	bne.n	800930c <HAL_ADC_ConfigChannel+0x1d8>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b12      	cmp	r3, #18
 80092f2:	d10b      	bne.n	800930c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <HAL_ADC_ConfigChannel+0x254>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d12b      	bne.n	800936e <HAL_ADC_ConfigChannel+0x23a>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <HAL_ADC_ConfigChannel+0x258>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <HAL_ADC_ConfigChannel+0x1f4>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b11      	cmp	r3, #17
 8009326:	d122      	bne.n	800936e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a11      	ldr	r2, [pc, #68]	; (800938c <HAL_ADC_ConfigChannel+0x258>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d111      	bne.n	800936e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800934a:	4b11      	ldr	r3, [pc, #68]	; (8009390 <HAL_ADC_ConfigChannel+0x25c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <HAL_ADC_ConfigChannel+0x260>)
 8009350:	fba2 2303 	umull	r2, r3, r2, r3
 8009354:	0c9a      	lsrs	r2, r3, #18
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009360:	e002      	b.n	8009368 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	3b01      	subs	r3, #1
 8009366:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f9      	bne.n	8009362 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40012300 	.word	0x40012300
 8009388:	40012000 	.word	0x40012000
 800938c:	10000012 	.word	0x10000012
 8009390:	20000000 	.word	0x20000000
 8009394:	431bde83 	.word	0x431bde83

08009398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093a0:	4b79      	ldr	r3, [pc, #484]	; (8009588 <ADC_Init+0x1f0>)
 80093a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6859      	ldr	r1, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	021a      	lsls	r2, r3, #8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6859      	ldr	r1, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6899      	ldr	r1, [r3, #8]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	4a58      	ldr	r2, [pc, #352]	; (800958c <ADC_Init+0x1f4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d022      	beq.n	8009476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800943e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6899      	ldr	r1, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	e00f      	b.n	8009496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 0202 	bic.w	r2, r2, #2
 80094a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6899      	ldr	r1, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7e1b      	ldrb	r3, [r3, #24]
 80094b0:	005a      	lsls	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01b      	beq.n	80094fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6859      	ldr	r1, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	3b01      	subs	r3, #1
 80094f0:	035a      	lsls	r2, r3, #13
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	e007      	b.n	800950c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800950a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	3b01      	subs	r3, #1
 8009528:	051a      	lsls	r2, r3, #20
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6899      	ldr	r1, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800954e:	025a      	lsls	r2, r3, #9
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6899      	ldr	r1, [r3, #8]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	029a      	lsls	r2, r3, #10
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	40012300 	.word	0x40012300
 800958c:	0f000001 	.word	0x0f000001

08009590 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d13c      	bne.n	8009624 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d12b      	bne.n	800961c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d127      	bne.n	800961c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d119      	bne.n	800961c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0220 	bic.w	r2, r2, #32
 80095f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d105      	bne.n	800961c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	f043 0201 	orr.w	r2, r3, #1
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fd6b 	bl	80090f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009622:	e00e      	b.n	8009642 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fd75 	bl	8009120 <HAL_ADC_ErrorCallback>
}
 8009636:	e004      	b.n	8009642 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7ff fd57 	bl	800910c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2240      	movs	r2, #64	; 0x40
 8009678:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967e:	f043 0204 	orr.w	r2, r3, #4
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fd4a 	bl	8009120 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <__NVIC_SetPriorityGrouping+0x44>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096b0:	4013      	ands	r3, r2
 80096b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096c6:	4a04      	ldr	r2, [pc, #16]	; (80096d8 <__NVIC_SetPriorityGrouping+0x44>)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	60d3      	str	r3, [r2, #12]
}
 80096cc:	bf00      	nop
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	e000ed00 	.word	0xe000ed00

080096dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <__NVIC_GetPriorityGrouping+0x18>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	0a1b      	lsrs	r3, r3, #8
 80096e6:	f003 0307 	and.w	r3, r3, #7
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	e000ed00 	.word	0xe000ed00

080096f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009706:	2b00      	cmp	r3, #0
 8009708:	db0b      	blt.n	8009722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	f003 021f 	and.w	r2, r3, #31
 8009710:	4907      	ldr	r1, [pc, #28]	; (8009730 <__NVIC_EnableIRQ+0x38>)
 8009712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009716:	095b      	lsrs	r3, r3, #5
 8009718:	2001      	movs	r0, #1
 800971a:	fa00 f202 	lsl.w	r2, r0, r2
 800971e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009722:	bf00      	nop
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	e000e100 	.word	0xe000e100

08009734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	6039      	str	r1, [r7, #0]
 800973e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009744:	2b00      	cmp	r3, #0
 8009746:	db0a      	blt.n	800975e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	490c      	ldr	r1, [pc, #48]	; (8009780 <__NVIC_SetPriority+0x4c>)
 800974e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009752:	0112      	lsls	r2, r2, #4
 8009754:	b2d2      	uxtb	r2, r2
 8009756:	440b      	add	r3, r1
 8009758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800975c:	e00a      	b.n	8009774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	b2da      	uxtb	r2, r3
 8009762:	4908      	ldr	r1, [pc, #32]	; (8009784 <__NVIC_SetPriority+0x50>)
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	3b04      	subs	r3, #4
 800976c:	0112      	lsls	r2, r2, #4
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	440b      	add	r3, r1
 8009772:	761a      	strb	r2, [r3, #24]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	e000e100 	.word	0xe000e100
 8009784:	e000ed00 	.word	0xe000ed00

08009788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009788:	b480      	push	{r7}
 800978a:	b089      	sub	sp, #36	; 0x24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f1c3 0307 	rsb	r3, r3, #7
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	bf28      	it	cs
 80097a6:	2304      	movcs	r3, #4
 80097a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	3304      	adds	r3, #4
 80097ae:	2b06      	cmp	r3, #6
 80097b0:	d902      	bls.n	80097b8 <NVIC_EncodePriority+0x30>
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	3b03      	subs	r3, #3
 80097b6:	e000      	b.n	80097ba <NVIC_EncodePriority+0x32>
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	43da      	mvns	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	401a      	ands	r2, r3
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097d0:	f04f 31ff 	mov.w	r1, #4294967295
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	fa01 f303 	lsl.w	r3, r1, r3
 80097da:	43d9      	mvns	r1, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097e0:	4313      	orrs	r3, r2
         );
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3724      	adds	r7, #36	; 0x24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009800:	d301      	bcc.n	8009806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009802:	2301      	movs	r3, #1
 8009804:	e00f      	b.n	8009826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009806:	4a0a      	ldr	r2, [pc, #40]	; (8009830 <SysTick_Config+0x40>)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3b01      	subs	r3, #1
 800980c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800980e:	210f      	movs	r1, #15
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	f7ff ff8e 	bl	8009734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009818:	4b05      	ldr	r3, [pc, #20]	; (8009830 <SysTick_Config+0x40>)
 800981a:	2200      	movs	r2, #0
 800981c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800981e:	4b04      	ldr	r3, [pc, #16]	; (8009830 <SysTick_Config+0x40>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	e000e010 	.word	0xe000e010

08009834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff ff29 	bl	8009694 <__NVIC_SetPriorityGrouping>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	4603      	mov	r3, r0
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
 8009856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800985c:	f7ff ff3e 	bl	80096dc <__NVIC_GetPriorityGrouping>
 8009860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	6978      	ldr	r0, [r7, #20]
 8009868:	f7ff ff8e 	bl	8009788 <NVIC_EncodePriority>
 800986c:	4602      	mov	r2, r0
 800986e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009872:	4611      	mov	r1, r2
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff ff5d 	bl	8009734 <__NVIC_SetPriority>
}
 800987a:	bf00      	nop
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	4603      	mov	r3, r0
 800988a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800988c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff ff31 	bl	80096f8 <__NVIC_EnableIRQ>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff ffa2 	bl	80097f0 <SysTick_Config>
 80098ac:	4603      	mov	r3, r0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80098c4:	f7ff fab4 	bl	8008e30 <HAL_GetTick>
 80098c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e099      	b.n	8009a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098f4:	e00f      	b.n	8009916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80098f6:	f7ff fa9b 	bl	8008e30 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b05      	cmp	r3, #5
 8009902:	d908      	bls.n	8009916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2203      	movs	r2, #3
 800990e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e078      	b.n	8009a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e8      	bne.n	80098f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4b38      	ldr	r3, [pc, #224]	; (8009a10 <HAL_DMA_Init+0x158>)
 8009930:	4013      	ands	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800994e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800995a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4313      	orrs	r3, r2
 8009966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b04      	cmp	r3, #4
 800996e:	d107      	bne.n	8009980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	4313      	orrs	r3, r2
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0307 	bic.w	r3, r3, #7
 8009996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d117      	bne.n	80099da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00e      	beq.n	80099da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa9d 	bl	8009efc <DMA_CheckFifoParam>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2240      	movs	r2, #64	; 0x40
 80099cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80099d6:	2301      	movs	r3, #1
 80099d8:	e016      	b.n	8009a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa54 	bl	8009e90 <DMA_CalcBaseAndBitshift>
 80099e8:	4603      	mov	r3, r0
 80099ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f0:	223f      	movs	r2, #63	; 0x3f
 80099f2:	409a      	lsls	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	f010803f 	.word	0xf010803f

08009a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_DMA_Start_IT+0x26>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e040      	b.n	8009abc <HAL_DMA_Start_IT+0xa8>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d12f      	bne.n	8009aae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2202      	movs	r2, #2
 8009a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f9e6 	bl	8009e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	223f      	movs	r2, #63	; 0x3f
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0216 	orr.w	r2, r2, #22
 8009a82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0208 	orr.w	r2, r2, #8
 8009a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e005      	b.n	8009aba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2280      	movs	r2, #128	; 0x80
 8009adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e00c      	b.n	8009afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009b14:	4b92      	ldr	r3, [pc, #584]	; (8009d60 <HAL_DMA_IRQHandler+0x258>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a92      	ldr	r2, [pc, #584]	; (8009d64 <HAL_DMA_IRQHandler+0x25c>)
 8009b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1e:	0a9b      	lsrs	r3, r3, #10
 8009b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b32:	2208      	movs	r2, #8
 8009b34:	409a      	lsls	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d01a      	beq.n	8009b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d013      	beq.n	8009b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 0204 	bic.w	r2, r2, #4
 8009b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b60:	2208      	movs	r2, #8
 8009b62:	409a      	lsls	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	f043 0201 	orr.w	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b78:	2201      	movs	r2, #1
 8009b7a:	409a      	lsls	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d012      	beq.n	8009baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b96:	2201      	movs	r2, #1
 8009b98:	409a      	lsls	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	f043 0202 	orr.w	r2, r3, #2
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bae:	2204      	movs	r2, #4
 8009bb0:	409a      	lsls	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d012      	beq.n	8009be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00b      	beq.n	8009be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bcc:	2204      	movs	r2, #4
 8009bce:	409a      	lsls	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd8:	f043 0204 	orr.w	r2, r3, #4
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be4:	2210      	movs	r2, #16
 8009be6:	409a      	lsls	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4013      	ands	r3, r2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d043      	beq.n	8009c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d03c      	beq.n	8009c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c02:	2210      	movs	r2, #16
 8009c04:	409a      	lsls	r2, r3
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d018      	beq.n	8009c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d108      	bne.n	8009c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d024      	beq.n	8009c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	4798      	blx	r3
 8009c36:	e01f      	b.n	8009c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01b      	beq.n	8009c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
 8009c48:	e016      	b.n	8009c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d107      	bne.n	8009c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0208 	bic.w	r2, r2, #8
 8009c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	409a      	lsls	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 808e 	beq.w	8009da6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0310 	and.w	r3, r3, #16
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8086 	beq.w	8009da6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	409a      	lsls	r2, r3
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d136      	bne.n	8009d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0216 	bic.w	r2, r2, #22
 8009cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695a      	ldr	r2, [r3, #20]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <HAL_DMA_IRQHandler+0x1da>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0208 	bic.w	r2, r2, #8
 8009cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf6:	223f      	movs	r2, #63	; 0x3f
 8009cf8:	409a      	lsls	r2, r3
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d07d      	beq.n	8009e12 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	4798      	blx	r3
        }
        return;
 8009d1e:	e078      	b.n	8009e12 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01c      	beq.n	8009d68 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d108      	bne.n	8009d4e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d030      	beq.n	8009da6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	4798      	blx	r3
 8009d4c:	e02b      	b.n	8009da6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d027      	beq.n	8009da6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	e022      	b.n	8009da6 <HAL_DMA_IRQHandler+0x29e>
 8009d60:	20000000 	.word	0x20000000
 8009d64:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10f      	bne.n	8009d96 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0210 	bic.w	r2, r2, #16
 8009d84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d032      	beq.n	8009e14 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d022      	beq.n	8009e00 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2205      	movs	r2, #5
 8009dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0201 	bic.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60bb      	str	r3, [r7, #8]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d307      	bcc.n	8009dee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f2      	bne.n	8009dd2 <HAL_DMA_IRQHandler+0x2ca>
 8009dec:	e000      	b.n	8009df0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009dee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	4798      	blx	r3
 8009e10:	e000      	b.n	8009e14 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009e12:	bf00      	nop
    }
  }
}
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop

08009e1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b40      	cmp	r3, #64	; 0x40
 8009e60:	d108      	bne.n	8009e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009e72:	e007      	b.n	8009e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	60da      	str	r2, [r3, #12]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	3b10      	subs	r3, #16
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	091b      	lsrs	r3, r3, #4
 8009ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009eaa:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d909      	bls.n	8009ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	659a      	str	r2, [r3, #88]	; 0x58
 8009ed0:	e007      	b.n	8009ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	aaaaaaab 	.word	0xaaaaaaab
 8009ef8:	080192bc 	.word	0x080192bc

08009efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d11f      	bne.n	8009f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d855      	bhi.n	8009fc8 <DMA_CheckFifoParam+0xcc>
 8009f1c:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <DMA_CheckFifoParam+0x28>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f35 	.word	0x08009f35
 8009f28:	08009f47 	.word	0x08009f47
 8009f2c:	08009f35 	.word	0x08009f35
 8009f30:	08009fc9 	.word	0x08009fc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d045      	beq.n	8009fcc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f44:	e042      	b.n	8009fcc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f4e:	d13f      	bne.n	8009fd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f54:	e03c      	b.n	8009fd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5e:	d121      	bne.n	8009fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d836      	bhi.n	8009fd4 <DMA_CheckFifoParam+0xd8>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <DMA_CheckFifoParam+0x70>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f7d 	.word	0x08009f7d
 8009f70:	08009f83 	.word	0x08009f83
 8009f74:	08009f7d 	.word	0x08009f7d
 8009f78:	08009f95 	.word	0x08009f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f80:	e02f      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d024      	beq.n	8009fd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f92:	e021      	b.n	8009fd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f9c:	d11e      	bne.n	8009fdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009fa2:	e01b      	b.n	8009fdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d902      	bls.n	8009fb0 <DMA_CheckFifoParam+0xb4>
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d003      	beq.n	8009fb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009fae:	e018      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb4:	e015      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00e      	beq.n	8009fe0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc6:	e00b      	b.n	8009fe0 <DMA_CheckFifoParam+0xe4>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e00a      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e008      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e006      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e004      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8009fd8:	bf00      	nop
 8009fda:	e002      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;   
 8009fdc:	bf00      	nop
 8009fde:	e000      	b.n	8009fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8009fe0:	bf00      	nop
    }
  } 
  
  return status; 
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b089      	sub	sp, #36	; 0x24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a002:	2300      	movs	r3, #0
 800a004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	e177      	b.n	800a2fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a00c:	2201      	movs	r2, #1
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4013      	ands	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	429a      	cmp	r2, r3
 800a026:	f040 8166 	bne.w	800a2f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d00b      	beq.n	800a04a <HAL_GPIO_Init+0x5a>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d007      	beq.n	800a04a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a03e:	2b11      	cmp	r3, #17
 800a040:	d003      	beq.n	800a04a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b12      	cmp	r3, #18
 800a048:	d130      	bne.n	800a0ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	2203      	movs	r2, #3
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43db      	mvns	r3, r3
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	4013      	ands	r3, r2
 800a060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	fa02 f303 	lsl.w	r3, r2, r3
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	4313      	orrs	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a080:	2201      	movs	r2, #1
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	fa02 f303 	lsl.w	r3, r2, r3
 800a088:	43db      	mvns	r3, r3
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4013      	ands	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	091b      	lsrs	r3, r3, #4
 800a096:	f003 0201 	and.w	r2, r3, #1
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d003      	beq.n	800a0ec <HAL_GPIO_Init+0xfc>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b12      	cmp	r3, #18
 800a0ea:	d123      	bne.n	800a134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	08da      	lsrs	r2, r3, #3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3208      	adds	r2, #8
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	220f      	movs	r2, #15
 800a104:	fa02 f303 	lsl.w	r3, r2, r3
 800a108:	43db      	mvns	r3, r3
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	4013      	ands	r3, r2
 800a10e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	fa02 f303 	lsl.w	r3, r2, r3
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	4313      	orrs	r3, r2
 800a124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	08da      	lsrs	r2, r3, #3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3208      	adds	r2, #8
 800a12e:	69b9      	ldr	r1, [r7, #24]
 800a130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	2203      	movs	r2, #3
 800a140:	fa02 f303 	lsl.w	r3, r2, r3
 800a144:	43db      	mvns	r3, r3
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	4013      	ands	r3, r2
 800a14a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f003 0203 	and.w	r2, r3, #3
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	fa02 f303 	lsl.w	r3, r2, r3
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	4313      	orrs	r3, r2
 800a160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 80c0 	beq.w	800a2f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	4b65      	ldr	r3, [pc, #404]	; (800a310 <HAL_GPIO_Init+0x320>)
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	4a64      	ldr	r2, [pc, #400]	; (800a310 <HAL_GPIO_Init+0x320>)
 800a180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a184:	6453      	str	r3, [r2, #68]	; 0x44
 800a186:	4b62      	ldr	r3, [pc, #392]	; (800a310 <HAL_GPIO_Init+0x320>)
 800a188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a192:	4a60      	ldr	r2, [pc, #384]	; (800a314 <HAL_GPIO_Init+0x324>)
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	089b      	lsrs	r3, r3, #2
 800a198:	3302      	adds	r3, #2
 800a19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f003 0303 	and.w	r3, r3, #3
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	220f      	movs	r2, #15
 800a1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a57      	ldr	r2, [pc, #348]	; (800a318 <HAL_GPIO_Init+0x328>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d037      	beq.n	800a22e <HAL_GPIO_Init+0x23e>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a56      	ldr	r2, [pc, #344]	; (800a31c <HAL_GPIO_Init+0x32c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d031      	beq.n	800a22a <HAL_GPIO_Init+0x23a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a55      	ldr	r2, [pc, #340]	; (800a320 <HAL_GPIO_Init+0x330>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d02b      	beq.n	800a226 <HAL_GPIO_Init+0x236>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a54      	ldr	r2, [pc, #336]	; (800a324 <HAL_GPIO_Init+0x334>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d025      	beq.n	800a222 <HAL_GPIO_Init+0x232>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a53      	ldr	r2, [pc, #332]	; (800a328 <HAL_GPIO_Init+0x338>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d01f      	beq.n	800a21e <HAL_GPIO_Init+0x22e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a52      	ldr	r2, [pc, #328]	; (800a32c <HAL_GPIO_Init+0x33c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d019      	beq.n	800a21a <HAL_GPIO_Init+0x22a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a51      	ldr	r2, [pc, #324]	; (800a330 <HAL_GPIO_Init+0x340>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <HAL_GPIO_Init+0x226>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a50      	ldr	r2, [pc, #320]	; (800a334 <HAL_GPIO_Init+0x344>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d00d      	beq.n	800a212 <HAL_GPIO_Init+0x222>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a4f      	ldr	r2, [pc, #316]	; (800a338 <HAL_GPIO_Init+0x348>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d007      	beq.n	800a20e <HAL_GPIO_Init+0x21e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a4e      	ldr	r2, [pc, #312]	; (800a33c <HAL_GPIO_Init+0x34c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d101      	bne.n	800a20a <HAL_GPIO_Init+0x21a>
 800a206:	2309      	movs	r3, #9
 800a208:	e012      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a20a:	230a      	movs	r3, #10
 800a20c:	e010      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a20e:	2308      	movs	r3, #8
 800a210:	e00e      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a212:	2307      	movs	r3, #7
 800a214:	e00c      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a216:	2306      	movs	r3, #6
 800a218:	e00a      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a21a:	2305      	movs	r3, #5
 800a21c:	e008      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a21e:	2304      	movs	r3, #4
 800a220:	e006      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a222:	2303      	movs	r3, #3
 800a224:	e004      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a226:	2302      	movs	r3, #2
 800a228:	e002      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <HAL_GPIO_Init+0x240>
 800a22e:	2300      	movs	r3, #0
 800a230:	69fa      	ldr	r2, [r7, #28]
 800a232:	f002 0203 	and.w	r2, r2, #3
 800a236:	0092      	lsls	r2, r2, #2
 800a238:	4093      	lsls	r3, r2
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a240:	4934      	ldr	r1, [pc, #208]	; (800a314 <HAL_GPIO_Init+0x324>)
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	089b      	lsrs	r3, r3, #2
 800a246:	3302      	adds	r3, #2
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a24e:	4b3c      	ldr	r3, [pc, #240]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	43db      	mvns	r3, r3
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	4013      	ands	r3, r2
 800a25c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	4313      	orrs	r3, r2
 800a270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a272:	4a33      	ldr	r2, [pc, #204]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a278:	4b31      	ldr	r3, [pc, #196]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	43db      	mvns	r3, r3
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	4013      	ands	r3, r2
 800a286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4313      	orrs	r3, r2
 800a29a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a29c:	4a28      	ldr	r2, [pc, #160]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2a2:	4b27      	ldr	r3, [pc, #156]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	43db      	mvns	r3, r3
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a2c6:	4a1e      	ldr	r2, [pc, #120]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a2cc:	4b1c      	ldr	r3, [pc, #112]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	43db      	mvns	r3, r3
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2f0:	4a13      	ldr	r2, [pc, #76]	; (800a340 <HAL_GPIO_Init+0x350>)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	61fb      	str	r3, [r7, #28]
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2b0f      	cmp	r3, #15
 800a300:	f67f ae84 	bls.w	800a00c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a304:	bf00      	nop
 800a306:	3724      	adds	r7, #36	; 0x24
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	40023800 	.word	0x40023800
 800a314:	40013800 	.word	0x40013800
 800a318:	40020000 	.word	0x40020000
 800a31c:	40020400 	.word	0x40020400
 800a320:	40020800 	.word	0x40020800
 800a324:	40020c00 	.word	0x40020c00
 800a328:	40021000 	.word	0x40021000
 800a32c:	40021400 	.word	0x40021400
 800a330:	40021800 	.word	0x40021800
 800a334:	40021c00 	.word	0x40021c00
 800a338:	40022000 	.word	0x40022000
 800a33c:	40022400 	.word	0x40022400
 800a340:	40013c00 	.word	0x40013c00

0800a344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691a      	ldr	r2, [r3, #16]
 800a354:	887b      	ldrh	r3, [r7, #2]
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a35c:	2301      	movs	r3, #1
 800a35e:	73fb      	strb	r3, [r7, #15]
 800a360:	e001      	b.n	800a366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	807b      	strh	r3, [r7, #2]
 800a380:	4613      	mov	r3, r2
 800a382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a384:	787b      	ldrb	r3, [r7, #1]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a38a:	887a      	ldrh	r2, [r7, #2]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a390:	e003      	b.n	800a39a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a392:	887b      	ldrh	r3, [r7, #2]
 800a394:	041a      	lsls	r2, r3, #16
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	619a      	str	r2, [r3, #24]
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e11f      	b.n	800a5fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7fc fa2a 	bl	8006828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2224      	movs	r2, #36	; 0x24
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0201 	bic.w	r2, r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a40a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a40c:	f001 f96e 	bl	800b6ec <HAL_RCC_GetPCLK1Freq>
 800a410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	4a7b      	ldr	r2, [pc, #492]	; (800a604 <HAL_I2C_Init+0x25c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d807      	bhi.n	800a42c <HAL_I2C_Init+0x84>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a7a      	ldr	r2, [pc, #488]	; (800a608 <HAL_I2C_Init+0x260>)
 800a420:	4293      	cmp	r3, r2
 800a422:	bf94      	ite	ls
 800a424:	2301      	movls	r3, #1
 800a426:	2300      	movhi	r3, #0
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	e006      	b.n	800a43a <HAL_I2C_Init+0x92>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4a77      	ldr	r2, [pc, #476]	; (800a60c <HAL_I2C_Init+0x264>)
 800a430:	4293      	cmp	r3, r2
 800a432:	bf94      	ite	ls
 800a434:	2301      	movls	r3, #1
 800a436:	2300      	movhi	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e0db      	b.n	800a5fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4a72      	ldr	r2, [pc, #456]	; (800a610 <HAL_I2C_Init+0x268>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	0c9b      	lsrs	r3, r3, #18
 800a44c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	4a64      	ldr	r2, [pc, #400]	; (800a604 <HAL_I2C_Init+0x25c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d802      	bhi.n	800a47c <HAL_I2C_Init+0xd4>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	3301      	adds	r3, #1
 800a47a:	e009      	b.n	800a490 <HAL_I2C_Init+0xe8>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a482:	fb02 f303 	mul.w	r3, r2, r3
 800a486:	4a63      	ldr	r2, [pc, #396]	; (800a614 <HAL_I2C_Init+0x26c>)
 800a488:	fba2 2303 	umull	r2, r3, r2, r3
 800a48c:	099b      	lsrs	r3, r3, #6
 800a48e:	3301      	adds	r3, #1
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6812      	ldr	r2, [r2, #0]
 800a494:	430b      	orrs	r3, r1
 800a496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a4a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4956      	ldr	r1, [pc, #344]	; (800a604 <HAL_I2C_Init+0x25c>)
 800a4ac:	428b      	cmp	r3, r1
 800a4ae:	d80d      	bhi.n	800a4cc <HAL_I2C_Init+0x124>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	1e59      	subs	r1, r3, #1
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	bf38      	it	cc
 800a4c8:	2304      	movcc	r3, #4
 800a4ca:	e04f      	b.n	800a56c <HAL_I2C_Init+0x1c4>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d111      	bne.n	800a4f8 <HAL_I2C_Init+0x150>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	1e58      	subs	r0, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6859      	ldr	r1, [r3, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	440b      	add	r3, r1
 800a4e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2301      	moveq	r3, #1
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	e012      	b.n	800a51e <HAL_I2C_Init+0x176>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	1e58      	subs	r0, r3, #1
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6859      	ldr	r1, [r3, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	0099      	lsls	r1, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a50e:	3301      	adds	r3, #1
 800a510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf0c      	ite	eq
 800a518:	2301      	moveq	r3, #1
 800a51a:	2300      	movne	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <HAL_I2C_Init+0x17e>
 800a522:	2301      	movs	r3, #1
 800a524:	e022      	b.n	800a56c <HAL_I2C_Init+0x1c4>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10e      	bne.n	800a54c <HAL_I2C_Init+0x1a4>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1e58      	subs	r0, r3, #1
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6859      	ldr	r1, [r3, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	440b      	add	r3, r1
 800a53c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a540:	3301      	adds	r3, #1
 800a542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a54a:	e00f      	b.n	800a56c <HAL_I2C_Init+0x1c4>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	1e58      	subs	r0, r3, #1
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6859      	ldr	r1, [r3, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	440b      	add	r3, r1
 800a55a:	0099      	lsls	r1, r3, #2
 800a55c:	440b      	add	r3, r1
 800a55e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a562:	3301      	adds	r3, #1
 800a564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	6809      	ldr	r1, [r1, #0]
 800a570:	4313      	orrs	r3, r2
 800a572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	431a      	orrs	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a59a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6911      	ldr	r1, [r2, #16]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	68d2      	ldr	r2, [r2, #12]
 800a5a6:	4311      	orrs	r1, r2
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6812      	ldr	r2, [r2, #0]
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695a      	ldr	r2, [r3, #20]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	000186a0 	.word	0x000186a0
 800a608:	001e847f 	.word	0x001e847f
 800a60c:	003d08ff 	.word	0x003d08ff
 800a610:	431bde83 	.word	0x431bde83
 800a614:	10624dd3 	.word	0x10624dd3

0800a618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	461a      	mov	r2, r3
 800a624:	460b      	mov	r3, r1
 800a626:	817b      	strh	r3, [r7, #10]
 800a628:	4613      	mov	r3, r2
 800a62a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a62c:	f7fe fc00 	bl	8008e30 <HAL_GetTick>
 800a630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f040 80e0 	bne.w	800a800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	2319      	movs	r3, #25
 800a646:	2201      	movs	r2, #1
 800a648:	4970      	ldr	r1, [pc, #448]	; (800a80c <HAL_I2C_Master_Transmit+0x1f4>)
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fc58 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a656:	2302      	movs	r3, #2
 800a658:	e0d3      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_I2C_Master_Transmit+0x50>
 800a664:	2302      	movs	r3, #2
 800a666:	e0cc      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d007      	beq.n	800a68e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0201 	orr.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a69c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2221      	movs	r2, #33	; 0x21
 800a6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2210      	movs	r2, #16
 800a6aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	893a      	ldrh	r2, [r7, #8]
 800a6be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a50      	ldr	r2, [pc, #320]	; (800a810 <HAL_I2C_Master_Transmit+0x1f8>)
 800a6ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a6d0:	8979      	ldrh	r1, [r7, #10]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	6a3a      	ldr	r2, [r7, #32]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fac2 	bl	800ac60 <I2C_MasterRequestWrite>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e08d      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	613b      	str	r3, [r7, #16]
 800a6fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a6fc:	e066      	b.n	800a7cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	6a39      	ldr	r1, [r7, #32]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fcd2 	bl	800b0ac <I2C_WaitOnTXEFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00d      	beq.n	800a72a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	2b04      	cmp	r3, #4
 800a714:	d107      	bne.n	800a726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e06b      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a744:	b29b      	uxth	r3, r3
 800a746:	3b01      	subs	r3, #1
 800a748:	b29a      	uxth	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b04      	cmp	r3, #4
 800a766:	d11b      	bne.n	800a7a0 <HAL_I2C_Master_Transmit+0x188>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d017      	beq.n	800a7a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	3b01      	subs	r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	6a39      	ldr	r1, [r7, #32]
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 fcc2 	bl	800b12e <I2C_WaitOnBTFFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00d      	beq.n	800a7cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d107      	bne.n	800a7c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e01a      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d194      	bne.n	800a6fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e000      	b.n	800a802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a800:	2302      	movs	r3, #2
  }
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	00100002 	.word	0x00100002
 800a810:	ffff0000 	.word	0xffff0000

0800a814 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08c      	sub	sp, #48	; 0x30
 800a818:	af02      	add	r7, sp, #8
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	607a      	str	r2, [r7, #4]
 800a81e:	461a      	mov	r2, r3
 800a820:	460b      	mov	r3, r1
 800a822:	817b      	strh	r3, [r7, #10]
 800a824:	4613      	mov	r3, r2
 800a826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a828:	f7fe fb02 	bl	8008e30 <HAL_GetTick>
 800a82c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b20      	cmp	r3, #32
 800a838:	f040 820b 	bne.w	800ac52 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2319      	movs	r3, #25
 800a842:	2201      	movs	r2, #1
 800a844:	497c      	ldr	r1, [pc, #496]	; (800aa38 <HAL_I2C_Master_Receive+0x224>)
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fb5a 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a852:	2302      	movs	r3, #2
 800a854:	e1fe      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <HAL_I2C_Master_Receive+0x50>
 800a860:	2302      	movs	r3, #2
 800a862:	e1f7      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b01      	cmp	r3, #1
 800a878:	d007      	beq.n	800a88a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0201 	orr.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2222      	movs	r2, #34	; 0x22
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2210      	movs	r2, #16
 800a8a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	893a      	ldrh	r2, [r7, #8]
 800a8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4a5c      	ldr	r2, [pc, #368]	; (800aa3c <HAL_I2C_Master_Receive+0x228>)
 800a8ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a8cc:	8979      	ldrh	r1, [r7, #10]
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fa46 	bl	800ad64 <I2C_MasterRequestRead>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e1b8      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d113      	bne.n	800a912 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	623b      	str	r3, [r7, #32]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	623b      	str	r3, [r7, #32]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	623b      	str	r3, [r7, #32]
 800a8fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e18c      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a916:	2b01      	cmp	r3, #1
 800a918:	d11b      	bne.n	800a952 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a92a:	2300      	movs	r3, #0
 800a92c:	61fb      	str	r3, [r7, #28]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	e16c      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a956:	2b02      	cmp	r3, #2
 800a958:	d11b      	bne.n	800a992 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a968:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a97a:	2300      	movs	r3, #0
 800a97c:	61bb      	str	r3, [r7, #24]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	61bb      	str	r3, [r7, #24]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	61bb      	str	r3, [r7, #24]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	e14c      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	617b      	str	r3, [r7, #20]
 800a9b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a9b8:	e138      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	f200 80f1 	bhi.w	800aba6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d123      	bne.n	800aa14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fbed 	bl	800b1b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e139      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa12:	e10b      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d14e      	bne.n	800aaba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	2200      	movs	r2, #0
 800aa24:	4906      	ldr	r1, [pc, #24]	; (800aa40 <HAL_I2C_Master_Receive+0x22c>)
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 fa6a 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d008      	beq.n	800aa44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e10e      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
 800aa36:	bf00      	nop
 800aa38:	00100002 	.word	0x00100002
 800aa3c:	ffff0000 	.word	0xffff0000
 800aa40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	b2d2      	uxtb	r2, r2
 800aa92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aab8:	e0b8      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2200      	movs	r2, #0
 800aac2:	4966      	ldr	r1, [pc, #408]	; (800ac5c <HAL_I2C_Master_Receive+0x448>)
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fa1b 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e0bf      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691a      	ldr	r2, [r3, #16]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab00:	3b01      	subs	r3, #1
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	494f      	ldr	r1, [pc, #316]	; (800ac5c <HAL_I2C_Master_Receive+0x448>)
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f9ed 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e091      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	b2d2      	uxtb	r2, r2
 800ab7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aba4:	e042      	b.n	800ac2c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fb00 	bl	800b1b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e04c      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f003 0304 	and.w	r3, r3, #4
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d118      	bne.n	800ac2c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f47f aec2 	bne.w	800a9ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3728      	adds	r7, #40	; 0x28
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	00010004 	.word	0x00010004

0800ac60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d006      	beq.n	800ac8a <I2C_MasterRequestWrite+0x2a>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d003      	beq.n	800ac8a <I2C_MasterRequestWrite+0x2a>
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac88:	d108      	bne.n	800ac9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	e00b      	b.n	800acb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca0:	2b12      	cmp	r3, #18
 800aca2:	d107      	bne.n	800acb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 f91d 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00d      	beq.n	800ace8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acda:	d103      	bne.n	800ace4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e035      	b.n	800ad54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf0:	d108      	bne.n	800ad04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acf2:	897b      	ldrh	r3, [r7, #10]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad00:	611a      	str	r2, [r3, #16]
 800ad02:	e01b      	b.n	800ad3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad04:	897b      	ldrh	r3, [r7, #10]
 800ad06:	11db      	asrs	r3, r3, #7
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 0306 	and.w	r3, r3, #6
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f063 030f 	orn	r3, r3, #15
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	490e      	ldr	r1, [pc, #56]	; (800ad5c <I2C_MasterRequestWrite+0xfc>)
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f943 	bl	800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e010      	b.n	800ad54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad32:	897b      	ldrh	r3, [r7, #10]
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4907      	ldr	r1, [pc, #28]	; (800ad60 <I2C_MasterRequestWrite+0x100>)
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f933 	bl	800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	00010008 	.word	0x00010008
 800ad60:	00010002 	.word	0x00010002

0800ad64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af02      	add	r7, sp, #8
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	607a      	str	r2, [r7, #4]
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	460b      	mov	r3, r1
 800ad72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b08      	cmp	r3, #8
 800ad8e:	d006      	beq.n	800ad9e <I2C_MasterRequestRead+0x3a>
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d003      	beq.n	800ad9e <I2C_MasterRequestRead+0x3a>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad9c:	d108      	bne.n	800adb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e00b      	b.n	800adc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb4:	2b11      	cmp	r3, #17
 800adb6:	d107      	bne.n	800adc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f893 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00d      	beq.n	800adfc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adee:	d103      	bne.n	800adf8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e079      	b.n	800aef0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae04:	d108      	bne.n	800ae18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae06:	897b      	ldrh	r3, [r7, #10]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	f043 0301 	orr.w	r3, r3, #1
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	611a      	str	r2, [r3, #16]
 800ae16:	e05f      	b.n	800aed8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ae18:	897b      	ldrh	r3, [r7, #10]
 800ae1a:	11db      	asrs	r3, r3, #7
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0306 	and.w	r3, r3, #6
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f063 030f 	orn	r3, r3, #15
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4930      	ldr	r1, [pc, #192]	; (800aef8 <I2C_MasterRequestRead+0x194>)
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f8b9 	bl	800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e054      	b.n	800aef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ae46:	897b      	ldrh	r3, [r7, #10]
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	4929      	ldr	r1, [pc, #164]	; (800aefc <I2C_MasterRequestRead+0x198>)
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f8a9 	bl	800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e044      	b.n	800aef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae66:	2300      	movs	r3, #0
 800ae68:	613b      	str	r3, [r7, #16]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	613b      	str	r3, [r7, #16]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f831 	bl	800af00 <I2C_WaitOnFlagUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00d      	beq.n	800aec0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb2:	d103      	bne.n	800aebc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e017      	b.n	800aef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800aec0:	897b      	ldrh	r3, [r7, #10]
 800aec2:	11db      	asrs	r3, r3, #7
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f003 0306 	and.w	r3, r3, #6
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f063 030e 	orn	r3, r3, #14
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	4907      	ldr	r1, [pc, #28]	; (800aefc <I2C_MasterRequestRead+0x198>)
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f865 	bl	800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	00010008 	.word	0x00010008
 800aefc:	00010002 	.word	0x00010002

0800af00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af10:	e025      	b.n	800af5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af18:	d021      	beq.n	800af5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af1a:	f7fd ff89 	bl	8008e30 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d302      	bcc.n	800af30 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d116      	bne.n	800af5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2220      	movs	r2, #32
 800af3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	f043 0220 	orr.w	r2, r3, #32
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e023      	b.n	800afa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	0c1b      	lsrs	r3, r3, #16
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	d10d      	bne.n	800af84 <I2C_WaitOnFlagUntilTimeout+0x84>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	43da      	mvns	r2, r3
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	4013      	ands	r3, r2
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	bf0c      	ite	eq
 800af7a:	2301      	moveq	r3, #1
 800af7c:	2300      	movne	r3, #0
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	461a      	mov	r2, r3
 800af82:	e00c      	b.n	800af9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	43da      	mvns	r2, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	4013      	ands	r3, r2
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf0c      	ite	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	2300      	movne	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	461a      	mov	r2, r3
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d0b6      	beq.n	800af12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afbc:	e051      	b.n	800b062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afcc:	d123      	bne.n	800b016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800afe6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b002:	f043 0204 	orr.w	r2, r3, #4
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e046      	b.n	800b0a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01c:	d021      	beq.n	800b062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b01e:	f7fd ff07 	bl	8008e30 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d302      	bcc.n	800b034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d116      	bne.n	800b062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	f043 0220 	orr.w	r2, r3, #32
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e020      	b.n	800b0a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d10c      	bne.n	800b086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	43da      	mvns	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4013      	ands	r3, r2
 800b078:	b29b      	uxth	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bf14      	ite	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	2300      	moveq	r3, #0
 800b082:	b2db      	uxtb	r3, r3
 800b084:	e00b      	b.n	800b09e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	43da      	mvns	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	4013      	ands	r3, r2
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf14      	ite	ne
 800b098:	2301      	movne	r3, #1
 800b09a:	2300      	moveq	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d18d      	bne.n	800afbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0b8:	e02d      	b.n	800b116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f8ce 	bl	800b25c <I2C_IsAcknowledgeFailed>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e02d      	b.n	800b126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d0:	d021      	beq.n	800b116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0d2:	f7fd fead 	bl	8008e30 <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d302      	bcc.n	800b0e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d116      	bne.n	800b116 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	f043 0220 	orr.w	r2, r3, #32
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e007      	b.n	800b126 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b120:	2b80      	cmp	r3, #128	; 0x80
 800b122:	d1ca      	bne.n	800b0ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b13a:	e02d      	b.n	800b198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f88d 	bl	800b25c <I2C_IsAcknowledgeFailed>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e02d      	b.n	800b1a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b152:	d021      	beq.n	800b198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b154:	f7fd fe6c 	bl	8008e30 <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	429a      	cmp	r2, r3
 800b162:	d302      	bcc.n	800b16a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d116      	bne.n	800b198 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2220      	movs	r2, #32
 800b174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b184:	f043 0220 	orr.w	r2, r3, #32
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e007      	b.n	800b1a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d1ca      	bne.n	800b13c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1bc:	e042      	b.n	800b244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d119      	bne.n	800b200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f06f 0210 	mvn.w	r2, #16
 800b1d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e029      	b.n	800b254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b200:	f7fd fe16 	bl	8008e30 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d302      	bcc.n	800b216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d116      	bne.n	800b244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2220      	movs	r2, #32
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b230:	f043 0220 	orr.w	r2, r3, #32
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e007      	b.n	800b254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24e:	2b40      	cmp	r3, #64	; 0x40
 800b250:	d1b5      	bne.n	800b1be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b26e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b272:	d11b      	bne.n	800b2ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b27c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2220      	movs	r2, #32
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b298:	f043 0204 	orr.w	r2, r3, #4
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
	...

0800b2bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	603b      	str	r3, [r7, #0]
 800b2ca:	4b20      	ldr	r3, [pc, #128]	; (800b34c <HAL_PWREx_EnableOverDrive+0x90>)
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ce:	4a1f      	ldr	r2, [pc, #124]	; (800b34c <HAL_PWREx_EnableOverDrive+0x90>)
 800b2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2d4:	6413      	str	r3, [r2, #64]	; 0x40
 800b2d6:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <HAL_PWREx_EnableOverDrive+0x90>)
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2de:	603b      	str	r3, [r7, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b2e2:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <HAL_PWREx_EnableOverDrive+0x94>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2e8:	f7fd fda2 	bl	8008e30 <HAL_GetTick>
 800b2ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2ee:	e009      	b.n	800b304 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2f0:	f7fd fd9e 	bl	8008e30 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2fe:	d901      	bls.n	800b304 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e01f      	b.n	800b344 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <HAL_PWREx_EnableOverDrive+0x98>)
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b310:	d1ee      	bne.n	800b2f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b312:	4b11      	ldr	r3, [pc, #68]	; (800b358 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b314:	2201      	movs	r2, #1
 800b316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b318:	f7fd fd8a 	bl	8008e30 <HAL_GetTick>
 800b31c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b31e:	e009      	b.n	800b334 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b320:	f7fd fd86 	bl	8008e30 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b32e:	d901      	bls.n	800b334 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e007      	b.n	800b344 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b334:	4b07      	ldr	r3, [pc, #28]	; (800b354 <HAL_PWREx_EnableOverDrive+0x98>)
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b33c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b340:	d1ee      	bne.n	800b320 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	40023800 	.word	0x40023800
 800b350:	420e0040 	.word	0x420e0040
 800b354:	40007000 	.word	0x40007000
 800b358:	420e0044 	.word	0x420e0044

0800b35c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e0cc      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b370:	4b68      	ldr	r3, [pc, #416]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 030f 	and.w	r3, r3, #15
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d90c      	bls.n	800b398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b37e:	4b65      	ldr	r3, [pc, #404]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b386:	4b63      	ldr	r3, [pc, #396]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d001      	beq.n	800b398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e0b8      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d020      	beq.n	800b3e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3b0:	4b59      	ldr	r3, [pc, #356]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	4a58      	ldr	r2, [pc, #352]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b3ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d005      	beq.n	800b3d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3c8:	4b53      	ldr	r3, [pc, #332]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	4a52      	ldr	r2, [pc, #328]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b3d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3d4:	4b50      	ldr	r3, [pc, #320]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	494d      	ldr	r1, [pc, #308]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d044      	beq.n	800b47c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d107      	bne.n	800b40a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3fa:	4b47      	ldr	r3, [pc, #284]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b402:	2b00      	cmp	r3, #0
 800b404:	d119      	bne.n	800b43a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e07f      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d003      	beq.n	800b41a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b416:	2b03      	cmp	r3, #3
 800b418:	d107      	bne.n	800b42a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b41a:	4b3f      	ldr	r3, [pc, #252]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e06f      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b42a:	4b3b      	ldr	r3, [pc, #236]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e067      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b43a:	4b37      	ldr	r3, [pc, #220]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f023 0203 	bic.w	r2, r3, #3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4934      	ldr	r1, [pc, #208]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b44c:	f7fd fcf0 	bl	8008e30 <HAL_GetTick>
 800b450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b452:	e00a      	b.n	800b46a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b454:	f7fd fcec 	bl	8008e30 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b462:	4293      	cmp	r3, r2
 800b464:	d901      	bls.n	800b46a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e04f      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b46a:	4b2b      	ldr	r3, [pc, #172]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f003 020c 	and.w	r2, r3, #12
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	429a      	cmp	r2, r3
 800b47a:	d1eb      	bne.n	800b454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d20c      	bcs.n	800b4a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b48a:	4b22      	ldr	r3, [pc, #136]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b492:	4b20      	ldr	r3, [pc, #128]	; (800b514 <HAL_RCC_ClockConfig+0x1b8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d001      	beq.n	800b4a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e032      	b.n	800b50a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d008      	beq.n	800b4c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4b0:	4b19      	ldr	r3, [pc, #100]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	4916      	ldr	r1, [pc, #88]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0308 	and.w	r3, r3, #8
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d009      	beq.n	800b4e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b4ce:	4b12      	ldr	r3, [pc, #72]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	490e      	ldr	r1, [pc, #56]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b4e2:	f000 f821 	bl	800b528 <HAL_RCC_GetSysClockFreq>
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	091b      	lsrs	r3, r3, #4
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	4a0a      	ldr	r2, [pc, #40]	; (800b51c <HAL_RCC_ClockConfig+0x1c0>)
 800b4f4:	5cd3      	ldrb	r3, [r2, r3]
 800b4f6:	fa21 f303 	lsr.w	r3, r1, r3
 800b4fa:	4a09      	ldr	r2, [pc, #36]	; (800b520 <HAL_RCC_ClockConfig+0x1c4>)
 800b4fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <HAL_RCC_ClockConfig+0x1c8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f7fd fc50 	bl	8008da8 <HAL_InitTick>

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	40023c00 	.word	0x40023c00
 800b518:	40023800 	.word	0x40023800
 800b51c:	080192a4 	.word	0x080192a4
 800b520:	20000000 	.word	0x20000000
 800b524:	20000004 	.word	0x20000004

0800b528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	607b      	str	r3, [r7, #4]
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	2300      	movs	r3, #0
 800b538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b53e:	4b63      	ldr	r3, [pc, #396]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f003 030c 	and.w	r3, r3, #12
 800b546:	2b04      	cmp	r3, #4
 800b548:	d007      	beq.n	800b55a <HAL_RCC_GetSysClockFreq+0x32>
 800b54a:	2b08      	cmp	r3, #8
 800b54c:	d008      	beq.n	800b560 <HAL_RCC_GetSysClockFreq+0x38>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f040 80b4 	bne.w	800b6bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b554:	4b5e      	ldr	r3, [pc, #376]	; (800b6d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b556:	60bb      	str	r3, [r7, #8]
       break;
 800b558:	e0b3      	b.n	800b6c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b55a:	4b5d      	ldr	r3, [pc, #372]	; (800b6d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b55c:	60bb      	str	r3, [r7, #8]
      break;
 800b55e:	e0b0      	b.n	800b6c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b560:	4b5a      	ldr	r3, [pc, #360]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b568:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b56a:	4b58      	ldr	r3, [pc, #352]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d04a      	beq.n	800b60c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b576:	4b55      	ldr	r3, [pc, #340]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	099b      	lsrs	r3, r3, #6
 800b57c:	f04f 0400 	mov.w	r4, #0
 800b580:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	ea03 0501 	and.w	r5, r3, r1
 800b58c:	ea04 0602 	and.w	r6, r4, r2
 800b590:	4629      	mov	r1, r5
 800b592:	4632      	mov	r2, r6
 800b594:	f04f 0300 	mov.w	r3, #0
 800b598:	f04f 0400 	mov.w	r4, #0
 800b59c:	0154      	lsls	r4, r2, #5
 800b59e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5a2:	014b      	lsls	r3, r1, #5
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	1b49      	subs	r1, r1, r5
 800b5aa:	eb62 0206 	sbc.w	r2, r2, r6
 800b5ae:	f04f 0300 	mov.w	r3, #0
 800b5b2:	f04f 0400 	mov.w	r4, #0
 800b5b6:	0194      	lsls	r4, r2, #6
 800b5b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b5bc:	018b      	lsls	r3, r1, #6
 800b5be:	1a5b      	subs	r3, r3, r1
 800b5c0:	eb64 0402 	sbc.w	r4, r4, r2
 800b5c4:	f04f 0100 	mov.w	r1, #0
 800b5c8:	f04f 0200 	mov.w	r2, #0
 800b5cc:	00e2      	lsls	r2, r4, #3
 800b5ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b5d2:	00d9      	lsls	r1, r3, #3
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	195b      	adds	r3, r3, r5
 800b5da:	eb44 0406 	adc.w	r4, r4, r6
 800b5de:	f04f 0100 	mov.w	r1, #0
 800b5e2:	f04f 0200 	mov.w	r2, #0
 800b5e6:	02a2      	lsls	r2, r4, #10
 800b5e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b5ec:	0299      	lsls	r1, r3, #10
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f04f 0400 	mov.w	r4, #0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4623      	mov	r3, r4
 800b600:	f7f5 fb5a 	bl	8000cb8 <__aeabi_uldivmod>
 800b604:	4603      	mov	r3, r0
 800b606:	460c      	mov	r4, r1
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e049      	b.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b60c:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	099b      	lsrs	r3, r3, #6
 800b612:	f04f 0400 	mov.w	r4, #0
 800b616:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b61a:	f04f 0200 	mov.w	r2, #0
 800b61e:	ea03 0501 	and.w	r5, r3, r1
 800b622:	ea04 0602 	and.w	r6, r4, r2
 800b626:	4629      	mov	r1, r5
 800b628:	4632      	mov	r2, r6
 800b62a:	f04f 0300 	mov.w	r3, #0
 800b62e:	f04f 0400 	mov.w	r4, #0
 800b632:	0154      	lsls	r4, r2, #5
 800b634:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b638:	014b      	lsls	r3, r1, #5
 800b63a:	4619      	mov	r1, r3
 800b63c:	4622      	mov	r2, r4
 800b63e:	1b49      	subs	r1, r1, r5
 800b640:	eb62 0206 	sbc.w	r2, r2, r6
 800b644:	f04f 0300 	mov.w	r3, #0
 800b648:	f04f 0400 	mov.w	r4, #0
 800b64c:	0194      	lsls	r4, r2, #6
 800b64e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b652:	018b      	lsls	r3, r1, #6
 800b654:	1a5b      	subs	r3, r3, r1
 800b656:	eb64 0402 	sbc.w	r4, r4, r2
 800b65a:	f04f 0100 	mov.w	r1, #0
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	00e2      	lsls	r2, r4, #3
 800b664:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b668:	00d9      	lsls	r1, r3, #3
 800b66a:	460b      	mov	r3, r1
 800b66c:	4614      	mov	r4, r2
 800b66e:	195b      	adds	r3, r3, r5
 800b670:	eb44 0406 	adc.w	r4, r4, r6
 800b674:	f04f 0100 	mov.w	r1, #0
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	02a2      	lsls	r2, r4, #10
 800b67e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b682:	0299      	lsls	r1, r3, #10
 800b684:	460b      	mov	r3, r1
 800b686:	4614      	mov	r4, r2
 800b688:	4618      	mov	r0, r3
 800b68a:	4621      	mov	r1, r4
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f04f 0400 	mov.w	r4, #0
 800b692:	461a      	mov	r2, r3
 800b694:	4623      	mov	r3, r4
 800b696:	f7f5 fb0f 	bl	8000cb8 <__aeabi_uldivmod>
 800b69a:	4603      	mov	r3, r0
 800b69c:	460c      	mov	r4, r1
 800b69e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	0c1b      	lsrs	r3, r3, #16
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b8:	60bb      	str	r3, [r7, #8]
      break;
 800b6ba:	e002      	b.n	800b6c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b6be:	60bb      	str	r3, [r7, #8]
      break;
 800b6c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6cc:	40023800 	.word	0x40023800
 800b6d0:	00f42400 	.word	0x00f42400

0800b6d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6d8:	4b03      	ldr	r3, [pc, #12]	; (800b6e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b6da:	681b      	ldr	r3, [r3, #0]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20000000 	.word	0x20000000

0800b6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b6f0:	f7ff fff0 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	4b05      	ldr	r3, [pc, #20]	; (800b70c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	0a9b      	lsrs	r3, r3, #10
 800b6fc:	f003 0307 	and.w	r3, r3, #7
 800b700:	4a03      	ldr	r2, [pc, #12]	; (800b710 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b702:	5cd3      	ldrb	r3, [r2, r3]
 800b704:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b708:	4618      	mov	r0, r3
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	40023800 	.word	0x40023800
 800b710:	080192b4 	.word	0x080192b4

0800b714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b718:	f7ff ffdc 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 800b71c:	4601      	mov	r1, r0
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	0b5b      	lsrs	r3, r3, #13
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	4a03      	ldr	r2, [pc, #12]	; (800b738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b72a:	5cd3      	ldrb	r3, [r2, r3]
 800b72c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b730:	4618      	mov	r0, r3
 800b732:	bd80      	pop	{r7, pc}
 800b734:	40023800 	.word	0x40023800
 800b738:	080192b4 	.word	0x080192b4

0800b73c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00a      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b764:	4b66      	ldr	r3, [pc, #408]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b76a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b772:	4963      	ldr	r1, [pc, #396]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b774:	4313      	orrs	r3, r2
 800b776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b786:	4b5e      	ldr	r3, [pc, #376]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b78c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	495a      	ldr	r1, [pc, #360]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b796:	4313      	orrs	r3, r2
 800b798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d105      	bne.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d075      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b7c0:	4b50      	ldr	r3, [pc, #320]	; (800b904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b7c6:	f7fd fb33 	bl	8008e30 <HAL_GetTick>
 800b7ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b7ce:	f7fd fb2f 	bl	8008e30 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e1dc      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b7e0:	4b47      	ldr	r3, [pc, #284]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	019a      	lsls	r2, r3, #6
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	071b      	lsls	r3, r3, #28
 800b804:	493e      	ldr	r1, [pc, #248]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b806:	4313      	orrs	r3, r2
 800b808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01f      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b818:	4b39      	ldr	r3, [pc, #228]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b81e:	0f1b      	lsrs	r3, r3, #28
 800b820:	f003 0307 	and.w	r3, r3, #7
 800b824:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	019a      	lsls	r2, r3, #6
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	061b      	lsls	r3, r3, #24
 800b832:	431a      	orrs	r2, r3
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	071b      	lsls	r3, r3, #28
 800b838:	4931      	ldr	r1, [pc, #196]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b83a:	4313      	orrs	r3, r2
 800b83c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b840:	4b2f      	ldr	r3, [pc, #188]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b846:	f023 021f 	bic.w	r2, r3, #31
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	3b01      	subs	r3, #1
 800b850:	492b      	ldr	r1, [pc, #172]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b852:	4313      	orrs	r3, r2
 800b854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00d      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	019a      	lsls	r2, r3, #6
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	061b      	lsls	r3, r3, #24
 800b870:	431a      	orrs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	071b      	lsls	r3, r3, #28
 800b878:	4921      	ldr	r1, [pc, #132]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b880:	4b20      	ldr	r3, [pc, #128]	; (800b904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b882:	2201      	movs	r2, #1
 800b884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b886:	f7fd fad3 	bl	8008e30 <HAL_GetTick>
 800b88a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b88c:	e008      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b88e:	f7fd facf 	bl	8008e30 <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d901      	bls.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e17c      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b8a0:	4b17      	ldr	r3, [pc, #92]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d0f0      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d112      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10c      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 80ce 	beq.w	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b8d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8da:	f040 80c8 	bne.w	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b8de:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b8e4:	f7fd faa4 	bl	8008e30 <HAL_GetTick>
 800b8e8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b8ea:	e00f      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b8ec:	f7fd faa0 	bl	8008e30 <HAL_GetTick>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d908      	bls.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e14d      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b8fe:	bf00      	nop
 800b900:	40023800 	.word	0x40023800
 800b904:	42470068 	.word	0x42470068
 800b908:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b90c:	4ba5      	ldr	r3, [pc, #660]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b918:	d0e8      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0304 	and.w	r3, r3, #4
 800b922:	2b00      	cmp	r3, #0
 800b924:	d02e      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b926:	4b9f      	ldr	r3, [pc, #636]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	0c1b      	lsrs	r3, r3, #16
 800b92e:	f003 0303 	and.w	r3, r3, #3
 800b932:	3301      	adds	r3, #1
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b938:	4b9a      	ldr	r3, [pc, #616]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93e:	0f1b      	lsrs	r3, r3, #28
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	019a      	lsls	r2, r3, #6
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	3b01      	subs	r3, #1
 800b952:	041b      	lsls	r3, r3, #16
 800b954:	431a      	orrs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	061b      	lsls	r3, r3, #24
 800b95c:	431a      	orrs	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	071b      	lsls	r3, r3, #28
 800b962:	4990      	ldr	r1, [pc, #576]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b964:	4313      	orrs	r3, r2
 800b966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b96a:	4b8e      	ldr	r3, [pc, #568]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	3b01      	subs	r3, #1
 800b97a:	021b      	lsls	r3, r3, #8
 800b97c:	4989      	ldr	r1, [pc, #548]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0308 	and.w	r3, r3, #8
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02c      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b990:	4b84      	ldr	r3, [pc, #528]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b996:	0c1b      	lsrs	r3, r3, #16
 800b998:	f003 0303 	and.w	r3, r3, #3
 800b99c:	3301      	adds	r3, #1
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b9a2:	4b80      	ldr	r3, [pc, #512]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a8:	0e1b      	lsrs	r3, r3, #24
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	019a      	lsls	r2, r3, #6
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	041b      	lsls	r3, r3, #16
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	061b      	lsls	r3, r3, #24
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	071b      	lsls	r3, r3, #28
 800b9cc:	4975      	ldr	r1, [pc, #468]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b9d4:	4b73      	ldr	r3, [pc, #460]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	4970      	ldr	r1, [pc, #448]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d024      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b9fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9fe:	d11f      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba00:	4b68      	ldr	r3, [pc, #416]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba06:	0e1b      	lsrs	r3, r3, #24
 800ba08:	f003 030f 	and.w	r3, r3, #15
 800ba0c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba0e:	4b65      	ldr	r3, [pc, #404]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba14:	0f1b      	lsrs	r3, r3, #28
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	019a      	lsls	r2, r3, #6
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	085b      	lsrs	r3, r3, #1
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	061b      	lsls	r3, r3, #24
 800ba32:	431a      	orrs	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	071b      	lsls	r3, r3, #28
 800ba38:	495a      	ldr	r1, [pc, #360]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ba40:	4b59      	ldr	r3, [pc, #356]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ba42:	2201      	movs	r2, #1
 800ba44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba46:	f7fd f9f3 	bl	8008e30 <HAL_GetTick>
 800ba4a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba4c:	e008      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ba4e:	f7fd f9ef 	bl	8008e30 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d901      	bls.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e09c      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba60:	4b50      	ldr	r3, [pc, #320]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba6c:	d1ef      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8083 	beq.w	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60bb      	str	r3, [r7, #8]
 800ba80:	4b48      	ldr	r3, [pc, #288]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba84:	4a47      	ldr	r2, [pc, #284]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba8a:	6413      	str	r3, [r2, #64]	; 0x40
 800ba8c:	4b45      	ldr	r3, [pc, #276]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ba98:	4b44      	ldr	r3, [pc, #272]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a43      	ldr	r2, [pc, #268]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800baa4:	f7fd f9c4 	bl	8008e30 <HAL_GetTick>
 800baa8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800baaa:	e008      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800baac:	f7fd f9c0 	bl	8008e30 <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d901      	bls.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e06d      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800babe:	4b3b      	ldr	r3, [pc, #236]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0f0      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800baca:	4b36      	ldr	r3, [pc, #216]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d02f      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d028      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bae8:	4b2e      	ldr	r3, [pc, #184]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800baf2:	4b2f      	ldr	r3, [pc, #188]	; (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800baf8:	4b2d      	ldr	r3, [pc, #180]	; (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bafe:	4a29      	ldr	r2, [pc, #164]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bb04:	4b27      	ldr	r3, [pc, #156]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d114      	bne.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bb10:	f7fd f98e 	bl	8008e30 <HAL_GetTick>
 800bb14:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb16:	e00a      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb18:	f7fd f98a 	bl	8008e30 <HAL_GetTick>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d901      	bls.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e035      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0ee      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb46:	d10d      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800bb48:	4b16      	ldr	r3, [pc, #88]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb5c:	4911      	ldr	r1, [pc, #68]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	608b      	str	r3, [r1, #8]
 800bb62:	e005      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800bb64:	4b0f      	ldr	r3, [pc, #60]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	4a0e      	ldr	r2, [pc, #56]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb6e:	6093      	str	r3, [r2, #8]
 800bb70:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb7c:	4909      	ldr	r1, [pc, #36]	; (800bba4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d004      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800bb96:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	40023800 	.word	0x40023800
 800bba8:	42470070 	.word	0x42470070
 800bbac:	40007000 	.word	0x40007000
 800bbb0:	42470e40 	.word	0x42470e40
 800bbb4:	424711e0 	.word	0x424711e0

0800bbb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d075      	beq.n	800bcbc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bbd0:	4ba2      	ldr	r3, [pc, #648]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f003 030c 	and.w	r3, r3, #12
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d00c      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbdc:	4b9f      	ldr	r3, [pc, #636]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bbe4:	2b08      	cmp	r3, #8
 800bbe6:	d112      	bne.n	800bc0e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbe8:	4b9c      	ldr	r3, [pc, #624]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbf4:	d10b      	bne.n	800bc0e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbf6:	4b99      	ldr	r3, [pc, #612]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d05b      	beq.n	800bcba <HAL_RCC_OscConfig+0x102>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d157      	bne.n	800bcba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e20b      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc16:	d106      	bne.n	800bc26 <HAL_RCC_OscConfig+0x6e>
 800bc18:	4b90      	ldr	r3, [pc, #576]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a8f      	ldr	r2, [pc, #572]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	e01d      	b.n	800bc62 <HAL_RCC_OscConfig+0xaa>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc2e:	d10c      	bne.n	800bc4a <HAL_RCC_OscConfig+0x92>
 800bc30:	4b8a      	ldr	r3, [pc, #552]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a89      	ldr	r2, [pc, #548]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	4b87      	ldr	r3, [pc, #540]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a86      	ldr	r2, [pc, #536]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	e00b      	b.n	800bc62 <HAL_RCC_OscConfig+0xaa>
 800bc4a:	4b84      	ldr	r3, [pc, #528]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a83      	ldr	r2, [pc, #524]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	4b81      	ldr	r3, [pc, #516]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a80      	ldr	r2, [pc, #512]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d013      	beq.n	800bc92 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc6a:	f7fd f8e1 	bl	8008e30 <HAL_GetTick>
 800bc6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc70:	e008      	b.n	800bc84 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc72:	f7fd f8dd 	bl	8008e30 <HAL_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	2b64      	cmp	r3, #100	; 0x64
 800bc7e:	d901      	bls.n	800bc84 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e1d0      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc84:	4b75      	ldr	r3, [pc, #468]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0f0      	beq.n	800bc72 <HAL_RCC_OscConfig+0xba>
 800bc90:	e014      	b.n	800bcbc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc92:	f7fd f8cd 	bl	8008e30 <HAL_GetTick>
 800bc96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc98:	e008      	b.n	800bcac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc9a:	f7fd f8c9 	bl	8008e30 <HAL_GetTick>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	2b64      	cmp	r3, #100	; 0x64
 800bca6:	d901      	bls.n	800bcac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e1bc      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcac:	4b6b      	ldr	r3, [pc, #428]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f0      	bne.n	800bc9a <HAL_RCC_OscConfig+0xe2>
 800bcb8:	e000      	b.n	800bcbc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0302 	and.w	r3, r3, #2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d063      	beq.n	800bd90 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bcc8:	4b64      	ldr	r3, [pc, #400]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	f003 030c 	and.w	r3, r3, #12
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00b      	beq.n	800bcec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bcd4:	4b61      	ldr	r3, [pc, #388]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d11c      	bne.n	800bd1a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bce0:	4b5e      	ldr	r3, [pc, #376]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d116      	bne.n	800bd1a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcec:	4b5b      	ldr	r3, [pc, #364]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 0302 	and.w	r3, r3, #2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <HAL_RCC_OscConfig+0x14c>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d001      	beq.n	800bd04 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e190      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd04:	4b55      	ldr	r3, [pc, #340]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	4952      	ldr	r1, [pc, #328]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd18:	e03a      	b.n	800bd90 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d020      	beq.n	800bd64 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd22:	4b4f      	ldr	r3, [pc, #316]	; (800be60 <HAL_RCC_OscConfig+0x2a8>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd28:	f7fd f882 	bl	8008e30 <HAL_GetTick>
 800bd2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd2e:	e008      	b.n	800bd42 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd30:	f7fd f87e 	bl	8008e30 <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d901      	bls.n	800bd42 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e171      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd42:	4b46      	ldr	r3, [pc, #280]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0f0      	beq.n	800bd30 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd4e:	4b43      	ldr	r3, [pc, #268]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	493f      	ldr	r1, [pc, #252]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	600b      	str	r3, [r1, #0]
 800bd62:	e015      	b.n	800bd90 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd64:	4b3e      	ldr	r3, [pc, #248]	; (800be60 <HAL_RCC_OscConfig+0x2a8>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd6a:	f7fd f861 	bl	8008e30 <HAL_GetTick>
 800bd6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd70:	e008      	b.n	800bd84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd72:	f7fd f85d 	bl	8008e30 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d901      	bls.n	800bd84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e150      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd84:	4b35      	ldr	r3, [pc, #212]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1f0      	bne.n	800bd72 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d030      	beq.n	800bdfe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d016      	beq.n	800bdd2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bda4:	4b2f      	ldr	r3, [pc, #188]	; (800be64 <HAL_RCC_OscConfig+0x2ac>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdaa:	f7fd f841 	bl	8008e30 <HAL_GetTick>
 800bdae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdb0:	e008      	b.n	800bdc4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bdb2:	f7fd f83d 	bl	8008e30 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d901      	bls.n	800bdc4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e130      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bdc4:	4b25      	ldr	r3, [pc, #148]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f0      	beq.n	800bdb2 <HAL_RCC_OscConfig+0x1fa>
 800bdd0:	e015      	b.n	800bdfe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bdd2:	4b24      	ldr	r3, [pc, #144]	; (800be64 <HAL_RCC_OscConfig+0x2ac>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdd8:	f7fd f82a 	bl	8008e30 <HAL_GetTick>
 800bddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdde:	e008      	b.n	800bdf2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bde0:	f7fd f826 	bl	8008e30 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d901      	bls.n	800bdf2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e119      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bdf2:	4b1a      	ldr	r3, [pc, #104]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800bdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1f0      	bne.n	800bde0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 809f 	beq.w	800bf4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800be12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10f      	bne.n	800be3c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	4b0e      	ldr	r3, [pc, #56]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	4a0d      	ldr	r2, [pc, #52]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800be26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2a:	6413      	str	r3, [r2, #64]	; 0x40
 800be2c:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <HAL_RCC_OscConfig+0x2a4>)
 800be2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be34:	60fb      	str	r3, [r7, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800be38:	2301      	movs	r3, #1
 800be3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be3c:	4b0a      	ldr	r3, [pc, #40]	; (800be68 <HAL_RCC_OscConfig+0x2b0>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be44:	2b00      	cmp	r3, #0
 800be46:	d120      	bne.n	800be8a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be48:	4b07      	ldr	r3, [pc, #28]	; (800be68 <HAL_RCC_OscConfig+0x2b0>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a06      	ldr	r2, [pc, #24]	; (800be68 <HAL_RCC_OscConfig+0x2b0>)
 800be4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be54:	f7fc ffec 	bl	8008e30 <HAL_GetTick>
 800be58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be5a:	e010      	b.n	800be7e <HAL_RCC_OscConfig+0x2c6>
 800be5c:	40023800 	.word	0x40023800
 800be60:	42470000 	.word	0x42470000
 800be64:	42470e80 	.word	0x42470e80
 800be68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be6c:	f7fc ffe0 	bl	8008e30 <HAL_GetTick>
 800be70:	4602      	mov	r2, r0
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	2b02      	cmp	r3, #2
 800be78:	d901      	bls.n	800be7e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e0d3      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be7e:	4b6c      	ldr	r3, [pc, #432]	; (800c030 <HAL_RCC_OscConfig+0x478>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f0      	beq.n	800be6c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d106      	bne.n	800bea0 <HAL_RCC_OscConfig+0x2e8>
 800be92:	4b68      	ldr	r3, [pc, #416]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800be94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be96:	4a67      	ldr	r2, [pc, #412]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800be98:	f043 0301 	orr.w	r3, r3, #1
 800be9c:	6713      	str	r3, [r2, #112]	; 0x70
 800be9e:	e01c      	b.n	800beda <HAL_RCC_OscConfig+0x322>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b05      	cmp	r3, #5
 800bea6:	d10c      	bne.n	800bec2 <HAL_RCC_OscConfig+0x30a>
 800bea8:	4b62      	ldr	r3, [pc, #392]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	4a61      	ldr	r2, [pc, #388]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800beae:	f043 0304 	orr.w	r3, r3, #4
 800beb2:	6713      	str	r3, [r2, #112]	; 0x70
 800beb4:	4b5f      	ldr	r3, [pc, #380]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800beb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb8:	4a5e      	ldr	r2, [pc, #376]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800beba:	f043 0301 	orr.w	r3, r3, #1
 800bebe:	6713      	str	r3, [r2, #112]	; 0x70
 800bec0:	e00b      	b.n	800beda <HAL_RCC_OscConfig+0x322>
 800bec2:	4b5c      	ldr	r3, [pc, #368]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec6:	4a5b      	ldr	r2, [pc, #364]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bec8:	f023 0301 	bic.w	r3, r3, #1
 800becc:	6713      	str	r3, [r2, #112]	; 0x70
 800bece:	4b59      	ldr	r3, [pc, #356]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed2:	4a58      	ldr	r2, [pc, #352]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bed4:	f023 0304 	bic.w	r3, r3, #4
 800bed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d015      	beq.n	800bf0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bee2:	f7fc ffa5 	bl	8008e30 <HAL_GetTick>
 800bee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bee8:	e00a      	b.n	800bf00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800beea:	f7fc ffa1 	bl	8008e30 <HAL_GetTick>
 800beee:	4602      	mov	r2, r0
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef8:	4293      	cmp	r3, r2
 800befa:	d901      	bls.n	800bf00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	e092      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf00:	4b4c      	ldr	r3, [pc, #304]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0ee      	beq.n	800beea <HAL_RCC_OscConfig+0x332>
 800bf0c:	e014      	b.n	800bf38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf0e:	f7fc ff8f 	bl	8008e30 <HAL_GetTick>
 800bf12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf14:	e00a      	b.n	800bf2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf16:	f7fc ff8b 	bl	8008e30 <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d901      	bls.n	800bf2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e07c      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf2c:	4b41      	ldr	r3, [pc, #260]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf30:	f003 0302 	and.w	r3, r3, #2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1ee      	bne.n	800bf16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d105      	bne.n	800bf4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf3e:	4b3d      	ldr	r3, [pc, #244]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	4a3c      	ldr	r2, [pc, #240]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d068      	beq.n	800c024 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf52:	4b38      	ldr	r3, [pc, #224]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f003 030c 	and.w	r3, r3, #12
 800bf5a:	2b08      	cmp	r3, #8
 800bf5c:	d060      	beq.n	800c020 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d145      	bne.n	800bff2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf66:	4b34      	ldr	r3, [pc, #208]	; (800c038 <HAL_RCC_OscConfig+0x480>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf6c:	f7fc ff60 	bl	8008e30 <HAL_GetTick>
 800bf70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf72:	e008      	b.n	800bf86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf74:	f7fc ff5c 	bl	8008e30 <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d901      	bls.n	800bf86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e04f      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf86:	4b2b      	ldr	r3, [pc, #172]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1f0      	bne.n	800bf74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	69da      	ldr	r2, [r3, #28]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa0:	019b      	lsls	r3, r3, #6
 800bfa2:	431a      	orrs	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa8:	085b      	lsrs	r3, r3, #1
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	041b      	lsls	r3, r3, #16
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	061b      	lsls	r3, r3, #24
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	491d      	ldr	r1, [pc, #116]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bfc4:	4b1c      	ldr	r3, [pc, #112]	; (800c038 <HAL_RCC_OscConfig+0x480>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfca:	f7fc ff31 	bl	8008e30 <HAL_GetTick>
 800bfce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfd0:	e008      	b.n	800bfe4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfd2:	f7fc ff2d 	bl	8008e30 <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d901      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e020      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bfe4:	4b13      	ldr	r3, [pc, #76]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0f0      	beq.n	800bfd2 <HAL_RCC_OscConfig+0x41a>
 800bff0:	e018      	b.n	800c024 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bff2:	4b11      	ldr	r3, [pc, #68]	; (800c038 <HAL_RCC_OscConfig+0x480>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff8:	f7fc ff1a 	bl	8008e30 <HAL_GetTick>
 800bffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bffe:	e008      	b.n	800c012 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c000:	f7fc ff16 	bl	8008e30 <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d901      	bls.n	800c012 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e009      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <HAL_RCC_OscConfig+0x47c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1f0      	bne.n	800c000 <HAL_RCC_OscConfig+0x448>
 800c01e:	e001      	b.n	800c024 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e000      	b.n	800c026 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	40007000 	.word	0x40007000
 800c034:	40023800 	.word	0x40023800
 800c038:	42470060 	.word	0x42470060

0800c03c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e022      	b.n	800c094 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7fa fc5d 	bl	8006920 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2203      	movs	r2, #3
 800c06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f814 	bl	800c09c <HAL_SD_InitCard>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e00a      	b.n	800c094 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c09c:	b5b0      	push	{r4, r5, r7, lr}
 800c09e:	b08e      	sub	sp, #56	; 0x38
 800c0a0:	af04      	add	r7, sp, #16
 800c0a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c0b8:	2376      	movs	r3, #118	; 0x76
 800c0ba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681d      	ldr	r5, [r3, #0]
 800c0c0:	466c      	mov	r4, sp
 800c0c2:	f107 0314 	add.w	r3, r7, #20
 800c0c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f003 fa87 	bl	800f5e8 <SDIO_Init>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e031      	b.n	800c150 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c0ec:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <HAL_SD_InitCard+0xbc>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f003 fabf 	bl	800f67a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c0fc:	4b16      	ldr	r3, [pc, #88]	; (800c158 <HAL_SD_InitCard+0xbc>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 ffc6 	bl	800d094 <SD_PowerON>
 800c108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00b      	beq.n	800c128 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	431a      	orrs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e013      	b.n	800c150 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fee5 	bl	800cef8 <SD_InitCard>
 800c12e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00b      	beq.n	800c14e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	431a      	orrs	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3728      	adds	r7, #40	; 0x28
 800c154:	46bd      	mov	sp, r7
 800c156:	bdb0      	pop	{r4, r5, r7, pc}
 800c158:	422580a0 	.word	0x422580a0

0800c15c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08c      	sub	sp, #48	; 0x30
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d107      	bne.n	800c184 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e0c7      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	f040 80c0 	bne.w	800c312 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	441a      	add	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d907      	bls.n	800c1b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e0ae      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2203      	movs	r2, #3
 800c1ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c1d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	4a50      	ldr	r2, [pc, #320]	; (800c31c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c1dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	4a4f      	ldr	r2, [pc, #316]	; (800c320 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c1e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3380      	adds	r3, #128	; 0x80
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	025b      	lsls	r3, r3, #9
 800c200:	089b      	lsrs	r3, r3, #2
 800c202:	f7fd fc07 	bl	8009a14 <HAL_DMA_Start_IT>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d017      	beq.n	800c23c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c21a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a40      	ldr	r2, [pc, #256]	; (800c324 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	e06b      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c23c:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c23e:	2201      	movs	r2, #1
 800c240:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c246:	2b01      	cmp	r3, #1
 800c248:	d002      	beq.n	800c250 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	025b      	lsls	r3, r3, #9
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c258:	4618      	mov	r0, r3
 800c25a:	f003 faa1 	bl	800f7a0 <SDMMC_CmdBlockLength>
 800c25e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00f      	beq.n	800c286 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a2e      	ldr	r2, [pc, #184]	; (800c324 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	431a      	orrs	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e046      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c286:	f04f 33ff 	mov.w	r3, #4294967295
 800c28a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	025b      	lsls	r3, r3, #9
 800c290:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c292:	2390      	movs	r3, #144	; 0x90
 800c294:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c296:	2302      	movs	r3, #2
 800c298:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f107 0210 	add.w	r2, r7, #16
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f003 fa4b 	bl	800f748 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d90a      	bls.n	800c2ce <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2282      	movs	r2, #130	; 0x82
 800c2bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f003 faaf 	bl	800f828 <SDMMC_CmdReadMultiBlock>
 800c2ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c2cc:	e009      	b.n	800c2e2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2281      	movs	r2, #129	; 0x81
 800c2d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f003 fa82 	bl	800f7e4 <SDMMC_CmdReadSingleBlock>
 800c2e0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e002      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e000      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c312:	2302      	movs	r3, #2
  }
}
 800c314:	4618      	mov	r0, r3
 800c316:	3730      	adds	r7, #48	; 0x30
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	0800cd07 	.word	0x0800cd07
 800c320:	0800cd79 	.word	0x0800cd79
 800c324:	004005ff 	.word	0x004005ff
 800c328:	4225858c 	.word	0x4225858c

0800c32c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	; 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d107      	bne.n	800c354 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	e0ca      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	f040 80c3 	bne.w	800c4e8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c372:	429a      	cmp	r2, r3
 800c374:	d907      	bls.n	800c386 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	e0b1      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2203      	movs	r2, #3
 800c38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2200      	movs	r2, #0
 800c394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f042 021a 	orr.w	r2, r2, #26
 800c3a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3aa:	4a52      	ldr	r2, [pc, #328]	; (800c4f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c3ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b2:	4a51      	ldr	r2, [pc, #324]	; (800c4f8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c3b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d002      	beq.n	800c3cc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	025b      	lsls	r3, r3, #9
 800c3ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f003 f9e3 	bl	800f7a0 <SDMMC_CmdBlockLength>
 800c3da:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00f      	beq.n	800c402 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a45      	ldr	r2, [pc, #276]	; (800c4fc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	431a      	orrs	r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e073      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d90a      	bls.n	800c41e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	22a0      	movs	r2, #160	; 0xa0
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c414:	4618      	mov	r0, r3
 800c416:	f003 fa4b 	bl	800f8b0 <SDMMC_CmdWriteMultiBlock>
 800c41a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c41c:	e009      	b.n	800c432 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2290      	movs	r2, #144	; 0x90
 800c422:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c42a:	4618      	mov	r0, r3
 800c42c:	f003 fa1e 	bl	800f86c <SDMMC_CmdWriteSingleBlock>
 800c430:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d012      	beq.n	800c45e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a2f      	ldr	r2, [pc, #188]	; (800c4fc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c43e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	431a      	orrs	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e045      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c45e:	4b28      	ldr	r3, [pc, #160]	; (800c500 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c460:	2201      	movs	r2, #1
 800c462:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c468:	68b9      	ldr	r1, [r7, #8]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3380      	adds	r3, #128	; 0x80
 800c470:	461a      	mov	r2, r3
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	025b      	lsls	r3, r3, #9
 800c476:	089b      	lsrs	r3, r3, #2
 800c478:	f7fd facc 	bl	8009a14 <HAL_DMA_Start_IT>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01a      	beq.n	800c4b8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f022 021a 	bic.w	r2, r2, #26
 800c490:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a19      	ldr	r2, [pc, #100]	; (800c4fc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e018      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	025b      	lsls	r3, r3, #9
 800c4c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c4c4:	2390      	movs	r3, #144	; 0x90
 800c4c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f107 0210 	add.w	r2, r7, #16
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f003 f932 	bl	800f748 <SDIO_ConfigData>

      return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	e000      	b.n	800c4ea <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c4e8:	2302      	movs	r3, #2
  }
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3730      	adds	r7, #48	; 0x30
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	0800ccdd 	.word	0x0800ccdd
 800c4f8:	0800cd79 	.word	0x0800cd79
 800c4fc:	004005ff 	.word	0x004005ff
 800c500:	4225858c 	.word	0x4225858c

0800c504 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c510:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d008      	beq.n	800c532 <HAL_SD_IRQHandler+0x2e>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f003 0308 	and.w	r3, r3, #8
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 ffc8 	bl	800d4c0 <SD_Read_IT>
 800c530:	e155      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 808f 	beq.w	800c660 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	6812      	ldr	r2, [r2, #0]
 800c556:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c55a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c55e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f022 0201 	bic.w	r2, r2, #1
 800c56e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f003 0308 	and.w	r3, r3, #8
 800c576:	2b00      	cmp	r3, #0
 800c578:	d039      	beq.n	800c5ee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f003 0302 	and.w	r3, r3, #2
 800c580:	2b00      	cmp	r3, #0
 800c582:	d104      	bne.n	800c58e <HAL_SD_IRQHandler+0x8a>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d011      	beq.n	800c5b2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4618      	mov	r0, r3
 800c594:	f003 f9ae 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800c598:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	431a      	orrs	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f91f 	bl	800c7f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d104      	bne.n	800c5de <HAL_SD_IRQHandler+0xda>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f003 fe04 	bl	80101ec <HAL_SD_RxCpltCallback>
 800c5e4:	e0fb      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f003 fdf6 	bl	80101d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c5ec:	e0f7      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 80f2 	beq.w	800c7de <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f003 0320 	and.w	r3, r3, #32
 800c600:	2b00      	cmp	r3, #0
 800c602:	d011      	beq.n	800c628 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f003 f973 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800c60e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d008      	beq.n	800c628 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	431a      	orrs	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f8e4 	bl	800c7f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f040 80d5 	bne.w	800c7de <HAL_SD_IRQHandler+0x2da>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f040 80cf 	bne.w	800c7de <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0208 	bic.w	r2, r2, #8
 800c64e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f003 fdbd 	bl	80101d8 <HAL_SD_TxCpltCallback>
}
 800c65e:	e0be      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <HAL_SD_IRQHandler+0x17c>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f003 0308 	and.w	r3, r3, #8
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 ff72 	bl	800d562 <SD_Write_IT>
 800c67e:	e0ae      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c686:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 80a7 	beq.w	800c7de <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	f043 0202 	orr.w	r2, r3, #2
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d005      	beq.n	800c6c4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6bc:	f043 0208 	orr.w	r2, r3, #8
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d005      	beq.n	800c6de <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d6:	f043 0220 	orr.w	r2, r3, #32
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f0:	f043 0210 	orr.w	r2, r3, #16
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f240 523a 	movw	r2, #1338	; 0x53a
 800c700:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c710:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	f003 f8ec 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800c71c:	4602      	mov	r2, r0
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f003 0308 	and.w	r3, r3, #8
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f855 	bl	800c7f0 <HAL_SD_ErrorCallback>
}
 800c746:	e04a      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d045      	beq.n	800c7de <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f003 0310 	and.w	r3, r3, #16
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d104      	bne.n	800c766 <HAL_SD_IRQHandler+0x262>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f003 0320 	and.w	r3, r3, #32
 800c762:	2b00      	cmp	r3, #0
 800c764:	d011      	beq.n	800c78a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76a:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <HAL_SD_IRQHandler+0x2e4>)
 800c76c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c772:	4618      	mov	r0, r3
 800c774:	f7fd f9a6 	bl	8009ac4 <HAL_DMA_Abort_IT>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d02f      	beq.n	800c7de <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c782:	4618      	mov	r0, r3
 800c784:	f000 fb4a 	bl	800ce1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c788:	e029      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d104      	bne.n	800c79e <HAL_SD_IRQHandler+0x29a>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d011      	beq.n	800c7c2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a2:	4a12      	ldr	r2, [pc, #72]	; (800c7ec <HAL_SD_IRQHandler+0x2e8>)
 800c7a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd f98a 	bl	8009ac4 <HAL_DMA_Abort_IT>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d013      	beq.n	800c7de <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fb65 	bl	800ce8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c7c0:	e00d      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f003 fcf4 	bl	80101c4 <HAL_SD_AbortCallback>
}
 800c7dc:	e7ff      	b.n	800c7de <HAL_SD_IRQHandler+0x2da>
 800c7de:	bf00      	nop
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	0800ce1d 	.word	0x0800ce1d
 800c7ec:	0800ce8b 	.word	0x0800ce8b

0800c7f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c812:	0f9b      	lsrs	r3, r3, #30
 800c814:	b2da      	uxtb	r2, r3
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c81e:	0e9b      	lsrs	r3, r3, #26
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f003 030f 	and.w	r3, r3, #15
 800c826:	b2da      	uxtb	r2, r3
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c830:	0e1b      	lsrs	r3, r3, #24
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c842:	0c1b      	lsrs	r3, r3, #16
 800c844:	b2da      	uxtb	r2, r3
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c84e:	0a1b      	lsrs	r3, r3, #8
 800c850:	b2da      	uxtb	r2, r3
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c864:	0d1b      	lsrs	r3, r3, #20
 800c866:	b29a      	uxth	r2, r3
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c870:	0c1b      	lsrs	r3, r3, #16
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c882:	0bdb      	lsrs	r3, r3, #15
 800c884:	b2db      	uxtb	r3, r3
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c894:	0b9b      	lsrs	r3, r3, #14
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8a6:	0b5b      	lsrs	r3, r3, #13
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8b8:	0b1b      	lsrs	r3, r3, #12
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d163      	bne.n	800c99c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d8:	009a      	lsls	r2, r3, #2
 800c8da:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c8de:	4013      	ands	r3, r2
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c8e4:	0f92      	lsrs	r2, r2, #30
 800c8e6:	431a      	orrs	r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f0:	0edb      	lsrs	r3, r3, #27
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c902:	0e1b      	lsrs	r3, r3, #24
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c914:	0d5b      	lsrs	r3, r3, #21
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c926:	0c9b      	lsrs	r3, r3, #18
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	f003 0307 	and.w	r3, r3, #7
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c938:	0bdb      	lsrs	r3, r3, #15
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	f003 0307 	and.w	r3, r3, #7
 800c940:	b2da      	uxtb	r2, r3
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	7e1b      	ldrb	r3, [r3, #24]
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	3302      	adds	r3, #2
 800c95c:	2201      	movs	r2, #1
 800c95e:	fa02 f303 	lsl.w	r3, r2, r3
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c966:	fb02 f203 	mul.w	r2, r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	7a1b      	ldrb	r3, [r3, #8]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	f003 030f 	and.w	r3, r3, #15
 800c978:	2201      	movs	r2, #1
 800c97a:	409a      	lsls	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c988:	0a52      	lsrs	r2, r2, #9
 800c98a:	fb02 f203 	mul.w	r2, r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c998:	661a      	str	r2, [r3, #96]	; 0x60
 800c99a:	e031      	b.n	800ca00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d11d      	bne.n	800c9e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9a8:	041b      	lsls	r3, r3, #16
 800c9aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b2:	0c1b      	lsrs	r3, r3, #16
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	029a      	lsls	r2, r3, #10
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	661a      	str	r2, [r3, #96]	; 0x60
 800c9de:	e00f      	b.n	800ca00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a58      	ldr	r2, [pc, #352]	; (800cb48 <HAL_SD_GetCardCSD+0x344>)
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e09d      	b.n	800cb3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca04:	0b9b      	lsrs	r3, r3, #14
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca16:	09db      	lsrs	r3, r3, #7
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca38:	0fdb      	lsrs	r3, r3, #31
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca44:	0f5b      	lsrs	r3, r3, #29
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 0303 	and.w	r3, r3, #3
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	0e9b      	lsrs	r3, r3, #26
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca68:	0d9b      	lsrs	r3, r3, #22
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 030f 	and.w	r3, r3, #15
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca7a:	0d5b      	lsrs	r3, r3, #21
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca96:	0c1b      	lsrs	r3, r3, #16
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caaa:	0bdb      	lsrs	r3, r3, #15
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	0b9b      	lsrs	r3, r3, #14
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f003 0301 	and.w	r3, r3, #1
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad2:	0b5b      	lsrs	r3, r3, #13
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae6:	0b1b      	lsrs	r3, r3, #12
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafa:	0a9b      	lsrs	r3, r3, #10
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb0e:	0a1b      	lsrs	r3, r3, #8
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	f003 0303 	and.w	r3, r3, #3
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb22:	085b      	lsrs	r3, r3, #1
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr
 800cb48:	004005ff 	.word	0x004005ff

0800cb4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cba4:	b5b0      	push	{r4, r5, r7, lr}
 800cba6:	b08e      	sub	sp, #56	; 0x38
 800cba8:	af04      	add	r7, sp, #16
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2203      	movs	r2, #3
 800cbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d02e      	beq.n	800cc1c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbc4:	d106      	bne.n	800cbd4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	639a      	str	r2, [r3, #56]	; 0x38
 800cbd2:	e029      	b.n	800cc28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbda:	d10a      	bne.n	800cbf2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fb0f 	bl	800d200 <SD_WideBus_Enable>
 800cbe2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	431a      	orrs	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	639a      	str	r2, [r3, #56]	; 0x38
 800cbf0:	e01a      	b.n	800cc28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fb4c 	bl	800d296 <SD_WideBus_Disable>
 800cbfe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	431a      	orrs	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
 800cc0c:	e00c      	b.n	800cc28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38
 800cc1a:	e005      	b.n	800cc28 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d009      	beq.n	800cc44 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a18      	ldr	r2, [pc, #96]	; (800cc98 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800cc36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e024      	b.n	800cc8e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681d      	ldr	r5, [r3, #0]
 800cc6a:	466c      	mov	r4, sp
 800cc6c:	f107 0318 	add.w	r3, r7, #24
 800cc70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc78:	f107 030c 	add.w	r3, r7, #12
 800cc7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f002 fcb2 	bl	800f5e8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3728      	adds	r7, #40	; 0x28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bdb0      	pop	{r4, r5, r7, pc}
 800cc96:	bf00      	nop
 800cc98:	004005ff 	.word	0x004005ff

0800cc9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cca8:	f107 030c 	add.w	r3, r7, #12
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fa7e 	bl	800d1b0 <SD_SendStatus>
 800ccb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	0a5b      	lsrs	r3, r3, #9
 800cccc:	f003 030f 	and.w	r3, r3, #15
 800ccd0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ccd2:	693b      	ldr	r3, [r7, #16]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccf8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ccfa:	bf00      	nop
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr

0800cd06 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd12:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd18:	2b82      	cmp	r3, #130	; 0x82
 800cd1a:	d111      	bne.n	800cd40 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f002 fde7 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800cd26:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d008      	beq.n	800cd40 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	431a      	orrs	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff fd58 	bl	800c7f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 0208 	bic.w	r2, r2, #8
 800cd4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd58:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f003 fa3f 	bl	80101ec <HAL_SD_RxCpltCallback>
#endif
}
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
	...

0800cd78 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fd f848 	bl	8009e1c <HAL_DMA_GetError>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d03e      	beq.n	800ce10 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd98:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d002      	beq.n	800cdae <SD_DMAError+0x36>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d12d      	bne.n	800ce0a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a19      	ldr	r2, [pc, #100]	; (800ce18 <SD_DMAError+0xa0>)
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cdc4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cdd2:	6978      	ldr	r0, [r7, #20]
 800cdd4:	f7ff ff62 	bl	800cc9c <HAL_SD_GetCardState>
 800cdd8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b06      	cmp	r3, #6
 800cdde:	d002      	beq.n	800cde6 <SD_DMAError+0x6e>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b05      	cmp	r3, #5
 800cde4:	d10a      	bne.n	800cdfc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f002 fd82 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2200      	movs	r2, #0
 800ce08:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ce0a:	6978      	ldr	r0, [r7, #20]
 800ce0c:	f7ff fcf0 	bl	800c7f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ce10:	bf00      	nop
 800ce12:	3718      	adds	r7, #24
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	004005ff 	.word	0x004005ff

0800ce1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce32:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7ff ff31 	bl	800cc9c <HAL_SD_GetCardState>
 800ce3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b06      	cmp	r3, #6
 800ce4e:	d002      	beq.n	800ce56 <SD_DMATxAbort+0x3a>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b05      	cmp	r3, #5
 800ce54:	d10a      	bne.n	800ce6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f002 fd4a 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800ce60:	4602      	mov	r2, r0
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce66:	431a      	orrs	r2, r3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f003 f9a5 	bl	80101c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce7a:	e002      	b.n	800ce82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f7ff fcb7 	bl	800c7f0 <HAL_SD_ErrorCallback>
}
 800ce82:	bf00      	nop
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f240 523a 	movw	r2, #1338	; 0x53a
 800cea0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7ff fefa 	bl	800cc9c <HAL_SD_GetCardState>
 800cea8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b06      	cmp	r3, #6
 800cebc:	d002      	beq.n	800cec4 <SD_DMARxAbort+0x3a>
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b05      	cmp	r3, #5
 800cec2:	d10a      	bne.n	800ceda <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f002 fd13 	bl	800f8f4 <SDMMC_CmdStopTransfer>
 800cece:	4602      	mov	r2, r0
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced4:	431a      	orrs	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d103      	bne.n	800ceea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f003 f96e 	bl	80101c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cee8:	e002      	b.n	800cef0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7ff fc80 	bl	800c7f0 <HAL_SD_ErrorCallback>
}
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cef8:	b5b0      	push	{r4, r5, r7, lr}
 800cefa:	b094      	sub	sp, #80	; 0x50
 800cefc:	af04      	add	r7, sp, #16
 800cefe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cf00:	2301      	movs	r3, #1
 800cf02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f002 fbc5 	bl	800f698 <SDIO_GetPowerState>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cf18:	e0b7      	b.n	800d08a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	d02f      	beq.n	800cf82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f002 fdee 	bl	800fb08 <SDMMC_CmdSendCID>
 800cf2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <SD_InitCard+0x40>
    {
      return errorstate;
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	e0a8      	b.n	800d08a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f002 fbef 	bl	800f722 <SDIO_GetResponse>
 800cf44:	4602      	mov	r2, r0
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2104      	movs	r1, #4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f002 fbe6 	bl	800f722 <SDIO_GetResponse>
 800cf56:	4602      	mov	r2, r0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2108      	movs	r1, #8
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 fbdd 	bl	800f722 <SDIO_GetResponse>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	210c      	movs	r1, #12
 800cf74:	4618      	mov	r0, r3
 800cf76:	f002 fbd4 	bl	800f722 <SDIO_GetResponse>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d00d      	beq.n	800cfa6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f107 020e 	add.w	r2, r7, #14
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f002 fdf4 	bl	800fb82 <SDMMC_CmdSetRelAdd>
 800cf9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <SD_InitCard+0xae>
    {
      return errorstate;
 800cfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa4:	e071      	b.n	800d08a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d036      	beq.n	800d01c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cfae:	89fb      	ldrh	r3, [r7, #14]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfbe:	041b      	lsls	r3, r3, #16
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	f002 fdbe 	bl	800fb44 <SDMMC_CmdSendCSD>
 800cfc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd2:	e05a      	b.n	800d08a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2100      	movs	r1, #0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f002 fba1 	bl	800f722 <SDIO_GetResponse>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2104      	movs	r1, #4
 800cfec:	4618      	mov	r0, r3
 800cfee:	f002 fb98 	bl	800f722 <SDIO_GetResponse>
 800cff2:	4602      	mov	r2, r0
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2108      	movs	r1, #8
 800cffe:	4618      	mov	r0, r3
 800d000:	f002 fb8f 	bl	800f722 <SDIO_GetResponse>
 800d004:	4602      	mov	r2, r0
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	210c      	movs	r1, #12
 800d010:	4618      	mov	r0, r3
 800d012:	f002 fb86 	bl	800f722 <SDIO_GetResponse>
 800d016:	4602      	mov	r2, r0
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2104      	movs	r1, #4
 800d022:	4618      	mov	r0, r3
 800d024:	f002 fb7d 	bl	800f722 <SDIO_GetResponse>
 800d028:	4603      	mov	r3, r0
 800d02a:	0d1a      	lsrs	r2, r3, #20
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d030:	f107 0310 	add.w	r3, r7, #16
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff fbe4 	bl	800c804 <HAL_SD_GetCardCSD>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d042:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d046:	e020      	b.n	800d08a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6819      	ldr	r1, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d050:	041b      	lsls	r3, r3, #16
 800d052:	f04f 0400 	mov.w	r4, #0
 800d056:	461a      	mov	r2, r3
 800d058:	4623      	mov	r3, r4
 800d05a:	4608      	mov	r0, r1
 800d05c:	f002 fc6c 	bl	800f938 <SDMMC_CmdSelDesel>
 800d060:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <SD_InitCard+0x174>
  {
    return errorstate;
 800d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06a:	e00e      	b.n	800d08a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681d      	ldr	r5, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	466c      	mov	r4, sp
 800d074:	f103 0210 	add.w	r2, r3, #16
 800d078:	ca07      	ldmia	r2, {r0, r1, r2}
 800d07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d07e:	3304      	adds	r3, #4
 800d080:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d082:	4628      	mov	r0, r5
 800d084:	f002 fab0 	bl	800f5e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3740      	adds	r7, #64	; 0x40
 800d08e:	46bd      	mov	sp, r7
 800d090:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d094 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d09c:	2300      	movs	r3, #0
 800d09e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f002 fc66 	bl	800f97e <SDMMC_CmdGoIdleState>
 800d0b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <SD_PowerON+0x2a>
  {
    return errorstate;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	e072      	b.n	800d1a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f002 fc79 	bl	800f9ba <SDMMC_CmdOperCond>
 800d0c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00d      	beq.n	800d0ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f002 fc4f 	bl	800f97e <SDMMC_CmdGoIdleState>
 800d0e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d004      	beq.n	800d0f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	e05b      	b.n	800d1a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d137      	bne.n	800d16a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2100      	movs	r1, #0
 800d100:	4618      	mov	r0, r3
 800d102:	f002 fc79 	bl	800f9f8 <SDMMC_CmdAppCommand>
 800d106:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d02d      	beq.n	800d16a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d10e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d112:	e047      	b.n	800d1a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f002 fc6c 	bl	800f9f8 <SDMMC_CmdAppCommand>
 800d120:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <SD_PowerON+0x98>
    {
      return errorstate;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	e03b      	b.n	800d1a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	491e      	ldr	r1, [pc, #120]	; (800d1ac <SD_PowerON+0x118>)
 800d132:	4618      	mov	r0, r3
 800d134:	f002 fc82 	bl	800fa3c <SDMMC_CmdAppOperCommand>
 800d138:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d144:	e02e      	b.n	800d1a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f002 fae8 	bl	800f722 <SDIO_GetResponse>
 800d152:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	0fdb      	lsrs	r3, r3, #31
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d101      	bne.n	800d160 <SD_PowerON+0xcc>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e000      	b.n	800d162 <SD_PowerON+0xce>
 800d160:	2300      	movs	r3, #0
 800d162:	613b      	str	r3, [r7, #16]

    count++;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	3301      	adds	r3, #1
 800d168:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d170:	4293      	cmp	r3, r2
 800d172:	d802      	bhi.n	800d17a <SD_PowerON+0xe6>
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0cc      	beq.n	800d114 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d180:	4293      	cmp	r3, r2
 800d182:	d902      	bls.n	800d18a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d188:	e00c      	b.n	800d1a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d190:	2b00      	cmp	r3, #0
 800d192:	d003      	beq.n	800d19c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	645a      	str	r2, [r3, #68]	; 0x44
 800d19a:	e002      	b.n	800d1a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	c1100000 	.word	0xc1100000

0800d1b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d1c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1c4:	e018      	b.n	800d1f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ce:	041b      	lsls	r3, r3, #16
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	f002 fcf6 	bl	800fbc4 <SDMMC_CmdSendStatus>
 800d1d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	e009      	b.n	800d1f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f002 fa99 	bl	800f722 <SDIO_GetResponse>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	2300      	movs	r3, #0
 800d20e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2100      	movs	r1, #0
 800d216:	4618      	mov	r0, r3
 800d218:	f002 fa83 	bl	800f722 <SDIO_GetResponse>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d226:	d102      	bne.n	800d22e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d22c:	e02f      	b.n	800d28e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d22e:	f107 030c 	add.w	r3, r7, #12
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f879 	bl	800d32c <SD_FindSCR>
 800d23a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	e023      	b.n	800d28e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01c      	beq.n	800d28a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d258:	041b      	lsls	r3, r3, #16
 800d25a:	4619      	mov	r1, r3
 800d25c:	4610      	mov	r0, r2
 800d25e:	f002 fbcb 	bl	800f9f8 <SDMMC_CmdAppCommand>
 800d262:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d001      	beq.n	800d26e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	e00f      	b.n	800d28e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2102      	movs	r1, #2
 800d274:	4618      	mov	r0, r3
 800d276:	f002 fc04 	bl	800fa82 <SDMMC_CmdBusWidth>
 800d27a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	e003      	b.n	800d28e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d286:	2300      	movs	r3, #0
 800d288:	e001      	b.n	800d28e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d28a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f002 fa38 	bl	800f722 <SDIO_GetResponse>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2bc:	d102      	bne.n	800d2c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2c2:	e02f      	b.n	800d324 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d2c4:	f107 030c 	add.w	r3, r7, #12
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f82e 	bl	800d32c <SD_FindSCR>
 800d2d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	e023      	b.n	800d324 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01c      	beq.n	800d320 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ee:	041b      	lsls	r3, r3, #16
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	f002 fb80 	bl	800f9f8 <SDMMC_CmdAppCommand>
 800d2f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d001      	beq.n	800d304 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	e00f      	b.n	800d324 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2100      	movs	r1, #0
 800d30a:	4618      	mov	r0, r3
 800d30c:	f002 fbb9 	bl	800fa82 <SDMMC_CmdBusWidth>
 800d310:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	e003      	b.n	800d324 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e001      	b.n	800d324 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d320:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d32c:	b590      	push	{r4, r7, lr}
 800d32e:	b08f      	sub	sp, #60	; 0x3c
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d336:	f7fb fd7b 	bl	8008e30 <HAL_GetTick>
 800d33a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d33c:	2300      	movs	r3, #0
 800d33e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d340:	2300      	movs	r3, #0
 800d342:	60bb      	str	r3, [r7, #8]
 800d344:	2300      	movs	r3, #0
 800d346:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2108      	movs	r1, #8
 800d352:	4618      	mov	r0, r3
 800d354:	f002 fa24 	bl	800f7a0 <SDMMC_CmdBlockLength>
 800d358:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	e0a9      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36c:	041b      	lsls	r3, r3, #16
 800d36e:	4619      	mov	r1, r3
 800d370:	4610      	mov	r0, r2
 800d372:	f002 fb41 	bl	800f9f8 <SDMMC_CmdAppCommand>
 800d376:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	e09a      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d382:	f04f 33ff 	mov.w	r3, #4294967295
 800d386:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d388:	2308      	movs	r3, #8
 800d38a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d38c:	2330      	movs	r3, #48	; 0x30
 800d38e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d390:	2302      	movs	r3, #2
 800d392:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d394:	2300      	movs	r3, #0
 800d396:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d398:	2301      	movs	r3, #1
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f107 0210 	add.w	r2, r7, #16
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f002 f9ce 	bl	800f748 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f002 fb88 	bl	800fac6 <SDMMC_CmdSendSCR>
 800d3b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d022      	beq.n	800d404 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	e07a      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00e      	beq.n	800d3ee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	f107 0208 	add.w	r2, r7, #8
 800d3dc:	18d4      	adds	r4, r2, r3
 800d3de:	4608      	mov	r0, r1
 800d3e0:	f002 f92d 	bl	800f63e <SDIO_ReadFIFO>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	6023      	str	r3, [r4, #0]
      index++;
 800d3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d3ee:	f7fb fd1f 	bl	8008e30 <HAL_GetTick>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d102      	bne.n	800d404 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d402:	e059      	b.n	800d4b8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d40a:	f240 432a 	movw	r3, #1066	; 0x42a
 800d40e:	4013      	ands	r3, r2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d0d6      	beq.n	800d3c2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41a:	f003 0308 	and.w	r3, r3, #8
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d005      	beq.n	800d42e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2208      	movs	r2, #8
 800d428:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d42a:	2308      	movs	r3, #8
 800d42c:	e044      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d434:	f003 0302 	and.w	r3, r3, #2
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2202      	movs	r2, #2
 800d442:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d444:	2302      	movs	r3, #2
 800d446:	e037      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2220      	movs	r2, #32
 800d45c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d45e:	2320      	movs	r3, #32
 800d460:	e02a      	b.n	800d4b8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f240 523a 	movw	r2, #1338	; 0x53a
 800d46a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	061a      	lsls	r2, r3, #24
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d478:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	0a1b      	lsrs	r3, r3, #8
 800d47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d482:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	0e1b      	lsrs	r3, r3, #24
 800d488:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	601a      	str	r2, [r3, #0]
    scr++;
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	3304      	adds	r3, #4
 800d492:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	061a      	lsls	r2, r3, #24
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	021b      	lsls	r3, r3, #8
 800d49c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	0a1b      	lsrs	r3, r3, #8
 800d4a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d4aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	0e1b      	lsrs	r3, r3, #24
 800d4b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	373c      	adds	r7, #60	; 0x3c
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd90      	pop	{r4, r7, pc}

0800d4c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d03f      	beq.n	800d55a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	e033      	b.n	800d548 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f002 f8aa 	bl	800f63e <SDIO_ReadFIFO>
 800d4ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	b2da      	uxtb	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3301      	adds	r3, #1
 800d50e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	3b01      	subs	r3, #1
 800d514:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	0c1b      	lsrs	r3, r3, #16
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	3301      	adds	r3, #1
 800d524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	3b01      	subs	r3, #1
 800d52a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	0e1b      	lsrs	r3, r3, #24
 800d530:	b2da      	uxtb	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3301      	adds	r3, #1
 800d53a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	3b01      	subs	r3, #1
 800d540:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	3301      	adds	r3, #1
 800d546:	617b      	str	r3, [r7, #20]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2b07      	cmp	r3, #7
 800d54c:	d9c8      	bls.n	800d4e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d55a:	bf00      	nop
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b086      	sub	sp, #24
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d043      	beq.n	800d604 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d57c:	2300      	movs	r3, #0
 800d57e:	617b      	str	r3, [r7, #20]
 800d580:	e037      	b.n	800d5f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	3b01      	subs	r3, #1
 800d592:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	021a      	lsls	r2, r3, #8
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	041a      	lsls	r2, r3, #16
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	061a      	lsls	r2, r3, #24
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f107 0208 	add.w	r2, r7, #8
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f002 f836 	bl	800f658 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b07      	cmp	r3, #7
 800d5f6:	d9c4      	bls.n	800d582 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d604:	bf00      	nop
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d101      	bne.n	800d61e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e056      	b.n	800d6cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d106      	bne.n	800d63e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7f9 fa63 	bl	8006b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2202      	movs	r2, #2
 800d642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d654:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	431a      	orrs	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	431a      	orrs	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	431a      	orrs	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	695b      	ldr	r3, [r3, #20]
 800d670:	431a      	orrs	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d67a:	431a      	orrs	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	ea42 0103 	orr.w	r1, r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	0c1b      	lsrs	r3, r3, #16
 800d69c:	f003 0104 	and.w	r1, r3, #4
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	69da      	ldr	r2, [r3, #28]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	603b      	str	r3, [r7, #0]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d101      	bne.n	800d6f6 <HAL_SPI_Transmit+0x22>
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	e11e      	b.n	800d934 <HAL_SPI_Transmit+0x260>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6fe:	f7fb fb97 	bl	8008e30 <HAL_GetTick>
 800d702:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d704:	88fb      	ldrh	r3, [r7, #6]
 800d706:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b01      	cmp	r3, #1
 800d712:	d002      	beq.n	800d71a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d714:	2302      	movs	r3, #2
 800d716:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d718:	e103      	b.n	800d922 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <HAL_SPI_Transmit+0x52>
 800d720:	88fb      	ldrh	r3, [r7, #6]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d72a:	e0fa      	b.n	800d922 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2203      	movs	r2, #3
 800d730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	88fa      	ldrh	r2, [r7, #6]
 800d744:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	88fa      	ldrh	r2, [r7, #6]
 800d74a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2200      	movs	r2, #0
 800d756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d772:	d107      	bne.n	800d784 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d782:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78e:	2b40      	cmp	r3, #64	; 0x40
 800d790:	d007      	beq.n	800d7a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7aa:	d14b      	bne.n	800d844 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d002      	beq.n	800d7ba <HAL_SPI_Transmit+0xe6>
 800d7b4:	8afb      	ldrh	r3, [r7, #22]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d13e      	bne.n	800d838 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7be:	881a      	ldrh	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	1c9a      	adds	r2, r3, #2
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d7de:	e02b      	b.n	800d838 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f003 0302 	and.w	r3, r3, #2
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d112      	bne.n	800d814 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f2:	881a      	ldrh	r2, [r3, #0]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fe:	1c9a      	adds	r2, r3, #2
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d808:	b29b      	uxth	r3, r3
 800d80a:	3b01      	subs	r3, #1
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	86da      	strh	r2, [r3, #54]	; 0x36
 800d812:	e011      	b.n	800d838 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d814:	f7fb fb0c 	bl	8008e30 <HAL_GetTick>
 800d818:	4602      	mov	r2, r0
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d803      	bhi.n	800d82c <HAL_SPI_Transmit+0x158>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82a:	d102      	bne.n	800d832 <HAL_SPI_Transmit+0x15e>
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d836:	e074      	b.n	800d922 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1ce      	bne.n	800d7e0 <HAL_SPI_Transmit+0x10c>
 800d842:	e04c      	b.n	800d8de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <HAL_SPI_Transmit+0x17e>
 800d84c:	8afb      	ldrh	r3, [r7, #22]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d140      	bne.n	800d8d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	330c      	adds	r3, #12
 800d85c:	7812      	ldrb	r2, [r2, #0]
 800d85e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d864:	1c5a      	adds	r2, r3, #1
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d86e:	b29b      	uxth	r3, r3
 800d870:	3b01      	subs	r3, #1
 800d872:	b29a      	uxth	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d878:	e02c      	b.n	800d8d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	f003 0302 	and.w	r3, r3, #2
 800d884:	2b02      	cmp	r3, #2
 800d886:	d113      	bne.n	800d8b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	330c      	adds	r3, #12
 800d892:	7812      	ldrb	r2, [r2, #0]
 800d894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8ae:	e011      	b.n	800d8d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8b0:	f7fb fabe 	bl	8008e30 <HAL_GetTick>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d803      	bhi.n	800d8c8 <HAL_SPI_Transmit+0x1f4>
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c6:	d102      	bne.n	800d8ce <HAL_SPI_Transmit+0x1fa>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d102      	bne.n	800d8d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8d2:	e026      	b.n	800d922 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1cd      	bne.n	800d87a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f000 fba4 	bl	800e030 <SPI_EndRxTxTransaction>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2220      	movs	r2, #32
 800d8f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	613b      	str	r3, [r7, #16]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	613b      	str	r3, [r7, #16]
 800d910:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d916:	2b00      	cmp	r3, #0
 800d918:	d002      	beq.n	800d920 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	77fb      	strb	r3, [r7, #31]
 800d91e:	e000      	b.n	800d922 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d932:	7ffb      	ldrb	r3, [r7, #31]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af02      	add	r7, sp, #8
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	4613      	mov	r3, r2
 800d94a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d958:	d112      	bne.n	800d980 <HAL_SPI_Receive+0x44>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10e      	bne.n	800d980 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2204      	movs	r2, #4
 800d966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d96a:	88fa      	ldrh	r2, [r7, #6]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	4613      	mov	r3, r2
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	68b9      	ldr	r1, [r7, #8]
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f000 f8e9 	bl	800db4e <HAL_SPI_TransmitReceive>
 800d97c:	4603      	mov	r3, r0
 800d97e:	e0e2      	b.n	800db46 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d986:	2b01      	cmp	r3, #1
 800d988:	d101      	bne.n	800d98e <HAL_SPI_Receive+0x52>
 800d98a:	2302      	movs	r3, #2
 800d98c:	e0db      	b.n	800db46 <HAL_SPI_Receive+0x20a>
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d996:	f7fb fa4b 	bl	8008e30 <HAL_GetTick>
 800d99a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d002      	beq.n	800d9ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9ac:	e0c2      	b.n	800db34 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <HAL_SPI_Receive+0x7e>
 800d9b4:	88fb      	ldrh	r3, [r7, #6]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9be:	e0b9      	b.n	800db34 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2204      	movs	r2, #4
 800d9c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	88fa      	ldrh	r2, [r7, #6]
 800d9d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	88fa      	ldrh	r2, [r7, #6]
 800d9de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da06:	d107      	bne.n	800da18 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da22:	2b40      	cmp	r3, #64	; 0x40
 800da24:	d007      	beq.n	800da36 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d162      	bne.n	800db04 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da3e:	e02e      	b.n	800da9e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d115      	bne.n	800da7a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f103 020c 	add.w	r2, r3, #12
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5a:	7812      	ldrb	r2, [r2, #0]
 800da5c:	b2d2      	uxtb	r2, r2
 800da5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3b01      	subs	r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da78:	e011      	b.n	800da9e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da7a:	f7fb f9d9 	bl	8008e30 <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d803      	bhi.n	800da92 <HAL_SPI_Receive+0x156>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da90:	d102      	bne.n	800da98 <HAL_SPI_Receive+0x15c>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800da98:	2303      	movs	r3, #3
 800da9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da9c:	e04a      	b.n	800db34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1cb      	bne.n	800da40 <HAL_SPI_Receive+0x104>
 800daa8:	e031      	b.n	800db0e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d113      	bne.n	800dae0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac2:	b292      	uxth	r2, r2
 800dac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daca:	1c9a      	adds	r2, r3, #2
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	3b01      	subs	r3, #1
 800dad8:	b29a      	uxth	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dade:	e011      	b.n	800db04 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dae0:	f7fb f9a6 	bl	8008e30 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	429a      	cmp	r2, r3
 800daee:	d803      	bhi.n	800daf8 <HAL_SPI_Receive+0x1bc>
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf6:	d102      	bne.n	800dafe <HAL_SPI_Receive+0x1c2>
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d102      	bne.n	800db04 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800dafe:	2303      	movs	r3, #3
 800db00:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db02:	e017      	b.n	800db34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db08:	b29b      	uxth	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1cd      	bne.n	800daaa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f000 fa27 	bl	800df66 <SPI_EndRxTransaction>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2220      	movs	r2, #32
 800db22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	75fb      	strb	r3, [r7, #23]
 800db30:	e000      	b.n	800db34 <HAL_SPI_Receive+0x1f8>
  }

error :
 800db32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db44:	7dfb      	ldrb	r3, [r7, #23]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b08c      	sub	sp, #48	; 0x30
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db5c:	2301      	movs	r3, #1
 800db5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d101      	bne.n	800db74 <HAL_SPI_TransmitReceive+0x26>
 800db70:	2302      	movs	r3, #2
 800db72:	e18a      	b.n	800de8a <HAL_SPI_TransmitReceive+0x33c>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db7c:	f7fb f958 	bl	8008e30 <HAL_GetTick>
 800db80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800db92:	887b      	ldrh	r3, [r7, #2]
 800db94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d00f      	beq.n	800dbbe <HAL_SPI_TransmitReceive+0x70>
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dba4:	d107      	bne.n	800dbb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	689b      	ldr	r3, [r3, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d103      	bne.n	800dbb6 <HAL_SPI_TransmitReceive+0x68>
 800dbae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbb2:	2b04      	cmp	r3, #4
 800dbb4:	d003      	beq.n	800dbbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbbc:	e15b      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <HAL_SPI_TransmitReceive+0x82>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <HAL_SPI_TransmitReceive+0x82>
 800dbca:	887b      	ldrh	r3, [r7, #2]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d103      	bne.n	800dbd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbd6:	e14e      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b04      	cmp	r3, #4
 800dbe2:	d003      	beq.n	800dbec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2205      	movs	r2, #5
 800dbe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	887a      	ldrh	r2, [r7, #2]
 800dbfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	887a      	ldrh	r2, [r7, #2]
 800dc02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	887a      	ldrh	r2, [r7, #2]
 800dc0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	887a      	ldrh	r2, [r7, #2]
 800dc14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2c:	2b40      	cmp	r3, #64	; 0x40
 800dc2e:	d007      	beq.n	800dc40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc48:	d178      	bne.n	800dd3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <HAL_SPI_TransmitReceive+0x10a>
 800dc52:	8b7b      	ldrh	r3, [r7, #26]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d166      	bne.n	800dd26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5c:	881a      	ldrh	r2, [r3, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc68:	1c9a      	adds	r2, r3, #2
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	3b01      	subs	r3, #1
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc7c:	e053      	b.n	800dd26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d11b      	bne.n	800dcc4 <HAL_SPI_TransmitReceive+0x176>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d016      	beq.n	800dcc4 <HAL_SPI_TransmitReceive+0x176>
 800dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d113      	bne.n	800dcc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca0:	881a      	ldrh	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcac:	1c9a      	adds	r2, r3, #2
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d119      	bne.n	800dd06 <HAL_SPI_TransmitReceive+0x1b8>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d014      	beq.n	800dd06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce6:	b292      	uxth	r2, r2
 800dce8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcee:	1c9a      	adds	r2, r3, #2
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd02:	2301      	movs	r3, #1
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd06:	f7fb f893 	bl	8008e30 <HAL_GetTick>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d807      	bhi.n	800dd26 <HAL_SPI_TransmitReceive+0x1d8>
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d003      	beq.n	800dd26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd24:	e0a7      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1a6      	bne.n	800dc7e <HAL_SPI_TransmitReceive+0x130>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1a1      	bne.n	800dc7e <HAL_SPI_TransmitReceive+0x130>
 800dd3a:	e07c      	b.n	800de36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <HAL_SPI_TransmitReceive+0x1fc>
 800dd44:	8b7b      	ldrh	r3, [r7, #26]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d16b      	bne.n	800de22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	330c      	adds	r3, #12
 800dd54:	7812      	ldrb	r2, [r2, #0]
 800dd56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5c:	1c5a      	adds	r2, r3, #1
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd70:	e057      	b.n	800de22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f003 0302 	and.w	r3, r3, #2
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d11c      	bne.n	800ddba <HAL_SPI_TransmitReceive+0x26c>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d017      	beq.n	800ddba <HAL_SPI_TransmitReceive+0x26c>
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d114      	bne.n	800ddba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	330c      	adds	r3, #12
 800dd9a:	7812      	ldrb	r2, [r2, #0]
 800dd9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda2:	1c5a      	adds	r2, r3, #1
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d119      	bne.n	800ddfc <HAL_SPI_TransmitReceive+0x2ae>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d014      	beq.n	800ddfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	b2d2      	uxtb	r2, r2
 800ddde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde4:	1c5a      	adds	r2, r3, #1
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ddfc:	f7fb f818 	bl	8008e30 <HAL_GetTick>
 800de00:	4602      	mov	r2, r0
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de08:	429a      	cmp	r2, r3
 800de0a:	d803      	bhi.n	800de14 <HAL_SPI_TransmitReceive+0x2c6>
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de12:	d102      	bne.n	800de1a <HAL_SPI_TransmitReceive+0x2cc>
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	2b00      	cmp	r3, #0
 800de18:	d103      	bne.n	800de22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800de1a:	2303      	movs	r3, #3
 800de1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800de20:	e029      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de26:	b29b      	uxth	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1a2      	bne.n	800dd72 <HAL_SPI_TransmitReceive+0x224>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de30:	b29b      	uxth	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d19d      	bne.n	800dd72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f000 f8f8 	bl	800e030 <SPI_EndRxTxTransaction>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d006      	beq.n	800de54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2220      	movs	r2, #32
 800de50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de52:	e010      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10b      	bne.n	800de74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	617b      	str	r3, [r7, #20]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	e000      	b.n	800de76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800de74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800de86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3730      	adds	r7, #48	; 0x30
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b084      	sub	sp, #16
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	603b      	str	r3, [r7, #0]
 800de9e:	4613      	mov	r3, r2
 800dea0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dea2:	e04c      	b.n	800df3e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deaa:	d048      	beq.n	800df3e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800deac:	f7fa ffc0 	bl	8008e30 <HAL_GetTick>
 800deb0:	4602      	mov	r2, r0
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d902      	bls.n	800dec2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d13d      	bne.n	800df3e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ded0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800deda:	d111      	bne.n	800df00 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dee4:	d004      	beq.n	800def0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800deee:	d107      	bne.n	800df00 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800defe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df08:	d10f      	bne.n	800df2a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800df3a:	2303      	movs	r3, #3
 800df3c:	e00f      	b.n	800df5e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	689a      	ldr	r2, [r3, #8]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4013      	ands	r3, r2
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	bf0c      	ite	eq
 800df4e:	2301      	moveq	r3, #1
 800df50:	2300      	movne	r3, #0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d1a3      	bne.n	800dea4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b086      	sub	sp, #24
 800df6a:	af02      	add	r7, sp, #8
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df7a:	d111      	bne.n	800dfa0 <SPI_EndRxTransaction+0x3a>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df84:	d004      	beq.n	800df90 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df8e:	d107      	bne.n	800dfa0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df9e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfa8:	d12a      	bne.n	800e000 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfb2:	d012      	beq.n	800dfda <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	2180      	movs	r1, #128	; 0x80
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff ff67 	bl	800de92 <SPI_WaitFlagStateUntilTimeout>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d02d      	beq.n	800e026 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfce:	f043 0220 	orr.w	r2, r3, #32
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e026      	b.n	800e028 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	2101      	movs	r1, #1
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7ff ff54 	bl	800de92 <SPI_WaitFlagStateUntilTimeout>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01a      	beq.n	800e026 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff4:	f043 0220 	orr.w	r2, r3, #32
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dffc:	2303      	movs	r3, #3
 800dffe:	e013      	b.n	800e028 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2200      	movs	r2, #0
 800e008:	2101      	movs	r1, #1
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7ff ff41 	bl	800de92 <SPI_WaitFlagStateUntilTimeout>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d007      	beq.n	800e026 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e01a:	f043 0220 	orr.w	r2, r3, #32
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e022:	2303      	movs	r3, #3
 800e024:	e000      	b.n	800e028 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af02      	add	r7, sp, #8
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e03c:	4b1b      	ldr	r3, [pc, #108]	; (800e0ac <SPI_EndRxTxTransaction+0x7c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <SPI_EndRxTxTransaction+0x80>)
 800e042:	fba2 2303 	umull	r2, r3, r2, r3
 800e046:	0d5b      	lsrs	r3, r3, #21
 800e048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e04c:	fb02 f303 	mul.w	r3, r2, r3
 800e050:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e05a:	d112      	bne.n	800e082 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	2180      	movs	r1, #128	; 0x80
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff ff13 	bl	800de92 <SPI_WaitFlagStateUntilTimeout>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d016      	beq.n	800e0a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e076:	f043 0220 	orr.w	r2, r3, #32
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e07e:	2303      	movs	r3, #3
 800e080:	e00f      	b.n	800e0a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00a      	beq.n	800e09e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e098:	2b80      	cmp	r3, #128	; 0x80
 800e09a:	d0f2      	beq.n	800e082 <SPI_EndRxTxTransaction+0x52>
 800e09c:	e000      	b.n	800e0a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e09e:	bf00      	nop
  }

  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000000 	.word	0x20000000
 800e0b0:	165e9f81 	.word	0x165e9f81

0800e0b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e01d      	b.n	800e102 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f8 fdce 	bl	8006c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	f000 fb56 	bl	800e7a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e10a:	b480      	push	{r7}
 800e10c:	b085      	sub	sp, #20
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f042 0201 	orr.w	r2, r2, #1
 800e120:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	f003 0307 	and.w	r3, r3, #7
 800e12c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b06      	cmp	r3, #6
 800e132:	d007      	beq.n	800e144 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f042 0201 	orr.w	r2, r2, #1
 800e142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	e01d      	b.n	800e1a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d106      	bne.n	800e17e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7f8 fd0b 	bl	8006b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2202      	movs	r2, #2
 800e182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3304      	adds	r3, #4
 800e18e:	4619      	mov	r1, r3
 800e190:	4610      	mov	r0, r2
 800e192:	f000 fb07 	bl	800e7a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 fd42 	bl	800ec44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a15      	ldr	r2, [pc, #84]	; (800e21c <HAL_TIM_PWM_Start+0x74>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d004      	beq.n	800e1d4 <HAL_TIM_PWM_Start+0x2c>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a14      	ldr	r2, [pc, #80]	; (800e220 <HAL_TIM_PWM_Start+0x78>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d101      	bne.n	800e1d8 <HAL_TIM_PWM_Start+0x30>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e000      	b.n	800e1da <HAL_TIM_PWM_Start+0x32>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d007      	beq.n	800e1ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	f003 0307 	and.w	r3, r3, #7
 800e1f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b06      	cmp	r3, #6
 800e1fe:	d007      	beq.n	800e210 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0201 	orr.w	r2, r2, #1
 800e20e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e210:	2300      	movs	r3, #0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	40010000 	.word	0x40010000
 800e220:	40010400 	.word	0x40010400

0800e224 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e083      	b.n	800e340 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d106      	bne.n	800e252 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7f8 fda5 	bl	8006d9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2202      	movs	r2, #2
 800e256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e268:	f023 0307 	bic.w	r3, r3, #7
 800e26c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3304      	adds	r3, #4
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f000 fa93 	bl	800e7a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a6:	f023 0303 	bic.w	r3, r3, #3
 800e2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	689a      	ldr	r2, [r3, #8]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	021b      	lsls	r3, r3, #8
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	693a      	ldr	r2, [r7, #16]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e2c4:	f023 030c 	bic.w	r3, r3, #12
 800e2c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e2d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	68da      	ldr	r2, [r3, #12]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	021b      	lsls	r3, r3, #8
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	693a      	ldr	r2, [r7, #16]
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	011a      	lsls	r2, r3, #4
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	031b      	lsls	r3, r3, #12
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e302:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e30a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	695b      	ldr	r3, [r3, #20]
 800e314:	011b      	lsls	r3, r3, #4
 800e316:	4313      	orrs	r3, r2
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	697a      	ldr	r2, [r7, #20]
 800e324:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <HAL_TIM_Encoder_Start+0x16>
 800e358:	2b04      	cmp	r3, #4
 800e35a:	d008      	beq.n	800e36e <HAL_TIM_Encoder_Start+0x26>
 800e35c:	e00f      	b.n	800e37e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2201      	movs	r2, #1
 800e364:	2100      	movs	r1, #0
 800e366:	4618      	mov	r0, r3
 800e368:	f000 fc6c 	bl	800ec44 <TIM_CCxChannelCmd>
      break;
 800e36c:	e016      	b.n	800e39c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2201      	movs	r2, #1
 800e374:	2104      	movs	r1, #4
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fc64 	bl	800ec44 <TIM_CCxChannelCmd>
      break;
 800e37c:	e00e      	b.n	800e39c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2201      	movs	r2, #1
 800e384:	2100      	movs	r1, #0
 800e386:	4618      	mov	r0, r3
 800e388:	f000 fc5c 	bl	800ec44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2201      	movs	r2, #1
 800e392:	2104      	movs	r1, #4
 800e394:	4618      	mov	r0, r3
 800e396:	f000 fc55 	bl	800ec44 <TIM_CCxChannelCmd>
      break;
 800e39a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0201 	orr.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	f003 0302 	and.w	r3, r3, #2
 800e3c8:	2b02      	cmp	r3, #2
 800e3ca:	d122      	bne.n	800e412 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	f003 0302 	and.w	r3, r3, #2
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d11b      	bne.n	800e412 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f06f 0202 	mvn.w	r2, #2
 800e3e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	699b      	ldr	r3, [r3, #24]
 800e3f0:	f003 0303 	and.w	r3, r3, #3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d003      	beq.n	800e400 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 f9b5 	bl	800e768 <HAL_TIM_IC_CaptureCallback>
 800e3fe:	e005      	b.n	800e40c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 f9a7 	bl	800e754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f9b8 	bl	800e77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	f003 0304 	and.w	r3, r3, #4
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	d122      	bne.n	800e466 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	f003 0304 	and.w	r3, r3, #4
 800e42a:	2b04      	cmp	r3, #4
 800e42c:	d11b      	bne.n	800e466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f06f 0204 	mvn.w	r2, #4
 800e436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2202      	movs	r2, #2
 800e43c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f98b 	bl	800e768 <HAL_TIM_IC_CaptureCallback>
 800e452:	e005      	b.n	800e460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f97d 	bl	800e754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f98e 	bl	800e77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	f003 0308 	and.w	r3, r3, #8
 800e470:	2b08      	cmp	r3, #8
 800e472:	d122      	bne.n	800e4ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	f003 0308 	and.w	r3, r3, #8
 800e47e:	2b08      	cmp	r3, #8
 800e480:	d11b      	bne.n	800e4ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f06f 0208 	mvn.w	r2, #8
 800e48a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2204      	movs	r2, #4
 800e490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	f003 0303 	and.w	r3, r3, #3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f961 	bl	800e768 <HAL_TIM_IC_CaptureCallback>
 800e4a6:	e005      	b.n	800e4b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 f953 	bl	800e754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f964 	bl	800e77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	f003 0310 	and.w	r3, r3, #16
 800e4c4:	2b10      	cmp	r3, #16
 800e4c6:	d122      	bne.n	800e50e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	f003 0310 	and.w	r3, r3, #16
 800e4d2:	2b10      	cmp	r3, #16
 800e4d4:	d11b      	bne.n	800e50e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f06f 0210 	mvn.w	r2, #16
 800e4de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2208      	movs	r2, #8
 800e4e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	69db      	ldr	r3, [r3, #28]
 800e4ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 f937 	bl	800e768 <HAL_TIM_IC_CaptureCallback>
 800e4fa:	e005      	b.n	800e508 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 f929 	bl	800e754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f93a 	bl	800e77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d10e      	bne.n	800e53a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b01      	cmp	r3, #1
 800e528:	d107      	bne.n	800e53a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f06f 0201 	mvn.w	r2, #1
 800e532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7f7 f91b 	bl	8005770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e544:	2b80      	cmp	r3, #128	; 0x80
 800e546:	d10e      	bne.n	800e566 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e552:	2b80      	cmp	r3, #128	; 0x80
 800e554:	d107      	bne.n	800e566 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fc6d 	bl	800ee40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e570:	2b40      	cmp	r3, #64	; 0x40
 800e572:	d10e      	bne.n	800e592 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57e:	2b40      	cmp	r3, #64	; 0x40
 800e580:	d107      	bne.n	800e592 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e58a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f8ff 	bl	800e790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	691b      	ldr	r3, [r3, #16]
 800e598:	f003 0320 	and.w	r3, r3, #32
 800e59c:	2b20      	cmp	r3, #32
 800e59e:	d10e      	bne.n	800e5be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	f003 0320 	and.w	r3, r3, #32
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	d107      	bne.n	800e5be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f06f 0220 	mvn.w	r2, #32
 800e5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fc37 	bl	800ee2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5be:	bf00      	nop
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d101      	bne.n	800e5e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e5de:	2302      	movs	r3, #2
 800e5e0:	e0b4      	b.n	800e74c <HAL_TIM_PWM_ConfigChannel+0x184>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b0c      	cmp	r3, #12
 800e5f6:	f200 809f 	bhi.w	800e738 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e5fa:	a201      	add	r2, pc, #4	; (adr r2, 800e600 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e600:	0800e635 	.word	0x0800e635
 800e604:	0800e739 	.word	0x0800e739
 800e608:	0800e739 	.word	0x0800e739
 800e60c:	0800e739 	.word	0x0800e739
 800e610:	0800e675 	.word	0x0800e675
 800e614:	0800e739 	.word	0x0800e739
 800e618:	0800e739 	.word	0x0800e739
 800e61c:	0800e739 	.word	0x0800e739
 800e620:	0800e6b7 	.word	0x0800e6b7
 800e624:	0800e739 	.word	0x0800e739
 800e628:	0800e739 	.word	0x0800e739
 800e62c:	0800e739 	.word	0x0800e739
 800e630:	0800e6f7 	.word	0x0800e6f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 f952 	bl	800e8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	699a      	ldr	r2, [r3, #24]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0208 	orr.w	r2, r2, #8
 800e64e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	699a      	ldr	r2, [r3, #24]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f022 0204 	bic.w	r2, r2, #4
 800e65e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6999      	ldr	r1, [r3, #24]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	691a      	ldr	r2, [r3, #16]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	430a      	orrs	r2, r1
 800e670:	619a      	str	r2, [r3, #24]
      break;
 800e672:	e062      	b.n	800e73a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68b9      	ldr	r1, [r7, #8]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 f9a2 	bl	800e9c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	699a      	ldr	r2, [r3, #24]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e68e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	699a      	ldr	r2, [r3, #24]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e69e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6999      	ldr	r1, [r3, #24]
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	691b      	ldr	r3, [r3, #16]
 800e6aa:	021a      	lsls	r2, r3, #8
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	619a      	str	r2, [r3, #24]
      break;
 800e6b4:	e041      	b.n	800e73a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68b9      	ldr	r1, [r7, #8]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 f9f7 	bl	800eab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69da      	ldr	r2, [r3, #28]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f042 0208 	orr.w	r2, r2, #8
 800e6d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	69da      	ldr	r2, [r3, #28]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f022 0204 	bic.w	r2, r2, #4
 800e6e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	69d9      	ldr	r1, [r3, #28]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	691a      	ldr	r2, [r3, #16]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	61da      	str	r2, [r3, #28]
      break;
 800e6f4:	e021      	b.n	800e73a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68b9      	ldr	r1, [r7, #8]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 fa4b 	bl	800eb98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	69da      	ldr	r2, [r3, #28]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	69da      	ldr	r2, [r3, #28]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	69d9      	ldr	r1, [r3, #28]
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	021a      	lsls	r2, r3, #8
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	430a      	orrs	r2, r1
 800e734:	61da      	str	r2, [r3, #28]
      break;
 800e736:	e000      	b.n	800e73a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e738:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a40      	ldr	r2, [pc, #256]	; (800e8b8 <TIM_Base_SetConfig+0x114>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d013      	beq.n	800e7e4 <TIM_Base_SetConfig+0x40>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7c2:	d00f      	beq.n	800e7e4 <TIM_Base_SetConfig+0x40>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a3d      	ldr	r2, [pc, #244]	; (800e8bc <TIM_Base_SetConfig+0x118>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d00b      	beq.n	800e7e4 <TIM_Base_SetConfig+0x40>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4a3c      	ldr	r2, [pc, #240]	; (800e8c0 <TIM_Base_SetConfig+0x11c>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d007      	beq.n	800e7e4 <TIM_Base_SetConfig+0x40>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a3b      	ldr	r2, [pc, #236]	; (800e8c4 <TIM_Base_SetConfig+0x120>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d003      	beq.n	800e7e4 <TIM_Base_SetConfig+0x40>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a3a      	ldr	r2, [pc, #232]	; (800e8c8 <TIM_Base_SetConfig+0x124>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d108      	bne.n	800e7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a2f      	ldr	r2, [pc, #188]	; (800e8b8 <TIM_Base_SetConfig+0x114>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d02b      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e804:	d027      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4a2c      	ldr	r2, [pc, #176]	; (800e8bc <TIM_Base_SetConfig+0x118>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d023      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a2b      	ldr	r2, [pc, #172]	; (800e8c0 <TIM_Base_SetConfig+0x11c>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d01f      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4a2a      	ldr	r2, [pc, #168]	; (800e8c4 <TIM_Base_SetConfig+0x120>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d01b      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a29      	ldr	r2, [pc, #164]	; (800e8c8 <TIM_Base_SetConfig+0x124>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d017      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a28      	ldr	r2, [pc, #160]	; (800e8cc <TIM_Base_SetConfig+0x128>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d013      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a27      	ldr	r2, [pc, #156]	; (800e8d0 <TIM_Base_SetConfig+0x12c>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d00f      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4a26      	ldr	r2, [pc, #152]	; (800e8d4 <TIM_Base_SetConfig+0x130>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d00b      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a25      	ldr	r2, [pc, #148]	; (800e8d8 <TIM_Base_SetConfig+0x134>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d007      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a24      	ldr	r2, [pc, #144]	; (800e8dc <TIM_Base_SetConfig+0x138>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d003      	beq.n	800e856 <TIM_Base_SetConfig+0xb2>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a23      	ldr	r2, [pc, #140]	; (800e8e0 <TIM_Base_SetConfig+0x13c>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d108      	bne.n	800e868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e85c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4313      	orrs	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	4313      	orrs	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a0a      	ldr	r2, [pc, #40]	; (800e8b8 <TIM_Base_SetConfig+0x114>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d003      	beq.n	800e89c <TIM_Base_SetConfig+0xf8>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a0c      	ldr	r2, [pc, #48]	; (800e8c8 <TIM_Base_SetConfig+0x124>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d103      	bne.n	800e8a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	691a      	ldr	r2, [r3, #16]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	615a      	str	r2, [r3, #20]
}
 800e8aa:	bf00      	nop
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	40010000 	.word	0x40010000
 800e8bc:	40000400 	.word	0x40000400
 800e8c0:	40000800 	.word	0x40000800
 800e8c4:	40000c00 	.word	0x40000c00
 800e8c8:	40010400 	.word	0x40010400
 800e8cc:	40014000 	.word	0x40014000
 800e8d0:	40014400 	.word	0x40014400
 800e8d4:	40014800 	.word	0x40014800
 800e8d8:	40001800 	.word	0x40001800
 800e8dc:	40001c00 	.word	0x40001c00
 800e8e0:	40002000 	.word	0x40002000

0800e8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	f023 0201 	bic.w	r2, r3, #1
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f023 0303 	bic.w	r3, r3, #3
 800e91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4313      	orrs	r3, r2
 800e924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f023 0302 	bic.w	r3, r3, #2
 800e92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	4313      	orrs	r3, r2
 800e936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a20      	ldr	r2, [pc, #128]	; (800e9bc <TIM_OC1_SetConfig+0xd8>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d003      	beq.n	800e948 <TIM_OC1_SetConfig+0x64>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a1f      	ldr	r2, [pc, #124]	; (800e9c0 <TIM_OC1_SetConfig+0xdc>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d10c      	bne.n	800e962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f023 0308 	bic.w	r3, r3, #8
 800e94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	4313      	orrs	r3, r2
 800e958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f023 0304 	bic.w	r3, r3, #4
 800e960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a15      	ldr	r2, [pc, #84]	; (800e9bc <TIM_OC1_SetConfig+0xd8>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d003      	beq.n	800e972 <TIM_OC1_SetConfig+0x8e>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a14      	ldr	r2, [pc, #80]	; (800e9c0 <TIM_OC1_SetConfig+0xdc>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d111      	bne.n	800e996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	4313      	orrs	r3, r2
 800e98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4313      	orrs	r3, r2
 800e994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	621a      	str	r2, [r3, #32]
}
 800e9b0:	bf00      	nop
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	40010000 	.word	0x40010000
 800e9c0:	40010400 	.word	0x40010400

0800e9c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b087      	sub	sp, #28
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
 800e9d2:	f023 0210 	bic.w	r2, r3, #16
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
 800e9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	699b      	ldr	r3, [r3, #24]
 800e9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	021b      	lsls	r3, r3, #8
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f023 0320 	bic.w	r3, r3, #32
 800ea0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	011b      	lsls	r3, r3, #4
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a22      	ldr	r2, [pc, #136]	; (800eaa8 <TIM_OC2_SetConfig+0xe4>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d003      	beq.n	800ea2c <TIM_OC2_SetConfig+0x68>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a21      	ldr	r2, [pc, #132]	; (800eaac <TIM_OC2_SetConfig+0xe8>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d10d      	bne.n	800ea48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	011b      	lsls	r3, r3, #4
 800ea3a:	697a      	ldr	r2, [r7, #20]
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4a17      	ldr	r2, [pc, #92]	; (800eaa8 <TIM_OC2_SetConfig+0xe4>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d003      	beq.n	800ea58 <TIM_OC2_SetConfig+0x94>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a16      	ldr	r2, [pc, #88]	; (800eaac <TIM_OC2_SetConfig+0xe8>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d113      	bne.n	800ea80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	695b      	ldr	r3, [r3, #20]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	621a      	str	r2, [r3, #32]
}
 800ea9a:	bf00      	nop
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	40010000 	.word	0x40010000
 800eaac:	40010400 	.word	0x40010400

0800eab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eaf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	021b      	lsls	r3, r3, #8
 800eb00:	697a      	ldr	r2, [r7, #20]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a21      	ldr	r2, [pc, #132]	; (800eb90 <TIM_OC3_SetConfig+0xe0>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d003      	beq.n	800eb16 <TIM_OC3_SetConfig+0x66>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a20      	ldr	r2, [pc, #128]	; (800eb94 <TIM_OC3_SetConfig+0xe4>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d10d      	bne.n	800eb32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a16      	ldr	r2, [pc, #88]	; (800eb90 <TIM_OC3_SetConfig+0xe0>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d003      	beq.n	800eb42 <TIM_OC3_SetConfig+0x92>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4a15      	ldr	r2, [pc, #84]	; (800eb94 <TIM_OC3_SetConfig+0xe4>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d113      	bne.n	800eb6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	011b      	lsls	r3, r3, #4
 800eb58:	693a      	ldr	r2, [r7, #16]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	685a      	ldr	r2, [r3, #4]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	621a      	str	r2, [r3, #32]
}
 800eb84:	bf00      	nop
 800eb86:	371c      	adds	r7, #28
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	40010000 	.word	0x40010000
 800eb94:	40010400 	.word	0x40010400

0800eb98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	69db      	ldr	r3, [r3, #28]
 800ebbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	021b      	lsls	r3, r3, #8
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	031b      	lsls	r3, r3, #12
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a12      	ldr	r2, [pc, #72]	; (800ec3c <TIM_OC4_SetConfig+0xa4>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d003      	beq.n	800ec00 <TIM_OC4_SetConfig+0x68>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a11      	ldr	r2, [pc, #68]	; (800ec40 <TIM_OC4_SetConfig+0xa8>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d109      	bne.n	800ec14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	019b      	lsls	r3, r3, #6
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	685a      	ldr	r2, [r3, #4]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	621a      	str	r2, [r3, #32]
}
 800ec2e:	bf00      	nop
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	40010000 	.word	0x40010000
 800ec40:	40010400 	.word	0x40010400

0800ec44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	f003 031f 	and.w	r3, r3, #31
 800ec56:	2201      	movs	r2, #1
 800ec58:	fa02 f303 	lsl.w	r3, r2, r3
 800ec5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6a1a      	ldr	r2, [r3, #32]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	43db      	mvns	r3, r3
 800ec66:	401a      	ands	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a1a      	ldr	r2, [r3, #32]
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f003 031f 	and.w	r3, r3, #31
 800ec76:	6879      	ldr	r1, [r7, #4]
 800ec78:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	621a      	str	r2, [r3, #32]
}
 800ec82:	bf00      	nop
 800ec84:	371c      	adds	r7, #28
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
	...

0800ec90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d101      	bne.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eca4:	2302      	movs	r3, #2
 800eca6:	e05a      	b.n	800ed5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a21      	ldr	r2, [pc, #132]	; (800ed6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d022      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecf4:	d01d      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a1d      	ldr	r2, [pc, #116]	; (800ed70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d018      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a1b      	ldr	r2, [pc, #108]	; (800ed74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d013      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a1a      	ldr	r2, [pc, #104]	; (800ed78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00e      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a18      	ldr	r2, [pc, #96]	; (800ed7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d009      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a17      	ldr	r2, [pc, #92]	; (800ed80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d004      	beq.n	800ed32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a15      	ldr	r2, [pc, #84]	; (800ed84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d10c      	bne.n	800ed4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	40010000 	.word	0x40010000
 800ed70:	40000400 	.word	0x40000400
 800ed74:	40000800 	.word	0x40000800
 800ed78:	40000c00 	.word	0x40000c00
 800ed7c:	40010400 	.word	0x40010400
 800ed80:	40014000 	.word	0x40014000
 800ed84:	40001800 	.word	0x40001800

0800ed88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed92:	2300      	movs	r3, #0
 800ed94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d101      	bne.n	800eda4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e03d      	b.n	800ee20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	4313      	orrs	r3, r2
 800edc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	4313      	orrs	r3, r2
 800edf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	69db      	ldr	r3, [r3, #28]
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d101      	bne.n	800ee66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	e03f      	b.n	800eee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f7f8 f8b8 	bl	8006ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2224      	movs	r2, #36	; 0x24
 800ee84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68da      	ldr	r2, [r3, #12]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 f829 	bl	800eef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	691a      	ldr	r2, [r3, #16]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eeac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	695a      	ldr	r2, [r3, #20]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2220      	movs	r2, #32
 800eed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2220      	movs	r2, #32
 800eee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
	...

0800eef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef4:	b085      	sub	sp, #20
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	689a      	ldr	r2, [r3, #8]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	431a      	orrs	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	431a      	orrs	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	4313      	orrs	r3, r2
 800ef26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ef32:	f023 030c 	bic.w	r3, r3, #12
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	6812      	ldr	r2, [r2, #0]
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	430b      	orrs	r3, r1
 800ef3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699a      	ldr	r2, [r3, #24]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	430a      	orrs	r2, r1
 800ef54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	69db      	ldr	r3, [r3, #28]
 800ef5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef5e:	f040 818b 	bne.w	800f278 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4ac1      	ldr	r2, [pc, #772]	; (800f26c <UART_SetConfig+0x37c>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d005      	beq.n	800ef78 <UART_SetConfig+0x88>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4abf      	ldr	r2, [pc, #764]	; (800f270 <UART_SetConfig+0x380>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	f040 80bd 	bne.w	800f0f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef78:	f7fc fbcc 	bl	800b714 <HAL_RCC_GetPCLK2Freq>
 800ef7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	461d      	mov	r5, r3
 800ef82:	f04f 0600 	mov.w	r6, #0
 800ef86:	46a8      	mov	r8, r5
 800ef88:	46b1      	mov	r9, r6
 800ef8a:	eb18 0308 	adds.w	r3, r8, r8
 800ef8e:	eb49 0409 	adc.w	r4, r9, r9
 800ef92:	4698      	mov	r8, r3
 800ef94:	46a1      	mov	r9, r4
 800ef96:	eb18 0805 	adds.w	r8, r8, r5
 800ef9a:	eb49 0906 	adc.w	r9, r9, r6
 800ef9e:	f04f 0100 	mov.w	r1, #0
 800efa2:	f04f 0200 	mov.w	r2, #0
 800efa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800efaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800efae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800efb2:	4688      	mov	r8, r1
 800efb4:	4691      	mov	r9, r2
 800efb6:	eb18 0005 	adds.w	r0, r8, r5
 800efba:	eb49 0106 	adc.w	r1, r9, r6
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	461d      	mov	r5, r3
 800efc4:	f04f 0600 	mov.w	r6, #0
 800efc8:	196b      	adds	r3, r5, r5
 800efca:	eb46 0406 	adc.w	r4, r6, r6
 800efce:	461a      	mov	r2, r3
 800efd0:	4623      	mov	r3, r4
 800efd2:	f7f1 fe71 	bl	8000cb8 <__aeabi_uldivmod>
 800efd6:	4603      	mov	r3, r0
 800efd8:	460c      	mov	r4, r1
 800efda:	461a      	mov	r2, r3
 800efdc:	4ba5      	ldr	r3, [pc, #660]	; (800f274 <UART_SetConfig+0x384>)
 800efde:	fba3 2302 	umull	r2, r3, r3, r2
 800efe2:	095b      	lsrs	r3, r3, #5
 800efe4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	461d      	mov	r5, r3
 800efec:	f04f 0600 	mov.w	r6, #0
 800eff0:	46a9      	mov	r9, r5
 800eff2:	46b2      	mov	sl, r6
 800eff4:	eb19 0309 	adds.w	r3, r9, r9
 800eff8:	eb4a 040a 	adc.w	r4, sl, sl
 800effc:	4699      	mov	r9, r3
 800effe:	46a2      	mov	sl, r4
 800f000:	eb19 0905 	adds.w	r9, r9, r5
 800f004:	eb4a 0a06 	adc.w	sl, sl, r6
 800f008:	f04f 0100 	mov.w	r1, #0
 800f00c:	f04f 0200 	mov.w	r2, #0
 800f010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f014:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f018:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f01c:	4689      	mov	r9, r1
 800f01e:	4692      	mov	sl, r2
 800f020:	eb19 0005 	adds.w	r0, r9, r5
 800f024:	eb4a 0106 	adc.w	r1, sl, r6
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	461d      	mov	r5, r3
 800f02e:	f04f 0600 	mov.w	r6, #0
 800f032:	196b      	adds	r3, r5, r5
 800f034:	eb46 0406 	adc.w	r4, r6, r6
 800f038:	461a      	mov	r2, r3
 800f03a:	4623      	mov	r3, r4
 800f03c:	f7f1 fe3c 	bl	8000cb8 <__aeabi_uldivmod>
 800f040:	4603      	mov	r3, r0
 800f042:	460c      	mov	r4, r1
 800f044:	461a      	mov	r2, r3
 800f046:	4b8b      	ldr	r3, [pc, #556]	; (800f274 <UART_SetConfig+0x384>)
 800f048:	fba3 1302 	umull	r1, r3, r3, r2
 800f04c:	095b      	lsrs	r3, r3, #5
 800f04e:	2164      	movs	r1, #100	; 0x64
 800f050:	fb01 f303 	mul.w	r3, r1, r3
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	3332      	adds	r3, #50	; 0x32
 800f05a:	4a86      	ldr	r2, [pc, #536]	; (800f274 <UART_SetConfig+0x384>)
 800f05c:	fba2 2303 	umull	r2, r3, r2, r3
 800f060:	095b      	lsrs	r3, r3, #5
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f068:	4498      	add	r8, r3
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	461d      	mov	r5, r3
 800f06e:	f04f 0600 	mov.w	r6, #0
 800f072:	46a9      	mov	r9, r5
 800f074:	46b2      	mov	sl, r6
 800f076:	eb19 0309 	adds.w	r3, r9, r9
 800f07a:	eb4a 040a 	adc.w	r4, sl, sl
 800f07e:	4699      	mov	r9, r3
 800f080:	46a2      	mov	sl, r4
 800f082:	eb19 0905 	adds.w	r9, r9, r5
 800f086:	eb4a 0a06 	adc.w	sl, sl, r6
 800f08a:	f04f 0100 	mov.w	r1, #0
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f09a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f09e:	4689      	mov	r9, r1
 800f0a0:	4692      	mov	sl, r2
 800f0a2:	eb19 0005 	adds.w	r0, r9, r5
 800f0a6:	eb4a 0106 	adc.w	r1, sl, r6
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	461d      	mov	r5, r3
 800f0b0:	f04f 0600 	mov.w	r6, #0
 800f0b4:	196b      	adds	r3, r5, r5
 800f0b6:	eb46 0406 	adc.w	r4, r6, r6
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4623      	mov	r3, r4
 800f0be:	f7f1 fdfb 	bl	8000cb8 <__aeabi_uldivmod>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4b6a      	ldr	r3, [pc, #424]	; (800f274 <UART_SetConfig+0x384>)
 800f0ca:	fba3 1302 	umull	r1, r3, r3, r2
 800f0ce:	095b      	lsrs	r3, r3, #5
 800f0d0:	2164      	movs	r1, #100	; 0x64
 800f0d2:	fb01 f303 	mul.w	r3, r1, r3
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	3332      	adds	r3, #50	; 0x32
 800f0dc:	4a65      	ldr	r2, [pc, #404]	; (800f274 <UART_SetConfig+0x384>)
 800f0de:	fba2 2303 	umull	r2, r3, r2, r3
 800f0e2:	095b      	lsrs	r3, r3, #5
 800f0e4:	f003 0207 	and.w	r2, r3, #7
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4442      	add	r2, r8
 800f0ee:	609a      	str	r2, [r3, #8]
 800f0f0:	e26f      	b.n	800f5d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f0f2:	f7fc fafb 	bl	800b6ec <HAL_RCC_GetPCLK1Freq>
 800f0f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	461d      	mov	r5, r3
 800f0fc:	f04f 0600 	mov.w	r6, #0
 800f100:	46a8      	mov	r8, r5
 800f102:	46b1      	mov	r9, r6
 800f104:	eb18 0308 	adds.w	r3, r8, r8
 800f108:	eb49 0409 	adc.w	r4, r9, r9
 800f10c:	4698      	mov	r8, r3
 800f10e:	46a1      	mov	r9, r4
 800f110:	eb18 0805 	adds.w	r8, r8, r5
 800f114:	eb49 0906 	adc.w	r9, r9, r6
 800f118:	f04f 0100 	mov.w	r1, #0
 800f11c:	f04f 0200 	mov.w	r2, #0
 800f120:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f124:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f12c:	4688      	mov	r8, r1
 800f12e:	4691      	mov	r9, r2
 800f130:	eb18 0005 	adds.w	r0, r8, r5
 800f134:	eb49 0106 	adc.w	r1, r9, r6
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	461d      	mov	r5, r3
 800f13e:	f04f 0600 	mov.w	r6, #0
 800f142:	196b      	adds	r3, r5, r5
 800f144:	eb46 0406 	adc.w	r4, r6, r6
 800f148:	461a      	mov	r2, r3
 800f14a:	4623      	mov	r3, r4
 800f14c:	f7f1 fdb4 	bl	8000cb8 <__aeabi_uldivmod>
 800f150:	4603      	mov	r3, r0
 800f152:	460c      	mov	r4, r1
 800f154:	461a      	mov	r2, r3
 800f156:	4b47      	ldr	r3, [pc, #284]	; (800f274 <UART_SetConfig+0x384>)
 800f158:	fba3 2302 	umull	r2, r3, r3, r2
 800f15c:	095b      	lsrs	r3, r3, #5
 800f15e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	461d      	mov	r5, r3
 800f166:	f04f 0600 	mov.w	r6, #0
 800f16a:	46a9      	mov	r9, r5
 800f16c:	46b2      	mov	sl, r6
 800f16e:	eb19 0309 	adds.w	r3, r9, r9
 800f172:	eb4a 040a 	adc.w	r4, sl, sl
 800f176:	4699      	mov	r9, r3
 800f178:	46a2      	mov	sl, r4
 800f17a:	eb19 0905 	adds.w	r9, r9, r5
 800f17e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f182:	f04f 0100 	mov.w	r1, #0
 800f186:	f04f 0200 	mov.w	r2, #0
 800f18a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f18e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f196:	4689      	mov	r9, r1
 800f198:	4692      	mov	sl, r2
 800f19a:	eb19 0005 	adds.w	r0, r9, r5
 800f19e:	eb4a 0106 	adc.w	r1, sl, r6
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	461d      	mov	r5, r3
 800f1a8:	f04f 0600 	mov.w	r6, #0
 800f1ac:	196b      	adds	r3, r5, r5
 800f1ae:	eb46 0406 	adc.w	r4, r6, r6
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	4623      	mov	r3, r4
 800f1b6:	f7f1 fd7f 	bl	8000cb8 <__aeabi_uldivmod>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	460c      	mov	r4, r1
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4b2c      	ldr	r3, [pc, #176]	; (800f274 <UART_SetConfig+0x384>)
 800f1c2:	fba3 1302 	umull	r1, r3, r3, r2
 800f1c6:	095b      	lsrs	r3, r3, #5
 800f1c8:	2164      	movs	r1, #100	; 0x64
 800f1ca:	fb01 f303 	mul.w	r3, r1, r3
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	3332      	adds	r3, #50	; 0x32
 800f1d4:	4a27      	ldr	r2, [pc, #156]	; (800f274 <UART_SetConfig+0x384>)
 800f1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1da:	095b      	lsrs	r3, r3, #5
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f1e2:	4498      	add	r8, r3
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	461d      	mov	r5, r3
 800f1e8:	f04f 0600 	mov.w	r6, #0
 800f1ec:	46a9      	mov	r9, r5
 800f1ee:	46b2      	mov	sl, r6
 800f1f0:	eb19 0309 	adds.w	r3, r9, r9
 800f1f4:	eb4a 040a 	adc.w	r4, sl, sl
 800f1f8:	4699      	mov	r9, r3
 800f1fa:	46a2      	mov	sl, r4
 800f1fc:	eb19 0905 	adds.w	r9, r9, r5
 800f200:	eb4a 0a06 	adc.w	sl, sl, r6
 800f204:	f04f 0100 	mov.w	r1, #0
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f218:	4689      	mov	r9, r1
 800f21a:	4692      	mov	sl, r2
 800f21c:	eb19 0005 	adds.w	r0, r9, r5
 800f220:	eb4a 0106 	adc.w	r1, sl, r6
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	461d      	mov	r5, r3
 800f22a:	f04f 0600 	mov.w	r6, #0
 800f22e:	196b      	adds	r3, r5, r5
 800f230:	eb46 0406 	adc.w	r4, r6, r6
 800f234:	461a      	mov	r2, r3
 800f236:	4623      	mov	r3, r4
 800f238:	f7f1 fd3e 	bl	8000cb8 <__aeabi_uldivmod>
 800f23c:	4603      	mov	r3, r0
 800f23e:	460c      	mov	r4, r1
 800f240:	461a      	mov	r2, r3
 800f242:	4b0c      	ldr	r3, [pc, #48]	; (800f274 <UART_SetConfig+0x384>)
 800f244:	fba3 1302 	umull	r1, r3, r3, r2
 800f248:	095b      	lsrs	r3, r3, #5
 800f24a:	2164      	movs	r1, #100	; 0x64
 800f24c:	fb01 f303 	mul.w	r3, r1, r3
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	3332      	adds	r3, #50	; 0x32
 800f256:	4a07      	ldr	r2, [pc, #28]	; (800f274 <UART_SetConfig+0x384>)
 800f258:	fba2 2303 	umull	r2, r3, r2, r3
 800f25c:	095b      	lsrs	r3, r3, #5
 800f25e:	f003 0207 	and.w	r2, r3, #7
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4442      	add	r2, r8
 800f268:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f26a:	e1b2      	b.n	800f5d2 <UART_SetConfig+0x6e2>
 800f26c:	40011000 	.word	0x40011000
 800f270:	40011400 	.word	0x40011400
 800f274:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4ad7      	ldr	r2, [pc, #860]	; (800f5dc <UART_SetConfig+0x6ec>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d005      	beq.n	800f28e <UART_SetConfig+0x39e>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4ad6      	ldr	r2, [pc, #856]	; (800f5e0 <UART_SetConfig+0x6f0>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	f040 80d1 	bne.w	800f430 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f28e:	f7fc fa41 	bl	800b714 <HAL_RCC_GetPCLK2Freq>
 800f292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	469a      	mov	sl, r3
 800f298:	f04f 0b00 	mov.w	fp, #0
 800f29c:	46d0      	mov	r8, sl
 800f29e:	46d9      	mov	r9, fp
 800f2a0:	eb18 0308 	adds.w	r3, r8, r8
 800f2a4:	eb49 0409 	adc.w	r4, r9, r9
 800f2a8:	4698      	mov	r8, r3
 800f2aa:	46a1      	mov	r9, r4
 800f2ac:	eb18 080a 	adds.w	r8, r8, sl
 800f2b0:	eb49 090b 	adc.w	r9, r9, fp
 800f2b4:	f04f 0100 	mov.w	r1, #0
 800f2b8:	f04f 0200 	mov.w	r2, #0
 800f2bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f2c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f2c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f2c8:	4688      	mov	r8, r1
 800f2ca:	4691      	mov	r9, r2
 800f2cc:	eb1a 0508 	adds.w	r5, sl, r8
 800f2d0:	eb4b 0609 	adc.w	r6, fp, r9
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f04f 0200 	mov.w	r2, #0
 800f2de:	f04f 0300 	mov.w	r3, #0
 800f2e2:	f04f 0400 	mov.w	r4, #0
 800f2e6:	0094      	lsls	r4, r2, #2
 800f2e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2ec:	008b      	lsls	r3, r1, #2
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	4623      	mov	r3, r4
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	f7f1 fcdf 	bl	8000cb8 <__aeabi_uldivmod>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	460c      	mov	r4, r1
 800f2fe:	461a      	mov	r2, r3
 800f300:	4bb8      	ldr	r3, [pc, #736]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f302:	fba3 2302 	umull	r2, r3, r3, r2
 800f306:	095b      	lsrs	r3, r3, #5
 800f308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	469b      	mov	fp, r3
 800f310:	f04f 0c00 	mov.w	ip, #0
 800f314:	46d9      	mov	r9, fp
 800f316:	46e2      	mov	sl, ip
 800f318:	eb19 0309 	adds.w	r3, r9, r9
 800f31c:	eb4a 040a 	adc.w	r4, sl, sl
 800f320:	4699      	mov	r9, r3
 800f322:	46a2      	mov	sl, r4
 800f324:	eb19 090b 	adds.w	r9, r9, fp
 800f328:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f32c:	f04f 0100 	mov.w	r1, #0
 800f330:	f04f 0200 	mov.w	r2, #0
 800f334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f33c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f340:	4689      	mov	r9, r1
 800f342:	4692      	mov	sl, r2
 800f344:	eb1b 0509 	adds.w	r5, fp, r9
 800f348:	eb4c 060a 	adc.w	r6, ip, sl
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	4619      	mov	r1, r3
 800f352:	f04f 0200 	mov.w	r2, #0
 800f356:	f04f 0300 	mov.w	r3, #0
 800f35a:	f04f 0400 	mov.w	r4, #0
 800f35e:	0094      	lsls	r4, r2, #2
 800f360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f364:	008b      	lsls	r3, r1, #2
 800f366:	461a      	mov	r2, r3
 800f368:	4623      	mov	r3, r4
 800f36a:	4628      	mov	r0, r5
 800f36c:	4631      	mov	r1, r6
 800f36e:	f7f1 fca3 	bl	8000cb8 <__aeabi_uldivmod>
 800f372:	4603      	mov	r3, r0
 800f374:	460c      	mov	r4, r1
 800f376:	461a      	mov	r2, r3
 800f378:	4b9a      	ldr	r3, [pc, #616]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f37a:	fba3 1302 	umull	r1, r3, r3, r2
 800f37e:	095b      	lsrs	r3, r3, #5
 800f380:	2164      	movs	r1, #100	; 0x64
 800f382:	fb01 f303 	mul.w	r3, r1, r3
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	011b      	lsls	r3, r3, #4
 800f38a:	3332      	adds	r3, #50	; 0x32
 800f38c:	4a95      	ldr	r2, [pc, #596]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f38e:	fba2 2303 	umull	r2, r3, r2, r3
 800f392:	095b      	lsrs	r3, r3, #5
 800f394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f398:	4498      	add	r8, r3
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	469b      	mov	fp, r3
 800f39e:	f04f 0c00 	mov.w	ip, #0
 800f3a2:	46d9      	mov	r9, fp
 800f3a4:	46e2      	mov	sl, ip
 800f3a6:	eb19 0309 	adds.w	r3, r9, r9
 800f3aa:	eb4a 040a 	adc.w	r4, sl, sl
 800f3ae:	4699      	mov	r9, r3
 800f3b0:	46a2      	mov	sl, r4
 800f3b2:	eb19 090b 	adds.w	r9, r9, fp
 800f3b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f3ba:	f04f 0100 	mov.w	r1, #0
 800f3be:	f04f 0200 	mov.w	r2, #0
 800f3c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f3ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f3ce:	4689      	mov	r9, r1
 800f3d0:	4692      	mov	sl, r2
 800f3d2:	eb1b 0509 	adds.w	r5, fp, r9
 800f3d6:	eb4c 060a 	adc.w	r6, ip, sl
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	f04f 0200 	mov.w	r2, #0
 800f3e4:	f04f 0300 	mov.w	r3, #0
 800f3e8:	f04f 0400 	mov.w	r4, #0
 800f3ec:	0094      	lsls	r4, r2, #2
 800f3ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3f2:	008b      	lsls	r3, r1, #2
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4623      	mov	r3, r4
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	f7f1 fc5c 	bl	8000cb8 <__aeabi_uldivmod>
 800f400:	4603      	mov	r3, r0
 800f402:	460c      	mov	r4, r1
 800f404:	461a      	mov	r2, r3
 800f406:	4b77      	ldr	r3, [pc, #476]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f408:	fba3 1302 	umull	r1, r3, r3, r2
 800f40c:	095b      	lsrs	r3, r3, #5
 800f40e:	2164      	movs	r1, #100	; 0x64
 800f410:	fb01 f303 	mul.w	r3, r1, r3
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	011b      	lsls	r3, r3, #4
 800f418:	3332      	adds	r3, #50	; 0x32
 800f41a:	4a72      	ldr	r2, [pc, #456]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f41c:	fba2 2303 	umull	r2, r3, r2, r3
 800f420:	095b      	lsrs	r3, r3, #5
 800f422:	f003 020f 	and.w	r2, r3, #15
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4442      	add	r2, r8
 800f42c:	609a      	str	r2, [r3, #8]
 800f42e:	e0d0      	b.n	800f5d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f430:	f7fc f95c 	bl	800b6ec <HAL_RCC_GetPCLK1Freq>
 800f434:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	469a      	mov	sl, r3
 800f43a:	f04f 0b00 	mov.w	fp, #0
 800f43e:	46d0      	mov	r8, sl
 800f440:	46d9      	mov	r9, fp
 800f442:	eb18 0308 	adds.w	r3, r8, r8
 800f446:	eb49 0409 	adc.w	r4, r9, r9
 800f44a:	4698      	mov	r8, r3
 800f44c:	46a1      	mov	r9, r4
 800f44e:	eb18 080a 	adds.w	r8, r8, sl
 800f452:	eb49 090b 	adc.w	r9, r9, fp
 800f456:	f04f 0100 	mov.w	r1, #0
 800f45a:	f04f 0200 	mov.w	r2, #0
 800f45e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f462:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f466:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f46a:	4688      	mov	r8, r1
 800f46c:	4691      	mov	r9, r2
 800f46e:	eb1a 0508 	adds.w	r5, sl, r8
 800f472:	eb4b 0609 	adc.w	r6, fp, r9
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	4619      	mov	r1, r3
 800f47c:	f04f 0200 	mov.w	r2, #0
 800f480:	f04f 0300 	mov.w	r3, #0
 800f484:	f04f 0400 	mov.w	r4, #0
 800f488:	0094      	lsls	r4, r2, #2
 800f48a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f48e:	008b      	lsls	r3, r1, #2
 800f490:	461a      	mov	r2, r3
 800f492:	4623      	mov	r3, r4
 800f494:	4628      	mov	r0, r5
 800f496:	4631      	mov	r1, r6
 800f498:	f7f1 fc0e 	bl	8000cb8 <__aeabi_uldivmod>
 800f49c:	4603      	mov	r3, r0
 800f49e:	460c      	mov	r4, r1
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4b50      	ldr	r3, [pc, #320]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f4a4:	fba3 2302 	umull	r2, r3, r3, r2
 800f4a8:	095b      	lsrs	r3, r3, #5
 800f4aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	469b      	mov	fp, r3
 800f4b2:	f04f 0c00 	mov.w	ip, #0
 800f4b6:	46d9      	mov	r9, fp
 800f4b8:	46e2      	mov	sl, ip
 800f4ba:	eb19 0309 	adds.w	r3, r9, r9
 800f4be:	eb4a 040a 	adc.w	r4, sl, sl
 800f4c2:	4699      	mov	r9, r3
 800f4c4:	46a2      	mov	sl, r4
 800f4c6:	eb19 090b 	adds.w	r9, r9, fp
 800f4ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f4ce:	f04f 0100 	mov.w	r1, #0
 800f4d2:	f04f 0200 	mov.w	r2, #0
 800f4d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f4da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f4de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f4e2:	4689      	mov	r9, r1
 800f4e4:	4692      	mov	sl, r2
 800f4e6:	eb1b 0509 	adds.w	r5, fp, r9
 800f4ea:	eb4c 060a 	adc.w	r6, ip, sl
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	f04f 0200 	mov.w	r2, #0
 800f4f8:	f04f 0300 	mov.w	r3, #0
 800f4fc:	f04f 0400 	mov.w	r4, #0
 800f500:	0094      	lsls	r4, r2, #2
 800f502:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f506:	008b      	lsls	r3, r1, #2
 800f508:	461a      	mov	r2, r3
 800f50a:	4623      	mov	r3, r4
 800f50c:	4628      	mov	r0, r5
 800f50e:	4631      	mov	r1, r6
 800f510:	f7f1 fbd2 	bl	8000cb8 <__aeabi_uldivmod>
 800f514:	4603      	mov	r3, r0
 800f516:	460c      	mov	r4, r1
 800f518:	461a      	mov	r2, r3
 800f51a:	4b32      	ldr	r3, [pc, #200]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f51c:	fba3 1302 	umull	r1, r3, r3, r2
 800f520:	095b      	lsrs	r3, r3, #5
 800f522:	2164      	movs	r1, #100	; 0x64
 800f524:	fb01 f303 	mul.w	r3, r1, r3
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	3332      	adds	r3, #50	; 0x32
 800f52e:	4a2d      	ldr	r2, [pc, #180]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f530:	fba2 2303 	umull	r2, r3, r2, r3
 800f534:	095b      	lsrs	r3, r3, #5
 800f536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f53a:	4498      	add	r8, r3
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	469b      	mov	fp, r3
 800f540:	f04f 0c00 	mov.w	ip, #0
 800f544:	46d9      	mov	r9, fp
 800f546:	46e2      	mov	sl, ip
 800f548:	eb19 0309 	adds.w	r3, r9, r9
 800f54c:	eb4a 040a 	adc.w	r4, sl, sl
 800f550:	4699      	mov	r9, r3
 800f552:	46a2      	mov	sl, r4
 800f554:	eb19 090b 	adds.w	r9, r9, fp
 800f558:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f55c:	f04f 0100 	mov.w	r1, #0
 800f560:	f04f 0200 	mov.w	r2, #0
 800f564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f56c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f570:	4689      	mov	r9, r1
 800f572:	4692      	mov	sl, r2
 800f574:	eb1b 0509 	adds.w	r5, fp, r9
 800f578:	eb4c 060a 	adc.w	r6, ip, sl
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	4619      	mov	r1, r3
 800f582:	f04f 0200 	mov.w	r2, #0
 800f586:	f04f 0300 	mov.w	r3, #0
 800f58a:	f04f 0400 	mov.w	r4, #0
 800f58e:	0094      	lsls	r4, r2, #2
 800f590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f594:	008b      	lsls	r3, r1, #2
 800f596:	461a      	mov	r2, r3
 800f598:	4623      	mov	r3, r4
 800f59a:	4628      	mov	r0, r5
 800f59c:	4631      	mov	r1, r6
 800f59e:	f7f1 fb8b 	bl	8000cb8 <__aeabi_uldivmod>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	4b0e      	ldr	r3, [pc, #56]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f5aa:	fba3 1302 	umull	r1, r3, r3, r2
 800f5ae:	095b      	lsrs	r3, r3, #5
 800f5b0:	2164      	movs	r1, #100	; 0x64
 800f5b2:	fb01 f303 	mul.w	r3, r1, r3
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	011b      	lsls	r3, r3, #4
 800f5ba:	3332      	adds	r3, #50	; 0x32
 800f5bc:	4a09      	ldr	r2, [pc, #36]	; (800f5e4 <UART_SetConfig+0x6f4>)
 800f5be:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c2:	095b      	lsrs	r3, r3, #5
 800f5c4:	f003 020f 	and.w	r2, r3, #15
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4442      	add	r2, r8
 800f5ce:	609a      	str	r2, [r3, #8]
}
 800f5d0:	e7ff      	b.n	800f5d2 <UART_SetConfig+0x6e2>
 800f5d2:	bf00      	nop
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5dc:	40011000 	.word	0x40011000
 800f5e0:	40011400 	.word	0x40011400
 800f5e4:	51eb851f 	.word	0x51eb851f

0800f5e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f5e8:	b084      	sub	sp, #16
 800f5ea:	b480      	push	{r7}
 800f5ec:	b085      	sub	sp, #20
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	f107 001c 	add.w	r0, r7, #28
 800f5f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f5fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f600:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f602:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f606:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f608:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f60a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f60e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f612:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f614:	68fa      	ldr	r2, [r7, #12]
 800f616:	4313      	orrs	r3, r2
 800f618:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	431a      	orrs	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	b004      	add	sp, #16
 800f63c:	4770      	bx	lr

0800f63e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b082      	sub	sp, #8
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2203      	movs	r2, #3
 800f686:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f688:	2002      	movs	r0, #2
 800f68a:	f7f9 fbdd 	bl	8008e48 <HAL_Delay>
  
  return HAL_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f003 0303 	and.w	r3, r3, #3
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f6d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f6de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f6ee:	f023 030f 	bic.w	r3, r3, #15
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	431a      	orrs	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f6fa:	2300      	movs	r3, #0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	b2db      	uxtb	r3, r3
}
 800f716:	4618      	mov	r0, r3
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f722:	b480      	push	{r7}
 800f724:	b085      	sub	sp, #20
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3314      	adds	r3, #20
 800f730:	461a      	mov	r2, r3
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	4413      	add	r3, r2
 800f736:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
}  
 800f73c:	4618      	mov	r0, r3
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f76e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f774:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f77a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f786:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	431a      	orrs	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f792:	2300      	movs	r3, #0

}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b088      	sub	sp, #32
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f7ae:	2310      	movs	r3, #16
 800f7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7b2:	2340      	movs	r3, #64	; 0x40
 800f7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7c0:	f107 0308 	add.w	r3, r7, #8
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff ff74 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7d0:	2110      	movs	r1, #16
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fa40 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7da:	69fb      	ldr	r3, [r7, #28]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3720      	adds	r7, #32
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f7f2:	2311      	movs	r3, #17
 800f7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7f6:	2340      	movs	r3, #64	; 0x40
 800f7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f804:	f107 0308 	add.w	r3, r7, #8
 800f808:	4619      	mov	r1, r3
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7ff ff52 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f810:	f241 3288 	movw	r2, #5000	; 0x1388
 800f814:	2111      	movs	r1, #17
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 fa1e 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f81e:	69fb      	ldr	r3, [r7, #28]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3720      	adds	r7, #32
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b088      	sub	sp, #32
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f836:	2312      	movs	r3, #18
 800f838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f83a:	2340      	movs	r3, #64	; 0x40
 800f83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f83e:	2300      	movs	r3, #0
 800f840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f846:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f848:	f107 0308 	add.w	r3, r7, #8
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff ff30 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f854:	f241 3288 	movw	r2, #5000	; 0x1388
 800f858:	2112      	movs	r1, #18
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f9fc 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f862:	69fb      	ldr	r3, [r7, #28]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3720      	adds	r7, #32
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f87a:	2318      	movs	r3, #24
 800f87c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f87e:	2340      	movs	r3, #64	; 0x40
 800f880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f882:	2300      	movs	r3, #0
 800f884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f88a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f88c:	f107 0308 	add.w	r3, r7, #8
 800f890:	4619      	mov	r1, r3
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7ff ff0e 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f898:	f241 3288 	movw	r2, #5000	; 0x1388
 800f89c:	2118      	movs	r1, #24
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 f9da 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3720      	adds	r7, #32
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f8be:	2319      	movs	r3, #25
 800f8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8c2:	2340      	movs	r3, #64	; 0x40
 800f8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8d0:	f107 0308 	add.w	r3, r7, #8
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7ff feec 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8e0:	2119      	movs	r1, #25
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 f9b8 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f8e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8ea:	69fb      	ldr	r3, [r7, #28]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3720      	adds	r7, #32
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b088      	sub	sp, #32
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f900:	230c      	movs	r3, #12
 800f902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f904:	2340      	movs	r3, #64	; 0x40
 800f906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f908:	2300      	movs	r3, #0
 800f90a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f910:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f912:	f107 0308 	add.w	r3, r7, #8
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff fecb 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f91e:	4a05      	ldr	r2, [pc, #20]	; (800f934 <SDMMC_CmdStopTransfer+0x40>)
 800f920:	210c      	movs	r1, #12
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f998 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f92a:	69fb      	ldr	r3, [r7, #28]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3720      	adds	r7, #32
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	05f5e100 	.word	0x05f5e100

0800f938 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b08a      	sub	sp, #40	; 0x28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f948:	2307      	movs	r3, #7
 800f94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f94c:	2340      	movs	r3, #64	; 0x40
 800f94e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f950:	2300      	movs	r3, #0
 800f952:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f958:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f95a:	f107 0310 	add.w	r3, r7, #16
 800f95e:	4619      	mov	r1, r3
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7ff fea7 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f966:	f241 3288 	movw	r2, #5000	; 0x1388
 800f96a:	2107      	movs	r1, #7
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f000 f973 	bl	800fc58 <SDMMC_GetCmdResp1>
 800f972:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f976:	4618      	mov	r0, r3
 800f978:	3728      	adds	r7, #40	; 0x28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b088      	sub	sp, #32
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f986:	2300      	movs	r3, #0
 800f988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f98a:	2300      	movs	r3, #0
 800f98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f98e:	2300      	movs	r3, #0
 800f990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f992:	2300      	movs	r3, #0
 800f994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f99a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f99c:	f107 0308 	add.w	r3, r7, #8
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff fe86 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f92d 	bl	800fc08 <SDMMC_GetCmdError>
 800f9ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9b0:	69fb      	ldr	r3, [r7, #28]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3720      	adds	r7, #32
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b088      	sub	sp, #32
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f9c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f9c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f9c8:	2308      	movs	r3, #8
 800f9ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9cc:	2340      	movs	r3, #64	; 0x40
 800f9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9da:	f107 0308 	add.w	r3, r7, #8
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff fe67 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fb16 	bl	8010018 <SDMMC_GetCmdResp7>
 800f9ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ee:	69fb      	ldr	r3, [r7, #28]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3720      	adds	r7, #32
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b088      	sub	sp, #32
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fa06:	2337      	movs	r3, #55	; 0x37
 800fa08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa0a:	2340      	movs	r3, #64	; 0x40
 800fa0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa18:	f107 0308 	add.w	r3, r7, #8
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7ff fe48 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800fa24:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa28:	2137      	movs	r1, #55	; 0x37
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f914 	bl	800fc58 <SDMMC_GetCmdResp1>
 800fa30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa32:	69fb      	ldr	r3, [r7, #28]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3720      	adds	r7, #32
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b088      	sub	sp, #32
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fa52:	2329      	movs	r3, #41	; 0x29
 800fa54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa56:	2340      	movs	r3, #64	; 0x40
 800fa58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa64:	f107 0308 	add.w	r3, r7, #8
 800fa68:	4619      	mov	r1, r3
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7ff fe22 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fa23 	bl	800febc <SDMMC_GetCmdResp3>
 800fa76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa78:	69fb      	ldr	r3, [r7, #28]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3720      	adds	r7, #32
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b088      	sub	sp, #32
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fa90:	2306      	movs	r3, #6
 800fa92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa94:	2340      	movs	r3, #64	; 0x40
 800fa96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800faa2:	f107 0308 	add.w	r3, r7, #8
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7ff fe03 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800faae:	f241 3288 	movw	r2, #5000	; 0x1388
 800fab2:	2106      	movs	r1, #6
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f000 f8cf 	bl	800fc58 <SDMMC_GetCmdResp1>
 800faba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fabc:	69fb      	ldr	r3, [r7, #28]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3720      	adds	r7, #32
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b088      	sub	sp, #32
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fad2:	2333      	movs	r3, #51	; 0x33
 800fad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fad6:	2340      	movs	r3, #64	; 0x40
 800fad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fada:	2300      	movs	r3, #0
 800fadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fae4:	f107 0308 	add.w	r3, r7, #8
 800fae8:	4619      	mov	r1, r3
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff fde2 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800faf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800faf4:	2133      	movs	r1, #51	; 0x33
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 f8ae 	bl	800fc58 <SDMMC_GetCmdResp1>
 800fafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fafe:	69fb      	ldr	r3, [r7, #28]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b088      	sub	sp, #32
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fb10:	2300      	movs	r3, #0
 800fb12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fb14:	2302      	movs	r3, #2
 800fb16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fb18:	23c0      	movs	r3, #192	; 0xc0
 800fb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb26:	f107 0308 	add.w	r3, r7, #8
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fdc1 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f97c 	bl	800fe30 <SDMMC_GetCmdResp2>
 800fb38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb3a:	69fb      	ldr	r3, [r7, #28]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fb52:	2309      	movs	r3, #9
 800fb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fb56:	23c0      	movs	r3, #192	; 0xc0
 800fb58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb64:	f107 0308 	add.w	r3, r7, #8
 800fb68:	4619      	mov	r1, r3
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7ff fda2 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 f95d 	bl	800fe30 <SDMMC_GetCmdResp2>
 800fb76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb78:	69fb      	ldr	r3, [r7, #28]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3720      	adds	r7, #32
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b088      	sub	sp, #32
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
 800fb8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fb90:	2303      	movs	r3, #3
 800fb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb94:	2340      	movs	r3, #64	; 0x40
 800fb96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fba2:	f107 0308 	add.w	r3, r7, #8
 800fba6:	4619      	mov	r1, r3
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff fd83 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	2103      	movs	r1, #3
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f9bc 	bl	800ff30 <SDMMC_GetCmdResp6>
 800fbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbba:	69fb      	ldr	r3, [r7, #28]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3720      	adds	r7, #32
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b088      	sub	sp, #32
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fbd2:	230d      	movs	r3, #13
 800fbd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fbd6:	2340      	movs	r3, #64	; 0x40
 800fbd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fbe4:	f107 0308 	add.w	r3, r7, #8
 800fbe8:	4619      	mov	r1, r3
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7ff fd62 	bl	800f6b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fbf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbf4:	210d      	movs	r1, #13
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 f82e 	bl	800fc58 <SDMMC_GetCmdResp1>
 800fbfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbfe:	69fb      	ldr	r3, [r7, #28]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3720      	adds	r7, #32
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fc08:	b490      	push	{r4, r7}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc10:	4b0f      	ldr	r3, [pc, #60]	; (800fc50 <SDMMC_GetCmdError+0x48>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a0f      	ldr	r2, [pc, #60]	; (800fc54 <SDMMC_GetCmdError+0x4c>)
 800fc16:	fba2 2303 	umull	r2, r3, r2, r3
 800fc1a:	0a5b      	lsrs	r3, r3, #9
 800fc1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fc24:	4623      	mov	r3, r4
 800fc26:	1e5c      	subs	r4, r3, #1
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d102      	bne.n	800fc32 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc30:	e009      	b.n	800fc46 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d0f2      	beq.n	800fc24 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	22c5      	movs	r2, #197	; 0xc5
 800fc42:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3708      	adds	r7, #8
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bc90      	pop	{r4, r7}
 800fc4e:	4770      	bx	lr
 800fc50:	20000000 	.word	0x20000000
 800fc54:	10624dd3 	.word	0x10624dd3

0800fc58 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fc58:	b590      	push	{r4, r7, lr}
 800fc5a:	b087      	sub	sp, #28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	460b      	mov	r3, r1
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fc66:	4b6f      	ldr	r3, [pc, #444]	; (800fe24 <SDMMC_GetCmdResp1+0x1cc>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a6f      	ldr	r2, [pc, #444]	; (800fe28 <SDMMC_GetCmdResp1+0x1d0>)
 800fc6c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc70:	0a5b      	lsrs	r3, r3, #9
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fc78:	4623      	mov	r3, r4
 800fc7a:	1e5c      	subs	r4, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d102      	bne.n	800fc86 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc84:	e0c9      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc8a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0f0      	beq.n	800fc78 <SDMMC_GetCmdResp1+0x20>
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1eb      	bne.n	800fc78 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d004      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2204      	movs	r2, #4
 800fcb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcb2:	2304      	movs	r3, #4
 800fcb4:	e0b1      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d004      	beq.n	800fccc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e0a6      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	22c5      	movs	r2, #197	; 0xc5
 800fcd0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7ff fd18 	bl	800f708 <SDIO_GetCommandResponse>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	461a      	mov	r2, r3
 800fcdc:	7afb      	ldrb	r3, [r7, #11]
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d001      	beq.n	800fce6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e099      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fce6:	2100      	movs	r1, #0
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7ff fd1a 	bl	800f722 <SDIO_GetResponse>
 800fcee:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fcf0:	693a      	ldr	r2, [r7, #16]
 800fcf2:	4b4e      	ldr	r3, [pc, #312]	; (800fe2c <SDMMC_GetCmdResp1+0x1d4>)
 800fcf4:	4013      	ands	r3, r2
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e08d      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	da02      	bge.n	800fd0a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fd04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fd08:	e087      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fd14:	2340      	movs	r3, #64	; 0x40
 800fd16:	e080      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fd22:	2380      	movs	r3, #128	; 0x80
 800fd24:	e079      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fd30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd34:	e071      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fd40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd44:	e069      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fd50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd54:	e061      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fd60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd64:	e059      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd74:	e051      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd84:	e049      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd94:	e041      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fda0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fda4:	e039      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fdb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fdb4:	e031      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fdc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fdc4:	e029      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fdd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fdd4:	e021      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fde0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fde4:	e019      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d002      	beq.n	800fdf6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fdf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fdf4:	e011      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fe00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fe04:	e009      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f003 0308 	and.w	r3, r3, #8
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fe10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fe14:	e001      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	371c      	adds	r7, #28
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd90      	pop	{r4, r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20000000 	.word	0x20000000
 800fe28:	10624dd3 	.word	0x10624dd3
 800fe2c:	fdffe008 	.word	0xfdffe008

0800fe30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fe30:	b490      	push	{r4, r7}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe38:	4b1e      	ldr	r3, [pc, #120]	; (800feb4 <SDMMC_GetCmdResp2+0x84>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a1e      	ldr	r2, [pc, #120]	; (800feb8 <SDMMC_GetCmdResp2+0x88>)
 800fe3e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe42:	0a5b      	lsrs	r3, r3, #9
 800fe44:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fe4c:	4623      	mov	r3, r4
 800fe4e:	1e5c      	subs	r4, r3, #1
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d102      	bne.n	800fe5a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe58:	e026      	b.n	800fea8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d0f0      	beq.n	800fe4c <SDMMC_GetCmdResp2+0x1c>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1eb      	bne.n	800fe4c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe78:	f003 0304 	and.w	r3, r3, #4
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d004      	beq.n	800fe8a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2204      	movs	r2, #4
 800fe84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe86:	2304      	movs	r3, #4
 800fe88:	e00e      	b.n	800fea8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe8e:	f003 0301 	and.w	r3, r3, #1
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d004      	beq.n	800fea0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e003      	b.n	800fea8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	22c5      	movs	r2, #197	; 0xc5
 800fea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bc90      	pop	{r4, r7}
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20000000 	.word	0x20000000
 800feb8:	10624dd3 	.word	0x10624dd3

0800febc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800febc:	b490      	push	{r4, r7}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fec4:	4b18      	ldr	r3, [pc, #96]	; (800ff28 <SDMMC_GetCmdResp3+0x6c>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a18      	ldr	r2, [pc, #96]	; (800ff2c <SDMMC_GetCmdResp3+0x70>)
 800feca:	fba2 2303 	umull	r2, r3, r2, r3
 800fece:	0a5b      	lsrs	r3, r3, #9
 800fed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fed4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fed8:	4623      	mov	r3, r4
 800feda:	1e5c      	subs	r4, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d102      	bne.n	800fee6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fee4:	e01b      	b.n	800ff1e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d0f0      	beq.n	800fed8 <SDMMC_GetCmdResp3+0x1c>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1eb      	bne.n	800fed8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff04:	f003 0304 	and.w	r3, r3, #4
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d004      	beq.n	800ff16 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2204      	movs	r2, #4
 800ff10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff12:	2304      	movs	r3, #4
 800ff14:	e003      	b.n	800ff1e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	22c5      	movs	r2, #197	; 0xc5
 800ff1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bc90      	pop	{r4, r7}
 800ff26:	4770      	bx	lr
 800ff28:	20000000 	.word	0x20000000
 800ff2c:	10624dd3 	.word	0x10624dd3

0800ff30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ff30:	b590      	push	{r4, r7, lr}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff3e:	4b34      	ldr	r3, [pc, #208]	; (8010010 <SDMMC_GetCmdResp6+0xe0>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4a34      	ldr	r2, [pc, #208]	; (8010014 <SDMMC_GetCmdResp6+0xe4>)
 800ff44:	fba2 2303 	umull	r2, r3, r2, r3
 800ff48:	0a5b      	lsrs	r3, r3, #9
 800ff4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff4e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ff52:	4623      	mov	r3, r4
 800ff54:	1e5c      	subs	r4, r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d102      	bne.n	800ff60 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff5e:	e052      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff64:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d0f0      	beq.n	800ff52 <SDMMC_GetCmdResp6+0x22>
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1eb      	bne.n	800ff52 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff7e:	f003 0304 	and.w	r3, r3, #4
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d004      	beq.n	800ff90 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2204      	movs	r2, #4
 800ff8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	e03a      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff94:	f003 0301 	and.w	r3, r3, #1
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d004      	beq.n	800ffa6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e02f      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f7ff fbae 	bl	800f708 <SDIO_GetCommandResponse>
 800ffac:	4603      	mov	r3, r0
 800ffae:	461a      	mov	r2, r3
 800ffb0:	7afb      	ldrb	r3, [r7, #11]
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d001      	beq.n	800ffba <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e025      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	22c5      	movs	r2, #197	; 0xc5
 800ffbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f7ff fbad 	bl	800f722 <SDIO_GetResponse>
 800ffc8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d106      	bne.n	800ffe2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	0c1b      	lsrs	r3, r3, #16
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	e011      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d002      	beq.n	800fff2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ffec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fff0:	e009      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010000:	e001      	b.n	8010006 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010006:	4618      	mov	r0, r3
 8010008:	371c      	adds	r7, #28
 801000a:	46bd      	mov	sp, r7
 801000c:	bd90      	pop	{r4, r7, pc}
 801000e:	bf00      	nop
 8010010:	20000000 	.word	0x20000000
 8010014:	10624dd3 	.word	0x10624dd3

08010018 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010018:	b490      	push	{r4, r7}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010020:	4b21      	ldr	r3, [pc, #132]	; (80100a8 <SDMMC_GetCmdResp7+0x90>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a21      	ldr	r2, [pc, #132]	; (80100ac <SDMMC_GetCmdResp7+0x94>)
 8010026:	fba2 2303 	umull	r2, r3, r2, r3
 801002a:	0a5b      	lsrs	r3, r3, #9
 801002c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010030:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010034:	4623      	mov	r3, r4
 8010036:	1e5c      	subs	r4, r3, #1
 8010038:	2b00      	cmp	r3, #0
 801003a:	d102      	bne.n	8010042 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801003c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010040:	e02c      	b.n	801009c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010046:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0f0      	beq.n	8010034 <SDMMC_GetCmdResp7+0x1c>
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1eb      	bne.n	8010034 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010060:	f003 0304 	and.w	r3, r3, #4
 8010064:	2b00      	cmp	r3, #0
 8010066:	d004      	beq.n	8010072 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2204      	movs	r2, #4
 801006c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801006e:	2304      	movs	r3, #4
 8010070:	e014      	b.n	801009c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d004      	beq.n	8010088 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2201      	movs	r2, #1
 8010082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010084:	2301      	movs	r3, #1
 8010086:	e009      	b.n	801009c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801008c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010090:	2b00      	cmp	r3, #0
 8010092:	d002      	beq.n	801009a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2240      	movs	r2, #64	; 0x40
 8010098:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801009a:	2300      	movs	r3, #0
  
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bc90      	pop	{r4, r7}
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	20000000 	.word	0x20000000
 80100ac:	10624dd3 	.word	0x10624dd3

080100b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80100b4:	4904      	ldr	r1, [pc, #16]	; (80100c8 <MX_FATFS_Init+0x18>)
 80100b6:	4805      	ldr	r0, [pc, #20]	; (80100cc <MX_FATFS_Init+0x1c>)
 80100b8:	f003 fb9c 	bl	80137f4 <FATFS_LinkDriver>
 80100bc:	4603      	mov	r3, r0
 80100be:	461a      	mov	r2, r3
 80100c0:	4b03      	ldr	r3, [pc, #12]	; (80100d0 <MX_FATFS_Init+0x20>)
 80100c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80100c4:	bf00      	nop
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	2003ee00 	.word	0x2003ee00
 80100cc:	080192c4 	.word	0x080192c4
 80100d0:	2003edfc 	.word	0x2003edfc

080100d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80100de:	f000 f896 	bl	801020e <BSP_SD_IsDetected>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d001      	beq.n	80100ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	e012      	b.n	8010112 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80100ec:	480b      	ldr	r0, [pc, #44]	; (801011c <BSP_SD_Init+0x48>)
 80100ee:	f7fb ffa5 	bl	800c03c <HAL_SD_Init>
 80100f2:	4603      	mov	r3, r0
 80100f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d109      	bne.n	8010110 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80100fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010100:	4806      	ldr	r0, [pc, #24]	; (801011c <BSP_SD_Init+0x48>)
 8010102:	f7fc fd4f 	bl	800cba4 <HAL_SD_ConfigWideBusOperation>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801010c:	2301      	movs	r3, #1
 801010e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010110:	79fb      	ldrb	r3, [r7, #7]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2003ebfc 	.word	0x2003ebfc

08010120 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	68f9      	ldr	r1, [r7, #12]
 8010136:	4806      	ldr	r0, [pc, #24]	; (8010150 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010138:	f7fc f810 	bl	800c15c <HAL_SD_ReadBlocks_DMA>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010142:	2301      	movs	r3, #1
 8010144:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010146:	7dfb      	ldrb	r3, [r7, #23]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3718      	adds	r7, #24
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2003ebfc 	.word	0x2003ebfc

08010154 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010160:	2300      	movs	r3, #0
 8010162:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68ba      	ldr	r2, [r7, #8]
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	4806      	ldr	r0, [pc, #24]	; (8010184 <BSP_SD_WriteBlocks_DMA+0x30>)
 801016c:	f7fc f8de 	bl	800c32c <HAL_SD_WriteBlocks_DMA>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801017a:	7dfb      	ldrb	r3, [r7, #23]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2003ebfc 	.word	0x2003ebfc

08010188 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801018c:	4805      	ldr	r0, [pc, #20]	; (80101a4 <BSP_SD_GetCardState+0x1c>)
 801018e:	f7fc fd85 	bl	800cc9c <HAL_SD_GetCardState>
 8010192:	4603      	mov	r3, r0
 8010194:	2b04      	cmp	r3, #4
 8010196:	bf14      	ite	ne
 8010198:	2301      	movne	r3, #1
 801019a:	2300      	moveq	r3, #0
 801019c:	b2db      	uxtb	r3, r3
}
 801019e:	4618      	mov	r0, r3
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	2003ebfc 	.word	0x2003ebfc

080101a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80101b0:	6879      	ldr	r1, [r7, #4]
 80101b2:	4803      	ldr	r0, [pc, #12]	; (80101c0 <BSP_SD_GetCardInfo+0x18>)
 80101b4:	f7fc fcca 	bl	800cb4c <HAL_SD_GetCardInfo>
}
 80101b8:	bf00      	nop
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2003ebfc 	.word	0x2003ebfc

080101c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80101cc:	f000 f818 	bl	8010200 <BSP_SD_AbortCallback>
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80101e0:	f000 f9a8 	bl	8010534 <BSP_SD_WriteCpltCallback>
}
 80101e4:	bf00      	nop
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80101f4:	f000 f9aa 	bl	801054c <BSP_SD_ReadCpltCallback>
}
 80101f8:	bf00      	nop
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010200:	b480      	push	{r7}
 8010202:	af00      	add	r7, sp, #0

}
 8010204:	bf00      	nop
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b082      	sub	sp, #8
 8010212:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010214:	2301      	movs	r3, #1
 8010216:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010218:	f000 f80c 	bl	8010234 <BSP_PlatformIsDetected>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d101      	bne.n	8010226 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010222:	2300      	movs	r3, #0
 8010224:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010226:	79fb      	ldrb	r3, [r7, #7]
 8010228:	b2db      	uxtb	r3, r3
}
 801022a:	4618      	mov	r0, r3
 801022c:	3708      	adds	r7, #8
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801023a:	2301      	movs	r3, #1
 801023c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801023e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010242:	4806      	ldr	r0, [pc, #24]	; (801025c <BSP_PlatformIsDetected+0x28>)
 8010244:	f7fa f87e 	bl	800a344 <HAL_GPIO_ReadPin>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d001      	beq.n	8010252 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801024e:	2300      	movs	r3, #0
 8010250:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010252:	79fb      	ldrb	r3, [r7, #7]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	40020000 	.word	0x40020000

08010260 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010268:	f7f8 fde2 	bl	8008e30 <HAL_GetTick>
 801026c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801026e:	e006      	b.n	801027e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010270:	f7ff ff8a 	bl	8010188 <BSP_SD_GetCardState>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801027a:	2300      	movs	r3, #0
 801027c:	e009      	b.n	8010292 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801027e:	f7f8 fdd7 	bl	8008e30 <HAL_GetTick>
 8010282:	4602      	mov	r2, r0
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	1ad3      	subs	r3, r2, r3
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	429a      	cmp	r2, r3
 801028c:	d8f0      	bhi.n	8010270 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801028e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80102a6:	4b0b      	ldr	r3, [pc, #44]	; (80102d4 <SD_CheckStatus+0x38>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80102ac:	f7ff ff6c 	bl	8010188 <BSP_SD_GetCardState>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d107      	bne.n	80102c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80102b6:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <SD_CheckStatus+0x38>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	f023 0301 	bic.w	r3, r3, #1
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <SD_CheckStatus+0x38>)
 80102c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80102c6:	4b03      	ldr	r3, [pc, #12]	; (80102d4 <SD_CheckStatus+0x38>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	b2db      	uxtb	r3, r3
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	20000009 	.word	0x20000009

080102d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80102e2:	f7ff fef7 	bl	80100d4 <BSP_SD_Init>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d107      	bne.n	80102fc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80102ec:	79fb      	ldrb	r3, [r7, #7]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7ff ffd4 	bl	801029c <SD_CheckStatus>
 80102f4:	4603      	mov	r3, r0
 80102f6:	461a      	mov	r2, r3
 80102f8:	4b04      	ldr	r3, [pc, #16]	; (801030c <SD_initialize+0x34>)
 80102fa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80102fc:	4b03      	ldr	r3, [pc, #12]	; (801030c <SD_initialize+0x34>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	b2db      	uxtb	r3, r3
}
 8010302:	4618      	mov	r0, r3
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20000009 	.word	0x20000009

08010310 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff ffbd 	bl	801029c <SD_CheckStatus>
 8010322:	4603      	mov	r3, r0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	60b9      	str	r1, [r7, #8]
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	603b      	str	r3, [r7, #0]
 8010338:	4603      	mov	r3, r0
 801033a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801033c:	2301      	movs	r3, #1
 801033e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010340:	f247 5030 	movw	r0, #30000	; 0x7530
 8010344:	f7ff ff8c 	bl	8010260 <SD_CheckStatusWithTimeout>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	da01      	bge.n	8010352 <SD_read+0x26>
  {
    return res;
 801034e:	7dfb      	ldrb	r3, [r7, #23]
 8010350:	e03b      	b.n	80103ca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	6879      	ldr	r1, [r7, #4]
 8010356:	68b8      	ldr	r0, [r7, #8]
 8010358:	f7ff fee2 	bl	8010120 <BSP_SD_ReadBlocks_DMA>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d132      	bne.n	80103c8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010362:	4b1c      	ldr	r3, [pc, #112]	; (80103d4 <SD_read+0xa8>)
 8010364:	2200      	movs	r2, #0
 8010366:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010368:	f7f8 fd62 	bl	8008e30 <HAL_GetTick>
 801036c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801036e:	bf00      	nop
 8010370:	4b18      	ldr	r3, [pc, #96]	; (80103d4 <SD_read+0xa8>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d108      	bne.n	801038a <SD_read+0x5e>
 8010378:	f7f8 fd5a 	bl	8008e30 <HAL_GetTick>
 801037c:	4602      	mov	r2, r0
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	f247 522f 	movw	r2, #29999	; 0x752f
 8010386:	4293      	cmp	r3, r2
 8010388:	d9f2      	bls.n	8010370 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801038a:	4b12      	ldr	r3, [pc, #72]	; (80103d4 <SD_read+0xa8>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d102      	bne.n	8010398 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010392:	2301      	movs	r3, #1
 8010394:	75fb      	strb	r3, [r7, #23]
 8010396:	e017      	b.n	80103c8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010398:	4b0e      	ldr	r3, [pc, #56]	; (80103d4 <SD_read+0xa8>)
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801039e:	f7f8 fd47 	bl	8008e30 <HAL_GetTick>
 80103a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103a4:	e007      	b.n	80103b6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103a6:	f7ff feef 	bl	8010188 <BSP_SD_GetCardState>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d102      	bne.n	80103b6 <SD_read+0x8a>
          {
            res = RES_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80103b4:	e008      	b.n	80103c8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103b6:	f7f8 fd3b 	bl	8008e30 <HAL_GetTick>
 80103ba:	4602      	mov	r2, r0
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d9ee      	bls.n	80103a6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80103c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3718      	adds	r7, #24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	2003c498 	.word	0x2003c498

080103d8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60b9      	str	r1, [r7, #8]
 80103e0:	607a      	str	r2, [r7, #4]
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	4603      	mov	r3, r0
 80103e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80103ec:	4b24      	ldr	r3, [pc, #144]	; (8010480 <SD_write+0xa8>)
 80103ee:	2200      	movs	r2, #0
 80103f0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80103f2:	f247 5030 	movw	r0, #30000	; 0x7530
 80103f6:	f7ff ff33 	bl	8010260 <SD_CheckStatusWithTimeout>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	da01      	bge.n	8010404 <SD_write+0x2c>
  {
    return res;
 8010400:	7dfb      	ldrb	r3, [r7, #23]
 8010402:	e038      	b.n	8010476 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010404:	683a      	ldr	r2, [r7, #0]
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	68b8      	ldr	r0, [r7, #8]
 801040a:	f7ff fea3 	bl	8010154 <BSP_SD_WriteBlocks_DMA>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d12f      	bne.n	8010474 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010414:	f7f8 fd0c 	bl	8008e30 <HAL_GetTick>
 8010418:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801041a:	bf00      	nop
 801041c:	4b18      	ldr	r3, [pc, #96]	; (8010480 <SD_write+0xa8>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d108      	bne.n	8010436 <SD_write+0x5e>
 8010424:	f7f8 fd04 	bl	8008e30 <HAL_GetTick>
 8010428:	4602      	mov	r2, r0
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010432:	4293      	cmp	r3, r2
 8010434:	d9f2      	bls.n	801041c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010436:	4b12      	ldr	r3, [pc, #72]	; (8010480 <SD_write+0xa8>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d102      	bne.n	8010444 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	75fb      	strb	r3, [r7, #23]
 8010442:	e017      	b.n	8010474 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010444:	4b0e      	ldr	r3, [pc, #56]	; (8010480 <SD_write+0xa8>)
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801044a:	f7f8 fcf1 	bl	8008e30 <HAL_GetTick>
 801044e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010450:	e007      	b.n	8010462 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010452:	f7ff fe99 	bl	8010188 <BSP_SD_GetCardState>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d102      	bne.n	8010462 <SD_write+0x8a>
          {
            res = RES_OK;
 801045c:	2300      	movs	r3, #0
 801045e:	75fb      	strb	r3, [r7, #23]
            break;
 8010460:	e008      	b.n	8010474 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010462:	f7f8 fce5 	bl	8008e30 <HAL_GetTick>
 8010466:	4602      	mov	r2, r0
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010470:	4293      	cmp	r3, r2
 8010472:	d9ee      	bls.n	8010452 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010474:	7dfb      	ldrb	r3, [r7, #23]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3718      	adds	r7, #24
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	2003c494 	.word	0x2003c494

08010484 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b08c      	sub	sp, #48	; 0x30
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	603a      	str	r2, [r7, #0]
 801048e:	71fb      	strb	r3, [r7, #7]
 8010490:	460b      	mov	r3, r1
 8010492:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010494:	2301      	movs	r3, #1
 8010496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801049a:	4b25      	ldr	r3, [pc, #148]	; (8010530 <SD_ioctl+0xac>)
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <SD_ioctl+0x28>
 80104a8:	2303      	movs	r3, #3
 80104aa:	e03c      	b.n	8010526 <SD_ioctl+0xa2>

  switch (cmd)
 80104ac:	79bb      	ldrb	r3, [r7, #6]
 80104ae:	2b03      	cmp	r3, #3
 80104b0:	d834      	bhi.n	801051c <SD_ioctl+0x98>
 80104b2:	a201      	add	r2, pc, #4	; (adr r2, 80104b8 <SD_ioctl+0x34>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	080104c9 	.word	0x080104c9
 80104bc:	080104d1 	.word	0x080104d1
 80104c0:	080104e9 	.word	0x080104e9
 80104c4:	08010503 	.word	0x08010503
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80104ce:	e028      	b.n	8010522 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80104d0:	f107 030c 	add.w	r3, r7, #12
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7ff fe67 	bl	80101a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80104da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80104e6:	e01c      	b.n	8010522 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80104e8:	f107 030c 	add.w	r3, r7, #12
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7ff fe5b 	bl	80101a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80104fa:	2300      	movs	r3, #0
 80104fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010500:	e00f      	b.n	8010522 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010502:	f107 030c 	add.w	r3, r7, #12
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff fe4e 	bl	80101a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050e:	0a5a      	lsrs	r2, r3, #9
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801051a:	e002      	b.n	8010522 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801051c:	2304      	movs	r3, #4
 801051e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010526:	4618      	mov	r0, r3
 8010528:	3730      	adds	r7, #48	; 0x30
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	20000009 	.word	0x20000009

08010534 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010534:	b480      	push	{r7}
 8010536:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010538:	4b03      	ldr	r3, [pc, #12]	; (8010548 <BSP_SD_WriteCpltCallback+0x14>)
 801053a:	2201      	movs	r2, #1
 801053c:	601a      	str	r2, [r3, #0]
}
 801053e:	bf00      	nop
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	2003c494 	.word	0x2003c494

0801054c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010550:	4b03      	ldr	r3, [pc, #12]	; (8010560 <BSP_SD_ReadCpltCallback+0x14>)
 8010552:	2201      	movs	r2, #1
 8010554:	601a      	str	r2, [r3, #0]
}
 8010556:	bf00      	nop
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	2003c498 	.word	0x2003c498

08010564 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	4603      	mov	r3, r0
 801056c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801056e:	79fb      	ldrb	r3, [r7, #7]
 8010570:	4a08      	ldr	r2, [pc, #32]	; (8010594 <disk_status+0x30>)
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	79fa      	ldrb	r2, [r7, #7]
 801057c:	4905      	ldr	r1, [pc, #20]	; (8010594 <disk_status+0x30>)
 801057e:	440a      	add	r2, r1
 8010580:	7a12      	ldrb	r2, [r2, #8]
 8010582:	4610      	mov	r0, r2
 8010584:	4798      	blx	r3
 8010586:	4603      	mov	r3, r0
 8010588:	73fb      	strb	r3, [r7, #15]
  return stat;
 801058a:	7bfb      	ldrb	r3, [r7, #15]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	2003c4c4 	.word	0x2003c4c4

08010598 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	4603      	mov	r3, r0
 80105a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80105a6:	79fb      	ldrb	r3, [r7, #7]
 80105a8:	4a0d      	ldr	r2, [pc, #52]	; (80105e0 <disk_initialize+0x48>)
 80105aa:	5cd3      	ldrb	r3, [r2, r3]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d111      	bne.n	80105d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80105b0:	79fb      	ldrb	r3, [r7, #7]
 80105b2:	4a0b      	ldr	r2, [pc, #44]	; (80105e0 <disk_initialize+0x48>)
 80105b4:	2101      	movs	r1, #1
 80105b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	4a09      	ldr	r2, [pc, #36]	; (80105e0 <disk_initialize+0x48>)
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	4413      	add	r3, r2
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	79fa      	ldrb	r2, [r7, #7]
 80105c6:	4906      	ldr	r1, [pc, #24]	; (80105e0 <disk_initialize+0x48>)
 80105c8:	440a      	add	r2, r1
 80105ca:	7a12      	ldrb	r2, [r2, #8]
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
 80105d0:	4603      	mov	r3, r0
 80105d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	2003c4c4 	.word	0x2003c4c4

080105e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80105e4:	b590      	push	{r4, r7, lr}
 80105e6:	b087      	sub	sp, #28
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60b9      	str	r1, [r7, #8]
 80105ec:	607a      	str	r2, [r7, #4]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	4603      	mov	r3, r0
 80105f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	4a0a      	ldr	r2, [pc, #40]	; (8010620 <disk_read+0x3c>)
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4413      	add	r3, r2
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	689c      	ldr	r4, [r3, #8]
 8010600:	7bfb      	ldrb	r3, [r7, #15]
 8010602:	4a07      	ldr	r2, [pc, #28]	; (8010620 <disk_read+0x3c>)
 8010604:	4413      	add	r3, r2
 8010606:	7a18      	ldrb	r0, [r3, #8]
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	47a0      	blx	r4
 8010610:	4603      	mov	r3, r0
 8010612:	75fb      	strb	r3, [r7, #23]
  return res;
 8010614:	7dfb      	ldrb	r3, [r7, #23]
}
 8010616:	4618      	mov	r0, r3
 8010618:	371c      	adds	r7, #28
 801061a:	46bd      	mov	sp, r7
 801061c:	bd90      	pop	{r4, r7, pc}
 801061e:	bf00      	nop
 8010620:	2003c4c4 	.word	0x2003c4c4

08010624 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010624:	b590      	push	{r4, r7, lr}
 8010626:	b087      	sub	sp, #28
 8010628:	af00      	add	r7, sp, #0
 801062a:	60b9      	str	r1, [r7, #8]
 801062c:	607a      	str	r2, [r7, #4]
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	4603      	mov	r3, r0
 8010632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010634:	7bfb      	ldrb	r3, [r7, #15]
 8010636:	4a0a      	ldr	r2, [pc, #40]	; (8010660 <disk_write+0x3c>)
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4413      	add	r3, r2
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	68dc      	ldr	r4, [r3, #12]
 8010640:	7bfb      	ldrb	r3, [r7, #15]
 8010642:	4a07      	ldr	r2, [pc, #28]	; (8010660 <disk_write+0x3c>)
 8010644:	4413      	add	r3, r2
 8010646:	7a18      	ldrb	r0, [r3, #8]
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	68b9      	ldr	r1, [r7, #8]
 801064e:	47a0      	blx	r4
 8010650:	4603      	mov	r3, r0
 8010652:	75fb      	strb	r3, [r7, #23]
  return res;
 8010654:	7dfb      	ldrb	r3, [r7, #23]
}
 8010656:	4618      	mov	r0, r3
 8010658:	371c      	adds	r7, #28
 801065a:	46bd      	mov	sp, r7
 801065c:	bd90      	pop	{r4, r7, pc}
 801065e:	bf00      	nop
 8010660:	2003c4c4 	.word	0x2003c4c4

08010664 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	603a      	str	r2, [r7, #0]
 801066e:	71fb      	strb	r3, [r7, #7]
 8010670:	460b      	mov	r3, r1
 8010672:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	4a09      	ldr	r2, [pc, #36]	; (801069c <disk_ioctl+0x38>)
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	691b      	ldr	r3, [r3, #16]
 8010680:	79fa      	ldrb	r2, [r7, #7]
 8010682:	4906      	ldr	r1, [pc, #24]	; (801069c <disk_ioctl+0x38>)
 8010684:	440a      	add	r2, r1
 8010686:	7a10      	ldrb	r0, [r2, #8]
 8010688:	79b9      	ldrb	r1, [r7, #6]
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	4798      	blx	r3
 801068e:	4603      	mov	r3, r0
 8010690:	73fb      	strb	r3, [r7, #15]
  return res;
 8010692:	7bfb      	ldrb	r3, [r7, #15]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2003c4c4 	.word	0x2003c4c4

080106a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	3301      	adds	r3, #1
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80106b0:	89fb      	ldrh	r3, [r7, #14]
 80106b2:	021b      	lsls	r3, r3, #8
 80106b4:	b21a      	sxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	b21b      	sxth	r3, r3
 80106bc:	4313      	orrs	r3, r2
 80106be:	b21b      	sxth	r3, r3
 80106c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80106c2:	89fb      	ldrh	r3, [r7, #14]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3303      	adds	r3, #3
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	021b      	lsls	r3, r3, #8
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	3202      	adds	r2, #2
 80106e8:	7812      	ldrb	r2, [r2, #0]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	021b      	lsls	r3, r3, #8
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	3201      	adds	r2, #1
 80106f6:	7812      	ldrb	r2, [r2, #0]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	021b      	lsls	r3, r3, #8
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	7812      	ldrb	r2, [r2, #0]
 8010704:	4313      	orrs	r3, r2
 8010706:	60fb      	str	r3, [r7, #12]
	return rv;
 8010708:	68fb      	ldr	r3, [r7, #12]
}
 801070a:	4618      	mov	r0, r3
 801070c:	3714      	adds	r7, #20
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr

08010716 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010716:	b480      	push	{r7}
 8010718:	b083      	sub	sp, #12
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
 801071e:	460b      	mov	r3, r1
 8010720:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	887a      	ldrh	r2, [r7, #2]
 801072a:	b2d2      	uxtb	r2, r2
 801072c:	701a      	strb	r2, [r3, #0]
 801072e:	887b      	ldrh	r3, [r7, #2]
 8010730:	0a1b      	lsrs	r3, r3, #8
 8010732:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	1c5a      	adds	r2, r3, #1
 8010738:	607a      	str	r2, [r7, #4]
 801073a:	887a      	ldrh	r2, [r7, #2]
 801073c:	b2d2      	uxtb	r2, r2
 801073e:	701a      	strb	r2, [r3, #0]
}
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	607a      	str	r2, [r7, #4]
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	b2d2      	uxtb	r2, r2
 8010760:	701a      	strb	r2, [r3, #0]
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	0a1b      	lsrs	r3, r3, #8
 8010766:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	1c5a      	adds	r2, r3, #1
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	b2d2      	uxtb	r2, r2
 8010772:	701a      	strb	r2, [r3, #0]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	0a1b      	lsrs	r3, r3, #8
 8010778:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	1c5a      	adds	r2, r3, #1
 801077e:	607a      	str	r2, [r7, #4]
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	b2d2      	uxtb	r2, r2
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	0a1b      	lsrs	r3, r3, #8
 801078a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	607a      	str	r2, [r7, #4]
 8010792:	683a      	ldr	r2, [r7, #0]
 8010794:	b2d2      	uxtb	r2, r2
 8010796:	701a      	strb	r2, [r3, #0]
}
 8010798:	bf00      	nop
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80107a4:	b480      	push	{r7}
 80107a6:	b087      	sub	sp, #28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00d      	beq.n	80107da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	1c53      	adds	r3, r2, #1
 80107c2:	613b      	str	r3, [r7, #16]
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	1c59      	adds	r1, r3, #1
 80107c8:	6179      	str	r1, [r7, #20]
 80107ca:	7812      	ldrb	r2, [r2, #0]
 80107cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	3b01      	subs	r3, #1
 80107d2:	607b      	str	r3, [r7, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1f1      	bne.n	80107be <mem_cpy+0x1a>
	}
}
 80107da:	bf00      	nop
 80107dc:	371c      	adds	r7, #28
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80107e6:	b480      	push	{r7}
 80107e8:	b087      	sub	sp, #28
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	60f8      	str	r0, [r7, #12]
 80107ee:	60b9      	str	r1, [r7, #8]
 80107f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	1c5a      	adds	r2, r3, #1
 80107fa:	617a      	str	r2, [r7, #20]
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	b2d2      	uxtb	r2, r2
 8010800:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	3b01      	subs	r3, #1
 8010806:	607b      	str	r3, [r7, #4]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1f3      	bne.n	80107f6 <mem_set+0x10>
}
 801080e:	bf00      	nop
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801081a:	b480      	push	{r7}
 801081c:	b089      	sub	sp, #36	; 0x24
 801081e:	af00      	add	r7, sp, #0
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	60b9      	str	r1, [r7, #8]
 8010824:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	61fb      	str	r3, [r7, #28]
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	61fa      	str	r2, [r7, #28]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	4619      	mov	r1, r3
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	1c5a      	adds	r2, r3, #1
 8010840:	61ba      	str	r2, [r7, #24]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	1acb      	subs	r3, r1, r3
 8010846:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	3b01      	subs	r3, #1
 801084c:	607b      	str	r3, [r7, #4]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <mem_cmp+0x40>
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0eb      	beq.n	8010832 <mem_cmp+0x18>

	return r;
 801085a:	697b      	ldr	r3, [r7, #20]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3724      	adds	r7, #36	; 0x24
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010872:	e002      	b.n	801087a <chk_chr+0x12>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3301      	adds	r3, #1
 8010878:	607b      	str	r3, [r7, #4]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d005      	beq.n	801088e <chk_chr+0x26>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	461a      	mov	r2, r3
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	4293      	cmp	r3, r2
 801088c:	d1f2      	bne.n	8010874 <chk_chr+0xc>
	return *str;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	781b      	ldrb	r3, [r3, #0]
}
 8010892:	4618      	mov	r0, r3
 8010894:	370c      	adds	r7, #12
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
	...

080108a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80108aa:	2300      	movs	r3, #0
 80108ac:	60bb      	str	r3, [r7, #8]
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	60fb      	str	r3, [r7, #12]
 80108b2:	e029      	b.n	8010908 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80108b4:	4a27      	ldr	r2, [pc, #156]	; (8010954 <chk_lock+0xb4>)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	011b      	lsls	r3, r3, #4
 80108ba:	4413      	add	r3, r2
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d01d      	beq.n	80108fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80108c2:	4a24      	ldr	r2, [pc, #144]	; (8010954 <chk_lock+0xb4>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	011b      	lsls	r3, r3, #4
 80108c8:	4413      	add	r3, r2
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d116      	bne.n	8010902 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80108d4:	4a1f      	ldr	r2, [pc, #124]	; (8010954 <chk_lock+0xb4>)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	011b      	lsls	r3, r3, #4
 80108da:	4413      	add	r3, r2
 80108dc:	3304      	adds	r3, #4
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d10c      	bne.n	8010902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80108e8:	4a1a      	ldr	r2, [pc, #104]	; (8010954 <chk_lock+0xb4>)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	011b      	lsls	r3, r3, #4
 80108ee:	4413      	add	r3, r2
 80108f0:	3308      	adds	r3, #8
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d102      	bne.n	8010902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80108fc:	e007      	b.n	801090e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80108fe:	2301      	movs	r3, #1
 8010900:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	3301      	adds	r3, #1
 8010906:	60fb      	str	r3, [r7, #12]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d9d2      	bls.n	80108b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d109      	bne.n	8010928 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d102      	bne.n	8010920 <chk_lock+0x80>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d101      	bne.n	8010924 <chk_lock+0x84>
 8010920:	2300      	movs	r3, #0
 8010922:	e010      	b.n	8010946 <chk_lock+0xa6>
 8010924:	2312      	movs	r3, #18
 8010926:	e00e      	b.n	8010946 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d108      	bne.n	8010940 <chk_lock+0xa0>
 801092e:	4a09      	ldr	r2, [pc, #36]	; (8010954 <chk_lock+0xb4>)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	011b      	lsls	r3, r3, #4
 8010934:	4413      	add	r3, r2
 8010936:	330c      	adds	r3, #12
 8010938:	881b      	ldrh	r3, [r3, #0]
 801093a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801093e:	d101      	bne.n	8010944 <chk_lock+0xa4>
 8010940:	2310      	movs	r3, #16
 8010942:	e000      	b.n	8010946 <chk_lock+0xa6>
 8010944:	2300      	movs	r3, #0
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	2003c4a4 	.word	0x2003c4a4

08010958 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801095e:	2300      	movs	r3, #0
 8010960:	607b      	str	r3, [r7, #4]
 8010962:	e002      	b.n	801096a <enq_lock+0x12>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	3301      	adds	r3, #1
 8010968:	607b      	str	r3, [r7, #4]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b01      	cmp	r3, #1
 801096e:	d806      	bhi.n	801097e <enq_lock+0x26>
 8010970:	4a09      	ldr	r2, [pc, #36]	; (8010998 <enq_lock+0x40>)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	011b      	lsls	r3, r3, #4
 8010976:	4413      	add	r3, r2
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1f2      	bne.n	8010964 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b02      	cmp	r3, #2
 8010982:	bf14      	ite	ne
 8010984:	2301      	movne	r3, #1
 8010986:	2300      	moveq	r3, #0
 8010988:	b2db      	uxtb	r3, r3
}
 801098a:	4618      	mov	r0, r3
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	2003c4a4 	.word	0x2003c4a4

0801099c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80109a6:	2300      	movs	r3, #0
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	e01f      	b.n	80109ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80109ac:	4a41      	ldr	r2, [pc, #260]	; (8010ab4 <inc_lock+0x118>)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	011b      	lsls	r3, r3, #4
 80109b2:	4413      	add	r3, r2
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d113      	bne.n	80109e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80109be:	4a3d      	ldr	r2, [pc, #244]	; (8010ab4 <inc_lock+0x118>)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	011b      	lsls	r3, r3, #4
 80109c4:	4413      	add	r3, r2
 80109c6:	3304      	adds	r3, #4
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d109      	bne.n	80109e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80109d2:	4a38      	ldr	r2, [pc, #224]	; (8010ab4 <inc_lock+0x118>)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	011b      	lsls	r3, r3, #4
 80109d8:	4413      	add	r3, r2
 80109da:	3308      	adds	r3, #8
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d006      	beq.n	80109f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	3301      	adds	r3, #1
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d9dc      	bls.n	80109ac <inc_lock+0x10>
 80109f2:	e000      	b.n	80109f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80109f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d132      	bne.n	8010a62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80109fc:	2300      	movs	r3, #0
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	e002      	b.n	8010a08 <inc_lock+0x6c>
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	3301      	adds	r3, #1
 8010a06:	60fb      	str	r3, [r7, #12]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d806      	bhi.n	8010a1c <inc_lock+0x80>
 8010a0e:	4a29      	ldr	r2, [pc, #164]	; (8010ab4 <inc_lock+0x118>)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	011b      	lsls	r3, r3, #4
 8010a14:	4413      	add	r3, r2
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1f2      	bne.n	8010a02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d101      	bne.n	8010a26 <inc_lock+0x8a>
 8010a22:	2300      	movs	r3, #0
 8010a24:	e040      	b.n	8010aa8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	4922      	ldr	r1, [pc, #136]	; (8010ab4 <inc_lock+0x118>)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	011b      	lsls	r3, r3, #4
 8010a30:	440b      	add	r3, r1
 8010a32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	689a      	ldr	r2, [r3, #8]
 8010a38:	491e      	ldr	r1, [pc, #120]	; (8010ab4 <inc_lock+0x118>)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	011b      	lsls	r3, r3, #4
 8010a3e:	440b      	add	r3, r1
 8010a40:	3304      	adds	r3, #4
 8010a42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	695a      	ldr	r2, [r3, #20]
 8010a48:	491a      	ldr	r1, [pc, #104]	; (8010ab4 <inc_lock+0x118>)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	440b      	add	r3, r1
 8010a50:	3308      	adds	r3, #8
 8010a52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010a54:	4a17      	ldr	r2, [pc, #92]	; (8010ab4 <inc_lock+0x118>)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	011b      	lsls	r3, r3, #4
 8010a5a:	4413      	add	r3, r2
 8010a5c:	330c      	adds	r3, #12
 8010a5e:	2200      	movs	r2, #0
 8010a60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d009      	beq.n	8010a7c <inc_lock+0xe0>
 8010a68:	4a12      	ldr	r2, [pc, #72]	; (8010ab4 <inc_lock+0x118>)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	011b      	lsls	r3, r3, #4
 8010a6e:	4413      	add	r3, r2
 8010a70:	330c      	adds	r3, #12
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <inc_lock+0xe0>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	e015      	b.n	8010aa8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d108      	bne.n	8010a94 <inc_lock+0xf8>
 8010a82:	4a0c      	ldr	r2, [pc, #48]	; (8010ab4 <inc_lock+0x118>)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	4413      	add	r3, r2
 8010a8a:	330c      	adds	r3, #12
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	e001      	b.n	8010a98 <inc_lock+0xfc>
 8010a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a98:	4906      	ldr	r1, [pc, #24]	; (8010ab4 <inc_lock+0x118>)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	011b      	lsls	r3, r3, #4
 8010a9e:	440b      	add	r3, r1
 8010aa0:	330c      	adds	r3, #12
 8010aa2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	3301      	adds	r3, #1
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3714      	adds	r7, #20
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr
 8010ab4:	2003c4a4 	.word	0x2003c4a4

08010ab8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	607b      	str	r3, [r7, #4]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d825      	bhi.n	8010b18 <dec_lock+0x60>
		n = Files[i].ctr;
 8010acc:	4a17      	ldr	r2, [pc, #92]	; (8010b2c <dec_lock+0x74>)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	011b      	lsls	r3, r3, #4
 8010ad2:	4413      	add	r3, r2
 8010ad4:	330c      	adds	r3, #12
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010ada:	89fb      	ldrh	r3, [r7, #14]
 8010adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ae0:	d101      	bne.n	8010ae6 <dec_lock+0x2e>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010ae6:	89fb      	ldrh	r3, [r7, #14]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d002      	beq.n	8010af2 <dec_lock+0x3a>
 8010aec:	89fb      	ldrh	r3, [r7, #14]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010af2:	4a0e      	ldr	r2, [pc, #56]	; (8010b2c <dec_lock+0x74>)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	011b      	lsls	r3, r3, #4
 8010af8:	4413      	add	r3, r2
 8010afa:	330c      	adds	r3, #12
 8010afc:	89fa      	ldrh	r2, [r7, #14]
 8010afe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010b00:	89fb      	ldrh	r3, [r7, #14]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d105      	bne.n	8010b12 <dec_lock+0x5a>
 8010b06:	4a09      	ldr	r2, [pc, #36]	; (8010b2c <dec_lock+0x74>)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	011b      	lsls	r3, r3, #4
 8010b0c:	4413      	add	r3, r2
 8010b0e:	2200      	movs	r2, #0
 8010b10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	737b      	strb	r3, [r7, #13]
 8010b16:	e001      	b.n	8010b1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010b18:	2302      	movs	r3, #2
 8010b1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010b1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3714      	adds	r7, #20
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	2003c4a4 	.word	0x2003c4a4

08010b30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60fb      	str	r3, [r7, #12]
 8010b3c:	e010      	b.n	8010b60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010b3e:	4a0d      	ldr	r2, [pc, #52]	; (8010b74 <clear_lock+0x44>)
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	011b      	lsls	r3, r3, #4
 8010b44:	4413      	add	r3, r2
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d105      	bne.n	8010b5a <clear_lock+0x2a>
 8010b4e:	4a09      	ldr	r2, [pc, #36]	; (8010b74 <clear_lock+0x44>)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	011b      	lsls	r3, r3, #4
 8010b54:	4413      	add	r3, r2
 8010b56:	2200      	movs	r2, #0
 8010b58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d9eb      	bls.n	8010b3e <clear_lock+0xe>
	}
}
 8010b66:	bf00      	nop
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop
 8010b74:	2003c4a4 	.word	0x2003c4a4

08010b78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	78db      	ldrb	r3, [r3, #3]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d034      	beq.n	8010bf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7858      	ldrb	r0, [r3, #1]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	697a      	ldr	r2, [r7, #20]
 8010ba0:	f7ff fd40 	bl	8010624 <disk_write>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d002      	beq.n	8010bb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010baa:	2301      	movs	r3, #1
 8010bac:	73fb      	strb	r3, [r7, #15]
 8010bae:	e022      	b.n	8010bf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	1ad2      	subs	r2, r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6a1b      	ldr	r3, [r3, #32]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d217      	bcs.n	8010bf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	789b      	ldrb	r3, [r3, #2]
 8010bca:	613b      	str	r3, [r7, #16]
 8010bcc:	e010      	b.n	8010bf0 <sync_window+0x78>
					wsect += fs->fsize;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	697a      	ldr	r2, [r7, #20]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	7858      	ldrb	r0, [r3, #1]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010be2:	2301      	movs	r3, #1
 8010be4:	697a      	ldr	r2, [r7, #20]
 8010be6:	f7ff fd1d 	bl	8010624 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	613b      	str	r3, [r7, #16]
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d8eb      	bhi.n	8010bce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3718      	adds	r7, #24
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d01b      	beq.n	8010c50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ffad 	bl	8010b78 <sync_window>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010c22:	7bfb      	ldrb	r3, [r7, #15]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d113      	bne.n	8010c50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7858      	ldrb	r0, [r3, #1]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c32:	2301      	movs	r3, #1
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	f7ff fcd5 	bl	80105e4 <disk_read>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d004      	beq.n	8010c4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295
 8010c44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
	...

08010c5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7ff ff87 	bl	8010b78 <sync_window>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010c6e:	7bfb      	ldrb	r3, [r7, #15]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d159      	bne.n	8010d28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	d149      	bne.n	8010d10 <sync_fs+0xb4>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	791b      	ldrb	r3, [r3, #4]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d145      	bne.n	8010d10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	899b      	ldrh	r3, [r3, #12]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	2100      	movs	r1, #0
 8010c92:	f7ff fda8 	bl	80107e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	3338      	adds	r3, #56	; 0x38
 8010c9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7ff fd37 	bl	8010716 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	3338      	adds	r3, #56	; 0x38
 8010cac:	4921      	ldr	r1, [pc, #132]	; (8010d34 <sync_fs+0xd8>)
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff fd4c 	bl	801074c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3338      	adds	r3, #56	; 0x38
 8010cb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010cbc:	491e      	ldr	r1, [pc, #120]	; (8010d38 <sync_fs+0xdc>)
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7ff fd44 	bl	801074c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3338      	adds	r3, #56	; 0x38
 8010cc8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	f7ff fd3a 	bl	801074c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	3338      	adds	r3, #56	; 0x38
 8010cdc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	691b      	ldr	r3, [r3, #16]
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7ff fd30 	bl	801074c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf0:	1c5a      	adds	r2, r3, #1
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	7858      	ldrb	r0, [r3, #1]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d04:	2301      	movs	r3, #1
 8010d06:	f7ff fc8d 	bl	8010624 <disk_write>
			fs->fsi_flag = 0;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	785b      	ldrb	r3, [r3, #1]
 8010d14:	2200      	movs	r2, #0
 8010d16:	2100      	movs	r1, #0
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fca3 	bl	8010664 <disk_ioctl>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d001      	beq.n	8010d28 <sync_fs+0xcc>
 8010d24:	2301      	movs	r3, #1
 8010d26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	41615252 	.word	0x41615252
 8010d38:	61417272 	.word	0x61417272

08010d3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	3b02      	subs	r3, #2
 8010d4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	69db      	ldr	r3, [r3, #28]
 8010d50:	3b02      	subs	r3, #2
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d301      	bcc.n	8010d5c <clust2sect+0x20>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e008      	b.n	8010d6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	895b      	ldrh	r3, [r3, #10]
 8010d60:	461a      	mov	r2, r3
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	fb03 f202 	mul.w	r2, r3, r2
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6c:	4413      	add	r3, r2
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	370c      	adds	r7, #12
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr

08010d7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b086      	sub	sp, #24
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d904      	bls.n	8010d9a <get_fat+0x20>
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	683a      	ldr	r2, [r7, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d302      	bcc.n	8010da0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	617b      	str	r3, [r7, #20]
 8010d9e:	e0b7      	b.n	8010f10 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010da0:	f04f 33ff 	mov.w	r3, #4294967295
 8010da4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d05a      	beq.n	8010e64 <get_fat+0xea>
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d07d      	beq.n	8010eae <get_fat+0x134>
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	f040 80a2 	bne.w	8010efc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	60fb      	str	r3, [r7, #12]
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	085b      	lsrs	r3, r3, #1
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	899b      	ldrh	r3, [r3, #12]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dd6:	4413      	add	r3, r2
 8010dd8:	4619      	mov	r1, r3
 8010dda:	6938      	ldr	r0, [r7, #16]
 8010ddc:	f7ff ff10 	bl	8010c00 <move_window>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f040 808d 	bne.w	8010f02 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	60fa      	str	r2, [r7, #12]
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	8992      	ldrh	r2, [r2, #12]
 8010df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010df6:	fb02 f201 	mul.w	r2, r2, r1
 8010dfa:	1a9b      	subs	r3, r3, r2
 8010dfc:	693a      	ldr	r2, [r7, #16]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010e04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	899b      	ldrh	r3, [r3, #12]
 8010e0e:	4619      	mov	r1, r3
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e16:	4413      	add	r3, r2
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6938      	ldr	r0, [r7, #16]
 8010e1c:	f7ff fef0 	bl	8010c00 <move_window>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d16f      	bne.n	8010f06 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	899b      	ldrh	r3, [r3, #12]
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e32:	fb02 f201 	mul.w	r2, r2, r1
 8010e36:	1a9b      	subs	r3, r3, r2
 8010e38:	693a      	ldr	r2, [r7, #16]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010e40:	021b      	lsls	r3, r3, #8
 8010e42:	461a      	mov	r2, r3
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	f003 0301 	and.w	r3, r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <get_fat+0xe0>
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	091b      	lsrs	r3, r3, #4
 8010e58:	e002      	b.n	8010e60 <get_fat+0xe6>
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e60:	617b      	str	r3, [r7, #20]
			break;
 8010e62:	e055      	b.n	8010f10 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	899b      	ldrh	r3, [r3, #12]
 8010e6c:	085b      	lsrs	r3, r3, #1
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	4619      	mov	r1, r3
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e78:	4413      	add	r3, r2
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6938      	ldr	r0, [r7, #16]
 8010e7e:	f7ff febf 	bl	8010c00 <move_window>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d140      	bne.n	8010f0a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	8992      	ldrh	r2, [r2, #12]
 8010e96:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e9a:	fb02 f200 	mul.w	r2, r2, r0
 8010e9e:	1a9b      	subs	r3, r3, r2
 8010ea0:	440b      	add	r3, r1
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff fbfc 	bl	80106a0 <ld_word>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	617b      	str	r3, [r7, #20]
			break;
 8010eac:	e030      	b.n	8010f10 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	899b      	ldrh	r3, [r3, #12]
 8010eb6:	089b      	lsrs	r3, r3, #2
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	4619      	mov	r1, r3
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ec2:	4413      	add	r3, r2
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6938      	ldr	r0, [r7, #16]
 8010ec8:	f7ff fe9a 	bl	8010c00 <move_window>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d11d      	bne.n	8010f0e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	8992      	ldrh	r2, [r2, #12]
 8010ee0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ee4:	fb02 f200 	mul.w	r2, r2, r0
 8010ee8:	1a9b      	subs	r3, r3, r2
 8010eea:	440b      	add	r3, r1
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff fbef 	bl	80106d0 <ld_dword>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010ef8:	617b      	str	r3, [r7, #20]
			break;
 8010efa:	e009      	b.n	8010f10 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010efc:	2301      	movs	r3, #1
 8010efe:	617b      	str	r3, [r7, #20]
 8010f00:	e006      	b.n	8010f10 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f02:	bf00      	nop
 8010f04:	e004      	b.n	8010f10 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f06:	bf00      	nop
 8010f08:	e002      	b.n	8010f10 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010f0a:	bf00      	nop
 8010f0c:	e000      	b.n	8010f10 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f0e:	bf00      	nop
		}
	}

	return val;
 8010f10:	697b      	ldr	r3, [r7, #20]
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3718      	adds	r7, #24
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010f1a:	b590      	push	{r4, r7, lr}
 8010f1c:	b089      	sub	sp, #36	; 0x24
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	60f8      	str	r0, [r7, #12]
 8010f22:	60b9      	str	r1, [r7, #8]
 8010f24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010f26:	2302      	movs	r3, #2
 8010f28:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	f240 8106 	bls.w	801113e <put_fat+0x224>
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	69db      	ldr	r3, [r3, #28]
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	f080 8100 	bcs.w	801113e <put_fat+0x224>
		switch (fs->fs_type) {
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b02      	cmp	r3, #2
 8010f44:	f000 8088 	beq.w	8011058 <put_fat+0x13e>
 8010f48:	2b03      	cmp	r3, #3
 8010f4a:	f000 80b0 	beq.w	80110ae <put_fat+0x194>
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	f040 80f5 	bne.w	801113e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	61bb      	str	r3, [r7, #24]
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	085b      	lsrs	r3, r3, #1
 8010f5c:	69ba      	ldr	r2, [r7, #24]
 8010f5e:	4413      	add	r3, r2
 8010f60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	899b      	ldrh	r3, [r3, #12]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f72:	4413      	add	r3, r2
 8010f74:	4619      	mov	r1, r3
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f7ff fe42 	bl	8010c00 <move_window>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f80:	7ffb      	ldrb	r3, [r7, #31]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f040 80d4 	bne.w	8011130 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	1c5a      	adds	r2, r3, #1
 8010f92:	61ba      	str	r2, [r7, #24]
 8010f94:	68fa      	ldr	r2, [r7, #12]
 8010f96:	8992      	ldrh	r2, [r2, #12]
 8010f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f9c:	fb02 f200 	mul.w	r2, r2, r0
 8010fa0:	1a9b      	subs	r3, r3, r2
 8010fa2:	440b      	add	r3, r1
 8010fa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00d      	beq.n	8010fcc <put_fat+0xb2>
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	b25b      	sxtb	r3, r3
 8010fb6:	f003 030f 	and.w	r3, r3, #15
 8010fba:	b25a      	sxtb	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	011b      	lsls	r3, r3, #4
 8010fc2:	b25b      	sxtb	r3, r3
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	b25b      	sxtb	r3, r3
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	e001      	b.n	8010fd0 <put_fat+0xb6>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	697a      	ldr	r2, [r7, #20]
 8010fd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	899b      	ldrh	r3, [r3, #12]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fea:	4413      	add	r3, r2
 8010fec:	4619      	mov	r1, r3
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	f7ff fe06 	bl	8010c00 <move_window>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ff8:	7ffb      	ldrb	r3, [r7, #31]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f040 809a 	bne.w	8011134 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	899b      	ldrh	r3, [r3, #12]
 801100a:	461a      	mov	r2, r3
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011012:	fb02 f200 	mul.w	r2, r2, r0
 8011016:	1a9b      	subs	r3, r3, r2
 8011018:	440b      	add	r3, r1
 801101a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	f003 0301 	and.w	r3, r3, #1
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <put_fat+0x114>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	091b      	lsrs	r3, r3, #4
 801102a:	b2db      	uxtb	r3, r3
 801102c:	e00e      	b.n	801104c <put_fat+0x132>
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	b25b      	sxtb	r3, r3
 8011034:	f023 030f 	bic.w	r3, r3, #15
 8011038:	b25a      	sxtb	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	0a1b      	lsrs	r3, r3, #8
 801103e:	b25b      	sxtb	r3, r3
 8011040:	f003 030f 	and.w	r3, r3, #15
 8011044:	b25b      	sxtb	r3, r3
 8011046:	4313      	orrs	r3, r2
 8011048:	b25b      	sxtb	r3, r3
 801104a:	b2db      	uxtb	r3, r3
 801104c:	697a      	ldr	r2, [r7, #20]
 801104e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2201      	movs	r2, #1
 8011054:	70da      	strb	r2, [r3, #3]
			break;
 8011056:	e072      	b.n	801113e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	899b      	ldrh	r3, [r3, #12]
 8011060:	085b      	lsrs	r3, r3, #1
 8011062:	b29b      	uxth	r3, r3
 8011064:	4619      	mov	r1, r3
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	fbb3 f3f1 	udiv	r3, r3, r1
 801106c:	4413      	add	r3, r2
 801106e:	4619      	mov	r1, r3
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f7ff fdc5 	bl	8010c00 <move_window>
 8011076:	4603      	mov	r3, r0
 8011078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801107a:	7ffb      	ldrb	r3, [r7, #31]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d15b      	bne.n	8011138 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	005b      	lsls	r3, r3, #1
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	8992      	ldrh	r2, [r2, #12]
 801108e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011092:	fb02 f200 	mul.w	r2, r2, r0
 8011096:	1a9b      	subs	r3, r3, r2
 8011098:	440b      	add	r3, r1
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	b292      	uxth	r2, r2
 801109e:	4611      	mov	r1, r2
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fb38 	bl	8010716 <st_word>
			fs->wflag = 1;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2201      	movs	r2, #1
 80110aa:	70da      	strb	r2, [r3, #3]
			break;
 80110ac:	e047      	b.n	801113e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	899b      	ldrh	r3, [r3, #12]
 80110b6:	089b      	lsrs	r3, r3, #2
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	4619      	mov	r1, r3
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	fbb3 f3f1 	udiv	r3, r3, r1
 80110c2:	4413      	add	r3, r2
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff fd9a 	bl	8010c00 <move_window>
 80110cc:	4603      	mov	r3, r0
 80110ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110d0:	7ffb      	ldrb	r3, [r7, #31]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d132      	bne.n	801113c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	8992      	ldrh	r2, [r2, #12]
 80110ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80110ee:	fb02 f200 	mul.w	r2, r2, r0
 80110f2:	1a9b      	subs	r3, r3, r2
 80110f4:	440b      	add	r3, r1
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff faea 	bl	80106d0 <ld_dword>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011102:	4323      	orrs	r3, r4
 8011104:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	8992      	ldrh	r2, [r2, #12]
 8011114:	fbb3 f0f2 	udiv	r0, r3, r2
 8011118:	fb02 f200 	mul.w	r2, r2, r0
 801111c:	1a9b      	subs	r3, r3, r2
 801111e:	440b      	add	r3, r1
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fb12 	bl	801074c <st_dword>
			fs->wflag = 1;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2201      	movs	r2, #1
 801112c:	70da      	strb	r2, [r3, #3]
			break;
 801112e:	e006      	b.n	801113e <put_fat+0x224>
			if (res != FR_OK) break;
 8011130:	bf00      	nop
 8011132:	e004      	b.n	801113e <put_fat+0x224>
			if (res != FR_OK) break;
 8011134:	bf00      	nop
 8011136:	e002      	b.n	801113e <put_fat+0x224>
			if (res != FR_OK) break;
 8011138:	bf00      	nop
 801113a:	e000      	b.n	801113e <put_fat+0x224>
			if (res != FR_OK) break;
 801113c:	bf00      	nop
		}
	}
	return res;
 801113e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3724      	adds	r7, #36	; 0x24
 8011144:	46bd      	mov	sp, r7
 8011146:	bd90      	pop	{r4, r7, pc}

08011148 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d904      	bls.n	801116e <remove_chain+0x26>
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	69db      	ldr	r3, [r3, #28]
 8011168:	68ba      	ldr	r2, [r7, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	d301      	bcc.n	8011172 <remove_chain+0x2a>
 801116e:	2302      	movs	r3, #2
 8011170:	e04b      	b.n	801120a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00c      	beq.n	8011192 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011178:	f04f 32ff 	mov.w	r2, #4294967295
 801117c:	6879      	ldr	r1, [r7, #4]
 801117e:	69b8      	ldr	r0, [r7, #24]
 8011180:	f7ff fecb 	bl	8010f1a <put_fat>
 8011184:	4603      	mov	r3, r0
 8011186:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011188:	7ffb      	ldrb	r3, [r7, #31]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d001      	beq.n	8011192 <remove_chain+0x4a>
 801118e:	7ffb      	ldrb	r3, [r7, #31]
 8011190:	e03b      	b.n	801120a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f7ff fdf0 	bl	8010d7a <get_fat>
 801119a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d031      	beq.n	8011206 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d101      	bne.n	80111ac <remove_chain+0x64>
 80111a8:	2302      	movs	r3, #2
 80111aa:	e02e      	b.n	801120a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b2:	d101      	bne.n	80111b8 <remove_chain+0x70>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e028      	b.n	801120a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80111b8:	2200      	movs	r2, #0
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	69b8      	ldr	r0, [r7, #24]
 80111be:	f7ff feac 	bl	8010f1a <put_fat>
 80111c2:	4603      	mov	r3, r0
 80111c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80111c6:	7ffb      	ldrb	r3, [r7, #31]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <remove_chain+0x88>
 80111cc:	7ffb      	ldrb	r3, [r7, #31]
 80111ce:	e01c      	b.n	801120a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	695a      	ldr	r2, [r3, #20]
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	69db      	ldr	r3, [r3, #28]
 80111d8:	3b02      	subs	r3, #2
 80111da:	429a      	cmp	r2, r3
 80111dc:	d20b      	bcs.n	80111f6 <remove_chain+0xae>
			fs->free_clst++;
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	791b      	ldrb	r3, [r3, #4]
 80111ec:	f043 0301 	orr.w	r3, r3, #1
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	69db      	ldr	r3, [r3, #28]
 80111fe:	68ba      	ldr	r2, [r7, #8]
 8011200:	429a      	cmp	r2, r3
 8011202:	d3c6      	bcc.n	8011192 <remove_chain+0x4a>
 8011204:	e000      	b.n	8011208 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011206:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3720      	adds	r7, #32
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b088      	sub	sp, #32
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
 801121a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d10d      	bne.n	8011244 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d004      	beq.n	801123e <create_chain+0x2c>
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	69db      	ldr	r3, [r3, #28]
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	429a      	cmp	r2, r3
 801123c:	d31b      	bcc.n	8011276 <create_chain+0x64>
 801123e:	2301      	movs	r3, #1
 8011240:	61bb      	str	r3, [r7, #24]
 8011242:	e018      	b.n	8011276 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011244:	6839      	ldr	r1, [r7, #0]
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f7ff fd97 	bl	8010d7a <get_fat>
 801124c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b01      	cmp	r3, #1
 8011252:	d801      	bhi.n	8011258 <create_chain+0x46>
 8011254:	2301      	movs	r3, #1
 8011256:	e070      	b.n	801133a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125e:	d101      	bne.n	8011264 <create_chain+0x52>
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	e06a      	b.n	801133a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	429a      	cmp	r2, r3
 801126c:	d201      	bcs.n	8011272 <create_chain+0x60>
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	e063      	b.n	801133a <create_chain+0x128>
		scl = clst;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	3301      	adds	r3, #1
 801127e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	69fa      	ldr	r2, [r7, #28]
 8011286:	429a      	cmp	r2, r3
 8011288:	d307      	bcc.n	801129a <create_chain+0x88>
				ncl = 2;
 801128a:	2302      	movs	r3, #2
 801128c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801128e:	69fa      	ldr	r2, [r7, #28]
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	429a      	cmp	r2, r3
 8011294:	d901      	bls.n	801129a <create_chain+0x88>
 8011296:	2300      	movs	r3, #0
 8011298:	e04f      	b.n	801133a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801129a:	69f9      	ldr	r1, [r7, #28]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff fd6c 	bl	8010d7a <get_fat>
 80112a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00e      	beq.n	80112c8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d003      	beq.n	80112b8 <create_chain+0xa6>
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b6:	d101      	bne.n	80112bc <create_chain+0xaa>
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	e03e      	b.n	801133a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80112bc:	69fa      	ldr	r2, [r7, #28]
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d1da      	bne.n	801127a <create_chain+0x68>
 80112c4:	2300      	movs	r3, #0
 80112c6:	e038      	b.n	801133a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80112c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80112ca:	f04f 32ff 	mov.w	r2, #4294967295
 80112ce:	69f9      	ldr	r1, [r7, #28]
 80112d0:	6938      	ldr	r0, [r7, #16]
 80112d2:	f7ff fe22 	bl	8010f1a <put_fat>
 80112d6:	4603      	mov	r3, r0
 80112d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80112da:	7dfb      	ldrb	r3, [r7, #23]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d109      	bne.n	80112f4 <create_chain+0xe2>
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d006      	beq.n	80112f4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80112e6:	69fa      	ldr	r2, [r7, #28]
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	6938      	ldr	r0, [r7, #16]
 80112ec:	f7ff fe15 	bl	8010f1a <put_fat>
 80112f0:	4603      	mov	r3, r0
 80112f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d116      	bne.n	8011328 <create_chain+0x116>
		fs->last_clst = ncl;
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	69fa      	ldr	r2, [r7, #28]
 80112fe:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	695a      	ldr	r2, [r3, #20]
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	69db      	ldr	r3, [r3, #28]
 8011308:	3b02      	subs	r3, #2
 801130a:	429a      	cmp	r2, r3
 801130c:	d804      	bhi.n	8011318 <create_chain+0x106>
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	695b      	ldr	r3, [r3, #20]
 8011312:	1e5a      	subs	r2, r3, #1
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	791b      	ldrb	r3, [r3, #4]
 801131c:	f043 0301 	orr.w	r3, r3, #1
 8011320:	b2da      	uxtb	r2, r3
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	711a      	strb	r2, [r3, #4]
 8011326:	e007      	b.n	8011338 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011328:	7dfb      	ldrb	r3, [r7, #23]
 801132a:	2b01      	cmp	r3, #1
 801132c:	d102      	bne.n	8011334 <create_chain+0x122>
 801132e:	f04f 33ff 	mov.w	r3, #4294967295
 8011332:	e000      	b.n	8011336 <create_chain+0x124>
 8011334:	2301      	movs	r3, #1
 8011336:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011338:	69fb      	ldr	r3, [r7, #28]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3720      	adds	r7, #32
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011342:	b480      	push	{r7}
 8011344:	b087      	sub	sp, #28
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011356:	3304      	adds	r3, #4
 8011358:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	899b      	ldrh	r3, [r3, #12]
 801135e:	461a      	mov	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	fbb3 f3f2 	udiv	r3, r3, r2
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	8952      	ldrh	r2, [r2, #10]
 801136a:	fbb3 f3f2 	udiv	r3, r3, r2
 801136e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	1d1a      	adds	r2, r3, #4
 8011374:	613a      	str	r2, [r7, #16]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d101      	bne.n	8011384 <clmt_clust+0x42>
 8011380:	2300      	movs	r3, #0
 8011382:	e010      	b.n	80113a6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	429a      	cmp	r2, r3
 801138a:	d307      	bcc.n	801139c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801138c:	697a      	ldr	r2, [r7, #20]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	3304      	adds	r3, #4
 8011398:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801139a:	e7e9      	b.n	8011370 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801139c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	4413      	add	r3, r2
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	371c      	adds	r7, #28
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr

080113b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b086      	sub	sp, #24
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80113c8:	d204      	bcs.n	80113d4 <dir_sdi+0x22>
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	f003 031f 	and.w	r3, r3, #31
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80113d4:	2302      	movs	r3, #2
 80113d6:	e071      	b.n	80114bc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d106      	bne.n	80113f8 <dir_sdi+0x46>
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	d902      	bls.n	80113f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10c      	bne.n	8011418 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	095b      	lsrs	r3, r3, #5
 8011402:	693a      	ldr	r2, [r7, #16]
 8011404:	8912      	ldrh	r2, [r2, #8]
 8011406:	4293      	cmp	r3, r2
 8011408:	d301      	bcc.n	801140e <dir_sdi+0x5c>
 801140a:	2302      	movs	r3, #2
 801140c:	e056      	b.n	80114bc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	61da      	str	r2, [r3, #28]
 8011416:	e02d      	b.n	8011474 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	895b      	ldrh	r3, [r3, #10]
 801141c:	461a      	mov	r2, r3
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	899b      	ldrh	r3, [r3, #12]
 8011422:	fb03 f302 	mul.w	r3, r3, r2
 8011426:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011428:	e019      	b.n	801145e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6979      	ldr	r1, [r7, #20]
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fca3 	bl	8010d7a <get_fat>
 8011434:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801143c:	d101      	bne.n	8011442 <dir_sdi+0x90>
 801143e:	2301      	movs	r3, #1
 8011440:	e03c      	b.n	80114bc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d904      	bls.n	8011452 <dir_sdi+0xa0>
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	69db      	ldr	r3, [r3, #28]
 801144c:	697a      	ldr	r2, [r7, #20]
 801144e:	429a      	cmp	r2, r3
 8011450:	d301      	bcc.n	8011456 <dir_sdi+0xa4>
 8011452:	2302      	movs	r3, #2
 8011454:	e032      	b.n	80114bc <dir_sdi+0x10a>
			ofs -= csz;
 8011456:	683a      	ldr	r2, [r7, #0]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	429a      	cmp	r2, r3
 8011464:	d2e1      	bcs.n	801142a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011466:	6979      	ldr	r1, [r7, #20]
 8011468:	6938      	ldr	r0, [r7, #16]
 801146a:	f7ff fc67 	bl	8010d3c <clust2sect>
 801146e:	4602      	mov	r2, r0
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	697a      	ldr	r2, [r7, #20]
 8011478:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	69db      	ldr	r3, [r3, #28]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <dir_sdi+0xd4>
 8011482:	2302      	movs	r3, #2
 8011484:	e01a      	b.n	80114bc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	69da      	ldr	r2, [r3, #28]
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	899b      	ldrh	r3, [r3, #12]
 801148e:	4619      	mov	r1, r3
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	fbb3 f3f1 	udiv	r3, r3, r1
 8011496:	441a      	add	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	899b      	ldrh	r3, [r3, #12]
 80114a6:	461a      	mov	r2, r3
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80114ae:	fb02 f200 	mul.w	r2, r2, r0
 80114b2:	1a9b      	subs	r3, r3, r2
 80114b4:	18ca      	adds	r2, r1, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3718      	adds	r7, #24
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b086      	sub	sp, #24
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	3320      	adds	r3, #32
 80114da:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d003      	beq.n	80114ec <dir_next+0x28>
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80114ea:	d301      	bcc.n	80114f0 <dir_next+0x2c>
 80114ec:	2304      	movs	r3, #4
 80114ee:	e0bb      	b.n	8011668 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	899b      	ldrh	r3, [r3, #12]
 80114f4:	461a      	mov	r2, r3
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80114fc:	fb02 f201 	mul.w	r2, r2, r1
 8011500:	1a9b      	subs	r3, r3, r2
 8011502:	2b00      	cmp	r3, #0
 8011504:	f040 809d 	bne.w	8011642 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	1c5a      	adds	r2, r3, #1
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	699b      	ldr	r3, [r3, #24]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10b      	bne.n	8011532 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	095b      	lsrs	r3, r3, #5
 801151e:	68fa      	ldr	r2, [r7, #12]
 8011520:	8912      	ldrh	r2, [r2, #8]
 8011522:	4293      	cmp	r3, r2
 8011524:	f0c0 808d 	bcc.w	8011642 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	61da      	str	r2, [r3, #28]
 801152e:	2304      	movs	r3, #4
 8011530:	e09a      	b.n	8011668 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	899b      	ldrh	r3, [r3, #12]
 8011536:	461a      	mov	r2, r3
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	fbb3 f3f2 	udiv	r3, r3, r2
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	8952      	ldrh	r2, [r2, #10]
 8011542:	3a01      	subs	r2, #1
 8011544:	4013      	ands	r3, r2
 8011546:	2b00      	cmp	r3, #0
 8011548:	d17b      	bne.n	8011642 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	699b      	ldr	r3, [r3, #24]
 8011550:	4619      	mov	r1, r3
 8011552:	4610      	mov	r0, r2
 8011554:	f7ff fc11 	bl	8010d7a <get_fat>
 8011558:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2b01      	cmp	r3, #1
 801155e:	d801      	bhi.n	8011564 <dir_next+0xa0>
 8011560:	2302      	movs	r3, #2
 8011562:	e081      	b.n	8011668 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801156a:	d101      	bne.n	8011570 <dir_next+0xac>
 801156c:	2301      	movs	r3, #1
 801156e:	e07b      	b.n	8011668 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	69db      	ldr	r3, [r3, #28]
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	429a      	cmp	r2, r3
 8011578:	d359      	bcc.n	801162e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d104      	bne.n	801158a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2200      	movs	r2, #0
 8011584:	61da      	str	r2, [r3, #28]
 8011586:	2304      	movs	r3, #4
 8011588:	e06e      	b.n	8011668 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	4619      	mov	r1, r3
 8011592:	4610      	mov	r0, r2
 8011594:	f7ff fe3d 	bl	8011212 <create_chain>
 8011598:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d101      	bne.n	80115a4 <dir_next+0xe0>
 80115a0:	2307      	movs	r3, #7
 80115a2:	e061      	b.n	8011668 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d101      	bne.n	80115ae <dir_next+0xea>
 80115aa:	2302      	movs	r3, #2
 80115ac:	e05c      	b.n	8011668 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b4:	d101      	bne.n	80115ba <dir_next+0xf6>
 80115b6:	2301      	movs	r3, #1
 80115b8:	e056      	b.n	8011668 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f7ff fadc 	bl	8010b78 <sync_window>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d001      	beq.n	80115ca <dir_next+0x106>
 80115c6:	2301      	movs	r3, #1
 80115c8:	e04e      	b.n	8011668 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	899b      	ldrh	r3, [r3, #12]
 80115d4:	461a      	mov	r2, r3
 80115d6:	2100      	movs	r1, #0
 80115d8:	f7ff f905 	bl	80107e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80115dc:	2300      	movs	r3, #0
 80115de:	613b      	str	r3, [r7, #16]
 80115e0:	6979      	ldr	r1, [r7, #20]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff fbaa 	bl	8010d3c <clust2sect>
 80115e8:	4602      	mov	r2, r0
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	635a      	str	r2, [r3, #52]	; 0x34
 80115ee:	e012      	b.n	8011616 <dir_next+0x152>
						fs->wflag = 1;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2201      	movs	r2, #1
 80115f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	f7ff fabe 	bl	8010b78 <sync_window>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <dir_next+0x142>
 8011602:	2301      	movs	r3, #1
 8011604:	e030      	b.n	8011668 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	3301      	adds	r3, #1
 801160a:	613b      	str	r3, [r7, #16]
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	635a      	str	r2, [r3, #52]	; 0x34
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	895b      	ldrh	r3, [r3, #10]
 801161a:	461a      	mov	r2, r3
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	4293      	cmp	r3, r2
 8011620:	d3e6      	bcc.n	80115f0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	1ad2      	subs	r2, r2, r3
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011634:	6979      	ldr	r1, [r7, #20]
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f7ff fb80 	bl	8010d3c <clust2sect>
 801163c:	4602      	mov	r2, r0
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	899b      	ldrh	r3, [r3, #12]
 8011652:	461a      	mov	r2, r3
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	fbb3 f0f2 	udiv	r0, r3, r2
 801165a:	fb02 f200 	mul.w	r2, r2, r0
 801165e:	1a9b      	subs	r3, r3, r2
 8011660:	18ca      	adds	r2, r1, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3718      	adds	r7, #24
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011680:	2100      	movs	r1, #0
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7ff fe95 	bl	80113b2 <dir_sdi>
 8011688:	4603      	mov	r3, r0
 801168a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801168c:	7dfb      	ldrb	r3, [r7, #23]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d12b      	bne.n	80116ea <dir_alloc+0x7a>
		n = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	69db      	ldr	r3, [r3, #28]
 801169a:	4619      	mov	r1, r3
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f7ff faaf 	bl	8010c00 <move_window>
 80116a2:	4603      	mov	r3, r0
 80116a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80116a6:	7dfb      	ldrb	r3, [r7, #23]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d11d      	bne.n	80116e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6a1b      	ldr	r3, [r3, #32]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	2be5      	cmp	r3, #229	; 0xe5
 80116b4:	d004      	beq.n	80116c0 <dir_alloc+0x50>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6a1b      	ldr	r3, [r3, #32]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d107      	bne.n	80116d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	3301      	adds	r3, #1
 80116c4:	613b      	str	r3, [r7, #16]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d102      	bne.n	80116d4 <dir_alloc+0x64>
 80116ce:	e00c      	b.n	80116ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80116d0:	2300      	movs	r3, #0
 80116d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80116d4:	2101      	movs	r1, #1
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7ff fef4 	bl	80114c4 <dir_next>
 80116dc:	4603      	mov	r3, r0
 80116de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80116e0:	7dfb      	ldrb	r3, [r7, #23]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d0d7      	beq.n	8011696 <dir_alloc+0x26>
 80116e6:	e000      	b.n	80116ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80116e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
 80116ec:	2b04      	cmp	r3, #4
 80116ee:	d101      	bne.n	80116f4 <dir_alloc+0x84>
 80116f0:	2307      	movs	r3, #7
 80116f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b084      	sub	sp, #16
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	331a      	adds	r3, #26
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe ffc7 	bl	80106a0 <ld_word>
 8011712:	4603      	mov	r3, r0
 8011714:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	2b03      	cmp	r3, #3
 801171c:	d109      	bne.n	8011732 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	3314      	adds	r3, #20
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe ffbc 	bl	80106a0 <ld_word>
 8011728:	4603      	mov	r3, r0
 801172a:	041b      	lsls	r3, r3, #16
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	4313      	orrs	r3, r2
 8011730:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011732:	68fb      	ldr	r3, [r7, #12]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	331a      	adds	r3, #26
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	b292      	uxth	r2, r2
 8011750:	4611      	mov	r1, r2
 8011752:	4618      	mov	r0, r3
 8011754:	f7fe ffdf 	bl	8010716 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	2b03      	cmp	r3, #3
 801175e:	d109      	bne.n	8011774 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	f103 0214 	add.w	r2, r3, #20
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	0c1b      	lsrs	r3, r3, #16
 801176a:	b29b      	uxth	r3, r3
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f7fe ffd1 	bl	8010716 <st_word>
	}
}
 8011774:	bf00      	nop
 8011776:	3710      	adds	r7, #16
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011786:	2304      	movs	r3, #4
 8011788:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011790:	e03c      	b.n	801180c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	69db      	ldr	r3, [r3, #28]
 8011796:	4619      	mov	r1, r3
 8011798:	6938      	ldr	r0, [r7, #16]
 801179a:	f7ff fa31 	bl	8010c00 <move_window>
 801179e:	4603      	mov	r3, r0
 80117a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d136      	bne.n	8011816 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6a1b      	ldr	r3, [r3, #32]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d102      	bne.n	80117bc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80117b6:	2304      	movs	r3, #4
 80117b8:	75fb      	strb	r3, [r7, #23]
 80117ba:	e031      	b.n	8011820 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a1b      	ldr	r3, [r3, #32]
 80117c0:	330b      	adds	r3, #11
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117c8:	73bb      	strb	r3, [r7, #14]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	7bba      	ldrb	r2, [r7, #14]
 80117ce:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
 80117d2:	2be5      	cmp	r3, #229	; 0xe5
 80117d4:	d011      	beq.n	80117fa <dir_read+0x7e>
 80117d6:	7bfb      	ldrb	r3, [r7, #15]
 80117d8:	2b2e      	cmp	r3, #46	; 0x2e
 80117da:	d00e      	beq.n	80117fa <dir_read+0x7e>
 80117dc:	7bbb      	ldrb	r3, [r7, #14]
 80117de:	2b0f      	cmp	r3, #15
 80117e0:	d00b      	beq.n	80117fa <dir_read+0x7e>
 80117e2:	7bbb      	ldrb	r3, [r7, #14]
 80117e4:	f023 0320 	bic.w	r3, r3, #32
 80117e8:	2b08      	cmp	r3, #8
 80117ea:	bf0c      	ite	eq
 80117ec:	2301      	moveq	r3, #1
 80117ee:	2300      	movne	r3, #0
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	461a      	mov	r2, r3
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d00f      	beq.n	801181a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80117fa:	2100      	movs	r1, #0
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7ff fe61 	bl	80114c4 <dir_next>
 8011802:	4603      	mov	r3, r0
 8011804:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d108      	bne.n	801181e <dir_read+0xa2>
	while (dp->sect) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	69db      	ldr	r3, [r3, #28]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1be      	bne.n	8011792 <dir_read+0x16>
 8011814:	e004      	b.n	8011820 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011816:	bf00      	nop
 8011818:	e002      	b.n	8011820 <dir_read+0xa4>
				break;
 801181a:	bf00      	nop
 801181c:	e000      	b.n	8011820 <dir_read+0xa4>
		if (res != FR_OK) break;
 801181e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011820:	7dfb      	ldrb	r3, [r7, #23]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d002      	beq.n	801182c <dir_read+0xb0>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	61da      	str	r2, [r3, #28]
	return res;
 801182c:	7dfb      	ldrb	r3, [r7, #23]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3718      	adds	r7, #24
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b086      	sub	sp, #24
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011844:	2100      	movs	r1, #0
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f7ff fdb3 	bl	80113b2 <dir_sdi>
 801184c:	4603      	mov	r3, r0
 801184e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011850:	7dfb      	ldrb	r3, [r7, #23]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d001      	beq.n	801185a <dir_find+0x24>
 8011856:	7dfb      	ldrb	r3, [r7, #23]
 8011858:	e03e      	b.n	80118d8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	69db      	ldr	r3, [r3, #28]
 801185e:	4619      	mov	r1, r3
 8011860:	6938      	ldr	r0, [r7, #16]
 8011862:	f7ff f9cd 	bl	8010c00 <move_window>
 8011866:	4603      	mov	r3, r0
 8011868:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801186a:	7dfb      	ldrb	r3, [r7, #23]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d12f      	bne.n	80118d0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a1b      	ldr	r3, [r3, #32]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d102      	bne.n	8011884 <dir_find+0x4e>
 801187e:	2304      	movs	r3, #4
 8011880:	75fb      	strb	r3, [r7, #23]
 8011882:	e028      	b.n	80118d6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a1b      	ldr	r3, [r3, #32]
 8011888:	330b      	adds	r3, #11
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011890:	b2da      	uxtb	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	330b      	adds	r3, #11
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	f003 0308 	and.w	r3, r3, #8
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d10a      	bne.n	80118bc <dir_find+0x86>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a18      	ldr	r0, [r3, #32]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	3324      	adds	r3, #36	; 0x24
 80118ae:	220b      	movs	r2, #11
 80118b0:	4619      	mov	r1, r3
 80118b2:	f7fe ffb2 	bl	801081a <mem_cmp>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00b      	beq.n	80118d4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80118bc:	2100      	movs	r1, #0
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f7ff fe00 	bl	80114c4 <dir_next>
 80118c4:	4603      	mov	r3, r0
 80118c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80118c8:	7dfb      	ldrb	r3, [r7, #23]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d0c5      	beq.n	801185a <dir_find+0x24>
 80118ce:	e002      	b.n	80118d6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80118d0:	bf00      	nop
 80118d2:	e000      	b.n	80118d6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80118d4:	bf00      	nop

	return res;
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3718      	adds	r7, #24
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80118ee:	2101      	movs	r1, #1
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7ff febd 	bl	8011670 <dir_alloc>
 80118f6:	4603      	mov	r3, r0
 80118f8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80118fa:	7bfb      	ldrb	r3, [r7, #15]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11c      	bne.n	801193a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	69db      	ldr	r3, [r3, #28]
 8011904:	4619      	mov	r1, r3
 8011906:	68b8      	ldr	r0, [r7, #8]
 8011908:	f7ff f97a 	bl	8010c00 <move_window>
 801190c:	4603      	mov	r3, r0
 801190e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011910:	7bfb      	ldrb	r3, [r7, #15]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d111      	bne.n	801193a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	2220      	movs	r2, #32
 801191c:	2100      	movs	r1, #0
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe ff61 	bl	80107e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6a18      	ldr	r0, [r3, #32]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3324      	adds	r3, #36	; 0x24
 801192c:	220b      	movs	r2, #11
 801192e:	4619      	mov	r1, r3
 8011930:	f7fe ff38 	bl	80107a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2201      	movs	r2, #1
 8011938:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801193a:	7bfb      	ldrb	r3, [r7, #15]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3710      	adds	r7, #16
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	4619      	mov	r1, r3
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f7ff f951 	bl	8010c00 <move_window>
 801195e:	4603      	mov	r3, r0
 8011960:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011962:	7afb      	ldrb	r3, [r7, #11]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d106      	bne.n	8011976 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a1b      	ldr	r3, [r3, #32]
 801196c:	22e5      	movs	r2, #229	; 0xe5
 801196e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2201      	movs	r2, #1
 8011974:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011976:	7afb      	ldrb	r3, [r7, #11]
}
 8011978:	4618      	mov	r0, r3
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b088      	sub	sp, #32
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	60fb      	str	r3, [r7, #12]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	3324      	adds	r3, #36	; 0x24
 8011994:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011996:	220b      	movs	r2, #11
 8011998:	2120      	movs	r1, #32
 801199a:	68b8      	ldr	r0, [r7, #8]
 801199c:	f7fe ff23 	bl	80107e6 <mem_set>
	si = i = 0; ni = 8;
 80119a0:	2300      	movs	r3, #0
 80119a2:	613b      	str	r3, [r7, #16]
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	617b      	str	r3, [r7, #20]
 80119a8:	2308      	movs	r3, #8
 80119aa:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	4413      	add	r3, r2
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	2b2e      	cmp	r3, #46	; 0x2e
 80119b6:	d12f      	bne.n	8011a18 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	1c5a      	adds	r2, r3, #1
 80119bc:	617a      	str	r2, [r7, #20]
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	4413      	add	r3, r2
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80119c6:	7ffb      	ldrb	r3, [r7, #31]
 80119c8:	2b2e      	cmp	r3, #46	; 0x2e
 80119ca:	d10a      	bne.n	80119e2 <create_name+0x62>
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	2b02      	cmp	r3, #2
 80119d0:	d807      	bhi.n	80119e2 <create_name+0x62>
			sfn[i++] = c;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	1c5a      	adds	r2, r3, #1
 80119d6:	613a      	str	r2, [r7, #16]
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	4413      	add	r3, r2
 80119dc:	7ffa      	ldrb	r2, [r7, #31]
 80119de:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80119e0:	e7ea      	b.n	80119b8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80119e2:	7ffb      	ldrb	r3, [r7, #31]
 80119e4:	2b2f      	cmp	r3, #47	; 0x2f
 80119e6:	d007      	beq.n	80119f8 <create_name+0x78>
 80119e8:	7ffb      	ldrb	r3, [r7, #31]
 80119ea:	2b5c      	cmp	r3, #92	; 0x5c
 80119ec:	d004      	beq.n	80119f8 <create_name+0x78>
 80119ee:	7ffb      	ldrb	r3, [r7, #31]
 80119f0:	2b20      	cmp	r3, #32
 80119f2:	d901      	bls.n	80119f8 <create_name+0x78>
 80119f4:	2306      	movs	r3, #6
 80119f6:	e084      	b.n	8011b02 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	441a      	add	r2, r3
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011a02:	7ffb      	ldrb	r3, [r7, #31]
 8011a04:	2b20      	cmp	r3, #32
 8011a06:	d801      	bhi.n	8011a0c <create_name+0x8c>
 8011a08:	2224      	movs	r2, #36	; 0x24
 8011a0a:	e000      	b.n	8011a0e <create_name+0x8e>
 8011a0c:	2220      	movs	r2, #32
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	330b      	adds	r3, #11
 8011a12:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	e074      	b.n	8011b02 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	617a      	str	r2, [r7, #20]
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	4413      	add	r3, r2
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a26:	7ffb      	ldrb	r3, [r7, #31]
 8011a28:	2b20      	cmp	r3, #32
 8011a2a:	d94e      	bls.n	8011aca <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011a2c:	7ffb      	ldrb	r3, [r7, #31]
 8011a2e:	2b2f      	cmp	r3, #47	; 0x2f
 8011a30:	d006      	beq.n	8011a40 <create_name+0xc0>
 8011a32:	7ffb      	ldrb	r3, [r7, #31]
 8011a34:	2b5c      	cmp	r3, #92	; 0x5c
 8011a36:	d110      	bne.n	8011a5a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011a38:	e002      	b.n	8011a40 <create_name+0xc0>
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	68fa      	ldr	r2, [r7, #12]
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	4413      	add	r3, r2
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b2f      	cmp	r3, #47	; 0x2f
 8011a4a:	d0f6      	beq.n	8011a3a <create_name+0xba>
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	4413      	add	r3, r2
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	2b5c      	cmp	r3, #92	; 0x5c
 8011a56:	d0f0      	beq.n	8011a3a <create_name+0xba>
			break;
 8011a58:	e038      	b.n	8011acc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011a5a:	7ffb      	ldrb	r3, [r7, #31]
 8011a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a5e:	d003      	beq.n	8011a68 <create_name+0xe8>
 8011a60:	693a      	ldr	r2, [r7, #16]
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d30c      	bcc.n	8011a82 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	2b0b      	cmp	r3, #11
 8011a6c:	d002      	beq.n	8011a74 <create_name+0xf4>
 8011a6e:	7ffb      	ldrb	r3, [r7, #31]
 8011a70:	2b2e      	cmp	r3, #46	; 0x2e
 8011a72:	d001      	beq.n	8011a78 <create_name+0xf8>
 8011a74:	2306      	movs	r3, #6
 8011a76:	e044      	b.n	8011b02 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011a78:	2308      	movs	r3, #8
 8011a7a:	613b      	str	r3, [r7, #16]
 8011a7c:	230b      	movs	r3, #11
 8011a7e:	61bb      	str	r3, [r7, #24]
			continue;
 8011a80:	e022      	b.n	8011ac8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	da04      	bge.n	8011a94 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011a8a:	7ffb      	ldrb	r3, [r7, #31]
 8011a8c:	3b80      	subs	r3, #128	; 0x80
 8011a8e:	4a1f      	ldr	r2, [pc, #124]	; (8011b0c <create_name+0x18c>)
 8011a90:	5cd3      	ldrb	r3, [r2, r3]
 8011a92:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011a94:	7ffb      	ldrb	r3, [r7, #31]
 8011a96:	4619      	mov	r1, r3
 8011a98:	481d      	ldr	r0, [pc, #116]	; (8011b10 <create_name+0x190>)
 8011a9a:	f7fe fee5 	bl	8010868 <chk_chr>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d001      	beq.n	8011aa8 <create_name+0x128>
 8011aa4:	2306      	movs	r3, #6
 8011aa6:	e02c      	b.n	8011b02 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011aa8:	7ffb      	ldrb	r3, [r7, #31]
 8011aaa:	2b60      	cmp	r3, #96	; 0x60
 8011aac:	d905      	bls.n	8011aba <create_name+0x13a>
 8011aae:	7ffb      	ldrb	r3, [r7, #31]
 8011ab0:	2b7a      	cmp	r3, #122	; 0x7a
 8011ab2:	d802      	bhi.n	8011aba <create_name+0x13a>
 8011ab4:	7ffb      	ldrb	r3, [r7, #31]
 8011ab6:	3b20      	subs	r3, #32
 8011ab8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	1c5a      	adds	r2, r3, #1
 8011abe:	613a      	str	r2, [r7, #16]
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	7ffa      	ldrb	r2, [r7, #31]
 8011ac6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011ac8:	e7a6      	b.n	8011a18 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011aca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011acc:	68fa      	ldr	r2, [r7, #12]
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	441a      	add	r2, r3
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d101      	bne.n	8011ae0 <create_name+0x160>
 8011adc:	2306      	movs	r3, #6
 8011ade:	e010      	b.n	8011b02 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	2be5      	cmp	r3, #229	; 0xe5
 8011ae6:	d102      	bne.n	8011aee <create_name+0x16e>
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	2205      	movs	r2, #5
 8011aec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011aee:	7ffb      	ldrb	r3, [r7, #31]
 8011af0:	2b20      	cmp	r3, #32
 8011af2:	d801      	bhi.n	8011af8 <create_name+0x178>
 8011af4:	2204      	movs	r2, #4
 8011af6:	e000      	b.n	8011afa <create_name+0x17a>
 8011af8:	2200      	movs	r2, #0
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	330b      	adds	r3, #11
 8011afe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011b00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3720      	adds	r7, #32
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	080192d8 	.word	0x080192d8
 8011b10:	08019288 	.word	0x08019288

08011b14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8011b2e:	d00b      	beq.n	8011b48 <follow_path+0x34>
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b5c      	cmp	r3, #92	; 0x5c
 8011b36:	d007      	beq.n	8011b48 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	699a      	ldr	r2, [r3, #24]
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	609a      	str	r2, [r3, #8]
 8011b40:	e00d      	b.n	8011b5e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	3301      	adds	r3, #1
 8011b46:	603b      	str	r3, [r7, #0]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8011b4e:	d0f8      	beq.n	8011b42 <follow_path+0x2e>
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	2b5c      	cmp	r3, #92	; 0x5c
 8011b56:	d0f4      	beq.n	8011b42 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	2b1f      	cmp	r3, #31
 8011b64:	d80a      	bhi.n	8011b7c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2280      	movs	r2, #128	; 0x80
 8011b6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011b6e:	2100      	movs	r1, #0
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7ff fc1e 	bl	80113b2 <dir_sdi>
 8011b76:	4603      	mov	r3, r0
 8011b78:	75fb      	strb	r3, [r7, #23]
 8011b7a:	e05b      	b.n	8011c34 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b7c:	463b      	mov	r3, r7
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff fefd 	bl	8011980 <create_name>
 8011b86:	4603      	mov	r3, r0
 8011b88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b8a:	7dfb      	ldrb	r3, [r7, #23]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d14c      	bne.n	8011c2a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff fe50 	bl	8011836 <dir_find>
 8011b96:	4603      	mov	r3, r0
 8011b98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ba0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011ba2:	7dfb      	ldrb	r3, [r7, #23]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d01b      	beq.n	8011be0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011ba8:	7dfb      	ldrb	r3, [r7, #23]
 8011baa:	2b04      	cmp	r3, #4
 8011bac:	d13f      	bne.n	8011c2e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011bae:	7afb      	ldrb	r3, [r7, #11]
 8011bb0:	f003 0320 	and.w	r3, r3, #32
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00b      	beq.n	8011bd0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011bb8:	7afb      	ldrb	r3, [r7, #11]
 8011bba:	f003 0304 	and.w	r3, r3, #4
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d031      	beq.n	8011c26 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2280      	movs	r2, #128	; 0x80
 8011bc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011bce:	e02e      	b.n	8011c2e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011bd0:	7afb      	ldrb	r3, [r7, #11]
 8011bd2:	f003 0304 	and.w	r3, r3, #4
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d129      	bne.n	8011c2e <follow_path+0x11a>
 8011bda:	2305      	movs	r3, #5
 8011bdc:	75fb      	strb	r3, [r7, #23]
				break;
 8011bde:	e026      	b.n	8011c2e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011be0:	7afb      	ldrb	r3, [r7, #11]
 8011be2:	f003 0304 	and.w	r3, r3, #4
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d123      	bne.n	8011c32 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	799b      	ldrb	r3, [r3, #6]
 8011bee:	f003 0310 	and.w	r3, r3, #16
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d102      	bne.n	8011bfc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011bf6:	2305      	movs	r3, #5
 8011bf8:	75fb      	strb	r3, [r7, #23]
 8011bfa:	e01b      	b.n	8011c34 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	695b      	ldr	r3, [r3, #20]
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	8992      	ldrh	r2, [r2, #12]
 8011c0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c0e:	fb02 f200 	mul.w	r2, r2, r0
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	440b      	add	r3, r1
 8011c16:	4619      	mov	r1, r3
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f7ff fd70 	bl	80116fe <ld_clust>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	609a      	str	r2, [r3, #8]
 8011c24:	e7aa      	b.n	8011b7c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011c26:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c28:	e7a8      	b.n	8011b7c <follow_path+0x68>
			if (res != FR_OK) break;
 8011c2a:	bf00      	nop
 8011c2c:	e002      	b.n	8011c34 <follow_path+0x120>
				break;
 8011c2e:	bf00      	nop
 8011c30:	e000      	b.n	8011c34 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011c32:	bf00      	nop
			}
		}
	}

	return res;
 8011c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3718      	adds	r7, #24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011c3e:	b480      	push	{r7}
 8011c40:	b087      	sub	sp, #28
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011c46:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d031      	beq.n	8011cb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	617b      	str	r3, [r7, #20]
 8011c5a:	e002      	b.n	8011c62 <get_ldnumber+0x24>
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	617b      	str	r3, [r7, #20]
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	2b20      	cmp	r3, #32
 8011c68:	d903      	bls.n	8011c72 <get_ldnumber+0x34>
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b3a      	cmp	r3, #58	; 0x3a
 8011c70:	d1f4      	bne.n	8011c5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	2b3a      	cmp	r3, #58	; 0x3a
 8011c78:	d11c      	bne.n	8011cb4 <get_ldnumber+0x76>
			tp = *path;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	60fa      	str	r2, [r7, #12]
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	3b30      	subs	r3, #48	; 0x30
 8011c8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b09      	cmp	r3, #9
 8011c90:	d80e      	bhi.n	8011cb0 <get_ldnumber+0x72>
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d10a      	bne.n	8011cb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d107      	bne.n	8011cb0 <get_ldnumber+0x72>
					vol = (int)i;
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	697a      	ldr	r2, [r7, #20]
 8011cae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	e002      	b.n	8011cba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011cb8:	693b      	ldr	r3, [r7, #16]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	371c      	adds	r7, #28
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
	...

08011cc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	70da      	strb	r2, [r3, #3]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f04f 32ff 	mov.w	r2, #4294967295
 8011cde:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7fe ff8c 	bl	8010c00 <move_window>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d001      	beq.n	8011cf2 <check_fs+0x2a>
 8011cee:	2304      	movs	r3, #4
 8011cf0:	e038      	b.n	8011d64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	3338      	adds	r3, #56	; 0x38
 8011cf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fcd0 	bl	80106a0 <ld_word>
 8011d00:	4603      	mov	r3, r0
 8011d02:	461a      	mov	r2, r3
 8011d04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d001      	beq.n	8011d10 <check_fs+0x48>
 8011d0c:	2303      	movs	r3, #3
 8011d0e:	e029      	b.n	8011d64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d16:	2be9      	cmp	r3, #233	; 0xe9
 8011d18:	d009      	beq.n	8011d2e <check_fs+0x66>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d20:	2beb      	cmp	r3, #235	; 0xeb
 8011d22:	d11e      	bne.n	8011d62 <check_fs+0x9a>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011d2a:	2b90      	cmp	r3, #144	; 0x90
 8011d2c:	d119      	bne.n	8011d62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	3338      	adds	r3, #56	; 0x38
 8011d32:	3336      	adds	r3, #54	; 0x36
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fe fccb 	bl	80106d0 <ld_dword>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011d40:	4a0a      	ldr	r2, [pc, #40]	; (8011d6c <check_fs+0xa4>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d101      	bne.n	8011d4a <check_fs+0x82>
 8011d46:	2300      	movs	r3, #0
 8011d48:	e00c      	b.n	8011d64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	3338      	adds	r3, #56	; 0x38
 8011d4e:	3352      	adds	r3, #82	; 0x52
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fe fcbd 	bl	80106d0 <ld_dword>
 8011d56:	4602      	mov	r2, r0
 8011d58:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <check_fs+0xa8>)
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d101      	bne.n	8011d62 <check_fs+0x9a>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	e000      	b.n	8011d64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011d62:	2302      	movs	r3, #2
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	00544146 	.word	0x00544146
 8011d70:	33544146 	.word	0x33544146

08011d74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b096      	sub	sp, #88	; 0x58
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2200      	movs	r2, #0
 8011d86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f7ff ff58 	bl	8011c3e <get_ldnumber>
 8011d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	da01      	bge.n	8011d9a <find_volume+0x26>
 8011d96:	230b      	movs	r3, #11
 8011d98:	e268      	b.n	801226c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d9a:	4ab0      	ldr	r2, [pc, #704]	; (801205c <find_volume+0x2e8>)
 8011d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011da2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <find_volume+0x3a>
 8011daa:	230c      	movs	r3, #12
 8011dac:	e25e      	b.n	801226c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011db2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	f023 0301 	bic.w	r3, r3, #1
 8011dba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01a      	beq.n	8011dfa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc6:	785b      	ldrb	r3, [r3, #1]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fe fbcb 	bl	8010564 <disk_status>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d10c      	bne.n	8011dfa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011de0:	79fb      	ldrb	r3, [r7, #7]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d007      	beq.n	8011df6 <find_volume+0x82>
 8011de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dea:	f003 0304 	and.w	r3, r3, #4
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011df2:	230a      	movs	r3, #10
 8011df4:	e23a      	b.n	801226c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011df6:	2300      	movs	r3, #0
 8011df8:	e238      	b.n	801226c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fe fbc3 	bl	8010598 <disk_initialize>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011e18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e1c:	f003 0301 	and.w	r3, r3, #1
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d001      	beq.n	8011e28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011e24:	2303      	movs	r3, #3
 8011e26:	e221      	b.n	801226c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011e28:	79fb      	ldrb	r3, [r7, #7]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d007      	beq.n	8011e3e <find_volume+0xca>
 8011e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e32:	f003 0304 	and.w	r3, r3, #4
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d001      	beq.n	8011e3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011e3a:	230a      	movs	r3, #10
 8011e3c:	e216      	b.n	801226c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e40:	7858      	ldrb	r0, [r3, #1]
 8011e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e44:	330c      	adds	r3, #12
 8011e46:	461a      	mov	r2, r3
 8011e48:	2102      	movs	r1, #2
 8011e4a:	f7fe fc0b 	bl	8010664 <disk_ioctl>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d001      	beq.n	8011e58 <find_volume+0xe4>
 8011e54:	2301      	movs	r3, #1
 8011e56:	e209      	b.n	801226c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	899b      	ldrh	r3, [r3, #12]
 8011e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e60:	d80d      	bhi.n	8011e7e <find_volume+0x10a>
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e6a:	d308      	bcc.n	8011e7e <find_volume+0x10a>
 8011e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6e:	899b      	ldrh	r3, [r3, #12]
 8011e70:	461a      	mov	r2, r3
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	899b      	ldrh	r3, [r3, #12]
 8011e76:	3b01      	subs	r3, #1
 8011e78:	4013      	ands	r3, r2
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d001      	beq.n	8011e82 <find_volume+0x10e>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e1f4      	b.n	801226c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e8a:	f7ff ff1d 	bl	8011cc8 <check_fs>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e98:	2b02      	cmp	r3, #2
 8011e9a:	d14b      	bne.n	8011f34 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8011ea0:	e01f      	b.n	8011ee2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eaa:	011b      	lsls	r3, r3, #4
 8011eac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011eb0:	4413      	add	r3, r2
 8011eb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d006      	beq.n	8011ecc <find_volume+0x158>
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	3308      	adds	r3, #8
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fe fc04 	bl	80106d0 <ld_dword>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	e000      	b.n	8011ece <find_volume+0x15a>
 8011ecc:	2200      	movs	r2, #0
 8011ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011ed6:	440b      	add	r3, r1
 8011ed8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ede:	3301      	adds	r3, #1
 8011ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8011ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ee4:	2b03      	cmp	r3, #3
 8011ee6:	d9dc      	bls.n	8011ea2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011ee8:	2300      	movs	r3, #0
 8011eea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d002      	beq.n	8011ef8 <find_volume+0x184>
 8011ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011f00:	4413      	add	r3, r2
 8011f02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011f06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d005      	beq.n	8011f1a <find_volume+0x1a6>
 8011f0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f12:	f7ff fed9 	bl	8011cc8 <check_fs>
 8011f16:	4603      	mov	r3, r0
 8011f18:	e000      	b.n	8011f1c <find_volume+0x1a8>
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d905      	bls.n	8011f34 <find_volume+0x1c0>
 8011f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8011f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f30:	2b03      	cmp	r3, #3
 8011f32:	d9e1      	bls.n	8011ef8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011f34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f38:	2b04      	cmp	r3, #4
 8011f3a:	d101      	bne.n	8011f40 <find_volume+0x1cc>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e195      	b.n	801226c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d901      	bls.n	8011f4c <find_volume+0x1d8>
 8011f48:	230d      	movs	r3, #13
 8011f4a:	e18f      	b.n	801226c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4e:	3338      	adds	r3, #56	; 0x38
 8011f50:	330b      	adds	r3, #11
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fe fba4 	bl	80106a0 <ld_word>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	899b      	ldrh	r3, [r3, #12]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d001      	beq.n	8011f68 <find_volume+0x1f4>
 8011f64:	230d      	movs	r3, #13
 8011f66:	e181      	b.n	801226c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6a:	3338      	adds	r3, #56	; 0x38
 8011f6c:	3316      	adds	r3, #22
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe fb96 	bl	80106a0 <ld_word>
 8011f74:	4603      	mov	r3, r0
 8011f76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d106      	bne.n	8011f8c <find_volume+0x218>
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f80:	3338      	adds	r3, #56	; 0x38
 8011f82:	3324      	adds	r3, #36	; 0x24
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fe fba3 	bl	80106d0 <ld_dword>
 8011f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f90:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f94:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9e:	789b      	ldrb	r3, [r3, #2]
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d005      	beq.n	8011fb0 <find_volume+0x23c>
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa6:	789b      	ldrb	r3, [r3, #2]
 8011fa8:	2b02      	cmp	r3, #2
 8011faa:	d001      	beq.n	8011fb0 <find_volume+0x23c>
 8011fac:	230d      	movs	r3, #13
 8011fae:	e15d      	b.n	801226c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	789b      	ldrb	r3, [r3, #2]
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fb8:	fb02 f303 	mul.w	r3, r2, r3
 8011fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fcc:	895b      	ldrh	r3, [r3, #10]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d008      	beq.n	8011fe4 <find_volume+0x270>
 8011fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd4:	895b      	ldrh	r3, [r3, #10]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fda:	895b      	ldrh	r3, [r3, #10]
 8011fdc:	3b01      	subs	r3, #1
 8011fde:	4013      	ands	r3, r2
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d001      	beq.n	8011fe8 <find_volume+0x274>
 8011fe4:	230d      	movs	r3, #13
 8011fe6:	e141      	b.n	801226c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fea:	3338      	adds	r3, #56	; 0x38
 8011fec:	3311      	adds	r3, #17
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fe fb56 	bl	80106a0 <ld_word>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	891b      	ldrh	r3, [r3, #8]
 8012000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012002:	8992      	ldrh	r2, [r2, #12]
 8012004:	0952      	lsrs	r2, r2, #5
 8012006:	b292      	uxth	r2, r2
 8012008:	fbb3 f1f2 	udiv	r1, r3, r2
 801200c:	fb02 f201 	mul.w	r2, r2, r1
 8012010:	1a9b      	subs	r3, r3, r2
 8012012:	b29b      	uxth	r3, r3
 8012014:	2b00      	cmp	r3, #0
 8012016:	d001      	beq.n	801201c <find_volume+0x2a8>
 8012018:	230d      	movs	r3, #13
 801201a:	e127      	b.n	801226c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	3338      	adds	r3, #56	; 0x38
 8012020:	3313      	adds	r3, #19
 8012022:	4618      	mov	r0, r3
 8012024:	f7fe fb3c 	bl	80106a0 <ld_word>
 8012028:	4603      	mov	r3, r0
 801202a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801202e:	2b00      	cmp	r3, #0
 8012030:	d106      	bne.n	8012040 <find_volume+0x2cc>
 8012032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012034:	3338      	adds	r3, #56	; 0x38
 8012036:	3320      	adds	r3, #32
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fb49 	bl	80106d0 <ld_dword>
 801203e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	3338      	adds	r3, #56	; 0x38
 8012044:	330e      	adds	r3, #14
 8012046:	4618      	mov	r0, r3
 8012048:	f7fe fb2a 	bl	80106a0 <ld_word>
 801204c:	4603      	mov	r3, r0
 801204e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012052:	2b00      	cmp	r3, #0
 8012054:	d104      	bne.n	8012060 <find_volume+0x2ec>
 8012056:	230d      	movs	r3, #13
 8012058:	e108      	b.n	801226c <find_volume+0x4f8>
 801205a:	bf00      	nop
 801205c:	2003c49c 	.word	0x2003c49c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012064:	4413      	add	r3, r2
 8012066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012068:	8911      	ldrh	r1, [r2, #8]
 801206a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801206c:	8992      	ldrh	r2, [r2, #12]
 801206e:	0952      	lsrs	r2, r2, #5
 8012070:	b292      	uxth	r2, r2
 8012072:	fbb1 f2f2 	udiv	r2, r1, r2
 8012076:	b292      	uxth	r2, r2
 8012078:	4413      	add	r3, r2
 801207a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801207c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012080:	429a      	cmp	r2, r3
 8012082:	d201      	bcs.n	8012088 <find_volume+0x314>
 8012084:	230d      	movs	r3, #13
 8012086:	e0f1      	b.n	801226c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208c:	1ad3      	subs	r3, r2, r3
 801208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012090:	8952      	ldrh	r2, [r2, #10]
 8012092:	fbb3 f3f2 	udiv	r3, r3, r2
 8012096:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <find_volume+0x32e>
 801209e:	230d      	movs	r3, #13
 80120a0:	e0e4      	b.n	801226c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80120a2:	2303      	movs	r3, #3
 80120a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80120a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d802      	bhi.n	80120b8 <find_volume+0x344>
 80120b2:	2302      	movs	r3, #2
 80120b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 80120be:	4293      	cmp	r3, r2
 80120c0:	d802      	bhi.n	80120c8 <find_volume+0x354>
 80120c2:	2301      	movs	r3, #1
 80120c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	1c9a      	adds	r2, r3, #2
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120d4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80120d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120da:	441a      	add	r2, r3
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80120e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e4:	441a      	add	r2, r3
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80120ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	d11e      	bne.n	8012130 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	3338      	adds	r3, #56	; 0x38
 80120f6:	332a      	adds	r3, #42	; 0x2a
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fe fad1 	bl	80106a0 <ld_word>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d001      	beq.n	8012108 <find_volume+0x394>
 8012104:	230d      	movs	r3, #13
 8012106:	e0b1      	b.n	801226c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210a:	891b      	ldrh	r3, [r3, #8]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d001      	beq.n	8012114 <find_volume+0x3a0>
 8012110:	230d      	movs	r3, #13
 8012112:	e0ab      	b.n	801226c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012116:	3338      	adds	r3, #56	; 0x38
 8012118:	332c      	adds	r3, #44	; 0x2c
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe fad8 	bl	80106d0 <ld_dword>
 8012120:	4602      	mov	r2, r0
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012128:	69db      	ldr	r3, [r3, #28]
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	647b      	str	r3, [r7, #68]	; 0x44
 801212e:	e01f      	b.n	8012170 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012132:	891b      	ldrh	r3, [r3, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d101      	bne.n	801213c <find_volume+0x3c8>
 8012138:	230d      	movs	r3, #13
 801213a:	e097      	b.n	801226c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012142:	441a      	add	r2, r3
 8012144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012146:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801214c:	2b02      	cmp	r3, #2
 801214e:	d103      	bne.n	8012158 <find_volume+0x3e4>
 8012150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012152:	69db      	ldr	r3, [r3, #28]
 8012154:	005b      	lsls	r3, r3, #1
 8012156:	e00a      	b.n	801216e <find_volume+0x3fa>
 8012158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215a:	69da      	ldr	r2, [r3, #28]
 801215c:	4613      	mov	r3, r2
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	4413      	add	r3, r2
 8012162:	085a      	lsrs	r2, r3, #1
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	69db      	ldr	r3, [r3, #28]
 8012168:	f003 0301 	and.w	r3, r3, #1
 801216c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801216e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012172:	6a1a      	ldr	r2, [r3, #32]
 8012174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012176:	899b      	ldrh	r3, [r3, #12]
 8012178:	4619      	mov	r1, r3
 801217a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801217c:	440b      	add	r3, r1
 801217e:	3b01      	subs	r3, #1
 8012180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012182:	8989      	ldrh	r1, [r1, #12]
 8012184:	fbb3 f3f1 	udiv	r3, r3, r1
 8012188:	429a      	cmp	r2, r3
 801218a:	d201      	bcs.n	8012190 <find_volume+0x41c>
 801218c:	230d      	movs	r3, #13
 801218e:	e06d      	b.n	801226c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012192:	f04f 32ff 	mov.w	r2, #4294967295
 8012196:	615a      	str	r2, [r3, #20]
 8012198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219a:	695a      	ldr	r2, [r3, #20]
 801219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80121a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a2:	2280      	movs	r2, #128	; 0x80
 80121a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80121a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121aa:	2b03      	cmp	r3, #3
 80121ac:	d149      	bne.n	8012242 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80121ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b0:	3338      	adds	r3, #56	; 0x38
 80121b2:	3330      	adds	r3, #48	; 0x30
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fe fa73 	bl	80106a0 <ld_word>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d140      	bne.n	8012242 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80121c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c2:	3301      	adds	r3, #1
 80121c4:	4619      	mov	r1, r3
 80121c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80121c8:	f7fe fd1a 	bl	8010c00 <move_window>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d137      	bne.n	8012242 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80121d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d4:	2200      	movs	r2, #0
 80121d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80121d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121da:	3338      	adds	r3, #56	; 0x38
 80121dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fe fa5d 	bl	80106a0 <ld_word>
 80121e6:	4603      	mov	r3, r0
 80121e8:	461a      	mov	r2, r3
 80121ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d127      	bne.n	8012242 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80121f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f4:	3338      	adds	r3, #56	; 0x38
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fe fa6a 	bl	80106d0 <ld_dword>
 80121fc:	4602      	mov	r2, r0
 80121fe:	4b1d      	ldr	r3, [pc, #116]	; (8012274 <find_volume+0x500>)
 8012200:	429a      	cmp	r2, r3
 8012202:	d11e      	bne.n	8012242 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012206:	3338      	adds	r3, #56	; 0x38
 8012208:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe fa5f 	bl	80106d0 <ld_dword>
 8012212:	4602      	mov	r2, r0
 8012214:	4b18      	ldr	r3, [pc, #96]	; (8012278 <find_volume+0x504>)
 8012216:	429a      	cmp	r2, r3
 8012218:	d113      	bne.n	8012242 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221c:	3338      	adds	r3, #56	; 0x38
 801221e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012222:	4618      	mov	r0, r3
 8012224:	f7fe fa54 	bl	80106d0 <ld_dword>
 8012228:	4602      	mov	r2, r0
 801222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	3338      	adds	r3, #56	; 0x38
 8012232:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012236:	4618      	mov	r0, r3
 8012238:	f7fe fa4a 	bl	80106d0 <ld_dword>
 801223c:	4602      	mov	r2, r0
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012244:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012248:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801224a:	4b0c      	ldr	r3, [pc, #48]	; (801227c <find_volume+0x508>)
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	3301      	adds	r3, #1
 8012250:	b29a      	uxth	r2, r3
 8012252:	4b0a      	ldr	r3, [pc, #40]	; (801227c <find_volume+0x508>)
 8012254:	801a      	strh	r2, [r3, #0]
 8012256:	4b09      	ldr	r3, [pc, #36]	; (801227c <find_volume+0x508>)
 8012258:	881a      	ldrh	r2, [r3, #0]
 801225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012260:	2200      	movs	r2, #0
 8012262:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012266:	f7fe fc63 	bl	8010b30 <clear_lock>
#endif
	return FR_OK;
 801226a:	2300      	movs	r3, #0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3758      	adds	r7, #88	; 0x58
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	41615252 	.word	0x41615252
 8012278:	61417272 	.word	0x61417272
 801227c:	2003c4a0 	.word	0x2003c4a0

08012280 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801228a:	2309      	movs	r3, #9
 801228c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d01c      	beq.n	80122ce <validate+0x4e>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d018      	beq.n	80122ce <validate+0x4e>
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d013      	beq.n	80122ce <validate+0x4e>
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	889a      	ldrh	r2, [r3, #4]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	88db      	ldrh	r3, [r3, #6]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d10c      	bne.n	80122ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	785b      	ldrb	r3, [r3, #1]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fe f952 	bl	8010564 <disk_status>
 80122c0:	4603      	mov	r3, r0
 80122c2:	f003 0301 	and.w	r3, r3, #1
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <validate+0x4e>
			res = FR_OK;
 80122ca:	2300      	movs	r3, #0
 80122cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80122ce:	7bfb      	ldrb	r3, [r7, #15]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <validate+0x5a>
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	e000      	b.n	80122dc <validate+0x5c>
 80122da:	2300      	movs	r3, #0
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	6013      	str	r3, [r2, #0]
	return res;
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3710      	adds	r7, #16
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
	...

080122ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b088      	sub	sp, #32
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	4613      	mov	r3, r2
 80122f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80122fe:	f107 0310 	add.w	r3, r7, #16
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fc9b 	bl	8011c3e <get_ldnumber>
 8012308:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	2b00      	cmp	r3, #0
 801230e:	da01      	bge.n	8012314 <f_mount+0x28>
 8012310:	230b      	movs	r3, #11
 8012312:	e02b      	b.n	801236c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012314:	4a17      	ldr	r2, [pc, #92]	; (8012374 <f_mount+0x88>)
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801231c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d005      	beq.n	8012330 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012324:	69b8      	ldr	r0, [r7, #24]
 8012326:	f7fe fc03 	bl	8010b30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	2200      	movs	r2, #0
 801232e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d002      	beq.n	801233c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2200      	movs	r2, #0
 801233a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	490d      	ldr	r1, [pc, #52]	; (8012374 <f_mount+0x88>)
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d002      	beq.n	8012352 <f_mount+0x66>
 801234c:	79fb      	ldrb	r3, [r7, #7]
 801234e:	2b01      	cmp	r3, #1
 8012350:	d001      	beq.n	8012356 <f_mount+0x6a>
 8012352:	2300      	movs	r3, #0
 8012354:	e00a      	b.n	801236c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012356:	f107 010c 	add.w	r1, r7, #12
 801235a:	f107 0308 	add.w	r3, r7, #8
 801235e:	2200      	movs	r2, #0
 8012360:	4618      	mov	r0, r3
 8012362:	f7ff fd07 	bl	8011d74 <find_volume>
 8012366:	4603      	mov	r3, r0
 8012368:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801236a:	7dfb      	ldrb	r3, [r7, #23]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3720      	adds	r7, #32
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	2003c49c 	.word	0x2003c49c

08012378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b098      	sub	sp, #96	; 0x60
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	4613      	mov	r3, r2
 8012384:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d101      	bne.n	8012390 <f_open+0x18>
 801238c:	2309      	movs	r3, #9
 801238e:	e1ba      	b.n	8012706 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012390:	79fb      	ldrb	r3, [r7, #7]
 8012392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012396:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012398:	79fa      	ldrb	r2, [r7, #7]
 801239a:	f107 0110 	add.w	r1, r7, #16
 801239e:	f107 0308 	add.w	r3, r7, #8
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ff fce6 	bl	8011d74 <find_volume>
 80123a8:	4603      	mov	r3, r0
 80123aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80123ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f040 819e 	bne.w	80126f4 <f_open+0x37c>
		dj.obj.fs = fs;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	f107 0314 	add.w	r3, r7, #20
 80123c2:	4611      	mov	r1, r2
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7ff fba5 	bl	8011b14 <follow_path>
 80123ca:	4603      	mov	r3, r0
 80123cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80123d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11a      	bne.n	801240e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80123d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123dc:	b25b      	sxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	da03      	bge.n	80123ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80123e2:	2306      	movs	r3, #6
 80123e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80123e8:	e011      	b.n	801240e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80123ea:	79fb      	ldrb	r3, [r7, #7]
 80123ec:	f023 0301 	bic.w	r3, r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	bf14      	ite	ne
 80123f4:	2301      	movne	r3, #1
 80123f6:	2300      	moveq	r3, #0
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	461a      	mov	r2, r3
 80123fc:	f107 0314 	add.w	r3, r7, #20
 8012400:	4611      	mov	r1, r2
 8012402:	4618      	mov	r0, r3
 8012404:	f7fe fa4c 	bl	80108a0 <chk_lock>
 8012408:	4603      	mov	r3, r0
 801240a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801240e:	79fb      	ldrb	r3, [r7, #7]
 8012410:	f003 031c 	and.w	r3, r3, #28
 8012414:	2b00      	cmp	r3, #0
 8012416:	d07e      	beq.n	8012516 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801241c:	2b00      	cmp	r3, #0
 801241e:	d017      	beq.n	8012450 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012424:	2b04      	cmp	r3, #4
 8012426:	d10e      	bne.n	8012446 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012428:	f7fe fa96 	bl	8010958 <enq_lock>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d006      	beq.n	8012440 <f_open+0xc8>
 8012432:	f107 0314 	add.w	r3, r7, #20
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff fa52 	bl	80118e0 <dir_register>
 801243c:	4603      	mov	r3, r0
 801243e:	e000      	b.n	8012442 <f_open+0xca>
 8012440:	2312      	movs	r3, #18
 8012442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012446:	79fb      	ldrb	r3, [r7, #7]
 8012448:	f043 0308 	orr.w	r3, r3, #8
 801244c:	71fb      	strb	r3, [r7, #7]
 801244e:	e010      	b.n	8012472 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012450:	7ebb      	ldrb	r3, [r7, #26]
 8012452:	f003 0311 	and.w	r3, r3, #17
 8012456:	2b00      	cmp	r3, #0
 8012458:	d003      	beq.n	8012462 <f_open+0xea>
					res = FR_DENIED;
 801245a:	2307      	movs	r3, #7
 801245c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012460:	e007      	b.n	8012472 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012462:	79fb      	ldrb	r3, [r7, #7]
 8012464:	f003 0304 	and.w	r3, r3, #4
 8012468:	2b00      	cmp	r3, #0
 801246a:	d002      	beq.n	8012472 <f_open+0xfa>
 801246c:	2308      	movs	r3, #8
 801246e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012476:	2b00      	cmp	r3, #0
 8012478:	d167      	bne.n	801254a <f_open+0x1d2>
 801247a:	79fb      	ldrb	r3, [r7, #7]
 801247c:	f003 0308 	and.w	r3, r3, #8
 8012480:	2b00      	cmp	r3, #0
 8012482:	d062      	beq.n	801254a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012484:	4ba2      	ldr	r3, [pc, #648]	; (8012710 <f_open+0x398>)
 8012486:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801248a:	330e      	adds	r3, #14
 801248c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801248e:	4618      	mov	r0, r3
 8012490:	f7fe f95c 	bl	801074c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012496:	3316      	adds	r3, #22
 8012498:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801249a:	4618      	mov	r0, r3
 801249c:	f7fe f956 	bl	801074c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80124a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a2:	330b      	adds	r3, #11
 80124a4:	2220      	movs	r2, #32
 80124a6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124ac:	4611      	mov	r1, r2
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7ff f925 	bl	80116fe <ld_clust>
 80124b4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124ba:	2200      	movs	r2, #0
 80124bc:	4618      	mov	r0, r3
 80124be:	f7ff f93d 	bl	801173c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80124c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124c4:	331c      	adds	r3, #28
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fe f93f 	bl	801074c <st_dword>
					fs->wflag = 1;
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2201      	movs	r2, #1
 80124d2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80124d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d037      	beq.n	801254a <f_open+0x1d2>
						dw = fs->winsect;
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124de:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80124e0:	f107 0314 	add.w	r3, r7, #20
 80124e4:	2200      	movs	r2, #0
 80124e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fe fe2d 	bl	8011148 <remove_chain>
 80124ee:	4603      	mov	r3, r0
 80124f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80124f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d126      	bne.n	801254a <f_open+0x1d2>
							res = move_window(fs, dw);
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012500:	4618      	mov	r0, r3
 8012502:	f7fe fb7d 	bl	8010c00 <move_window>
 8012506:	4603      	mov	r3, r0
 8012508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012510:	3a01      	subs	r2, #1
 8012512:	611a      	str	r2, [r3, #16]
 8012514:	e019      	b.n	801254a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801251a:	2b00      	cmp	r3, #0
 801251c:	d115      	bne.n	801254a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801251e:	7ebb      	ldrb	r3, [r7, #26]
 8012520:	f003 0310 	and.w	r3, r3, #16
 8012524:	2b00      	cmp	r3, #0
 8012526:	d003      	beq.n	8012530 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012528:	2304      	movs	r3, #4
 801252a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801252e:	e00c      	b.n	801254a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	f003 0302 	and.w	r3, r3, #2
 8012536:	2b00      	cmp	r3, #0
 8012538:	d007      	beq.n	801254a <f_open+0x1d2>
 801253a:	7ebb      	ldrb	r3, [r7, #26]
 801253c:	f003 0301 	and.w	r3, r3, #1
 8012540:	2b00      	cmp	r3, #0
 8012542:	d002      	beq.n	801254a <f_open+0x1d2>
						res = FR_DENIED;
 8012544:	2307      	movs	r3, #7
 8012546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801254a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801254e:	2b00      	cmp	r3, #0
 8012550:	d128      	bne.n	80125a4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012552:	79fb      	ldrb	r3, [r7, #7]
 8012554:	f003 0308 	and.w	r3, r3, #8
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012562:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801256c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	f023 0301 	bic.w	r3, r3, #1
 8012578:	2b00      	cmp	r3, #0
 801257a:	bf14      	ite	ne
 801257c:	2301      	movne	r3, #1
 801257e:	2300      	moveq	r3, #0
 8012580:	b2db      	uxtb	r3, r3
 8012582:	461a      	mov	r2, r3
 8012584:	f107 0314 	add.w	r3, r7, #20
 8012588:	4611      	mov	r1, r2
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fa06 	bl	801099c <inc_lock>
 8012590:	4602      	mov	r2, r0
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	691b      	ldr	r3, [r3, #16]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d102      	bne.n	80125a4 <f_open+0x22c>
 801259e:	2302      	movs	r3, #2
 80125a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80125a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f040 80a3 	bne.w	80126f4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125b2:	4611      	mov	r1, r2
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7ff f8a2 	bl	80116fe <ld_clust>
 80125ba:	4602      	mov	r2, r0
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80125c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125c2:	331c      	adds	r3, #28
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fe f883 	bl	80106d0 <ld_dword>
 80125ca:	4602      	mov	r2, r0
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2200      	movs	r2, #0
 80125d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80125d6:	693a      	ldr	r2, [r7, #16]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	88da      	ldrh	r2, [r3, #6]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	79fa      	ldrb	r2, [r7, #7]
 80125e8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2200      	movs	r2, #0
 80125ee:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2200      	movs	r2, #0
 80125f4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2200      	movs	r2, #0
 80125fa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	3330      	adds	r3, #48	; 0x30
 8012600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012604:	2100      	movs	r1, #0
 8012606:	4618      	mov	r0, r3
 8012608:	f7fe f8ed 	bl	80107e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	f003 0320 	and.w	r3, r3, #32
 8012612:	2b00      	cmp	r3, #0
 8012614:	d06e      	beq.n	80126f4 <f_open+0x37c>
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d06a      	beq.n	80126f4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	895b      	ldrh	r3, [r3, #10]
 801262a:	461a      	mov	r2, r3
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	899b      	ldrh	r3, [r3, #12]
 8012630:	fb03 f302 	mul.w	r3, r3, r2
 8012634:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	657b      	str	r3, [r7, #84]	; 0x54
 8012642:	e016      	b.n	8012672 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012648:	4618      	mov	r0, r3
 801264a:	f7fe fb96 	bl	8010d7a <get_fat>
 801264e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012652:	2b01      	cmp	r3, #1
 8012654:	d802      	bhi.n	801265c <f_open+0x2e4>
 8012656:	2302      	movs	r3, #2
 8012658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801265c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012662:	d102      	bne.n	801266a <f_open+0x2f2>
 8012664:	2301      	movs	r3, #1
 8012666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801266a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801266c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801266e:	1ad3      	subs	r3, r2, r3
 8012670:	657b      	str	r3, [r7, #84]	; 0x54
 8012672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012676:	2b00      	cmp	r3, #0
 8012678:	d103      	bne.n	8012682 <f_open+0x30a>
 801267a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801267e:	429a      	cmp	r2, r3
 8012680:	d8e0      	bhi.n	8012644 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012686:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801268c:	2b00      	cmp	r3, #0
 801268e:	d131      	bne.n	80126f4 <f_open+0x37c>
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	899b      	ldrh	r3, [r3, #12]
 8012694:	461a      	mov	r2, r3
 8012696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012698:	fbb3 f1f2 	udiv	r1, r3, r2
 801269c:	fb02 f201 	mul.w	r2, r2, r1
 80126a0:	1a9b      	subs	r3, r3, r2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d026      	beq.n	80126f4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fe fb46 	bl	8010d3c <clust2sect>
 80126b0:	6478      	str	r0, [r7, #68]	; 0x44
 80126b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d103      	bne.n	80126c0 <f_open+0x348>
						res = FR_INT_ERR;
 80126b8:	2302      	movs	r3, #2
 80126ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80126be:	e019      	b.n	80126f4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	899b      	ldrh	r3, [r3, #12]
 80126c4:	461a      	mov	r2, r3
 80126c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80126cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ce:	441a      	add	r2, r3
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	7858      	ldrb	r0, [r3, #1]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6a1a      	ldr	r2, [r3, #32]
 80126e2:	2301      	movs	r3, #1
 80126e4:	f7fd ff7e 	bl	80105e4 <disk_read>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d002      	beq.n	80126f4 <f_open+0x37c>
 80126ee:	2301      	movs	r3, #1
 80126f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80126f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d002      	beq.n	8012702 <f_open+0x38a>
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2200      	movs	r2, #0
 8012700:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012706:	4618      	mov	r0, r3
 8012708:	3760      	adds	r7, #96	; 0x60
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	274a0000 	.word	0x274a0000

08012714 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08e      	sub	sp, #56	; 0x38
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2200      	movs	r2, #0
 801272a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f107 0214 	add.w	r2, r7, #20
 8012732:	4611      	mov	r1, r2
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff fda3 	bl	8012280 <validate>
 801273a:	4603      	mov	r3, r0
 801273c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012744:	2b00      	cmp	r3, #0
 8012746:	d107      	bne.n	8012758 <f_read+0x44>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	7d5b      	ldrb	r3, [r3, #21]
 801274c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <f_read+0x4a>
 8012758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801275c:	e135      	b.n	80129ca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	7d1b      	ldrb	r3, [r3, #20]
 8012762:	f003 0301 	and.w	r3, r3, #1
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <f_read+0x5a>
 801276a:	2307      	movs	r3, #7
 801276c:	e12d      	b.n	80129ca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	68da      	ldr	r2, [r3, #12]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	699b      	ldr	r3, [r3, #24]
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	6a3b      	ldr	r3, [r7, #32]
 801277e:	429a      	cmp	r2, r3
 8012780:	f240 811e 	bls.w	80129c0 <f_read+0x2ac>
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012788:	e11a      	b.n	80129c0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	699b      	ldr	r3, [r3, #24]
 801278e:	697a      	ldr	r2, [r7, #20]
 8012790:	8992      	ldrh	r2, [r2, #12]
 8012792:	fbb3 f1f2 	udiv	r1, r3, r2
 8012796:	fb02 f201 	mul.w	r2, r2, r1
 801279a:	1a9b      	subs	r3, r3, r2
 801279c:	2b00      	cmp	r3, #0
 801279e:	f040 80d5 	bne.w	801294c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	699b      	ldr	r3, [r3, #24]
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	8992      	ldrh	r2, [r2, #12]
 80127aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80127ae:	697a      	ldr	r2, [r7, #20]
 80127b0:	8952      	ldrh	r2, [r2, #10]
 80127b2:	3a01      	subs	r2, #1
 80127b4:	4013      	ands	r3, r2
 80127b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d12f      	bne.n	801281e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d103      	bne.n	80127ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	689b      	ldr	r3, [r3, #8]
 80127ca:	633b      	str	r3, [r7, #48]	; 0x30
 80127cc:	e013      	b.n	80127f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d007      	beq.n	80127e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	699b      	ldr	r3, [r3, #24]
 80127da:	4619      	mov	r1, r3
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f7fe fdb0 	bl	8011342 <clmt_clust>
 80127e2:	6338      	str	r0, [r7, #48]	; 0x30
 80127e4:	e007      	b.n	80127f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	4619      	mov	r1, r3
 80127ee:	4610      	mov	r0, r2
 80127f0:	f7fe fac3 	bl	8010d7a <get_fat>
 80127f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80127f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d804      	bhi.n	8012806 <f_read+0xf2>
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2202      	movs	r2, #2
 8012800:	755a      	strb	r2, [r3, #21]
 8012802:	2302      	movs	r3, #2
 8012804:	e0e1      	b.n	80129ca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801280c:	d104      	bne.n	8012818 <f_read+0x104>
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	2201      	movs	r2, #1
 8012812:	755a      	strb	r2, [r3, #21]
 8012814:	2301      	movs	r3, #1
 8012816:	e0d8      	b.n	80129ca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801281c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	69db      	ldr	r3, [r3, #28]
 8012824:	4619      	mov	r1, r3
 8012826:	4610      	mov	r0, r2
 8012828:	f7fe fa88 	bl	8010d3c <clust2sect>
 801282c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d104      	bne.n	801283e <f_read+0x12a>
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2202      	movs	r2, #2
 8012838:	755a      	strb	r2, [r3, #21]
 801283a:	2302      	movs	r3, #2
 801283c:	e0c5      	b.n	80129ca <f_read+0x2b6>
			sect += csect;
 801283e:	69ba      	ldr	r2, [r7, #24]
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	899b      	ldrh	r3, [r3, #12]
 801284a:	461a      	mov	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012852:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012856:	2b00      	cmp	r3, #0
 8012858:	d041      	beq.n	80128de <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801285a:	69fa      	ldr	r2, [r7, #28]
 801285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285e:	4413      	add	r3, r2
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	8952      	ldrh	r2, [r2, #10]
 8012864:	4293      	cmp	r3, r2
 8012866:	d905      	bls.n	8012874 <f_read+0x160>
					cc = fs->csize - csect;
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	895b      	ldrh	r3, [r3, #10]
 801286c:	461a      	mov	r2, r3
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	7858      	ldrb	r0, [r3, #1]
 8012878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287a:	69ba      	ldr	r2, [r7, #24]
 801287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801287e:	f7fd feb1 	bl	80105e4 <disk_read>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d004      	beq.n	8012892 <f_read+0x17e>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2201      	movs	r2, #1
 801288c:	755a      	strb	r2, [r3, #21]
 801288e:	2301      	movs	r3, #1
 8012890:	e09b      	b.n	80129ca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	7d1b      	ldrb	r3, [r3, #20]
 8012896:	b25b      	sxtb	r3, r3
 8012898:	2b00      	cmp	r3, #0
 801289a:	da18      	bge.n	80128ce <f_read+0x1ba>
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6a1a      	ldr	r2, [r3, #32]
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	1ad3      	subs	r3, r2, r3
 80128a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d911      	bls.n	80128ce <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	6a1a      	ldr	r2, [r3, #32]
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	697a      	ldr	r2, [r7, #20]
 80128b4:	8992      	ldrh	r2, [r2, #12]
 80128b6:	fb02 f303 	mul.w	r3, r2, r3
 80128ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128bc:	18d0      	adds	r0, r2, r3
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	899b      	ldrh	r3, [r3, #12]
 80128c8:	461a      	mov	r2, r3
 80128ca:	f7fd ff6b 	bl	80107a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	899b      	ldrh	r3, [r3, #12]
 80128d2:	461a      	mov	r2, r3
 80128d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d6:	fb02 f303 	mul.w	r3, r2, r3
 80128da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80128dc:	e05c      	b.n	8012998 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	6a1b      	ldr	r3, [r3, #32]
 80128e2:	69ba      	ldr	r2, [r7, #24]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d02e      	beq.n	8012946 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	7d1b      	ldrb	r3, [r3, #20]
 80128ec:	b25b      	sxtb	r3, r3
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da18      	bge.n	8012924 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	7858      	ldrb	r0, [r3, #1]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	6a1a      	ldr	r2, [r3, #32]
 8012900:	2301      	movs	r3, #1
 8012902:	f7fd fe8f 	bl	8010624 <disk_write>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d004      	beq.n	8012916 <f_read+0x202>
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2201      	movs	r2, #1
 8012910:	755a      	strb	r2, [r3, #21]
 8012912:	2301      	movs	r3, #1
 8012914:	e059      	b.n	80129ca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	7d1b      	ldrb	r3, [r3, #20]
 801291a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801291e:	b2da      	uxtb	r2, r3
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	7858      	ldrb	r0, [r3, #1]
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801292e:	2301      	movs	r3, #1
 8012930:	69ba      	ldr	r2, [r7, #24]
 8012932:	f7fd fe57 	bl	80105e4 <disk_read>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d004      	beq.n	8012946 <f_read+0x232>
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2201      	movs	r2, #1
 8012940:	755a      	strb	r2, [r3, #21]
 8012942:	2301      	movs	r3, #1
 8012944:	e041      	b.n	80129ca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	69ba      	ldr	r2, [r7, #24]
 801294a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	899b      	ldrh	r3, [r3, #12]
 8012950:	4618      	mov	r0, r3
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	699b      	ldr	r3, [r3, #24]
 8012956:	697a      	ldr	r2, [r7, #20]
 8012958:	8992      	ldrh	r2, [r2, #12]
 801295a:	fbb3 f1f2 	udiv	r1, r3, r2
 801295e:	fb02 f201 	mul.w	r2, r2, r1
 8012962:	1a9b      	subs	r3, r3, r2
 8012964:	1ac3      	subs	r3, r0, r3
 8012966:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	429a      	cmp	r2, r3
 801296e:	d901      	bls.n	8012974 <f_read+0x260>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	699b      	ldr	r3, [r3, #24]
 801297e:	697a      	ldr	r2, [r7, #20]
 8012980:	8992      	ldrh	r2, [r2, #12]
 8012982:	fbb3 f0f2 	udiv	r0, r3, r2
 8012986:	fb02 f200 	mul.w	r2, r2, r0
 801298a:	1a9b      	subs	r3, r3, r2
 801298c:	440b      	add	r3, r1
 801298e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012990:	4619      	mov	r1, r3
 8012992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012994:	f7fd ff06 	bl	80107a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299c:	4413      	add	r3, r2
 801299e:	627b      	str	r3, [r7, #36]	; 0x24
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	699a      	ldr	r2, [r3, #24]
 80129a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a6:	441a      	add	r2, r3
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	619a      	str	r2, [r3, #24]
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	441a      	add	r2, r3
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f47f aee1 	bne.w	801278a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3738      	adds	r7, #56	; 0x38
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b08c      	sub	sp, #48	; 0x30
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	60b9      	str	r1, [r7, #8]
 80129dc:	607a      	str	r2, [r7, #4]
 80129de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	2200      	movs	r2, #0
 80129e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f107 0210 	add.w	r2, r7, #16
 80129f0:	4611      	mov	r1, r2
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7ff fc44 	bl	8012280 <validate>
 80129f8:	4603      	mov	r3, r0
 80129fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80129fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d107      	bne.n	8012a16 <f_write+0x44>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	7d5b      	ldrb	r3, [r3, #21]
 8012a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d002      	beq.n	8012a1c <f_write+0x4a>
 8012a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a1a:	e16a      	b.n	8012cf2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	7d1b      	ldrb	r3, [r3, #20]
 8012a20:	f003 0302 	and.w	r3, r3, #2
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d101      	bne.n	8012a2c <f_write+0x5a>
 8012a28:	2307      	movs	r3, #7
 8012a2a:	e162      	b.n	8012cf2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	699a      	ldr	r2, [r3, #24]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	441a      	add	r2, r3
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	699b      	ldr	r3, [r3, #24]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	f080 814c 	bcs.w	8012cd6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	699b      	ldr	r3, [r3, #24]
 8012a42:	43db      	mvns	r3, r3
 8012a44:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012a46:	e146      	b.n	8012cd6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	699b      	ldr	r3, [r3, #24]
 8012a4c:	693a      	ldr	r2, [r7, #16]
 8012a4e:	8992      	ldrh	r2, [r2, #12]
 8012a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a54:	fb02 f201 	mul.w	r2, r2, r1
 8012a58:	1a9b      	subs	r3, r3, r2
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	f040 80f1 	bne.w	8012c42 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	699b      	ldr	r3, [r3, #24]
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	8992      	ldrh	r2, [r2, #12]
 8012a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a6c:	693a      	ldr	r2, [r7, #16]
 8012a6e:	8952      	ldrh	r2, [r2, #10]
 8012a70:	3a01      	subs	r2, #1
 8012a72:	4013      	ands	r3, r2
 8012a74:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012a76:	69bb      	ldr	r3, [r7, #24]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d143      	bne.n	8012b04 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	699b      	ldr	r3, [r3, #24]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10c      	bne.n	8012a9e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d11a      	bne.n	8012ac6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2100      	movs	r1, #0
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7fe fbbc 	bl	8011212 <create_chain>
 8012a9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8012a9c:	e013      	b.n	8012ac6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d007      	beq.n	8012ab6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	699b      	ldr	r3, [r3, #24]
 8012aaa:	4619      	mov	r1, r3
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f7fe fc48 	bl	8011342 <clmt_clust>
 8012ab2:	62b8      	str	r0, [r7, #40]	; 0x28
 8012ab4:	e007      	b.n	8012ac6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	69db      	ldr	r3, [r3, #28]
 8012abc:	4619      	mov	r1, r3
 8012abe:	4610      	mov	r0, r2
 8012ac0:	f7fe fba7 	bl	8011212 <create_chain>
 8012ac4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	f000 8109 	beq.w	8012ce0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d104      	bne.n	8012ade <f_write+0x10c>
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	755a      	strb	r2, [r3, #21]
 8012ada:	2302      	movs	r3, #2
 8012adc:	e109      	b.n	8012cf2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae4:	d104      	bne.n	8012af0 <f_write+0x11e>
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2201      	movs	r2, #1
 8012aea:	755a      	strb	r2, [r3, #21]
 8012aec:	2301      	movs	r3, #1
 8012aee:	e100      	b.n	8012cf2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012af4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d102      	bne.n	8012b04 <f_write+0x132>
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	7d1b      	ldrb	r3, [r3, #20]
 8012b08:	b25b      	sxtb	r3, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	da18      	bge.n	8012b40 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	7858      	ldrb	r0, [r3, #1]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	6a1a      	ldr	r2, [r3, #32]
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	f7fd fd81 	bl	8010624 <disk_write>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d004      	beq.n	8012b32 <f_write+0x160>
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	755a      	strb	r2, [r3, #21]
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e0df      	b.n	8012cf2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	7d1b      	ldrb	r3, [r3, #20]
 8012b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012b40:	693a      	ldr	r2, [r7, #16]
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	69db      	ldr	r3, [r3, #28]
 8012b46:	4619      	mov	r1, r3
 8012b48:	4610      	mov	r0, r2
 8012b4a:	f7fe f8f7 	bl	8010d3c <clust2sect>
 8012b4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d104      	bne.n	8012b60 <f_write+0x18e>
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	755a      	strb	r2, [r3, #21]
 8012b5c:	2302      	movs	r3, #2
 8012b5e:	e0c8      	b.n	8012cf2 <f_write+0x320>
			sect += csect;
 8012b60:	697a      	ldr	r2, [r7, #20]
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	4413      	add	r3, r2
 8012b66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	899b      	ldrh	r3, [r3, #12]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012b76:	6a3b      	ldr	r3, [r7, #32]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d043      	beq.n	8012c04 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b7c:	69ba      	ldr	r2, [r7, #24]
 8012b7e:	6a3b      	ldr	r3, [r7, #32]
 8012b80:	4413      	add	r3, r2
 8012b82:	693a      	ldr	r2, [r7, #16]
 8012b84:	8952      	ldrh	r2, [r2, #10]
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d905      	bls.n	8012b96 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	895b      	ldrh	r3, [r3, #10]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	1ad3      	subs	r3, r2, r3
 8012b94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	7858      	ldrb	r0, [r3, #1]
 8012b9a:	6a3b      	ldr	r3, [r7, #32]
 8012b9c:	697a      	ldr	r2, [r7, #20]
 8012b9e:	69f9      	ldr	r1, [r7, #28]
 8012ba0:	f7fd fd40 	bl	8010624 <disk_write>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d004      	beq.n	8012bb4 <f_write+0x1e2>
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2201      	movs	r2, #1
 8012bae:	755a      	strb	r2, [r3, #21]
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e09e      	b.n	8012cf2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	6a1a      	ldr	r2, [r3, #32]
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	1ad3      	subs	r3, r2, r3
 8012bbc:	6a3a      	ldr	r2, [r7, #32]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d918      	bls.n	8012bf4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	6a1a      	ldr	r2, [r3, #32]
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	1ad3      	subs	r3, r2, r3
 8012bd0:	693a      	ldr	r2, [r7, #16]
 8012bd2:	8992      	ldrh	r2, [r2, #12]
 8012bd4:	fb02 f303 	mul.w	r3, r2, r3
 8012bd8:	69fa      	ldr	r2, [r7, #28]
 8012bda:	18d1      	adds	r1, r2, r3
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	899b      	ldrh	r3, [r3, #12]
 8012be0:	461a      	mov	r2, r3
 8012be2:	f7fd fddf 	bl	80107a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	7d1b      	ldrb	r3, [r3, #20]
 8012bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bee:	b2da      	uxtb	r2, r3
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	899b      	ldrh	r3, [r3, #12]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	6a3b      	ldr	r3, [r7, #32]
 8012bfc:	fb02 f303 	mul.w	r3, r2, r3
 8012c00:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012c02:	e04b      	b.n	8012c9c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	6a1b      	ldr	r3, [r3, #32]
 8012c08:	697a      	ldr	r2, [r7, #20]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d016      	beq.n	8012c3c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	699a      	ldr	r2, [r3, #24]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d210      	bcs.n	8012c3c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	7858      	ldrb	r0, [r3, #1]
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c24:	2301      	movs	r3, #1
 8012c26:	697a      	ldr	r2, [r7, #20]
 8012c28:	f7fd fcdc 	bl	80105e4 <disk_read>
 8012c2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d004      	beq.n	8012c3c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2201      	movs	r2, #1
 8012c36:	755a      	strb	r2, [r3, #21]
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e05a      	b.n	8012cf2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	697a      	ldr	r2, [r7, #20]
 8012c40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	899b      	ldrh	r3, [r3, #12]
 8012c46:	4618      	mov	r0, r3
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	693a      	ldr	r2, [r7, #16]
 8012c4e:	8992      	ldrh	r2, [r2, #12]
 8012c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c54:	fb02 f201 	mul.w	r2, r2, r1
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	1ac3      	subs	r3, r0, r3
 8012c5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d901      	bls.n	8012c6a <f_write+0x298>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	699b      	ldr	r3, [r3, #24]
 8012c74:	693a      	ldr	r2, [r7, #16]
 8012c76:	8992      	ldrh	r2, [r2, #12]
 8012c78:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c7c:	fb02 f200 	mul.w	r2, r2, r0
 8012c80:	1a9b      	subs	r3, r3, r2
 8012c82:	440b      	add	r3, r1
 8012c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c86:	69f9      	ldr	r1, [r7, #28]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7fd fd8b 	bl	80107a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	7d1b      	ldrb	r3, [r3, #20]
 8012c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012c9c:	69fa      	ldr	r2, [r7, #28]
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	4413      	add	r3, r2
 8012ca2:	61fb      	str	r3, [r7, #28]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	699a      	ldr	r2, [r3, #24]
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	441a      	add	r2, r3
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	619a      	str	r2, [r3, #24]
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	68da      	ldr	r2, [r3, #12]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	699b      	ldr	r3, [r3, #24]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	bf38      	it	cc
 8012cbc:	461a      	movcc	r2, r3
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	60da      	str	r2, [r3, #12]
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc8:	441a      	add	r2, r3
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	601a      	str	r2, [r3, #0]
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	1ad3      	subs	r3, r2, r3
 8012cd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	f47f aeb5 	bne.w	8012a48 <f_write+0x76>
 8012cde:	e000      	b.n	8012ce2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012ce0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	7d1b      	ldrb	r3, [r3, #20]
 8012ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3730      	adds	r7, #48	; 0x30
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
	...

08012cfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b086      	sub	sp, #24
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f107 0208 	add.w	r2, r7, #8
 8012d0a:	4611      	mov	r1, r2
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff fab7 	bl	8012280 <validate>
 8012d12:	4603      	mov	r3, r0
 8012d14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d16:	7dfb      	ldrb	r3, [r7, #23]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d167      	bne.n	8012dec <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	7d1b      	ldrb	r3, [r3, #20]
 8012d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d061      	beq.n	8012dec <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	7d1b      	ldrb	r3, [r3, #20]
 8012d2c:	b25b      	sxtb	r3, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	da15      	bge.n	8012d5e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	7858      	ldrb	r0, [r3, #1]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6a1a      	ldr	r2, [r3, #32]
 8012d40:	2301      	movs	r3, #1
 8012d42:	f7fd fc6f 	bl	8010624 <disk_write>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <f_sync+0x54>
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	e04e      	b.n	8012dee <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	7d1b      	ldrb	r3, [r3, #20]
 8012d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012d5e:	4b26      	ldr	r3, [pc, #152]	; (8012df8 <f_sync+0xfc>)
 8012d60:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d68:	4619      	mov	r1, r3
 8012d6a:	4610      	mov	r0, r2
 8012d6c:	f7fd ff48 	bl	8010c00 <move_window>
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d138      	bne.n	8012dec <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	330b      	adds	r3, #11
 8012d84:	781a      	ldrb	r2, [r3, #0]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	330b      	adds	r3, #11
 8012d8a:	f042 0220 	orr.w	r2, r2, #32
 8012d8e:	b2d2      	uxtb	r2, r2
 8012d90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6818      	ldr	r0, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	689b      	ldr	r3, [r3, #8]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	68f9      	ldr	r1, [r7, #12]
 8012d9e:	f7fe fccd 	bl	801173c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f103 021c 	add.w	r2, r3, #28
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7fd fccc 	bl	801074c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	3316      	adds	r3, #22
 8012db8:	6939      	ldr	r1, [r7, #16]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fd fcc6 	bl	801074c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	3312      	adds	r3, #18
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fd fca5 	bl	8010716 <st_word>
					fs->wflag = 1;
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fd ff41 	bl	8010c5c <sync_fs>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	7d1b      	ldrb	r3, [r3, #20]
 8012de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3718      	adds	r7, #24
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	274a0000 	.word	0x274a0000

08012dfc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff ff79 	bl	8012cfc <f_sync>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d118      	bne.n	8012e46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f107 0208 	add.w	r2, r7, #8
 8012e1a:	4611      	mov	r1, r2
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff fa2f 	bl	8012280 <validate>
 8012e22:	4603      	mov	r3, r0
 8012e24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012e26:	7bfb      	ldrb	r3, [r7, #15]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10c      	bne.n	8012e46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fd fe41 	bl	8010ab8 <dec_lock>
 8012e36:	4603      	mov	r3, r0
 8012e38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012e3a:	7bfb      	ldrb	r3, [r7, #15]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d102      	bne.n	8012e46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3710      	adds	r7, #16
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012e50:	b590      	push	{r4, r7, lr}
 8012e52:	b091      	sub	sp, #68	; 0x44
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012e58:	f107 0108 	add.w	r1, r7, #8
 8012e5c:	1d3b      	adds	r3, r7, #4
 8012e5e:	2200      	movs	r2, #0
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fe ff87 	bl	8011d74 <find_volume>
 8012e66:	4603      	mov	r3, r0
 8012e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d131      	bne.n	8012ed8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	f107 030c 	add.w	r3, r7, #12
 8012e7e:	4611      	mov	r1, r2
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fe fe47 	bl	8011b14 <follow_path>
 8012e86:	4603      	mov	r3, r0
 8012e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d11a      	bne.n	8012eca <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012e94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012e98:	b25b      	sxtb	r3, r3
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	da03      	bge.n	8012ea6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	697a      	ldr	r2, [r7, #20]
 8012ea2:	619a      	str	r2, [r3, #24]
 8012ea4:	e011      	b.n	8012eca <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012ea6:	7cbb      	ldrb	r3, [r7, #18]
 8012ea8:	f003 0310 	and.w	r3, r3, #16
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d009      	beq.n	8012ec4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eb4:	68bc      	ldr	r4, [r7, #8]
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7fe fc20 	bl	80116fe <ld_clust>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	61a3      	str	r3, [r4, #24]
 8012ec2:	e002      	b.n	8012eca <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012ec4:	2305      	movs	r3, #5
 8012ec6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012eca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ece:	2b04      	cmp	r3, #4
 8012ed0:	d102      	bne.n	8012ed8 <f_chdir+0x88>
 8012ed2:	2305      	movs	r3, #5
 8012ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012ed8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3744      	adds	r7, #68	; 0x44
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd90      	pop	{r4, r7, pc}

08012ee4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b090      	sub	sp, #64	; 0x40
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f107 0208 	add.w	r2, r7, #8
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7ff f9c2 	bl	8012280 <validate>
 8012efc:	4603      	mov	r3, r0
 8012efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d103      	bne.n	8012f12 <f_lseek+0x2e>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	7d5b      	ldrb	r3, [r3, #21]
 8012f0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012f12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <f_lseek+0x3c>
 8012f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f1e:	e201      	b.n	8013324 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 80d9 	beq.w	80130dc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f30:	d15a      	bne.n	8012fe8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f36:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3a:	1d1a      	adds	r2, r3, #4
 8012f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	617b      	str	r3, [r7, #20]
 8012f42:	2302      	movs	r3, #2
 8012f44:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	689b      	ldr	r3, [r3, #8]
 8012f4a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d03a      	beq.n	8012fc8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f54:	613b      	str	r3, [r7, #16]
 8012f56:	2300      	movs	r3, #0
 8012f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5c:	3302      	adds	r3, #2
 8012f5e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f62:	60fb      	str	r3, [r7, #12]
 8012f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f66:	3301      	adds	r3, #1
 8012f68:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fd ff03 	bl	8010d7a <get_fat>
 8012f74:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d804      	bhi.n	8012f86 <f_lseek+0xa2>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2202      	movs	r2, #2
 8012f80:	755a      	strb	r2, [r3, #21]
 8012f82:	2302      	movs	r3, #2
 8012f84:	e1ce      	b.n	8013324 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f8c:	d104      	bne.n	8012f98 <f_lseek+0xb4>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2201      	movs	r2, #1
 8012f92:	755a      	strb	r2, [r3, #21]
 8012f94:	2301      	movs	r3, #1
 8012f96:	e1c5      	b.n	8013324 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d0de      	beq.n	8012f60 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d809      	bhi.n	8012fbe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fac:	1d1a      	adds	r2, r3, #4
 8012fae:	627a      	str	r2, [r7, #36]	; 0x24
 8012fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fb2:	601a      	str	r2, [r3, #0]
 8012fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb6:	1d1a      	adds	r2, r3, #4
 8012fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	69db      	ldr	r3, [r3, #28]
 8012fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d3c4      	bcc.n	8012f52 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d803      	bhi.n	8012fe0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	2200      	movs	r2, #0
 8012fdc:	601a      	str	r2, [r3, #0]
 8012fde:	e19f      	b.n	8013320 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012fe0:	2311      	movs	r3, #17
 8012fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012fe6:	e19b      	b.n	8013320 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d902      	bls.n	8012ff8 <f_lseek+0x114>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	683a      	ldr	r2, [r7, #0]
 8012ffc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	f000 818d 	beq.w	8013320 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	3b01      	subs	r3, #1
 801300a:	4619      	mov	r1, r3
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7fe f998 	bl	8011342 <clmt_clust>
 8013012:	4602      	mov	r2, r0
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013018:	68ba      	ldr	r2, [r7, #8]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	69db      	ldr	r3, [r3, #28]
 801301e:	4619      	mov	r1, r3
 8013020:	4610      	mov	r0, r2
 8013022:	f7fd fe8b 	bl	8010d3c <clust2sect>
 8013026:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <f_lseek+0x154>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2202      	movs	r2, #2
 8013032:	755a      	strb	r2, [r3, #21]
 8013034:	2302      	movs	r3, #2
 8013036:	e175      	b.n	8013324 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	3b01      	subs	r3, #1
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	8992      	ldrh	r2, [r2, #12]
 8013040:	fbb3 f3f2 	udiv	r3, r3, r2
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	8952      	ldrh	r2, [r2, #10]
 8013048:	3a01      	subs	r2, #1
 801304a:	4013      	ands	r3, r2
 801304c:	69ba      	ldr	r2, [r7, #24]
 801304e:	4413      	add	r3, r2
 8013050:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	699b      	ldr	r3, [r3, #24]
 8013056:	68ba      	ldr	r2, [r7, #8]
 8013058:	8992      	ldrh	r2, [r2, #12]
 801305a:	fbb3 f1f2 	udiv	r1, r3, r2
 801305e:	fb02 f201 	mul.w	r2, r2, r1
 8013062:	1a9b      	subs	r3, r3, r2
 8013064:	2b00      	cmp	r3, #0
 8013066:	f000 815b 	beq.w	8013320 <f_lseek+0x43c>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6a1b      	ldr	r3, [r3, #32]
 801306e:	69ba      	ldr	r2, [r7, #24]
 8013070:	429a      	cmp	r2, r3
 8013072:	f000 8155 	beq.w	8013320 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	7d1b      	ldrb	r3, [r3, #20]
 801307a:	b25b      	sxtb	r3, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	da18      	bge.n	80130b2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	7858      	ldrb	r0, [r3, #1]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6a1a      	ldr	r2, [r3, #32]
 801308e:	2301      	movs	r3, #1
 8013090:	f7fd fac8 	bl	8010624 <disk_write>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d004      	beq.n	80130a4 <f_lseek+0x1c0>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2201      	movs	r2, #1
 801309e:	755a      	strb	r2, [r3, #21]
 80130a0:	2301      	movs	r3, #1
 80130a2:	e13f      	b.n	8013324 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	7d1b      	ldrb	r3, [r3, #20]
 80130a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130ac:	b2da      	uxtb	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	7858      	ldrb	r0, [r3, #1]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130bc:	2301      	movs	r3, #1
 80130be:	69ba      	ldr	r2, [r7, #24]
 80130c0:	f7fd fa90 	bl	80105e4 <disk_read>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d004      	beq.n	80130d4 <f_lseek+0x1f0>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2201      	movs	r2, #1
 80130ce:	755a      	strb	r2, [r3, #21]
 80130d0:	2301      	movs	r3, #1
 80130d2:	e127      	b.n	8013324 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	69ba      	ldr	r2, [r7, #24]
 80130d8:	621a      	str	r2, [r3, #32]
 80130da:	e121      	b.n	8013320 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d908      	bls.n	80130f8 <f_lseek+0x214>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	7d1b      	ldrb	r3, [r3, #20]
 80130ea:	f003 0302 	and.w	r3, r3, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d102      	bne.n	80130f8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	637b      	str	r3, [r7, #52]	; 0x34
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013106:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	f000 80b5 	beq.w	801327a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	895b      	ldrh	r3, [r3, #10]
 8013114:	461a      	mov	r2, r3
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	899b      	ldrh	r3, [r3, #12]
 801311a:	fb03 f302 	mul.w	r3, r3, r2
 801311e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d01b      	beq.n	801315e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	1e5a      	subs	r2, r3, #1
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	1e59      	subs	r1, r3, #1
 8013134:	69fb      	ldr	r3, [r7, #28]
 8013136:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801313a:	429a      	cmp	r2, r3
 801313c:	d30f      	bcc.n	801315e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	1e5a      	subs	r2, r3, #1
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	425b      	negs	r3, r3
 8013146:	401a      	ands	r2, r3
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	699b      	ldr	r3, [r3, #24]
 8013150:	683a      	ldr	r2, [r7, #0]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	69db      	ldr	r3, [r3, #28]
 801315a:	63bb      	str	r3, [r7, #56]	; 0x38
 801315c:	e022      	b.n	80131a4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	2b00      	cmp	r3, #0
 8013168:	d119      	bne.n	801319e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2100      	movs	r1, #0
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe f84f 	bl	8011212 <create_chain>
 8013174:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013178:	2b01      	cmp	r3, #1
 801317a:	d104      	bne.n	8013186 <f_lseek+0x2a2>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2202      	movs	r2, #2
 8013180:	755a      	strb	r2, [r3, #21]
 8013182:	2302      	movs	r3, #2
 8013184:	e0ce      	b.n	8013324 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d104      	bne.n	8013198 <f_lseek+0x2b4>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2201      	movs	r2, #1
 8013192:	755a      	strb	r2, [r3, #21]
 8013194:	2301      	movs	r3, #1
 8013196:	e0c5      	b.n	8013324 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801319c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131a2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d067      	beq.n	801327a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80131aa:	e03a      	b.n	8013222 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80131ac:	683a      	ldr	r2, [r7, #0]
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	699a      	ldr	r2, [r3, #24]
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	441a      	add	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	7d1b      	ldrb	r3, [r3, #20]
 80131c4:	f003 0302 	and.w	r3, r3, #2
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00b      	beq.n	80131e4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe f81e 	bl	8011212 <create_chain>
 80131d6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80131d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d108      	bne.n	80131f0 <f_lseek+0x30c>
							ofs = 0; break;
 80131de:	2300      	movs	r3, #0
 80131e0:	603b      	str	r3, [r7, #0]
 80131e2:	e022      	b.n	801322a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fd fdc6 	bl	8010d7a <get_fat>
 80131ee:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131f6:	d104      	bne.n	8013202 <f_lseek+0x31e>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	755a      	strb	r2, [r3, #21]
 80131fe:	2301      	movs	r3, #1
 8013200:	e090      	b.n	8013324 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	2b01      	cmp	r3, #1
 8013206:	d904      	bls.n	8013212 <f_lseek+0x32e>
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801320e:	429a      	cmp	r2, r3
 8013210:	d304      	bcc.n	801321c <f_lseek+0x338>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2202      	movs	r2, #2
 8013216:	755a      	strb	r2, [r3, #21]
 8013218:	2302      	movs	r3, #2
 801321a:	e083      	b.n	8013324 <f_lseek+0x440>
					fp->clust = clst;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013220:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013222:	683a      	ldr	r2, [r7, #0]
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	429a      	cmp	r2, r3
 8013228:	d8c0      	bhi.n	80131ac <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	699a      	ldr	r2, [r3, #24]
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	441a      	add	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	899b      	ldrh	r3, [r3, #12]
 801323a:	461a      	mov	r2, r3
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013242:	fb02 f201 	mul.w	r2, r2, r1
 8013246:	1a9b      	subs	r3, r3, r2
 8013248:	2b00      	cmp	r3, #0
 801324a:	d016      	beq.n	801327a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013250:	4618      	mov	r0, r3
 8013252:	f7fd fd73 	bl	8010d3c <clust2sect>
 8013256:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <f_lseek+0x384>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2202      	movs	r2, #2
 8013262:	755a      	strb	r2, [r3, #21]
 8013264:	2302      	movs	r3, #2
 8013266:	e05d      	b.n	8013324 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	899b      	ldrh	r3, [r3, #12]
 801326c:	461a      	mov	r2, r3
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	fbb3 f3f2 	udiv	r3, r3, r2
 8013274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013276:	4413      	add	r3, r2
 8013278:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	699a      	ldr	r2, [r3, #24]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	429a      	cmp	r2, r3
 8013284:	d90a      	bls.n	801329c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	699a      	ldr	r2, [r3, #24]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	7d1b      	ldrb	r3, [r3, #20]
 8013292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013296:	b2da      	uxtb	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	699b      	ldr	r3, [r3, #24]
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	8992      	ldrh	r2, [r2, #12]
 80132a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80132a8:	fb02 f201 	mul.w	r2, r2, r1
 80132ac:	1a9b      	subs	r3, r3, r2
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d036      	beq.n	8013320 <f_lseek+0x43c>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6a1b      	ldr	r3, [r3, #32]
 80132b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d031      	beq.n	8013320 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7d1b      	ldrb	r3, [r3, #20]
 80132c0:	b25b      	sxtb	r3, r3
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	da18      	bge.n	80132f8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	7858      	ldrb	r0, [r3, #1]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6a1a      	ldr	r2, [r3, #32]
 80132d4:	2301      	movs	r3, #1
 80132d6:	f7fd f9a5 	bl	8010624 <disk_write>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d004      	beq.n	80132ea <f_lseek+0x406>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2201      	movs	r2, #1
 80132e4:	755a      	strb	r2, [r3, #21]
 80132e6:	2301      	movs	r3, #1
 80132e8:	e01c      	b.n	8013324 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	7d1b      	ldrb	r3, [r3, #20]
 80132ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132f2:	b2da      	uxtb	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	7858      	ldrb	r0, [r3, #1]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013302:	2301      	movs	r3, #1
 8013304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013306:	f7fd f96d 	bl	80105e4 <disk_read>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d004      	beq.n	801331a <f_lseek+0x436>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2201      	movs	r2, #1
 8013314:	755a      	strb	r2, [r3, #21]
 8013316:	2301      	movs	r3, #1
 8013318:	e004      	b.n	8013324 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801331e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013324:	4618      	mov	r0, r3
 8013326:	3740      	adds	r7, #64	; 0x40
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b09e      	sub	sp, #120	; 0x78
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013334:	2300      	movs	r3, #0
 8013336:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013338:	f107 010c 	add.w	r1, r7, #12
 801333c:	1d3b      	adds	r3, r7, #4
 801333e:	2202      	movs	r2, #2
 8013340:	4618      	mov	r0, r3
 8013342:	f7fe fd17 	bl	8011d74 <find_volume>
 8013346:	4603      	mov	r3, r0
 8013348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013354:	2b00      	cmp	r3, #0
 8013356:	f040 80a4 	bne.w	80134a2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013360:	4611      	mov	r1, r2
 8013362:	4618      	mov	r0, r3
 8013364:	f7fe fbd6 	bl	8011b14 <follow_path>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801336e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013372:	2b00      	cmp	r3, #0
 8013374:	d108      	bne.n	8013388 <f_unlink+0x5c>
 8013376:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801337a:	f003 0320 	and.w	r3, r3, #32
 801337e:	2b00      	cmp	r3, #0
 8013380:	d002      	beq.n	8013388 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013382:	2306      	movs	r3, #6
 8013384:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013388:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801338c:	2b00      	cmp	r3, #0
 801338e:	d108      	bne.n	80133a2 <f_unlink+0x76>
 8013390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013394:	2102      	movs	r1, #2
 8013396:	4618      	mov	r0, r3
 8013398:	f7fd fa82 	bl	80108a0 <chk_lock>
 801339c:	4603      	mov	r3, r0
 801339e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80133a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d17b      	bne.n	80134a2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80133aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80133ae:	b25b      	sxtb	r3, r3
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	da03      	bge.n	80133bc <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80133b4:	2306      	movs	r3, #6
 80133b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80133ba:	e008      	b.n	80133ce <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80133bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d002      	beq.n	80133ce <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80133c8:	2307      	movs	r3, #7
 80133ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80133ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d13d      	bne.n	8013452 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133da:	4611      	mov	r1, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f7fe f98e 	bl	80116fe <ld_clust>
 80133e2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80133e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80133e8:	f003 0310 	and.w	r3, r3, #16
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d030      	beq.n	8013452 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	699b      	ldr	r3, [r3, #24]
 80133f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d103      	bne.n	8013402 <f_unlink+0xd6>
						res = FR_DENIED;
 80133fa:	2307      	movs	r3, #7
 80133fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013400:	e027      	b.n	8013452 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013408:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801340a:	f107 0310 	add.w	r3, r7, #16
 801340e:	2100      	movs	r1, #0
 8013410:	4618      	mov	r0, r3
 8013412:	f7fd ffce 	bl	80113b2 <dir_sdi>
 8013416:	4603      	mov	r3, r0
 8013418:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801341c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013420:	2b00      	cmp	r3, #0
 8013422:	d116      	bne.n	8013452 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013424:	f107 0310 	add.w	r3, r7, #16
 8013428:	2100      	movs	r1, #0
 801342a:	4618      	mov	r0, r3
 801342c:	f7fe f9a6 	bl	801177c <dir_read>
 8013430:	4603      	mov	r3, r0
 8013432:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013436:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801343a:	2b00      	cmp	r3, #0
 801343c:	d102      	bne.n	8013444 <f_unlink+0x118>
 801343e:	2307      	movs	r3, #7
 8013440:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013444:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013448:	2b04      	cmp	r3, #4
 801344a:	d102      	bne.n	8013452 <f_unlink+0x126>
 801344c:	2300      	movs	r3, #0
 801344e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013452:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013456:	2b00      	cmp	r3, #0
 8013458:	d123      	bne.n	80134a2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801345a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801345e:	4618      	mov	r0, r3
 8013460:	f7fe fa70 	bl	8011944 <dir_remove>
 8013464:	4603      	mov	r3, r0
 8013466:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801346a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801346e:	2b00      	cmp	r3, #0
 8013470:	d10c      	bne.n	801348c <f_unlink+0x160>
 8013472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013474:	2b00      	cmp	r3, #0
 8013476:	d009      	beq.n	801348c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801347c:	2200      	movs	r2, #0
 801347e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013480:	4618      	mov	r0, r3
 8013482:	f7fd fe61 	bl	8011148 <remove_chain>
 8013486:	4603      	mov	r3, r0
 8013488:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801348c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <f_unlink+0x176>
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	4618      	mov	r0, r3
 8013498:	f7fd fbe0 	bl	8010c5c <sync_fs>
 801349c:	4603      	mov	r3, r0
 801349e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80134a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3778      	adds	r7, #120	; 0x78
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
	...

080134b0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b096      	sub	sp, #88	; 0x58
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80134b8:	f107 0108 	add.w	r1, r7, #8
 80134bc:	1d3b      	adds	r3, r7, #4
 80134be:	2202      	movs	r2, #2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fe fc57 	bl	8011d74 <find_volume>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80134d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f040 80fe 	bne.w	80136d6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	f107 030c 	add.w	r3, r7, #12
 80134e0:	4611      	mov	r1, r2
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fe fb16 	bl	8011b14 <follow_path>
 80134e8:	4603      	mov	r3, r0
 80134ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80134ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d102      	bne.n	80134fc <f_mkdir+0x4c>
 80134f6:	2308      	movs	r3, #8
 80134f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80134fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013500:	2b04      	cmp	r3, #4
 8013502:	d108      	bne.n	8013516 <f_mkdir+0x66>
 8013504:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013508:	f003 0320 	and.w	r3, r3, #32
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013510:	2306      	movs	r3, #6
 8013512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801351a:	2b04      	cmp	r3, #4
 801351c:	f040 80db 	bne.w	80136d6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013520:	f107 030c 	add.w	r3, r7, #12
 8013524:	2100      	movs	r1, #0
 8013526:	4618      	mov	r0, r3
 8013528:	f7fd fe73 	bl	8011212 <create_chain>
 801352c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	895b      	ldrh	r3, [r3, #10]
 8013532:	461a      	mov	r2, r3
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	899b      	ldrh	r3, [r3, #12]
 8013538:	fb03 f302 	mul.w	r3, r3, r2
 801353c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013546:	2b00      	cmp	r3, #0
 8013548:	d102      	bne.n	8013550 <f_mkdir+0xa0>
 801354a:	2307      	movs	r3, #7
 801354c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013552:	2b01      	cmp	r3, #1
 8013554:	d102      	bne.n	801355c <f_mkdir+0xac>
 8013556:	2302      	movs	r3, #2
 8013558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801355c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013562:	d102      	bne.n	801356a <f_mkdir+0xba>
 8013564:	2301      	movs	r3, #1
 8013566:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801356a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <f_mkdir+0xd0>
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	4618      	mov	r0, r3
 8013576:	f7fd faff 	bl	8010b78 <sync_window>
 801357a:	4603      	mov	r3, r0
 801357c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013580:	4b58      	ldr	r3, [pc, #352]	; (80136e4 <f_mkdir+0x234>)
 8013582:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013588:	2b00      	cmp	r3, #0
 801358a:	d16c      	bne.n	8013666 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013590:	4618      	mov	r0, r3
 8013592:	f7fd fbd3 	bl	8010d3c <clust2sect>
 8013596:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	3338      	adds	r3, #56	; 0x38
 801359c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	899b      	ldrh	r3, [r3, #12]
 80135a2:	461a      	mov	r2, r3
 80135a4:	2100      	movs	r1, #0
 80135a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80135a8:	f7fd f91d 	bl	80107e6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80135ac:	220b      	movs	r2, #11
 80135ae:	2120      	movs	r1, #32
 80135b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80135b2:	f7fd f918 	bl	80107e6 <mem_set>
					dir[DIR_Name] = '.';
 80135b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135b8:	222e      	movs	r2, #46	; 0x2e
 80135ba:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80135bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135be:	330b      	adds	r3, #11
 80135c0:	2210      	movs	r2, #16
 80135c2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80135c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c6:	3316      	adds	r3, #22
 80135c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fd f8be 	bl	801074c <st_dword>
					st_clust(fs, dir, dcl);
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fe f8b0 	bl	801173c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80135dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135de:	3320      	adds	r3, #32
 80135e0:	2220      	movs	r2, #32
 80135e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fd f8dd 	bl	80107a4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80135ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ec:	3321      	adds	r3, #33	; 0x21
 80135ee:	222e      	movs	r2, #46	; 0x2e
 80135f0:	701a      	strb	r2, [r3, #0]
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	2b03      	cmp	r3, #3
 80135fc:	d106      	bne.n	801360c <f_mkdir+0x15c>
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013604:	429a      	cmp	r2, r3
 8013606:	d101      	bne.n	801360c <f_mkdir+0x15c>
 8013608:	2300      	movs	r3, #0
 801360a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801360c:	68b8      	ldr	r0, [r7, #8]
 801360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013610:	3320      	adds	r3, #32
 8013612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013614:	4619      	mov	r1, r3
 8013616:	f7fe f891 	bl	801173c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	895b      	ldrh	r3, [r3, #10]
 801361e:	653b      	str	r3, [r7, #80]	; 0x50
 8013620:	e01c      	b.n	801365c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013624:	1c5a      	adds	r2, r3, #1
 8013626:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013628:	68ba      	ldr	r2, [r7, #8]
 801362a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	2201      	movs	r2, #1
 8013630:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	4618      	mov	r0, r3
 8013636:	f7fd fa9f 	bl	8010b78 <sync_window>
 801363a:	4603      	mov	r3, r0
 801363c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10d      	bne.n	8013664 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	899b      	ldrh	r3, [r3, #12]
 801364c:	461a      	mov	r2, r3
 801364e:	2100      	movs	r1, #0
 8013650:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013652:	f7fd f8c8 	bl	80107e6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013658:	3b01      	subs	r3, #1
 801365a:	653b      	str	r3, [r7, #80]	; 0x50
 801365c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801365e:	2b00      	cmp	r3, #0
 8013660:	d1df      	bne.n	8013622 <f_mkdir+0x172>
 8013662:	e000      	b.n	8013666 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013664:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013666:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801366a:	2b00      	cmp	r3, #0
 801366c:	d107      	bne.n	801367e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801366e:	f107 030c 	add.w	r3, r7, #12
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe f934 	bl	80118e0 <dir_register>
 8013678:	4603      	mov	r3, r0
 801367a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801367e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013682:	2b00      	cmp	r3, #0
 8013684:	d120      	bne.n	80136c8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013688:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801368c:	3316      	adds	r3, #22
 801368e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013690:	4618      	mov	r0, r3
 8013692:	f7fd f85b 	bl	801074c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801369a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801369c:	4618      	mov	r0, r3
 801369e:	f7fe f84d 	bl	801173c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80136a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136a4:	330b      	adds	r3, #11
 80136a6:	2210      	movs	r2, #16
 80136a8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	2201      	movs	r2, #1
 80136ae:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80136b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d10e      	bne.n	80136d6 <f_mkdir+0x226>
					res = sync_fs(fs);
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7fd face 	bl	8010c5c <sync_fs>
 80136c0:	4603      	mov	r3, r0
 80136c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80136c6:	e006      	b.n	80136d6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80136c8:	f107 030c 	add.w	r3, r7, #12
 80136cc:	2200      	movs	r2, #0
 80136ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fd fd39 	bl	8011148 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80136d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3758      	adds	r7, #88	; 0x58
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	274a0000 	.word	0x274a0000

080136e8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b088      	sub	sp, #32
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80136fc:	e017      	b.n	801372e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80136fe:	f107 0310 	add.w	r3, r7, #16
 8013702:	f107 0114 	add.w	r1, r7, #20
 8013706:	2201      	movs	r2, #1
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f7ff f803 	bl	8012714 <f_read>
		if (rc != 1) break;
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b01      	cmp	r3, #1
 8013712:	d112      	bne.n	801373a <f_gets+0x52>
		c = s[0];
 8013714:	7d3b      	ldrb	r3, [r7, #20]
 8013716:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	61ba      	str	r2, [r7, #24]
 801371e:	7dfa      	ldrb	r2, [r7, #23]
 8013720:	701a      	strb	r2, [r3, #0]
		n++;
 8013722:	69fb      	ldr	r3, [r7, #28]
 8013724:	3301      	adds	r3, #1
 8013726:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013728:	7dfb      	ldrb	r3, [r7, #23]
 801372a:	2b0a      	cmp	r3, #10
 801372c:	d007      	beq.n	801373e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	3b01      	subs	r3, #1
 8013732:	69fa      	ldr	r2, [r7, #28]
 8013734:	429a      	cmp	r2, r3
 8013736:	dbe2      	blt.n	80136fe <f_gets+0x16>
 8013738:	e002      	b.n	8013740 <f_gets+0x58>
		if (rc != 1) break;
 801373a:	bf00      	nop
 801373c:	e000      	b.n	8013740 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801373e:	bf00      	nop
	}
	*p = 0;
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	2200      	movs	r2, #0
 8013744:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <f_gets+0x68>
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	e000      	b.n	8013752 <f_gets+0x6a>
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	3720      	adds	r7, #32
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
	...

0801375c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801375c:	b480      	push	{r7}
 801375e:	b087      	sub	sp, #28
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	4613      	mov	r3, r2
 8013768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801376a:	2301      	movs	r3, #1
 801376c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801376e:	2300      	movs	r3, #0
 8013770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013772:	4b1f      	ldr	r3, [pc, #124]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 8013774:	7a5b      	ldrb	r3, [r3, #9]
 8013776:	b2db      	uxtb	r3, r3
 8013778:	2b00      	cmp	r3, #0
 801377a:	d131      	bne.n	80137e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801377c:	4b1c      	ldr	r3, [pc, #112]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 801377e:	7a5b      	ldrb	r3, [r3, #9]
 8013780:	b2db      	uxtb	r3, r3
 8013782:	461a      	mov	r2, r3
 8013784:	4b1a      	ldr	r3, [pc, #104]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 8013786:	2100      	movs	r1, #0
 8013788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801378a:	4b19      	ldr	r3, [pc, #100]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 801378c:	7a5b      	ldrb	r3, [r3, #9]
 801378e:	b2db      	uxtb	r3, r3
 8013790:	4a17      	ldr	r2, [pc, #92]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	4413      	add	r3, r2
 8013796:	68fa      	ldr	r2, [r7, #12]
 8013798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801379a:	4b15      	ldr	r3, [pc, #84]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 801379c:	7a5b      	ldrb	r3, [r3, #9]
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	461a      	mov	r2, r3
 80137a2:	4b13      	ldr	r3, [pc, #76]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 80137a4:	4413      	add	r3, r2
 80137a6:	79fa      	ldrb	r2, [r7, #7]
 80137a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80137aa:	4b11      	ldr	r3, [pc, #68]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 80137ac:	7a5b      	ldrb	r3, [r3, #9]
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	1c5a      	adds	r2, r3, #1
 80137b2:	b2d1      	uxtb	r1, r2
 80137b4:	4a0e      	ldr	r2, [pc, #56]	; (80137f0 <FATFS_LinkDriverEx+0x94>)
 80137b6:	7251      	strb	r1, [r2, #9]
 80137b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80137ba:	7dbb      	ldrb	r3, [r7, #22]
 80137bc:	3330      	adds	r3, #48	; 0x30
 80137be:	b2da      	uxtb	r2, r3
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	3301      	adds	r3, #1
 80137c8:	223a      	movs	r2, #58	; 0x3a
 80137ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	3302      	adds	r3, #2
 80137d0:	222f      	movs	r2, #47	; 0x2f
 80137d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	3303      	adds	r3, #3
 80137d8:	2200      	movs	r2, #0
 80137da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80137dc:	2300      	movs	r3, #0
 80137de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80137e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	371c      	adds	r7, #28
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop
 80137f0:	2003c4c4 	.word	0x2003c4c4

080137f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80137fe:	2200      	movs	r2, #0
 8013800:	6839      	ldr	r1, [r7, #0]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff ffaa 	bl	801375c <FATFS_LinkDriverEx>
 8013808:	4603      	mov	r3, r0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <__cxa_guard_acquire>:
 8013812:	6803      	ldr	r3, [r0, #0]
 8013814:	07db      	lsls	r3, r3, #31
 8013816:	d406      	bmi.n	8013826 <__cxa_guard_acquire+0x14>
 8013818:	7843      	ldrb	r3, [r0, #1]
 801381a:	b103      	cbz	r3, 801381e <__cxa_guard_acquire+0xc>
 801381c:	deff      	udf	#255	; 0xff
 801381e:	2301      	movs	r3, #1
 8013820:	7043      	strb	r3, [r0, #1]
 8013822:	4618      	mov	r0, r3
 8013824:	4770      	bx	lr
 8013826:	2000      	movs	r0, #0
 8013828:	4770      	bx	lr

0801382a <__cxa_guard_release>:
 801382a:	2301      	movs	r3, #1
 801382c:	6003      	str	r3, [r0, #0]
 801382e:	4770      	bx	lr

08013830 <cos>:
 8013830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013832:	ec51 0b10 	vmov	r0, r1, d0
 8013836:	4a1e      	ldr	r2, [pc, #120]	; (80138b0 <cos+0x80>)
 8013838:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801383c:	4293      	cmp	r3, r2
 801383e:	dc06      	bgt.n	801384e <cos+0x1e>
 8013840:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80138a8 <cos+0x78>
 8013844:	f000 fa74 	bl	8013d30 <__kernel_cos>
 8013848:	ec51 0b10 	vmov	r0, r1, d0
 801384c:	e007      	b.n	801385e <cos+0x2e>
 801384e:	4a19      	ldr	r2, [pc, #100]	; (80138b4 <cos+0x84>)
 8013850:	4293      	cmp	r3, r2
 8013852:	dd09      	ble.n	8013868 <cos+0x38>
 8013854:	ee10 2a10 	vmov	r2, s0
 8013858:	460b      	mov	r3, r1
 801385a:	f7ec fd2d 	bl	80002b8 <__aeabi_dsub>
 801385e:	ec41 0b10 	vmov	d0, r0, r1
 8013862:	b005      	add	sp, #20
 8013864:	f85d fb04 	ldr.w	pc, [sp], #4
 8013868:	4668      	mov	r0, sp
 801386a:	f000 f86d 	bl	8013948 <__ieee754_rem_pio2>
 801386e:	f000 0003 	and.w	r0, r0, #3
 8013872:	2801      	cmp	r0, #1
 8013874:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013878:	ed9d 0b00 	vldr	d0, [sp]
 801387c:	d007      	beq.n	801388e <cos+0x5e>
 801387e:	2802      	cmp	r0, #2
 8013880:	d00e      	beq.n	80138a0 <cos+0x70>
 8013882:	2800      	cmp	r0, #0
 8013884:	d0de      	beq.n	8013844 <cos+0x14>
 8013886:	2001      	movs	r0, #1
 8013888:	f000 fe5a 	bl	8014540 <__kernel_sin>
 801388c:	e7dc      	b.n	8013848 <cos+0x18>
 801388e:	f000 fe57 	bl	8014540 <__kernel_sin>
 8013892:	ec53 2b10 	vmov	r2, r3, d0
 8013896:	ee10 0a10 	vmov	r0, s0
 801389a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801389e:	e7de      	b.n	801385e <cos+0x2e>
 80138a0:	f000 fa46 	bl	8013d30 <__kernel_cos>
 80138a4:	e7f5      	b.n	8013892 <cos+0x62>
 80138a6:	bf00      	nop
	...
 80138b0:	3fe921fb 	.word	0x3fe921fb
 80138b4:	7fefffff 	.word	0x7fefffff

080138b8 <sin>:
 80138b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138ba:	ec51 0b10 	vmov	r0, r1, d0
 80138be:	4a20      	ldr	r2, [pc, #128]	; (8013940 <sin+0x88>)
 80138c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80138c4:	4293      	cmp	r3, r2
 80138c6:	dc07      	bgt.n	80138d8 <sin+0x20>
 80138c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8013938 <sin+0x80>
 80138cc:	2000      	movs	r0, #0
 80138ce:	f000 fe37 	bl	8014540 <__kernel_sin>
 80138d2:	ec51 0b10 	vmov	r0, r1, d0
 80138d6:	e007      	b.n	80138e8 <sin+0x30>
 80138d8:	4a1a      	ldr	r2, [pc, #104]	; (8013944 <sin+0x8c>)
 80138da:	4293      	cmp	r3, r2
 80138dc:	dd09      	ble.n	80138f2 <sin+0x3a>
 80138de:	ee10 2a10 	vmov	r2, s0
 80138e2:	460b      	mov	r3, r1
 80138e4:	f7ec fce8 	bl	80002b8 <__aeabi_dsub>
 80138e8:	ec41 0b10 	vmov	d0, r0, r1
 80138ec:	b005      	add	sp, #20
 80138ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80138f2:	4668      	mov	r0, sp
 80138f4:	f000 f828 	bl	8013948 <__ieee754_rem_pio2>
 80138f8:	f000 0003 	and.w	r0, r0, #3
 80138fc:	2801      	cmp	r0, #1
 80138fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013902:	ed9d 0b00 	vldr	d0, [sp]
 8013906:	d004      	beq.n	8013912 <sin+0x5a>
 8013908:	2802      	cmp	r0, #2
 801390a:	d005      	beq.n	8013918 <sin+0x60>
 801390c:	b970      	cbnz	r0, 801392c <sin+0x74>
 801390e:	2001      	movs	r0, #1
 8013910:	e7dd      	b.n	80138ce <sin+0x16>
 8013912:	f000 fa0d 	bl	8013d30 <__kernel_cos>
 8013916:	e7dc      	b.n	80138d2 <sin+0x1a>
 8013918:	2001      	movs	r0, #1
 801391a:	f000 fe11 	bl	8014540 <__kernel_sin>
 801391e:	ec53 2b10 	vmov	r2, r3, d0
 8013922:	ee10 0a10 	vmov	r0, s0
 8013926:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801392a:	e7dd      	b.n	80138e8 <sin+0x30>
 801392c:	f000 fa00 	bl	8013d30 <__kernel_cos>
 8013930:	e7f5      	b.n	801391e <sin+0x66>
 8013932:	bf00      	nop
 8013934:	f3af 8000 	nop.w
	...
 8013940:	3fe921fb 	.word	0x3fe921fb
 8013944:	7fefffff 	.word	0x7fefffff

08013948 <__ieee754_rem_pio2>:
 8013948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801394c:	ec57 6b10 	vmov	r6, r7, d0
 8013950:	4bc3      	ldr	r3, [pc, #780]	; (8013c60 <__ieee754_rem_pio2+0x318>)
 8013952:	b08d      	sub	sp, #52	; 0x34
 8013954:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013958:	4598      	cmp	r8, r3
 801395a:	4604      	mov	r4, r0
 801395c:	9704      	str	r7, [sp, #16]
 801395e:	dc07      	bgt.n	8013970 <__ieee754_rem_pio2+0x28>
 8013960:	2200      	movs	r2, #0
 8013962:	2300      	movs	r3, #0
 8013964:	ed84 0b00 	vstr	d0, [r4]
 8013968:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801396c:	2500      	movs	r5, #0
 801396e:	e027      	b.n	80139c0 <__ieee754_rem_pio2+0x78>
 8013970:	4bbc      	ldr	r3, [pc, #752]	; (8013c64 <__ieee754_rem_pio2+0x31c>)
 8013972:	4598      	cmp	r8, r3
 8013974:	dc75      	bgt.n	8013a62 <__ieee754_rem_pio2+0x11a>
 8013976:	9b04      	ldr	r3, [sp, #16]
 8013978:	4dbb      	ldr	r5, [pc, #748]	; (8013c68 <__ieee754_rem_pio2+0x320>)
 801397a:	2b00      	cmp	r3, #0
 801397c:	ee10 0a10 	vmov	r0, s0
 8013980:	a3a9      	add	r3, pc, #676	; (adr r3, 8013c28 <__ieee754_rem_pio2+0x2e0>)
 8013982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013986:	4639      	mov	r1, r7
 8013988:	dd36      	ble.n	80139f8 <__ieee754_rem_pio2+0xb0>
 801398a:	f7ec fc95 	bl	80002b8 <__aeabi_dsub>
 801398e:	45a8      	cmp	r8, r5
 8013990:	4606      	mov	r6, r0
 8013992:	460f      	mov	r7, r1
 8013994:	d018      	beq.n	80139c8 <__ieee754_rem_pio2+0x80>
 8013996:	a3a6      	add	r3, pc, #664	; (adr r3, 8013c30 <__ieee754_rem_pio2+0x2e8>)
 8013998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399c:	f7ec fc8c 	bl	80002b8 <__aeabi_dsub>
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	e9c4 2300 	strd	r2, r3, [r4]
 80139a8:	4630      	mov	r0, r6
 80139aa:	4639      	mov	r1, r7
 80139ac:	f7ec fc84 	bl	80002b8 <__aeabi_dsub>
 80139b0:	a39f      	add	r3, pc, #636	; (adr r3, 8013c30 <__ieee754_rem_pio2+0x2e8>)
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	f7ec fc7f 	bl	80002b8 <__aeabi_dsub>
 80139ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139be:	2501      	movs	r5, #1
 80139c0:	4628      	mov	r0, r5
 80139c2:	b00d      	add	sp, #52	; 0x34
 80139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c8:	a39b      	add	r3, pc, #620	; (adr r3, 8013c38 <__ieee754_rem_pio2+0x2f0>)
 80139ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ce:	f7ec fc73 	bl	80002b8 <__aeabi_dsub>
 80139d2:	a39b      	add	r3, pc, #620	; (adr r3, 8013c40 <__ieee754_rem_pio2+0x2f8>)
 80139d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d8:	4606      	mov	r6, r0
 80139da:	460f      	mov	r7, r1
 80139dc:	f7ec fc6c 	bl	80002b8 <__aeabi_dsub>
 80139e0:	4602      	mov	r2, r0
 80139e2:	460b      	mov	r3, r1
 80139e4:	e9c4 2300 	strd	r2, r3, [r4]
 80139e8:	4630      	mov	r0, r6
 80139ea:	4639      	mov	r1, r7
 80139ec:	f7ec fc64 	bl	80002b8 <__aeabi_dsub>
 80139f0:	a393      	add	r3, pc, #588	; (adr r3, 8013c40 <__ieee754_rem_pio2+0x2f8>)
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	e7de      	b.n	80139b6 <__ieee754_rem_pio2+0x6e>
 80139f8:	f7ec fc60 	bl	80002bc <__adddf3>
 80139fc:	45a8      	cmp	r8, r5
 80139fe:	4606      	mov	r6, r0
 8013a00:	460f      	mov	r7, r1
 8013a02:	d016      	beq.n	8013a32 <__ieee754_rem_pio2+0xea>
 8013a04:	a38a      	add	r3, pc, #552	; (adr r3, 8013c30 <__ieee754_rem_pio2+0x2e8>)
 8013a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0a:	f7ec fc57 	bl	80002bc <__adddf3>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	460b      	mov	r3, r1
 8013a12:	e9c4 2300 	strd	r2, r3, [r4]
 8013a16:	4630      	mov	r0, r6
 8013a18:	4639      	mov	r1, r7
 8013a1a:	f7ec fc4d 	bl	80002b8 <__aeabi_dsub>
 8013a1e:	a384      	add	r3, pc, #528	; (adr r3, 8013c30 <__ieee754_rem_pio2+0x2e8>)
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	f7ec fc4a 	bl	80002bc <__adddf3>
 8013a28:	f04f 35ff 	mov.w	r5, #4294967295
 8013a2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a30:	e7c6      	b.n	80139c0 <__ieee754_rem_pio2+0x78>
 8013a32:	a381      	add	r3, pc, #516	; (adr r3, 8013c38 <__ieee754_rem_pio2+0x2f0>)
 8013a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a38:	f7ec fc40 	bl	80002bc <__adddf3>
 8013a3c:	a380      	add	r3, pc, #512	; (adr r3, 8013c40 <__ieee754_rem_pio2+0x2f8>)
 8013a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a42:	4606      	mov	r6, r0
 8013a44:	460f      	mov	r7, r1
 8013a46:	f7ec fc39 	bl	80002bc <__adddf3>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	e9c4 2300 	strd	r2, r3, [r4]
 8013a52:	4630      	mov	r0, r6
 8013a54:	4639      	mov	r1, r7
 8013a56:	f7ec fc2f 	bl	80002b8 <__aeabi_dsub>
 8013a5a:	a379      	add	r3, pc, #484	; (adr r3, 8013c40 <__ieee754_rem_pio2+0x2f8>)
 8013a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a60:	e7e0      	b.n	8013a24 <__ieee754_rem_pio2+0xdc>
 8013a62:	4b82      	ldr	r3, [pc, #520]	; (8013c6c <__ieee754_rem_pio2+0x324>)
 8013a64:	4598      	cmp	r8, r3
 8013a66:	f300 80d0 	bgt.w	8013c0a <__ieee754_rem_pio2+0x2c2>
 8013a6a:	f000 fe23 	bl	80146b4 <fabs>
 8013a6e:	ec57 6b10 	vmov	r6, r7, d0
 8013a72:	ee10 0a10 	vmov	r0, s0
 8013a76:	a374      	add	r3, pc, #464	; (adr r3, 8013c48 <__ieee754_rem_pio2+0x300>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	4639      	mov	r1, r7
 8013a7e:	f7ec fdd3 	bl	8000628 <__aeabi_dmul>
 8013a82:	2200      	movs	r2, #0
 8013a84:	4b7a      	ldr	r3, [pc, #488]	; (8013c70 <__ieee754_rem_pio2+0x328>)
 8013a86:	f7ec fc19 	bl	80002bc <__adddf3>
 8013a8a:	f7ed f87d 	bl	8000b88 <__aeabi_d2iz>
 8013a8e:	4605      	mov	r5, r0
 8013a90:	f7ec fd60 	bl	8000554 <__aeabi_i2d>
 8013a94:	a364      	add	r3, pc, #400	; (adr r3, 8013c28 <__ieee754_rem_pio2+0x2e0>)
 8013a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a9e:	f7ec fdc3 	bl	8000628 <__aeabi_dmul>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	4639      	mov	r1, r7
 8013aaa:	f7ec fc05 	bl	80002b8 <__aeabi_dsub>
 8013aae:	a360      	add	r3, pc, #384	; (adr r3, 8013c30 <__ieee754_rem_pio2+0x2e8>)
 8013ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab4:	4682      	mov	sl, r0
 8013ab6:	468b      	mov	fp, r1
 8013ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013abc:	f7ec fdb4 	bl	8000628 <__aeabi_dmul>
 8013ac0:	2d1f      	cmp	r5, #31
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	460f      	mov	r7, r1
 8013ac6:	dc0c      	bgt.n	8013ae2 <__ieee754_rem_pio2+0x19a>
 8013ac8:	1e6a      	subs	r2, r5, #1
 8013aca:	4b6a      	ldr	r3, [pc, #424]	; (8013c74 <__ieee754_rem_pio2+0x32c>)
 8013acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ad0:	4543      	cmp	r3, r8
 8013ad2:	d006      	beq.n	8013ae2 <__ieee754_rem_pio2+0x19a>
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	463b      	mov	r3, r7
 8013ad8:	4650      	mov	r0, sl
 8013ada:	4659      	mov	r1, fp
 8013adc:	f7ec fbec 	bl	80002b8 <__aeabi_dsub>
 8013ae0:	e00e      	b.n	8013b00 <__ieee754_rem_pio2+0x1b8>
 8013ae2:	4632      	mov	r2, r6
 8013ae4:	463b      	mov	r3, r7
 8013ae6:	4650      	mov	r0, sl
 8013ae8:	4659      	mov	r1, fp
 8013aea:	f7ec fbe5 	bl	80002b8 <__aeabi_dsub>
 8013aee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013af2:	9305      	str	r3, [sp, #20]
 8013af4:	9a05      	ldr	r2, [sp, #20]
 8013af6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	2b10      	cmp	r3, #16
 8013afe:	dc02      	bgt.n	8013b06 <__ieee754_rem_pio2+0x1be>
 8013b00:	e9c4 0100 	strd	r0, r1, [r4]
 8013b04:	e039      	b.n	8013b7a <__ieee754_rem_pio2+0x232>
 8013b06:	a34c      	add	r3, pc, #304	; (adr r3, 8013c38 <__ieee754_rem_pio2+0x2f0>)
 8013b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b10:	f7ec fd8a 	bl	8000628 <__aeabi_dmul>
 8013b14:	4606      	mov	r6, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	4602      	mov	r2, r0
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4650      	mov	r0, sl
 8013b1e:	4659      	mov	r1, fp
 8013b20:	f7ec fbca 	bl	80002b8 <__aeabi_dsub>
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	4680      	mov	r8, r0
 8013b2a:	4689      	mov	r9, r1
 8013b2c:	4650      	mov	r0, sl
 8013b2e:	4659      	mov	r1, fp
 8013b30:	f7ec fbc2 	bl	80002b8 <__aeabi_dsub>
 8013b34:	4632      	mov	r2, r6
 8013b36:	463b      	mov	r3, r7
 8013b38:	f7ec fbbe 	bl	80002b8 <__aeabi_dsub>
 8013b3c:	a340      	add	r3, pc, #256	; (adr r3, 8013c40 <__ieee754_rem_pio2+0x2f8>)
 8013b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b42:	4606      	mov	r6, r0
 8013b44:	460f      	mov	r7, r1
 8013b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b4a:	f7ec fd6d 	bl	8000628 <__aeabi_dmul>
 8013b4e:	4632      	mov	r2, r6
 8013b50:	463b      	mov	r3, r7
 8013b52:	f7ec fbb1 	bl	80002b8 <__aeabi_dsub>
 8013b56:	4602      	mov	r2, r0
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4606      	mov	r6, r0
 8013b5c:	460f      	mov	r7, r1
 8013b5e:	4640      	mov	r0, r8
 8013b60:	4649      	mov	r1, r9
 8013b62:	f7ec fba9 	bl	80002b8 <__aeabi_dsub>
 8013b66:	9a05      	ldr	r2, [sp, #20]
 8013b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	2b31      	cmp	r3, #49	; 0x31
 8013b70:	dc20      	bgt.n	8013bb4 <__ieee754_rem_pio2+0x26c>
 8013b72:	e9c4 0100 	strd	r0, r1, [r4]
 8013b76:	46c2      	mov	sl, r8
 8013b78:	46cb      	mov	fp, r9
 8013b7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013b7e:	4650      	mov	r0, sl
 8013b80:	4642      	mov	r2, r8
 8013b82:	464b      	mov	r3, r9
 8013b84:	4659      	mov	r1, fp
 8013b86:	f7ec fb97 	bl	80002b8 <__aeabi_dsub>
 8013b8a:	463b      	mov	r3, r7
 8013b8c:	4632      	mov	r2, r6
 8013b8e:	f7ec fb93 	bl	80002b8 <__aeabi_dsub>
 8013b92:	9b04      	ldr	r3, [sp, #16]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b9a:	f6bf af11 	bge.w	80139c0 <__ieee754_rem_pio2+0x78>
 8013b9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013ba2:	6063      	str	r3, [r4, #4]
 8013ba4:	f8c4 8000 	str.w	r8, [r4]
 8013ba8:	60a0      	str	r0, [r4, #8]
 8013baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bae:	60e3      	str	r3, [r4, #12]
 8013bb0:	426d      	negs	r5, r5
 8013bb2:	e705      	b.n	80139c0 <__ieee754_rem_pio2+0x78>
 8013bb4:	a326      	add	r3, pc, #152	; (adr r3, 8013c50 <__ieee754_rem_pio2+0x308>)
 8013bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bbe:	f7ec fd33 	bl	8000628 <__aeabi_dmul>
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	460f      	mov	r7, r1
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	460b      	mov	r3, r1
 8013bca:	4640      	mov	r0, r8
 8013bcc:	4649      	mov	r1, r9
 8013bce:	f7ec fb73 	bl	80002b8 <__aeabi_dsub>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	4682      	mov	sl, r0
 8013bd8:	468b      	mov	fp, r1
 8013bda:	4640      	mov	r0, r8
 8013bdc:	4649      	mov	r1, r9
 8013bde:	f7ec fb6b 	bl	80002b8 <__aeabi_dsub>
 8013be2:	4632      	mov	r2, r6
 8013be4:	463b      	mov	r3, r7
 8013be6:	f7ec fb67 	bl	80002b8 <__aeabi_dsub>
 8013bea:	a31b      	add	r3, pc, #108	; (adr r3, 8013c58 <__ieee754_rem_pio2+0x310>)
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	4606      	mov	r6, r0
 8013bf2:	460f      	mov	r7, r1
 8013bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bf8:	f7ec fd16 	bl	8000628 <__aeabi_dmul>
 8013bfc:	4632      	mov	r2, r6
 8013bfe:	463b      	mov	r3, r7
 8013c00:	f7ec fb5a 	bl	80002b8 <__aeabi_dsub>
 8013c04:	4606      	mov	r6, r0
 8013c06:	460f      	mov	r7, r1
 8013c08:	e764      	b.n	8013ad4 <__ieee754_rem_pio2+0x18c>
 8013c0a:	4b1b      	ldr	r3, [pc, #108]	; (8013c78 <__ieee754_rem_pio2+0x330>)
 8013c0c:	4598      	cmp	r8, r3
 8013c0e:	dd35      	ble.n	8013c7c <__ieee754_rem_pio2+0x334>
 8013c10:	ee10 2a10 	vmov	r2, s0
 8013c14:	463b      	mov	r3, r7
 8013c16:	4630      	mov	r0, r6
 8013c18:	4639      	mov	r1, r7
 8013c1a:	f7ec fb4d 	bl	80002b8 <__aeabi_dsub>
 8013c1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013c22:	e9c4 0100 	strd	r0, r1, [r4]
 8013c26:	e6a1      	b.n	801396c <__ieee754_rem_pio2+0x24>
 8013c28:	54400000 	.word	0x54400000
 8013c2c:	3ff921fb 	.word	0x3ff921fb
 8013c30:	1a626331 	.word	0x1a626331
 8013c34:	3dd0b461 	.word	0x3dd0b461
 8013c38:	1a600000 	.word	0x1a600000
 8013c3c:	3dd0b461 	.word	0x3dd0b461
 8013c40:	2e037073 	.word	0x2e037073
 8013c44:	3ba3198a 	.word	0x3ba3198a
 8013c48:	6dc9c883 	.word	0x6dc9c883
 8013c4c:	3fe45f30 	.word	0x3fe45f30
 8013c50:	2e000000 	.word	0x2e000000
 8013c54:	3ba3198a 	.word	0x3ba3198a
 8013c58:	252049c1 	.word	0x252049c1
 8013c5c:	397b839a 	.word	0x397b839a
 8013c60:	3fe921fb 	.word	0x3fe921fb
 8013c64:	4002d97b 	.word	0x4002d97b
 8013c68:	3ff921fb 	.word	0x3ff921fb
 8013c6c:	413921fb 	.word	0x413921fb
 8013c70:	3fe00000 	.word	0x3fe00000
 8013c74:	08019358 	.word	0x08019358
 8013c78:	7fefffff 	.word	0x7fefffff
 8013c7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013c80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013c84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013c88:	4630      	mov	r0, r6
 8013c8a:	460f      	mov	r7, r1
 8013c8c:	f7ec ff7c 	bl	8000b88 <__aeabi_d2iz>
 8013c90:	f7ec fc60 	bl	8000554 <__aeabi_i2d>
 8013c94:	4602      	mov	r2, r0
 8013c96:	460b      	mov	r3, r1
 8013c98:	4630      	mov	r0, r6
 8013c9a:	4639      	mov	r1, r7
 8013c9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ca0:	f7ec fb0a 	bl	80002b8 <__aeabi_dsub>
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	4b1f      	ldr	r3, [pc, #124]	; (8013d24 <__ieee754_rem_pio2+0x3dc>)
 8013ca8:	f7ec fcbe 	bl	8000628 <__aeabi_dmul>
 8013cac:	460f      	mov	r7, r1
 8013cae:	4606      	mov	r6, r0
 8013cb0:	f7ec ff6a 	bl	8000b88 <__aeabi_d2iz>
 8013cb4:	f7ec fc4e 	bl	8000554 <__aeabi_i2d>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013cc4:	f7ec faf8 	bl	80002b8 <__aeabi_dsub>
 8013cc8:	2200      	movs	r2, #0
 8013cca:	4b16      	ldr	r3, [pc, #88]	; (8013d24 <__ieee754_rem_pio2+0x3dc>)
 8013ccc:	f7ec fcac 	bl	8000628 <__aeabi_dmul>
 8013cd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013cd4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013cd8:	f04f 0803 	mov.w	r8, #3
 8013cdc:	2600      	movs	r6, #0
 8013cde:	2700      	movs	r7, #0
 8013ce0:	4632      	mov	r2, r6
 8013ce2:	463b      	mov	r3, r7
 8013ce4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8013cec:	f7ec ff04 	bl	8000af8 <__aeabi_dcmpeq>
 8013cf0:	b9b0      	cbnz	r0, 8013d20 <__ieee754_rem_pio2+0x3d8>
 8013cf2:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <__ieee754_rem_pio2+0x3e0>)
 8013cf4:	9301      	str	r3, [sp, #4]
 8013cf6:	2302      	movs	r3, #2
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	462a      	mov	r2, r5
 8013cfc:	4643      	mov	r3, r8
 8013cfe:	4621      	mov	r1, r4
 8013d00:	a806      	add	r0, sp, #24
 8013d02:	f000 f8dd 	bl	8013ec0 <__kernel_rem_pio2>
 8013d06:	9b04      	ldr	r3, [sp, #16]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	f6bf ae58 	bge.w	80139c0 <__ieee754_rem_pio2+0x78>
 8013d10:	6863      	ldr	r3, [r4, #4]
 8013d12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013d16:	6063      	str	r3, [r4, #4]
 8013d18:	68e3      	ldr	r3, [r4, #12]
 8013d1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013d1e:	e746      	b.n	8013bae <__ieee754_rem_pio2+0x266>
 8013d20:	46d0      	mov	r8, sl
 8013d22:	e7dd      	b.n	8013ce0 <__ieee754_rem_pio2+0x398>
 8013d24:	41700000 	.word	0x41700000
 8013d28:	080193d8 	.word	0x080193d8
 8013d2c:	00000000 	.word	0x00000000

08013d30 <__kernel_cos>:
 8013d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d34:	ec59 8b10 	vmov	r8, r9, d0
 8013d38:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013d3c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013d40:	ed2d 8b02 	vpush	{d8}
 8013d44:	eeb0 8a41 	vmov.f32	s16, s2
 8013d48:	eef0 8a61 	vmov.f32	s17, s3
 8013d4c:	da07      	bge.n	8013d5e <__kernel_cos+0x2e>
 8013d4e:	ee10 0a10 	vmov	r0, s0
 8013d52:	4649      	mov	r1, r9
 8013d54:	f7ec ff18 	bl	8000b88 <__aeabi_d2iz>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	f000 8089 	beq.w	8013e70 <__kernel_cos+0x140>
 8013d5e:	4642      	mov	r2, r8
 8013d60:	464b      	mov	r3, r9
 8013d62:	4640      	mov	r0, r8
 8013d64:	4649      	mov	r1, r9
 8013d66:	f7ec fc5f 	bl	8000628 <__aeabi_dmul>
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4b4e      	ldr	r3, [pc, #312]	; (8013ea8 <__kernel_cos+0x178>)
 8013d6e:	4604      	mov	r4, r0
 8013d70:	460d      	mov	r5, r1
 8013d72:	f7ec fc59 	bl	8000628 <__aeabi_dmul>
 8013d76:	a340      	add	r3, pc, #256	; (adr r3, 8013e78 <__kernel_cos+0x148>)
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	468b      	mov	fp, r1
 8013d80:	4620      	mov	r0, r4
 8013d82:	4629      	mov	r1, r5
 8013d84:	f7ec fc50 	bl	8000628 <__aeabi_dmul>
 8013d88:	a33d      	add	r3, pc, #244	; (adr r3, 8013e80 <__kernel_cos+0x150>)
 8013d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8e:	f7ec fa95 	bl	80002bc <__adddf3>
 8013d92:	4622      	mov	r2, r4
 8013d94:	462b      	mov	r3, r5
 8013d96:	f7ec fc47 	bl	8000628 <__aeabi_dmul>
 8013d9a:	a33b      	add	r3, pc, #236	; (adr r3, 8013e88 <__kernel_cos+0x158>)
 8013d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da0:	f7ec fa8a 	bl	80002b8 <__aeabi_dsub>
 8013da4:	4622      	mov	r2, r4
 8013da6:	462b      	mov	r3, r5
 8013da8:	f7ec fc3e 	bl	8000628 <__aeabi_dmul>
 8013dac:	a338      	add	r3, pc, #224	; (adr r3, 8013e90 <__kernel_cos+0x160>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	f7ec fa83 	bl	80002bc <__adddf3>
 8013db6:	4622      	mov	r2, r4
 8013db8:	462b      	mov	r3, r5
 8013dba:	f7ec fc35 	bl	8000628 <__aeabi_dmul>
 8013dbe:	a336      	add	r3, pc, #216	; (adr r3, 8013e98 <__kernel_cos+0x168>)
 8013dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc4:	f7ec fa78 	bl	80002b8 <__aeabi_dsub>
 8013dc8:	4622      	mov	r2, r4
 8013dca:	462b      	mov	r3, r5
 8013dcc:	f7ec fc2c 	bl	8000628 <__aeabi_dmul>
 8013dd0:	a333      	add	r3, pc, #204	; (adr r3, 8013ea0 <__kernel_cos+0x170>)
 8013dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd6:	f7ec fa71 	bl	80002bc <__adddf3>
 8013dda:	4622      	mov	r2, r4
 8013ddc:	462b      	mov	r3, r5
 8013dde:	f7ec fc23 	bl	8000628 <__aeabi_dmul>
 8013de2:	4622      	mov	r2, r4
 8013de4:	462b      	mov	r3, r5
 8013de6:	f7ec fc1f 	bl	8000628 <__aeabi_dmul>
 8013dea:	ec53 2b18 	vmov	r2, r3, d8
 8013dee:	4604      	mov	r4, r0
 8013df0:	460d      	mov	r5, r1
 8013df2:	4640      	mov	r0, r8
 8013df4:	4649      	mov	r1, r9
 8013df6:	f7ec fc17 	bl	8000628 <__aeabi_dmul>
 8013dfa:	460b      	mov	r3, r1
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	4629      	mov	r1, r5
 8013e00:	4620      	mov	r0, r4
 8013e02:	f7ec fa59 	bl	80002b8 <__aeabi_dsub>
 8013e06:	4b29      	ldr	r3, [pc, #164]	; (8013eac <__kernel_cos+0x17c>)
 8013e08:	429e      	cmp	r6, r3
 8013e0a:	4680      	mov	r8, r0
 8013e0c:	4689      	mov	r9, r1
 8013e0e:	dc11      	bgt.n	8013e34 <__kernel_cos+0x104>
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	4650      	mov	r0, sl
 8013e16:	4659      	mov	r1, fp
 8013e18:	f7ec fa4e 	bl	80002b8 <__aeabi_dsub>
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	4924      	ldr	r1, [pc, #144]	; (8013eb0 <__kernel_cos+0x180>)
 8013e20:	4602      	mov	r2, r0
 8013e22:	2000      	movs	r0, #0
 8013e24:	f7ec fa48 	bl	80002b8 <__aeabi_dsub>
 8013e28:	ecbd 8b02 	vpop	{d8}
 8013e2c:	ec41 0b10 	vmov	d0, r0, r1
 8013e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e34:	4b1f      	ldr	r3, [pc, #124]	; (8013eb4 <__kernel_cos+0x184>)
 8013e36:	491e      	ldr	r1, [pc, #120]	; (8013eb0 <__kernel_cos+0x180>)
 8013e38:	429e      	cmp	r6, r3
 8013e3a:	bfcc      	ite	gt
 8013e3c:	4d1e      	ldrgt	r5, [pc, #120]	; (8013eb8 <__kernel_cos+0x188>)
 8013e3e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013e42:	2400      	movs	r4, #0
 8013e44:	4622      	mov	r2, r4
 8013e46:	462b      	mov	r3, r5
 8013e48:	2000      	movs	r0, #0
 8013e4a:	f7ec fa35 	bl	80002b8 <__aeabi_dsub>
 8013e4e:	4622      	mov	r2, r4
 8013e50:	4606      	mov	r6, r0
 8013e52:	460f      	mov	r7, r1
 8013e54:	462b      	mov	r3, r5
 8013e56:	4650      	mov	r0, sl
 8013e58:	4659      	mov	r1, fp
 8013e5a:	f7ec fa2d 	bl	80002b8 <__aeabi_dsub>
 8013e5e:	4642      	mov	r2, r8
 8013e60:	464b      	mov	r3, r9
 8013e62:	f7ec fa29 	bl	80002b8 <__aeabi_dsub>
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	e7d9      	b.n	8013e24 <__kernel_cos+0xf4>
 8013e70:	2000      	movs	r0, #0
 8013e72:	490f      	ldr	r1, [pc, #60]	; (8013eb0 <__kernel_cos+0x180>)
 8013e74:	e7d8      	b.n	8013e28 <__kernel_cos+0xf8>
 8013e76:	bf00      	nop
 8013e78:	be8838d4 	.word	0xbe8838d4
 8013e7c:	bda8fae9 	.word	0xbda8fae9
 8013e80:	bdb4b1c4 	.word	0xbdb4b1c4
 8013e84:	3e21ee9e 	.word	0x3e21ee9e
 8013e88:	809c52ad 	.word	0x809c52ad
 8013e8c:	3e927e4f 	.word	0x3e927e4f
 8013e90:	19cb1590 	.word	0x19cb1590
 8013e94:	3efa01a0 	.word	0x3efa01a0
 8013e98:	16c15177 	.word	0x16c15177
 8013e9c:	3f56c16c 	.word	0x3f56c16c
 8013ea0:	5555554c 	.word	0x5555554c
 8013ea4:	3fa55555 	.word	0x3fa55555
 8013ea8:	3fe00000 	.word	0x3fe00000
 8013eac:	3fd33332 	.word	0x3fd33332
 8013eb0:	3ff00000 	.word	0x3ff00000
 8013eb4:	3fe90000 	.word	0x3fe90000
 8013eb8:	3fd20000 	.word	0x3fd20000
 8013ebc:	00000000 	.word	0x00000000

08013ec0 <__kernel_rem_pio2>:
 8013ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec4:	ed2d 8b02 	vpush	{d8}
 8013ec8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013ecc:	1ed4      	subs	r4, r2, #3
 8013ece:	9308      	str	r3, [sp, #32]
 8013ed0:	9101      	str	r1, [sp, #4]
 8013ed2:	4bc5      	ldr	r3, [pc, #788]	; (80141e8 <__kernel_rem_pio2+0x328>)
 8013ed4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013ed6:	9009      	str	r0, [sp, #36]	; 0x24
 8013ed8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013edc:	9304      	str	r3, [sp, #16]
 8013ede:	9b08      	ldr	r3, [sp, #32]
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	9307      	str	r3, [sp, #28]
 8013ee4:	2318      	movs	r3, #24
 8013ee6:	fb94 f4f3 	sdiv	r4, r4, r3
 8013eea:	f06f 0317 	mvn.w	r3, #23
 8013eee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013ef2:	fb04 3303 	mla	r3, r4, r3, r3
 8013ef6:	eb03 0a02 	add.w	sl, r3, r2
 8013efa:	9b04      	ldr	r3, [sp, #16]
 8013efc:	9a07      	ldr	r2, [sp, #28]
 8013efe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80141d8 <__kernel_rem_pio2+0x318>
 8013f02:	eb03 0802 	add.w	r8, r3, r2
 8013f06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013f08:	1aa7      	subs	r7, r4, r2
 8013f0a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013f0e:	ae22      	add	r6, sp, #136	; 0x88
 8013f10:	2500      	movs	r5, #0
 8013f12:	4545      	cmp	r5, r8
 8013f14:	dd13      	ble.n	8013f3e <__kernel_rem_pio2+0x7e>
 8013f16:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80141d8 <__kernel_rem_pio2+0x318>
 8013f1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013f1e:	2600      	movs	r6, #0
 8013f20:	9b04      	ldr	r3, [sp, #16]
 8013f22:	429e      	cmp	r6, r3
 8013f24:	dc32      	bgt.n	8013f8c <__kernel_rem_pio2+0xcc>
 8013f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f28:	9302      	str	r3, [sp, #8]
 8013f2a:	9b08      	ldr	r3, [sp, #32]
 8013f2c:	199d      	adds	r5, r3, r6
 8013f2e:	ab22      	add	r3, sp, #136	; 0x88
 8013f30:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013f34:	9306      	str	r3, [sp, #24]
 8013f36:	ec59 8b18 	vmov	r8, r9, d8
 8013f3a:	2700      	movs	r7, #0
 8013f3c:	e01f      	b.n	8013f7e <__kernel_rem_pio2+0xbe>
 8013f3e:	42ef      	cmn	r7, r5
 8013f40:	d407      	bmi.n	8013f52 <__kernel_rem_pio2+0x92>
 8013f42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013f46:	f7ec fb05 	bl	8000554 <__aeabi_i2d>
 8013f4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013f4e:	3501      	adds	r5, #1
 8013f50:	e7df      	b.n	8013f12 <__kernel_rem_pio2+0x52>
 8013f52:	ec51 0b18 	vmov	r0, r1, d8
 8013f56:	e7f8      	b.n	8013f4a <__kernel_rem_pio2+0x8a>
 8013f58:	9906      	ldr	r1, [sp, #24]
 8013f5a:	9d02      	ldr	r5, [sp, #8]
 8013f5c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013f60:	9106      	str	r1, [sp, #24]
 8013f62:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013f66:	9502      	str	r5, [sp, #8]
 8013f68:	f7ec fb5e 	bl	8000628 <__aeabi_dmul>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	4640      	mov	r0, r8
 8013f72:	4649      	mov	r1, r9
 8013f74:	f7ec f9a2 	bl	80002bc <__adddf3>
 8013f78:	3701      	adds	r7, #1
 8013f7a:	4680      	mov	r8, r0
 8013f7c:	4689      	mov	r9, r1
 8013f7e:	9b07      	ldr	r3, [sp, #28]
 8013f80:	429f      	cmp	r7, r3
 8013f82:	dde9      	ble.n	8013f58 <__kernel_rem_pio2+0x98>
 8013f84:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013f88:	3601      	adds	r6, #1
 8013f8a:	e7c9      	b.n	8013f20 <__kernel_rem_pio2+0x60>
 8013f8c:	9b04      	ldr	r3, [sp, #16]
 8013f8e:	aa0e      	add	r2, sp, #56	; 0x38
 8013f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f94:	930c      	str	r3, [sp, #48]	; 0x30
 8013f96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013f98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013f9c:	9c04      	ldr	r4, [sp, #16]
 8013f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fa0:	ab9a      	add	r3, sp, #616	; 0x268
 8013fa2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013fa6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013faa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013fae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013fb2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013fb6:	ab9a      	add	r3, sp, #616	; 0x268
 8013fb8:	445b      	add	r3, fp
 8013fba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013fbe:	2500      	movs	r5, #0
 8013fc0:	1b63      	subs	r3, r4, r5
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	dc78      	bgt.n	80140b8 <__kernel_rem_pio2+0x1f8>
 8013fc6:	4650      	mov	r0, sl
 8013fc8:	ec49 8b10 	vmov	d0, r8, r9
 8013fcc:	f000 fc00 	bl	80147d0 <scalbn>
 8013fd0:	ec57 6b10 	vmov	r6, r7, d0
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013fda:	ee10 0a10 	vmov	r0, s0
 8013fde:	4639      	mov	r1, r7
 8013fe0:	f7ec fb22 	bl	8000628 <__aeabi_dmul>
 8013fe4:	ec41 0b10 	vmov	d0, r0, r1
 8013fe8:	f000 fb6e 	bl	80146c8 <floor>
 8013fec:	2200      	movs	r2, #0
 8013fee:	ec51 0b10 	vmov	r0, r1, d0
 8013ff2:	4b7e      	ldr	r3, [pc, #504]	; (80141ec <__kernel_rem_pio2+0x32c>)
 8013ff4:	f7ec fb18 	bl	8000628 <__aeabi_dmul>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	4630      	mov	r0, r6
 8013ffe:	4639      	mov	r1, r7
 8014000:	f7ec f95a 	bl	80002b8 <__aeabi_dsub>
 8014004:	460f      	mov	r7, r1
 8014006:	4606      	mov	r6, r0
 8014008:	f7ec fdbe 	bl	8000b88 <__aeabi_d2iz>
 801400c:	9006      	str	r0, [sp, #24]
 801400e:	f7ec faa1 	bl	8000554 <__aeabi_i2d>
 8014012:	4602      	mov	r2, r0
 8014014:	460b      	mov	r3, r1
 8014016:	4630      	mov	r0, r6
 8014018:	4639      	mov	r1, r7
 801401a:	f7ec f94d 	bl	80002b8 <__aeabi_dsub>
 801401e:	f1ba 0f00 	cmp.w	sl, #0
 8014022:	4606      	mov	r6, r0
 8014024:	460f      	mov	r7, r1
 8014026:	dd6c      	ble.n	8014102 <__kernel_rem_pio2+0x242>
 8014028:	1e62      	subs	r2, r4, #1
 801402a:	ab0e      	add	r3, sp, #56	; 0x38
 801402c:	f1ca 0118 	rsb	r1, sl, #24
 8014030:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014034:	9d06      	ldr	r5, [sp, #24]
 8014036:	fa40 f301 	asr.w	r3, r0, r1
 801403a:	441d      	add	r5, r3
 801403c:	408b      	lsls	r3, r1
 801403e:	1ac0      	subs	r0, r0, r3
 8014040:	ab0e      	add	r3, sp, #56	; 0x38
 8014042:	9506      	str	r5, [sp, #24]
 8014044:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014048:	f1ca 0317 	rsb	r3, sl, #23
 801404c:	fa40 f303 	asr.w	r3, r0, r3
 8014050:	9302      	str	r3, [sp, #8]
 8014052:	9b02      	ldr	r3, [sp, #8]
 8014054:	2b00      	cmp	r3, #0
 8014056:	dd62      	ble.n	801411e <__kernel_rem_pio2+0x25e>
 8014058:	9b06      	ldr	r3, [sp, #24]
 801405a:	2200      	movs	r2, #0
 801405c:	3301      	adds	r3, #1
 801405e:	9306      	str	r3, [sp, #24]
 8014060:	4615      	mov	r5, r2
 8014062:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014066:	4294      	cmp	r4, r2
 8014068:	f300 8095 	bgt.w	8014196 <__kernel_rem_pio2+0x2d6>
 801406c:	f1ba 0f00 	cmp.w	sl, #0
 8014070:	dd07      	ble.n	8014082 <__kernel_rem_pio2+0x1c2>
 8014072:	f1ba 0f01 	cmp.w	sl, #1
 8014076:	f000 80a2 	beq.w	80141be <__kernel_rem_pio2+0x2fe>
 801407a:	f1ba 0f02 	cmp.w	sl, #2
 801407e:	f000 80c1 	beq.w	8014204 <__kernel_rem_pio2+0x344>
 8014082:	9b02      	ldr	r3, [sp, #8]
 8014084:	2b02      	cmp	r3, #2
 8014086:	d14a      	bne.n	801411e <__kernel_rem_pio2+0x25e>
 8014088:	4632      	mov	r2, r6
 801408a:	463b      	mov	r3, r7
 801408c:	2000      	movs	r0, #0
 801408e:	4958      	ldr	r1, [pc, #352]	; (80141f0 <__kernel_rem_pio2+0x330>)
 8014090:	f7ec f912 	bl	80002b8 <__aeabi_dsub>
 8014094:	4606      	mov	r6, r0
 8014096:	460f      	mov	r7, r1
 8014098:	2d00      	cmp	r5, #0
 801409a:	d040      	beq.n	801411e <__kernel_rem_pio2+0x25e>
 801409c:	4650      	mov	r0, sl
 801409e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80141e0 <__kernel_rem_pio2+0x320>
 80140a2:	f000 fb95 	bl	80147d0 <scalbn>
 80140a6:	4630      	mov	r0, r6
 80140a8:	4639      	mov	r1, r7
 80140aa:	ec53 2b10 	vmov	r2, r3, d0
 80140ae:	f7ec f903 	bl	80002b8 <__aeabi_dsub>
 80140b2:	4606      	mov	r6, r0
 80140b4:	460f      	mov	r7, r1
 80140b6:	e032      	b.n	801411e <__kernel_rem_pio2+0x25e>
 80140b8:	2200      	movs	r2, #0
 80140ba:	4b4e      	ldr	r3, [pc, #312]	; (80141f4 <__kernel_rem_pio2+0x334>)
 80140bc:	4640      	mov	r0, r8
 80140be:	4649      	mov	r1, r9
 80140c0:	f7ec fab2 	bl	8000628 <__aeabi_dmul>
 80140c4:	f7ec fd60 	bl	8000b88 <__aeabi_d2iz>
 80140c8:	f7ec fa44 	bl	8000554 <__aeabi_i2d>
 80140cc:	2200      	movs	r2, #0
 80140ce:	4b4a      	ldr	r3, [pc, #296]	; (80141f8 <__kernel_rem_pio2+0x338>)
 80140d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140d4:	f7ec faa8 	bl	8000628 <__aeabi_dmul>
 80140d8:	4602      	mov	r2, r0
 80140da:	460b      	mov	r3, r1
 80140dc:	4640      	mov	r0, r8
 80140de:	4649      	mov	r1, r9
 80140e0:	f7ec f8ea 	bl	80002b8 <__aeabi_dsub>
 80140e4:	f7ec fd50 	bl	8000b88 <__aeabi_d2iz>
 80140e8:	ab0e      	add	r3, sp, #56	; 0x38
 80140ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80140ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80140f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140f6:	f7ec f8e1 	bl	80002bc <__adddf3>
 80140fa:	3501      	adds	r5, #1
 80140fc:	4680      	mov	r8, r0
 80140fe:	4689      	mov	r9, r1
 8014100:	e75e      	b.n	8013fc0 <__kernel_rem_pio2+0x100>
 8014102:	d105      	bne.n	8014110 <__kernel_rem_pio2+0x250>
 8014104:	1e63      	subs	r3, r4, #1
 8014106:	aa0e      	add	r2, sp, #56	; 0x38
 8014108:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801410c:	15c3      	asrs	r3, r0, #23
 801410e:	e79f      	b.n	8014050 <__kernel_rem_pio2+0x190>
 8014110:	2200      	movs	r2, #0
 8014112:	4b3a      	ldr	r3, [pc, #232]	; (80141fc <__kernel_rem_pio2+0x33c>)
 8014114:	f7ec fd0e 	bl	8000b34 <__aeabi_dcmpge>
 8014118:	2800      	cmp	r0, #0
 801411a:	d139      	bne.n	8014190 <__kernel_rem_pio2+0x2d0>
 801411c:	9002      	str	r0, [sp, #8]
 801411e:	2200      	movs	r2, #0
 8014120:	2300      	movs	r3, #0
 8014122:	4630      	mov	r0, r6
 8014124:	4639      	mov	r1, r7
 8014126:	f7ec fce7 	bl	8000af8 <__aeabi_dcmpeq>
 801412a:	2800      	cmp	r0, #0
 801412c:	f000 80c7 	beq.w	80142be <__kernel_rem_pio2+0x3fe>
 8014130:	1e65      	subs	r5, r4, #1
 8014132:	462b      	mov	r3, r5
 8014134:	2200      	movs	r2, #0
 8014136:	9904      	ldr	r1, [sp, #16]
 8014138:	428b      	cmp	r3, r1
 801413a:	da6a      	bge.n	8014212 <__kernel_rem_pio2+0x352>
 801413c:	2a00      	cmp	r2, #0
 801413e:	f000 8088 	beq.w	8014252 <__kernel_rem_pio2+0x392>
 8014142:	ab0e      	add	r3, sp, #56	; 0x38
 8014144:	f1aa 0a18 	sub.w	sl, sl, #24
 8014148:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801414c:	2b00      	cmp	r3, #0
 801414e:	f000 80b4 	beq.w	80142ba <__kernel_rem_pio2+0x3fa>
 8014152:	4650      	mov	r0, sl
 8014154:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80141e0 <__kernel_rem_pio2+0x320>
 8014158:	f000 fb3a 	bl	80147d0 <scalbn>
 801415c:	00ec      	lsls	r4, r5, #3
 801415e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014160:	191e      	adds	r6, r3, r4
 8014162:	ec59 8b10 	vmov	r8, r9, d0
 8014166:	f106 0a08 	add.w	sl, r6, #8
 801416a:	462f      	mov	r7, r5
 801416c:	2f00      	cmp	r7, #0
 801416e:	f280 80df 	bge.w	8014330 <__kernel_rem_pio2+0x470>
 8014172:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80141d8 <__kernel_rem_pio2+0x318>
 8014176:	f04f 0a00 	mov.w	sl, #0
 801417a:	eba5 030a 	sub.w	r3, r5, sl
 801417e:	2b00      	cmp	r3, #0
 8014180:	f2c0 810a 	blt.w	8014398 <__kernel_rem_pio2+0x4d8>
 8014184:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014200 <__kernel_rem_pio2+0x340>
 8014188:	ec59 8b18 	vmov	r8, r9, d8
 801418c:	2700      	movs	r7, #0
 801418e:	e0f5      	b.n	801437c <__kernel_rem_pio2+0x4bc>
 8014190:	2302      	movs	r3, #2
 8014192:	9302      	str	r3, [sp, #8]
 8014194:	e760      	b.n	8014058 <__kernel_rem_pio2+0x198>
 8014196:	ab0e      	add	r3, sp, #56	; 0x38
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	b94d      	cbnz	r5, 80141b2 <__kernel_rem_pio2+0x2f2>
 801419e:	b12b      	cbz	r3, 80141ac <__kernel_rem_pio2+0x2ec>
 80141a0:	a80e      	add	r0, sp, #56	; 0x38
 80141a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80141a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80141aa:	2301      	movs	r3, #1
 80141ac:	3201      	adds	r2, #1
 80141ae:	461d      	mov	r5, r3
 80141b0:	e759      	b.n	8014066 <__kernel_rem_pio2+0x1a6>
 80141b2:	a80e      	add	r0, sp, #56	; 0x38
 80141b4:	1acb      	subs	r3, r1, r3
 80141b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80141ba:	462b      	mov	r3, r5
 80141bc:	e7f6      	b.n	80141ac <__kernel_rem_pio2+0x2ec>
 80141be:	1e62      	subs	r2, r4, #1
 80141c0:	ab0e      	add	r3, sp, #56	; 0x38
 80141c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80141ca:	a90e      	add	r1, sp, #56	; 0x38
 80141cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80141d0:	e757      	b.n	8014082 <__kernel_rem_pio2+0x1c2>
 80141d2:	bf00      	nop
 80141d4:	f3af 8000 	nop.w
	...
 80141e4:	3ff00000 	.word	0x3ff00000
 80141e8:	08019520 	.word	0x08019520
 80141ec:	40200000 	.word	0x40200000
 80141f0:	3ff00000 	.word	0x3ff00000
 80141f4:	3e700000 	.word	0x3e700000
 80141f8:	41700000 	.word	0x41700000
 80141fc:	3fe00000 	.word	0x3fe00000
 8014200:	080194e0 	.word	0x080194e0
 8014204:	1e62      	subs	r2, r4, #1
 8014206:	ab0e      	add	r3, sp, #56	; 0x38
 8014208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801420c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014210:	e7db      	b.n	80141ca <__kernel_rem_pio2+0x30a>
 8014212:	a90e      	add	r1, sp, #56	; 0x38
 8014214:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014218:	3b01      	subs	r3, #1
 801421a:	430a      	orrs	r2, r1
 801421c:	e78b      	b.n	8014136 <__kernel_rem_pio2+0x276>
 801421e:	3301      	adds	r3, #1
 8014220:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014224:	2900      	cmp	r1, #0
 8014226:	d0fa      	beq.n	801421e <__kernel_rem_pio2+0x35e>
 8014228:	9a08      	ldr	r2, [sp, #32]
 801422a:	4422      	add	r2, r4
 801422c:	00d2      	lsls	r2, r2, #3
 801422e:	a922      	add	r1, sp, #136	; 0x88
 8014230:	18e3      	adds	r3, r4, r3
 8014232:	9206      	str	r2, [sp, #24]
 8014234:	440a      	add	r2, r1
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	f10b 0108 	add.w	r1, fp, #8
 801423c:	f102 0308 	add.w	r3, r2, #8
 8014240:	1c66      	adds	r6, r4, #1
 8014242:	910a      	str	r1, [sp, #40]	; 0x28
 8014244:	2500      	movs	r5, #0
 8014246:	930d      	str	r3, [sp, #52]	; 0x34
 8014248:	9b02      	ldr	r3, [sp, #8]
 801424a:	42b3      	cmp	r3, r6
 801424c:	da04      	bge.n	8014258 <__kernel_rem_pio2+0x398>
 801424e:	461c      	mov	r4, r3
 8014250:	e6a6      	b.n	8013fa0 <__kernel_rem_pio2+0xe0>
 8014252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014254:	2301      	movs	r3, #1
 8014256:	e7e3      	b.n	8014220 <__kernel_rem_pio2+0x360>
 8014258:	9b06      	ldr	r3, [sp, #24]
 801425a:	18ef      	adds	r7, r5, r3
 801425c:	ab22      	add	r3, sp, #136	; 0x88
 801425e:	441f      	add	r7, r3
 8014260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014262:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014266:	f7ec f975 	bl	8000554 <__aeabi_i2d>
 801426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426c:	461c      	mov	r4, r3
 801426e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014270:	e9c7 0100 	strd	r0, r1, [r7]
 8014274:	eb03 0b05 	add.w	fp, r3, r5
 8014278:	2700      	movs	r7, #0
 801427a:	f04f 0800 	mov.w	r8, #0
 801427e:	f04f 0900 	mov.w	r9, #0
 8014282:	9b07      	ldr	r3, [sp, #28]
 8014284:	429f      	cmp	r7, r3
 8014286:	dd08      	ble.n	801429a <__kernel_rem_pio2+0x3da>
 8014288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801428a:	aa72      	add	r2, sp, #456	; 0x1c8
 801428c:	18eb      	adds	r3, r5, r3
 801428e:	4413      	add	r3, r2
 8014290:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014294:	3601      	adds	r6, #1
 8014296:	3508      	adds	r5, #8
 8014298:	e7d6      	b.n	8014248 <__kernel_rem_pio2+0x388>
 801429a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801429e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80142a2:	f7ec f9c1 	bl	8000628 <__aeabi_dmul>
 80142a6:	4602      	mov	r2, r0
 80142a8:	460b      	mov	r3, r1
 80142aa:	4640      	mov	r0, r8
 80142ac:	4649      	mov	r1, r9
 80142ae:	f7ec f805 	bl	80002bc <__adddf3>
 80142b2:	3701      	adds	r7, #1
 80142b4:	4680      	mov	r8, r0
 80142b6:	4689      	mov	r9, r1
 80142b8:	e7e3      	b.n	8014282 <__kernel_rem_pio2+0x3c2>
 80142ba:	3d01      	subs	r5, #1
 80142bc:	e741      	b.n	8014142 <__kernel_rem_pio2+0x282>
 80142be:	f1ca 0000 	rsb	r0, sl, #0
 80142c2:	ec47 6b10 	vmov	d0, r6, r7
 80142c6:	f000 fa83 	bl	80147d0 <scalbn>
 80142ca:	ec57 6b10 	vmov	r6, r7, d0
 80142ce:	2200      	movs	r2, #0
 80142d0:	4b99      	ldr	r3, [pc, #612]	; (8014538 <__kernel_rem_pio2+0x678>)
 80142d2:	ee10 0a10 	vmov	r0, s0
 80142d6:	4639      	mov	r1, r7
 80142d8:	f7ec fc2c 	bl	8000b34 <__aeabi_dcmpge>
 80142dc:	b1f8      	cbz	r0, 801431e <__kernel_rem_pio2+0x45e>
 80142de:	2200      	movs	r2, #0
 80142e0:	4b96      	ldr	r3, [pc, #600]	; (801453c <__kernel_rem_pio2+0x67c>)
 80142e2:	4630      	mov	r0, r6
 80142e4:	4639      	mov	r1, r7
 80142e6:	f7ec f99f 	bl	8000628 <__aeabi_dmul>
 80142ea:	f7ec fc4d 	bl	8000b88 <__aeabi_d2iz>
 80142ee:	4680      	mov	r8, r0
 80142f0:	f7ec f930 	bl	8000554 <__aeabi_i2d>
 80142f4:	2200      	movs	r2, #0
 80142f6:	4b90      	ldr	r3, [pc, #576]	; (8014538 <__kernel_rem_pio2+0x678>)
 80142f8:	f7ec f996 	bl	8000628 <__aeabi_dmul>
 80142fc:	460b      	mov	r3, r1
 80142fe:	4602      	mov	r2, r0
 8014300:	4639      	mov	r1, r7
 8014302:	4630      	mov	r0, r6
 8014304:	f7eb ffd8 	bl	80002b8 <__aeabi_dsub>
 8014308:	f7ec fc3e 	bl	8000b88 <__aeabi_d2iz>
 801430c:	1c65      	adds	r5, r4, #1
 801430e:	ab0e      	add	r3, sp, #56	; 0x38
 8014310:	f10a 0a18 	add.w	sl, sl, #24
 8014314:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014318:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801431c:	e719      	b.n	8014152 <__kernel_rem_pio2+0x292>
 801431e:	4630      	mov	r0, r6
 8014320:	4639      	mov	r1, r7
 8014322:	f7ec fc31 	bl	8000b88 <__aeabi_d2iz>
 8014326:	ab0e      	add	r3, sp, #56	; 0x38
 8014328:	4625      	mov	r5, r4
 801432a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801432e:	e710      	b.n	8014152 <__kernel_rem_pio2+0x292>
 8014330:	ab0e      	add	r3, sp, #56	; 0x38
 8014332:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014336:	f7ec f90d 	bl	8000554 <__aeabi_i2d>
 801433a:	4642      	mov	r2, r8
 801433c:	464b      	mov	r3, r9
 801433e:	f7ec f973 	bl	8000628 <__aeabi_dmul>
 8014342:	2200      	movs	r2, #0
 8014344:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014348:	4b7c      	ldr	r3, [pc, #496]	; (801453c <__kernel_rem_pio2+0x67c>)
 801434a:	4640      	mov	r0, r8
 801434c:	4649      	mov	r1, r9
 801434e:	f7ec f96b 	bl	8000628 <__aeabi_dmul>
 8014352:	3f01      	subs	r7, #1
 8014354:	4680      	mov	r8, r0
 8014356:	4689      	mov	r9, r1
 8014358:	e708      	b.n	801416c <__kernel_rem_pio2+0x2ac>
 801435a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014362:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014366:	f7ec f95f 	bl	8000628 <__aeabi_dmul>
 801436a:	4602      	mov	r2, r0
 801436c:	460b      	mov	r3, r1
 801436e:	4640      	mov	r0, r8
 8014370:	4649      	mov	r1, r9
 8014372:	f7eb ffa3 	bl	80002bc <__adddf3>
 8014376:	3701      	adds	r7, #1
 8014378:	4680      	mov	r8, r0
 801437a:	4689      	mov	r9, r1
 801437c:	9b04      	ldr	r3, [sp, #16]
 801437e:	429f      	cmp	r7, r3
 8014380:	dc01      	bgt.n	8014386 <__kernel_rem_pio2+0x4c6>
 8014382:	45ba      	cmp	sl, r7
 8014384:	dae9      	bge.n	801435a <__kernel_rem_pio2+0x49a>
 8014386:	ab4a      	add	r3, sp, #296	; 0x128
 8014388:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801438c:	e9c3 8900 	strd	r8, r9, [r3]
 8014390:	f10a 0a01 	add.w	sl, sl, #1
 8014394:	3e08      	subs	r6, #8
 8014396:	e6f0      	b.n	801417a <__kernel_rem_pio2+0x2ba>
 8014398:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801439a:	2b03      	cmp	r3, #3
 801439c:	d85b      	bhi.n	8014456 <__kernel_rem_pio2+0x596>
 801439e:	e8df f003 	tbb	[pc, r3]
 80143a2:	264a      	.short	0x264a
 80143a4:	0226      	.short	0x0226
 80143a6:	ab9a      	add	r3, sp, #616	; 0x268
 80143a8:	441c      	add	r4, r3
 80143aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80143ae:	46a2      	mov	sl, r4
 80143b0:	46ab      	mov	fp, r5
 80143b2:	f1bb 0f00 	cmp.w	fp, #0
 80143b6:	dc6c      	bgt.n	8014492 <__kernel_rem_pio2+0x5d2>
 80143b8:	46a2      	mov	sl, r4
 80143ba:	46ab      	mov	fp, r5
 80143bc:	f1bb 0f01 	cmp.w	fp, #1
 80143c0:	f300 8086 	bgt.w	80144d0 <__kernel_rem_pio2+0x610>
 80143c4:	2000      	movs	r0, #0
 80143c6:	2100      	movs	r1, #0
 80143c8:	2d01      	cmp	r5, #1
 80143ca:	f300 80a0 	bgt.w	801450e <__kernel_rem_pio2+0x64e>
 80143ce:	9b02      	ldr	r3, [sp, #8]
 80143d0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80143d4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80143d8:	2b00      	cmp	r3, #0
 80143da:	f040 809e 	bne.w	801451a <__kernel_rem_pio2+0x65a>
 80143de:	9b01      	ldr	r3, [sp, #4]
 80143e0:	e9c3 7800 	strd	r7, r8, [r3]
 80143e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80143e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80143ec:	e033      	b.n	8014456 <__kernel_rem_pio2+0x596>
 80143ee:	3408      	adds	r4, #8
 80143f0:	ab4a      	add	r3, sp, #296	; 0x128
 80143f2:	441c      	add	r4, r3
 80143f4:	462e      	mov	r6, r5
 80143f6:	2000      	movs	r0, #0
 80143f8:	2100      	movs	r1, #0
 80143fa:	2e00      	cmp	r6, #0
 80143fc:	da3a      	bge.n	8014474 <__kernel_rem_pio2+0x5b4>
 80143fe:	9b02      	ldr	r3, [sp, #8]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d03d      	beq.n	8014480 <__kernel_rem_pio2+0x5c0>
 8014404:	4602      	mov	r2, r0
 8014406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801440a:	9c01      	ldr	r4, [sp, #4]
 801440c:	e9c4 2300 	strd	r2, r3, [r4]
 8014410:	4602      	mov	r2, r0
 8014412:	460b      	mov	r3, r1
 8014414:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014418:	f7eb ff4e 	bl	80002b8 <__aeabi_dsub>
 801441c:	ae4c      	add	r6, sp, #304	; 0x130
 801441e:	2401      	movs	r4, #1
 8014420:	42a5      	cmp	r5, r4
 8014422:	da30      	bge.n	8014486 <__kernel_rem_pio2+0x5c6>
 8014424:	9b02      	ldr	r3, [sp, #8]
 8014426:	b113      	cbz	r3, 801442e <__kernel_rem_pio2+0x56e>
 8014428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801442c:	4619      	mov	r1, r3
 801442e:	9b01      	ldr	r3, [sp, #4]
 8014430:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014434:	e00f      	b.n	8014456 <__kernel_rem_pio2+0x596>
 8014436:	ab9a      	add	r3, sp, #616	; 0x268
 8014438:	441c      	add	r4, r3
 801443a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801443e:	2000      	movs	r0, #0
 8014440:	2100      	movs	r1, #0
 8014442:	2d00      	cmp	r5, #0
 8014444:	da10      	bge.n	8014468 <__kernel_rem_pio2+0x5a8>
 8014446:	9b02      	ldr	r3, [sp, #8]
 8014448:	b113      	cbz	r3, 8014450 <__kernel_rem_pio2+0x590>
 801444a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801444e:	4619      	mov	r1, r3
 8014450:	9b01      	ldr	r3, [sp, #4]
 8014452:	e9c3 0100 	strd	r0, r1, [r3]
 8014456:	9b06      	ldr	r3, [sp, #24]
 8014458:	f003 0007 	and.w	r0, r3, #7
 801445c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014460:	ecbd 8b02 	vpop	{d8}
 8014464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014468:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801446c:	f7eb ff26 	bl	80002bc <__adddf3>
 8014470:	3d01      	subs	r5, #1
 8014472:	e7e6      	b.n	8014442 <__kernel_rem_pio2+0x582>
 8014474:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014478:	f7eb ff20 	bl	80002bc <__adddf3>
 801447c:	3e01      	subs	r6, #1
 801447e:	e7bc      	b.n	80143fa <__kernel_rem_pio2+0x53a>
 8014480:	4602      	mov	r2, r0
 8014482:	460b      	mov	r3, r1
 8014484:	e7c1      	b.n	801440a <__kernel_rem_pio2+0x54a>
 8014486:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801448a:	f7eb ff17 	bl	80002bc <__adddf3>
 801448e:	3401      	adds	r4, #1
 8014490:	e7c6      	b.n	8014420 <__kernel_rem_pio2+0x560>
 8014492:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014496:	ed3a 7b02 	vldmdb	sl!, {d7}
 801449a:	4640      	mov	r0, r8
 801449c:	ec53 2b17 	vmov	r2, r3, d7
 80144a0:	4649      	mov	r1, r9
 80144a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80144a6:	f7eb ff09 	bl	80002bc <__adddf3>
 80144aa:	4602      	mov	r2, r0
 80144ac:	460b      	mov	r3, r1
 80144ae:	4606      	mov	r6, r0
 80144b0:	460f      	mov	r7, r1
 80144b2:	4640      	mov	r0, r8
 80144b4:	4649      	mov	r1, r9
 80144b6:	f7eb feff 	bl	80002b8 <__aeabi_dsub>
 80144ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144be:	f7eb fefd 	bl	80002bc <__adddf3>
 80144c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80144c6:	e9ca 0100 	strd	r0, r1, [sl]
 80144ca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80144ce:	e770      	b.n	80143b2 <__kernel_rem_pio2+0x4f2>
 80144d0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80144d4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80144d8:	4630      	mov	r0, r6
 80144da:	ec53 2b17 	vmov	r2, r3, d7
 80144de:	4639      	mov	r1, r7
 80144e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80144e4:	f7eb feea 	bl	80002bc <__adddf3>
 80144e8:	4602      	mov	r2, r0
 80144ea:	460b      	mov	r3, r1
 80144ec:	4680      	mov	r8, r0
 80144ee:	4689      	mov	r9, r1
 80144f0:	4630      	mov	r0, r6
 80144f2:	4639      	mov	r1, r7
 80144f4:	f7eb fee0 	bl	80002b8 <__aeabi_dsub>
 80144f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144fc:	f7eb fede 	bl	80002bc <__adddf3>
 8014500:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014504:	e9ca 0100 	strd	r0, r1, [sl]
 8014508:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801450c:	e756      	b.n	80143bc <__kernel_rem_pio2+0x4fc>
 801450e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014512:	f7eb fed3 	bl	80002bc <__adddf3>
 8014516:	3d01      	subs	r5, #1
 8014518:	e756      	b.n	80143c8 <__kernel_rem_pio2+0x508>
 801451a:	9b01      	ldr	r3, [sp, #4]
 801451c:	9a01      	ldr	r2, [sp, #4]
 801451e:	601f      	str	r7, [r3, #0]
 8014520:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014524:	605c      	str	r4, [r3, #4]
 8014526:	609d      	str	r5, [r3, #8]
 8014528:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801452c:	60d3      	str	r3, [r2, #12]
 801452e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014532:	6110      	str	r0, [r2, #16]
 8014534:	6153      	str	r3, [r2, #20]
 8014536:	e78e      	b.n	8014456 <__kernel_rem_pio2+0x596>
 8014538:	41700000 	.word	0x41700000
 801453c:	3e700000 	.word	0x3e700000

08014540 <__kernel_sin>:
 8014540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	ec55 4b10 	vmov	r4, r5, d0
 8014548:	b085      	sub	sp, #20
 801454a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801454e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014552:	ed8d 1b00 	vstr	d1, [sp]
 8014556:	9002      	str	r0, [sp, #8]
 8014558:	da06      	bge.n	8014568 <__kernel_sin+0x28>
 801455a:	ee10 0a10 	vmov	r0, s0
 801455e:	4629      	mov	r1, r5
 8014560:	f7ec fb12 	bl	8000b88 <__aeabi_d2iz>
 8014564:	2800      	cmp	r0, #0
 8014566:	d051      	beq.n	801460c <__kernel_sin+0xcc>
 8014568:	4622      	mov	r2, r4
 801456a:	462b      	mov	r3, r5
 801456c:	4620      	mov	r0, r4
 801456e:	4629      	mov	r1, r5
 8014570:	f7ec f85a 	bl	8000628 <__aeabi_dmul>
 8014574:	4682      	mov	sl, r0
 8014576:	468b      	mov	fp, r1
 8014578:	4602      	mov	r2, r0
 801457a:	460b      	mov	r3, r1
 801457c:	4620      	mov	r0, r4
 801457e:	4629      	mov	r1, r5
 8014580:	f7ec f852 	bl	8000628 <__aeabi_dmul>
 8014584:	a341      	add	r3, pc, #260	; (adr r3, 801468c <__kernel_sin+0x14c>)
 8014586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458a:	4680      	mov	r8, r0
 801458c:	4689      	mov	r9, r1
 801458e:	4650      	mov	r0, sl
 8014590:	4659      	mov	r1, fp
 8014592:	f7ec f849 	bl	8000628 <__aeabi_dmul>
 8014596:	a33f      	add	r3, pc, #252	; (adr r3, 8014694 <__kernel_sin+0x154>)
 8014598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459c:	f7eb fe8c 	bl	80002b8 <__aeabi_dsub>
 80145a0:	4652      	mov	r2, sl
 80145a2:	465b      	mov	r3, fp
 80145a4:	f7ec f840 	bl	8000628 <__aeabi_dmul>
 80145a8:	a33c      	add	r3, pc, #240	; (adr r3, 801469c <__kernel_sin+0x15c>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7eb fe85 	bl	80002bc <__adddf3>
 80145b2:	4652      	mov	r2, sl
 80145b4:	465b      	mov	r3, fp
 80145b6:	f7ec f837 	bl	8000628 <__aeabi_dmul>
 80145ba:	a33a      	add	r3, pc, #232	; (adr r3, 80146a4 <__kernel_sin+0x164>)
 80145bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c0:	f7eb fe7a 	bl	80002b8 <__aeabi_dsub>
 80145c4:	4652      	mov	r2, sl
 80145c6:	465b      	mov	r3, fp
 80145c8:	f7ec f82e 	bl	8000628 <__aeabi_dmul>
 80145cc:	a337      	add	r3, pc, #220	; (adr r3, 80146ac <__kernel_sin+0x16c>)
 80145ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d2:	f7eb fe73 	bl	80002bc <__adddf3>
 80145d6:	9b02      	ldr	r3, [sp, #8]
 80145d8:	4606      	mov	r6, r0
 80145da:	460f      	mov	r7, r1
 80145dc:	b9db      	cbnz	r3, 8014616 <__kernel_sin+0xd6>
 80145de:	4602      	mov	r2, r0
 80145e0:	460b      	mov	r3, r1
 80145e2:	4650      	mov	r0, sl
 80145e4:	4659      	mov	r1, fp
 80145e6:	f7ec f81f 	bl	8000628 <__aeabi_dmul>
 80145ea:	a325      	add	r3, pc, #148	; (adr r3, 8014680 <__kernel_sin+0x140>)
 80145ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f0:	f7eb fe62 	bl	80002b8 <__aeabi_dsub>
 80145f4:	4642      	mov	r2, r8
 80145f6:	464b      	mov	r3, r9
 80145f8:	f7ec f816 	bl	8000628 <__aeabi_dmul>
 80145fc:	4602      	mov	r2, r0
 80145fe:	460b      	mov	r3, r1
 8014600:	4620      	mov	r0, r4
 8014602:	4629      	mov	r1, r5
 8014604:	f7eb fe5a 	bl	80002bc <__adddf3>
 8014608:	4604      	mov	r4, r0
 801460a:	460d      	mov	r5, r1
 801460c:	ec45 4b10 	vmov	d0, r4, r5
 8014610:	b005      	add	sp, #20
 8014612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014616:	2200      	movs	r2, #0
 8014618:	4b1b      	ldr	r3, [pc, #108]	; (8014688 <__kernel_sin+0x148>)
 801461a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801461e:	f7ec f803 	bl	8000628 <__aeabi_dmul>
 8014622:	4632      	mov	r2, r6
 8014624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014628:	463b      	mov	r3, r7
 801462a:	4640      	mov	r0, r8
 801462c:	4649      	mov	r1, r9
 801462e:	f7eb fffb 	bl	8000628 <__aeabi_dmul>
 8014632:	4602      	mov	r2, r0
 8014634:	460b      	mov	r3, r1
 8014636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801463a:	f7eb fe3d 	bl	80002b8 <__aeabi_dsub>
 801463e:	4652      	mov	r2, sl
 8014640:	465b      	mov	r3, fp
 8014642:	f7eb fff1 	bl	8000628 <__aeabi_dmul>
 8014646:	e9dd 2300 	ldrd	r2, r3, [sp]
 801464a:	f7eb fe35 	bl	80002b8 <__aeabi_dsub>
 801464e:	a30c      	add	r3, pc, #48	; (adr r3, 8014680 <__kernel_sin+0x140>)
 8014650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014654:	4606      	mov	r6, r0
 8014656:	460f      	mov	r7, r1
 8014658:	4640      	mov	r0, r8
 801465a:	4649      	mov	r1, r9
 801465c:	f7eb ffe4 	bl	8000628 <__aeabi_dmul>
 8014660:	4602      	mov	r2, r0
 8014662:	460b      	mov	r3, r1
 8014664:	4630      	mov	r0, r6
 8014666:	4639      	mov	r1, r7
 8014668:	f7eb fe28 	bl	80002bc <__adddf3>
 801466c:	4602      	mov	r2, r0
 801466e:	460b      	mov	r3, r1
 8014670:	4620      	mov	r0, r4
 8014672:	4629      	mov	r1, r5
 8014674:	f7eb fe20 	bl	80002b8 <__aeabi_dsub>
 8014678:	e7c6      	b.n	8014608 <__kernel_sin+0xc8>
 801467a:	bf00      	nop
 801467c:	f3af 8000 	nop.w
 8014680:	55555549 	.word	0x55555549
 8014684:	3fc55555 	.word	0x3fc55555
 8014688:	3fe00000 	.word	0x3fe00000
 801468c:	5acfd57c 	.word	0x5acfd57c
 8014690:	3de5d93a 	.word	0x3de5d93a
 8014694:	8a2b9ceb 	.word	0x8a2b9ceb
 8014698:	3e5ae5e6 	.word	0x3e5ae5e6
 801469c:	57b1fe7d 	.word	0x57b1fe7d
 80146a0:	3ec71de3 	.word	0x3ec71de3
 80146a4:	19c161d5 	.word	0x19c161d5
 80146a8:	3f2a01a0 	.word	0x3f2a01a0
 80146ac:	1110f8a6 	.word	0x1110f8a6
 80146b0:	3f811111 	.word	0x3f811111

080146b4 <fabs>:
 80146b4:	ec51 0b10 	vmov	r0, r1, d0
 80146b8:	ee10 2a10 	vmov	r2, s0
 80146bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80146c0:	ec43 2b10 	vmov	d0, r2, r3
 80146c4:	4770      	bx	lr
	...

080146c8 <floor>:
 80146c8:	ec51 0b10 	vmov	r0, r1, d0
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80146d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80146d8:	2e13      	cmp	r6, #19
 80146da:	460c      	mov	r4, r1
 80146dc:	ee10 5a10 	vmov	r5, s0
 80146e0:	4680      	mov	r8, r0
 80146e2:	dc34      	bgt.n	801474e <floor+0x86>
 80146e4:	2e00      	cmp	r6, #0
 80146e6:	da16      	bge.n	8014716 <floor+0x4e>
 80146e8:	a335      	add	r3, pc, #212	; (adr r3, 80147c0 <floor+0xf8>)
 80146ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ee:	f7eb fde5 	bl	80002bc <__adddf3>
 80146f2:	2200      	movs	r2, #0
 80146f4:	2300      	movs	r3, #0
 80146f6:	f7ec fa27 	bl	8000b48 <__aeabi_dcmpgt>
 80146fa:	b148      	cbz	r0, 8014710 <floor+0x48>
 80146fc:	2c00      	cmp	r4, #0
 80146fe:	da59      	bge.n	80147b4 <floor+0xec>
 8014700:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014704:	4a30      	ldr	r2, [pc, #192]	; (80147c8 <floor+0x100>)
 8014706:	432b      	orrs	r3, r5
 8014708:	2500      	movs	r5, #0
 801470a:	42ab      	cmp	r3, r5
 801470c:	bf18      	it	ne
 801470e:	4614      	movne	r4, r2
 8014710:	4621      	mov	r1, r4
 8014712:	4628      	mov	r0, r5
 8014714:	e025      	b.n	8014762 <floor+0x9a>
 8014716:	4f2d      	ldr	r7, [pc, #180]	; (80147cc <floor+0x104>)
 8014718:	4137      	asrs	r7, r6
 801471a:	ea01 0307 	and.w	r3, r1, r7
 801471e:	4303      	orrs	r3, r0
 8014720:	d01f      	beq.n	8014762 <floor+0x9a>
 8014722:	a327      	add	r3, pc, #156	; (adr r3, 80147c0 <floor+0xf8>)
 8014724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014728:	f7eb fdc8 	bl	80002bc <__adddf3>
 801472c:	2200      	movs	r2, #0
 801472e:	2300      	movs	r3, #0
 8014730:	f7ec fa0a 	bl	8000b48 <__aeabi_dcmpgt>
 8014734:	2800      	cmp	r0, #0
 8014736:	d0eb      	beq.n	8014710 <floor+0x48>
 8014738:	2c00      	cmp	r4, #0
 801473a:	bfbe      	ittt	lt
 801473c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014740:	fa43 f606 	asrlt.w	r6, r3, r6
 8014744:	19a4      	addlt	r4, r4, r6
 8014746:	ea24 0407 	bic.w	r4, r4, r7
 801474a:	2500      	movs	r5, #0
 801474c:	e7e0      	b.n	8014710 <floor+0x48>
 801474e:	2e33      	cmp	r6, #51	; 0x33
 8014750:	dd0b      	ble.n	801476a <floor+0xa2>
 8014752:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014756:	d104      	bne.n	8014762 <floor+0x9a>
 8014758:	ee10 2a10 	vmov	r2, s0
 801475c:	460b      	mov	r3, r1
 801475e:	f7eb fdad 	bl	80002bc <__adddf3>
 8014762:	ec41 0b10 	vmov	d0, r0, r1
 8014766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801476a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801476e:	f04f 33ff 	mov.w	r3, #4294967295
 8014772:	fa23 f707 	lsr.w	r7, r3, r7
 8014776:	4207      	tst	r7, r0
 8014778:	d0f3      	beq.n	8014762 <floor+0x9a>
 801477a:	a311      	add	r3, pc, #68	; (adr r3, 80147c0 <floor+0xf8>)
 801477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014780:	f7eb fd9c 	bl	80002bc <__adddf3>
 8014784:	2200      	movs	r2, #0
 8014786:	2300      	movs	r3, #0
 8014788:	f7ec f9de 	bl	8000b48 <__aeabi_dcmpgt>
 801478c:	2800      	cmp	r0, #0
 801478e:	d0bf      	beq.n	8014710 <floor+0x48>
 8014790:	2c00      	cmp	r4, #0
 8014792:	da02      	bge.n	801479a <floor+0xd2>
 8014794:	2e14      	cmp	r6, #20
 8014796:	d103      	bne.n	80147a0 <floor+0xd8>
 8014798:	3401      	adds	r4, #1
 801479a:	ea25 0507 	bic.w	r5, r5, r7
 801479e:	e7b7      	b.n	8014710 <floor+0x48>
 80147a0:	2301      	movs	r3, #1
 80147a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80147a6:	fa03 f606 	lsl.w	r6, r3, r6
 80147aa:	4435      	add	r5, r6
 80147ac:	4545      	cmp	r5, r8
 80147ae:	bf38      	it	cc
 80147b0:	18e4      	addcc	r4, r4, r3
 80147b2:	e7f2      	b.n	801479a <floor+0xd2>
 80147b4:	2500      	movs	r5, #0
 80147b6:	462c      	mov	r4, r5
 80147b8:	e7aa      	b.n	8014710 <floor+0x48>
 80147ba:	bf00      	nop
 80147bc:	f3af 8000 	nop.w
 80147c0:	8800759c 	.word	0x8800759c
 80147c4:	7e37e43c 	.word	0x7e37e43c
 80147c8:	bff00000 	.word	0xbff00000
 80147cc:	000fffff 	.word	0x000fffff

080147d0 <scalbn>:
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	ec55 4b10 	vmov	r4, r5, d0
 80147d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80147da:	4606      	mov	r6, r0
 80147dc:	462b      	mov	r3, r5
 80147de:	b9aa      	cbnz	r2, 801480c <scalbn+0x3c>
 80147e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80147e4:	4323      	orrs	r3, r4
 80147e6:	d03b      	beq.n	8014860 <scalbn+0x90>
 80147e8:	4b31      	ldr	r3, [pc, #196]	; (80148b0 <scalbn+0xe0>)
 80147ea:	4629      	mov	r1, r5
 80147ec:	2200      	movs	r2, #0
 80147ee:	ee10 0a10 	vmov	r0, s0
 80147f2:	f7eb ff19 	bl	8000628 <__aeabi_dmul>
 80147f6:	4b2f      	ldr	r3, [pc, #188]	; (80148b4 <scalbn+0xe4>)
 80147f8:	429e      	cmp	r6, r3
 80147fa:	4604      	mov	r4, r0
 80147fc:	460d      	mov	r5, r1
 80147fe:	da12      	bge.n	8014826 <scalbn+0x56>
 8014800:	a327      	add	r3, pc, #156	; (adr r3, 80148a0 <scalbn+0xd0>)
 8014802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014806:	f7eb ff0f 	bl	8000628 <__aeabi_dmul>
 801480a:	e009      	b.n	8014820 <scalbn+0x50>
 801480c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014810:	428a      	cmp	r2, r1
 8014812:	d10c      	bne.n	801482e <scalbn+0x5e>
 8014814:	ee10 2a10 	vmov	r2, s0
 8014818:	4620      	mov	r0, r4
 801481a:	4629      	mov	r1, r5
 801481c:	f7eb fd4e 	bl	80002bc <__adddf3>
 8014820:	4604      	mov	r4, r0
 8014822:	460d      	mov	r5, r1
 8014824:	e01c      	b.n	8014860 <scalbn+0x90>
 8014826:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801482a:	460b      	mov	r3, r1
 801482c:	3a36      	subs	r2, #54	; 0x36
 801482e:	4432      	add	r2, r6
 8014830:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014834:	428a      	cmp	r2, r1
 8014836:	dd0b      	ble.n	8014850 <scalbn+0x80>
 8014838:	ec45 4b11 	vmov	d1, r4, r5
 801483c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80148a8 <scalbn+0xd8>
 8014840:	f000 f83c 	bl	80148bc <copysign>
 8014844:	a318      	add	r3, pc, #96	; (adr r3, 80148a8 <scalbn+0xd8>)
 8014846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484a:	ec51 0b10 	vmov	r0, r1, d0
 801484e:	e7da      	b.n	8014806 <scalbn+0x36>
 8014850:	2a00      	cmp	r2, #0
 8014852:	dd08      	ble.n	8014866 <scalbn+0x96>
 8014854:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014858:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801485c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014860:	ec45 4b10 	vmov	d0, r4, r5
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801486a:	da0d      	bge.n	8014888 <scalbn+0xb8>
 801486c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014870:	429e      	cmp	r6, r3
 8014872:	ec45 4b11 	vmov	d1, r4, r5
 8014876:	dce1      	bgt.n	801483c <scalbn+0x6c>
 8014878:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80148a0 <scalbn+0xd0>
 801487c:	f000 f81e 	bl	80148bc <copysign>
 8014880:	a307      	add	r3, pc, #28	; (adr r3, 80148a0 <scalbn+0xd0>)
 8014882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014886:	e7e0      	b.n	801484a <scalbn+0x7a>
 8014888:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801488c:	3236      	adds	r2, #54	; 0x36
 801488e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014892:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014896:	4620      	mov	r0, r4
 8014898:	4629      	mov	r1, r5
 801489a:	2200      	movs	r2, #0
 801489c:	4b06      	ldr	r3, [pc, #24]	; (80148b8 <scalbn+0xe8>)
 801489e:	e7b2      	b.n	8014806 <scalbn+0x36>
 80148a0:	c2f8f359 	.word	0xc2f8f359
 80148a4:	01a56e1f 	.word	0x01a56e1f
 80148a8:	8800759c 	.word	0x8800759c
 80148ac:	7e37e43c 	.word	0x7e37e43c
 80148b0:	43500000 	.word	0x43500000
 80148b4:	ffff3cb0 	.word	0xffff3cb0
 80148b8:	3c900000 	.word	0x3c900000

080148bc <copysign>:
 80148bc:	ec51 0b10 	vmov	r0, r1, d0
 80148c0:	ee11 0a90 	vmov	r0, s3
 80148c4:	ee10 2a10 	vmov	r2, s0
 80148c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80148cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80148d0:	ea41 0300 	orr.w	r3, r1, r0
 80148d4:	ec43 2b10 	vmov	d0, r2, r3
 80148d8:	4770      	bx	lr
	...

080148dc <__errno>:
 80148dc:	4b01      	ldr	r3, [pc, #4]	; (80148e4 <__errno+0x8>)
 80148de:	6818      	ldr	r0, [r3, #0]
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop
 80148e4:	2000000c 	.word	0x2000000c

080148e8 <__libc_init_array>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	4e0d      	ldr	r6, [pc, #52]	; (8014920 <__libc_init_array+0x38>)
 80148ec:	4c0d      	ldr	r4, [pc, #52]	; (8014924 <__libc_init_array+0x3c>)
 80148ee:	1ba4      	subs	r4, r4, r6
 80148f0:	10a4      	asrs	r4, r4, #2
 80148f2:	2500      	movs	r5, #0
 80148f4:	42a5      	cmp	r5, r4
 80148f6:	d109      	bne.n	801490c <__libc_init_array+0x24>
 80148f8:	4e0b      	ldr	r6, [pc, #44]	; (8014928 <__libc_init_array+0x40>)
 80148fa:	4c0c      	ldr	r4, [pc, #48]	; (801492c <__libc_init_array+0x44>)
 80148fc:	f004 f9e8 	bl	8018cd0 <_init>
 8014900:	1ba4      	subs	r4, r4, r6
 8014902:	10a4      	asrs	r4, r4, #2
 8014904:	2500      	movs	r5, #0
 8014906:	42a5      	cmp	r5, r4
 8014908:	d105      	bne.n	8014916 <__libc_init_array+0x2e>
 801490a:	bd70      	pop	{r4, r5, r6, pc}
 801490c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014910:	4798      	blx	r3
 8014912:	3501      	adds	r5, #1
 8014914:	e7ee      	b.n	80148f4 <__libc_init_array+0xc>
 8014916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801491a:	4798      	blx	r3
 801491c:	3501      	adds	r5, #1
 801491e:	e7f2      	b.n	8014906 <__libc_init_array+0x1e>
 8014920:	0801986c 	.word	0x0801986c
 8014924:	0801986c 	.word	0x0801986c
 8014928:	0801986c 	.word	0x0801986c
 801492c:	08019874 	.word	0x08019874

08014930 <memcpy>:
 8014930:	b510      	push	{r4, lr}
 8014932:	1e43      	subs	r3, r0, #1
 8014934:	440a      	add	r2, r1
 8014936:	4291      	cmp	r1, r2
 8014938:	d100      	bne.n	801493c <memcpy+0xc>
 801493a:	bd10      	pop	{r4, pc}
 801493c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014944:	e7f7      	b.n	8014936 <memcpy+0x6>

08014946 <memset>:
 8014946:	4402      	add	r2, r0
 8014948:	4603      	mov	r3, r0
 801494a:	4293      	cmp	r3, r2
 801494c:	d100      	bne.n	8014950 <memset+0xa>
 801494e:	4770      	bx	lr
 8014950:	f803 1b01 	strb.w	r1, [r3], #1
 8014954:	e7f9      	b.n	801494a <memset+0x4>

08014956 <__cvt>:
 8014956:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801495a:	ec55 4b10 	vmov	r4, r5, d0
 801495e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014960:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014964:	2d00      	cmp	r5, #0
 8014966:	460e      	mov	r6, r1
 8014968:	4691      	mov	r9, r2
 801496a:	4619      	mov	r1, r3
 801496c:	bfb8      	it	lt
 801496e:	4622      	movlt	r2, r4
 8014970:	462b      	mov	r3, r5
 8014972:	f027 0720 	bic.w	r7, r7, #32
 8014976:	bfbb      	ittet	lt
 8014978:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801497c:	461d      	movlt	r5, r3
 801497e:	2300      	movge	r3, #0
 8014980:	232d      	movlt	r3, #45	; 0x2d
 8014982:	bfb8      	it	lt
 8014984:	4614      	movlt	r4, r2
 8014986:	2f46      	cmp	r7, #70	; 0x46
 8014988:	700b      	strb	r3, [r1, #0]
 801498a:	d004      	beq.n	8014996 <__cvt+0x40>
 801498c:	2f45      	cmp	r7, #69	; 0x45
 801498e:	d100      	bne.n	8014992 <__cvt+0x3c>
 8014990:	3601      	adds	r6, #1
 8014992:	2102      	movs	r1, #2
 8014994:	e000      	b.n	8014998 <__cvt+0x42>
 8014996:	2103      	movs	r1, #3
 8014998:	ab03      	add	r3, sp, #12
 801499a:	9301      	str	r3, [sp, #4]
 801499c:	ab02      	add	r3, sp, #8
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	4632      	mov	r2, r6
 80149a2:	4653      	mov	r3, sl
 80149a4:	ec45 4b10 	vmov	d0, r4, r5
 80149a8:	f001 fdfe 	bl	80165a8 <_dtoa_r>
 80149ac:	2f47      	cmp	r7, #71	; 0x47
 80149ae:	4680      	mov	r8, r0
 80149b0:	d102      	bne.n	80149b8 <__cvt+0x62>
 80149b2:	f019 0f01 	tst.w	r9, #1
 80149b6:	d026      	beq.n	8014a06 <__cvt+0xb0>
 80149b8:	2f46      	cmp	r7, #70	; 0x46
 80149ba:	eb08 0906 	add.w	r9, r8, r6
 80149be:	d111      	bne.n	80149e4 <__cvt+0x8e>
 80149c0:	f898 3000 	ldrb.w	r3, [r8]
 80149c4:	2b30      	cmp	r3, #48	; 0x30
 80149c6:	d10a      	bne.n	80149de <__cvt+0x88>
 80149c8:	2200      	movs	r2, #0
 80149ca:	2300      	movs	r3, #0
 80149cc:	4620      	mov	r0, r4
 80149ce:	4629      	mov	r1, r5
 80149d0:	f7ec f892 	bl	8000af8 <__aeabi_dcmpeq>
 80149d4:	b918      	cbnz	r0, 80149de <__cvt+0x88>
 80149d6:	f1c6 0601 	rsb	r6, r6, #1
 80149da:	f8ca 6000 	str.w	r6, [sl]
 80149de:	f8da 3000 	ldr.w	r3, [sl]
 80149e2:	4499      	add	r9, r3
 80149e4:	2200      	movs	r2, #0
 80149e6:	2300      	movs	r3, #0
 80149e8:	4620      	mov	r0, r4
 80149ea:	4629      	mov	r1, r5
 80149ec:	f7ec f884 	bl	8000af8 <__aeabi_dcmpeq>
 80149f0:	b938      	cbnz	r0, 8014a02 <__cvt+0xac>
 80149f2:	2230      	movs	r2, #48	; 0x30
 80149f4:	9b03      	ldr	r3, [sp, #12]
 80149f6:	454b      	cmp	r3, r9
 80149f8:	d205      	bcs.n	8014a06 <__cvt+0xb0>
 80149fa:	1c59      	adds	r1, r3, #1
 80149fc:	9103      	str	r1, [sp, #12]
 80149fe:	701a      	strb	r2, [r3, #0]
 8014a00:	e7f8      	b.n	80149f4 <__cvt+0x9e>
 8014a02:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a06:	9b03      	ldr	r3, [sp, #12]
 8014a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a0a:	eba3 0308 	sub.w	r3, r3, r8
 8014a0e:	4640      	mov	r0, r8
 8014a10:	6013      	str	r3, [r2, #0]
 8014a12:	b004      	add	sp, #16
 8014a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014a18 <__exponent>:
 8014a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a1a:	2900      	cmp	r1, #0
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	bfba      	itte	lt
 8014a20:	4249      	neglt	r1, r1
 8014a22:	232d      	movlt	r3, #45	; 0x2d
 8014a24:	232b      	movge	r3, #43	; 0x2b
 8014a26:	2909      	cmp	r1, #9
 8014a28:	f804 2b02 	strb.w	r2, [r4], #2
 8014a2c:	7043      	strb	r3, [r0, #1]
 8014a2e:	dd20      	ble.n	8014a72 <__exponent+0x5a>
 8014a30:	f10d 0307 	add.w	r3, sp, #7
 8014a34:	461f      	mov	r7, r3
 8014a36:	260a      	movs	r6, #10
 8014a38:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a3c:	fb06 1115 	mls	r1, r6, r5, r1
 8014a40:	3130      	adds	r1, #48	; 0x30
 8014a42:	2d09      	cmp	r5, #9
 8014a44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014a48:	f103 32ff 	add.w	r2, r3, #4294967295
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	dc09      	bgt.n	8014a64 <__exponent+0x4c>
 8014a50:	3130      	adds	r1, #48	; 0x30
 8014a52:	3b02      	subs	r3, #2
 8014a54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a58:	42bb      	cmp	r3, r7
 8014a5a:	4622      	mov	r2, r4
 8014a5c:	d304      	bcc.n	8014a68 <__exponent+0x50>
 8014a5e:	1a10      	subs	r0, r2, r0
 8014a60:	b003      	add	sp, #12
 8014a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a64:	4613      	mov	r3, r2
 8014a66:	e7e7      	b.n	8014a38 <__exponent+0x20>
 8014a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a6c:	f804 2b01 	strb.w	r2, [r4], #1
 8014a70:	e7f2      	b.n	8014a58 <__exponent+0x40>
 8014a72:	2330      	movs	r3, #48	; 0x30
 8014a74:	4419      	add	r1, r3
 8014a76:	7083      	strb	r3, [r0, #2]
 8014a78:	1d02      	adds	r2, r0, #4
 8014a7a:	70c1      	strb	r1, [r0, #3]
 8014a7c:	e7ef      	b.n	8014a5e <__exponent+0x46>
	...

08014a80 <_printf_float>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	b08d      	sub	sp, #52	; 0x34
 8014a86:	460c      	mov	r4, r1
 8014a88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014a8c:	4616      	mov	r6, r2
 8014a8e:	461f      	mov	r7, r3
 8014a90:	4605      	mov	r5, r0
 8014a92:	f002 fe7b 	bl	801778c <_localeconv_r>
 8014a96:	6803      	ldr	r3, [r0, #0]
 8014a98:	9304      	str	r3, [sp, #16]
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7eb fbb0 	bl	8000200 <strlen>
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8014aa8:	9005      	str	r0, [sp, #20]
 8014aaa:	3307      	adds	r3, #7
 8014aac:	f023 0307 	bic.w	r3, r3, #7
 8014ab0:	f103 0208 	add.w	r2, r3, #8
 8014ab4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014ab8:	f8d4 b000 	ldr.w	fp, [r4]
 8014abc:	f8c8 2000 	str.w	r2, [r8]
 8014ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014ac8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014acc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ad0:	9307      	str	r3, [sp, #28]
 8014ad2:	f8cd 8018 	str.w	r8, [sp, #24]
 8014ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8014ada:	4ba7      	ldr	r3, [pc, #668]	; (8014d78 <_printf_float+0x2f8>)
 8014adc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ae0:	f7ec f83c 	bl	8000b5c <__aeabi_dcmpun>
 8014ae4:	bb70      	cbnz	r0, 8014b44 <_printf_float+0xc4>
 8014ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8014aea:	4ba3      	ldr	r3, [pc, #652]	; (8014d78 <_printf_float+0x2f8>)
 8014aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014af0:	f7ec f816 	bl	8000b20 <__aeabi_dcmple>
 8014af4:	bb30      	cbnz	r0, 8014b44 <_printf_float+0xc4>
 8014af6:	2200      	movs	r2, #0
 8014af8:	2300      	movs	r3, #0
 8014afa:	4640      	mov	r0, r8
 8014afc:	4649      	mov	r1, r9
 8014afe:	f7ec f805 	bl	8000b0c <__aeabi_dcmplt>
 8014b02:	b110      	cbz	r0, 8014b0a <_printf_float+0x8a>
 8014b04:	232d      	movs	r3, #45	; 0x2d
 8014b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b0a:	4a9c      	ldr	r2, [pc, #624]	; (8014d7c <_printf_float+0x2fc>)
 8014b0c:	4b9c      	ldr	r3, [pc, #624]	; (8014d80 <_printf_float+0x300>)
 8014b0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b12:	bf8c      	ite	hi
 8014b14:	4690      	movhi	r8, r2
 8014b16:	4698      	movls	r8, r3
 8014b18:	2303      	movs	r3, #3
 8014b1a:	f02b 0204 	bic.w	r2, fp, #4
 8014b1e:	6123      	str	r3, [r4, #16]
 8014b20:	6022      	str	r2, [r4, #0]
 8014b22:	f04f 0900 	mov.w	r9, #0
 8014b26:	9700      	str	r7, [sp, #0]
 8014b28:	4633      	mov	r3, r6
 8014b2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4628      	mov	r0, r5
 8014b30:	f000 f9e6 	bl	8014f00 <_printf_common>
 8014b34:	3001      	adds	r0, #1
 8014b36:	f040 808d 	bne.w	8014c54 <_printf_float+0x1d4>
 8014b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b3e:	b00d      	add	sp, #52	; 0x34
 8014b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b44:	4642      	mov	r2, r8
 8014b46:	464b      	mov	r3, r9
 8014b48:	4640      	mov	r0, r8
 8014b4a:	4649      	mov	r1, r9
 8014b4c:	f7ec f806 	bl	8000b5c <__aeabi_dcmpun>
 8014b50:	b110      	cbz	r0, 8014b58 <_printf_float+0xd8>
 8014b52:	4a8c      	ldr	r2, [pc, #560]	; (8014d84 <_printf_float+0x304>)
 8014b54:	4b8c      	ldr	r3, [pc, #560]	; (8014d88 <_printf_float+0x308>)
 8014b56:	e7da      	b.n	8014b0e <_printf_float+0x8e>
 8014b58:	6861      	ldr	r1, [r4, #4]
 8014b5a:	1c4b      	adds	r3, r1, #1
 8014b5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014b60:	a80a      	add	r0, sp, #40	; 0x28
 8014b62:	d13e      	bne.n	8014be2 <_printf_float+0x162>
 8014b64:	2306      	movs	r3, #6
 8014b66:	6063      	str	r3, [r4, #4]
 8014b68:	2300      	movs	r3, #0
 8014b6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014b6e:	ab09      	add	r3, sp, #36	; 0x24
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	ec49 8b10 	vmov	d0, r8, r9
 8014b76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b7a:	6022      	str	r2, [r4, #0]
 8014b7c:	f8cd a004 	str.w	sl, [sp, #4]
 8014b80:	6861      	ldr	r1, [r4, #4]
 8014b82:	4628      	mov	r0, r5
 8014b84:	f7ff fee7 	bl	8014956 <__cvt>
 8014b88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014b8c:	2b47      	cmp	r3, #71	; 0x47
 8014b8e:	4680      	mov	r8, r0
 8014b90:	d109      	bne.n	8014ba6 <_printf_float+0x126>
 8014b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b94:	1cd8      	adds	r0, r3, #3
 8014b96:	db02      	blt.n	8014b9e <_printf_float+0x11e>
 8014b98:	6862      	ldr	r2, [r4, #4]
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	dd47      	ble.n	8014c2e <_printf_float+0x1ae>
 8014b9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ba2:	fa5f fa8a 	uxtb.w	sl, sl
 8014ba6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bac:	d824      	bhi.n	8014bf8 <_printf_float+0x178>
 8014bae:	3901      	subs	r1, #1
 8014bb0:	4652      	mov	r2, sl
 8014bb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bb6:	9109      	str	r1, [sp, #36]	; 0x24
 8014bb8:	f7ff ff2e 	bl	8014a18 <__exponent>
 8014bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bbe:	1813      	adds	r3, r2, r0
 8014bc0:	2a01      	cmp	r2, #1
 8014bc2:	4681      	mov	r9, r0
 8014bc4:	6123      	str	r3, [r4, #16]
 8014bc6:	dc02      	bgt.n	8014bce <_printf_float+0x14e>
 8014bc8:	6822      	ldr	r2, [r4, #0]
 8014bca:	07d1      	lsls	r1, r2, #31
 8014bcc:	d501      	bpl.n	8014bd2 <_printf_float+0x152>
 8014bce:	3301      	adds	r3, #1
 8014bd0:	6123      	str	r3, [r4, #16]
 8014bd2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d0a5      	beq.n	8014b26 <_printf_float+0xa6>
 8014bda:	232d      	movs	r3, #45	; 0x2d
 8014bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014be0:	e7a1      	b.n	8014b26 <_printf_float+0xa6>
 8014be2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014be6:	f000 8177 	beq.w	8014ed8 <_printf_float+0x458>
 8014bea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014bee:	d1bb      	bne.n	8014b68 <_printf_float+0xe8>
 8014bf0:	2900      	cmp	r1, #0
 8014bf2:	d1b9      	bne.n	8014b68 <_printf_float+0xe8>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e7b6      	b.n	8014b66 <_printf_float+0xe6>
 8014bf8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014bfc:	d119      	bne.n	8014c32 <_printf_float+0x1b2>
 8014bfe:	2900      	cmp	r1, #0
 8014c00:	6863      	ldr	r3, [r4, #4]
 8014c02:	dd0c      	ble.n	8014c1e <_printf_float+0x19e>
 8014c04:	6121      	str	r1, [r4, #16]
 8014c06:	b913      	cbnz	r3, 8014c0e <_printf_float+0x18e>
 8014c08:	6822      	ldr	r2, [r4, #0]
 8014c0a:	07d2      	lsls	r2, r2, #31
 8014c0c:	d502      	bpl.n	8014c14 <_printf_float+0x194>
 8014c0e:	3301      	adds	r3, #1
 8014c10:	440b      	add	r3, r1
 8014c12:	6123      	str	r3, [r4, #16]
 8014c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c16:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c18:	f04f 0900 	mov.w	r9, #0
 8014c1c:	e7d9      	b.n	8014bd2 <_printf_float+0x152>
 8014c1e:	b913      	cbnz	r3, 8014c26 <_printf_float+0x1a6>
 8014c20:	6822      	ldr	r2, [r4, #0]
 8014c22:	07d0      	lsls	r0, r2, #31
 8014c24:	d501      	bpl.n	8014c2a <_printf_float+0x1aa>
 8014c26:	3302      	adds	r3, #2
 8014c28:	e7f3      	b.n	8014c12 <_printf_float+0x192>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e7f1      	b.n	8014c12 <_printf_float+0x192>
 8014c2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014c32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014c36:	4293      	cmp	r3, r2
 8014c38:	db05      	blt.n	8014c46 <_printf_float+0x1c6>
 8014c3a:	6822      	ldr	r2, [r4, #0]
 8014c3c:	6123      	str	r3, [r4, #16]
 8014c3e:	07d1      	lsls	r1, r2, #31
 8014c40:	d5e8      	bpl.n	8014c14 <_printf_float+0x194>
 8014c42:	3301      	adds	r3, #1
 8014c44:	e7e5      	b.n	8014c12 <_printf_float+0x192>
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	bfd4      	ite	le
 8014c4a:	f1c3 0302 	rsble	r3, r3, #2
 8014c4e:	2301      	movgt	r3, #1
 8014c50:	4413      	add	r3, r2
 8014c52:	e7de      	b.n	8014c12 <_printf_float+0x192>
 8014c54:	6823      	ldr	r3, [r4, #0]
 8014c56:	055a      	lsls	r2, r3, #21
 8014c58:	d407      	bmi.n	8014c6a <_printf_float+0x1ea>
 8014c5a:	6923      	ldr	r3, [r4, #16]
 8014c5c:	4642      	mov	r2, r8
 8014c5e:	4631      	mov	r1, r6
 8014c60:	4628      	mov	r0, r5
 8014c62:	47b8      	blx	r7
 8014c64:	3001      	adds	r0, #1
 8014c66:	d12b      	bne.n	8014cc0 <_printf_float+0x240>
 8014c68:	e767      	b.n	8014b3a <_printf_float+0xba>
 8014c6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c6e:	f240 80dc 	bls.w	8014e2a <_printf_float+0x3aa>
 8014c72:	2200      	movs	r2, #0
 8014c74:	2300      	movs	r3, #0
 8014c76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c7a:	f7eb ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d033      	beq.n	8014cea <_printf_float+0x26a>
 8014c82:	2301      	movs	r3, #1
 8014c84:	4a41      	ldr	r2, [pc, #260]	; (8014d8c <_printf_float+0x30c>)
 8014c86:	4631      	mov	r1, r6
 8014c88:	4628      	mov	r0, r5
 8014c8a:	47b8      	blx	r7
 8014c8c:	3001      	adds	r0, #1
 8014c8e:	f43f af54 	beq.w	8014b3a <_printf_float+0xba>
 8014c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c96:	429a      	cmp	r2, r3
 8014c98:	db02      	blt.n	8014ca0 <_printf_float+0x220>
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	07d8      	lsls	r0, r3, #31
 8014c9e:	d50f      	bpl.n	8014cc0 <_printf_float+0x240>
 8014ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	47b8      	blx	r7
 8014caa:	3001      	adds	r0, #1
 8014cac:	f43f af45 	beq.w	8014b3a <_printf_float+0xba>
 8014cb0:	f04f 0800 	mov.w	r8, #0
 8014cb4:	f104 091a 	add.w	r9, r4, #26
 8014cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	4543      	cmp	r3, r8
 8014cbe:	dc09      	bgt.n	8014cd4 <_printf_float+0x254>
 8014cc0:	6823      	ldr	r3, [r4, #0]
 8014cc2:	079b      	lsls	r3, r3, #30
 8014cc4:	f100 8103 	bmi.w	8014ece <_printf_float+0x44e>
 8014cc8:	68e0      	ldr	r0, [r4, #12]
 8014cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ccc:	4298      	cmp	r0, r3
 8014cce:	bfb8      	it	lt
 8014cd0:	4618      	movlt	r0, r3
 8014cd2:	e734      	b.n	8014b3e <_printf_float+0xbe>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	464a      	mov	r2, r9
 8014cd8:	4631      	mov	r1, r6
 8014cda:	4628      	mov	r0, r5
 8014cdc:	47b8      	blx	r7
 8014cde:	3001      	adds	r0, #1
 8014ce0:	f43f af2b 	beq.w	8014b3a <_printf_float+0xba>
 8014ce4:	f108 0801 	add.w	r8, r8, #1
 8014ce8:	e7e6      	b.n	8014cb8 <_printf_float+0x238>
 8014cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	dc2b      	bgt.n	8014d48 <_printf_float+0x2c8>
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	4a26      	ldr	r2, [pc, #152]	; (8014d8c <_printf_float+0x30c>)
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	47b8      	blx	r7
 8014cfa:	3001      	adds	r0, #1
 8014cfc:	f43f af1d 	beq.w	8014b3a <_printf_float+0xba>
 8014d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d02:	b923      	cbnz	r3, 8014d0e <_printf_float+0x28e>
 8014d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d06:	b913      	cbnz	r3, 8014d0e <_printf_float+0x28e>
 8014d08:	6823      	ldr	r3, [r4, #0]
 8014d0a:	07d9      	lsls	r1, r3, #31
 8014d0c:	d5d8      	bpl.n	8014cc0 <_printf_float+0x240>
 8014d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d12:	4631      	mov	r1, r6
 8014d14:	4628      	mov	r0, r5
 8014d16:	47b8      	blx	r7
 8014d18:	3001      	adds	r0, #1
 8014d1a:	f43f af0e 	beq.w	8014b3a <_printf_float+0xba>
 8014d1e:	f04f 0900 	mov.w	r9, #0
 8014d22:	f104 0a1a 	add.w	sl, r4, #26
 8014d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d28:	425b      	negs	r3, r3
 8014d2a:	454b      	cmp	r3, r9
 8014d2c:	dc01      	bgt.n	8014d32 <_printf_float+0x2b2>
 8014d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d30:	e794      	b.n	8014c5c <_printf_float+0x1dc>
 8014d32:	2301      	movs	r3, #1
 8014d34:	4652      	mov	r2, sl
 8014d36:	4631      	mov	r1, r6
 8014d38:	4628      	mov	r0, r5
 8014d3a:	47b8      	blx	r7
 8014d3c:	3001      	adds	r0, #1
 8014d3e:	f43f aefc 	beq.w	8014b3a <_printf_float+0xba>
 8014d42:	f109 0901 	add.w	r9, r9, #1
 8014d46:	e7ee      	b.n	8014d26 <_printf_float+0x2a6>
 8014d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	bfa8      	it	ge
 8014d50:	461a      	movge	r2, r3
 8014d52:	2a00      	cmp	r2, #0
 8014d54:	4691      	mov	r9, r2
 8014d56:	dd07      	ble.n	8014d68 <_printf_float+0x2e8>
 8014d58:	4613      	mov	r3, r2
 8014d5a:	4631      	mov	r1, r6
 8014d5c:	4642      	mov	r2, r8
 8014d5e:	4628      	mov	r0, r5
 8014d60:	47b8      	blx	r7
 8014d62:	3001      	adds	r0, #1
 8014d64:	f43f aee9 	beq.w	8014b3a <_printf_float+0xba>
 8014d68:	f104 031a 	add.w	r3, r4, #26
 8014d6c:	f04f 0b00 	mov.w	fp, #0
 8014d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d74:	9306      	str	r3, [sp, #24]
 8014d76:	e015      	b.n	8014da4 <_printf_float+0x324>
 8014d78:	7fefffff 	.word	0x7fefffff
 8014d7c:	08019534 	.word	0x08019534
 8014d80:	08019530 	.word	0x08019530
 8014d84:	0801953c 	.word	0x0801953c
 8014d88:	08019538 	.word	0x08019538
 8014d8c:	0801975b 	.word	0x0801975b
 8014d90:	2301      	movs	r3, #1
 8014d92:	9a06      	ldr	r2, [sp, #24]
 8014d94:	4631      	mov	r1, r6
 8014d96:	4628      	mov	r0, r5
 8014d98:	47b8      	blx	r7
 8014d9a:	3001      	adds	r0, #1
 8014d9c:	f43f aecd 	beq.w	8014b3a <_printf_float+0xba>
 8014da0:	f10b 0b01 	add.w	fp, fp, #1
 8014da4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014da8:	ebaa 0309 	sub.w	r3, sl, r9
 8014dac:	455b      	cmp	r3, fp
 8014dae:	dcef      	bgt.n	8014d90 <_printf_float+0x310>
 8014db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014db4:	429a      	cmp	r2, r3
 8014db6:	44d0      	add	r8, sl
 8014db8:	db15      	blt.n	8014de6 <_printf_float+0x366>
 8014dba:	6823      	ldr	r3, [r4, #0]
 8014dbc:	07da      	lsls	r2, r3, #31
 8014dbe:	d412      	bmi.n	8014de6 <_printf_float+0x366>
 8014dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dc4:	eba3 020a 	sub.w	r2, r3, sl
 8014dc8:	eba3 0a01 	sub.w	sl, r3, r1
 8014dcc:	4592      	cmp	sl, r2
 8014dce:	bfa8      	it	ge
 8014dd0:	4692      	movge	sl, r2
 8014dd2:	f1ba 0f00 	cmp.w	sl, #0
 8014dd6:	dc0e      	bgt.n	8014df6 <_printf_float+0x376>
 8014dd8:	f04f 0800 	mov.w	r8, #0
 8014ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014de0:	f104 091a 	add.w	r9, r4, #26
 8014de4:	e019      	b.n	8014e1a <_printf_float+0x39a>
 8014de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dea:	4631      	mov	r1, r6
 8014dec:	4628      	mov	r0, r5
 8014dee:	47b8      	blx	r7
 8014df0:	3001      	adds	r0, #1
 8014df2:	d1e5      	bne.n	8014dc0 <_printf_float+0x340>
 8014df4:	e6a1      	b.n	8014b3a <_printf_float+0xba>
 8014df6:	4653      	mov	r3, sl
 8014df8:	4642      	mov	r2, r8
 8014dfa:	4631      	mov	r1, r6
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	47b8      	blx	r7
 8014e00:	3001      	adds	r0, #1
 8014e02:	d1e9      	bne.n	8014dd8 <_printf_float+0x358>
 8014e04:	e699      	b.n	8014b3a <_printf_float+0xba>
 8014e06:	2301      	movs	r3, #1
 8014e08:	464a      	mov	r2, r9
 8014e0a:	4631      	mov	r1, r6
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	47b8      	blx	r7
 8014e10:	3001      	adds	r0, #1
 8014e12:	f43f ae92 	beq.w	8014b3a <_printf_float+0xba>
 8014e16:	f108 0801 	add.w	r8, r8, #1
 8014e1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e1e:	1a9b      	subs	r3, r3, r2
 8014e20:	eba3 030a 	sub.w	r3, r3, sl
 8014e24:	4543      	cmp	r3, r8
 8014e26:	dcee      	bgt.n	8014e06 <_printf_float+0x386>
 8014e28:	e74a      	b.n	8014cc0 <_printf_float+0x240>
 8014e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e2c:	2a01      	cmp	r2, #1
 8014e2e:	dc01      	bgt.n	8014e34 <_printf_float+0x3b4>
 8014e30:	07db      	lsls	r3, r3, #31
 8014e32:	d53a      	bpl.n	8014eaa <_printf_float+0x42a>
 8014e34:	2301      	movs	r3, #1
 8014e36:	4642      	mov	r2, r8
 8014e38:	4631      	mov	r1, r6
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	47b8      	blx	r7
 8014e3e:	3001      	adds	r0, #1
 8014e40:	f43f ae7b 	beq.w	8014b3a <_printf_float+0xba>
 8014e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e48:	4631      	mov	r1, r6
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	47b8      	blx	r7
 8014e4e:	3001      	adds	r0, #1
 8014e50:	f108 0801 	add.w	r8, r8, #1
 8014e54:	f43f ae71 	beq.w	8014b3a <_printf_float+0xba>
 8014e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014e60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e64:	2300      	movs	r3, #0
 8014e66:	f7eb fe47 	bl	8000af8 <__aeabi_dcmpeq>
 8014e6a:	b9c8      	cbnz	r0, 8014ea0 <_printf_float+0x420>
 8014e6c:	4653      	mov	r3, sl
 8014e6e:	4642      	mov	r2, r8
 8014e70:	4631      	mov	r1, r6
 8014e72:	4628      	mov	r0, r5
 8014e74:	47b8      	blx	r7
 8014e76:	3001      	adds	r0, #1
 8014e78:	d10e      	bne.n	8014e98 <_printf_float+0x418>
 8014e7a:	e65e      	b.n	8014b3a <_printf_float+0xba>
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	4652      	mov	r2, sl
 8014e80:	4631      	mov	r1, r6
 8014e82:	4628      	mov	r0, r5
 8014e84:	47b8      	blx	r7
 8014e86:	3001      	adds	r0, #1
 8014e88:	f43f ae57 	beq.w	8014b3a <_printf_float+0xba>
 8014e8c:	f108 0801 	add.w	r8, r8, #1
 8014e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e92:	3b01      	subs	r3, #1
 8014e94:	4543      	cmp	r3, r8
 8014e96:	dcf1      	bgt.n	8014e7c <_printf_float+0x3fc>
 8014e98:	464b      	mov	r3, r9
 8014e9a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e9e:	e6de      	b.n	8014c5e <_printf_float+0x1de>
 8014ea0:	f04f 0800 	mov.w	r8, #0
 8014ea4:	f104 0a1a 	add.w	sl, r4, #26
 8014ea8:	e7f2      	b.n	8014e90 <_printf_float+0x410>
 8014eaa:	2301      	movs	r3, #1
 8014eac:	e7df      	b.n	8014e6e <_printf_float+0x3ee>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	464a      	mov	r2, r9
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b8      	blx	r7
 8014eb8:	3001      	adds	r0, #1
 8014eba:	f43f ae3e 	beq.w	8014b3a <_printf_float+0xba>
 8014ebe:	f108 0801 	add.w	r8, r8, #1
 8014ec2:	68e3      	ldr	r3, [r4, #12]
 8014ec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ec6:	1a9b      	subs	r3, r3, r2
 8014ec8:	4543      	cmp	r3, r8
 8014eca:	dcf0      	bgt.n	8014eae <_printf_float+0x42e>
 8014ecc:	e6fc      	b.n	8014cc8 <_printf_float+0x248>
 8014ece:	f04f 0800 	mov.w	r8, #0
 8014ed2:	f104 0919 	add.w	r9, r4, #25
 8014ed6:	e7f4      	b.n	8014ec2 <_printf_float+0x442>
 8014ed8:	2900      	cmp	r1, #0
 8014eda:	f43f ae8b 	beq.w	8014bf4 <_printf_float+0x174>
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014ee4:	ab09      	add	r3, sp, #36	; 0x24
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	ec49 8b10 	vmov	d0, r8, r9
 8014eec:	6022      	str	r2, [r4, #0]
 8014eee:	f8cd a004 	str.w	sl, [sp, #4]
 8014ef2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	f7ff fd2d 	bl	8014956 <__cvt>
 8014efc:	4680      	mov	r8, r0
 8014efe:	e648      	b.n	8014b92 <_printf_float+0x112>

08014f00 <_printf_common>:
 8014f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f04:	4691      	mov	r9, r2
 8014f06:	461f      	mov	r7, r3
 8014f08:	688a      	ldr	r2, [r1, #8]
 8014f0a:	690b      	ldr	r3, [r1, #16]
 8014f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f10:	4293      	cmp	r3, r2
 8014f12:	bfb8      	it	lt
 8014f14:	4613      	movlt	r3, r2
 8014f16:	f8c9 3000 	str.w	r3, [r9]
 8014f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f1e:	4606      	mov	r6, r0
 8014f20:	460c      	mov	r4, r1
 8014f22:	b112      	cbz	r2, 8014f2a <_printf_common+0x2a>
 8014f24:	3301      	adds	r3, #1
 8014f26:	f8c9 3000 	str.w	r3, [r9]
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	0699      	lsls	r1, r3, #26
 8014f2e:	bf42      	ittt	mi
 8014f30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014f34:	3302      	addmi	r3, #2
 8014f36:	f8c9 3000 	strmi.w	r3, [r9]
 8014f3a:	6825      	ldr	r5, [r4, #0]
 8014f3c:	f015 0506 	ands.w	r5, r5, #6
 8014f40:	d107      	bne.n	8014f52 <_printf_common+0x52>
 8014f42:	f104 0a19 	add.w	sl, r4, #25
 8014f46:	68e3      	ldr	r3, [r4, #12]
 8014f48:	f8d9 2000 	ldr.w	r2, [r9]
 8014f4c:	1a9b      	subs	r3, r3, r2
 8014f4e:	42ab      	cmp	r3, r5
 8014f50:	dc28      	bgt.n	8014fa4 <_printf_common+0xa4>
 8014f52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014f56:	6822      	ldr	r2, [r4, #0]
 8014f58:	3300      	adds	r3, #0
 8014f5a:	bf18      	it	ne
 8014f5c:	2301      	movne	r3, #1
 8014f5e:	0692      	lsls	r2, r2, #26
 8014f60:	d42d      	bmi.n	8014fbe <_printf_common+0xbe>
 8014f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f66:	4639      	mov	r1, r7
 8014f68:	4630      	mov	r0, r6
 8014f6a:	47c0      	blx	r8
 8014f6c:	3001      	adds	r0, #1
 8014f6e:	d020      	beq.n	8014fb2 <_printf_common+0xb2>
 8014f70:	6823      	ldr	r3, [r4, #0]
 8014f72:	68e5      	ldr	r5, [r4, #12]
 8014f74:	f8d9 2000 	ldr.w	r2, [r9]
 8014f78:	f003 0306 	and.w	r3, r3, #6
 8014f7c:	2b04      	cmp	r3, #4
 8014f7e:	bf08      	it	eq
 8014f80:	1aad      	subeq	r5, r5, r2
 8014f82:	68a3      	ldr	r3, [r4, #8]
 8014f84:	6922      	ldr	r2, [r4, #16]
 8014f86:	bf0c      	ite	eq
 8014f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f8c:	2500      	movne	r5, #0
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	bfc4      	itt	gt
 8014f92:	1a9b      	subgt	r3, r3, r2
 8014f94:	18ed      	addgt	r5, r5, r3
 8014f96:	f04f 0900 	mov.w	r9, #0
 8014f9a:	341a      	adds	r4, #26
 8014f9c:	454d      	cmp	r5, r9
 8014f9e:	d11a      	bne.n	8014fd6 <_printf_common+0xd6>
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	e008      	b.n	8014fb6 <_printf_common+0xb6>
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	4652      	mov	r2, sl
 8014fa8:	4639      	mov	r1, r7
 8014faa:	4630      	mov	r0, r6
 8014fac:	47c0      	blx	r8
 8014fae:	3001      	adds	r0, #1
 8014fb0:	d103      	bne.n	8014fba <_printf_common+0xba>
 8014fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fba:	3501      	adds	r5, #1
 8014fbc:	e7c3      	b.n	8014f46 <_printf_common+0x46>
 8014fbe:	18e1      	adds	r1, r4, r3
 8014fc0:	1c5a      	adds	r2, r3, #1
 8014fc2:	2030      	movs	r0, #48	; 0x30
 8014fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fc8:	4422      	add	r2, r4
 8014fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fd2:	3302      	adds	r3, #2
 8014fd4:	e7c5      	b.n	8014f62 <_printf_common+0x62>
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	4622      	mov	r2, r4
 8014fda:	4639      	mov	r1, r7
 8014fdc:	4630      	mov	r0, r6
 8014fde:	47c0      	blx	r8
 8014fe0:	3001      	adds	r0, #1
 8014fe2:	d0e6      	beq.n	8014fb2 <_printf_common+0xb2>
 8014fe4:	f109 0901 	add.w	r9, r9, #1
 8014fe8:	e7d8      	b.n	8014f9c <_printf_common+0x9c>
	...

08014fec <_printf_i>:
 8014fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	7e09      	ldrb	r1, [r1, #24]
 8014ff8:	b085      	sub	sp, #20
 8014ffa:	296e      	cmp	r1, #110	; 0x6e
 8014ffc:	4617      	mov	r7, r2
 8014ffe:	4606      	mov	r6, r0
 8015000:	4698      	mov	r8, r3
 8015002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015004:	f000 80b3 	beq.w	801516e <_printf_i+0x182>
 8015008:	d822      	bhi.n	8015050 <_printf_i+0x64>
 801500a:	2963      	cmp	r1, #99	; 0x63
 801500c:	d036      	beq.n	801507c <_printf_i+0x90>
 801500e:	d80a      	bhi.n	8015026 <_printf_i+0x3a>
 8015010:	2900      	cmp	r1, #0
 8015012:	f000 80b9 	beq.w	8015188 <_printf_i+0x19c>
 8015016:	2958      	cmp	r1, #88	; 0x58
 8015018:	f000 8083 	beq.w	8015122 <_printf_i+0x136>
 801501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015024:	e032      	b.n	801508c <_printf_i+0xa0>
 8015026:	2964      	cmp	r1, #100	; 0x64
 8015028:	d001      	beq.n	801502e <_printf_i+0x42>
 801502a:	2969      	cmp	r1, #105	; 0x69
 801502c:	d1f6      	bne.n	801501c <_printf_i+0x30>
 801502e:	6820      	ldr	r0, [r4, #0]
 8015030:	6813      	ldr	r3, [r2, #0]
 8015032:	0605      	lsls	r5, r0, #24
 8015034:	f103 0104 	add.w	r1, r3, #4
 8015038:	d52a      	bpl.n	8015090 <_printf_i+0xa4>
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	6011      	str	r1, [r2, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	da03      	bge.n	801504a <_printf_i+0x5e>
 8015042:	222d      	movs	r2, #45	; 0x2d
 8015044:	425b      	negs	r3, r3
 8015046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801504a:	486f      	ldr	r0, [pc, #444]	; (8015208 <_printf_i+0x21c>)
 801504c:	220a      	movs	r2, #10
 801504e:	e039      	b.n	80150c4 <_printf_i+0xd8>
 8015050:	2973      	cmp	r1, #115	; 0x73
 8015052:	f000 809d 	beq.w	8015190 <_printf_i+0x1a4>
 8015056:	d808      	bhi.n	801506a <_printf_i+0x7e>
 8015058:	296f      	cmp	r1, #111	; 0x6f
 801505a:	d020      	beq.n	801509e <_printf_i+0xb2>
 801505c:	2970      	cmp	r1, #112	; 0x70
 801505e:	d1dd      	bne.n	801501c <_printf_i+0x30>
 8015060:	6823      	ldr	r3, [r4, #0]
 8015062:	f043 0320 	orr.w	r3, r3, #32
 8015066:	6023      	str	r3, [r4, #0]
 8015068:	e003      	b.n	8015072 <_printf_i+0x86>
 801506a:	2975      	cmp	r1, #117	; 0x75
 801506c:	d017      	beq.n	801509e <_printf_i+0xb2>
 801506e:	2978      	cmp	r1, #120	; 0x78
 8015070:	d1d4      	bne.n	801501c <_printf_i+0x30>
 8015072:	2378      	movs	r3, #120	; 0x78
 8015074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015078:	4864      	ldr	r0, [pc, #400]	; (801520c <_printf_i+0x220>)
 801507a:	e055      	b.n	8015128 <_printf_i+0x13c>
 801507c:	6813      	ldr	r3, [r2, #0]
 801507e:	1d19      	adds	r1, r3, #4
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	6011      	str	r1, [r2, #0]
 8015084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801508c:	2301      	movs	r3, #1
 801508e:	e08c      	b.n	80151aa <_printf_i+0x1be>
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	6011      	str	r1, [r2, #0]
 8015094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015098:	bf18      	it	ne
 801509a:	b21b      	sxthne	r3, r3
 801509c:	e7cf      	b.n	801503e <_printf_i+0x52>
 801509e:	6813      	ldr	r3, [r2, #0]
 80150a0:	6825      	ldr	r5, [r4, #0]
 80150a2:	1d18      	adds	r0, r3, #4
 80150a4:	6010      	str	r0, [r2, #0]
 80150a6:	0628      	lsls	r0, r5, #24
 80150a8:	d501      	bpl.n	80150ae <_printf_i+0xc2>
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	e002      	b.n	80150b4 <_printf_i+0xc8>
 80150ae:	0668      	lsls	r0, r5, #25
 80150b0:	d5fb      	bpl.n	80150aa <_printf_i+0xbe>
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	4854      	ldr	r0, [pc, #336]	; (8015208 <_printf_i+0x21c>)
 80150b6:	296f      	cmp	r1, #111	; 0x6f
 80150b8:	bf14      	ite	ne
 80150ba:	220a      	movne	r2, #10
 80150bc:	2208      	moveq	r2, #8
 80150be:	2100      	movs	r1, #0
 80150c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150c4:	6865      	ldr	r5, [r4, #4]
 80150c6:	60a5      	str	r5, [r4, #8]
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	f2c0 8095 	blt.w	80151f8 <_printf_i+0x20c>
 80150ce:	6821      	ldr	r1, [r4, #0]
 80150d0:	f021 0104 	bic.w	r1, r1, #4
 80150d4:	6021      	str	r1, [r4, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d13d      	bne.n	8015156 <_printf_i+0x16a>
 80150da:	2d00      	cmp	r5, #0
 80150dc:	f040 808e 	bne.w	80151fc <_printf_i+0x210>
 80150e0:	4665      	mov	r5, ip
 80150e2:	2a08      	cmp	r2, #8
 80150e4:	d10b      	bne.n	80150fe <_printf_i+0x112>
 80150e6:	6823      	ldr	r3, [r4, #0]
 80150e8:	07db      	lsls	r3, r3, #31
 80150ea:	d508      	bpl.n	80150fe <_printf_i+0x112>
 80150ec:	6923      	ldr	r3, [r4, #16]
 80150ee:	6862      	ldr	r2, [r4, #4]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	bfde      	ittt	le
 80150f4:	2330      	movle	r3, #48	; 0x30
 80150f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80150fe:	ebac 0305 	sub.w	r3, ip, r5
 8015102:	6123      	str	r3, [r4, #16]
 8015104:	f8cd 8000 	str.w	r8, [sp]
 8015108:	463b      	mov	r3, r7
 801510a:	aa03      	add	r2, sp, #12
 801510c:	4621      	mov	r1, r4
 801510e:	4630      	mov	r0, r6
 8015110:	f7ff fef6 	bl	8014f00 <_printf_common>
 8015114:	3001      	adds	r0, #1
 8015116:	d14d      	bne.n	80151b4 <_printf_i+0x1c8>
 8015118:	f04f 30ff 	mov.w	r0, #4294967295
 801511c:	b005      	add	sp, #20
 801511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015122:	4839      	ldr	r0, [pc, #228]	; (8015208 <_printf_i+0x21c>)
 8015124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015128:	6813      	ldr	r3, [r2, #0]
 801512a:	6821      	ldr	r1, [r4, #0]
 801512c:	1d1d      	adds	r5, r3, #4
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	6015      	str	r5, [r2, #0]
 8015132:	060a      	lsls	r2, r1, #24
 8015134:	d50b      	bpl.n	801514e <_printf_i+0x162>
 8015136:	07ca      	lsls	r2, r1, #31
 8015138:	bf44      	itt	mi
 801513a:	f041 0120 	orrmi.w	r1, r1, #32
 801513e:	6021      	strmi	r1, [r4, #0]
 8015140:	b91b      	cbnz	r3, 801514a <_printf_i+0x15e>
 8015142:	6822      	ldr	r2, [r4, #0]
 8015144:	f022 0220 	bic.w	r2, r2, #32
 8015148:	6022      	str	r2, [r4, #0]
 801514a:	2210      	movs	r2, #16
 801514c:	e7b7      	b.n	80150be <_printf_i+0xd2>
 801514e:	064d      	lsls	r5, r1, #25
 8015150:	bf48      	it	mi
 8015152:	b29b      	uxthmi	r3, r3
 8015154:	e7ef      	b.n	8015136 <_printf_i+0x14a>
 8015156:	4665      	mov	r5, ip
 8015158:	fbb3 f1f2 	udiv	r1, r3, r2
 801515c:	fb02 3311 	mls	r3, r2, r1, r3
 8015160:	5cc3      	ldrb	r3, [r0, r3]
 8015162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015166:	460b      	mov	r3, r1
 8015168:	2900      	cmp	r1, #0
 801516a:	d1f5      	bne.n	8015158 <_printf_i+0x16c>
 801516c:	e7b9      	b.n	80150e2 <_printf_i+0xf6>
 801516e:	6813      	ldr	r3, [r2, #0]
 8015170:	6825      	ldr	r5, [r4, #0]
 8015172:	6961      	ldr	r1, [r4, #20]
 8015174:	1d18      	adds	r0, r3, #4
 8015176:	6010      	str	r0, [r2, #0]
 8015178:	0628      	lsls	r0, r5, #24
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	d501      	bpl.n	8015182 <_printf_i+0x196>
 801517e:	6019      	str	r1, [r3, #0]
 8015180:	e002      	b.n	8015188 <_printf_i+0x19c>
 8015182:	066a      	lsls	r2, r5, #25
 8015184:	d5fb      	bpl.n	801517e <_printf_i+0x192>
 8015186:	8019      	strh	r1, [r3, #0]
 8015188:	2300      	movs	r3, #0
 801518a:	6123      	str	r3, [r4, #16]
 801518c:	4665      	mov	r5, ip
 801518e:	e7b9      	b.n	8015104 <_printf_i+0x118>
 8015190:	6813      	ldr	r3, [r2, #0]
 8015192:	1d19      	adds	r1, r3, #4
 8015194:	6011      	str	r1, [r2, #0]
 8015196:	681d      	ldr	r5, [r3, #0]
 8015198:	6862      	ldr	r2, [r4, #4]
 801519a:	2100      	movs	r1, #0
 801519c:	4628      	mov	r0, r5
 801519e:	f7eb f837 	bl	8000210 <memchr>
 80151a2:	b108      	cbz	r0, 80151a8 <_printf_i+0x1bc>
 80151a4:	1b40      	subs	r0, r0, r5
 80151a6:	6060      	str	r0, [r4, #4]
 80151a8:	6863      	ldr	r3, [r4, #4]
 80151aa:	6123      	str	r3, [r4, #16]
 80151ac:	2300      	movs	r3, #0
 80151ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151b2:	e7a7      	b.n	8015104 <_printf_i+0x118>
 80151b4:	6923      	ldr	r3, [r4, #16]
 80151b6:	462a      	mov	r2, r5
 80151b8:	4639      	mov	r1, r7
 80151ba:	4630      	mov	r0, r6
 80151bc:	47c0      	blx	r8
 80151be:	3001      	adds	r0, #1
 80151c0:	d0aa      	beq.n	8015118 <_printf_i+0x12c>
 80151c2:	6823      	ldr	r3, [r4, #0]
 80151c4:	079b      	lsls	r3, r3, #30
 80151c6:	d413      	bmi.n	80151f0 <_printf_i+0x204>
 80151c8:	68e0      	ldr	r0, [r4, #12]
 80151ca:	9b03      	ldr	r3, [sp, #12]
 80151cc:	4298      	cmp	r0, r3
 80151ce:	bfb8      	it	lt
 80151d0:	4618      	movlt	r0, r3
 80151d2:	e7a3      	b.n	801511c <_printf_i+0x130>
 80151d4:	2301      	movs	r3, #1
 80151d6:	464a      	mov	r2, r9
 80151d8:	4639      	mov	r1, r7
 80151da:	4630      	mov	r0, r6
 80151dc:	47c0      	blx	r8
 80151de:	3001      	adds	r0, #1
 80151e0:	d09a      	beq.n	8015118 <_printf_i+0x12c>
 80151e2:	3501      	adds	r5, #1
 80151e4:	68e3      	ldr	r3, [r4, #12]
 80151e6:	9a03      	ldr	r2, [sp, #12]
 80151e8:	1a9b      	subs	r3, r3, r2
 80151ea:	42ab      	cmp	r3, r5
 80151ec:	dcf2      	bgt.n	80151d4 <_printf_i+0x1e8>
 80151ee:	e7eb      	b.n	80151c8 <_printf_i+0x1dc>
 80151f0:	2500      	movs	r5, #0
 80151f2:	f104 0919 	add.w	r9, r4, #25
 80151f6:	e7f5      	b.n	80151e4 <_printf_i+0x1f8>
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1ac      	bne.n	8015156 <_printf_i+0x16a>
 80151fc:	7803      	ldrb	r3, [r0, #0]
 80151fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015206:	e76c      	b.n	80150e2 <_printf_i+0xf6>
 8015208:	08019540 	.word	0x08019540
 801520c:	08019551 	.word	0x08019551

08015210 <_scanf_float>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	469a      	mov	sl, r3
 8015216:	688b      	ldr	r3, [r1, #8]
 8015218:	4616      	mov	r6, r2
 801521a:	1e5a      	subs	r2, r3, #1
 801521c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015220:	b087      	sub	sp, #28
 8015222:	bf83      	ittte	hi
 8015224:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015228:	189b      	addhi	r3, r3, r2
 801522a:	9301      	strhi	r3, [sp, #4]
 801522c:	2300      	movls	r3, #0
 801522e:	bf86      	itte	hi
 8015230:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015234:	608b      	strhi	r3, [r1, #8]
 8015236:	9301      	strls	r3, [sp, #4]
 8015238:	680b      	ldr	r3, [r1, #0]
 801523a:	4688      	mov	r8, r1
 801523c:	f04f 0b00 	mov.w	fp, #0
 8015240:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015244:	f848 3b1c 	str.w	r3, [r8], #28
 8015248:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801524c:	4607      	mov	r7, r0
 801524e:	460c      	mov	r4, r1
 8015250:	4645      	mov	r5, r8
 8015252:	465a      	mov	r2, fp
 8015254:	46d9      	mov	r9, fp
 8015256:	f8cd b008 	str.w	fp, [sp, #8]
 801525a:	68a1      	ldr	r1, [r4, #8]
 801525c:	b181      	cbz	r1, 8015280 <_scanf_float+0x70>
 801525e:	6833      	ldr	r3, [r6, #0]
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	2b49      	cmp	r3, #73	; 0x49
 8015264:	d071      	beq.n	801534a <_scanf_float+0x13a>
 8015266:	d84d      	bhi.n	8015304 <_scanf_float+0xf4>
 8015268:	2b39      	cmp	r3, #57	; 0x39
 801526a:	d840      	bhi.n	80152ee <_scanf_float+0xde>
 801526c:	2b31      	cmp	r3, #49	; 0x31
 801526e:	f080 8088 	bcs.w	8015382 <_scanf_float+0x172>
 8015272:	2b2d      	cmp	r3, #45	; 0x2d
 8015274:	f000 8090 	beq.w	8015398 <_scanf_float+0x188>
 8015278:	d815      	bhi.n	80152a6 <_scanf_float+0x96>
 801527a:	2b2b      	cmp	r3, #43	; 0x2b
 801527c:	f000 808c 	beq.w	8015398 <_scanf_float+0x188>
 8015280:	f1b9 0f00 	cmp.w	r9, #0
 8015284:	d003      	beq.n	801528e <_scanf_float+0x7e>
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	3a01      	subs	r2, #1
 8015290:	2a01      	cmp	r2, #1
 8015292:	f200 80ea 	bhi.w	801546a <_scanf_float+0x25a>
 8015296:	4545      	cmp	r5, r8
 8015298:	f200 80dc 	bhi.w	8015454 <_scanf_float+0x244>
 801529c:	2601      	movs	r6, #1
 801529e:	4630      	mov	r0, r6
 80152a0:	b007      	add	sp, #28
 80152a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a6:	2b2e      	cmp	r3, #46	; 0x2e
 80152a8:	f000 809f 	beq.w	80153ea <_scanf_float+0x1da>
 80152ac:	2b30      	cmp	r3, #48	; 0x30
 80152ae:	d1e7      	bne.n	8015280 <_scanf_float+0x70>
 80152b0:	6820      	ldr	r0, [r4, #0]
 80152b2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80152b6:	d064      	beq.n	8015382 <_scanf_float+0x172>
 80152b8:	9b01      	ldr	r3, [sp, #4]
 80152ba:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80152be:	6020      	str	r0, [r4, #0]
 80152c0:	f109 0901 	add.w	r9, r9, #1
 80152c4:	b11b      	cbz	r3, 80152ce <_scanf_float+0xbe>
 80152c6:	3b01      	subs	r3, #1
 80152c8:	3101      	adds	r1, #1
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	60a1      	str	r1, [r4, #8]
 80152ce:	68a3      	ldr	r3, [r4, #8]
 80152d0:	3b01      	subs	r3, #1
 80152d2:	60a3      	str	r3, [r4, #8]
 80152d4:	6923      	ldr	r3, [r4, #16]
 80152d6:	3301      	adds	r3, #1
 80152d8:	6123      	str	r3, [r4, #16]
 80152da:	6873      	ldr	r3, [r6, #4]
 80152dc:	3b01      	subs	r3, #1
 80152de:	2b00      	cmp	r3, #0
 80152e0:	6073      	str	r3, [r6, #4]
 80152e2:	f340 80ac 	ble.w	801543e <_scanf_float+0x22e>
 80152e6:	6833      	ldr	r3, [r6, #0]
 80152e8:	3301      	adds	r3, #1
 80152ea:	6033      	str	r3, [r6, #0]
 80152ec:	e7b5      	b.n	801525a <_scanf_float+0x4a>
 80152ee:	2b45      	cmp	r3, #69	; 0x45
 80152f0:	f000 8085 	beq.w	80153fe <_scanf_float+0x1ee>
 80152f4:	2b46      	cmp	r3, #70	; 0x46
 80152f6:	d06a      	beq.n	80153ce <_scanf_float+0x1be>
 80152f8:	2b41      	cmp	r3, #65	; 0x41
 80152fa:	d1c1      	bne.n	8015280 <_scanf_float+0x70>
 80152fc:	2a01      	cmp	r2, #1
 80152fe:	d1bf      	bne.n	8015280 <_scanf_float+0x70>
 8015300:	2202      	movs	r2, #2
 8015302:	e046      	b.n	8015392 <_scanf_float+0x182>
 8015304:	2b65      	cmp	r3, #101	; 0x65
 8015306:	d07a      	beq.n	80153fe <_scanf_float+0x1ee>
 8015308:	d818      	bhi.n	801533c <_scanf_float+0x12c>
 801530a:	2b54      	cmp	r3, #84	; 0x54
 801530c:	d066      	beq.n	80153dc <_scanf_float+0x1cc>
 801530e:	d811      	bhi.n	8015334 <_scanf_float+0x124>
 8015310:	2b4e      	cmp	r3, #78	; 0x4e
 8015312:	d1b5      	bne.n	8015280 <_scanf_float+0x70>
 8015314:	2a00      	cmp	r2, #0
 8015316:	d146      	bne.n	80153a6 <_scanf_float+0x196>
 8015318:	f1b9 0f00 	cmp.w	r9, #0
 801531c:	d145      	bne.n	80153aa <_scanf_float+0x19a>
 801531e:	6821      	ldr	r1, [r4, #0]
 8015320:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015324:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015328:	d13f      	bne.n	80153aa <_scanf_float+0x19a>
 801532a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801532e:	6021      	str	r1, [r4, #0]
 8015330:	2201      	movs	r2, #1
 8015332:	e02e      	b.n	8015392 <_scanf_float+0x182>
 8015334:	2b59      	cmp	r3, #89	; 0x59
 8015336:	d01e      	beq.n	8015376 <_scanf_float+0x166>
 8015338:	2b61      	cmp	r3, #97	; 0x61
 801533a:	e7de      	b.n	80152fa <_scanf_float+0xea>
 801533c:	2b6e      	cmp	r3, #110	; 0x6e
 801533e:	d0e9      	beq.n	8015314 <_scanf_float+0x104>
 8015340:	d815      	bhi.n	801536e <_scanf_float+0x15e>
 8015342:	2b66      	cmp	r3, #102	; 0x66
 8015344:	d043      	beq.n	80153ce <_scanf_float+0x1be>
 8015346:	2b69      	cmp	r3, #105	; 0x69
 8015348:	d19a      	bne.n	8015280 <_scanf_float+0x70>
 801534a:	f1bb 0f00 	cmp.w	fp, #0
 801534e:	d138      	bne.n	80153c2 <_scanf_float+0x1b2>
 8015350:	f1b9 0f00 	cmp.w	r9, #0
 8015354:	d197      	bne.n	8015286 <_scanf_float+0x76>
 8015356:	6821      	ldr	r1, [r4, #0]
 8015358:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801535c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015360:	d195      	bne.n	801528e <_scanf_float+0x7e>
 8015362:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015366:	6021      	str	r1, [r4, #0]
 8015368:	f04f 0b01 	mov.w	fp, #1
 801536c:	e011      	b.n	8015392 <_scanf_float+0x182>
 801536e:	2b74      	cmp	r3, #116	; 0x74
 8015370:	d034      	beq.n	80153dc <_scanf_float+0x1cc>
 8015372:	2b79      	cmp	r3, #121	; 0x79
 8015374:	d184      	bne.n	8015280 <_scanf_float+0x70>
 8015376:	f1bb 0f07 	cmp.w	fp, #7
 801537a:	d181      	bne.n	8015280 <_scanf_float+0x70>
 801537c:	f04f 0b08 	mov.w	fp, #8
 8015380:	e007      	b.n	8015392 <_scanf_float+0x182>
 8015382:	eb12 0f0b 	cmn.w	r2, fp
 8015386:	f47f af7b 	bne.w	8015280 <_scanf_float+0x70>
 801538a:	6821      	ldr	r1, [r4, #0]
 801538c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015390:	6021      	str	r1, [r4, #0]
 8015392:	702b      	strb	r3, [r5, #0]
 8015394:	3501      	adds	r5, #1
 8015396:	e79a      	b.n	80152ce <_scanf_float+0xbe>
 8015398:	6821      	ldr	r1, [r4, #0]
 801539a:	0608      	lsls	r0, r1, #24
 801539c:	f57f af70 	bpl.w	8015280 <_scanf_float+0x70>
 80153a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80153a4:	e7f4      	b.n	8015390 <_scanf_float+0x180>
 80153a6:	2a02      	cmp	r2, #2
 80153a8:	d047      	beq.n	801543a <_scanf_float+0x22a>
 80153aa:	f1bb 0f01 	cmp.w	fp, #1
 80153ae:	d003      	beq.n	80153b8 <_scanf_float+0x1a8>
 80153b0:	f1bb 0f04 	cmp.w	fp, #4
 80153b4:	f47f af64 	bne.w	8015280 <_scanf_float+0x70>
 80153b8:	f10b 0b01 	add.w	fp, fp, #1
 80153bc:	fa5f fb8b 	uxtb.w	fp, fp
 80153c0:	e7e7      	b.n	8015392 <_scanf_float+0x182>
 80153c2:	f1bb 0f03 	cmp.w	fp, #3
 80153c6:	d0f7      	beq.n	80153b8 <_scanf_float+0x1a8>
 80153c8:	f1bb 0f05 	cmp.w	fp, #5
 80153cc:	e7f2      	b.n	80153b4 <_scanf_float+0x1a4>
 80153ce:	f1bb 0f02 	cmp.w	fp, #2
 80153d2:	f47f af55 	bne.w	8015280 <_scanf_float+0x70>
 80153d6:	f04f 0b03 	mov.w	fp, #3
 80153da:	e7da      	b.n	8015392 <_scanf_float+0x182>
 80153dc:	f1bb 0f06 	cmp.w	fp, #6
 80153e0:	f47f af4e 	bne.w	8015280 <_scanf_float+0x70>
 80153e4:	f04f 0b07 	mov.w	fp, #7
 80153e8:	e7d3      	b.n	8015392 <_scanf_float+0x182>
 80153ea:	6821      	ldr	r1, [r4, #0]
 80153ec:	0588      	lsls	r0, r1, #22
 80153ee:	f57f af47 	bpl.w	8015280 <_scanf_float+0x70>
 80153f2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80153f6:	6021      	str	r1, [r4, #0]
 80153f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80153fc:	e7c9      	b.n	8015392 <_scanf_float+0x182>
 80153fe:	6821      	ldr	r1, [r4, #0]
 8015400:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015404:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015408:	d006      	beq.n	8015418 <_scanf_float+0x208>
 801540a:	0548      	lsls	r0, r1, #21
 801540c:	f57f af38 	bpl.w	8015280 <_scanf_float+0x70>
 8015410:	f1b9 0f00 	cmp.w	r9, #0
 8015414:	f43f af3b 	beq.w	801528e <_scanf_float+0x7e>
 8015418:	0588      	lsls	r0, r1, #22
 801541a:	bf58      	it	pl
 801541c:	9802      	ldrpl	r0, [sp, #8]
 801541e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015422:	bf58      	it	pl
 8015424:	eba9 0000 	subpl.w	r0, r9, r0
 8015428:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801542c:	bf58      	it	pl
 801542e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015432:	6021      	str	r1, [r4, #0]
 8015434:	f04f 0900 	mov.w	r9, #0
 8015438:	e7ab      	b.n	8015392 <_scanf_float+0x182>
 801543a:	2203      	movs	r2, #3
 801543c:	e7a9      	b.n	8015392 <_scanf_float+0x182>
 801543e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015442:	9205      	str	r2, [sp, #20]
 8015444:	4631      	mov	r1, r6
 8015446:	4638      	mov	r0, r7
 8015448:	4798      	blx	r3
 801544a:	9a05      	ldr	r2, [sp, #20]
 801544c:	2800      	cmp	r0, #0
 801544e:	f43f af04 	beq.w	801525a <_scanf_float+0x4a>
 8015452:	e715      	b.n	8015280 <_scanf_float+0x70>
 8015454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015458:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801545c:	4632      	mov	r2, r6
 801545e:	4638      	mov	r0, r7
 8015460:	4798      	blx	r3
 8015462:	6923      	ldr	r3, [r4, #16]
 8015464:	3b01      	subs	r3, #1
 8015466:	6123      	str	r3, [r4, #16]
 8015468:	e715      	b.n	8015296 <_scanf_float+0x86>
 801546a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801546e:	2b06      	cmp	r3, #6
 8015470:	d80a      	bhi.n	8015488 <_scanf_float+0x278>
 8015472:	f1bb 0f02 	cmp.w	fp, #2
 8015476:	d968      	bls.n	801554a <_scanf_float+0x33a>
 8015478:	f1ab 0b03 	sub.w	fp, fp, #3
 801547c:	fa5f fb8b 	uxtb.w	fp, fp
 8015480:	eba5 0b0b 	sub.w	fp, r5, fp
 8015484:	455d      	cmp	r5, fp
 8015486:	d14b      	bne.n	8015520 <_scanf_float+0x310>
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	05da      	lsls	r2, r3, #23
 801548c:	d51f      	bpl.n	80154ce <_scanf_float+0x2be>
 801548e:	055b      	lsls	r3, r3, #21
 8015490:	d468      	bmi.n	8015564 <_scanf_float+0x354>
 8015492:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015496:	6923      	ldr	r3, [r4, #16]
 8015498:	2965      	cmp	r1, #101	; 0x65
 801549a:	f103 33ff 	add.w	r3, r3, #4294967295
 801549e:	f105 3bff 	add.w	fp, r5, #4294967295
 80154a2:	6123      	str	r3, [r4, #16]
 80154a4:	d00d      	beq.n	80154c2 <_scanf_float+0x2b2>
 80154a6:	2945      	cmp	r1, #69	; 0x45
 80154a8:	d00b      	beq.n	80154c2 <_scanf_float+0x2b2>
 80154aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154ae:	4632      	mov	r2, r6
 80154b0:	4638      	mov	r0, r7
 80154b2:	4798      	blx	r3
 80154b4:	6923      	ldr	r3, [r4, #16]
 80154b6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80154ba:	3b01      	subs	r3, #1
 80154bc:	f1a5 0b02 	sub.w	fp, r5, #2
 80154c0:	6123      	str	r3, [r4, #16]
 80154c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154c6:	4632      	mov	r2, r6
 80154c8:	4638      	mov	r0, r7
 80154ca:	4798      	blx	r3
 80154cc:	465d      	mov	r5, fp
 80154ce:	6826      	ldr	r6, [r4, #0]
 80154d0:	f016 0610 	ands.w	r6, r6, #16
 80154d4:	d17a      	bne.n	80155cc <_scanf_float+0x3bc>
 80154d6:	702e      	strb	r6, [r5, #0]
 80154d8:	6823      	ldr	r3, [r4, #0]
 80154da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80154de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154e2:	d142      	bne.n	801556a <_scanf_float+0x35a>
 80154e4:	9b02      	ldr	r3, [sp, #8]
 80154e6:	eba9 0303 	sub.w	r3, r9, r3
 80154ea:	425a      	negs	r2, r3
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d149      	bne.n	8015584 <_scanf_float+0x374>
 80154f0:	2200      	movs	r2, #0
 80154f2:	4641      	mov	r1, r8
 80154f4:	4638      	mov	r0, r7
 80154f6:	f000 ff0b 	bl	8016310 <_strtod_r>
 80154fa:	6825      	ldr	r5, [r4, #0]
 80154fc:	f8da 3000 	ldr.w	r3, [sl]
 8015500:	f015 0f02 	tst.w	r5, #2
 8015504:	f103 0204 	add.w	r2, r3, #4
 8015508:	ec59 8b10 	vmov	r8, r9, d0
 801550c:	f8ca 2000 	str.w	r2, [sl]
 8015510:	d043      	beq.n	801559a <_scanf_float+0x38a>
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	e9c3 8900 	strd	r8, r9, [r3]
 8015518:	68e3      	ldr	r3, [r4, #12]
 801551a:	3301      	adds	r3, #1
 801551c:	60e3      	str	r3, [r4, #12]
 801551e:	e6be      	b.n	801529e <_scanf_float+0x8e>
 8015520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015524:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015528:	4632      	mov	r2, r6
 801552a:	4638      	mov	r0, r7
 801552c:	4798      	blx	r3
 801552e:	6923      	ldr	r3, [r4, #16]
 8015530:	3b01      	subs	r3, #1
 8015532:	6123      	str	r3, [r4, #16]
 8015534:	e7a6      	b.n	8015484 <_scanf_float+0x274>
 8015536:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801553a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801553e:	4632      	mov	r2, r6
 8015540:	4638      	mov	r0, r7
 8015542:	4798      	blx	r3
 8015544:	6923      	ldr	r3, [r4, #16]
 8015546:	3b01      	subs	r3, #1
 8015548:	6123      	str	r3, [r4, #16]
 801554a:	4545      	cmp	r5, r8
 801554c:	d8f3      	bhi.n	8015536 <_scanf_float+0x326>
 801554e:	e6a5      	b.n	801529c <_scanf_float+0x8c>
 8015550:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015554:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015558:	4632      	mov	r2, r6
 801555a:	4638      	mov	r0, r7
 801555c:	4798      	blx	r3
 801555e:	6923      	ldr	r3, [r4, #16]
 8015560:	3b01      	subs	r3, #1
 8015562:	6123      	str	r3, [r4, #16]
 8015564:	4545      	cmp	r5, r8
 8015566:	d8f3      	bhi.n	8015550 <_scanf_float+0x340>
 8015568:	e698      	b.n	801529c <_scanf_float+0x8c>
 801556a:	9b03      	ldr	r3, [sp, #12]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d0bf      	beq.n	80154f0 <_scanf_float+0x2e0>
 8015570:	9904      	ldr	r1, [sp, #16]
 8015572:	230a      	movs	r3, #10
 8015574:	4632      	mov	r2, r6
 8015576:	3101      	adds	r1, #1
 8015578:	4638      	mov	r0, r7
 801557a:	f000 ff55 	bl	8016428 <_strtol_r>
 801557e:	9b03      	ldr	r3, [sp, #12]
 8015580:	9d04      	ldr	r5, [sp, #16]
 8015582:	1ac2      	subs	r2, r0, r3
 8015584:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015588:	429d      	cmp	r5, r3
 801558a:	bf28      	it	cs
 801558c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015590:	490f      	ldr	r1, [pc, #60]	; (80155d0 <_scanf_float+0x3c0>)
 8015592:	4628      	mov	r0, r5
 8015594:	f000 f858 	bl	8015648 <siprintf>
 8015598:	e7aa      	b.n	80154f0 <_scanf_float+0x2e0>
 801559a:	f015 0504 	ands.w	r5, r5, #4
 801559e:	d1b8      	bne.n	8015512 <_scanf_float+0x302>
 80155a0:	681f      	ldr	r7, [r3, #0]
 80155a2:	ee10 2a10 	vmov	r2, s0
 80155a6:	464b      	mov	r3, r9
 80155a8:	ee10 0a10 	vmov	r0, s0
 80155ac:	4649      	mov	r1, r9
 80155ae:	f7eb fad5 	bl	8000b5c <__aeabi_dcmpun>
 80155b2:	b128      	cbz	r0, 80155c0 <_scanf_float+0x3b0>
 80155b4:	4628      	mov	r0, r5
 80155b6:	f000 f80d 	bl	80155d4 <nanf>
 80155ba:	ed87 0a00 	vstr	s0, [r7]
 80155be:	e7ab      	b.n	8015518 <_scanf_float+0x308>
 80155c0:	4640      	mov	r0, r8
 80155c2:	4649      	mov	r1, r9
 80155c4:	f7eb fb28 	bl	8000c18 <__aeabi_d2f>
 80155c8:	6038      	str	r0, [r7, #0]
 80155ca:	e7a5      	b.n	8015518 <_scanf_float+0x308>
 80155cc:	2600      	movs	r6, #0
 80155ce:	e666      	b.n	801529e <_scanf_float+0x8e>
 80155d0:	08019562 	.word	0x08019562

080155d4 <nanf>:
 80155d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80155dc <nanf+0x8>
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop
 80155dc:	7fc00000 	.word	0x7fc00000

080155e0 <sniprintf>:
 80155e0:	b40c      	push	{r2, r3}
 80155e2:	b530      	push	{r4, r5, lr}
 80155e4:	4b17      	ldr	r3, [pc, #92]	; (8015644 <sniprintf+0x64>)
 80155e6:	1e0c      	subs	r4, r1, #0
 80155e8:	b09d      	sub	sp, #116	; 0x74
 80155ea:	681d      	ldr	r5, [r3, #0]
 80155ec:	da08      	bge.n	8015600 <sniprintf+0x20>
 80155ee:	238b      	movs	r3, #139	; 0x8b
 80155f0:	602b      	str	r3, [r5, #0]
 80155f2:	f04f 30ff 	mov.w	r0, #4294967295
 80155f6:	b01d      	add	sp, #116	; 0x74
 80155f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155fc:	b002      	add	sp, #8
 80155fe:	4770      	bx	lr
 8015600:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015604:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015608:	bf14      	ite	ne
 801560a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801560e:	4623      	moveq	r3, r4
 8015610:	9304      	str	r3, [sp, #16]
 8015612:	9307      	str	r3, [sp, #28]
 8015614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015618:	9002      	str	r0, [sp, #8]
 801561a:	9006      	str	r0, [sp, #24]
 801561c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015620:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015622:	ab21      	add	r3, sp, #132	; 0x84
 8015624:	a902      	add	r1, sp, #8
 8015626:	4628      	mov	r0, r5
 8015628:	9301      	str	r3, [sp, #4]
 801562a:	f002 fde7 	bl	80181fc <_svfiprintf_r>
 801562e:	1c43      	adds	r3, r0, #1
 8015630:	bfbc      	itt	lt
 8015632:	238b      	movlt	r3, #139	; 0x8b
 8015634:	602b      	strlt	r3, [r5, #0]
 8015636:	2c00      	cmp	r4, #0
 8015638:	d0dd      	beq.n	80155f6 <sniprintf+0x16>
 801563a:	9b02      	ldr	r3, [sp, #8]
 801563c:	2200      	movs	r2, #0
 801563e:	701a      	strb	r2, [r3, #0]
 8015640:	e7d9      	b.n	80155f6 <sniprintf+0x16>
 8015642:	bf00      	nop
 8015644:	2000000c 	.word	0x2000000c

08015648 <siprintf>:
 8015648:	b40e      	push	{r1, r2, r3}
 801564a:	b500      	push	{lr}
 801564c:	b09c      	sub	sp, #112	; 0x70
 801564e:	ab1d      	add	r3, sp, #116	; 0x74
 8015650:	9002      	str	r0, [sp, #8]
 8015652:	9006      	str	r0, [sp, #24]
 8015654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015658:	4809      	ldr	r0, [pc, #36]	; (8015680 <siprintf+0x38>)
 801565a:	9107      	str	r1, [sp, #28]
 801565c:	9104      	str	r1, [sp, #16]
 801565e:	4909      	ldr	r1, [pc, #36]	; (8015684 <siprintf+0x3c>)
 8015660:	f853 2b04 	ldr.w	r2, [r3], #4
 8015664:	9105      	str	r1, [sp, #20]
 8015666:	6800      	ldr	r0, [r0, #0]
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	a902      	add	r1, sp, #8
 801566c:	f002 fdc6 	bl	80181fc <_svfiprintf_r>
 8015670:	9b02      	ldr	r3, [sp, #8]
 8015672:	2200      	movs	r2, #0
 8015674:	701a      	strb	r2, [r3, #0]
 8015676:	b01c      	add	sp, #112	; 0x70
 8015678:	f85d eb04 	ldr.w	lr, [sp], #4
 801567c:	b003      	add	sp, #12
 801567e:	4770      	bx	lr
 8015680:	2000000c 	.word	0x2000000c
 8015684:	ffff0208 	.word	0xffff0208

08015688 <siscanf>:
 8015688:	b40e      	push	{r1, r2, r3}
 801568a:	b530      	push	{r4, r5, lr}
 801568c:	b09c      	sub	sp, #112	; 0x70
 801568e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015690:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015694:	f854 5b04 	ldr.w	r5, [r4], #4
 8015698:	f8ad 2014 	strh.w	r2, [sp, #20]
 801569c:	9002      	str	r0, [sp, #8]
 801569e:	9006      	str	r0, [sp, #24]
 80156a0:	f7ea fdae 	bl	8000200 <strlen>
 80156a4:	4b0b      	ldr	r3, [pc, #44]	; (80156d4 <siscanf+0x4c>)
 80156a6:	9003      	str	r0, [sp, #12]
 80156a8:	9007      	str	r0, [sp, #28]
 80156aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80156ac:	480a      	ldr	r0, [pc, #40]	; (80156d8 <siscanf+0x50>)
 80156ae:	9401      	str	r4, [sp, #4]
 80156b0:	2300      	movs	r3, #0
 80156b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80156b4:	9314      	str	r3, [sp, #80]	; 0x50
 80156b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156be:	462a      	mov	r2, r5
 80156c0:	4623      	mov	r3, r4
 80156c2:	a902      	add	r1, sp, #8
 80156c4:	6800      	ldr	r0, [r0, #0]
 80156c6:	f002 feeb 	bl	80184a0 <__ssvfiscanf_r>
 80156ca:	b01c      	add	sp, #112	; 0x70
 80156cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156d0:	b003      	add	sp, #12
 80156d2:	4770      	bx	lr
 80156d4:	080156dd 	.word	0x080156dd
 80156d8:	2000000c 	.word	0x2000000c

080156dc <__seofread>:
 80156dc:	2000      	movs	r0, #0
 80156de:	4770      	bx	lr

080156e0 <strcpy>:
 80156e0:	4603      	mov	r3, r0
 80156e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156e6:	f803 2b01 	strb.w	r2, [r3], #1
 80156ea:	2a00      	cmp	r2, #0
 80156ec:	d1f9      	bne.n	80156e2 <strcpy+0x2>
 80156ee:	4770      	bx	lr

080156f0 <sulp>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	4604      	mov	r4, r0
 80156f4:	460d      	mov	r5, r1
 80156f6:	ec45 4b10 	vmov	d0, r4, r5
 80156fa:	4616      	mov	r6, r2
 80156fc:	f002 fb3a 	bl	8017d74 <__ulp>
 8015700:	ec51 0b10 	vmov	r0, r1, d0
 8015704:	b17e      	cbz	r6, 8015726 <sulp+0x36>
 8015706:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801570a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801570e:	2b00      	cmp	r3, #0
 8015710:	dd09      	ble.n	8015726 <sulp+0x36>
 8015712:	051b      	lsls	r3, r3, #20
 8015714:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015718:	2400      	movs	r4, #0
 801571a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801571e:	4622      	mov	r2, r4
 8015720:	462b      	mov	r3, r5
 8015722:	f7ea ff81 	bl	8000628 <__aeabi_dmul>
 8015726:	bd70      	pop	{r4, r5, r6, pc}

08015728 <_strtod_l>:
 8015728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	461f      	mov	r7, r3
 801572e:	b0a1      	sub	sp, #132	; 0x84
 8015730:	2300      	movs	r3, #0
 8015732:	4681      	mov	r9, r0
 8015734:	4638      	mov	r0, r7
 8015736:	460e      	mov	r6, r1
 8015738:	9217      	str	r2, [sp, #92]	; 0x5c
 801573a:	931c      	str	r3, [sp, #112]	; 0x70
 801573c:	f002 f824 	bl	8017788 <__localeconv_l>
 8015740:	4680      	mov	r8, r0
 8015742:	6800      	ldr	r0, [r0, #0]
 8015744:	f7ea fd5c 	bl	8000200 <strlen>
 8015748:	f04f 0a00 	mov.w	sl, #0
 801574c:	4604      	mov	r4, r0
 801574e:	f04f 0b00 	mov.w	fp, #0
 8015752:	961b      	str	r6, [sp, #108]	; 0x6c
 8015754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015756:	781a      	ldrb	r2, [r3, #0]
 8015758:	2a0d      	cmp	r2, #13
 801575a:	d832      	bhi.n	80157c2 <_strtod_l+0x9a>
 801575c:	2a09      	cmp	r2, #9
 801575e:	d236      	bcs.n	80157ce <_strtod_l+0xa6>
 8015760:	2a00      	cmp	r2, #0
 8015762:	d03e      	beq.n	80157e2 <_strtod_l+0xba>
 8015764:	2300      	movs	r3, #0
 8015766:	930d      	str	r3, [sp, #52]	; 0x34
 8015768:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801576a:	782b      	ldrb	r3, [r5, #0]
 801576c:	2b30      	cmp	r3, #48	; 0x30
 801576e:	f040 80ac 	bne.w	80158ca <_strtod_l+0x1a2>
 8015772:	786b      	ldrb	r3, [r5, #1]
 8015774:	2b58      	cmp	r3, #88	; 0x58
 8015776:	d001      	beq.n	801577c <_strtod_l+0x54>
 8015778:	2b78      	cmp	r3, #120	; 0x78
 801577a:	d167      	bne.n	801584c <_strtod_l+0x124>
 801577c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801577e:	9301      	str	r3, [sp, #4]
 8015780:	ab1c      	add	r3, sp, #112	; 0x70
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	9702      	str	r7, [sp, #8]
 8015786:	ab1d      	add	r3, sp, #116	; 0x74
 8015788:	4a88      	ldr	r2, [pc, #544]	; (80159ac <_strtod_l+0x284>)
 801578a:	a91b      	add	r1, sp, #108	; 0x6c
 801578c:	4648      	mov	r0, r9
 801578e:	f001 fd12 	bl	80171b6 <__gethex>
 8015792:	f010 0407 	ands.w	r4, r0, #7
 8015796:	4606      	mov	r6, r0
 8015798:	d005      	beq.n	80157a6 <_strtod_l+0x7e>
 801579a:	2c06      	cmp	r4, #6
 801579c:	d12b      	bne.n	80157f6 <_strtod_l+0xce>
 801579e:	3501      	adds	r5, #1
 80157a0:	2300      	movs	r3, #0
 80157a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80157a4:	930d      	str	r3, [sp, #52]	; 0x34
 80157a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f040 859a 	bne.w	80162e2 <_strtod_l+0xbba>
 80157ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b0:	b1e3      	cbz	r3, 80157ec <_strtod_l+0xc4>
 80157b2:	4652      	mov	r2, sl
 80157b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157b8:	ec43 2b10 	vmov	d0, r2, r3
 80157bc:	b021      	add	sp, #132	; 0x84
 80157be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	2a2b      	cmp	r2, #43	; 0x2b
 80157c4:	d015      	beq.n	80157f2 <_strtod_l+0xca>
 80157c6:	2a2d      	cmp	r2, #45	; 0x2d
 80157c8:	d004      	beq.n	80157d4 <_strtod_l+0xac>
 80157ca:	2a20      	cmp	r2, #32
 80157cc:	d1ca      	bne.n	8015764 <_strtod_l+0x3c>
 80157ce:	3301      	adds	r3, #1
 80157d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80157d2:	e7bf      	b.n	8015754 <_strtod_l+0x2c>
 80157d4:	2201      	movs	r2, #1
 80157d6:	920d      	str	r2, [sp, #52]	; 0x34
 80157d8:	1c5a      	adds	r2, r3, #1
 80157da:	921b      	str	r2, [sp, #108]	; 0x6c
 80157dc:	785b      	ldrb	r3, [r3, #1]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d1c2      	bne.n	8015768 <_strtod_l+0x40>
 80157e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f040 8579 	bne.w	80162de <_strtod_l+0xbb6>
 80157ec:	4652      	mov	r2, sl
 80157ee:	465b      	mov	r3, fp
 80157f0:	e7e2      	b.n	80157b8 <_strtod_l+0x90>
 80157f2:	2200      	movs	r2, #0
 80157f4:	e7ef      	b.n	80157d6 <_strtod_l+0xae>
 80157f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80157f8:	b13a      	cbz	r2, 801580a <_strtod_l+0xe2>
 80157fa:	2135      	movs	r1, #53	; 0x35
 80157fc:	a81e      	add	r0, sp, #120	; 0x78
 80157fe:	f002 fbb1 	bl	8017f64 <__copybits>
 8015802:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015804:	4648      	mov	r0, r9
 8015806:	f002 f81d 	bl	8017844 <_Bfree>
 801580a:	3c01      	subs	r4, #1
 801580c:	2c04      	cmp	r4, #4
 801580e:	d806      	bhi.n	801581e <_strtod_l+0xf6>
 8015810:	e8df f004 	tbb	[pc, r4]
 8015814:	1714030a 	.word	0x1714030a
 8015818:	0a          	.byte	0x0a
 8015819:	00          	.byte	0x00
 801581a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801581e:	0730      	lsls	r0, r6, #28
 8015820:	d5c1      	bpl.n	80157a6 <_strtod_l+0x7e>
 8015822:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015826:	e7be      	b.n	80157a6 <_strtod_l+0x7e>
 8015828:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801582c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801582e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015832:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015836:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801583a:	e7f0      	b.n	801581e <_strtod_l+0xf6>
 801583c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80159b0 <_strtod_l+0x288>
 8015840:	e7ed      	b.n	801581e <_strtod_l+0xf6>
 8015842:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015846:	f04f 3aff 	mov.w	sl, #4294967295
 801584a:	e7e8      	b.n	801581e <_strtod_l+0xf6>
 801584c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801584e:	1c5a      	adds	r2, r3, #1
 8015850:	921b      	str	r2, [sp, #108]	; 0x6c
 8015852:	785b      	ldrb	r3, [r3, #1]
 8015854:	2b30      	cmp	r3, #48	; 0x30
 8015856:	d0f9      	beq.n	801584c <_strtod_l+0x124>
 8015858:	2b00      	cmp	r3, #0
 801585a:	d0a4      	beq.n	80157a6 <_strtod_l+0x7e>
 801585c:	2301      	movs	r3, #1
 801585e:	2500      	movs	r5, #0
 8015860:	9306      	str	r3, [sp, #24]
 8015862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015864:	9308      	str	r3, [sp, #32]
 8015866:	9507      	str	r5, [sp, #28]
 8015868:	9505      	str	r5, [sp, #20]
 801586a:	220a      	movs	r2, #10
 801586c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801586e:	7807      	ldrb	r7, [r0, #0]
 8015870:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015874:	b2d9      	uxtb	r1, r3
 8015876:	2909      	cmp	r1, #9
 8015878:	d929      	bls.n	80158ce <_strtod_l+0x1a6>
 801587a:	4622      	mov	r2, r4
 801587c:	f8d8 1000 	ldr.w	r1, [r8]
 8015880:	f003 f8f8 	bl	8018a74 <strncmp>
 8015884:	2800      	cmp	r0, #0
 8015886:	d031      	beq.n	80158ec <_strtod_l+0x1c4>
 8015888:	2000      	movs	r0, #0
 801588a:	9c05      	ldr	r4, [sp, #20]
 801588c:	9004      	str	r0, [sp, #16]
 801588e:	463b      	mov	r3, r7
 8015890:	4602      	mov	r2, r0
 8015892:	2b65      	cmp	r3, #101	; 0x65
 8015894:	d001      	beq.n	801589a <_strtod_l+0x172>
 8015896:	2b45      	cmp	r3, #69	; 0x45
 8015898:	d114      	bne.n	80158c4 <_strtod_l+0x19c>
 801589a:	b924      	cbnz	r4, 80158a6 <_strtod_l+0x17e>
 801589c:	b910      	cbnz	r0, 80158a4 <_strtod_l+0x17c>
 801589e:	9b06      	ldr	r3, [sp, #24]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d09e      	beq.n	80157e2 <_strtod_l+0xba>
 80158a4:	2400      	movs	r4, #0
 80158a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80158a8:	1c73      	adds	r3, r6, #1
 80158aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80158ac:	7873      	ldrb	r3, [r6, #1]
 80158ae:	2b2b      	cmp	r3, #43	; 0x2b
 80158b0:	d078      	beq.n	80159a4 <_strtod_l+0x27c>
 80158b2:	2b2d      	cmp	r3, #45	; 0x2d
 80158b4:	d070      	beq.n	8015998 <_strtod_l+0x270>
 80158b6:	f04f 0c00 	mov.w	ip, #0
 80158ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80158be:	2f09      	cmp	r7, #9
 80158c0:	d97c      	bls.n	80159bc <_strtod_l+0x294>
 80158c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80158c4:	f04f 0e00 	mov.w	lr, #0
 80158c8:	e09a      	b.n	8015a00 <_strtod_l+0x2d8>
 80158ca:	2300      	movs	r3, #0
 80158cc:	e7c7      	b.n	801585e <_strtod_l+0x136>
 80158ce:	9905      	ldr	r1, [sp, #20]
 80158d0:	2908      	cmp	r1, #8
 80158d2:	bfdd      	ittte	le
 80158d4:	9907      	ldrle	r1, [sp, #28]
 80158d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80158da:	9307      	strle	r3, [sp, #28]
 80158dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80158e0:	9b05      	ldr	r3, [sp, #20]
 80158e2:	3001      	adds	r0, #1
 80158e4:	3301      	adds	r3, #1
 80158e6:	9305      	str	r3, [sp, #20]
 80158e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80158ea:	e7bf      	b.n	801586c <_strtod_l+0x144>
 80158ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158ee:	191a      	adds	r2, r3, r4
 80158f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80158f2:	9a05      	ldr	r2, [sp, #20]
 80158f4:	5d1b      	ldrb	r3, [r3, r4]
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	d037      	beq.n	801596a <_strtod_l+0x242>
 80158fa:	9c05      	ldr	r4, [sp, #20]
 80158fc:	4602      	mov	r2, r0
 80158fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015902:	2909      	cmp	r1, #9
 8015904:	d913      	bls.n	801592e <_strtod_l+0x206>
 8015906:	2101      	movs	r1, #1
 8015908:	9104      	str	r1, [sp, #16]
 801590a:	e7c2      	b.n	8015892 <_strtod_l+0x16a>
 801590c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801590e:	1c5a      	adds	r2, r3, #1
 8015910:	921b      	str	r2, [sp, #108]	; 0x6c
 8015912:	785b      	ldrb	r3, [r3, #1]
 8015914:	3001      	adds	r0, #1
 8015916:	2b30      	cmp	r3, #48	; 0x30
 8015918:	d0f8      	beq.n	801590c <_strtod_l+0x1e4>
 801591a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801591e:	2a08      	cmp	r2, #8
 8015920:	f200 84e4 	bhi.w	80162ec <_strtod_l+0xbc4>
 8015924:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015926:	9208      	str	r2, [sp, #32]
 8015928:	4602      	mov	r2, r0
 801592a:	2000      	movs	r0, #0
 801592c:	4604      	mov	r4, r0
 801592e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015932:	f100 0101 	add.w	r1, r0, #1
 8015936:	d012      	beq.n	801595e <_strtod_l+0x236>
 8015938:	440a      	add	r2, r1
 801593a:	eb00 0c04 	add.w	ip, r0, r4
 801593e:	4621      	mov	r1, r4
 8015940:	270a      	movs	r7, #10
 8015942:	458c      	cmp	ip, r1
 8015944:	d113      	bne.n	801596e <_strtod_l+0x246>
 8015946:	1821      	adds	r1, r4, r0
 8015948:	2908      	cmp	r1, #8
 801594a:	f104 0401 	add.w	r4, r4, #1
 801594e:	4404      	add	r4, r0
 8015950:	dc19      	bgt.n	8015986 <_strtod_l+0x25e>
 8015952:	9b07      	ldr	r3, [sp, #28]
 8015954:	210a      	movs	r1, #10
 8015956:	fb01 e303 	mla	r3, r1, r3, lr
 801595a:	9307      	str	r3, [sp, #28]
 801595c:	2100      	movs	r1, #0
 801595e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015960:	1c58      	adds	r0, r3, #1
 8015962:	901b      	str	r0, [sp, #108]	; 0x6c
 8015964:	785b      	ldrb	r3, [r3, #1]
 8015966:	4608      	mov	r0, r1
 8015968:	e7c9      	b.n	80158fe <_strtod_l+0x1d6>
 801596a:	9805      	ldr	r0, [sp, #20]
 801596c:	e7d3      	b.n	8015916 <_strtod_l+0x1ee>
 801596e:	2908      	cmp	r1, #8
 8015970:	f101 0101 	add.w	r1, r1, #1
 8015974:	dc03      	bgt.n	801597e <_strtod_l+0x256>
 8015976:	9b07      	ldr	r3, [sp, #28]
 8015978:	437b      	muls	r3, r7
 801597a:	9307      	str	r3, [sp, #28]
 801597c:	e7e1      	b.n	8015942 <_strtod_l+0x21a>
 801597e:	2910      	cmp	r1, #16
 8015980:	bfd8      	it	le
 8015982:	437d      	mulle	r5, r7
 8015984:	e7dd      	b.n	8015942 <_strtod_l+0x21a>
 8015986:	2c10      	cmp	r4, #16
 8015988:	bfdc      	itt	le
 801598a:	210a      	movle	r1, #10
 801598c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015990:	e7e4      	b.n	801595c <_strtod_l+0x234>
 8015992:	2301      	movs	r3, #1
 8015994:	9304      	str	r3, [sp, #16]
 8015996:	e781      	b.n	801589c <_strtod_l+0x174>
 8015998:	f04f 0c01 	mov.w	ip, #1
 801599c:	1cb3      	adds	r3, r6, #2
 801599e:	931b      	str	r3, [sp, #108]	; 0x6c
 80159a0:	78b3      	ldrb	r3, [r6, #2]
 80159a2:	e78a      	b.n	80158ba <_strtod_l+0x192>
 80159a4:	f04f 0c00 	mov.w	ip, #0
 80159a8:	e7f8      	b.n	801599c <_strtod_l+0x274>
 80159aa:	bf00      	nop
 80159ac:	08019568 	.word	0x08019568
 80159b0:	7ff00000 	.word	0x7ff00000
 80159b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159b6:	1c5f      	adds	r7, r3, #1
 80159b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80159ba:	785b      	ldrb	r3, [r3, #1]
 80159bc:	2b30      	cmp	r3, #48	; 0x30
 80159be:	d0f9      	beq.n	80159b4 <_strtod_l+0x28c>
 80159c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80159c4:	2f08      	cmp	r7, #8
 80159c6:	f63f af7d 	bhi.w	80158c4 <_strtod_l+0x19c>
 80159ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80159ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159d0:	930a      	str	r3, [sp, #40]	; 0x28
 80159d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159d4:	1c5f      	adds	r7, r3, #1
 80159d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80159d8:	785b      	ldrb	r3, [r3, #1]
 80159da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80159de:	f1b8 0f09 	cmp.w	r8, #9
 80159e2:	d937      	bls.n	8015a54 <_strtod_l+0x32c>
 80159e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80159e6:	1a7f      	subs	r7, r7, r1
 80159e8:	2f08      	cmp	r7, #8
 80159ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80159ee:	dc37      	bgt.n	8015a60 <_strtod_l+0x338>
 80159f0:	45be      	cmp	lr, r7
 80159f2:	bfa8      	it	ge
 80159f4:	46be      	movge	lr, r7
 80159f6:	f1bc 0f00 	cmp.w	ip, #0
 80159fa:	d001      	beq.n	8015a00 <_strtod_l+0x2d8>
 80159fc:	f1ce 0e00 	rsb	lr, lr, #0
 8015a00:	2c00      	cmp	r4, #0
 8015a02:	d151      	bne.n	8015aa8 <_strtod_l+0x380>
 8015a04:	2800      	cmp	r0, #0
 8015a06:	f47f aece 	bne.w	80157a6 <_strtod_l+0x7e>
 8015a0a:	9a06      	ldr	r2, [sp, #24]
 8015a0c:	2a00      	cmp	r2, #0
 8015a0e:	f47f aeca 	bne.w	80157a6 <_strtod_l+0x7e>
 8015a12:	9a04      	ldr	r2, [sp, #16]
 8015a14:	2a00      	cmp	r2, #0
 8015a16:	f47f aee4 	bne.w	80157e2 <_strtod_l+0xba>
 8015a1a:	2b4e      	cmp	r3, #78	; 0x4e
 8015a1c:	d027      	beq.n	8015a6e <_strtod_l+0x346>
 8015a1e:	dc21      	bgt.n	8015a64 <_strtod_l+0x33c>
 8015a20:	2b49      	cmp	r3, #73	; 0x49
 8015a22:	f47f aede 	bne.w	80157e2 <_strtod_l+0xba>
 8015a26:	49a0      	ldr	r1, [pc, #640]	; (8015ca8 <_strtod_l+0x580>)
 8015a28:	a81b      	add	r0, sp, #108	; 0x6c
 8015a2a:	f001 fdf7 	bl	801761c <__match>
 8015a2e:	2800      	cmp	r0, #0
 8015a30:	f43f aed7 	beq.w	80157e2 <_strtod_l+0xba>
 8015a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a36:	499d      	ldr	r1, [pc, #628]	; (8015cac <_strtod_l+0x584>)
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	a81b      	add	r0, sp, #108	; 0x6c
 8015a3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a3e:	f001 fded 	bl	801761c <__match>
 8015a42:	b910      	cbnz	r0, 8015a4a <_strtod_l+0x322>
 8015a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a46:	3301      	adds	r3, #1
 8015a48:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a4a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015cc0 <_strtod_l+0x598>
 8015a4e:	f04f 0a00 	mov.w	sl, #0
 8015a52:	e6a8      	b.n	80157a6 <_strtod_l+0x7e>
 8015a54:	210a      	movs	r1, #10
 8015a56:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015a5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a5e:	e7b8      	b.n	80159d2 <_strtod_l+0x2aa>
 8015a60:	46be      	mov	lr, r7
 8015a62:	e7c8      	b.n	80159f6 <_strtod_l+0x2ce>
 8015a64:	2b69      	cmp	r3, #105	; 0x69
 8015a66:	d0de      	beq.n	8015a26 <_strtod_l+0x2fe>
 8015a68:	2b6e      	cmp	r3, #110	; 0x6e
 8015a6a:	f47f aeba 	bne.w	80157e2 <_strtod_l+0xba>
 8015a6e:	4990      	ldr	r1, [pc, #576]	; (8015cb0 <_strtod_l+0x588>)
 8015a70:	a81b      	add	r0, sp, #108	; 0x6c
 8015a72:	f001 fdd3 	bl	801761c <__match>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	f43f aeb3 	beq.w	80157e2 <_strtod_l+0xba>
 8015a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	2b28      	cmp	r3, #40	; 0x28
 8015a82:	d10e      	bne.n	8015aa2 <_strtod_l+0x37a>
 8015a84:	aa1e      	add	r2, sp, #120	; 0x78
 8015a86:	498b      	ldr	r1, [pc, #556]	; (8015cb4 <_strtod_l+0x58c>)
 8015a88:	a81b      	add	r0, sp, #108	; 0x6c
 8015a8a:	f001 fddb 	bl	8017644 <__hexnan>
 8015a8e:	2805      	cmp	r0, #5
 8015a90:	d107      	bne.n	8015aa2 <_strtod_l+0x37a>
 8015a92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015a94:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015a98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015a9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015aa0:	e681      	b.n	80157a6 <_strtod_l+0x7e>
 8015aa2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015cc8 <_strtod_l+0x5a0>
 8015aa6:	e7d2      	b.n	8015a4e <_strtod_l+0x326>
 8015aa8:	ebae 0302 	sub.w	r3, lr, r2
 8015aac:	9306      	str	r3, [sp, #24]
 8015aae:	9b05      	ldr	r3, [sp, #20]
 8015ab0:	9807      	ldr	r0, [sp, #28]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	bf08      	it	eq
 8015ab6:	4623      	moveq	r3, r4
 8015ab8:	2c10      	cmp	r4, #16
 8015aba:	9305      	str	r3, [sp, #20]
 8015abc:	46a0      	mov	r8, r4
 8015abe:	bfa8      	it	ge
 8015ac0:	f04f 0810 	movge.w	r8, #16
 8015ac4:	f7ea fd36 	bl	8000534 <__aeabi_ui2d>
 8015ac8:	2c09      	cmp	r4, #9
 8015aca:	4682      	mov	sl, r0
 8015acc:	468b      	mov	fp, r1
 8015ace:	dc13      	bgt.n	8015af8 <_strtod_l+0x3d0>
 8015ad0:	9b06      	ldr	r3, [sp, #24]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f43f ae67 	beq.w	80157a6 <_strtod_l+0x7e>
 8015ad8:	9b06      	ldr	r3, [sp, #24]
 8015ada:	dd7a      	ble.n	8015bd2 <_strtod_l+0x4aa>
 8015adc:	2b16      	cmp	r3, #22
 8015ade:	dc61      	bgt.n	8015ba4 <_strtod_l+0x47c>
 8015ae0:	4a75      	ldr	r2, [pc, #468]	; (8015cb8 <_strtod_l+0x590>)
 8015ae2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015ae6:	e9de 0100 	ldrd	r0, r1, [lr]
 8015aea:	4652      	mov	r2, sl
 8015aec:	465b      	mov	r3, fp
 8015aee:	f7ea fd9b 	bl	8000628 <__aeabi_dmul>
 8015af2:	4682      	mov	sl, r0
 8015af4:	468b      	mov	fp, r1
 8015af6:	e656      	b.n	80157a6 <_strtod_l+0x7e>
 8015af8:	4b6f      	ldr	r3, [pc, #444]	; (8015cb8 <_strtod_l+0x590>)
 8015afa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015afe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015b02:	f7ea fd91 	bl	8000628 <__aeabi_dmul>
 8015b06:	4606      	mov	r6, r0
 8015b08:	4628      	mov	r0, r5
 8015b0a:	460f      	mov	r7, r1
 8015b0c:	f7ea fd12 	bl	8000534 <__aeabi_ui2d>
 8015b10:	4602      	mov	r2, r0
 8015b12:	460b      	mov	r3, r1
 8015b14:	4630      	mov	r0, r6
 8015b16:	4639      	mov	r1, r7
 8015b18:	f7ea fbd0 	bl	80002bc <__adddf3>
 8015b1c:	2c0f      	cmp	r4, #15
 8015b1e:	4682      	mov	sl, r0
 8015b20:	468b      	mov	fp, r1
 8015b22:	ddd5      	ble.n	8015ad0 <_strtod_l+0x3a8>
 8015b24:	9b06      	ldr	r3, [sp, #24]
 8015b26:	eba4 0808 	sub.w	r8, r4, r8
 8015b2a:	4498      	add	r8, r3
 8015b2c:	f1b8 0f00 	cmp.w	r8, #0
 8015b30:	f340 8096 	ble.w	8015c60 <_strtod_l+0x538>
 8015b34:	f018 030f 	ands.w	r3, r8, #15
 8015b38:	d00a      	beq.n	8015b50 <_strtod_l+0x428>
 8015b3a:	495f      	ldr	r1, [pc, #380]	; (8015cb8 <_strtod_l+0x590>)
 8015b3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b40:	4652      	mov	r2, sl
 8015b42:	465b      	mov	r3, fp
 8015b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b48:	f7ea fd6e 	bl	8000628 <__aeabi_dmul>
 8015b4c:	4682      	mov	sl, r0
 8015b4e:	468b      	mov	fp, r1
 8015b50:	f038 080f 	bics.w	r8, r8, #15
 8015b54:	d073      	beq.n	8015c3e <_strtod_l+0x516>
 8015b56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015b5a:	dd47      	ble.n	8015bec <_strtod_l+0x4c4>
 8015b5c:	2400      	movs	r4, #0
 8015b5e:	46a0      	mov	r8, r4
 8015b60:	9407      	str	r4, [sp, #28]
 8015b62:	9405      	str	r4, [sp, #20]
 8015b64:	2322      	movs	r3, #34	; 0x22
 8015b66:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015cc0 <_strtod_l+0x598>
 8015b6a:	f8c9 3000 	str.w	r3, [r9]
 8015b6e:	f04f 0a00 	mov.w	sl, #0
 8015b72:	9b07      	ldr	r3, [sp, #28]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	f43f ae16 	beq.w	80157a6 <_strtod_l+0x7e>
 8015b7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b7c:	4648      	mov	r0, r9
 8015b7e:	f001 fe61 	bl	8017844 <_Bfree>
 8015b82:	9905      	ldr	r1, [sp, #20]
 8015b84:	4648      	mov	r0, r9
 8015b86:	f001 fe5d 	bl	8017844 <_Bfree>
 8015b8a:	4641      	mov	r1, r8
 8015b8c:	4648      	mov	r0, r9
 8015b8e:	f001 fe59 	bl	8017844 <_Bfree>
 8015b92:	9907      	ldr	r1, [sp, #28]
 8015b94:	4648      	mov	r0, r9
 8015b96:	f001 fe55 	bl	8017844 <_Bfree>
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	4648      	mov	r0, r9
 8015b9e:	f001 fe51 	bl	8017844 <_Bfree>
 8015ba2:	e600      	b.n	80157a6 <_strtod_l+0x7e>
 8015ba4:	9a06      	ldr	r2, [sp, #24]
 8015ba6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015baa:	4293      	cmp	r3, r2
 8015bac:	dbba      	blt.n	8015b24 <_strtod_l+0x3fc>
 8015bae:	4d42      	ldr	r5, [pc, #264]	; (8015cb8 <_strtod_l+0x590>)
 8015bb0:	f1c4 040f 	rsb	r4, r4, #15
 8015bb4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015bb8:	4652      	mov	r2, sl
 8015bba:	465b      	mov	r3, fp
 8015bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bc0:	f7ea fd32 	bl	8000628 <__aeabi_dmul>
 8015bc4:	9b06      	ldr	r3, [sp, #24]
 8015bc6:	1b1c      	subs	r4, r3, r4
 8015bc8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015bcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015bd0:	e78d      	b.n	8015aee <_strtod_l+0x3c6>
 8015bd2:	f113 0f16 	cmn.w	r3, #22
 8015bd6:	dba5      	blt.n	8015b24 <_strtod_l+0x3fc>
 8015bd8:	4a37      	ldr	r2, [pc, #220]	; (8015cb8 <_strtod_l+0x590>)
 8015bda:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015bde:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015be2:	4650      	mov	r0, sl
 8015be4:	4659      	mov	r1, fp
 8015be6:	f7ea fe49 	bl	800087c <__aeabi_ddiv>
 8015bea:	e782      	b.n	8015af2 <_strtod_l+0x3ca>
 8015bec:	2300      	movs	r3, #0
 8015bee:	4e33      	ldr	r6, [pc, #204]	; (8015cbc <_strtod_l+0x594>)
 8015bf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015bf4:	4650      	mov	r0, sl
 8015bf6:	4659      	mov	r1, fp
 8015bf8:	461d      	mov	r5, r3
 8015bfa:	f1b8 0f01 	cmp.w	r8, #1
 8015bfe:	dc21      	bgt.n	8015c44 <_strtod_l+0x51c>
 8015c00:	b10b      	cbz	r3, 8015c06 <_strtod_l+0x4de>
 8015c02:	4682      	mov	sl, r0
 8015c04:	468b      	mov	fp, r1
 8015c06:	4b2d      	ldr	r3, [pc, #180]	; (8015cbc <_strtod_l+0x594>)
 8015c08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015c0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015c10:	4652      	mov	r2, sl
 8015c12:	465b      	mov	r3, fp
 8015c14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015c18:	f7ea fd06 	bl	8000628 <__aeabi_dmul>
 8015c1c:	4b28      	ldr	r3, [pc, #160]	; (8015cc0 <_strtod_l+0x598>)
 8015c1e:	460a      	mov	r2, r1
 8015c20:	400b      	ands	r3, r1
 8015c22:	4928      	ldr	r1, [pc, #160]	; (8015cc4 <_strtod_l+0x59c>)
 8015c24:	428b      	cmp	r3, r1
 8015c26:	4682      	mov	sl, r0
 8015c28:	d898      	bhi.n	8015b5c <_strtod_l+0x434>
 8015c2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015c2e:	428b      	cmp	r3, r1
 8015c30:	bf86      	itte	hi
 8015c32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015ccc <_strtod_l+0x5a4>
 8015c36:	f04f 3aff 	movhi.w	sl, #4294967295
 8015c3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015c3e:	2300      	movs	r3, #0
 8015c40:	9304      	str	r3, [sp, #16]
 8015c42:	e077      	b.n	8015d34 <_strtod_l+0x60c>
 8015c44:	f018 0f01 	tst.w	r8, #1
 8015c48:	d006      	beq.n	8015c58 <_strtod_l+0x530>
 8015c4a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c52:	f7ea fce9 	bl	8000628 <__aeabi_dmul>
 8015c56:	2301      	movs	r3, #1
 8015c58:	3501      	adds	r5, #1
 8015c5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c5e:	e7cc      	b.n	8015bfa <_strtod_l+0x4d2>
 8015c60:	d0ed      	beq.n	8015c3e <_strtod_l+0x516>
 8015c62:	f1c8 0800 	rsb	r8, r8, #0
 8015c66:	f018 020f 	ands.w	r2, r8, #15
 8015c6a:	d00a      	beq.n	8015c82 <_strtod_l+0x55a>
 8015c6c:	4b12      	ldr	r3, [pc, #72]	; (8015cb8 <_strtod_l+0x590>)
 8015c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c72:	4650      	mov	r0, sl
 8015c74:	4659      	mov	r1, fp
 8015c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7a:	f7ea fdff 	bl	800087c <__aeabi_ddiv>
 8015c7e:	4682      	mov	sl, r0
 8015c80:	468b      	mov	fp, r1
 8015c82:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015c86:	d0da      	beq.n	8015c3e <_strtod_l+0x516>
 8015c88:	f1b8 0f1f 	cmp.w	r8, #31
 8015c8c:	dd20      	ble.n	8015cd0 <_strtod_l+0x5a8>
 8015c8e:	2400      	movs	r4, #0
 8015c90:	46a0      	mov	r8, r4
 8015c92:	9407      	str	r4, [sp, #28]
 8015c94:	9405      	str	r4, [sp, #20]
 8015c96:	2322      	movs	r3, #34	; 0x22
 8015c98:	f04f 0a00 	mov.w	sl, #0
 8015c9c:	f04f 0b00 	mov.w	fp, #0
 8015ca0:	f8c9 3000 	str.w	r3, [r9]
 8015ca4:	e765      	b.n	8015b72 <_strtod_l+0x44a>
 8015ca6:	bf00      	nop
 8015ca8:	08019535 	.word	0x08019535
 8015cac:	080195bb 	.word	0x080195bb
 8015cb0:	0801953d 	.word	0x0801953d
 8015cb4:	0801957c 	.word	0x0801957c
 8015cb8:	08019660 	.word	0x08019660
 8015cbc:	08019638 	.word	0x08019638
 8015cc0:	7ff00000 	.word	0x7ff00000
 8015cc4:	7ca00000 	.word	0x7ca00000
 8015cc8:	fff80000 	.word	0xfff80000
 8015ccc:	7fefffff 	.word	0x7fefffff
 8015cd0:	f018 0310 	ands.w	r3, r8, #16
 8015cd4:	bf18      	it	ne
 8015cd6:	236a      	movne	r3, #106	; 0x6a
 8015cd8:	4da0      	ldr	r5, [pc, #640]	; (8015f5c <_strtod_l+0x834>)
 8015cda:	9304      	str	r3, [sp, #16]
 8015cdc:	4650      	mov	r0, sl
 8015cde:	4659      	mov	r1, fp
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	f1b8 0f00 	cmp.w	r8, #0
 8015ce6:	f300 810a 	bgt.w	8015efe <_strtod_l+0x7d6>
 8015cea:	b10b      	cbz	r3, 8015cf0 <_strtod_l+0x5c8>
 8015cec:	4682      	mov	sl, r0
 8015cee:	468b      	mov	fp, r1
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	b1bb      	cbz	r3, 8015d24 <_strtod_l+0x5fc>
 8015cf4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	4659      	mov	r1, fp
 8015d00:	dd10      	ble.n	8015d24 <_strtod_l+0x5fc>
 8015d02:	2b1f      	cmp	r3, #31
 8015d04:	f340 8107 	ble.w	8015f16 <_strtod_l+0x7ee>
 8015d08:	2b34      	cmp	r3, #52	; 0x34
 8015d0a:	bfde      	ittt	le
 8015d0c:	3b20      	suble	r3, #32
 8015d0e:	f04f 32ff 	movle.w	r2, #4294967295
 8015d12:	fa02 f303 	lslle.w	r3, r2, r3
 8015d16:	f04f 0a00 	mov.w	sl, #0
 8015d1a:	bfcc      	ite	gt
 8015d1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015d20:	ea03 0b01 	andle.w	fp, r3, r1
 8015d24:	2200      	movs	r2, #0
 8015d26:	2300      	movs	r3, #0
 8015d28:	4650      	mov	r0, sl
 8015d2a:	4659      	mov	r1, fp
 8015d2c:	f7ea fee4 	bl	8000af8 <__aeabi_dcmpeq>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d1ac      	bne.n	8015c8e <_strtod_l+0x566>
 8015d34:	9b07      	ldr	r3, [sp, #28]
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	9a05      	ldr	r2, [sp, #20]
 8015d3a:	9908      	ldr	r1, [sp, #32]
 8015d3c:	4623      	mov	r3, r4
 8015d3e:	4648      	mov	r0, r9
 8015d40:	f001 fdd2 	bl	80178e8 <__s2b>
 8015d44:	9007      	str	r0, [sp, #28]
 8015d46:	2800      	cmp	r0, #0
 8015d48:	f43f af08 	beq.w	8015b5c <_strtod_l+0x434>
 8015d4c:	9a06      	ldr	r2, [sp, #24]
 8015d4e:	9b06      	ldr	r3, [sp, #24]
 8015d50:	2a00      	cmp	r2, #0
 8015d52:	f1c3 0300 	rsb	r3, r3, #0
 8015d56:	bfa8      	it	ge
 8015d58:	2300      	movge	r3, #0
 8015d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8015d5c:	2400      	movs	r4, #0
 8015d5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015d62:	9316      	str	r3, [sp, #88]	; 0x58
 8015d64:	46a0      	mov	r8, r4
 8015d66:	9b07      	ldr	r3, [sp, #28]
 8015d68:	4648      	mov	r0, r9
 8015d6a:	6859      	ldr	r1, [r3, #4]
 8015d6c:	f001 fd36 	bl	80177dc <_Balloc>
 8015d70:	9005      	str	r0, [sp, #20]
 8015d72:	2800      	cmp	r0, #0
 8015d74:	f43f aef6 	beq.w	8015b64 <_strtod_l+0x43c>
 8015d78:	9b07      	ldr	r3, [sp, #28]
 8015d7a:	691a      	ldr	r2, [r3, #16]
 8015d7c:	3202      	adds	r2, #2
 8015d7e:	f103 010c 	add.w	r1, r3, #12
 8015d82:	0092      	lsls	r2, r2, #2
 8015d84:	300c      	adds	r0, #12
 8015d86:	f7fe fdd3 	bl	8014930 <memcpy>
 8015d8a:	aa1e      	add	r2, sp, #120	; 0x78
 8015d8c:	a91d      	add	r1, sp, #116	; 0x74
 8015d8e:	ec4b ab10 	vmov	d0, sl, fp
 8015d92:	4648      	mov	r0, r9
 8015d94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015d98:	f002 f862 	bl	8017e60 <__d2b>
 8015d9c:	901c      	str	r0, [sp, #112]	; 0x70
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f43f aee0 	beq.w	8015b64 <_strtod_l+0x43c>
 8015da4:	2101      	movs	r1, #1
 8015da6:	4648      	mov	r0, r9
 8015da8:	f001 fe2a 	bl	8017a00 <__i2b>
 8015dac:	4680      	mov	r8, r0
 8015dae:	2800      	cmp	r0, #0
 8015db0:	f43f aed8 	beq.w	8015b64 <_strtod_l+0x43c>
 8015db4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015db6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015db8:	2e00      	cmp	r6, #0
 8015dba:	bfab      	itete	ge
 8015dbc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015dbe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015dc0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015dc2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015dc4:	bfac      	ite	ge
 8015dc6:	18f7      	addge	r7, r6, r3
 8015dc8:	1b9d      	sublt	r5, r3, r6
 8015dca:	9b04      	ldr	r3, [sp, #16]
 8015dcc:	1af6      	subs	r6, r6, r3
 8015dce:	4416      	add	r6, r2
 8015dd0:	4b63      	ldr	r3, [pc, #396]	; (8015f60 <_strtod_l+0x838>)
 8015dd2:	3e01      	subs	r6, #1
 8015dd4:	429e      	cmp	r6, r3
 8015dd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015dda:	f280 80af 	bge.w	8015f3c <_strtod_l+0x814>
 8015dde:	1b9b      	subs	r3, r3, r6
 8015de0:	2b1f      	cmp	r3, #31
 8015de2:	eba2 0203 	sub.w	r2, r2, r3
 8015de6:	f04f 0101 	mov.w	r1, #1
 8015dea:	f300 809b 	bgt.w	8015f24 <_strtod_l+0x7fc>
 8015dee:	fa01 f303 	lsl.w	r3, r1, r3
 8015df2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015df4:	2300      	movs	r3, #0
 8015df6:	930a      	str	r3, [sp, #40]	; 0x28
 8015df8:	18be      	adds	r6, r7, r2
 8015dfa:	9b04      	ldr	r3, [sp, #16]
 8015dfc:	42b7      	cmp	r7, r6
 8015dfe:	4415      	add	r5, r2
 8015e00:	441d      	add	r5, r3
 8015e02:	463b      	mov	r3, r7
 8015e04:	bfa8      	it	ge
 8015e06:	4633      	movge	r3, r6
 8015e08:	42ab      	cmp	r3, r5
 8015e0a:	bfa8      	it	ge
 8015e0c:	462b      	movge	r3, r5
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	bfc2      	ittt	gt
 8015e12:	1af6      	subgt	r6, r6, r3
 8015e14:	1aed      	subgt	r5, r5, r3
 8015e16:	1aff      	subgt	r7, r7, r3
 8015e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e1a:	b1bb      	cbz	r3, 8015e4c <_strtod_l+0x724>
 8015e1c:	4641      	mov	r1, r8
 8015e1e:	461a      	mov	r2, r3
 8015e20:	4648      	mov	r0, r9
 8015e22:	f001 fe8d 	bl	8017b40 <__pow5mult>
 8015e26:	4680      	mov	r8, r0
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	f43f ae9b 	beq.w	8015b64 <_strtod_l+0x43c>
 8015e2e:	4601      	mov	r1, r0
 8015e30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e32:	4648      	mov	r0, r9
 8015e34:	f001 fded 	bl	8017a12 <__multiply>
 8015e38:	900c      	str	r0, [sp, #48]	; 0x30
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	f43f ae92 	beq.w	8015b64 <_strtod_l+0x43c>
 8015e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e42:	4648      	mov	r0, r9
 8015e44:	f001 fcfe 	bl	8017844 <_Bfree>
 8015e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8015e4c:	2e00      	cmp	r6, #0
 8015e4e:	dc7a      	bgt.n	8015f46 <_strtod_l+0x81e>
 8015e50:	9b06      	ldr	r3, [sp, #24]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	dd08      	ble.n	8015e68 <_strtod_l+0x740>
 8015e56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e58:	9905      	ldr	r1, [sp, #20]
 8015e5a:	4648      	mov	r0, r9
 8015e5c:	f001 fe70 	bl	8017b40 <__pow5mult>
 8015e60:	9005      	str	r0, [sp, #20]
 8015e62:	2800      	cmp	r0, #0
 8015e64:	f43f ae7e 	beq.w	8015b64 <_strtod_l+0x43c>
 8015e68:	2d00      	cmp	r5, #0
 8015e6a:	dd08      	ble.n	8015e7e <_strtod_l+0x756>
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	9905      	ldr	r1, [sp, #20]
 8015e70:	4648      	mov	r0, r9
 8015e72:	f001 feb3 	bl	8017bdc <__lshift>
 8015e76:	9005      	str	r0, [sp, #20]
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	f43f ae73 	beq.w	8015b64 <_strtod_l+0x43c>
 8015e7e:	2f00      	cmp	r7, #0
 8015e80:	dd08      	ble.n	8015e94 <_strtod_l+0x76c>
 8015e82:	4641      	mov	r1, r8
 8015e84:	463a      	mov	r2, r7
 8015e86:	4648      	mov	r0, r9
 8015e88:	f001 fea8 	bl	8017bdc <__lshift>
 8015e8c:	4680      	mov	r8, r0
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	f43f ae68 	beq.w	8015b64 <_strtod_l+0x43c>
 8015e94:	9a05      	ldr	r2, [sp, #20]
 8015e96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e98:	4648      	mov	r0, r9
 8015e9a:	f001 ff0d 	bl	8017cb8 <__mdiff>
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	f43f ae5f 	beq.w	8015b64 <_strtod_l+0x43c>
 8015ea6:	68c3      	ldr	r3, [r0, #12]
 8015ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8015eaa:	2300      	movs	r3, #0
 8015eac:	60c3      	str	r3, [r0, #12]
 8015eae:	4641      	mov	r1, r8
 8015eb0:	f001 fee8 	bl	8017c84 <__mcmp>
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	da55      	bge.n	8015f64 <_strtod_l+0x83c>
 8015eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eba:	b9e3      	cbnz	r3, 8015ef6 <_strtod_l+0x7ce>
 8015ebc:	f1ba 0f00 	cmp.w	sl, #0
 8015ec0:	d119      	bne.n	8015ef6 <_strtod_l+0x7ce>
 8015ec2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ec6:	b9b3      	cbnz	r3, 8015ef6 <_strtod_l+0x7ce>
 8015ec8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ecc:	0d1b      	lsrs	r3, r3, #20
 8015ece:	051b      	lsls	r3, r3, #20
 8015ed0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ed4:	d90f      	bls.n	8015ef6 <_strtod_l+0x7ce>
 8015ed6:	6963      	ldr	r3, [r4, #20]
 8015ed8:	b913      	cbnz	r3, 8015ee0 <_strtod_l+0x7b8>
 8015eda:	6923      	ldr	r3, [r4, #16]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	dd0a      	ble.n	8015ef6 <_strtod_l+0x7ce>
 8015ee0:	4621      	mov	r1, r4
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	4648      	mov	r0, r9
 8015ee6:	f001 fe79 	bl	8017bdc <__lshift>
 8015eea:	4641      	mov	r1, r8
 8015eec:	4604      	mov	r4, r0
 8015eee:	f001 fec9 	bl	8017c84 <__mcmp>
 8015ef2:	2800      	cmp	r0, #0
 8015ef4:	dc67      	bgt.n	8015fc6 <_strtod_l+0x89e>
 8015ef6:	9b04      	ldr	r3, [sp, #16]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d171      	bne.n	8015fe0 <_strtod_l+0x8b8>
 8015efc:	e63d      	b.n	8015b7a <_strtod_l+0x452>
 8015efe:	f018 0f01 	tst.w	r8, #1
 8015f02:	d004      	beq.n	8015f0e <_strtod_l+0x7e6>
 8015f04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f08:	f7ea fb8e 	bl	8000628 <__aeabi_dmul>
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f12:	3508      	adds	r5, #8
 8015f14:	e6e5      	b.n	8015ce2 <_strtod_l+0x5ba>
 8015f16:	f04f 32ff 	mov.w	r2, #4294967295
 8015f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f1e:	ea03 0a0a 	and.w	sl, r3, sl
 8015f22:	e6ff      	b.n	8015d24 <_strtod_l+0x5fc>
 8015f24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015f28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015f2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015f30:	36e2      	adds	r6, #226	; 0xe2
 8015f32:	fa01 f306 	lsl.w	r3, r1, r6
 8015f36:	930a      	str	r3, [sp, #40]	; 0x28
 8015f38:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f3a:	e75d      	b.n	8015df8 <_strtod_l+0x6d0>
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f40:	2301      	movs	r3, #1
 8015f42:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f44:	e758      	b.n	8015df8 <_strtod_l+0x6d0>
 8015f46:	4632      	mov	r2, r6
 8015f48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f4a:	4648      	mov	r0, r9
 8015f4c:	f001 fe46 	bl	8017bdc <__lshift>
 8015f50:	901c      	str	r0, [sp, #112]	; 0x70
 8015f52:	2800      	cmp	r0, #0
 8015f54:	f47f af7c 	bne.w	8015e50 <_strtod_l+0x728>
 8015f58:	e604      	b.n	8015b64 <_strtod_l+0x43c>
 8015f5a:	bf00      	nop
 8015f5c:	08019590 	.word	0x08019590
 8015f60:	fffffc02 	.word	0xfffffc02
 8015f64:	465d      	mov	r5, fp
 8015f66:	f040 8086 	bne.w	8016076 <_strtod_l+0x94e>
 8015f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f70:	b32a      	cbz	r2, 8015fbe <_strtod_l+0x896>
 8015f72:	4aaf      	ldr	r2, [pc, #700]	; (8016230 <_strtod_l+0xb08>)
 8015f74:	4293      	cmp	r3, r2
 8015f76:	d153      	bne.n	8016020 <_strtod_l+0x8f8>
 8015f78:	9b04      	ldr	r3, [sp, #16]
 8015f7a:	4650      	mov	r0, sl
 8015f7c:	b1d3      	cbz	r3, 8015fb4 <_strtod_l+0x88c>
 8015f7e:	4aad      	ldr	r2, [pc, #692]	; (8016234 <_strtod_l+0xb0c>)
 8015f80:	402a      	ands	r2, r5
 8015f82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015f86:	f04f 31ff 	mov.w	r1, #4294967295
 8015f8a:	d816      	bhi.n	8015fba <_strtod_l+0x892>
 8015f8c:	0d12      	lsrs	r2, r2, #20
 8015f8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015f92:	fa01 f303 	lsl.w	r3, r1, r3
 8015f96:	4298      	cmp	r0, r3
 8015f98:	d142      	bne.n	8016020 <_strtod_l+0x8f8>
 8015f9a:	4ba7      	ldr	r3, [pc, #668]	; (8016238 <_strtod_l+0xb10>)
 8015f9c:	429d      	cmp	r5, r3
 8015f9e:	d102      	bne.n	8015fa6 <_strtod_l+0x87e>
 8015fa0:	3001      	adds	r0, #1
 8015fa2:	f43f addf 	beq.w	8015b64 <_strtod_l+0x43c>
 8015fa6:	4ba3      	ldr	r3, [pc, #652]	; (8016234 <_strtod_l+0xb0c>)
 8015fa8:	402b      	ands	r3, r5
 8015faa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015fae:	f04f 0a00 	mov.w	sl, #0
 8015fb2:	e7a0      	b.n	8015ef6 <_strtod_l+0x7ce>
 8015fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8015fb8:	e7ed      	b.n	8015f96 <_strtod_l+0x86e>
 8015fba:	460b      	mov	r3, r1
 8015fbc:	e7eb      	b.n	8015f96 <_strtod_l+0x86e>
 8015fbe:	bb7b      	cbnz	r3, 8016020 <_strtod_l+0x8f8>
 8015fc0:	f1ba 0f00 	cmp.w	sl, #0
 8015fc4:	d12c      	bne.n	8016020 <_strtod_l+0x8f8>
 8015fc6:	9904      	ldr	r1, [sp, #16]
 8015fc8:	4a9a      	ldr	r2, [pc, #616]	; (8016234 <_strtod_l+0xb0c>)
 8015fca:	465b      	mov	r3, fp
 8015fcc:	b1f1      	cbz	r1, 801600c <_strtod_l+0x8e4>
 8015fce:	ea02 010b 	and.w	r1, r2, fp
 8015fd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015fd6:	dc19      	bgt.n	801600c <_strtod_l+0x8e4>
 8015fd8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015fdc:	f77f ae5b 	ble.w	8015c96 <_strtod_l+0x56e>
 8015fe0:	4a96      	ldr	r2, [pc, #600]	; (801623c <_strtod_l+0xb14>)
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015fe8:	4650      	mov	r0, sl
 8015fea:	4659      	mov	r1, fp
 8015fec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015ff0:	f7ea fb1a 	bl	8000628 <__aeabi_dmul>
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	468b      	mov	fp, r1
 8015ff8:	2900      	cmp	r1, #0
 8015ffa:	f47f adbe 	bne.w	8015b7a <_strtod_l+0x452>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f47f adbb 	bne.w	8015b7a <_strtod_l+0x452>
 8016004:	2322      	movs	r3, #34	; 0x22
 8016006:	f8c9 3000 	str.w	r3, [r9]
 801600a:	e5b6      	b.n	8015b7a <_strtod_l+0x452>
 801600c:	4013      	ands	r3, r2
 801600e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016012:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016016:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801601a:	f04f 3aff 	mov.w	sl, #4294967295
 801601e:	e76a      	b.n	8015ef6 <_strtod_l+0x7ce>
 8016020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016022:	b193      	cbz	r3, 801604a <_strtod_l+0x922>
 8016024:	422b      	tst	r3, r5
 8016026:	f43f af66 	beq.w	8015ef6 <_strtod_l+0x7ce>
 801602a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801602c:	9a04      	ldr	r2, [sp, #16]
 801602e:	4650      	mov	r0, sl
 8016030:	4659      	mov	r1, fp
 8016032:	b173      	cbz	r3, 8016052 <_strtod_l+0x92a>
 8016034:	f7ff fb5c 	bl	80156f0 <sulp>
 8016038:	4602      	mov	r2, r0
 801603a:	460b      	mov	r3, r1
 801603c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016040:	f7ea f93c 	bl	80002bc <__adddf3>
 8016044:	4682      	mov	sl, r0
 8016046:	468b      	mov	fp, r1
 8016048:	e755      	b.n	8015ef6 <_strtod_l+0x7ce>
 801604a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801604c:	ea13 0f0a 	tst.w	r3, sl
 8016050:	e7e9      	b.n	8016026 <_strtod_l+0x8fe>
 8016052:	f7ff fb4d 	bl	80156f0 <sulp>
 8016056:	4602      	mov	r2, r0
 8016058:	460b      	mov	r3, r1
 801605a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801605e:	f7ea f92b 	bl	80002b8 <__aeabi_dsub>
 8016062:	2200      	movs	r2, #0
 8016064:	2300      	movs	r3, #0
 8016066:	4682      	mov	sl, r0
 8016068:	468b      	mov	fp, r1
 801606a:	f7ea fd45 	bl	8000af8 <__aeabi_dcmpeq>
 801606e:	2800      	cmp	r0, #0
 8016070:	f47f ae11 	bne.w	8015c96 <_strtod_l+0x56e>
 8016074:	e73f      	b.n	8015ef6 <_strtod_l+0x7ce>
 8016076:	4641      	mov	r1, r8
 8016078:	4620      	mov	r0, r4
 801607a:	f001 ff40 	bl	8017efe <__ratio>
 801607e:	ec57 6b10 	vmov	r6, r7, d0
 8016082:	2200      	movs	r2, #0
 8016084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016088:	ee10 0a10 	vmov	r0, s0
 801608c:	4639      	mov	r1, r7
 801608e:	f7ea fd47 	bl	8000b20 <__aeabi_dcmple>
 8016092:	2800      	cmp	r0, #0
 8016094:	d077      	beq.n	8016186 <_strtod_l+0xa5e>
 8016096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016098:	2b00      	cmp	r3, #0
 801609a:	d04a      	beq.n	8016132 <_strtod_l+0xa0a>
 801609c:	4b68      	ldr	r3, [pc, #416]	; (8016240 <_strtod_l+0xb18>)
 801609e:	2200      	movs	r2, #0
 80160a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160a4:	4f66      	ldr	r7, [pc, #408]	; (8016240 <_strtod_l+0xb18>)
 80160a6:	2600      	movs	r6, #0
 80160a8:	4b62      	ldr	r3, [pc, #392]	; (8016234 <_strtod_l+0xb0c>)
 80160aa:	402b      	ands	r3, r5
 80160ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80160ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160b0:	4b64      	ldr	r3, [pc, #400]	; (8016244 <_strtod_l+0xb1c>)
 80160b2:	429a      	cmp	r2, r3
 80160b4:	f040 80ce 	bne.w	8016254 <_strtod_l+0xb2c>
 80160b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80160c4:	ec4b ab10 	vmov	d0, sl, fp
 80160c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80160cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80160d0:	f001 fe50 	bl	8017d74 <__ulp>
 80160d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160d8:	ec53 2b10 	vmov	r2, r3, d0
 80160dc:	f7ea faa4 	bl	8000628 <__aeabi_dmul>
 80160e0:	4652      	mov	r2, sl
 80160e2:	465b      	mov	r3, fp
 80160e4:	f7ea f8ea 	bl	80002bc <__adddf3>
 80160e8:	460b      	mov	r3, r1
 80160ea:	4952      	ldr	r1, [pc, #328]	; (8016234 <_strtod_l+0xb0c>)
 80160ec:	4a56      	ldr	r2, [pc, #344]	; (8016248 <_strtod_l+0xb20>)
 80160ee:	4019      	ands	r1, r3
 80160f0:	4291      	cmp	r1, r2
 80160f2:	4682      	mov	sl, r0
 80160f4:	d95b      	bls.n	80161ae <_strtod_l+0xa86>
 80160f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80160fc:	4293      	cmp	r3, r2
 80160fe:	d103      	bne.n	8016108 <_strtod_l+0x9e0>
 8016100:	9b08      	ldr	r3, [sp, #32]
 8016102:	3301      	adds	r3, #1
 8016104:	f43f ad2e 	beq.w	8015b64 <_strtod_l+0x43c>
 8016108:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016238 <_strtod_l+0xb10>
 801610c:	f04f 3aff 	mov.w	sl, #4294967295
 8016110:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016112:	4648      	mov	r0, r9
 8016114:	f001 fb96 	bl	8017844 <_Bfree>
 8016118:	9905      	ldr	r1, [sp, #20]
 801611a:	4648      	mov	r0, r9
 801611c:	f001 fb92 	bl	8017844 <_Bfree>
 8016120:	4641      	mov	r1, r8
 8016122:	4648      	mov	r0, r9
 8016124:	f001 fb8e 	bl	8017844 <_Bfree>
 8016128:	4621      	mov	r1, r4
 801612a:	4648      	mov	r0, r9
 801612c:	f001 fb8a 	bl	8017844 <_Bfree>
 8016130:	e619      	b.n	8015d66 <_strtod_l+0x63e>
 8016132:	f1ba 0f00 	cmp.w	sl, #0
 8016136:	d11a      	bne.n	801616e <_strtod_l+0xa46>
 8016138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801613c:	b9eb      	cbnz	r3, 801617a <_strtod_l+0xa52>
 801613e:	2200      	movs	r2, #0
 8016140:	4b3f      	ldr	r3, [pc, #252]	; (8016240 <_strtod_l+0xb18>)
 8016142:	4630      	mov	r0, r6
 8016144:	4639      	mov	r1, r7
 8016146:	f7ea fce1 	bl	8000b0c <__aeabi_dcmplt>
 801614a:	b9c8      	cbnz	r0, 8016180 <_strtod_l+0xa58>
 801614c:	4630      	mov	r0, r6
 801614e:	4639      	mov	r1, r7
 8016150:	2200      	movs	r2, #0
 8016152:	4b3e      	ldr	r3, [pc, #248]	; (801624c <_strtod_l+0xb24>)
 8016154:	f7ea fa68 	bl	8000628 <__aeabi_dmul>
 8016158:	4606      	mov	r6, r0
 801615a:	460f      	mov	r7, r1
 801615c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016160:	9618      	str	r6, [sp, #96]	; 0x60
 8016162:	9319      	str	r3, [sp, #100]	; 0x64
 8016164:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016168:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801616c:	e79c      	b.n	80160a8 <_strtod_l+0x980>
 801616e:	f1ba 0f01 	cmp.w	sl, #1
 8016172:	d102      	bne.n	801617a <_strtod_l+0xa52>
 8016174:	2d00      	cmp	r5, #0
 8016176:	f43f ad8e 	beq.w	8015c96 <_strtod_l+0x56e>
 801617a:	2200      	movs	r2, #0
 801617c:	4b34      	ldr	r3, [pc, #208]	; (8016250 <_strtod_l+0xb28>)
 801617e:	e78f      	b.n	80160a0 <_strtod_l+0x978>
 8016180:	2600      	movs	r6, #0
 8016182:	4f32      	ldr	r7, [pc, #200]	; (801624c <_strtod_l+0xb24>)
 8016184:	e7ea      	b.n	801615c <_strtod_l+0xa34>
 8016186:	4b31      	ldr	r3, [pc, #196]	; (801624c <_strtod_l+0xb24>)
 8016188:	4630      	mov	r0, r6
 801618a:	4639      	mov	r1, r7
 801618c:	2200      	movs	r2, #0
 801618e:	f7ea fa4b 	bl	8000628 <__aeabi_dmul>
 8016192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016194:	4606      	mov	r6, r0
 8016196:	460f      	mov	r7, r1
 8016198:	b933      	cbnz	r3, 80161a8 <_strtod_l+0xa80>
 801619a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801619e:	9010      	str	r0, [sp, #64]	; 0x40
 80161a0:	9311      	str	r3, [sp, #68]	; 0x44
 80161a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80161a6:	e7df      	b.n	8016168 <_strtod_l+0xa40>
 80161a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80161ac:	e7f9      	b.n	80161a2 <_strtod_l+0xa7a>
 80161ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80161b2:	9b04      	ldr	r3, [sp, #16]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d1ab      	bne.n	8016110 <_strtod_l+0x9e8>
 80161b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161bc:	0d1b      	lsrs	r3, r3, #20
 80161be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161c0:	051b      	lsls	r3, r3, #20
 80161c2:	429a      	cmp	r2, r3
 80161c4:	465d      	mov	r5, fp
 80161c6:	d1a3      	bne.n	8016110 <_strtod_l+0x9e8>
 80161c8:	4639      	mov	r1, r7
 80161ca:	4630      	mov	r0, r6
 80161cc:	f7ea fcdc 	bl	8000b88 <__aeabi_d2iz>
 80161d0:	f7ea f9c0 	bl	8000554 <__aeabi_i2d>
 80161d4:	460b      	mov	r3, r1
 80161d6:	4602      	mov	r2, r0
 80161d8:	4639      	mov	r1, r7
 80161da:	4630      	mov	r0, r6
 80161dc:	f7ea f86c 	bl	80002b8 <__aeabi_dsub>
 80161e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161e2:	4606      	mov	r6, r0
 80161e4:	460f      	mov	r7, r1
 80161e6:	b933      	cbnz	r3, 80161f6 <_strtod_l+0xace>
 80161e8:	f1ba 0f00 	cmp.w	sl, #0
 80161ec:	d103      	bne.n	80161f6 <_strtod_l+0xace>
 80161ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80161f2:	2d00      	cmp	r5, #0
 80161f4:	d06d      	beq.n	80162d2 <_strtod_l+0xbaa>
 80161f6:	a30a      	add	r3, pc, #40	; (adr r3, 8016220 <_strtod_l+0xaf8>)
 80161f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fc:	4630      	mov	r0, r6
 80161fe:	4639      	mov	r1, r7
 8016200:	f7ea fc84 	bl	8000b0c <__aeabi_dcmplt>
 8016204:	2800      	cmp	r0, #0
 8016206:	f47f acb8 	bne.w	8015b7a <_strtod_l+0x452>
 801620a:	a307      	add	r3, pc, #28	; (adr r3, 8016228 <_strtod_l+0xb00>)
 801620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016210:	4630      	mov	r0, r6
 8016212:	4639      	mov	r1, r7
 8016214:	f7ea fc98 	bl	8000b48 <__aeabi_dcmpgt>
 8016218:	2800      	cmp	r0, #0
 801621a:	f43f af79 	beq.w	8016110 <_strtod_l+0x9e8>
 801621e:	e4ac      	b.n	8015b7a <_strtod_l+0x452>
 8016220:	94a03595 	.word	0x94a03595
 8016224:	3fdfffff 	.word	0x3fdfffff
 8016228:	35afe535 	.word	0x35afe535
 801622c:	3fe00000 	.word	0x3fe00000
 8016230:	000fffff 	.word	0x000fffff
 8016234:	7ff00000 	.word	0x7ff00000
 8016238:	7fefffff 	.word	0x7fefffff
 801623c:	39500000 	.word	0x39500000
 8016240:	3ff00000 	.word	0x3ff00000
 8016244:	7fe00000 	.word	0x7fe00000
 8016248:	7c9fffff 	.word	0x7c9fffff
 801624c:	3fe00000 	.word	0x3fe00000
 8016250:	bff00000 	.word	0xbff00000
 8016254:	9b04      	ldr	r3, [sp, #16]
 8016256:	b333      	cbz	r3, 80162a6 <_strtod_l+0xb7e>
 8016258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801625a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801625e:	d822      	bhi.n	80162a6 <_strtod_l+0xb7e>
 8016260:	a327      	add	r3, pc, #156	; (adr r3, 8016300 <_strtod_l+0xbd8>)
 8016262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016266:	4630      	mov	r0, r6
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea fc59 	bl	8000b20 <__aeabi_dcmple>
 801626e:	b1a0      	cbz	r0, 801629a <_strtod_l+0xb72>
 8016270:	4639      	mov	r1, r7
 8016272:	4630      	mov	r0, r6
 8016274:	f7ea fcb0 	bl	8000bd8 <__aeabi_d2uiz>
 8016278:	2800      	cmp	r0, #0
 801627a:	bf08      	it	eq
 801627c:	2001      	moveq	r0, #1
 801627e:	f7ea f959 	bl	8000534 <__aeabi_ui2d>
 8016282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016284:	4606      	mov	r6, r0
 8016286:	460f      	mov	r7, r1
 8016288:	bb03      	cbnz	r3, 80162cc <_strtod_l+0xba4>
 801628a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801628e:	9012      	str	r0, [sp, #72]	; 0x48
 8016290:	9313      	str	r3, [sp, #76]	; 0x4c
 8016292:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016296:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801629a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801629c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801629e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80162a2:	1a9b      	subs	r3, r3, r2
 80162a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80162a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80162aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80162ae:	f001 fd61 	bl	8017d74 <__ulp>
 80162b2:	4650      	mov	r0, sl
 80162b4:	ec53 2b10 	vmov	r2, r3, d0
 80162b8:	4659      	mov	r1, fp
 80162ba:	f7ea f9b5 	bl	8000628 <__aeabi_dmul>
 80162be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80162c2:	f7e9 fffb 	bl	80002bc <__adddf3>
 80162c6:	4682      	mov	sl, r0
 80162c8:	468b      	mov	fp, r1
 80162ca:	e772      	b.n	80161b2 <_strtod_l+0xa8a>
 80162cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80162d0:	e7df      	b.n	8016292 <_strtod_l+0xb6a>
 80162d2:	a30d      	add	r3, pc, #52	; (adr r3, 8016308 <_strtod_l+0xbe0>)
 80162d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d8:	f7ea fc18 	bl	8000b0c <__aeabi_dcmplt>
 80162dc:	e79c      	b.n	8016218 <_strtod_l+0xaf0>
 80162de:	2300      	movs	r3, #0
 80162e0:	930d      	str	r3, [sp, #52]	; 0x34
 80162e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80162e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162e6:	6013      	str	r3, [r2, #0]
 80162e8:	f7ff ba61 	b.w	80157ae <_strtod_l+0x86>
 80162ec:	2b65      	cmp	r3, #101	; 0x65
 80162ee:	f04f 0200 	mov.w	r2, #0
 80162f2:	f43f ab4e 	beq.w	8015992 <_strtod_l+0x26a>
 80162f6:	2101      	movs	r1, #1
 80162f8:	4614      	mov	r4, r2
 80162fa:	9104      	str	r1, [sp, #16]
 80162fc:	f7ff bacb 	b.w	8015896 <_strtod_l+0x16e>
 8016300:	ffc00000 	.word	0xffc00000
 8016304:	41dfffff 	.word	0x41dfffff
 8016308:	94a03595 	.word	0x94a03595
 801630c:	3fcfffff 	.word	0x3fcfffff

08016310 <_strtod_r>:
 8016310:	4b05      	ldr	r3, [pc, #20]	; (8016328 <_strtod_r+0x18>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	b410      	push	{r4}
 8016316:	6a1b      	ldr	r3, [r3, #32]
 8016318:	4c04      	ldr	r4, [pc, #16]	; (801632c <_strtod_r+0x1c>)
 801631a:	2b00      	cmp	r3, #0
 801631c:	bf08      	it	eq
 801631e:	4623      	moveq	r3, r4
 8016320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016324:	f7ff ba00 	b.w	8015728 <_strtod_l>
 8016328:	2000000c 	.word	0x2000000c
 801632c:	20000070 	.word	0x20000070

08016330 <_strtol_l.isra.0>:
 8016330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016334:	4680      	mov	r8, r0
 8016336:	4689      	mov	r9, r1
 8016338:	4692      	mov	sl, r2
 801633a:	461e      	mov	r6, r3
 801633c:	460f      	mov	r7, r1
 801633e:	463d      	mov	r5, r7
 8016340:	9808      	ldr	r0, [sp, #32]
 8016342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016346:	f001 fa0d 	bl	8017764 <__locale_ctype_ptr_l>
 801634a:	4420      	add	r0, r4
 801634c:	7843      	ldrb	r3, [r0, #1]
 801634e:	f013 0308 	ands.w	r3, r3, #8
 8016352:	d132      	bne.n	80163ba <_strtol_l.isra.0+0x8a>
 8016354:	2c2d      	cmp	r4, #45	; 0x2d
 8016356:	d132      	bne.n	80163be <_strtol_l.isra.0+0x8e>
 8016358:	787c      	ldrb	r4, [r7, #1]
 801635a:	1cbd      	adds	r5, r7, #2
 801635c:	2201      	movs	r2, #1
 801635e:	2e00      	cmp	r6, #0
 8016360:	d05d      	beq.n	801641e <_strtol_l.isra.0+0xee>
 8016362:	2e10      	cmp	r6, #16
 8016364:	d109      	bne.n	801637a <_strtol_l.isra.0+0x4a>
 8016366:	2c30      	cmp	r4, #48	; 0x30
 8016368:	d107      	bne.n	801637a <_strtol_l.isra.0+0x4a>
 801636a:	782b      	ldrb	r3, [r5, #0]
 801636c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016370:	2b58      	cmp	r3, #88	; 0x58
 8016372:	d14f      	bne.n	8016414 <_strtol_l.isra.0+0xe4>
 8016374:	786c      	ldrb	r4, [r5, #1]
 8016376:	2610      	movs	r6, #16
 8016378:	3502      	adds	r5, #2
 801637a:	2a00      	cmp	r2, #0
 801637c:	bf14      	ite	ne
 801637e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016382:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016386:	2700      	movs	r7, #0
 8016388:	fbb1 fcf6 	udiv	ip, r1, r6
 801638c:	4638      	mov	r0, r7
 801638e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016392:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016396:	2b09      	cmp	r3, #9
 8016398:	d817      	bhi.n	80163ca <_strtol_l.isra.0+0x9a>
 801639a:	461c      	mov	r4, r3
 801639c:	42a6      	cmp	r6, r4
 801639e:	dd23      	ble.n	80163e8 <_strtol_l.isra.0+0xb8>
 80163a0:	1c7b      	adds	r3, r7, #1
 80163a2:	d007      	beq.n	80163b4 <_strtol_l.isra.0+0x84>
 80163a4:	4584      	cmp	ip, r0
 80163a6:	d31c      	bcc.n	80163e2 <_strtol_l.isra.0+0xb2>
 80163a8:	d101      	bne.n	80163ae <_strtol_l.isra.0+0x7e>
 80163aa:	45a6      	cmp	lr, r4
 80163ac:	db19      	blt.n	80163e2 <_strtol_l.isra.0+0xb2>
 80163ae:	fb00 4006 	mla	r0, r0, r6, r4
 80163b2:	2701      	movs	r7, #1
 80163b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163b8:	e7eb      	b.n	8016392 <_strtol_l.isra.0+0x62>
 80163ba:	462f      	mov	r7, r5
 80163bc:	e7bf      	b.n	801633e <_strtol_l.isra.0+0xe>
 80163be:	2c2b      	cmp	r4, #43	; 0x2b
 80163c0:	bf04      	itt	eq
 80163c2:	1cbd      	addeq	r5, r7, #2
 80163c4:	787c      	ldrbeq	r4, [r7, #1]
 80163c6:	461a      	mov	r2, r3
 80163c8:	e7c9      	b.n	801635e <_strtol_l.isra.0+0x2e>
 80163ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80163ce:	2b19      	cmp	r3, #25
 80163d0:	d801      	bhi.n	80163d6 <_strtol_l.isra.0+0xa6>
 80163d2:	3c37      	subs	r4, #55	; 0x37
 80163d4:	e7e2      	b.n	801639c <_strtol_l.isra.0+0x6c>
 80163d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80163da:	2b19      	cmp	r3, #25
 80163dc:	d804      	bhi.n	80163e8 <_strtol_l.isra.0+0xb8>
 80163de:	3c57      	subs	r4, #87	; 0x57
 80163e0:	e7dc      	b.n	801639c <_strtol_l.isra.0+0x6c>
 80163e2:	f04f 37ff 	mov.w	r7, #4294967295
 80163e6:	e7e5      	b.n	80163b4 <_strtol_l.isra.0+0x84>
 80163e8:	1c7b      	adds	r3, r7, #1
 80163ea:	d108      	bne.n	80163fe <_strtol_l.isra.0+0xce>
 80163ec:	2322      	movs	r3, #34	; 0x22
 80163ee:	f8c8 3000 	str.w	r3, [r8]
 80163f2:	4608      	mov	r0, r1
 80163f4:	f1ba 0f00 	cmp.w	sl, #0
 80163f8:	d107      	bne.n	801640a <_strtol_l.isra.0+0xda>
 80163fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163fe:	b102      	cbz	r2, 8016402 <_strtol_l.isra.0+0xd2>
 8016400:	4240      	negs	r0, r0
 8016402:	f1ba 0f00 	cmp.w	sl, #0
 8016406:	d0f8      	beq.n	80163fa <_strtol_l.isra.0+0xca>
 8016408:	b10f      	cbz	r7, 801640e <_strtol_l.isra.0+0xde>
 801640a:	f105 39ff 	add.w	r9, r5, #4294967295
 801640e:	f8ca 9000 	str.w	r9, [sl]
 8016412:	e7f2      	b.n	80163fa <_strtol_l.isra.0+0xca>
 8016414:	2430      	movs	r4, #48	; 0x30
 8016416:	2e00      	cmp	r6, #0
 8016418:	d1af      	bne.n	801637a <_strtol_l.isra.0+0x4a>
 801641a:	2608      	movs	r6, #8
 801641c:	e7ad      	b.n	801637a <_strtol_l.isra.0+0x4a>
 801641e:	2c30      	cmp	r4, #48	; 0x30
 8016420:	d0a3      	beq.n	801636a <_strtol_l.isra.0+0x3a>
 8016422:	260a      	movs	r6, #10
 8016424:	e7a9      	b.n	801637a <_strtol_l.isra.0+0x4a>
	...

08016428 <_strtol_r>:
 8016428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801642a:	4c06      	ldr	r4, [pc, #24]	; (8016444 <_strtol_r+0x1c>)
 801642c:	4d06      	ldr	r5, [pc, #24]	; (8016448 <_strtol_r+0x20>)
 801642e:	6824      	ldr	r4, [r4, #0]
 8016430:	6a24      	ldr	r4, [r4, #32]
 8016432:	2c00      	cmp	r4, #0
 8016434:	bf08      	it	eq
 8016436:	462c      	moveq	r4, r5
 8016438:	9400      	str	r4, [sp, #0]
 801643a:	f7ff ff79 	bl	8016330 <_strtol_l.isra.0>
 801643e:	b003      	add	sp, #12
 8016440:	bd30      	pop	{r4, r5, pc}
 8016442:	bf00      	nop
 8016444:	2000000c 	.word	0x2000000c
 8016448:	20000070 	.word	0x20000070

0801644c <_vsiprintf_r>:
 801644c:	b500      	push	{lr}
 801644e:	b09b      	sub	sp, #108	; 0x6c
 8016450:	9100      	str	r1, [sp, #0]
 8016452:	9104      	str	r1, [sp, #16]
 8016454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016458:	9105      	str	r1, [sp, #20]
 801645a:	9102      	str	r1, [sp, #8]
 801645c:	4905      	ldr	r1, [pc, #20]	; (8016474 <_vsiprintf_r+0x28>)
 801645e:	9103      	str	r1, [sp, #12]
 8016460:	4669      	mov	r1, sp
 8016462:	f001 fecb 	bl	80181fc <_svfiprintf_r>
 8016466:	9b00      	ldr	r3, [sp, #0]
 8016468:	2200      	movs	r2, #0
 801646a:	701a      	strb	r2, [r3, #0]
 801646c:	b01b      	add	sp, #108	; 0x6c
 801646e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016472:	bf00      	nop
 8016474:	ffff0208 	.word	0xffff0208

08016478 <vsiprintf>:
 8016478:	4613      	mov	r3, r2
 801647a:	460a      	mov	r2, r1
 801647c:	4601      	mov	r1, r0
 801647e:	4802      	ldr	r0, [pc, #8]	; (8016488 <vsiprintf+0x10>)
 8016480:	6800      	ldr	r0, [r0, #0]
 8016482:	f7ff bfe3 	b.w	801644c <_vsiprintf_r>
 8016486:	bf00      	nop
 8016488:	2000000c 	.word	0x2000000c

0801648c <quorem>:
 801648c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016490:	6903      	ldr	r3, [r0, #16]
 8016492:	690c      	ldr	r4, [r1, #16]
 8016494:	42a3      	cmp	r3, r4
 8016496:	4680      	mov	r8, r0
 8016498:	f2c0 8082 	blt.w	80165a0 <quorem+0x114>
 801649c:	3c01      	subs	r4, #1
 801649e:	f101 0714 	add.w	r7, r1, #20
 80164a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80164a6:	f100 0614 	add.w	r6, r0, #20
 80164aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80164ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80164b2:	eb06 030c 	add.w	r3, r6, ip
 80164b6:	3501      	adds	r5, #1
 80164b8:	eb07 090c 	add.w	r9, r7, ip
 80164bc:	9301      	str	r3, [sp, #4]
 80164be:	fbb0 f5f5 	udiv	r5, r0, r5
 80164c2:	b395      	cbz	r5, 801652a <quorem+0x9e>
 80164c4:	f04f 0a00 	mov.w	sl, #0
 80164c8:	4638      	mov	r0, r7
 80164ca:	46b6      	mov	lr, r6
 80164cc:	46d3      	mov	fp, sl
 80164ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80164d2:	b293      	uxth	r3, r2
 80164d4:	fb05 a303 	mla	r3, r5, r3, sl
 80164d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80164dc:	b29b      	uxth	r3, r3
 80164de:	ebab 0303 	sub.w	r3, fp, r3
 80164e2:	0c12      	lsrs	r2, r2, #16
 80164e4:	f8de b000 	ldr.w	fp, [lr]
 80164e8:	fb05 a202 	mla	r2, r5, r2, sl
 80164ec:	fa13 f38b 	uxtah	r3, r3, fp
 80164f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80164f4:	fa1f fb82 	uxth.w	fp, r2
 80164f8:	f8de 2000 	ldr.w	r2, [lr]
 80164fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016504:	b29b      	uxth	r3, r3
 8016506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801650a:	4581      	cmp	r9, r0
 801650c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016510:	f84e 3b04 	str.w	r3, [lr], #4
 8016514:	d2db      	bcs.n	80164ce <quorem+0x42>
 8016516:	f856 300c 	ldr.w	r3, [r6, ip]
 801651a:	b933      	cbnz	r3, 801652a <quorem+0x9e>
 801651c:	9b01      	ldr	r3, [sp, #4]
 801651e:	3b04      	subs	r3, #4
 8016520:	429e      	cmp	r6, r3
 8016522:	461a      	mov	r2, r3
 8016524:	d330      	bcc.n	8016588 <quorem+0xfc>
 8016526:	f8c8 4010 	str.w	r4, [r8, #16]
 801652a:	4640      	mov	r0, r8
 801652c:	f001 fbaa 	bl	8017c84 <__mcmp>
 8016530:	2800      	cmp	r0, #0
 8016532:	db25      	blt.n	8016580 <quorem+0xf4>
 8016534:	3501      	adds	r5, #1
 8016536:	4630      	mov	r0, r6
 8016538:	f04f 0c00 	mov.w	ip, #0
 801653c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016540:	f8d0 e000 	ldr.w	lr, [r0]
 8016544:	b293      	uxth	r3, r2
 8016546:	ebac 0303 	sub.w	r3, ip, r3
 801654a:	0c12      	lsrs	r2, r2, #16
 801654c:	fa13 f38e 	uxtah	r3, r3, lr
 8016550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016558:	b29b      	uxth	r3, r3
 801655a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801655e:	45b9      	cmp	r9, r7
 8016560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016564:	f840 3b04 	str.w	r3, [r0], #4
 8016568:	d2e8      	bcs.n	801653c <quorem+0xb0>
 801656a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801656e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016572:	b92a      	cbnz	r2, 8016580 <quorem+0xf4>
 8016574:	3b04      	subs	r3, #4
 8016576:	429e      	cmp	r6, r3
 8016578:	461a      	mov	r2, r3
 801657a:	d30b      	bcc.n	8016594 <quorem+0x108>
 801657c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016580:	4628      	mov	r0, r5
 8016582:	b003      	add	sp, #12
 8016584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016588:	6812      	ldr	r2, [r2, #0]
 801658a:	3b04      	subs	r3, #4
 801658c:	2a00      	cmp	r2, #0
 801658e:	d1ca      	bne.n	8016526 <quorem+0x9a>
 8016590:	3c01      	subs	r4, #1
 8016592:	e7c5      	b.n	8016520 <quorem+0x94>
 8016594:	6812      	ldr	r2, [r2, #0]
 8016596:	3b04      	subs	r3, #4
 8016598:	2a00      	cmp	r2, #0
 801659a:	d1ef      	bne.n	801657c <quorem+0xf0>
 801659c:	3c01      	subs	r4, #1
 801659e:	e7ea      	b.n	8016576 <quorem+0xea>
 80165a0:	2000      	movs	r0, #0
 80165a2:	e7ee      	b.n	8016582 <quorem+0xf6>
 80165a4:	0000      	movs	r0, r0
	...

080165a8 <_dtoa_r>:
 80165a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ac:	ec57 6b10 	vmov	r6, r7, d0
 80165b0:	b097      	sub	sp, #92	; 0x5c
 80165b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80165b4:	9106      	str	r1, [sp, #24]
 80165b6:	4604      	mov	r4, r0
 80165b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80165ba:	9312      	str	r3, [sp, #72]	; 0x48
 80165bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80165c0:	e9cd 6700 	strd	r6, r7, [sp]
 80165c4:	b93d      	cbnz	r5, 80165d6 <_dtoa_r+0x2e>
 80165c6:	2010      	movs	r0, #16
 80165c8:	f001 f8ee 	bl	80177a8 <malloc>
 80165cc:	6260      	str	r0, [r4, #36]	; 0x24
 80165ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80165d2:	6005      	str	r5, [r0, #0]
 80165d4:	60c5      	str	r5, [r0, #12]
 80165d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165d8:	6819      	ldr	r1, [r3, #0]
 80165da:	b151      	cbz	r1, 80165f2 <_dtoa_r+0x4a>
 80165dc:	685a      	ldr	r2, [r3, #4]
 80165de:	604a      	str	r2, [r1, #4]
 80165e0:	2301      	movs	r3, #1
 80165e2:	4093      	lsls	r3, r2
 80165e4:	608b      	str	r3, [r1, #8]
 80165e6:	4620      	mov	r0, r4
 80165e8:	f001 f92c 	bl	8017844 <_Bfree>
 80165ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165ee:	2200      	movs	r2, #0
 80165f0:	601a      	str	r2, [r3, #0]
 80165f2:	1e3b      	subs	r3, r7, #0
 80165f4:	bfbb      	ittet	lt
 80165f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80165fa:	9301      	strlt	r3, [sp, #4]
 80165fc:	2300      	movge	r3, #0
 80165fe:	2201      	movlt	r2, #1
 8016600:	bfac      	ite	ge
 8016602:	f8c8 3000 	strge.w	r3, [r8]
 8016606:	f8c8 2000 	strlt.w	r2, [r8]
 801660a:	4baf      	ldr	r3, [pc, #700]	; (80168c8 <_dtoa_r+0x320>)
 801660c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016610:	ea33 0308 	bics.w	r3, r3, r8
 8016614:	d114      	bne.n	8016640 <_dtoa_r+0x98>
 8016616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016618:	f242 730f 	movw	r3, #9999	; 0x270f
 801661c:	6013      	str	r3, [r2, #0]
 801661e:	9b00      	ldr	r3, [sp, #0]
 8016620:	b923      	cbnz	r3, 801662c <_dtoa_r+0x84>
 8016622:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016626:	2800      	cmp	r0, #0
 8016628:	f000 8542 	beq.w	80170b0 <_dtoa_r+0xb08>
 801662c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801662e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80168dc <_dtoa_r+0x334>
 8016632:	2b00      	cmp	r3, #0
 8016634:	f000 8544 	beq.w	80170c0 <_dtoa_r+0xb18>
 8016638:	f10b 0303 	add.w	r3, fp, #3
 801663c:	f000 bd3e 	b.w	80170bc <_dtoa_r+0xb14>
 8016640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016644:	2200      	movs	r2, #0
 8016646:	2300      	movs	r3, #0
 8016648:	4630      	mov	r0, r6
 801664a:	4639      	mov	r1, r7
 801664c:	f7ea fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8016650:	4681      	mov	r9, r0
 8016652:	b168      	cbz	r0, 8016670 <_dtoa_r+0xc8>
 8016654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016656:	2301      	movs	r3, #1
 8016658:	6013      	str	r3, [r2, #0]
 801665a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801665c:	2b00      	cmp	r3, #0
 801665e:	f000 8524 	beq.w	80170aa <_dtoa_r+0xb02>
 8016662:	4b9a      	ldr	r3, [pc, #616]	; (80168cc <_dtoa_r+0x324>)
 8016664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016666:	f103 3bff 	add.w	fp, r3, #4294967295
 801666a:	6013      	str	r3, [r2, #0]
 801666c:	f000 bd28 	b.w	80170c0 <_dtoa_r+0xb18>
 8016670:	aa14      	add	r2, sp, #80	; 0x50
 8016672:	a915      	add	r1, sp, #84	; 0x54
 8016674:	ec47 6b10 	vmov	d0, r6, r7
 8016678:	4620      	mov	r0, r4
 801667a:	f001 fbf1 	bl	8017e60 <__d2b>
 801667e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016682:	9004      	str	r0, [sp, #16]
 8016684:	2d00      	cmp	r5, #0
 8016686:	d07c      	beq.n	8016782 <_dtoa_r+0x1da>
 8016688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801668c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016690:	46b2      	mov	sl, r6
 8016692:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801669a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801669e:	2200      	movs	r2, #0
 80166a0:	4b8b      	ldr	r3, [pc, #556]	; (80168d0 <_dtoa_r+0x328>)
 80166a2:	4650      	mov	r0, sl
 80166a4:	4659      	mov	r1, fp
 80166a6:	f7e9 fe07 	bl	80002b8 <__aeabi_dsub>
 80166aa:	a381      	add	r3, pc, #516	; (adr r3, 80168b0 <_dtoa_r+0x308>)
 80166ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b0:	f7e9 ffba 	bl	8000628 <__aeabi_dmul>
 80166b4:	a380      	add	r3, pc, #512	; (adr r3, 80168b8 <_dtoa_r+0x310>)
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	f7e9 fdff 	bl	80002bc <__adddf3>
 80166be:	4606      	mov	r6, r0
 80166c0:	4628      	mov	r0, r5
 80166c2:	460f      	mov	r7, r1
 80166c4:	f7e9 ff46 	bl	8000554 <__aeabi_i2d>
 80166c8:	a37d      	add	r3, pc, #500	; (adr r3, 80168c0 <_dtoa_r+0x318>)
 80166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ce:	f7e9 ffab 	bl	8000628 <__aeabi_dmul>
 80166d2:	4602      	mov	r2, r0
 80166d4:	460b      	mov	r3, r1
 80166d6:	4630      	mov	r0, r6
 80166d8:	4639      	mov	r1, r7
 80166da:	f7e9 fdef 	bl	80002bc <__adddf3>
 80166de:	4606      	mov	r6, r0
 80166e0:	460f      	mov	r7, r1
 80166e2:	f7ea fa51 	bl	8000b88 <__aeabi_d2iz>
 80166e6:	2200      	movs	r2, #0
 80166e8:	4682      	mov	sl, r0
 80166ea:	2300      	movs	r3, #0
 80166ec:	4630      	mov	r0, r6
 80166ee:	4639      	mov	r1, r7
 80166f0:	f7ea fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80166f4:	b148      	cbz	r0, 801670a <_dtoa_r+0x162>
 80166f6:	4650      	mov	r0, sl
 80166f8:	f7e9 ff2c 	bl	8000554 <__aeabi_i2d>
 80166fc:	4632      	mov	r2, r6
 80166fe:	463b      	mov	r3, r7
 8016700:	f7ea f9fa 	bl	8000af8 <__aeabi_dcmpeq>
 8016704:	b908      	cbnz	r0, 801670a <_dtoa_r+0x162>
 8016706:	f10a 3aff 	add.w	sl, sl, #4294967295
 801670a:	f1ba 0f16 	cmp.w	sl, #22
 801670e:	d859      	bhi.n	80167c4 <_dtoa_r+0x21c>
 8016710:	4970      	ldr	r1, [pc, #448]	; (80168d4 <_dtoa_r+0x32c>)
 8016712:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801671a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801671e:	f7ea fa13 	bl	8000b48 <__aeabi_dcmpgt>
 8016722:	2800      	cmp	r0, #0
 8016724:	d050      	beq.n	80167c8 <_dtoa_r+0x220>
 8016726:	f10a 3aff 	add.w	sl, sl, #4294967295
 801672a:	2300      	movs	r3, #0
 801672c:	930f      	str	r3, [sp, #60]	; 0x3c
 801672e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016730:	1b5d      	subs	r5, r3, r5
 8016732:	f1b5 0801 	subs.w	r8, r5, #1
 8016736:	bf49      	itett	mi
 8016738:	f1c5 0301 	rsbmi	r3, r5, #1
 801673c:	2300      	movpl	r3, #0
 801673e:	9305      	strmi	r3, [sp, #20]
 8016740:	f04f 0800 	movmi.w	r8, #0
 8016744:	bf58      	it	pl
 8016746:	9305      	strpl	r3, [sp, #20]
 8016748:	f1ba 0f00 	cmp.w	sl, #0
 801674c:	db3e      	blt.n	80167cc <_dtoa_r+0x224>
 801674e:	2300      	movs	r3, #0
 8016750:	44d0      	add	r8, sl
 8016752:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016756:	9307      	str	r3, [sp, #28]
 8016758:	9b06      	ldr	r3, [sp, #24]
 801675a:	2b09      	cmp	r3, #9
 801675c:	f200 8090 	bhi.w	8016880 <_dtoa_r+0x2d8>
 8016760:	2b05      	cmp	r3, #5
 8016762:	bfc4      	itt	gt
 8016764:	3b04      	subgt	r3, #4
 8016766:	9306      	strgt	r3, [sp, #24]
 8016768:	9b06      	ldr	r3, [sp, #24]
 801676a:	f1a3 0302 	sub.w	r3, r3, #2
 801676e:	bfcc      	ite	gt
 8016770:	2500      	movgt	r5, #0
 8016772:	2501      	movle	r5, #1
 8016774:	2b03      	cmp	r3, #3
 8016776:	f200 808f 	bhi.w	8016898 <_dtoa_r+0x2f0>
 801677a:	e8df f003 	tbb	[pc, r3]
 801677e:	7f7d      	.short	0x7f7d
 8016780:	7131      	.short	0x7131
 8016782:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016786:	441d      	add	r5, r3
 8016788:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801678c:	2820      	cmp	r0, #32
 801678e:	dd13      	ble.n	80167b8 <_dtoa_r+0x210>
 8016790:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016794:	9b00      	ldr	r3, [sp, #0]
 8016796:	fa08 f800 	lsl.w	r8, r8, r0
 801679a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801679e:	fa23 f000 	lsr.w	r0, r3, r0
 80167a2:	ea48 0000 	orr.w	r0, r8, r0
 80167a6:	f7e9 fec5 	bl	8000534 <__aeabi_ui2d>
 80167aa:	2301      	movs	r3, #1
 80167ac:	4682      	mov	sl, r0
 80167ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80167b2:	3d01      	subs	r5, #1
 80167b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80167b6:	e772      	b.n	801669e <_dtoa_r+0xf6>
 80167b8:	9b00      	ldr	r3, [sp, #0]
 80167ba:	f1c0 0020 	rsb	r0, r0, #32
 80167be:	fa03 f000 	lsl.w	r0, r3, r0
 80167c2:	e7f0      	b.n	80167a6 <_dtoa_r+0x1fe>
 80167c4:	2301      	movs	r3, #1
 80167c6:	e7b1      	b.n	801672c <_dtoa_r+0x184>
 80167c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80167ca:	e7b0      	b.n	801672e <_dtoa_r+0x186>
 80167cc:	9b05      	ldr	r3, [sp, #20]
 80167ce:	eba3 030a 	sub.w	r3, r3, sl
 80167d2:	9305      	str	r3, [sp, #20]
 80167d4:	f1ca 0300 	rsb	r3, sl, #0
 80167d8:	9307      	str	r3, [sp, #28]
 80167da:	2300      	movs	r3, #0
 80167dc:	930e      	str	r3, [sp, #56]	; 0x38
 80167de:	e7bb      	b.n	8016758 <_dtoa_r+0x1b0>
 80167e0:	2301      	movs	r3, #1
 80167e2:	930a      	str	r3, [sp, #40]	; 0x28
 80167e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	dd59      	ble.n	801689e <_dtoa_r+0x2f6>
 80167ea:	9302      	str	r3, [sp, #8]
 80167ec:	4699      	mov	r9, r3
 80167ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80167f0:	2200      	movs	r2, #0
 80167f2:	6072      	str	r2, [r6, #4]
 80167f4:	2204      	movs	r2, #4
 80167f6:	f102 0014 	add.w	r0, r2, #20
 80167fa:	4298      	cmp	r0, r3
 80167fc:	6871      	ldr	r1, [r6, #4]
 80167fe:	d953      	bls.n	80168a8 <_dtoa_r+0x300>
 8016800:	4620      	mov	r0, r4
 8016802:	f000 ffeb 	bl	80177dc <_Balloc>
 8016806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016808:	6030      	str	r0, [r6, #0]
 801680a:	f1b9 0f0e 	cmp.w	r9, #14
 801680e:	f8d3 b000 	ldr.w	fp, [r3]
 8016812:	f200 80e6 	bhi.w	80169e2 <_dtoa_r+0x43a>
 8016816:	2d00      	cmp	r5, #0
 8016818:	f000 80e3 	beq.w	80169e2 <_dtoa_r+0x43a>
 801681c:	ed9d 7b00 	vldr	d7, [sp]
 8016820:	f1ba 0f00 	cmp.w	sl, #0
 8016824:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016828:	dd74      	ble.n	8016914 <_dtoa_r+0x36c>
 801682a:	4a2a      	ldr	r2, [pc, #168]	; (80168d4 <_dtoa_r+0x32c>)
 801682c:	f00a 030f 	and.w	r3, sl, #15
 8016830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016834:	ed93 7b00 	vldr	d7, [r3]
 8016838:	ea4f 162a 	mov.w	r6, sl, asr #4
 801683c:	06f0      	lsls	r0, r6, #27
 801683e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016842:	d565      	bpl.n	8016910 <_dtoa_r+0x368>
 8016844:	4b24      	ldr	r3, [pc, #144]	; (80168d8 <_dtoa_r+0x330>)
 8016846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801684a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801684e:	f7ea f815 	bl	800087c <__aeabi_ddiv>
 8016852:	e9cd 0100 	strd	r0, r1, [sp]
 8016856:	f006 060f 	and.w	r6, r6, #15
 801685a:	2503      	movs	r5, #3
 801685c:	4f1e      	ldr	r7, [pc, #120]	; (80168d8 <_dtoa_r+0x330>)
 801685e:	e04c      	b.n	80168fa <_dtoa_r+0x352>
 8016860:	2301      	movs	r3, #1
 8016862:	930a      	str	r3, [sp, #40]	; 0x28
 8016864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016866:	4453      	add	r3, sl
 8016868:	f103 0901 	add.w	r9, r3, #1
 801686c:	9302      	str	r3, [sp, #8]
 801686e:	464b      	mov	r3, r9
 8016870:	2b01      	cmp	r3, #1
 8016872:	bfb8      	it	lt
 8016874:	2301      	movlt	r3, #1
 8016876:	e7ba      	b.n	80167ee <_dtoa_r+0x246>
 8016878:	2300      	movs	r3, #0
 801687a:	e7b2      	b.n	80167e2 <_dtoa_r+0x23a>
 801687c:	2300      	movs	r3, #0
 801687e:	e7f0      	b.n	8016862 <_dtoa_r+0x2ba>
 8016880:	2501      	movs	r5, #1
 8016882:	2300      	movs	r3, #0
 8016884:	9306      	str	r3, [sp, #24]
 8016886:	950a      	str	r5, [sp, #40]	; 0x28
 8016888:	f04f 33ff 	mov.w	r3, #4294967295
 801688c:	9302      	str	r3, [sp, #8]
 801688e:	4699      	mov	r9, r3
 8016890:	2200      	movs	r2, #0
 8016892:	2312      	movs	r3, #18
 8016894:	920b      	str	r2, [sp, #44]	; 0x2c
 8016896:	e7aa      	b.n	80167ee <_dtoa_r+0x246>
 8016898:	2301      	movs	r3, #1
 801689a:	930a      	str	r3, [sp, #40]	; 0x28
 801689c:	e7f4      	b.n	8016888 <_dtoa_r+0x2e0>
 801689e:	2301      	movs	r3, #1
 80168a0:	9302      	str	r3, [sp, #8]
 80168a2:	4699      	mov	r9, r3
 80168a4:	461a      	mov	r2, r3
 80168a6:	e7f5      	b.n	8016894 <_dtoa_r+0x2ec>
 80168a8:	3101      	adds	r1, #1
 80168aa:	6071      	str	r1, [r6, #4]
 80168ac:	0052      	lsls	r2, r2, #1
 80168ae:	e7a2      	b.n	80167f6 <_dtoa_r+0x24e>
 80168b0:	636f4361 	.word	0x636f4361
 80168b4:	3fd287a7 	.word	0x3fd287a7
 80168b8:	8b60c8b3 	.word	0x8b60c8b3
 80168bc:	3fc68a28 	.word	0x3fc68a28
 80168c0:	509f79fb 	.word	0x509f79fb
 80168c4:	3fd34413 	.word	0x3fd34413
 80168c8:	7ff00000 	.word	0x7ff00000
 80168cc:	0801975c 	.word	0x0801975c
 80168d0:	3ff80000 	.word	0x3ff80000
 80168d4:	08019660 	.word	0x08019660
 80168d8:	08019638 	.word	0x08019638
 80168dc:	080195c1 	.word	0x080195c1
 80168e0:	07f1      	lsls	r1, r6, #31
 80168e2:	d508      	bpl.n	80168f6 <_dtoa_r+0x34e>
 80168e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168ec:	f7e9 fe9c 	bl	8000628 <__aeabi_dmul>
 80168f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80168f4:	3501      	adds	r5, #1
 80168f6:	1076      	asrs	r6, r6, #1
 80168f8:	3708      	adds	r7, #8
 80168fa:	2e00      	cmp	r6, #0
 80168fc:	d1f0      	bne.n	80168e0 <_dtoa_r+0x338>
 80168fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016906:	f7e9 ffb9 	bl	800087c <__aeabi_ddiv>
 801690a:	e9cd 0100 	strd	r0, r1, [sp]
 801690e:	e01a      	b.n	8016946 <_dtoa_r+0x39e>
 8016910:	2502      	movs	r5, #2
 8016912:	e7a3      	b.n	801685c <_dtoa_r+0x2b4>
 8016914:	f000 80a0 	beq.w	8016a58 <_dtoa_r+0x4b0>
 8016918:	f1ca 0600 	rsb	r6, sl, #0
 801691c:	4b9f      	ldr	r3, [pc, #636]	; (8016b9c <_dtoa_r+0x5f4>)
 801691e:	4fa0      	ldr	r7, [pc, #640]	; (8016ba0 <_dtoa_r+0x5f8>)
 8016920:	f006 020f 	and.w	r2, r6, #15
 8016924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016930:	f7e9 fe7a 	bl	8000628 <__aeabi_dmul>
 8016934:	e9cd 0100 	strd	r0, r1, [sp]
 8016938:	1136      	asrs	r6, r6, #4
 801693a:	2300      	movs	r3, #0
 801693c:	2502      	movs	r5, #2
 801693e:	2e00      	cmp	r6, #0
 8016940:	d17f      	bne.n	8016a42 <_dtoa_r+0x49a>
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1e1      	bne.n	801690a <_dtoa_r+0x362>
 8016946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016948:	2b00      	cmp	r3, #0
 801694a:	f000 8087 	beq.w	8016a5c <_dtoa_r+0x4b4>
 801694e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016952:	2200      	movs	r2, #0
 8016954:	4b93      	ldr	r3, [pc, #588]	; (8016ba4 <_dtoa_r+0x5fc>)
 8016956:	4630      	mov	r0, r6
 8016958:	4639      	mov	r1, r7
 801695a:	f7ea f8d7 	bl	8000b0c <__aeabi_dcmplt>
 801695e:	2800      	cmp	r0, #0
 8016960:	d07c      	beq.n	8016a5c <_dtoa_r+0x4b4>
 8016962:	f1b9 0f00 	cmp.w	r9, #0
 8016966:	d079      	beq.n	8016a5c <_dtoa_r+0x4b4>
 8016968:	9b02      	ldr	r3, [sp, #8]
 801696a:	2b00      	cmp	r3, #0
 801696c:	dd35      	ble.n	80169da <_dtoa_r+0x432>
 801696e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016972:	9308      	str	r3, [sp, #32]
 8016974:	4639      	mov	r1, r7
 8016976:	2200      	movs	r2, #0
 8016978:	4b8b      	ldr	r3, [pc, #556]	; (8016ba8 <_dtoa_r+0x600>)
 801697a:	4630      	mov	r0, r6
 801697c:	f7e9 fe54 	bl	8000628 <__aeabi_dmul>
 8016980:	e9cd 0100 	strd	r0, r1, [sp]
 8016984:	9f02      	ldr	r7, [sp, #8]
 8016986:	3501      	adds	r5, #1
 8016988:	4628      	mov	r0, r5
 801698a:	f7e9 fde3 	bl	8000554 <__aeabi_i2d>
 801698e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016992:	f7e9 fe49 	bl	8000628 <__aeabi_dmul>
 8016996:	2200      	movs	r2, #0
 8016998:	4b84      	ldr	r3, [pc, #528]	; (8016bac <_dtoa_r+0x604>)
 801699a:	f7e9 fc8f 	bl	80002bc <__adddf3>
 801699e:	4605      	mov	r5, r0
 80169a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80169a4:	2f00      	cmp	r7, #0
 80169a6:	d15d      	bne.n	8016a64 <_dtoa_r+0x4bc>
 80169a8:	2200      	movs	r2, #0
 80169aa:	4b81      	ldr	r3, [pc, #516]	; (8016bb0 <_dtoa_r+0x608>)
 80169ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169b0:	f7e9 fc82 	bl	80002b8 <__aeabi_dsub>
 80169b4:	462a      	mov	r2, r5
 80169b6:	4633      	mov	r3, r6
 80169b8:	e9cd 0100 	strd	r0, r1, [sp]
 80169bc:	f7ea f8c4 	bl	8000b48 <__aeabi_dcmpgt>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	f040 8288 	bne.w	8016ed6 <_dtoa_r+0x92e>
 80169c6:	462a      	mov	r2, r5
 80169c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80169cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169d0:	f7ea f89c 	bl	8000b0c <__aeabi_dcmplt>
 80169d4:	2800      	cmp	r0, #0
 80169d6:	f040 827c 	bne.w	8016ed2 <_dtoa_r+0x92a>
 80169da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80169de:	e9cd 2300 	strd	r2, r3, [sp]
 80169e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	f2c0 8150 	blt.w	8016c8a <_dtoa_r+0x6e2>
 80169ea:	f1ba 0f0e 	cmp.w	sl, #14
 80169ee:	f300 814c 	bgt.w	8016c8a <_dtoa_r+0x6e2>
 80169f2:	4b6a      	ldr	r3, [pc, #424]	; (8016b9c <_dtoa_r+0x5f4>)
 80169f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80169f8:	ed93 7b00 	vldr	d7, [r3]
 80169fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016a04:	f280 80d8 	bge.w	8016bb8 <_dtoa_r+0x610>
 8016a08:	f1b9 0f00 	cmp.w	r9, #0
 8016a0c:	f300 80d4 	bgt.w	8016bb8 <_dtoa_r+0x610>
 8016a10:	f040 825e 	bne.w	8016ed0 <_dtoa_r+0x928>
 8016a14:	2200      	movs	r2, #0
 8016a16:	4b66      	ldr	r3, [pc, #408]	; (8016bb0 <_dtoa_r+0x608>)
 8016a18:	ec51 0b17 	vmov	r0, r1, d7
 8016a1c:	f7e9 fe04 	bl	8000628 <__aeabi_dmul>
 8016a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a24:	f7ea f886 	bl	8000b34 <__aeabi_dcmpge>
 8016a28:	464f      	mov	r7, r9
 8016a2a:	464e      	mov	r6, r9
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	f040 8234 	bne.w	8016e9a <_dtoa_r+0x8f2>
 8016a32:	2331      	movs	r3, #49	; 0x31
 8016a34:	f10b 0501 	add.w	r5, fp, #1
 8016a38:	f88b 3000 	strb.w	r3, [fp]
 8016a3c:	f10a 0a01 	add.w	sl, sl, #1
 8016a40:	e22f      	b.n	8016ea2 <_dtoa_r+0x8fa>
 8016a42:	07f2      	lsls	r2, r6, #31
 8016a44:	d505      	bpl.n	8016a52 <_dtoa_r+0x4aa>
 8016a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a4a:	f7e9 fded 	bl	8000628 <__aeabi_dmul>
 8016a4e:	3501      	adds	r5, #1
 8016a50:	2301      	movs	r3, #1
 8016a52:	1076      	asrs	r6, r6, #1
 8016a54:	3708      	adds	r7, #8
 8016a56:	e772      	b.n	801693e <_dtoa_r+0x396>
 8016a58:	2502      	movs	r5, #2
 8016a5a:	e774      	b.n	8016946 <_dtoa_r+0x39e>
 8016a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8016a60:	464f      	mov	r7, r9
 8016a62:	e791      	b.n	8016988 <_dtoa_r+0x3e0>
 8016a64:	4b4d      	ldr	r3, [pc, #308]	; (8016b9c <_dtoa_r+0x5f4>)
 8016a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016a6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d047      	beq.n	8016b04 <_dtoa_r+0x55c>
 8016a74:	4602      	mov	r2, r0
 8016a76:	460b      	mov	r3, r1
 8016a78:	2000      	movs	r0, #0
 8016a7a:	494e      	ldr	r1, [pc, #312]	; (8016bb4 <_dtoa_r+0x60c>)
 8016a7c:	f7e9 fefe 	bl	800087c <__aeabi_ddiv>
 8016a80:	462a      	mov	r2, r5
 8016a82:	4633      	mov	r3, r6
 8016a84:	f7e9 fc18 	bl	80002b8 <__aeabi_dsub>
 8016a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a8c:	465d      	mov	r5, fp
 8016a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a92:	f7ea f879 	bl	8000b88 <__aeabi_d2iz>
 8016a96:	4606      	mov	r6, r0
 8016a98:	f7e9 fd5c 	bl	8000554 <__aeabi_i2d>
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aa4:	f7e9 fc08 	bl	80002b8 <__aeabi_dsub>
 8016aa8:	3630      	adds	r6, #48	; 0x30
 8016aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8016aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8016ab6:	f7ea f829 	bl	8000b0c <__aeabi_dcmplt>
 8016aba:	2800      	cmp	r0, #0
 8016abc:	d163      	bne.n	8016b86 <_dtoa_r+0x5de>
 8016abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ac2:	2000      	movs	r0, #0
 8016ac4:	4937      	ldr	r1, [pc, #220]	; (8016ba4 <_dtoa_r+0x5fc>)
 8016ac6:	f7e9 fbf7 	bl	80002b8 <__aeabi_dsub>
 8016aca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ace:	f7ea f81d 	bl	8000b0c <__aeabi_dcmplt>
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	f040 80b7 	bne.w	8016c46 <_dtoa_r+0x69e>
 8016ad8:	eba5 030b 	sub.w	r3, r5, fp
 8016adc:	429f      	cmp	r7, r3
 8016ade:	f77f af7c 	ble.w	80169da <_dtoa_r+0x432>
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	4b30      	ldr	r3, [pc, #192]	; (8016ba8 <_dtoa_r+0x600>)
 8016ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016aea:	f7e9 fd9d 	bl	8000628 <__aeabi_dmul>
 8016aee:	2200      	movs	r2, #0
 8016af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016af4:	4b2c      	ldr	r3, [pc, #176]	; (8016ba8 <_dtoa_r+0x600>)
 8016af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016afa:	f7e9 fd95 	bl	8000628 <__aeabi_dmul>
 8016afe:	e9cd 0100 	strd	r0, r1, [sp]
 8016b02:	e7c4      	b.n	8016a8e <_dtoa_r+0x4e6>
 8016b04:	462a      	mov	r2, r5
 8016b06:	4633      	mov	r3, r6
 8016b08:	f7e9 fd8e 	bl	8000628 <__aeabi_dmul>
 8016b0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b10:	eb0b 0507 	add.w	r5, fp, r7
 8016b14:	465e      	mov	r6, fp
 8016b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b1a:	f7ea f835 	bl	8000b88 <__aeabi_d2iz>
 8016b1e:	4607      	mov	r7, r0
 8016b20:	f7e9 fd18 	bl	8000554 <__aeabi_i2d>
 8016b24:	3730      	adds	r7, #48	; 0x30
 8016b26:	4602      	mov	r2, r0
 8016b28:	460b      	mov	r3, r1
 8016b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b2e:	f7e9 fbc3 	bl	80002b8 <__aeabi_dsub>
 8016b32:	f806 7b01 	strb.w	r7, [r6], #1
 8016b36:	42ae      	cmp	r6, r5
 8016b38:	e9cd 0100 	strd	r0, r1, [sp]
 8016b3c:	f04f 0200 	mov.w	r2, #0
 8016b40:	d126      	bne.n	8016b90 <_dtoa_r+0x5e8>
 8016b42:	4b1c      	ldr	r3, [pc, #112]	; (8016bb4 <_dtoa_r+0x60c>)
 8016b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b48:	f7e9 fbb8 	bl	80002bc <__adddf3>
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	460b      	mov	r3, r1
 8016b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b54:	f7e9 fff8 	bl	8000b48 <__aeabi_dcmpgt>
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d174      	bne.n	8016c46 <_dtoa_r+0x69e>
 8016b5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b60:	2000      	movs	r0, #0
 8016b62:	4914      	ldr	r1, [pc, #80]	; (8016bb4 <_dtoa_r+0x60c>)
 8016b64:	f7e9 fba8 	bl	80002b8 <__aeabi_dsub>
 8016b68:	4602      	mov	r2, r0
 8016b6a:	460b      	mov	r3, r1
 8016b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b70:	f7e9 ffcc 	bl	8000b0c <__aeabi_dcmplt>
 8016b74:	2800      	cmp	r0, #0
 8016b76:	f43f af30 	beq.w	80169da <_dtoa_r+0x432>
 8016b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b7e:	2b30      	cmp	r3, #48	; 0x30
 8016b80:	f105 32ff 	add.w	r2, r5, #4294967295
 8016b84:	d002      	beq.n	8016b8c <_dtoa_r+0x5e4>
 8016b86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016b8a:	e04a      	b.n	8016c22 <_dtoa_r+0x67a>
 8016b8c:	4615      	mov	r5, r2
 8016b8e:	e7f4      	b.n	8016b7a <_dtoa_r+0x5d2>
 8016b90:	4b05      	ldr	r3, [pc, #20]	; (8016ba8 <_dtoa_r+0x600>)
 8016b92:	f7e9 fd49 	bl	8000628 <__aeabi_dmul>
 8016b96:	e9cd 0100 	strd	r0, r1, [sp]
 8016b9a:	e7bc      	b.n	8016b16 <_dtoa_r+0x56e>
 8016b9c:	08019660 	.word	0x08019660
 8016ba0:	08019638 	.word	0x08019638
 8016ba4:	3ff00000 	.word	0x3ff00000
 8016ba8:	40240000 	.word	0x40240000
 8016bac:	401c0000 	.word	0x401c0000
 8016bb0:	40140000 	.word	0x40140000
 8016bb4:	3fe00000 	.word	0x3fe00000
 8016bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016bbc:	465d      	mov	r5, fp
 8016bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	4639      	mov	r1, r7
 8016bc6:	f7e9 fe59 	bl	800087c <__aeabi_ddiv>
 8016bca:	f7e9 ffdd 	bl	8000b88 <__aeabi_d2iz>
 8016bce:	4680      	mov	r8, r0
 8016bd0:	f7e9 fcc0 	bl	8000554 <__aeabi_i2d>
 8016bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bd8:	f7e9 fd26 	bl	8000628 <__aeabi_dmul>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	460b      	mov	r3, r1
 8016be0:	4630      	mov	r0, r6
 8016be2:	4639      	mov	r1, r7
 8016be4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016be8:	f7e9 fb66 	bl	80002b8 <__aeabi_dsub>
 8016bec:	f805 6b01 	strb.w	r6, [r5], #1
 8016bf0:	eba5 060b 	sub.w	r6, r5, fp
 8016bf4:	45b1      	cmp	r9, r6
 8016bf6:	4602      	mov	r2, r0
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	d139      	bne.n	8016c70 <_dtoa_r+0x6c8>
 8016bfc:	f7e9 fb5e 	bl	80002bc <__adddf3>
 8016c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c04:	4606      	mov	r6, r0
 8016c06:	460f      	mov	r7, r1
 8016c08:	f7e9 ff9e 	bl	8000b48 <__aeabi_dcmpgt>
 8016c0c:	b9c8      	cbnz	r0, 8016c42 <_dtoa_r+0x69a>
 8016c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c12:	4630      	mov	r0, r6
 8016c14:	4639      	mov	r1, r7
 8016c16:	f7e9 ff6f 	bl	8000af8 <__aeabi_dcmpeq>
 8016c1a:	b110      	cbz	r0, 8016c22 <_dtoa_r+0x67a>
 8016c1c:	f018 0f01 	tst.w	r8, #1
 8016c20:	d10f      	bne.n	8016c42 <_dtoa_r+0x69a>
 8016c22:	9904      	ldr	r1, [sp, #16]
 8016c24:	4620      	mov	r0, r4
 8016c26:	f000 fe0d 	bl	8017844 <_Bfree>
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c2e:	702b      	strb	r3, [r5, #0]
 8016c30:	f10a 0301 	add.w	r3, sl, #1
 8016c34:	6013      	str	r3, [r2, #0]
 8016c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	f000 8241 	beq.w	80170c0 <_dtoa_r+0xb18>
 8016c3e:	601d      	str	r5, [r3, #0]
 8016c40:	e23e      	b.n	80170c0 <_dtoa_r+0xb18>
 8016c42:	f8cd a020 	str.w	sl, [sp, #32]
 8016c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016c4a:	2a39      	cmp	r2, #57	; 0x39
 8016c4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016c50:	d108      	bne.n	8016c64 <_dtoa_r+0x6bc>
 8016c52:	459b      	cmp	fp, r3
 8016c54:	d10a      	bne.n	8016c6c <_dtoa_r+0x6c4>
 8016c56:	9b08      	ldr	r3, [sp, #32]
 8016c58:	3301      	adds	r3, #1
 8016c5a:	9308      	str	r3, [sp, #32]
 8016c5c:	2330      	movs	r3, #48	; 0x30
 8016c5e:	f88b 3000 	strb.w	r3, [fp]
 8016c62:	465b      	mov	r3, fp
 8016c64:	781a      	ldrb	r2, [r3, #0]
 8016c66:	3201      	adds	r2, #1
 8016c68:	701a      	strb	r2, [r3, #0]
 8016c6a:	e78c      	b.n	8016b86 <_dtoa_r+0x5de>
 8016c6c:	461d      	mov	r5, r3
 8016c6e:	e7ea      	b.n	8016c46 <_dtoa_r+0x69e>
 8016c70:	2200      	movs	r2, #0
 8016c72:	4b9b      	ldr	r3, [pc, #620]	; (8016ee0 <_dtoa_r+0x938>)
 8016c74:	f7e9 fcd8 	bl	8000628 <__aeabi_dmul>
 8016c78:	2200      	movs	r2, #0
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	460f      	mov	r7, r1
 8016c80:	f7e9 ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d09a      	beq.n	8016bbe <_dtoa_r+0x616>
 8016c88:	e7cb      	b.n	8016c22 <_dtoa_r+0x67a>
 8016c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c8c:	2a00      	cmp	r2, #0
 8016c8e:	f000 808b 	beq.w	8016da8 <_dtoa_r+0x800>
 8016c92:	9a06      	ldr	r2, [sp, #24]
 8016c94:	2a01      	cmp	r2, #1
 8016c96:	dc6e      	bgt.n	8016d76 <_dtoa_r+0x7ce>
 8016c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c9a:	2a00      	cmp	r2, #0
 8016c9c:	d067      	beq.n	8016d6e <_dtoa_r+0x7c6>
 8016c9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016ca2:	9f07      	ldr	r7, [sp, #28]
 8016ca4:	9d05      	ldr	r5, [sp, #20]
 8016ca6:	9a05      	ldr	r2, [sp, #20]
 8016ca8:	2101      	movs	r1, #1
 8016caa:	441a      	add	r2, r3
 8016cac:	4620      	mov	r0, r4
 8016cae:	9205      	str	r2, [sp, #20]
 8016cb0:	4498      	add	r8, r3
 8016cb2:	f000 fea5 	bl	8017a00 <__i2b>
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	2d00      	cmp	r5, #0
 8016cba:	dd0c      	ble.n	8016cd6 <_dtoa_r+0x72e>
 8016cbc:	f1b8 0f00 	cmp.w	r8, #0
 8016cc0:	dd09      	ble.n	8016cd6 <_dtoa_r+0x72e>
 8016cc2:	4545      	cmp	r5, r8
 8016cc4:	9a05      	ldr	r2, [sp, #20]
 8016cc6:	462b      	mov	r3, r5
 8016cc8:	bfa8      	it	ge
 8016cca:	4643      	movge	r3, r8
 8016ccc:	1ad2      	subs	r2, r2, r3
 8016cce:	9205      	str	r2, [sp, #20]
 8016cd0:	1aed      	subs	r5, r5, r3
 8016cd2:	eba8 0803 	sub.w	r8, r8, r3
 8016cd6:	9b07      	ldr	r3, [sp, #28]
 8016cd8:	b1eb      	cbz	r3, 8016d16 <_dtoa_r+0x76e>
 8016cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d067      	beq.n	8016db0 <_dtoa_r+0x808>
 8016ce0:	b18f      	cbz	r7, 8016d06 <_dtoa_r+0x75e>
 8016ce2:	4631      	mov	r1, r6
 8016ce4:	463a      	mov	r2, r7
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f000 ff2a 	bl	8017b40 <__pow5mult>
 8016cec:	9a04      	ldr	r2, [sp, #16]
 8016cee:	4601      	mov	r1, r0
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	f000 fe8d 	bl	8017a12 <__multiply>
 8016cf8:	9904      	ldr	r1, [sp, #16]
 8016cfa:	9008      	str	r0, [sp, #32]
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 fda1 	bl	8017844 <_Bfree>
 8016d02:	9b08      	ldr	r3, [sp, #32]
 8016d04:	9304      	str	r3, [sp, #16]
 8016d06:	9b07      	ldr	r3, [sp, #28]
 8016d08:	1bda      	subs	r2, r3, r7
 8016d0a:	d004      	beq.n	8016d16 <_dtoa_r+0x76e>
 8016d0c:	9904      	ldr	r1, [sp, #16]
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f000 ff16 	bl	8017b40 <__pow5mult>
 8016d14:	9004      	str	r0, [sp, #16]
 8016d16:	2101      	movs	r1, #1
 8016d18:	4620      	mov	r0, r4
 8016d1a:	f000 fe71 	bl	8017a00 <__i2b>
 8016d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d20:	4607      	mov	r7, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	f000 81d0 	beq.w	80170c8 <_dtoa_r+0xb20>
 8016d28:	461a      	mov	r2, r3
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	f000 ff07 	bl	8017b40 <__pow5mult>
 8016d32:	9b06      	ldr	r3, [sp, #24]
 8016d34:	2b01      	cmp	r3, #1
 8016d36:	4607      	mov	r7, r0
 8016d38:	dc40      	bgt.n	8016dbc <_dtoa_r+0x814>
 8016d3a:	9b00      	ldr	r3, [sp, #0]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d139      	bne.n	8016db4 <_dtoa_r+0x80c>
 8016d40:	9b01      	ldr	r3, [sp, #4]
 8016d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d136      	bne.n	8016db8 <_dtoa_r+0x810>
 8016d4a:	9b01      	ldr	r3, [sp, #4]
 8016d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016d50:	0d1b      	lsrs	r3, r3, #20
 8016d52:	051b      	lsls	r3, r3, #20
 8016d54:	b12b      	cbz	r3, 8016d62 <_dtoa_r+0x7ba>
 8016d56:	9b05      	ldr	r3, [sp, #20]
 8016d58:	3301      	adds	r3, #1
 8016d5a:	9305      	str	r3, [sp, #20]
 8016d5c:	f108 0801 	add.w	r8, r8, #1
 8016d60:	2301      	movs	r3, #1
 8016d62:	9307      	str	r3, [sp, #28]
 8016d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d12a      	bne.n	8016dc0 <_dtoa_r+0x818>
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	e030      	b.n	8016dd0 <_dtoa_r+0x828>
 8016d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d74:	e795      	b.n	8016ca2 <_dtoa_r+0x6fa>
 8016d76:	9b07      	ldr	r3, [sp, #28]
 8016d78:	f109 37ff 	add.w	r7, r9, #4294967295
 8016d7c:	42bb      	cmp	r3, r7
 8016d7e:	bfbf      	itttt	lt
 8016d80:	9b07      	ldrlt	r3, [sp, #28]
 8016d82:	9707      	strlt	r7, [sp, #28]
 8016d84:	1afa      	sublt	r2, r7, r3
 8016d86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016d88:	bfbb      	ittet	lt
 8016d8a:	189b      	addlt	r3, r3, r2
 8016d8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016d8e:	1bdf      	subge	r7, r3, r7
 8016d90:	2700      	movlt	r7, #0
 8016d92:	f1b9 0f00 	cmp.w	r9, #0
 8016d96:	bfb5      	itete	lt
 8016d98:	9b05      	ldrlt	r3, [sp, #20]
 8016d9a:	9d05      	ldrge	r5, [sp, #20]
 8016d9c:	eba3 0509 	sublt.w	r5, r3, r9
 8016da0:	464b      	movge	r3, r9
 8016da2:	bfb8      	it	lt
 8016da4:	2300      	movlt	r3, #0
 8016da6:	e77e      	b.n	8016ca6 <_dtoa_r+0x6fe>
 8016da8:	9f07      	ldr	r7, [sp, #28]
 8016daa:	9d05      	ldr	r5, [sp, #20]
 8016dac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016dae:	e783      	b.n	8016cb8 <_dtoa_r+0x710>
 8016db0:	9a07      	ldr	r2, [sp, #28]
 8016db2:	e7ab      	b.n	8016d0c <_dtoa_r+0x764>
 8016db4:	2300      	movs	r3, #0
 8016db6:	e7d4      	b.n	8016d62 <_dtoa_r+0x7ba>
 8016db8:	9b00      	ldr	r3, [sp, #0]
 8016dba:	e7d2      	b.n	8016d62 <_dtoa_r+0x7ba>
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	9307      	str	r3, [sp, #28]
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016dc6:	6918      	ldr	r0, [r3, #16]
 8016dc8:	f000 fdcc 	bl	8017964 <__hi0bits>
 8016dcc:	f1c0 0020 	rsb	r0, r0, #32
 8016dd0:	4440      	add	r0, r8
 8016dd2:	f010 001f 	ands.w	r0, r0, #31
 8016dd6:	d047      	beq.n	8016e68 <_dtoa_r+0x8c0>
 8016dd8:	f1c0 0320 	rsb	r3, r0, #32
 8016ddc:	2b04      	cmp	r3, #4
 8016dde:	dd3b      	ble.n	8016e58 <_dtoa_r+0x8b0>
 8016de0:	9b05      	ldr	r3, [sp, #20]
 8016de2:	f1c0 001c 	rsb	r0, r0, #28
 8016de6:	4403      	add	r3, r0
 8016de8:	9305      	str	r3, [sp, #20]
 8016dea:	4405      	add	r5, r0
 8016dec:	4480      	add	r8, r0
 8016dee:	9b05      	ldr	r3, [sp, #20]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	dd05      	ble.n	8016e00 <_dtoa_r+0x858>
 8016df4:	461a      	mov	r2, r3
 8016df6:	9904      	ldr	r1, [sp, #16]
 8016df8:	4620      	mov	r0, r4
 8016dfa:	f000 feef 	bl	8017bdc <__lshift>
 8016dfe:	9004      	str	r0, [sp, #16]
 8016e00:	f1b8 0f00 	cmp.w	r8, #0
 8016e04:	dd05      	ble.n	8016e12 <_dtoa_r+0x86a>
 8016e06:	4639      	mov	r1, r7
 8016e08:	4642      	mov	r2, r8
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f000 fee6 	bl	8017bdc <__lshift>
 8016e10:	4607      	mov	r7, r0
 8016e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e14:	b353      	cbz	r3, 8016e6c <_dtoa_r+0x8c4>
 8016e16:	4639      	mov	r1, r7
 8016e18:	9804      	ldr	r0, [sp, #16]
 8016e1a:	f000 ff33 	bl	8017c84 <__mcmp>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	da24      	bge.n	8016e6c <_dtoa_r+0x8c4>
 8016e22:	2300      	movs	r3, #0
 8016e24:	220a      	movs	r2, #10
 8016e26:	9904      	ldr	r1, [sp, #16]
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f000 fd22 	bl	8017872 <__multadd>
 8016e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e30:	9004      	str	r0, [sp, #16]
 8016e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	f000 814d 	beq.w	80170d6 <_dtoa_r+0xb2e>
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	4631      	mov	r1, r6
 8016e40:	220a      	movs	r2, #10
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 fd15 	bl	8017872 <__multadd>
 8016e48:	9b02      	ldr	r3, [sp, #8]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	4606      	mov	r6, r0
 8016e4e:	dc4f      	bgt.n	8016ef0 <_dtoa_r+0x948>
 8016e50:	9b06      	ldr	r3, [sp, #24]
 8016e52:	2b02      	cmp	r3, #2
 8016e54:	dd4c      	ble.n	8016ef0 <_dtoa_r+0x948>
 8016e56:	e011      	b.n	8016e7c <_dtoa_r+0x8d4>
 8016e58:	d0c9      	beq.n	8016dee <_dtoa_r+0x846>
 8016e5a:	9a05      	ldr	r2, [sp, #20]
 8016e5c:	331c      	adds	r3, #28
 8016e5e:	441a      	add	r2, r3
 8016e60:	9205      	str	r2, [sp, #20]
 8016e62:	441d      	add	r5, r3
 8016e64:	4498      	add	r8, r3
 8016e66:	e7c2      	b.n	8016dee <_dtoa_r+0x846>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	e7f6      	b.n	8016e5a <_dtoa_r+0x8b2>
 8016e6c:	f1b9 0f00 	cmp.w	r9, #0
 8016e70:	dc38      	bgt.n	8016ee4 <_dtoa_r+0x93c>
 8016e72:	9b06      	ldr	r3, [sp, #24]
 8016e74:	2b02      	cmp	r3, #2
 8016e76:	dd35      	ble.n	8016ee4 <_dtoa_r+0x93c>
 8016e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e7c:	9b02      	ldr	r3, [sp, #8]
 8016e7e:	b963      	cbnz	r3, 8016e9a <_dtoa_r+0x8f2>
 8016e80:	4639      	mov	r1, r7
 8016e82:	2205      	movs	r2, #5
 8016e84:	4620      	mov	r0, r4
 8016e86:	f000 fcf4 	bl	8017872 <__multadd>
 8016e8a:	4601      	mov	r1, r0
 8016e8c:	4607      	mov	r7, r0
 8016e8e:	9804      	ldr	r0, [sp, #16]
 8016e90:	f000 fef8 	bl	8017c84 <__mcmp>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	f73f adcc 	bgt.w	8016a32 <_dtoa_r+0x48a>
 8016e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e9c:	465d      	mov	r5, fp
 8016e9e:	ea6f 0a03 	mvn.w	sl, r3
 8016ea2:	f04f 0900 	mov.w	r9, #0
 8016ea6:	4639      	mov	r1, r7
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f000 fccb 	bl	8017844 <_Bfree>
 8016eae:	2e00      	cmp	r6, #0
 8016eb0:	f43f aeb7 	beq.w	8016c22 <_dtoa_r+0x67a>
 8016eb4:	f1b9 0f00 	cmp.w	r9, #0
 8016eb8:	d005      	beq.n	8016ec6 <_dtoa_r+0x91e>
 8016eba:	45b1      	cmp	r9, r6
 8016ebc:	d003      	beq.n	8016ec6 <_dtoa_r+0x91e>
 8016ebe:	4649      	mov	r1, r9
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	f000 fcbf 	bl	8017844 <_Bfree>
 8016ec6:	4631      	mov	r1, r6
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f000 fcbb 	bl	8017844 <_Bfree>
 8016ece:	e6a8      	b.n	8016c22 <_dtoa_r+0x67a>
 8016ed0:	2700      	movs	r7, #0
 8016ed2:	463e      	mov	r6, r7
 8016ed4:	e7e1      	b.n	8016e9a <_dtoa_r+0x8f2>
 8016ed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016eda:	463e      	mov	r6, r7
 8016edc:	e5a9      	b.n	8016a32 <_dtoa_r+0x48a>
 8016ede:	bf00      	nop
 8016ee0:	40240000 	.word	0x40240000
 8016ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ee6:	f8cd 9008 	str.w	r9, [sp, #8]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f000 80fa 	beq.w	80170e4 <_dtoa_r+0xb3c>
 8016ef0:	2d00      	cmp	r5, #0
 8016ef2:	dd05      	ble.n	8016f00 <_dtoa_r+0x958>
 8016ef4:	4631      	mov	r1, r6
 8016ef6:	462a      	mov	r2, r5
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f000 fe6f 	bl	8017bdc <__lshift>
 8016efe:	4606      	mov	r6, r0
 8016f00:	9b07      	ldr	r3, [sp, #28]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d04c      	beq.n	8016fa0 <_dtoa_r+0x9f8>
 8016f06:	6871      	ldr	r1, [r6, #4]
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f000 fc67 	bl	80177dc <_Balloc>
 8016f0e:	6932      	ldr	r2, [r6, #16]
 8016f10:	3202      	adds	r2, #2
 8016f12:	4605      	mov	r5, r0
 8016f14:	0092      	lsls	r2, r2, #2
 8016f16:	f106 010c 	add.w	r1, r6, #12
 8016f1a:	300c      	adds	r0, #12
 8016f1c:	f7fd fd08 	bl	8014930 <memcpy>
 8016f20:	2201      	movs	r2, #1
 8016f22:	4629      	mov	r1, r5
 8016f24:	4620      	mov	r0, r4
 8016f26:	f000 fe59 	bl	8017bdc <__lshift>
 8016f2a:	9b00      	ldr	r3, [sp, #0]
 8016f2c:	f8cd b014 	str.w	fp, [sp, #20]
 8016f30:	f003 0301 	and.w	r3, r3, #1
 8016f34:	46b1      	mov	r9, r6
 8016f36:	9307      	str	r3, [sp, #28]
 8016f38:	4606      	mov	r6, r0
 8016f3a:	4639      	mov	r1, r7
 8016f3c:	9804      	ldr	r0, [sp, #16]
 8016f3e:	f7ff faa5 	bl	801648c <quorem>
 8016f42:	4649      	mov	r1, r9
 8016f44:	4605      	mov	r5, r0
 8016f46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f4a:	9804      	ldr	r0, [sp, #16]
 8016f4c:	f000 fe9a 	bl	8017c84 <__mcmp>
 8016f50:	4632      	mov	r2, r6
 8016f52:	9000      	str	r0, [sp, #0]
 8016f54:	4639      	mov	r1, r7
 8016f56:	4620      	mov	r0, r4
 8016f58:	f000 feae 	bl	8017cb8 <__mdiff>
 8016f5c:	68c3      	ldr	r3, [r0, #12]
 8016f5e:	4602      	mov	r2, r0
 8016f60:	bb03      	cbnz	r3, 8016fa4 <_dtoa_r+0x9fc>
 8016f62:	4601      	mov	r1, r0
 8016f64:	9008      	str	r0, [sp, #32]
 8016f66:	9804      	ldr	r0, [sp, #16]
 8016f68:	f000 fe8c 	bl	8017c84 <__mcmp>
 8016f6c:	9a08      	ldr	r2, [sp, #32]
 8016f6e:	4603      	mov	r3, r0
 8016f70:	4611      	mov	r1, r2
 8016f72:	4620      	mov	r0, r4
 8016f74:	9308      	str	r3, [sp, #32]
 8016f76:	f000 fc65 	bl	8017844 <_Bfree>
 8016f7a:	9b08      	ldr	r3, [sp, #32]
 8016f7c:	b9a3      	cbnz	r3, 8016fa8 <_dtoa_r+0xa00>
 8016f7e:	9a06      	ldr	r2, [sp, #24]
 8016f80:	b992      	cbnz	r2, 8016fa8 <_dtoa_r+0xa00>
 8016f82:	9a07      	ldr	r2, [sp, #28]
 8016f84:	b982      	cbnz	r2, 8016fa8 <_dtoa_r+0xa00>
 8016f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f8a:	d029      	beq.n	8016fe0 <_dtoa_r+0xa38>
 8016f8c:	9b00      	ldr	r3, [sp, #0]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	dd01      	ble.n	8016f96 <_dtoa_r+0x9ee>
 8016f92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016f96:	9b05      	ldr	r3, [sp, #20]
 8016f98:	1c5d      	adds	r5, r3, #1
 8016f9a:	f883 8000 	strb.w	r8, [r3]
 8016f9e:	e782      	b.n	8016ea6 <_dtoa_r+0x8fe>
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	e7c2      	b.n	8016f2a <_dtoa_r+0x982>
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	e7e3      	b.n	8016f70 <_dtoa_r+0x9c8>
 8016fa8:	9a00      	ldr	r2, [sp, #0]
 8016faa:	2a00      	cmp	r2, #0
 8016fac:	db04      	blt.n	8016fb8 <_dtoa_r+0xa10>
 8016fae:	d125      	bne.n	8016ffc <_dtoa_r+0xa54>
 8016fb0:	9a06      	ldr	r2, [sp, #24]
 8016fb2:	bb1a      	cbnz	r2, 8016ffc <_dtoa_r+0xa54>
 8016fb4:	9a07      	ldr	r2, [sp, #28]
 8016fb6:	bb0a      	cbnz	r2, 8016ffc <_dtoa_r+0xa54>
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	ddec      	ble.n	8016f96 <_dtoa_r+0x9ee>
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	9904      	ldr	r1, [sp, #16]
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f000 fe0b 	bl	8017bdc <__lshift>
 8016fc6:	4639      	mov	r1, r7
 8016fc8:	9004      	str	r0, [sp, #16]
 8016fca:	f000 fe5b 	bl	8017c84 <__mcmp>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	dc03      	bgt.n	8016fda <_dtoa_r+0xa32>
 8016fd2:	d1e0      	bne.n	8016f96 <_dtoa_r+0x9ee>
 8016fd4:	f018 0f01 	tst.w	r8, #1
 8016fd8:	d0dd      	beq.n	8016f96 <_dtoa_r+0x9ee>
 8016fda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016fde:	d1d8      	bne.n	8016f92 <_dtoa_r+0x9ea>
 8016fe0:	9b05      	ldr	r3, [sp, #20]
 8016fe2:	9a05      	ldr	r2, [sp, #20]
 8016fe4:	1c5d      	adds	r5, r3, #1
 8016fe6:	2339      	movs	r3, #57	; 0x39
 8016fe8:	7013      	strb	r3, [r2, #0]
 8016fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016fee:	2b39      	cmp	r3, #57	; 0x39
 8016ff0:	f105 32ff 	add.w	r2, r5, #4294967295
 8016ff4:	d04f      	beq.n	8017096 <_dtoa_r+0xaee>
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	7013      	strb	r3, [r2, #0]
 8016ffa:	e754      	b.n	8016ea6 <_dtoa_r+0x8fe>
 8016ffc:	9a05      	ldr	r2, [sp, #20]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f102 0501 	add.w	r5, r2, #1
 8017004:	dd06      	ble.n	8017014 <_dtoa_r+0xa6c>
 8017006:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801700a:	d0e9      	beq.n	8016fe0 <_dtoa_r+0xa38>
 801700c:	f108 0801 	add.w	r8, r8, #1
 8017010:	9b05      	ldr	r3, [sp, #20]
 8017012:	e7c2      	b.n	8016f9a <_dtoa_r+0x9f2>
 8017014:	9a02      	ldr	r2, [sp, #8]
 8017016:	f805 8c01 	strb.w	r8, [r5, #-1]
 801701a:	eba5 030b 	sub.w	r3, r5, fp
 801701e:	4293      	cmp	r3, r2
 8017020:	d021      	beq.n	8017066 <_dtoa_r+0xabe>
 8017022:	2300      	movs	r3, #0
 8017024:	220a      	movs	r2, #10
 8017026:	9904      	ldr	r1, [sp, #16]
 8017028:	4620      	mov	r0, r4
 801702a:	f000 fc22 	bl	8017872 <__multadd>
 801702e:	45b1      	cmp	r9, r6
 8017030:	9004      	str	r0, [sp, #16]
 8017032:	f04f 0300 	mov.w	r3, #0
 8017036:	f04f 020a 	mov.w	r2, #10
 801703a:	4649      	mov	r1, r9
 801703c:	4620      	mov	r0, r4
 801703e:	d105      	bne.n	801704c <_dtoa_r+0xaa4>
 8017040:	f000 fc17 	bl	8017872 <__multadd>
 8017044:	4681      	mov	r9, r0
 8017046:	4606      	mov	r6, r0
 8017048:	9505      	str	r5, [sp, #20]
 801704a:	e776      	b.n	8016f3a <_dtoa_r+0x992>
 801704c:	f000 fc11 	bl	8017872 <__multadd>
 8017050:	4631      	mov	r1, r6
 8017052:	4681      	mov	r9, r0
 8017054:	2300      	movs	r3, #0
 8017056:	220a      	movs	r2, #10
 8017058:	4620      	mov	r0, r4
 801705a:	f000 fc0a 	bl	8017872 <__multadd>
 801705e:	4606      	mov	r6, r0
 8017060:	e7f2      	b.n	8017048 <_dtoa_r+0xaa0>
 8017062:	f04f 0900 	mov.w	r9, #0
 8017066:	2201      	movs	r2, #1
 8017068:	9904      	ldr	r1, [sp, #16]
 801706a:	4620      	mov	r0, r4
 801706c:	f000 fdb6 	bl	8017bdc <__lshift>
 8017070:	4639      	mov	r1, r7
 8017072:	9004      	str	r0, [sp, #16]
 8017074:	f000 fe06 	bl	8017c84 <__mcmp>
 8017078:	2800      	cmp	r0, #0
 801707a:	dcb6      	bgt.n	8016fea <_dtoa_r+0xa42>
 801707c:	d102      	bne.n	8017084 <_dtoa_r+0xadc>
 801707e:	f018 0f01 	tst.w	r8, #1
 8017082:	d1b2      	bne.n	8016fea <_dtoa_r+0xa42>
 8017084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017088:	2b30      	cmp	r3, #48	; 0x30
 801708a:	f105 32ff 	add.w	r2, r5, #4294967295
 801708e:	f47f af0a 	bne.w	8016ea6 <_dtoa_r+0x8fe>
 8017092:	4615      	mov	r5, r2
 8017094:	e7f6      	b.n	8017084 <_dtoa_r+0xadc>
 8017096:	4593      	cmp	fp, r2
 8017098:	d105      	bne.n	80170a6 <_dtoa_r+0xafe>
 801709a:	2331      	movs	r3, #49	; 0x31
 801709c:	f10a 0a01 	add.w	sl, sl, #1
 80170a0:	f88b 3000 	strb.w	r3, [fp]
 80170a4:	e6ff      	b.n	8016ea6 <_dtoa_r+0x8fe>
 80170a6:	4615      	mov	r5, r2
 80170a8:	e79f      	b.n	8016fea <_dtoa_r+0xa42>
 80170aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017110 <_dtoa_r+0xb68>
 80170ae:	e007      	b.n	80170c0 <_dtoa_r+0xb18>
 80170b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017114 <_dtoa_r+0xb6c>
 80170b6:	b11b      	cbz	r3, 80170c0 <_dtoa_r+0xb18>
 80170b8:	f10b 0308 	add.w	r3, fp, #8
 80170bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170be:	6013      	str	r3, [r2, #0]
 80170c0:	4658      	mov	r0, fp
 80170c2:	b017      	add	sp, #92	; 0x5c
 80170c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c8:	9b06      	ldr	r3, [sp, #24]
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	f77f ae35 	ble.w	8016d3a <_dtoa_r+0x792>
 80170d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170d2:	9307      	str	r3, [sp, #28]
 80170d4:	e649      	b.n	8016d6a <_dtoa_r+0x7c2>
 80170d6:	9b02      	ldr	r3, [sp, #8]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	dc03      	bgt.n	80170e4 <_dtoa_r+0xb3c>
 80170dc:	9b06      	ldr	r3, [sp, #24]
 80170de:	2b02      	cmp	r3, #2
 80170e0:	f73f aecc 	bgt.w	8016e7c <_dtoa_r+0x8d4>
 80170e4:	465d      	mov	r5, fp
 80170e6:	4639      	mov	r1, r7
 80170e8:	9804      	ldr	r0, [sp, #16]
 80170ea:	f7ff f9cf 	bl	801648c <quorem>
 80170ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80170f2:	f805 8b01 	strb.w	r8, [r5], #1
 80170f6:	9a02      	ldr	r2, [sp, #8]
 80170f8:	eba5 030b 	sub.w	r3, r5, fp
 80170fc:	429a      	cmp	r2, r3
 80170fe:	ddb0      	ble.n	8017062 <_dtoa_r+0xaba>
 8017100:	2300      	movs	r3, #0
 8017102:	220a      	movs	r2, #10
 8017104:	9904      	ldr	r1, [sp, #16]
 8017106:	4620      	mov	r0, r4
 8017108:	f000 fbb3 	bl	8017872 <__multadd>
 801710c:	9004      	str	r0, [sp, #16]
 801710e:	e7ea      	b.n	80170e6 <_dtoa_r+0xb3e>
 8017110:	0801975b 	.word	0x0801975b
 8017114:	080195b8 	.word	0x080195b8

08017118 <rshift>:
 8017118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801711a:	6906      	ldr	r6, [r0, #16]
 801711c:	114b      	asrs	r3, r1, #5
 801711e:	429e      	cmp	r6, r3
 8017120:	f100 0414 	add.w	r4, r0, #20
 8017124:	dd30      	ble.n	8017188 <rshift+0x70>
 8017126:	f011 011f 	ands.w	r1, r1, #31
 801712a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801712e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017132:	d108      	bne.n	8017146 <rshift+0x2e>
 8017134:	4621      	mov	r1, r4
 8017136:	42b2      	cmp	r2, r6
 8017138:	460b      	mov	r3, r1
 801713a:	d211      	bcs.n	8017160 <rshift+0x48>
 801713c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017140:	f841 3b04 	str.w	r3, [r1], #4
 8017144:	e7f7      	b.n	8017136 <rshift+0x1e>
 8017146:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801714a:	f1c1 0c20 	rsb	ip, r1, #32
 801714e:	40cd      	lsrs	r5, r1
 8017150:	3204      	adds	r2, #4
 8017152:	4623      	mov	r3, r4
 8017154:	42b2      	cmp	r2, r6
 8017156:	4617      	mov	r7, r2
 8017158:	d30c      	bcc.n	8017174 <rshift+0x5c>
 801715a:	601d      	str	r5, [r3, #0]
 801715c:	b105      	cbz	r5, 8017160 <rshift+0x48>
 801715e:	3304      	adds	r3, #4
 8017160:	1b1a      	subs	r2, r3, r4
 8017162:	42a3      	cmp	r3, r4
 8017164:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017168:	bf08      	it	eq
 801716a:	2300      	moveq	r3, #0
 801716c:	6102      	str	r2, [r0, #16]
 801716e:	bf08      	it	eq
 8017170:	6143      	streq	r3, [r0, #20]
 8017172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017174:	683f      	ldr	r7, [r7, #0]
 8017176:	fa07 f70c 	lsl.w	r7, r7, ip
 801717a:	433d      	orrs	r5, r7
 801717c:	f843 5b04 	str.w	r5, [r3], #4
 8017180:	f852 5b04 	ldr.w	r5, [r2], #4
 8017184:	40cd      	lsrs	r5, r1
 8017186:	e7e5      	b.n	8017154 <rshift+0x3c>
 8017188:	4623      	mov	r3, r4
 801718a:	e7e9      	b.n	8017160 <rshift+0x48>

0801718c <__hexdig_fun>:
 801718c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017190:	2b09      	cmp	r3, #9
 8017192:	d802      	bhi.n	801719a <__hexdig_fun+0xe>
 8017194:	3820      	subs	r0, #32
 8017196:	b2c0      	uxtb	r0, r0
 8017198:	4770      	bx	lr
 801719a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801719e:	2b05      	cmp	r3, #5
 80171a0:	d801      	bhi.n	80171a6 <__hexdig_fun+0x1a>
 80171a2:	3847      	subs	r0, #71	; 0x47
 80171a4:	e7f7      	b.n	8017196 <__hexdig_fun+0xa>
 80171a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80171aa:	2b05      	cmp	r3, #5
 80171ac:	d801      	bhi.n	80171b2 <__hexdig_fun+0x26>
 80171ae:	3827      	subs	r0, #39	; 0x27
 80171b0:	e7f1      	b.n	8017196 <__hexdig_fun+0xa>
 80171b2:	2000      	movs	r0, #0
 80171b4:	4770      	bx	lr

080171b6 <__gethex>:
 80171b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ba:	b08b      	sub	sp, #44	; 0x2c
 80171bc:	468a      	mov	sl, r1
 80171be:	9002      	str	r0, [sp, #8]
 80171c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80171c2:	9306      	str	r3, [sp, #24]
 80171c4:	4690      	mov	r8, r2
 80171c6:	f000 fadf 	bl	8017788 <__localeconv_l>
 80171ca:	6803      	ldr	r3, [r0, #0]
 80171cc:	9303      	str	r3, [sp, #12]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7e9 f816 	bl	8000200 <strlen>
 80171d4:	9b03      	ldr	r3, [sp, #12]
 80171d6:	9001      	str	r0, [sp, #4]
 80171d8:	4403      	add	r3, r0
 80171da:	f04f 0b00 	mov.w	fp, #0
 80171de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80171e2:	9307      	str	r3, [sp, #28]
 80171e4:	f8da 3000 	ldr.w	r3, [sl]
 80171e8:	3302      	adds	r3, #2
 80171ea:	461f      	mov	r7, r3
 80171ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80171f0:	2830      	cmp	r0, #48	; 0x30
 80171f2:	d06c      	beq.n	80172ce <__gethex+0x118>
 80171f4:	f7ff ffca 	bl	801718c <__hexdig_fun>
 80171f8:	4604      	mov	r4, r0
 80171fa:	2800      	cmp	r0, #0
 80171fc:	d16a      	bne.n	80172d4 <__gethex+0x11e>
 80171fe:	9a01      	ldr	r2, [sp, #4]
 8017200:	9903      	ldr	r1, [sp, #12]
 8017202:	4638      	mov	r0, r7
 8017204:	f001 fc36 	bl	8018a74 <strncmp>
 8017208:	2800      	cmp	r0, #0
 801720a:	d166      	bne.n	80172da <__gethex+0x124>
 801720c:	9b01      	ldr	r3, [sp, #4]
 801720e:	5cf8      	ldrb	r0, [r7, r3]
 8017210:	18fe      	adds	r6, r7, r3
 8017212:	f7ff ffbb 	bl	801718c <__hexdig_fun>
 8017216:	2800      	cmp	r0, #0
 8017218:	d062      	beq.n	80172e0 <__gethex+0x12a>
 801721a:	4633      	mov	r3, r6
 801721c:	7818      	ldrb	r0, [r3, #0]
 801721e:	2830      	cmp	r0, #48	; 0x30
 8017220:	461f      	mov	r7, r3
 8017222:	f103 0301 	add.w	r3, r3, #1
 8017226:	d0f9      	beq.n	801721c <__gethex+0x66>
 8017228:	f7ff ffb0 	bl	801718c <__hexdig_fun>
 801722c:	fab0 f580 	clz	r5, r0
 8017230:	096d      	lsrs	r5, r5, #5
 8017232:	4634      	mov	r4, r6
 8017234:	f04f 0b01 	mov.w	fp, #1
 8017238:	463a      	mov	r2, r7
 801723a:	4616      	mov	r6, r2
 801723c:	3201      	adds	r2, #1
 801723e:	7830      	ldrb	r0, [r6, #0]
 8017240:	f7ff ffa4 	bl	801718c <__hexdig_fun>
 8017244:	2800      	cmp	r0, #0
 8017246:	d1f8      	bne.n	801723a <__gethex+0x84>
 8017248:	9a01      	ldr	r2, [sp, #4]
 801724a:	9903      	ldr	r1, [sp, #12]
 801724c:	4630      	mov	r0, r6
 801724e:	f001 fc11 	bl	8018a74 <strncmp>
 8017252:	b950      	cbnz	r0, 801726a <__gethex+0xb4>
 8017254:	b954      	cbnz	r4, 801726c <__gethex+0xb6>
 8017256:	9b01      	ldr	r3, [sp, #4]
 8017258:	18f4      	adds	r4, r6, r3
 801725a:	4622      	mov	r2, r4
 801725c:	4616      	mov	r6, r2
 801725e:	3201      	adds	r2, #1
 8017260:	7830      	ldrb	r0, [r6, #0]
 8017262:	f7ff ff93 	bl	801718c <__hexdig_fun>
 8017266:	2800      	cmp	r0, #0
 8017268:	d1f8      	bne.n	801725c <__gethex+0xa6>
 801726a:	b10c      	cbz	r4, 8017270 <__gethex+0xba>
 801726c:	1ba4      	subs	r4, r4, r6
 801726e:	00a4      	lsls	r4, r4, #2
 8017270:	7833      	ldrb	r3, [r6, #0]
 8017272:	2b50      	cmp	r3, #80	; 0x50
 8017274:	d001      	beq.n	801727a <__gethex+0xc4>
 8017276:	2b70      	cmp	r3, #112	; 0x70
 8017278:	d140      	bne.n	80172fc <__gethex+0x146>
 801727a:	7873      	ldrb	r3, [r6, #1]
 801727c:	2b2b      	cmp	r3, #43	; 0x2b
 801727e:	d031      	beq.n	80172e4 <__gethex+0x12e>
 8017280:	2b2d      	cmp	r3, #45	; 0x2d
 8017282:	d033      	beq.n	80172ec <__gethex+0x136>
 8017284:	1c71      	adds	r1, r6, #1
 8017286:	f04f 0900 	mov.w	r9, #0
 801728a:	7808      	ldrb	r0, [r1, #0]
 801728c:	f7ff ff7e 	bl	801718c <__hexdig_fun>
 8017290:	1e43      	subs	r3, r0, #1
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b18      	cmp	r3, #24
 8017296:	d831      	bhi.n	80172fc <__gethex+0x146>
 8017298:	f1a0 0210 	sub.w	r2, r0, #16
 801729c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80172a0:	f7ff ff74 	bl	801718c <__hexdig_fun>
 80172a4:	1e43      	subs	r3, r0, #1
 80172a6:	b2db      	uxtb	r3, r3
 80172a8:	2b18      	cmp	r3, #24
 80172aa:	d922      	bls.n	80172f2 <__gethex+0x13c>
 80172ac:	f1b9 0f00 	cmp.w	r9, #0
 80172b0:	d000      	beq.n	80172b4 <__gethex+0xfe>
 80172b2:	4252      	negs	r2, r2
 80172b4:	4414      	add	r4, r2
 80172b6:	f8ca 1000 	str.w	r1, [sl]
 80172ba:	b30d      	cbz	r5, 8017300 <__gethex+0x14a>
 80172bc:	f1bb 0f00 	cmp.w	fp, #0
 80172c0:	bf0c      	ite	eq
 80172c2:	2706      	moveq	r7, #6
 80172c4:	2700      	movne	r7, #0
 80172c6:	4638      	mov	r0, r7
 80172c8:	b00b      	add	sp, #44	; 0x2c
 80172ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ce:	f10b 0b01 	add.w	fp, fp, #1
 80172d2:	e78a      	b.n	80171ea <__gethex+0x34>
 80172d4:	2500      	movs	r5, #0
 80172d6:	462c      	mov	r4, r5
 80172d8:	e7ae      	b.n	8017238 <__gethex+0x82>
 80172da:	463e      	mov	r6, r7
 80172dc:	2501      	movs	r5, #1
 80172de:	e7c7      	b.n	8017270 <__gethex+0xba>
 80172e0:	4604      	mov	r4, r0
 80172e2:	e7fb      	b.n	80172dc <__gethex+0x126>
 80172e4:	f04f 0900 	mov.w	r9, #0
 80172e8:	1cb1      	adds	r1, r6, #2
 80172ea:	e7ce      	b.n	801728a <__gethex+0xd4>
 80172ec:	f04f 0901 	mov.w	r9, #1
 80172f0:	e7fa      	b.n	80172e8 <__gethex+0x132>
 80172f2:	230a      	movs	r3, #10
 80172f4:	fb03 0202 	mla	r2, r3, r2, r0
 80172f8:	3a10      	subs	r2, #16
 80172fa:	e7cf      	b.n	801729c <__gethex+0xe6>
 80172fc:	4631      	mov	r1, r6
 80172fe:	e7da      	b.n	80172b6 <__gethex+0x100>
 8017300:	1bf3      	subs	r3, r6, r7
 8017302:	3b01      	subs	r3, #1
 8017304:	4629      	mov	r1, r5
 8017306:	2b07      	cmp	r3, #7
 8017308:	dc49      	bgt.n	801739e <__gethex+0x1e8>
 801730a:	9802      	ldr	r0, [sp, #8]
 801730c:	f000 fa66 	bl	80177dc <_Balloc>
 8017310:	9b01      	ldr	r3, [sp, #4]
 8017312:	f100 0914 	add.w	r9, r0, #20
 8017316:	f04f 0b00 	mov.w	fp, #0
 801731a:	f1c3 0301 	rsb	r3, r3, #1
 801731e:	4605      	mov	r5, r0
 8017320:	f8cd 9010 	str.w	r9, [sp, #16]
 8017324:	46da      	mov	sl, fp
 8017326:	9308      	str	r3, [sp, #32]
 8017328:	42b7      	cmp	r7, r6
 801732a:	d33b      	bcc.n	80173a4 <__gethex+0x1ee>
 801732c:	9804      	ldr	r0, [sp, #16]
 801732e:	f840 ab04 	str.w	sl, [r0], #4
 8017332:	eba0 0009 	sub.w	r0, r0, r9
 8017336:	1080      	asrs	r0, r0, #2
 8017338:	6128      	str	r0, [r5, #16]
 801733a:	0147      	lsls	r7, r0, #5
 801733c:	4650      	mov	r0, sl
 801733e:	f000 fb11 	bl	8017964 <__hi0bits>
 8017342:	f8d8 6000 	ldr.w	r6, [r8]
 8017346:	1a3f      	subs	r7, r7, r0
 8017348:	42b7      	cmp	r7, r6
 801734a:	dd64      	ble.n	8017416 <__gethex+0x260>
 801734c:	1bbf      	subs	r7, r7, r6
 801734e:	4639      	mov	r1, r7
 8017350:	4628      	mov	r0, r5
 8017352:	f000 fe21 	bl	8017f98 <__any_on>
 8017356:	4682      	mov	sl, r0
 8017358:	b178      	cbz	r0, 801737a <__gethex+0x1c4>
 801735a:	1e7b      	subs	r3, r7, #1
 801735c:	1159      	asrs	r1, r3, #5
 801735e:	f003 021f 	and.w	r2, r3, #31
 8017362:	f04f 0a01 	mov.w	sl, #1
 8017366:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801736a:	fa0a f202 	lsl.w	r2, sl, r2
 801736e:	420a      	tst	r2, r1
 8017370:	d003      	beq.n	801737a <__gethex+0x1c4>
 8017372:	4553      	cmp	r3, sl
 8017374:	dc46      	bgt.n	8017404 <__gethex+0x24e>
 8017376:	f04f 0a02 	mov.w	sl, #2
 801737a:	4639      	mov	r1, r7
 801737c:	4628      	mov	r0, r5
 801737e:	f7ff fecb 	bl	8017118 <rshift>
 8017382:	443c      	add	r4, r7
 8017384:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017388:	42a3      	cmp	r3, r4
 801738a:	da52      	bge.n	8017432 <__gethex+0x27c>
 801738c:	4629      	mov	r1, r5
 801738e:	9802      	ldr	r0, [sp, #8]
 8017390:	f000 fa58 	bl	8017844 <_Bfree>
 8017394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017396:	2300      	movs	r3, #0
 8017398:	6013      	str	r3, [r2, #0]
 801739a:	27a3      	movs	r7, #163	; 0xa3
 801739c:	e793      	b.n	80172c6 <__gethex+0x110>
 801739e:	3101      	adds	r1, #1
 80173a0:	105b      	asrs	r3, r3, #1
 80173a2:	e7b0      	b.n	8017306 <__gethex+0x150>
 80173a4:	1e73      	subs	r3, r6, #1
 80173a6:	9305      	str	r3, [sp, #20]
 80173a8:	9a07      	ldr	r2, [sp, #28]
 80173aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d018      	beq.n	80173e4 <__gethex+0x22e>
 80173b2:	f1bb 0f20 	cmp.w	fp, #32
 80173b6:	d107      	bne.n	80173c8 <__gethex+0x212>
 80173b8:	9b04      	ldr	r3, [sp, #16]
 80173ba:	f8c3 a000 	str.w	sl, [r3]
 80173be:	3304      	adds	r3, #4
 80173c0:	f04f 0a00 	mov.w	sl, #0
 80173c4:	9304      	str	r3, [sp, #16]
 80173c6:	46d3      	mov	fp, sl
 80173c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80173cc:	f7ff fede 	bl	801718c <__hexdig_fun>
 80173d0:	f000 000f 	and.w	r0, r0, #15
 80173d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80173d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80173dc:	f10b 0b04 	add.w	fp, fp, #4
 80173e0:	9b05      	ldr	r3, [sp, #20]
 80173e2:	e00d      	b.n	8017400 <__gethex+0x24a>
 80173e4:	9b05      	ldr	r3, [sp, #20]
 80173e6:	9a08      	ldr	r2, [sp, #32]
 80173e8:	4413      	add	r3, r2
 80173ea:	42bb      	cmp	r3, r7
 80173ec:	d3e1      	bcc.n	80173b2 <__gethex+0x1fc>
 80173ee:	4618      	mov	r0, r3
 80173f0:	9a01      	ldr	r2, [sp, #4]
 80173f2:	9903      	ldr	r1, [sp, #12]
 80173f4:	9309      	str	r3, [sp, #36]	; 0x24
 80173f6:	f001 fb3d 	bl	8018a74 <strncmp>
 80173fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173fc:	2800      	cmp	r0, #0
 80173fe:	d1d8      	bne.n	80173b2 <__gethex+0x1fc>
 8017400:	461e      	mov	r6, r3
 8017402:	e791      	b.n	8017328 <__gethex+0x172>
 8017404:	1eb9      	subs	r1, r7, #2
 8017406:	4628      	mov	r0, r5
 8017408:	f000 fdc6 	bl	8017f98 <__any_on>
 801740c:	2800      	cmp	r0, #0
 801740e:	d0b2      	beq.n	8017376 <__gethex+0x1c0>
 8017410:	f04f 0a03 	mov.w	sl, #3
 8017414:	e7b1      	b.n	801737a <__gethex+0x1c4>
 8017416:	da09      	bge.n	801742c <__gethex+0x276>
 8017418:	1bf7      	subs	r7, r6, r7
 801741a:	4629      	mov	r1, r5
 801741c:	463a      	mov	r2, r7
 801741e:	9802      	ldr	r0, [sp, #8]
 8017420:	f000 fbdc 	bl	8017bdc <__lshift>
 8017424:	1be4      	subs	r4, r4, r7
 8017426:	4605      	mov	r5, r0
 8017428:	f100 0914 	add.w	r9, r0, #20
 801742c:	f04f 0a00 	mov.w	sl, #0
 8017430:	e7a8      	b.n	8017384 <__gethex+0x1ce>
 8017432:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017436:	42a0      	cmp	r0, r4
 8017438:	dd6a      	ble.n	8017510 <__gethex+0x35a>
 801743a:	1b04      	subs	r4, r0, r4
 801743c:	42a6      	cmp	r6, r4
 801743e:	dc2e      	bgt.n	801749e <__gethex+0x2e8>
 8017440:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017444:	2b02      	cmp	r3, #2
 8017446:	d022      	beq.n	801748e <__gethex+0x2d8>
 8017448:	2b03      	cmp	r3, #3
 801744a:	d024      	beq.n	8017496 <__gethex+0x2e0>
 801744c:	2b01      	cmp	r3, #1
 801744e:	d115      	bne.n	801747c <__gethex+0x2c6>
 8017450:	42a6      	cmp	r6, r4
 8017452:	d113      	bne.n	801747c <__gethex+0x2c6>
 8017454:	2e01      	cmp	r6, #1
 8017456:	dc0b      	bgt.n	8017470 <__gethex+0x2ba>
 8017458:	9a06      	ldr	r2, [sp, #24]
 801745a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801745e:	6013      	str	r3, [r2, #0]
 8017460:	2301      	movs	r3, #1
 8017462:	612b      	str	r3, [r5, #16]
 8017464:	f8c9 3000 	str.w	r3, [r9]
 8017468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801746a:	2762      	movs	r7, #98	; 0x62
 801746c:	601d      	str	r5, [r3, #0]
 801746e:	e72a      	b.n	80172c6 <__gethex+0x110>
 8017470:	1e71      	subs	r1, r6, #1
 8017472:	4628      	mov	r0, r5
 8017474:	f000 fd90 	bl	8017f98 <__any_on>
 8017478:	2800      	cmp	r0, #0
 801747a:	d1ed      	bne.n	8017458 <__gethex+0x2a2>
 801747c:	4629      	mov	r1, r5
 801747e:	9802      	ldr	r0, [sp, #8]
 8017480:	f000 f9e0 	bl	8017844 <_Bfree>
 8017484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017486:	2300      	movs	r3, #0
 8017488:	6013      	str	r3, [r2, #0]
 801748a:	2750      	movs	r7, #80	; 0x50
 801748c:	e71b      	b.n	80172c6 <__gethex+0x110>
 801748e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017490:	2b00      	cmp	r3, #0
 8017492:	d0e1      	beq.n	8017458 <__gethex+0x2a2>
 8017494:	e7f2      	b.n	801747c <__gethex+0x2c6>
 8017496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017498:	2b00      	cmp	r3, #0
 801749a:	d1dd      	bne.n	8017458 <__gethex+0x2a2>
 801749c:	e7ee      	b.n	801747c <__gethex+0x2c6>
 801749e:	1e67      	subs	r7, r4, #1
 80174a0:	f1ba 0f00 	cmp.w	sl, #0
 80174a4:	d131      	bne.n	801750a <__gethex+0x354>
 80174a6:	b127      	cbz	r7, 80174b2 <__gethex+0x2fc>
 80174a8:	4639      	mov	r1, r7
 80174aa:	4628      	mov	r0, r5
 80174ac:	f000 fd74 	bl	8017f98 <__any_on>
 80174b0:	4682      	mov	sl, r0
 80174b2:	117a      	asrs	r2, r7, #5
 80174b4:	2301      	movs	r3, #1
 80174b6:	f007 071f 	and.w	r7, r7, #31
 80174ba:	fa03 f707 	lsl.w	r7, r3, r7
 80174be:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80174c2:	4621      	mov	r1, r4
 80174c4:	421f      	tst	r7, r3
 80174c6:	4628      	mov	r0, r5
 80174c8:	bf18      	it	ne
 80174ca:	f04a 0a02 	orrne.w	sl, sl, #2
 80174ce:	1b36      	subs	r6, r6, r4
 80174d0:	f7ff fe22 	bl	8017118 <rshift>
 80174d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80174d8:	2702      	movs	r7, #2
 80174da:	f1ba 0f00 	cmp.w	sl, #0
 80174de:	d048      	beq.n	8017572 <__gethex+0x3bc>
 80174e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80174e4:	2b02      	cmp	r3, #2
 80174e6:	d015      	beq.n	8017514 <__gethex+0x35e>
 80174e8:	2b03      	cmp	r3, #3
 80174ea:	d017      	beq.n	801751c <__gethex+0x366>
 80174ec:	2b01      	cmp	r3, #1
 80174ee:	d109      	bne.n	8017504 <__gethex+0x34e>
 80174f0:	f01a 0f02 	tst.w	sl, #2
 80174f4:	d006      	beq.n	8017504 <__gethex+0x34e>
 80174f6:	f8d9 3000 	ldr.w	r3, [r9]
 80174fa:	ea4a 0a03 	orr.w	sl, sl, r3
 80174fe:	f01a 0f01 	tst.w	sl, #1
 8017502:	d10e      	bne.n	8017522 <__gethex+0x36c>
 8017504:	f047 0710 	orr.w	r7, r7, #16
 8017508:	e033      	b.n	8017572 <__gethex+0x3bc>
 801750a:	f04f 0a01 	mov.w	sl, #1
 801750e:	e7d0      	b.n	80174b2 <__gethex+0x2fc>
 8017510:	2701      	movs	r7, #1
 8017512:	e7e2      	b.n	80174da <__gethex+0x324>
 8017514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017516:	f1c3 0301 	rsb	r3, r3, #1
 801751a:	9315      	str	r3, [sp, #84]	; 0x54
 801751c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801751e:	2b00      	cmp	r3, #0
 8017520:	d0f0      	beq.n	8017504 <__gethex+0x34e>
 8017522:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017526:	f105 0314 	add.w	r3, r5, #20
 801752a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801752e:	eb03 010a 	add.w	r1, r3, sl
 8017532:	f04f 0c00 	mov.w	ip, #0
 8017536:	4618      	mov	r0, r3
 8017538:	f853 2b04 	ldr.w	r2, [r3], #4
 801753c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017540:	d01c      	beq.n	801757c <__gethex+0x3c6>
 8017542:	3201      	adds	r2, #1
 8017544:	6002      	str	r2, [r0, #0]
 8017546:	2f02      	cmp	r7, #2
 8017548:	f105 0314 	add.w	r3, r5, #20
 801754c:	d138      	bne.n	80175c0 <__gethex+0x40a>
 801754e:	f8d8 2000 	ldr.w	r2, [r8]
 8017552:	3a01      	subs	r2, #1
 8017554:	42b2      	cmp	r2, r6
 8017556:	d10a      	bne.n	801756e <__gethex+0x3b8>
 8017558:	1171      	asrs	r1, r6, #5
 801755a:	2201      	movs	r2, #1
 801755c:	f006 061f 	and.w	r6, r6, #31
 8017560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017564:	fa02 f606 	lsl.w	r6, r2, r6
 8017568:	421e      	tst	r6, r3
 801756a:	bf18      	it	ne
 801756c:	4617      	movne	r7, r2
 801756e:	f047 0720 	orr.w	r7, r7, #32
 8017572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017574:	601d      	str	r5, [r3, #0]
 8017576:	9b06      	ldr	r3, [sp, #24]
 8017578:	601c      	str	r4, [r3, #0]
 801757a:	e6a4      	b.n	80172c6 <__gethex+0x110>
 801757c:	4299      	cmp	r1, r3
 801757e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017582:	d8d8      	bhi.n	8017536 <__gethex+0x380>
 8017584:	68ab      	ldr	r3, [r5, #8]
 8017586:	4599      	cmp	r9, r3
 8017588:	db12      	blt.n	80175b0 <__gethex+0x3fa>
 801758a:	6869      	ldr	r1, [r5, #4]
 801758c:	9802      	ldr	r0, [sp, #8]
 801758e:	3101      	adds	r1, #1
 8017590:	f000 f924 	bl	80177dc <_Balloc>
 8017594:	692a      	ldr	r2, [r5, #16]
 8017596:	3202      	adds	r2, #2
 8017598:	f105 010c 	add.w	r1, r5, #12
 801759c:	4683      	mov	fp, r0
 801759e:	0092      	lsls	r2, r2, #2
 80175a0:	300c      	adds	r0, #12
 80175a2:	f7fd f9c5 	bl	8014930 <memcpy>
 80175a6:	4629      	mov	r1, r5
 80175a8:	9802      	ldr	r0, [sp, #8]
 80175aa:	f000 f94b 	bl	8017844 <_Bfree>
 80175ae:	465d      	mov	r5, fp
 80175b0:	692b      	ldr	r3, [r5, #16]
 80175b2:	1c5a      	adds	r2, r3, #1
 80175b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80175b8:	612a      	str	r2, [r5, #16]
 80175ba:	2201      	movs	r2, #1
 80175bc:	615a      	str	r2, [r3, #20]
 80175be:	e7c2      	b.n	8017546 <__gethex+0x390>
 80175c0:	692a      	ldr	r2, [r5, #16]
 80175c2:	454a      	cmp	r2, r9
 80175c4:	dd0b      	ble.n	80175de <__gethex+0x428>
 80175c6:	2101      	movs	r1, #1
 80175c8:	4628      	mov	r0, r5
 80175ca:	f7ff fda5 	bl	8017118 <rshift>
 80175ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80175d2:	3401      	adds	r4, #1
 80175d4:	42a3      	cmp	r3, r4
 80175d6:	f6ff aed9 	blt.w	801738c <__gethex+0x1d6>
 80175da:	2701      	movs	r7, #1
 80175dc:	e7c7      	b.n	801756e <__gethex+0x3b8>
 80175de:	f016 061f 	ands.w	r6, r6, #31
 80175e2:	d0fa      	beq.n	80175da <__gethex+0x424>
 80175e4:	449a      	add	sl, r3
 80175e6:	f1c6 0620 	rsb	r6, r6, #32
 80175ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80175ee:	f000 f9b9 	bl	8017964 <__hi0bits>
 80175f2:	42b0      	cmp	r0, r6
 80175f4:	dbe7      	blt.n	80175c6 <__gethex+0x410>
 80175f6:	e7f0      	b.n	80175da <__gethex+0x424>

080175f8 <L_shift>:
 80175f8:	f1c2 0208 	rsb	r2, r2, #8
 80175fc:	0092      	lsls	r2, r2, #2
 80175fe:	b570      	push	{r4, r5, r6, lr}
 8017600:	f1c2 0620 	rsb	r6, r2, #32
 8017604:	6843      	ldr	r3, [r0, #4]
 8017606:	6804      	ldr	r4, [r0, #0]
 8017608:	fa03 f506 	lsl.w	r5, r3, r6
 801760c:	432c      	orrs	r4, r5
 801760e:	40d3      	lsrs	r3, r2
 8017610:	6004      	str	r4, [r0, #0]
 8017612:	f840 3f04 	str.w	r3, [r0, #4]!
 8017616:	4288      	cmp	r0, r1
 8017618:	d3f4      	bcc.n	8017604 <L_shift+0xc>
 801761a:	bd70      	pop	{r4, r5, r6, pc}

0801761c <__match>:
 801761c:	b530      	push	{r4, r5, lr}
 801761e:	6803      	ldr	r3, [r0, #0]
 8017620:	3301      	adds	r3, #1
 8017622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017626:	b914      	cbnz	r4, 801762e <__match+0x12>
 8017628:	6003      	str	r3, [r0, #0]
 801762a:	2001      	movs	r0, #1
 801762c:	bd30      	pop	{r4, r5, pc}
 801762e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017632:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017636:	2d19      	cmp	r5, #25
 8017638:	bf98      	it	ls
 801763a:	3220      	addls	r2, #32
 801763c:	42a2      	cmp	r2, r4
 801763e:	d0f0      	beq.n	8017622 <__match+0x6>
 8017640:	2000      	movs	r0, #0
 8017642:	e7f3      	b.n	801762c <__match+0x10>

08017644 <__hexnan>:
 8017644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017648:	680b      	ldr	r3, [r1, #0]
 801764a:	6801      	ldr	r1, [r0, #0]
 801764c:	115f      	asrs	r7, r3, #5
 801764e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017652:	f013 031f 	ands.w	r3, r3, #31
 8017656:	b087      	sub	sp, #28
 8017658:	bf18      	it	ne
 801765a:	3704      	addne	r7, #4
 801765c:	2500      	movs	r5, #0
 801765e:	1f3e      	subs	r6, r7, #4
 8017660:	4682      	mov	sl, r0
 8017662:	4690      	mov	r8, r2
 8017664:	9301      	str	r3, [sp, #4]
 8017666:	f847 5c04 	str.w	r5, [r7, #-4]
 801766a:	46b1      	mov	r9, r6
 801766c:	4634      	mov	r4, r6
 801766e:	9502      	str	r5, [sp, #8]
 8017670:	46ab      	mov	fp, r5
 8017672:	784a      	ldrb	r2, [r1, #1]
 8017674:	1c4b      	adds	r3, r1, #1
 8017676:	9303      	str	r3, [sp, #12]
 8017678:	b342      	cbz	r2, 80176cc <__hexnan+0x88>
 801767a:	4610      	mov	r0, r2
 801767c:	9105      	str	r1, [sp, #20]
 801767e:	9204      	str	r2, [sp, #16]
 8017680:	f7ff fd84 	bl	801718c <__hexdig_fun>
 8017684:	2800      	cmp	r0, #0
 8017686:	d143      	bne.n	8017710 <__hexnan+0xcc>
 8017688:	9a04      	ldr	r2, [sp, #16]
 801768a:	9905      	ldr	r1, [sp, #20]
 801768c:	2a20      	cmp	r2, #32
 801768e:	d818      	bhi.n	80176c2 <__hexnan+0x7e>
 8017690:	9b02      	ldr	r3, [sp, #8]
 8017692:	459b      	cmp	fp, r3
 8017694:	dd13      	ble.n	80176be <__hexnan+0x7a>
 8017696:	454c      	cmp	r4, r9
 8017698:	d206      	bcs.n	80176a8 <__hexnan+0x64>
 801769a:	2d07      	cmp	r5, #7
 801769c:	dc04      	bgt.n	80176a8 <__hexnan+0x64>
 801769e:	462a      	mov	r2, r5
 80176a0:	4649      	mov	r1, r9
 80176a2:	4620      	mov	r0, r4
 80176a4:	f7ff ffa8 	bl	80175f8 <L_shift>
 80176a8:	4544      	cmp	r4, r8
 80176aa:	d944      	bls.n	8017736 <__hexnan+0xf2>
 80176ac:	2300      	movs	r3, #0
 80176ae:	f1a4 0904 	sub.w	r9, r4, #4
 80176b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80176b6:	f8cd b008 	str.w	fp, [sp, #8]
 80176ba:	464c      	mov	r4, r9
 80176bc:	461d      	mov	r5, r3
 80176be:	9903      	ldr	r1, [sp, #12]
 80176c0:	e7d7      	b.n	8017672 <__hexnan+0x2e>
 80176c2:	2a29      	cmp	r2, #41	; 0x29
 80176c4:	d14a      	bne.n	801775c <__hexnan+0x118>
 80176c6:	3102      	adds	r1, #2
 80176c8:	f8ca 1000 	str.w	r1, [sl]
 80176cc:	f1bb 0f00 	cmp.w	fp, #0
 80176d0:	d044      	beq.n	801775c <__hexnan+0x118>
 80176d2:	454c      	cmp	r4, r9
 80176d4:	d206      	bcs.n	80176e4 <__hexnan+0xa0>
 80176d6:	2d07      	cmp	r5, #7
 80176d8:	dc04      	bgt.n	80176e4 <__hexnan+0xa0>
 80176da:	462a      	mov	r2, r5
 80176dc:	4649      	mov	r1, r9
 80176de:	4620      	mov	r0, r4
 80176e0:	f7ff ff8a 	bl	80175f8 <L_shift>
 80176e4:	4544      	cmp	r4, r8
 80176e6:	d928      	bls.n	801773a <__hexnan+0xf6>
 80176e8:	4643      	mov	r3, r8
 80176ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80176ee:	f843 2b04 	str.w	r2, [r3], #4
 80176f2:	42a6      	cmp	r6, r4
 80176f4:	d2f9      	bcs.n	80176ea <__hexnan+0xa6>
 80176f6:	2200      	movs	r2, #0
 80176f8:	f843 2b04 	str.w	r2, [r3], #4
 80176fc:	429e      	cmp	r6, r3
 80176fe:	d2fb      	bcs.n	80176f8 <__hexnan+0xb4>
 8017700:	6833      	ldr	r3, [r6, #0]
 8017702:	b91b      	cbnz	r3, 801770c <__hexnan+0xc8>
 8017704:	4546      	cmp	r6, r8
 8017706:	d127      	bne.n	8017758 <__hexnan+0x114>
 8017708:	2301      	movs	r3, #1
 801770a:	6033      	str	r3, [r6, #0]
 801770c:	2005      	movs	r0, #5
 801770e:	e026      	b.n	801775e <__hexnan+0x11a>
 8017710:	3501      	adds	r5, #1
 8017712:	2d08      	cmp	r5, #8
 8017714:	f10b 0b01 	add.w	fp, fp, #1
 8017718:	dd06      	ble.n	8017728 <__hexnan+0xe4>
 801771a:	4544      	cmp	r4, r8
 801771c:	d9cf      	bls.n	80176be <__hexnan+0x7a>
 801771e:	2300      	movs	r3, #0
 8017720:	f844 3c04 	str.w	r3, [r4, #-4]
 8017724:	2501      	movs	r5, #1
 8017726:	3c04      	subs	r4, #4
 8017728:	6822      	ldr	r2, [r4, #0]
 801772a:	f000 000f 	and.w	r0, r0, #15
 801772e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017732:	6020      	str	r0, [r4, #0]
 8017734:	e7c3      	b.n	80176be <__hexnan+0x7a>
 8017736:	2508      	movs	r5, #8
 8017738:	e7c1      	b.n	80176be <__hexnan+0x7a>
 801773a:	9b01      	ldr	r3, [sp, #4]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d0df      	beq.n	8017700 <__hexnan+0xbc>
 8017740:	f04f 32ff 	mov.w	r2, #4294967295
 8017744:	f1c3 0320 	rsb	r3, r3, #32
 8017748:	fa22 f303 	lsr.w	r3, r2, r3
 801774c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017750:	401a      	ands	r2, r3
 8017752:	f847 2c04 	str.w	r2, [r7, #-4]
 8017756:	e7d3      	b.n	8017700 <__hexnan+0xbc>
 8017758:	3e04      	subs	r6, #4
 801775a:	e7d1      	b.n	8017700 <__hexnan+0xbc>
 801775c:	2004      	movs	r0, #4
 801775e:	b007      	add	sp, #28
 8017760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017764 <__locale_ctype_ptr_l>:
 8017764:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017768:	4770      	bx	lr
	...

0801776c <__locale_ctype_ptr>:
 801776c:	4b04      	ldr	r3, [pc, #16]	; (8017780 <__locale_ctype_ptr+0x14>)
 801776e:	4a05      	ldr	r2, [pc, #20]	; (8017784 <__locale_ctype_ptr+0x18>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	6a1b      	ldr	r3, [r3, #32]
 8017774:	2b00      	cmp	r3, #0
 8017776:	bf08      	it	eq
 8017778:	4613      	moveq	r3, r2
 801777a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801777e:	4770      	bx	lr
 8017780:	2000000c 	.word	0x2000000c
 8017784:	20000070 	.word	0x20000070

08017788 <__localeconv_l>:
 8017788:	30f0      	adds	r0, #240	; 0xf0
 801778a:	4770      	bx	lr

0801778c <_localeconv_r>:
 801778c:	4b04      	ldr	r3, [pc, #16]	; (80177a0 <_localeconv_r+0x14>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	6a18      	ldr	r0, [r3, #32]
 8017792:	4b04      	ldr	r3, [pc, #16]	; (80177a4 <_localeconv_r+0x18>)
 8017794:	2800      	cmp	r0, #0
 8017796:	bf08      	it	eq
 8017798:	4618      	moveq	r0, r3
 801779a:	30f0      	adds	r0, #240	; 0xf0
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop
 80177a0:	2000000c 	.word	0x2000000c
 80177a4:	20000070 	.word	0x20000070

080177a8 <malloc>:
 80177a8:	4b02      	ldr	r3, [pc, #8]	; (80177b4 <malloc+0xc>)
 80177aa:	4601      	mov	r1, r0
 80177ac:	6818      	ldr	r0, [r3, #0]
 80177ae:	f000 bc71 	b.w	8018094 <_malloc_r>
 80177b2:	bf00      	nop
 80177b4:	2000000c 	.word	0x2000000c

080177b8 <__ascii_mbtowc>:
 80177b8:	b082      	sub	sp, #8
 80177ba:	b901      	cbnz	r1, 80177be <__ascii_mbtowc+0x6>
 80177bc:	a901      	add	r1, sp, #4
 80177be:	b142      	cbz	r2, 80177d2 <__ascii_mbtowc+0x1a>
 80177c0:	b14b      	cbz	r3, 80177d6 <__ascii_mbtowc+0x1e>
 80177c2:	7813      	ldrb	r3, [r2, #0]
 80177c4:	600b      	str	r3, [r1, #0]
 80177c6:	7812      	ldrb	r2, [r2, #0]
 80177c8:	1c10      	adds	r0, r2, #0
 80177ca:	bf18      	it	ne
 80177cc:	2001      	movne	r0, #1
 80177ce:	b002      	add	sp, #8
 80177d0:	4770      	bx	lr
 80177d2:	4610      	mov	r0, r2
 80177d4:	e7fb      	b.n	80177ce <__ascii_mbtowc+0x16>
 80177d6:	f06f 0001 	mvn.w	r0, #1
 80177da:	e7f8      	b.n	80177ce <__ascii_mbtowc+0x16>

080177dc <_Balloc>:
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80177e0:	4604      	mov	r4, r0
 80177e2:	460e      	mov	r6, r1
 80177e4:	b93d      	cbnz	r5, 80177f6 <_Balloc+0x1a>
 80177e6:	2010      	movs	r0, #16
 80177e8:	f7ff ffde 	bl	80177a8 <malloc>
 80177ec:	6260      	str	r0, [r4, #36]	; 0x24
 80177ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80177f2:	6005      	str	r5, [r0, #0]
 80177f4:	60c5      	str	r5, [r0, #12]
 80177f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80177f8:	68eb      	ldr	r3, [r5, #12]
 80177fa:	b183      	cbz	r3, 801781e <_Balloc+0x42>
 80177fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017804:	b9b8      	cbnz	r0, 8017836 <_Balloc+0x5a>
 8017806:	2101      	movs	r1, #1
 8017808:	fa01 f506 	lsl.w	r5, r1, r6
 801780c:	1d6a      	adds	r2, r5, #5
 801780e:	0092      	lsls	r2, r2, #2
 8017810:	4620      	mov	r0, r4
 8017812:	f000 fbe2 	bl	8017fda <_calloc_r>
 8017816:	b160      	cbz	r0, 8017832 <_Balloc+0x56>
 8017818:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801781c:	e00e      	b.n	801783c <_Balloc+0x60>
 801781e:	2221      	movs	r2, #33	; 0x21
 8017820:	2104      	movs	r1, #4
 8017822:	4620      	mov	r0, r4
 8017824:	f000 fbd9 	bl	8017fda <_calloc_r>
 8017828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801782a:	60e8      	str	r0, [r5, #12]
 801782c:	68db      	ldr	r3, [r3, #12]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d1e4      	bne.n	80177fc <_Balloc+0x20>
 8017832:	2000      	movs	r0, #0
 8017834:	bd70      	pop	{r4, r5, r6, pc}
 8017836:	6802      	ldr	r2, [r0, #0]
 8017838:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801783c:	2300      	movs	r3, #0
 801783e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017842:	e7f7      	b.n	8017834 <_Balloc+0x58>

08017844 <_Bfree>:
 8017844:	b570      	push	{r4, r5, r6, lr}
 8017846:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017848:	4606      	mov	r6, r0
 801784a:	460d      	mov	r5, r1
 801784c:	b93c      	cbnz	r4, 801785e <_Bfree+0x1a>
 801784e:	2010      	movs	r0, #16
 8017850:	f7ff ffaa 	bl	80177a8 <malloc>
 8017854:	6270      	str	r0, [r6, #36]	; 0x24
 8017856:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801785a:	6004      	str	r4, [r0, #0]
 801785c:	60c4      	str	r4, [r0, #12]
 801785e:	b13d      	cbz	r5, 8017870 <_Bfree+0x2c>
 8017860:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017862:	686a      	ldr	r2, [r5, #4]
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801786a:	6029      	str	r1, [r5, #0]
 801786c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017870:	bd70      	pop	{r4, r5, r6, pc}

08017872 <__multadd>:
 8017872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017876:	690d      	ldr	r5, [r1, #16]
 8017878:	461f      	mov	r7, r3
 801787a:	4606      	mov	r6, r0
 801787c:	460c      	mov	r4, r1
 801787e:	f101 0c14 	add.w	ip, r1, #20
 8017882:	2300      	movs	r3, #0
 8017884:	f8dc 0000 	ldr.w	r0, [ip]
 8017888:	b281      	uxth	r1, r0
 801788a:	fb02 7101 	mla	r1, r2, r1, r7
 801788e:	0c0f      	lsrs	r7, r1, #16
 8017890:	0c00      	lsrs	r0, r0, #16
 8017892:	fb02 7000 	mla	r0, r2, r0, r7
 8017896:	b289      	uxth	r1, r1
 8017898:	3301      	adds	r3, #1
 801789a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801789e:	429d      	cmp	r5, r3
 80178a0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80178a4:	f84c 1b04 	str.w	r1, [ip], #4
 80178a8:	dcec      	bgt.n	8017884 <__multadd+0x12>
 80178aa:	b1d7      	cbz	r7, 80178e2 <__multadd+0x70>
 80178ac:	68a3      	ldr	r3, [r4, #8]
 80178ae:	42ab      	cmp	r3, r5
 80178b0:	dc12      	bgt.n	80178d8 <__multadd+0x66>
 80178b2:	6861      	ldr	r1, [r4, #4]
 80178b4:	4630      	mov	r0, r6
 80178b6:	3101      	adds	r1, #1
 80178b8:	f7ff ff90 	bl	80177dc <_Balloc>
 80178bc:	6922      	ldr	r2, [r4, #16]
 80178be:	3202      	adds	r2, #2
 80178c0:	f104 010c 	add.w	r1, r4, #12
 80178c4:	4680      	mov	r8, r0
 80178c6:	0092      	lsls	r2, r2, #2
 80178c8:	300c      	adds	r0, #12
 80178ca:	f7fd f831 	bl	8014930 <memcpy>
 80178ce:	4621      	mov	r1, r4
 80178d0:	4630      	mov	r0, r6
 80178d2:	f7ff ffb7 	bl	8017844 <_Bfree>
 80178d6:	4644      	mov	r4, r8
 80178d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80178dc:	3501      	adds	r5, #1
 80178de:	615f      	str	r7, [r3, #20]
 80178e0:	6125      	str	r5, [r4, #16]
 80178e2:	4620      	mov	r0, r4
 80178e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080178e8 <__s2b>:
 80178e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178ec:	460c      	mov	r4, r1
 80178ee:	4615      	mov	r5, r2
 80178f0:	461f      	mov	r7, r3
 80178f2:	2209      	movs	r2, #9
 80178f4:	3308      	adds	r3, #8
 80178f6:	4606      	mov	r6, r0
 80178f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80178fc:	2100      	movs	r1, #0
 80178fe:	2201      	movs	r2, #1
 8017900:	429a      	cmp	r2, r3
 8017902:	db20      	blt.n	8017946 <__s2b+0x5e>
 8017904:	4630      	mov	r0, r6
 8017906:	f7ff ff69 	bl	80177dc <_Balloc>
 801790a:	9b08      	ldr	r3, [sp, #32]
 801790c:	6143      	str	r3, [r0, #20]
 801790e:	2d09      	cmp	r5, #9
 8017910:	f04f 0301 	mov.w	r3, #1
 8017914:	6103      	str	r3, [r0, #16]
 8017916:	dd19      	ble.n	801794c <__s2b+0x64>
 8017918:	f104 0809 	add.w	r8, r4, #9
 801791c:	46c1      	mov	r9, r8
 801791e:	442c      	add	r4, r5
 8017920:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017924:	4601      	mov	r1, r0
 8017926:	3b30      	subs	r3, #48	; 0x30
 8017928:	220a      	movs	r2, #10
 801792a:	4630      	mov	r0, r6
 801792c:	f7ff ffa1 	bl	8017872 <__multadd>
 8017930:	45a1      	cmp	r9, r4
 8017932:	d1f5      	bne.n	8017920 <__s2b+0x38>
 8017934:	eb08 0405 	add.w	r4, r8, r5
 8017938:	3c08      	subs	r4, #8
 801793a:	1b2d      	subs	r5, r5, r4
 801793c:	1963      	adds	r3, r4, r5
 801793e:	42bb      	cmp	r3, r7
 8017940:	db07      	blt.n	8017952 <__s2b+0x6a>
 8017942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017946:	0052      	lsls	r2, r2, #1
 8017948:	3101      	adds	r1, #1
 801794a:	e7d9      	b.n	8017900 <__s2b+0x18>
 801794c:	340a      	adds	r4, #10
 801794e:	2509      	movs	r5, #9
 8017950:	e7f3      	b.n	801793a <__s2b+0x52>
 8017952:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017956:	4601      	mov	r1, r0
 8017958:	3b30      	subs	r3, #48	; 0x30
 801795a:	220a      	movs	r2, #10
 801795c:	4630      	mov	r0, r6
 801795e:	f7ff ff88 	bl	8017872 <__multadd>
 8017962:	e7eb      	b.n	801793c <__s2b+0x54>

08017964 <__hi0bits>:
 8017964:	0c02      	lsrs	r2, r0, #16
 8017966:	0412      	lsls	r2, r2, #16
 8017968:	4603      	mov	r3, r0
 801796a:	b9b2      	cbnz	r2, 801799a <__hi0bits+0x36>
 801796c:	0403      	lsls	r3, r0, #16
 801796e:	2010      	movs	r0, #16
 8017970:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017974:	bf04      	itt	eq
 8017976:	021b      	lsleq	r3, r3, #8
 8017978:	3008      	addeq	r0, #8
 801797a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801797e:	bf04      	itt	eq
 8017980:	011b      	lsleq	r3, r3, #4
 8017982:	3004      	addeq	r0, #4
 8017984:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017988:	bf04      	itt	eq
 801798a:	009b      	lsleq	r3, r3, #2
 801798c:	3002      	addeq	r0, #2
 801798e:	2b00      	cmp	r3, #0
 8017990:	db06      	blt.n	80179a0 <__hi0bits+0x3c>
 8017992:	005b      	lsls	r3, r3, #1
 8017994:	d503      	bpl.n	801799e <__hi0bits+0x3a>
 8017996:	3001      	adds	r0, #1
 8017998:	4770      	bx	lr
 801799a:	2000      	movs	r0, #0
 801799c:	e7e8      	b.n	8017970 <__hi0bits+0xc>
 801799e:	2020      	movs	r0, #32
 80179a0:	4770      	bx	lr

080179a2 <__lo0bits>:
 80179a2:	6803      	ldr	r3, [r0, #0]
 80179a4:	f013 0207 	ands.w	r2, r3, #7
 80179a8:	4601      	mov	r1, r0
 80179aa:	d00b      	beq.n	80179c4 <__lo0bits+0x22>
 80179ac:	07da      	lsls	r2, r3, #31
 80179ae:	d423      	bmi.n	80179f8 <__lo0bits+0x56>
 80179b0:	0798      	lsls	r0, r3, #30
 80179b2:	bf49      	itett	mi
 80179b4:	085b      	lsrmi	r3, r3, #1
 80179b6:	089b      	lsrpl	r3, r3, #2
 80179b8:	2001      	movmi	r0, #1
 80179ba:	600b      	strmi	r3, [r1, #0]
 80179bc:	bf5c      	itt	pl
 80179be:	600b      	strpl	r3, [r1, #0]
 80179c0:	2002      	movpl	r0, #2
 80179c2:	4770      	bx	lr
 80179c4:	b298      	uxth	r0, r3
 80179c6:	b9a8      	cbnz	r0, 80179f4 <__lo0bits+0x52>
 80179c8:	0c1b      	lsrs	r3, r3, #16
 80179ca:	2010      	movs	r0, #16
 80179cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80179d0:	bf04      	itt	eq
 80179d2:	0a1b      	lsreq	r3, r3, #8
 80179d4:	3008      	addeq	r0, #8
 80179d6:	071a      	lsls	r2, r3, #28
 80179d8:	bf04      	itt	eq
 80179da:	091b      	lsreq	r3, r3, #4
 80179dc:	3004      	addeq	r0, #4
 80179de:	079a      	lsls	r2, r3, #30
 80179e0:	bf04      	itt	eq
 80179e2:	089b      	lsreq	r3, r3, #2
 80179e4:	3002      	addeq	r0, #2
 80179e6:	07da      	lsls	r2, r3, #31
 80179e8:	d402      	bmi.n	80179f0 <__lo0bits+0x4e>
 80179ea:	085b      	lsrs	r3, r3, #1
 80179ec:	d006      	beq.n	80179fc <__lo0bits+0x5a>
 80179ee:	3001      	adds	r0, #1
 80179f0:	600b      	str	r3, [r1, #0]
 80179f2:	4770      	bx	lr
 80179f4:	4610      	mov	r0, r2
 80179f6:	e7e9      	b.n	80179cc <__lo0bits+0x2a>
 80179f8:	2000      	movs	r0, #0
 80179fa:	4770      	bx	lr
 80179fc:	2020      	movs	r0, #32
 80179fe:	4770      	bx	lr

08017a00 <__i2b>:
 8017a00:	b510      	push	{r4, lr}
 8017a02:	460c      	mov	r4, r1
 8017a04:	2101      	movs	r1, #1
 8017a06:	f7ff fee9 	bl	80177dc <_Balloc>
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	6144      	str	r4, [r0, #20]
 8017a0e:	6102      	str	r2, [r0, #16]
 8017a10:	bd10      	pop	{r4, pc}

08017a12 <__multiply>:
 8017a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a16:	4614      	mov	r4, r2
 8017a18:	690a      	ldr	r2, [r1, #16]
 8017a1a:	6923      	ldr	r3, [r4, #16]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	bfb8      	it	lt
 8017a20:	460b      	movlt	r3, r1
 8017a22:	4688      	mov	r8, r1
 8017a24:	bfbc      	itt	lt
 8017a26:	46a0      	movlt	r8, r4
 8017a28:	461c      	movlt	r4, r3
 8017a2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a3a:	eb07 0609 	add.w	r6, r7, r9
 8017a3e:	42b3      	cmp	r3, r6
 8017a40:	bfb8      	it	lt
 8017a42:	3101      	addlt	r1, #1
 8017a44:	f7ff feca 	bl	80177dc <_Balloc>
 8017a48:	f100 0514 	add.w	r5, r0, #20
 8017a4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a50:	462b      	mov	r3, r5
 8017a52:	2200      	movs	r2, #0
 8017a54:	4573      	cmp	r3, lr
 8017a56:	d316      	bcc.n	8017a86 <__multiply+0x74>
 8017a58:	f104 0214 	add.w	r2, r4, #20
 8017a5c:	f108 0114 	add.w	r1, r8, #20
 8017a60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017a64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017a68:	9300      	str	r3, [sp, #0]
 8017a6a:	9b00      	ldr	r3, [sp, #0]
 8017a6c:	9201      	str	r2, [sp, #4]
 8017a6e:	4293      	cmp	r3, r2
 8017a70:	d80c      	bhi.n	8017a8c <__multiply+0x7a>
 8017a72:	2e00      	cmp	r6, #0
 8017a74:	dd03      	ble.n	8017a7e <__multiply+0x6c>
 8017a76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d05d      	beq.n	8017b3a <__multiply+0x128>
 8017a7e:	6106      	str	r6, [r0, #16]
 8017a80:	b003      	add	sp, #12
 8017a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a86:	f843 2b04 	str.w	r2, [r3], #4
 8017a8a:	e7e3      	b.n	8017a54 <__multiply+0x42>
 8017a8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017a90:	f1bb 0f00 	cmp.w	fp, #0
 8017a94:	d023      	beq.n	8017ade <__multiply+0xcc>
 8017a96:	4689      	mov	r9, r1
 8017a98:	46ac      	mov	ip, r5
 8017a9a:	f04f 0800 	mov.w	r8, #0
 8017a9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017aa2:	f8dc a000 	ldr.w	sl, [ip]
 8017aa6:	b2a3      	uxth	r3, r4
 8017aa8:	fa1f fa8a 	uxth.w	sl, sl
 8017aac:	fb0b a303 	mla	r3, fp, r3, sl
 8017ab0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017ab4:	f8dc 4000 	ldr.w	r4, [ip]
 8017ab8:	4443      	add	r3, r8
 8017aba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017abe:	fb0b 840a 	mla	r4, fp, sl, r8
 8017ac2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017ac6:	46e2      	mov	sl, ip
 8017ac8:	b29b      	uxth	r3, r3
 8017aca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017ace:	454f      	cmp	r7, r9
 8017ad0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017ad4:	f84a 3b04 	str.w	r3, [sl], #4
 8017ad8:	d82b      	bhi.n	8017b32 <__multiply+0x120>
 8017ada:	f8cc 8004 	str.w	r8, [ip, #4]
 8017ade:	9b01      	ldr	r3, [sp, #4]
 8017ae0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017ae4:	3204      	adds	r2, #4
 8017ae6:	f1ba 0f00 	cmp.w	sl, #0
 8017aea:	d020      	beq.n	8017b2e <__multiply+0x11c>
 8017aec:	682b      	ldr	r3, [r5, #0]
 8017aee:	4689      	mov	r9, r1
 8017af0:	46a8      	mov	r8, r5
 8017af2:	f04f 0b00 	mov.w	fp, #0
 8017af6:	f8b9 c000 	ldrh.w	ip, [r9]
 8017afa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017afe:	fb0a 440c 	mla	r4, sl, ip, r4
 8017b02:	445c      	add	r4, fp
 8017b04:	46c4      	mov	ip, r8
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b0c:	f84c 3b04 	str.w	r3, [ip], #4
 8017b10:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017b18:	0c1b      	lsrs	r3, r3, #16
 8017b1a:	fb0a b303 	mla	r3, sl, r3, fp
 8017b1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017b22:	454f      	cmp	r7, r9
 8017b24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017b28:	d805      	bhi.n	8017b36 <__multiply+0x124>
 8017b2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8017b2e:	3504      	adds	r5, #4
 8017b30:	e79b      	b.n	8017a6a <__multiply+0x58>
 8017b32:	46d4      	mov	ip, sl
 8017b34:	e7b3      	b.n	8017a9e <__multiply+0x8c>
 8017b36:	46e0      	mov	r8, ip
 8017b38:	e7dd      	b.n	8017af6 <__multiply+0xe4>
 8017b3a:	3e01      	subs	r6, #1
 8017b3c:	e799      	b.n	8017a72 <__multiply+0x60>
	...

08017b40 <__pow5mult>:
 8017b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b44:	4615      	mov	r5, r2
 8017b46:	f012 0203 	ands.w	r2, r2, #3
 8017b4a:	4606      	mov	r6, r0
 8017b4c:	460f      	mov	r7, r1
 8017b4e:	d007      	beq.n	8017b60 <__pow5mult+0x20>
 8017b50:	3a01      	subs	r2, #1
 8017b52:	4c21      	ldr	r4, [pc, #132]	; (8017bd8 <__pow5mult+0x98>)
 8017b54:	2300      	movs	r3, #0
 8017b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b5a:	f7ff fe8a 	bl	8017872 <__multadd>
 8017b5e:	4607      	mov	r7, r0
 8017b60:	10ad      	asrs	r5, r5, #2
 8017b62:	d035      	beq.n	8017bd0 <__pow5mult+0x90>
 8017b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017b66:	b93c      	cbnz	r4, 8017b78 <__pow5mult+0x38>
 8017b68:	2010      	movs	r0, #16
 8017b6a:	f7ff fe1d 	bl	80177a8 <malloc>
 8017b6e:	6270      	str	r0, [r6, #36]	; 0x24
 8017b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b74:	6004      	str	r4, [r0, #0]
 8017b76:	60c4      	str	r4, [r0, #12]
 8017b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017b80:	b94c      	cbnz	r4, 8017b96 <__pow5mult+0x56>
 8017b82:	f240 2171 	movw	r1, #625	; 0x271
 8017b86:	4630      	mov	r0, r6
 8017b88:	f7ff ff3a 	bl	8017a00 <__i2b>
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017b92:	4604      	mov	r4, r0
 8017b94:	6003      	str	r3, [r0, #0]
 8017b96:	f04f 0800 	mov.w	r8, #0
 8017b9a:	07eb      	lsls	r3, r5, #31
 8017b9c:	d50a      	bpl.n	8017bb4 <__pow5mult+0x74>
 8017b9e:	4639      	mov	r1, r7
 8017ba0:	4622      	mov	r2, r4
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	f7ff ff35 	bl	8017a12 <__multiply>
 8017ba8:	4639      	mov	r1, r7
 8017baa:	4681      	mov	r9, r0
 8017bac:	4630      	mov	r0, r6
 8017bae:	f7ff fe49 	bl	8017844 <_Bfree>
 8017bb2:	464f      	mov	r7, r9
 8017bb4:	106d      	asrs	r5, r5, #1
 8017bb6:	d00b      	beq.n	8017bd0 <__pow5mult+0x90>
 8017bb8:	6820      	ldr	r0, [r4, #0]
 8017bba:	b938      	cbnz	r0, 8017bcc <__pow5mult+0x8c>
 8017bbc:	4622      	mov	r2, r4
 8017bbe:	4621      	mov	r1, r4
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f7ff ff26 	bl	8017a12 <__multiply>
 8017bc6:	6020      	str	r0, [r4, #0]
 8017bc8:	f8c0 8000 	str.w	r8, [r0]
 8017bcc:	4604      	mov	r4, r0
 8017bce:	e7e4      	b.n	8017b9a <__pow5mult+0x5a>
 8017bd0:	4638      	mov	r0, r7
 8017bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bd6:	bf00      	nop
 8017bd8:	08019728 	.word	0x08019728

08017bdc <__lshift>:
 8017bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017be0:	460c      	mov	r4, r1
 8017be2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017be6:	6923      	ldr	r3, [r4, #16]
 8017be8:	6849      	ldr	r1, [r1, #4]
 8017bea:	eb0a 0903 	add.w	r9, sl, r3
 8017bee:	68a3      	ldr	r3, [r4, #8]
 8017bf0:	4607      	mov	r7, r0
 8017bf2:	4616      	mov	r6, r2
 8017bf4:	f109 0501 	add.w	r5, r9, #1
 8017bf8:	42ab      	cmp	r3, r5
 8017bfa:	db32      	blt.n	8017c62 <__lshift+0x86>
 8017bfc:	4638      	mov	r0, r7
 8017bfe:	f7ff fded 	bl	80177dc <_Balloc>
 8017c02:	2300      	movs	r3, #0
 8017c04:	4680      	mov	r8, r0
 8017c06:	f100 0114 	add.w	r1, r0, #20
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	4553      	cmp	r3, sl
 8017c0e:	db2b      	blt.n	8017c68 <__lshift+0x8c>
 8017c10:	6920      	ldr	r0, [r4, #16]
 8017c12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c16:	f104 0314 	add.w	r3, r4, #20
 8017c1a:	f016 021f 	ands.w	r2, r6, #31
 8017c1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c26:	d025      	beq.n	8017c74 <__lshift+0x98>
 8017c28:	f1c2 0e20 	rsb	lr, r2, #32
 8017c2c:	2000      	movs	r0, #0
 8017c2e:	681e      	ldr	r6, [r3, #0]
 8017c30:	468a      	mov	sl, r1
 8017c32:	4096      	lsls	r6, r2
 8017c34:	4330      	orrs	r0, r6
 8017c36:	f84a 0b04 	str.w	r0, [sl], #4
 8017c3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8017c3e:	459c      	cmp	ip, r3
 8017c40:	fa20 f00e 	lsr.w	r0, r0, lr
 8017c44:	d814      	bhi.n	8017c70 <__lshift+0x94>
 8017c46:	6048      	str	r0, [r1, #4]
 8017c48:	b108      	cbz	r0, 8017c4e <__lshift+0x72>
 8017c4a:	f109 0502 	add.w	r5, r9, #2
 8017c4e:	3d01      	subs	r5, #1
 8017c50:	4638      	mov	r0, r7
 8017c52:	f8c8 5010 	str.w	r5, [r8, #16]
 8017c56:	4621      	mov	r1, r4
 8017c58:	f7ff fdf4 	bl	8017844 <_Bfree>
 8017c5c:	4640      	mov	r0, r8
 8017c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c62:	3101      	adds	r1, #1
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	e7c7      	b.n	8017bf8 <__lshift+0x1c>
 8017c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	e7cd      	b.n	8017c0c <__lshift+0x30>
 8017c70:	4651      	mov	r1, sl
 8017c72:	e7dc      	b.n	8017c2e <__lshift+0x52>
 8017c74:	3904      	subs	r1, #4
 8017c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c7e:	459c      	cmp	ip, r3
 8017c80:	d8f9      	bhi.n	8017c76 <__lshift+0x9a>
 8017c82:	e7e4      	b.n	8017c4e <__lshift+0x72>

08017c84 <__mcmp>:
 8017c84:	6903      	ldr	r3, [r0, #16]
 8017c86:	690a      	ldr	r2, [r1, #16]
 8017c88:	1a9b      	subs	r3, r3, r2
 8017c8a:	b530      	push	{r4, r5, lr}
 8017c8c:	d10c      	bne.n	8017ca8 <__mcmp+0x24>
 8017c8e:	0092      	lsls	r2, r2, #2
 8017c90:	3014      	adds	r0, #20
 8017c92:	3114      	adds	r1, #20
 8017c94:	1884      	adds	r4, r0, r2
 8017c96:	4411      	add	r1, r2
 8017c98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017ca0:	4295      	cmp	r5, r2
 8017ca2:	d003      	beq.n	8017cac <__mcmp+0x28>
 8017ca4:	d305      	bcc.n	8017cb2 <__mcmp+0x2e>
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	4618      	mov	r0, r3
 8017caa:	bd30      	pop	{r4, r5, pc}
 8017cac:	42a0      	cmp	r0, r4
 8017cae:	d3f3      	bcc.n	8017c98 <__mcmp+0x14>
 8017cb0:	e7fa      	b.n	8017ca8 <__mcmp+0x24>
 8017cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8017cb6:	e7f7      	b.n	8017ca8 <__mcmp+0x24>

08017cb8 <__mdiff>:
 8017cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cbc:	460d      	mov	r5, r1
 8017cbe:	4607      	mov	r7, r0
 8017cc0:	4611      	mov	r1, r2
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	4614      	mov	r4, r2
 8017cc6:	f7ff ffdd 	bl	8017c84 <__mcmp>
 8017cca:	1e06      	subs	r6, r0, #0
 8017ccc:	d108      	bne.n	8017ce0 <__mdiff+0x28>
 8017cce:	4631      	mov	r1, r6
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	f7ff fd83 	bl	80177dc <_Balloc>
 8017cd6:	2301      	movs	r3, #1
 8017cd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ce0:	bfa4      	itt	ge
 8017ce2:	4623      	movge	r3, r4
 8017ce4:	462c      	movge	r4, r5
 8017ce6:	4638      	mov	r0, r7
 8017ce8:	6861      	ldr	r1, [r4, #4]
 8017cea:	bfa6      	itte	ge
 8017cec:	461d      	movge	r5, r3
 8017cee:	2600      	movge	r6, #0
 8017cf0:	2601      	movlt	r6, #1
 8017cf2:	f7ff fd73 	bl	80177dc <_Balloc>
 8017cf6:	692b      	ldr	r3, [r5, #16]
 8017cf8:	60c6      	str	r6, [r0, #12]
 8017cfa:	6926      	ldr	r6, [r4, #16]
 8017cfc:	f105 0914 	add.w	r9, r5, #20
 8017d00:	f104 0214 	add.w	r2, r4, #20
 8017d04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017d08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017d0c:	f100 0514 	add.w	r5, r0, #20
 8017d10:	f04f 0e00 	mov.w	lr, #0
 8017d14:	f852 ab04 	ldr.w	sl, [r2], #4
 8017d18:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d1c:	fa1e f18a 	uxtah	r1, lr, sl
 8017d20:	b2a3      	uxth	r3, r4
 8017d22:	1ac9      	subs	r1, r1, r3
 8017d24:	0c23      	lsrs	r3, r4, #16
 8017d26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017d2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017d2e:	b289      	uxth	r1, r1
 8017d30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017d34:	45c8      	cmp	r8, r9
 8017d36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017d3a:	4694      	mov	ip, r2
 8017d3c:	f845 3b04 	str.w	r3, [r5], #4
 8017d40:	d8e8      	bhi.n	8017d14 <__mdiff+0x5c>
 8017d42:	45bc      	cmp	ip, r7
 8017d44:	d304      	bcc.n	8017d50 <__mdiff+0x98>
 8017d46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017d4a:	b183      	cbz	r3, 8017d6e <__mdiff+0xb6>
 8017d4c:	6106      	str	r6, [r0, #16]
 8017d4e:	e7c5      	b.n	8017cdc <__mdiff+0x24>
 8017d50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d54:	fa1e f381 	uxtah	r3, lr, r1
 8017d58:	141a      	asrs	r2, r3, #16
 8017d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017d68:	f845 3b04 	str.w	r3, [r5], #4
 8017d6c:	e7e9      	b.n	8017d42 <__mdiff+0x8a>
 8017d6e:	3e01      	subs	r6, #1
 8017d70:	e7e9      	b.n	8017d46 <__mdiff+0x8e>
	...

08017d74 <__ulp>:
 8017d74:	4b12      	ldr	r3, [pc, #72]	; (8017dc0 <__ulp+0x4c>)
 8017d76:	ee10 2a90 	vmov	r2, s1
 8017d7a:	401a      	ands	r2, r3
 8017d7c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	dd04      	ble.n	8017d8e <__ulp+0x1a>
 8017d84:	2000      	movs	r0, #0
 8017d86:	4619      	mov	r1, r3
 8017d88:	ec41 0b10 	vmov	d0, r0, r1
 8017d8c:	4770      	bx	lr
 8017d8e:	425b      	negs	r3, r3
 8017d90:	151b      	asrs	r3, r3, #20
 8017d92:	2b13      	cmp	r3, #19
 8017d94:	f04f 0000 	mov.w	r0, #0
 8017d98:	f04f 0100 	mov.w	r1, #0
 8017d9c:	dc04      	bgt.n	8017da8 <__ulp+0x34>
 8017d9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017da2:	fa42 f103 	asr.w	r1, r2, r3
 8017da6:	e7ef      	b.n	8017d88 <__ulp+0x14>
 8017da8:	3b14      	subs	r3, #20
 8017daa:	2b1e      	cmp	r3, #30
 8017dac:	f04f 0201 	mov.w	r2, #1
 8017db0:	bfda      	itte	le
 8017db2:	f1c3 031f 	rsble	r3, r3, #31
 8017db6:	fa02 f303 	lslle.w	r3, r2, r3
 8017dba:	4613      	movgt	r3, r2
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	e7e3      	b.n	8017d88 <__ulp+0x14>
 8017dc0:	7ff00000 	.word	0x7ff00000

08017dc4 <__b2d>:
 8017dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dc6:	6905      	ldr	r5, [r0, #16]
 8017dc8:	f100 0714 	add.w	r7, r0, #20
 8017dcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017dd0:	1f2e      	subs	r6, r5, #4
 8017dd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f7ff fdc4 	bl	8017964 <__hi0bits>
 8017ddc:	f1c0 0320 	rsb	r3, r0, #32
 8017de0:	280a      	cmp	r0, #10
 8017de2:	600b      	str	r3, [r1, #0]
 8017de4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017e5c <__b2d+0x98>
 8017de8:	dc14      	bgt.n	8017e14 <__b2d+0x50>
 8017dea:	f1c0 0e0b 	rsb	lr, r0, #11
 8017dee:	fa24 f10e 	lsr.w	r1, r4, lr
 8017df2:	42b7      	cmp	r7, r6
 8017df4:	ea41 030c 	orr.w	r3, r1, ip
 8017df8:	bf34      	ite	cc
 8017dfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017dfe:	2100      	movcs	r1, #0
 8017e00:	3015      	adds	r0, #21
 8017e02:	fa04 f000 	lsl.w	r0, r4, r0
 8017e06:	fa21 f10e 	lsr.w	r1, r1, lr
 8017e0a:	ea40 0201 	orr.w	r2, r0, r1
 8017e0e:	ec43 2b10 	vmov	d0, r2, r3
 8017e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e14:	42b7      	cmp	r7, r6
 8017e16:	bf3a      	itte	cc
 8017e18:	f1a5 0608 	subcc.w	r6, r5, #8
 8017e1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017e20:	2100      	movcs	r1, #0
 8017e22:	380b      	subs	r0, #11
 8017e24:	d015      	beq.n	8017e52 <__b2d+0x8e>
 8017e26:	4084      	lsls	r4, r0
 8017e28:	f1c0 0520 	rsb	r5, r0, #32
 8017e2c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017e30:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017e34:	42be      	cmp	r6, r7
 8017e36:	fa21 fc05 	lsr.w	ip, r1, r5
 8017e3a:	ea44 030c 	orr.w	r3, r4, ip
 8017e3e:	bf8c      	ite	hi
 8017e40:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017e44:	2400      	movls	r4, #0
 8017e46:	fa01 f000 	lsl.w	r0, r1, r0
 8017e4a:	40ec      	lsrs	r4, r5
 8017e4c:	ea40 0204 	orr.w	r2, r0, r4
 8017e50:	e7dd      	b.n	8017e0e <__b2d+0x4a>
 8017e52:	ea44 030c 	orr.w	r3, r4, ip
 8017e56:	460a      	mov	r2, r1
 8017e58:	e7d9      	b.n	8017e0e <__b2d+0x4a>
 8017e5a:	bf00      	nop
 8017e5c:	3ff00000 	.word	0x3ff00000

08017e60 <__d2b>:
 8017e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e64:	460e      	mov	r6, r1
 8017e66:	2101      	movs	r1, #1
 8017e68:	ec59 8b10 	vmov	r8, r9, d0
 8017e6c:	4615      	mov	r5, r2
 8017e6e:	f7ff fcb5 	bl	80177dc <_Balloc>
 8017e72:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017e76:	4607      	mov	r7, r0
 8017e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e7c:	bb34      	cbnz	r4, 8017ecc <__d2b+0x6c>
 8017e7e:	9301      	str	r3, [sp, #4]
 8017e80:	f1b8 0300 	subs.w	r3, r8, #0
 8017e84:	d027      	beq.n	8017ed6 <__d2b+0x76>
 8017e86:	a802      	add	r0, sp, #8
 8017e88:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017e8c:	f7ff fd89 	bl	80179a2 <__lo0bits>
 8017e90:	9900      	ldr	r1, [sp, #0]
 8017e92:	b1f0      	cbz	r0, 8017ed2 <__d2b+0x72>
 8017e94:	9a01      	ldr	r2, [sp, #4]
 8017e96:	f1c0 0320 	rsb	r3, r0, #32
 8017e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8017e9e:	430b      	orrs	r3, r1
 8017ea0:	40c2      	lsrs	r2, r0
 8017ea2:	617b      	str	r3, [r7, #20]
 8017ea4:	9201      	str	r2, [sp, #4]
 8017ea6:	9b01      	ldr	r3, [sp, #4]
 8017ea8:	61bb      	str	r3, [r7, #24]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	bf14      	ite	ne
 8017eae:	2102      	movne	r1, #2
 8017eb0:	2101      	moveq	r1, #1
 8017eb2:	6139      	str	r1, [r7, #16]
 8017eb4:	b1c4      	cbz	r4, 8017ee8 <__d2b+0x88>
 8017eb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017eba:	4404      	add	r4, r0
 8017ebc:	6034      	str	r4, [r6, #0]
 8017ebe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017ec2:	6028      	str	r0, [r5, #0]
 8017ec4:	4638      	mov	r0, r7
 8017ec6:	b003      	add	sp, #12
 8017ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017ed0:	e7d5      	b.n	8017e7e <__d2b+0x1e>
 8017ed2:	6179      	str	r1, [r7, #20]
 8017ed4:	e7e7      	b.n	8017ea6 <__d2b+0x46>
 8017ed6:	a801      	add	r0, sp, #4
 8017ed8:	f7ff fd63 	bl	80179a2 <__lo0bits>
 8017edc:	9b01      	ldr	r3, [sp, #4]
 8017ede:	617b      	str	r3, [r7, #20]
 8017ee0:	2101      	movs	r1, #1
 8017ee2:	6139      	str	r1, [r7, #16]
 8017ee4:	3020      	adds	r0, #32
 8017ee6:	e7e5      	b.n	8017eb4 <__d2b+0x54>
 8017ee8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017ef0:	6030      	str	r0, [r6, #0]
 8017ef2:	6918      	ldr	r0, [r3, #16]
 8017ef4:	f7ff fd36 	bl	8017964 <__hi0bits>
 8017ef8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017efc:	e7e1      	b.n	8017ec2 <__d2b+0x62>

08017efe <__ratio>:
 8017efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f02:	4688      	mov	r8, r1
 8017f04:	4669      	mov	r1, sp
 8017f06:	4681      	mov	r9, r0
 8017f08:	f7ff ff5c 	bl	8017dc4 <__b2d>
 8017f0c:	a901      	add	r1, sp, #4
 8017f0e:	4640      	mov	r0, r8
 8017f10:	ec57 6b10 	vmov	r6, r7, d0
 8017f14:	f7ff ff56 	bl	8017dc4 <__b2d>
 8017f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017f1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017f20:	eba3 0c02 	sub.w	ip, r3, r2
 8017f24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017f28:	1a9b      	subs	r3, r3, r2
 8017f2a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017f2e:	ec5b ab10 	vmov	sl, fp, d0
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	bfce      	itee	gt
 8017f36:	463a      	movgt	r2, r7
 8017f38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017f3c:	465a      	movle	r2, fp
 8017f3e:	4659      	mov	r1, fp
 8017f40:	463d      	mov	r5, r7
 8017f42:	bfd4      	ite	le
 8017f44:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017f48:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	ee10 2a10 	vmov	r2, s0
 8017f52:	460b      	mov	r3, r1
 8017f54:	4629      	mov	r1, r5
 8017f56:	f7e8 fc91 	bl	800087c <__aeabi_ddiv>
 8017f5a:	ec41 0b10 	vmov	d0, r0, r1
 8017f5e:	b003      	add	sp, #12
 8017f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f64 <__copybits>:
 8017f64:	3901      	subs	r1, #1
 8017f66:	b510      	push	{r4, lr}
 8017f68:	1149      	asrs	r1, r1, #5
 8017f6a:	6914      	ldr	r4, [r2, #16]
 8017f6c:	3101      	adds	r1, #1
 8017f6e:	f102 0314 	add.w	r3, r2, #20
 8017f72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017f7a:	42a3      	cmp	r3, r4
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	d303      	bcc.n	8017f88 <__copybits+0x24>
 8017f80:	2300      	movs	r3, #0
 8017f82:	428a      	cmp	r2, r1
 8017f84:	d305      	bcc.n	8017f92 <__copybits+0x2e>
 8017f86:	bd10      	pop	{r4, pc}
 8017f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f8c:	f840 2b04 	str.w	r2, [r0], #4
 8017f90:	e7f3      	b.n	8017f7a <__copybits+0x16>
 8017f92:	f842 3b04 	str.w	r3, [r2], #4
 8017f96:	e7f4      	b.n	8017f82 <__copybits+0x1e>

08017f98 <__any_on>:
 8017f98:	f100 0214 	add.w	r2, r0, #20
 8017f9c:	6900      	ldr	r0, [r0, #16]
 8017f9e:	114b      	asrs	r3, r1, #5
 8017fa0:	4298      	cmp	r0, r3
 8017fa2:	b510      	push	{r4, lr}
 8017fa4:	db11      	blt.n	8017fca <__any_on+0x32>
 8017fa6:	dd0a      	ble.n	8017fbe <__any_on+0x26>
 8017fa8:	f011 011f 	ands.w	r1, r1, #31
 8017fac:	d007      	beq.n	8017fbe <__any_on+0x26>
 8017fae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017fb2:	fa24 f001 	lsr.w	r0, r4, r1
 8017fb6:	fa00 f101 	lsl.w	r1, r0, r1
 8017fba:	428c      	cmp	r4, r1
 8017fbc:	d10b      	bne.n	8017fd6 <__any_on+0x3e>
 8017fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017fc2:	4293      	cmp	r3, r2
 8017fc4:	d803      	bhi.n	8017fce <__any_on+0x36>
 8017fc6:	2000      	movs	r0, #0
 8017fc8:	bd10      	pop	{r4, pc}
 8017fca:	4603      	mov	r3, r0
 8017fcc:	e7f7      	b.n	8017fbe <__any_on+0x26>
 8017fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017fd2:	2900      	cmp	r1, #0
 8017fd4:	d0f5      	beq.n	8017fc2 <__any_on+0x2a>
 8017fd6:	2001      	movs	r0, #1
 8017fd8:	e7f6      	b.n	8017fc8 <__any_on+0x30>

08017fda <_calloc_r>:
 8017fda:	b538      	push	{r3, r4, r5, lr}
 8017fdc:	fb02 f401 	mul.w	r4, r2, r1
 8017fe0:	4621      	mov	r1, r4
 8017fe2:	f000 f857 	bl	8018094 <_malloc_r>
 8017fe6:	4605      	mov	r5, r0
 8017fe8:	b118      	cbz	r0, 8017ff2 <_calloc_r+0x18>
 8017fea:	4622      	mov	r2, r4
 8017fec:	2100      	movs	r1, #0
 8017fee:	f7fc fcaa 	bl	8014946 <memset>
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

08017ff8 <_free_r>:
 8017ff8:	b538      	push	{r3, r4, r5, lr}
 8017ffa:	4605      	mov	r5, r0
 8017ffc:	2900      	cmp	r1, #0
 8017ffe:	d045      	beq.n	801808c <_free_r+0x94>
 8018000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018004:	1f0c      	subs	r4, r1, #4
 8018006:	2b00      	cmp	r3, #0
 8018008:	bfb8      	it	lt
 801800a:	18e4      	addlt	r4, r4, r3
 801800c:	f000 fe30 	bl	8018c70 <__malloc_lock>
 8018010:	4a1f      	ldr	r2, [pc, #124]	; (8018090 <_free_r+0x98>)
 8018012:	6813      	ldr	r3, [r2, #0]
 8018014:	4610      	mov	r0, r2
 8018016:	b933      	cbnz	r3, 8018026 <_free_r+0x2e>
 8018018:	6063      	str	r3, [r4, #4]
 801801a:	6014      	str	r4, [r2, #0]
 801801c:	4628      	mov	r0, r5
 801801e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018022:	f000 be26 	b.w	8018c72 <__malloc_unlock>
 8018026:	42a3      	cmp	r3, r4
 8018028:	d90c      	bls.n	8018044 <_free_r+0x4c>
 801802a:	6821      	ldr	r1, [r4, #0]
 801802c:	1862      	adds	r2, r4, r1
 801802e:	4293      	cmp	r3, r2
 8018030:	bf04      	itt	eq
 8018032:	681a      	ldreq	r2, [r3, #0]
 8018034:	685b      	ldreq	r3, [r3, #4]
 8018036:	6063      	str	r3, [r4, #4]
 8018038:	bf04      	itt	eq
 801803a:	1852      	addeq	r2, r2, r1
 801803c:	6022      	streq	r2, [r4, #0]
 801803e:	6004      	str	r4, [r0, #0]
 8018040:	e7ec      	b.n	801801c <_free_r+0x24>
 8018042:	4613      	mov	r3, r2
 8018044:	685a      	ldr	r2, [r3, #4]
 8018046:	b10a      	cbz	r2, 801804c <_free_r+0x54>
 8018048:	42a2      	cmp	r2, r4
 801804a:	d9fa      	bls.n	8018042 <_free_r+0x4a>
 801804c:	6819      	ldr	r1, [r3, #0]
 801804e:	1858      	adds	r0, r3, r1
 8018050:	42a0      	cmp	r0, r4
 8018052:	d10b      	bne.n	801806c <_free_r+0x74>
 8018054:	6820      	ldr	r0, [r4, #0]
 8018056:	4401      	add	r1, r0
 8018058:	1858      	adds	r0, r3, r1
 801805a:	4282      	cmp	r2, r0
 801805c:	6019      	str	r1, [r3, #0]
 801805e:	d1dd      	bne.n	801801c <_free_r+0x24>
 8018060:	6810      	ldr	r0, [r2, #0]
 8018062:	6852      	ldr	r2, [r2, #4]
 8018064:	605a      	str	r2, [r3, #4]
 8018066:	4401      	add	r1, r0
 8018068:	6019      	str	r1, [r3, #0]
 801806a:	e7d7      	b.n	801801c <_free_r+0x24>
 801806c:	d902      	bls.n	8018074 <_free_r+0x7c>
 801806e:	230c      	movs	r3, #12
 8018070:	602b      	str	r3, [r5, #0]
 8018072:	e7d3      	b.n	801801c <_free_r+0x24>
 8018074:	6820      	ldr	r0, [r4, #0]
 8018076:	1821      	adds	r1, r4, r0
 8018078:	428a      	cmp	r2, r1
 801807a:	bf04      	itt	eq
 801807c:	6811      	ldreq	r1, [r2, #0]
 801807e:	6852      	ldreq	r2, [r2, #4]
 8018080:	6062      	str	r2, [r4, #4]
 8018082:	bf04      	itt	eq
 8018084:	1809      	addeq	r1, r1, r0
 8018086:	6021      	streq	r1, [r4, #0]
 8018088:	605c      	str	r4, [r3, #4]
 801808a:	e7c7      	b.n	801801c <_free_r+0x24>
 801808c:	bd38      	pop	{r3, r4, r5, pc}
 801808e:	bf00      	nop
 8018090:	2003c4d0 	.word	0x2003c4d0

08018094 <_malloc_r>:
 8018094:	b570      	push	{r4, r5, r6, lr}
 8018096:	1ccd      	adds	r5, r1, #3
 8018098:	f025 0503 	bic.w	r5, r5, #3
 801809c:	3508      	adds	r5, #8
 801809e:	2d0c      	cmp	r5, #12
 80180a0:	bf38      	it	cc
 80180a2:	250c      	movcc	r5, #12
 80180a4:	2d00      	cmp	r5, #0
 80180a6:	4606      	mov	r6, r0
 80180a8:	db01      	blt.n	80180ae <_malloc_r+0x1a>
 80180aa:	42a9      	cmp	r1, r5
 80180ac:	d903      	bls.n	80180b6 <_malloc_r+0x22>
 80180ae:	230c      	movs	r3, #12
 80180b0:	6033      	str	r3, [r6, #0]
 80180b2:	2000      	movs	r0, #0
 80180b4:	bd70      	pop	{r4, r5, r6, pc}
 80180b6:	f000 fddb 	bl	8018c70 <__malloc_lock>
 80180ba:	4a21      	ldr	r2, [pc, #132]	; (8018140 <_malloc_r+0xac>)
 80180bc:	6814      	ldr	r4, [r2, #0]
 80180be:	4621      	mov	r1, r4
 80180c0:	b991      	cbnz	r1, 80180e8 <_malloc_r+0x54>
 80180c2:	4c20      	ldr	r4, [pc, #128]	; (8018144 <_malloc_r+0xb0>)
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	b91b      	cbnz	r3, 80180d0 <_malloc_r+0x3c>
 80180c8:	4630      	mov	r0, r6
 80180ca:	f000 fc91 	bl	80189f0 <_sbrk_r>
 80180ce:	6020      	str	r0, [r4, #0]
 80180d0:	4629      	mov	r1, r5
 80180d2:	4630      	mov	r0, r6
 80180d4:	f000 fc8c 	bl	80189f0 <_sbrk_r>
 80180d8:	1c43      	adds	r3, r0, #1
 80180da:	d124      	bne.n	8018126 <_malloc_r+0x92>
 80180dc:	230c      	movs	r3, #12
 80180de:	6033      	str	r3, [r6, #0]
 80180e0:	4630      	mov	r0, r6
 80180e2:	f000 fdc6 	bl	8018c72 <__malloc_unlock>
 80180e6:	e7e4      	b.n	80180b2 <_malloc_r+0x1e>
 80180e8:	680b      	ldr	r3, [r1, #0]
 80180ea:	1b5b      	subs	r3, r3, r5
 80180ec:	d418      	bmi.n	8018120 <_malloc_r+0x8c>
 80180ee:	2b0b      	cmp	r3, #11
 80180f0:	d90f      	bls.n	8018112 <_malloc_r+0x7e>
 80180f2:	600b      	str	r3, [r1, #0]
 80180f4:	50cd      	str	r5, [r1, r3]
 80180f6:	18cc      	adds	r4, r1, r3
 80180f8:	4630      	mov	r0, r6
 80180fa:	f000 fdba 	bl	8018c72 <__malloc_unlock>
 80180fe:	f104 000b 	add.w	r0, r4, #11
 8018102:	1d23      	adds	r3, r4, #4
 8018104:	f020 0007 	bic.w	r0, r0, #7
 8018108:	1ac3      	subs	r3, r0, r3
 801810a:	d0d3      	beq.n	80180b4 <_malloc_r+0x20>
 801810c:	425a      	negs	r2, r3
 801810e:	50e2      	str	r2, [r4, r3]
 8018110:	e7d0      	b.n	80180b4 <_malloc_r+0x20>
 8018112:	428c      	cmp	r4, r1
 8018114:	684b      	ldr	r3, [r1, #4]
 8018116:	bf16      	itet	ne
 8018118:	6063      	strne	r3, [r4, #4]
 801811a:	6013      	streq	r3, [r2, #0]
 801811c:	460c      	movne	r4, r1
 801811e:	e7eb      	b.n	80180f8 <_malloc_r+0x64>
 8018120:	460c      	mov	r4, r1
 8018122:	6849      	ldr	r1, [r1, #4]
 8018124:	e7cc      	b.n	80180c0 <_malloc_r+0x2c>
 8018126:	1cc4      	adds	r4, r0, #3
 8018128:	f024 0403 	bic.w	r4, r4, #3
 801812c:	42a0      	cmp	r0, r4
 801812e:	d005      	beq.n	801813c <_malloc_r+0xa8>
 8018130:	1a21      	subs	r1, r4, r0
 8018132:	4630      	mov	r0, r6
 8018134:	f000 fc5c 	bl	80189f0 <_sbrk_r>
 8018138:	3001      	adds	r0, #1
 801813a:	d0cf      	beq.n	80180dc <_malloc_r+0x48>
 801813c:	6025      	str	r5, [r4, #0]
 801813e:	e7db      	b.n	80180f8 <_malloc_r+0x64>
 8018140:	2003c4d0 	.word	0x2003c4d0
 8018144:	2003c4d4 	.word	0x2003c4d4

08018148 <__ssputs_r>:
 8018148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801814c:	688e      	ldr	r6, [r1, #8]
 801814e:	429e      	cmp	r6, r3
 8018150:	4682      	mov	sl, r0
 8018152:	460c      	mov	r4, r1
 8018154:	4690      	mov	r8, r2
 8018156:	4699      	mov	r9, r3
 8018158:	d837      	bhi.n	80181ca <__ssputs_r+0x82>
 801815a:	898a      	ldrh	r2, [r1, #12]
 801815c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018160:	d031      	beq.n	80181c6 <__ssputs_r+0x7e>
 8018162:	6825      	ldr	r5, [r4, #0]
 8018164:	6909      	ldr	r1, [r1, #16]
 8018166:	1a6f      	subs	r7, r5, r1
 8018168:	6965      	ldr	r5, [r4, #20]
 801816a:	2302      	movs	r3, #2
 801816c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018170:	fb95 f5f3 	sdiv	r5, r5, r3
 8018174:	f109 0301 	add.w	r3, r9, #1
 8018178:	443b      	add	r3, r7
 801817a:	429d      	cmp	r5, r3
 801817c:	bf38      	it	cc
 801817e:	461d      	movcc	r5, r3
 8018180:	0553      	lsls	r3, r2, #21
 8018182:	d530      	bpl.n	80181e6 <__ssputs_r+0x9e>
 8018184:	4629      	mov	r1, r5
 8018186:	f7ff ff85 	bl	8018094 <_malloc_r>
 801818a:	4606      	mov	r6, r0
 801818c:	b950      	cbnz	r0, 80181a4 <__ssputs_r+0x5c>
 801818e:	230c      	movs	r3, #12
 8018190:	f8ca 3000 	str.w	r3, [sl]
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801819a:	81a3      	strh	r3, [r4, #12]
 801819c:	f04f 30ff 	mov.w	r0, #4294967295
 80181a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181a4:	463a      	mov	r2, r7
 80181a6:	6921      	ldr	r1, [r4, #16]
 80181a8:	f7fc fbc2 	bl	8014930 <memcpy>
 80181ac:	89a3      	ldrh	r3, [r4, #12]
 80181ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80181b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181b6:	81a3      	strh	r3, [r4, #12]
 80181b8:	6126      	str	r6, [r4, #16]
 80181ba:	6165      	str	r5, [r4, #20]
 80181bc:	443e      	add	r6, r7
 80181be:	1bed      	subs	r5, r5, r7
 80181c0:	6026      	str	r6, [r4, #0]
 80181c2:	60a5      	str	r5, [r4, #8]
 80181c4:	464e      	mov	r6, r9
 80181c6:	454e      	cmp	r6, r9
 80181c8:	d900      	bls.n	80181cc <__ssputs_r+0x84>
 80181ca:	464e      	mov	r6, r9
 80181cc:	4632      	mov	r2, r6
 80181ce:	4641      	mov	r1, r8
 80181d0:	6820      	ldr	r0, [r4, #0]
 80181d2:	f000 fd34 	bl	8018c3e <memmove>
 80181d6:	68a3      	ldr	r3, [r4, #8]
 80181d8:	1b9b      	subs	r3, r3, r6
 80181da:	60a3      	str	r3, [r4, #8]
 80181dc:	6823      	ldr	r3, [r4, #0]
 80181de:	441e      	add	r6, r3
 80181e0:	6026      	str	r6, [r4, #0]
 80181e2:	2000      	movs	r0, #0
 80181e4:	e7dc      	b.n	80181a0 <__ssputs_r+0x58>
 80181e6:	462a      	mov	r2, r5
 80181e8:	f000 fd44 	bl	8018c74 <_realloc_r>
 80181ec:	4606      	mov	r6, r0
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d1e2      	bne.n	80181b8 <__ssputs_r+0x70>
 80181f2:	6921      	ldr	r1, [r4, #16]
 80181f4:	4650      	mov	r0, sl
 80181f6:	f7ff feff 	bl	8017ff8 <_free_r>
 80181fa:	e7c8      	b.n	801818e <__ssputs_r+0x46>

080181fc <_svfiprintf_r>:
 80181fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018200:	461d      	mov	r5, r3
 8018202:	898b      	ldrh	r3, [r1, #12]
 8018204:	061f      	lsls	r7, r3, #24
 8018206:	b09d      	sub	sp, #116	; 0x74
 8018208:	4680      	mov	r8, r0
 801820a:	460c      	mov	r4, r1
 801820c:	4616      	mov	r6, r2
 801820e:	d50f      	bpl.n	8018230 <_svfiprintf_r+0x34>
 8018210:	690b      	ldr	r3, [r1, #16]
 8018212:	b96b      	cbnz	r3, 8018230 <_svfiprintf_r+0x34>
 8018214:	2140      	movs	r1, #64	; 0x40
 8018216:	f7ff ff3d 	bl	8018094 <_malloc_r>
 801821a:	6020      	str	r0, [r4, #0]
 801821c:	6120      	str	r0, [r4, #16]
 801821e:	b928      	cbnz	r0, 801822c <_svfiprintf_r+0x30>
 8018220:	230c      	movs	r3, #12
 8018222:	f8c8 3000 	str.w	r3, [r8]
 8018226:	f04f 30ff 	mov.w	r0, #4294967295
 801822a:	e0c8      	b.n	80183be <_svfiprintf_r+0x1c2>
 801822c:	2340      	movs	r3, #64	; 0x40
 801822e:	6163      	str	r3, [r4, #20]
 8018230:	2300      	movs	r3, #0
 8018232:	9309      	str	r3, [sp, #36]	; 0x24
 8018234:	2320      	movs	r3, #32
 8018236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801823a:	2330      	movs	r3, #48	; 0x30
 801823c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018240:	9503      	str	r5, [sp, #12]
 8018242:	f04f 0b01 	mov.w	fp, #1
 8018246:	4637      	mov	r7, r6
 8018248:	463d      	mov	r5, r7
 801824a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801824e:	b10b      	cbz	r3, 8018254 <_svfiprintf_r+0x58>
 8018250:	2b25      	cmp	r3, #37	; 0x25
 8018252:	d13e      	bne.n	80182d2 <_svfiprintf_r+0xd6>
 8018254:	ebb7 0a06 	subs.w	sl, r7, r6
 8018258:	d00b      	beq.n	8018272 <_svfiprintf_r+0x76>
 801825a:	4653      	mov	r3, sl
 801825c:	4632      	mov	r2, r6
 801825e:	4621      	mov	r1, r4
 8018260:	4640      	mov	r0, r8
 8018262:	f7ff ff71 	bl	8018148 <__ssputs_r>
 8018266:	3001      	adds	r0, #1
 8018268:	f000 80a4 	beq.w	80183b4 <_svfiprintf_r+0x1b8>
 801826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801826e:	4453      	add	r3, sl
 8018270:	9309      	str	r3, [sp, #36]	; 0x24
 8018272:	783b      	ldrb	r3, [r7, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	f000 809d 	beq.w	80183b4 <_svfiprintf_r+0x1b8>
 801827a:	2300      	movs	r3, #0
 801827c:	f04f 32ff 	mov.w	r2, #4294967295
 8018280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018284:	9304      	str	r3, [sp, #16]
 8018286:	9307      	str	r3, [sp, #28]
 8018288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801828c:	931a      	str	r3, [sp, #104]	; 0x68
 801828e:	462f      	mov	r7, r5
 8018290:	2205      	movs	r2, #5
 8018292:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018296:	4850      	ldr	r0, [pc, #320]	; (80183d8 <_svfiprintf_r+0x1dc>)
 8018298:	f7e7 ffba 	bl	8000210 <memchr>
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	b9d0      	cbnz	r0, 80182d6 <_svfiprintf_r+0xda>
 80182a0:	06d9      	lsls	r1, r3, #27
 80182a2:	bf44      	itt	mi
 80182a4:	2220      	movmi	r2, #32
 80182a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80182aa:	071a      	lsls	r2, r3, #28
 80182ac:	bf44      	itt	mi
 80182ae:	222b      	movmi	r2, #43	; 0x2b
 80182b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80182b4:	782a      	ldrb	r2, [r5, #0]
 80182b6:	2a2a      	cmp	r2, #42	; 0x2a
 80182b8:	d015      	beq.n	80182e6 <_svfiprintf_r+0xea>
 80182ba:	9a07      	ldr	r2, [sp, #28]
 80182bc:	462f      	mov	r7, r5
 80182be:	2000      	movs	r0, #0
 80182c0:	250a      	movs	r5, #10
 80182c2:	4639      	mov	r1, r7
 80182c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182c8:	3b30      	subs	r3, #48	; 0x30
 80182ca:	2b09      	cmp	r3, #9
 80182cc:	d94d      	bls.n	801836a <_svfiprintf_r+0x16e>
 80182ce:	b1b8      	cbz	r0, 8018300 <_svfiprintf_r+0x104>
 80182d0:	e00f      	b.n	80182f2 <_svfiprintf_r+0xf6>
 80182d2:	462f      	mov	r7, r5
 80182d4:	e7b8      	b.n	8018248 <_svfiprintf_r+0x4c>
 80182d6:	4a40      	ldr	r2, [pc, #256]	; (80183d8 <_svfiprintf_r+0x1dc>)
 80182d8:	1a80      	subs	r0, r0, r2
 80182da:	fa0b f000 	lsl.w	r0, fp, r0
 80182de:	4318      	orrs	r0, r3
 80182e0:	9004      	str	r0, [sp, #16]
 80182e2:	463d      	mov	r5, r7
 80182e4:	e7d3      	b.n	801828e <_svfiprintf_r+0x92>
 80182e6:	9a03      	ldr	r2, [sp, #12]
 80182e8:	1d11      	adds	r1, r2, #4
 80182ea:	6812      	ldr	r2, [r2, #0]
 80182ec:	9103      	str	r1, [sp, #12]
 80182ee:	2a00      	cmp	r2, #0
 80182f0:	db01      	blt.n	80182f6 <_svfiprintf_r+0xfa>
 80182f2:	9207      	str	r2, [sp, #28]
 80182f4:	e004      	b.n	8018300 <_svfiprintf_r+0x104>
 80182f6:	4252      	negs	r2, r2
 80182f8:	f043 0302 	orr.w	r3, r3, #2
 80182fc:	9207      	str	r2, [sp, #28]
 80182fe:	9304      	str	r3, [sp, #16]
 8018300:	783b      	ldrb	r3, [r7, #0]
 8018302:	2b2e      	cmp	r3, #46	; 0x2e
 8018304:	d10c      	bne.n	8018320 <_svfiprintf_r+0x124>
 8018306:	787b      	ldrb	r3, [r7, #1]
 8018308:	2b2a      	cmp	r3, #42	; 0x2a
 801830a:	d133      	bne.n	8018374 <_svfiprintf_r+0x178>
 801830c:	9b03      	ldr	r3, [sp, #12]
 801830e:	1d1a      	adds	r2, r3, #4
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	9203      	str	r2, [sp, #12]
 8018314:	2b00      	cmp	r3, #0
 8018316:	bfb8      	it	lt
 8018318:	f04f 33ff 	movlt.w	r3, #4294967295
 801831c:	3702      	adds	r7, #2
 801831e:	9305      	str	r3, [sp, #20]
 8018320:	4d2e      	ldr	r5, [pc, #184]	; (80183dc <_svfiprintf_r+0x1e0>)
 8018322:	7839      	ldrb	r1, [r7, #0]
 8018324:	2203      	movs	r2, #3
 8018326:	4628      	mov	r0, r5
 8018328:	f7e7 ff72 	bl	8000210 <memchr>
 801832c:	b138      	cbz	r0, 801833e <_svfiprintf_r+0x142>
 801832e:	2340      	movs	r3, #64	; 0x40
 8018330:	1b40      	subs	r0, r0, r5
 8018332:	fa03 f000 	lsl.w	r0, r3, r0
 8018336:	9b04      	ldr	r3, [sp, #16]
 8018338:	4303      	orrs	r3, r0
 801833a:	3701      	adds	r7, #1
 801833c:	9304      	str	r3, [sp, #16]
 801833e:	7839      	ldrb	r1, [r7, #0]
 8018340:	4827      	ldr	r0, [pc, #156]	; (80183e0 <_svfiprintf_r+0x1e4>)
 8018342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018346:	2206      	movs	r2, #6
 8018348:	1c7e      	adds	r6, r7, #1
 801834a:	f7e7 ff61 	bl	8000210 <memchr>
 801834e:	2800      	cmp	r0, #0
 8018350:	d038      	beq.n	80183c4 <_svfiprintf_r+0x1c8>
 8018352:	4b24      	ldr	r3, [pc, #144]	; (80183e4 <_svfiprintf_r+0x1e8>)
 8018354:	bb13      	cbnz	r3, 801839c <_svfiprintf_r+0x1a0>
 8018356:	9b03      	ldr	r3, [sp, #12]
 8018358:	3307      	adds	r3, #7
 801835a:	f023 0307 	bic.w	r3, r3, #7
 801835e:	3308      	adds	r3, #8
 8018360:	9303      	str	r3, [sp, #12]
 8018362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018364:	444b      	add	r3, r9
 8018366:	9309      	str	r3, [sp, #36]	; 0x24
 8018368:	e76d      	b.n	8018246 <_svfiprintf_r+0x4a>
 801836a:	fb05 3202 	mla	r2, r5, r2, r3
 801836e:	2001      	movs	r0, #1
 8018370:	460f      	mov	r7, r1
 8018372:	e7a6      	b.n	80182c2 <_svfiprintf_r+0xc6>
 8018374:	2300      	movs	r3, #0
 8018376:	3701      	adds	r7, #1
 8018378:	9305      	str	r3, [sp, #20]
 801837a:	4619      	mov	r1, r3
 801837c:	250a      	movs	r5, #10
 801837e:	4638      	mov	r0, r7
 8018380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018384:	3a30      	subs	r2, #48	; 0x30
 8018386:	2a09      	cmp	r2, #9
 8018388:	d903      	bls.n	8018392 <_svfiprintf_r+0x196>
 801838a:	2b00      	cmp	r3, #0
 801838c:	d0c8      	beq.n	8018320 <_svfiprintf_r+0x124>
 801838e:	9105      	str	r1, [sp, #20]
 8018390:	e7c6      	b.n	8018320 <_svfiprintf_r+0x124>
 8018392:	fb05 2101 	mla	r1, r5, r1, r2
 8018396:	2301      	movs	r3, #1
 8018398:	4607      	mov	r7, r0
 801839a:	e7f0      	b.n	801837e <_svfiprintf_r+0x182>
 801839c:	ab03      	add	r3, sp, #12
 801839e:	9300      	str	r3, [sp, #0]
 80183a0:	4622      	mov	r2, r4
 80183a2:	4b11      	ldr	r3, [pc, #68]	; (80183e8 <_svfiprintf_r+0x1ec>)
 80183a4:	a904      	add	r1, sp, #16
 80183a6:	4640      	mov	r0, r8
 80183a8:	f7fc fb6a 	bl	8014a80 <_printf_float>
 80183ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80183b0:	4681      	mov	r9, r0
 80183b2:	d1d6      	bne.n	8018362 <_svfiprintf_r+0x166>
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	065b      	lsls	r3, r3, #25
 80183b8:	f53f af35 	bmi.w	8018226 <_svfiprintf_r+0x2a>
 80183bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183be:	b01d      	add	sp, #116	; 0x74
 80183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c4:	ab03      	add	r3, sp, #12
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	4622      	mov	r2, r4
 80183ca:	4b07      	ldr	r3, [pc, #28]	; (80183e8 <_svfiprintf_r+0x1ec>)
 80183cc:	a904      	add	r1, sp, #16
 80183ce:	4640      	mov	r0, r8
 80183d0:	f7fc fe0c 	bl	8014fec <_printf_i>
 80183d4:	e7ea      	b.n	80183ac <_svfiprintf_r+0x1b0>
 80183d6:	bf00      	nop
 80183d8:	08019734 	.word	0x08019734
 80183dc:	0801973a 	.word	0x0801973a
 80183e0:	0801973e 	.word	0x0801973e
 80183e4:	08014a81 	.word	0x08014a81
 80183e8:	08018149 	.word	0x08018149

080183ec <_sungetc_r>:
 80183ec:	b538      	push	{r3, r4, r5, lr}
 80183ee:	1c4b      	adds	r3, r1, #1
 80183f0:	4614      	mov	r4, r2
 80183f2:	d103      	bne.n	80183fc <_sungetc_r+0x10>
 80183f4:	f04f 35ff 	mov.w	r5, #4294967295
 80183f8:	4628      	mov	r0, r5
 80183fa:	bd38      	pop	{r3, r4, r5, pc}
 80183fc:	8993      	ldrh	r3, [r2, #12]
 80183fe:	f023 0320 	bic.w	r3, r3, #32
 8018402:	8193      	strh	r3, [r2, #12]
 8018404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018406:	6852      	ldr	r2, [r2, #4]
 8018408:	b2cd      	uxtb	r5, r1
 801840a:	b18b      	cbz	r3, 8018430 <_sungetc_r+0x44>
 801840c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801840e:	4293      	cmp	r3, r2
 8018410:	dd08      	ble.n	8018424 <_sungetc_r+0x38>
 8018412:	6823      	ldr	r3, [r4, #0]
 8018414:	1e5a      	subs	r2, r3, #1
 8018416:	6022      	str	r2, [r4, #0]
 8018418:	f803 5c01 	strb.w	r5, [r3, #-1]
 801841c:	6863      	ldr	r3, [r4, #4]
 801841e:	3301      	adds	r3, #1
 8018420:	6063      	str	r3, [r4, #4]
 8018422:	e7e9      	b.n	80183f8 <_sungetc_r+0xc>
 8018424:	4621      	mov	r1, r4
 8018426:	f000 fbc3 	bl	8018bb0 <__submore>
 801842a:	2800      	cmp	r0, #0
 801842c:	d0f1      	beq.n	8018412 <_sungetc_r+0x26>
 801842e:	e7e1      	b.n	80183f4 <_sungetc_r+0x8>
 8018430:	6921      	ldr	r1, [r4, #16]
 8018432:	6823      	ldr	r3, [r4, #0]
 8018434:	b151      	cbz	r1, 801844c <_sungetc_r+0x60>
 8018436:	4299      	cmp	r1, r3
 8018438:	d208      	bcs.n	801844c <_sungetc_r+0x60>
 801843a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801843e:	42a9      	cmp	r1, r5
 8018440:	d104      	bne.n	801844c <_sungetc_r+0x60>
 8018442:	3b01      	subs	r3, #1
 8018444:	3201      	adds	r2, #1
 8018446:	6023      	str	r3, [r4, #0]
 8018448:	6062      	str	r2, [r4, #4]
 801844a:	e7d5      	b.n	80183f8 <_sungetc_r+0xc>
 801844c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018454:	6363      	str	r3, [r4, #52]	; 0x34
 8018456:	2303      	movs	r3, #3
 8018458:	63a3      	str	r3, [r4, #56]	; 0x38
 801845a:	4623      	mov	r3, r4
 801845c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018460:	6023      	str	r3, [r4, #0]
 8018462:	2301      	movs	r3, #1
 8018464:	e7dc      	b.n	8018420 <_sungetc_r+0x34>

08018466 <__ssrefill_r>:
 8018466:	b510      	push	{r4, lr}
 8018468:	460c      	mov	r4, r1
 801846a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801846c:	b169      	cbz	r1, 801848a <__ssrefill_r+0x24>
 801846e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018472:	4299      	cmp	r1, r3
 8018474:	d001      	beq.n	801847a <__ssrefill_r+0x14>
 8018476:	f7ff fdbf 	bl	8017ff8 <_free_r>
 801847a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801847c:	6063      	str	r3, [r4, #4]
 801847e:	2000      	movs	r0, #0
 8018480:	6360      	str	r0, [r4, #52]	; 0x34
 8018482:	b113      	cbz	r3, 801848a <__ssrefill_r+0x24>
 8018484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018486:	6023      	str	r3, [r4, #0]
 8018488:	bd10      	pop	{r4, pc}
 801848a:	6923      	ldr	r3, [r4, #16]
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	2300      	movs	r3, #0
 8018490:	6063      	str	r3, [r4, #4]
 8018492:	89a3      	ldrh	r3, [r4, #12]
 8018494:	f043 0320 	orr.w	r3, r3, #32
 8018498:	81a3      	strh	r3, [r4, #12]
 801849a:	f04f 30ff 	mov.w	r0, #4294967295
 801849e:	e7f3      	b.n	8018488 <__ssrefill_r+0x22>

080184a0 <__ssvfiscanf_r>:
 80184a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80184a8:	460c      	mov	r4, r1
 80184aa:	2100      	movs	r1, #0
 80184ac:	9144      	str	r1, [sp, #272]	; 0x110
 80184ae:	9145      	str	r1, [sp, #276]	; 0x114
 80184b0:	499f      	ldr	r1, [pc, #636]	; (8018730 <__ssvfiscanf_r+0x290>)
 80184b2:	91a0      	str	r1, [sp, #640]	; 0x280
 80184b4:	f10d 0804 	add.w	r8, sp, #4
 80184b8:	499e      	ldr	r1, [pc, #632]	; (8018734 <__ssvfiscanf_r+0x294>)
 80184ba:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018738 <__ssvfiscanf_r+0x298>
 80184be:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80184c2:	4606      	mov	r6, r0
 80184c4:	4692      	mov	sl, r2
 80184c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80184c8:	9300      	str	r3, [sp, #0]
 80184ca:	270a      	movs	r7, #10
 80184cc:	f89a 3000 	ldrb.w	r3, [sl]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	f000 812a 	beq.w	801872a <__ssvfiscanf_r+0x28a>
 80184d6:	4655      	mov	r5, sl
 80184d8:	f7ff f948 	bl	801776c <__locale_ctype_ptr>
 80184dc:	f815 bb01 	ldrb.w	fp, [r5], #1
 80184e0:	4458      	add	r0, fp
 80184e2:	7843      	ldrb	r3, [r0, #1]
 80184e4:	f013 0308 	ands.w	r3, r3, #8
 80184e8:	d01c      	beq.n	8018524 <__ssvfiscanf_r+0x84>
 80184ea:	6863      	ldr	r3, [r4, #4]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	dd12      	ble.n	8018516 <__ssvfiscanf_r+0x76>
 80184f0:	f7ff f93c 	bl	801776c <__locale_ctype_ptr>
 80184f4:	6823      	ldr	r3, [r4, #0]
 80184f6:	781a      	ldrb	r2, [r3, #0]
 80184f8:	4410      	add	r0, r2
 80184fa:	7842      	ldrb	r2, [r0, #1]
 80184fc:	0712      	lsls	r2, r2, #28
 80184fe:	d401      	bmi.n	8018504 <__ssvfiscanf_r+0x64>
 8018500:	46aa      	mov	sl, r5
 8018502:	e7e3      	b.n	80184cc <__ssvfiscanf_r+0x2c>
 8018504:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018506:	3201      	adds	r2, #1
 8018508:	9245      	str	r2, [sp, #276]	; 0x114
 801850a:	6862      	ldr	r2, [r4, #4]
 801850c:	3301      	adds	r3, #1
 801850e:	3a01      	subs	r2, #1
 8018510:	6062      	str	r2, [r4, #4]
 8018512:	6023      	str	r3, [r4, #0]
 8018514:	e7e9      	b.n	80184ea <__ssvfiscanf_r+0x4a>
 8018516:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018518:	4621      	mov	r1, r4
 801851a:	4630      	mov	r0, r6
 801851c:	4798      	blx	r3
 801851e:	2800      	cmp	r0, #0
 8018520:	d0e6      	beq.n	80184f0 <__ssvfiscanf_r+0x50>
 8018522:	e7ed      	b.n	8018500 <__ssvfiscanf_r+0x60>
 8018524:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018528:	f040 8082 	bne.w	8018630 <__ssvfiscanf_r+0x190>
 801852c:	9343      	str	r3, [sp, #268]	; 0x10c
 801852e:	9341      	str	r3, [sp, #260]	; 0x104
 8018530:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018534:	2b2a      	cmp	r3, #42	; 0x2a
 8018536:	d103      	bne.n	8018540 <__ssvfiscanf_r+0xa0>
 8018538:	2310      	movs	r3, #16
 801853a:	9341      	str	r3, [sp, #260]	; 0x104
 801853c:	f10a 0502 	add.w	r5, sl, #2
 8018540:	46aa      	mov	sl, r5
 8018542:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018546:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801854a:	2a09      	cmp	r2, #9
 801854c:	d922      	bls.n	8018594 <__ssvfiscanf_r+0xf4>
 801854e:	2203      	movs	r2, #3
 8018550:	4879      	ldr	r0, [pc, #484]	; (8018738 <__ssvfiscanf_r+0x298>)
 8018552:	f7e7 fe5d 	bl	8000210 <memchr>
 8018556:	b138      	cbz	r0, 8018568 <__ssvfiscanf_r+0xc8>
 8018558:	eba0 0309 	sub.w	r3, r0, r9
 801855c:	2001      	movs	r0, #1
 801855e:	4098      	lsls	r0, r3
 8018560:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018562:	4318      	orrs	r0, r3
 8018564:	9041      	str	r0, [sp, #260]	; 0x104
 8018566:	46aa      	mov	sl, r5
 8018568:	f89a 3000 	ldrb.w	r3, [sl]
 801856c:	2b67      	cmp	r3, #103	; 0x67
 801856e:	f10a 0501 	add.w	r5, sl, #1
 8018572:	d82b      	bhi.n	80185cc <__ssvfiscanf_r+0x12c>
 8018574:	2b65      	cmp	r3, #101	; 0x65
 8018576:	f080 809f 	bcs.w	80186b8 <__ssvfiscanf_r+0x218>
 801857a:	2b47      	cmp	r3, #71	; 0x47
 801857c:	d810      	bhi.n	80185a0 <__ssvfiscanf_r+0x100>
 801857e:	2b45      	cmp	r3, #69	; 0x45
 8018580:	f080 809a 	bcs.w	80186b8 <__ssvfiscanf_r+0x218>
 8018584:	2b00      	cmp	r3, #0
 8018586:	d06c      	beq.n	8018662 <__ssvfiscanf_r+0x1c2>
 8018588:	2b25      	cmp	r3, #37	; 0x25
 801858a:	d051      	beq.n	8018630 <__ssvfiscanf_r+0x190>
 801858c:	2303      	movs	r3, #3
 801858e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018590:	9742      	str	r7, [sp, #264]	; 0x108
 8018592:	e027      	b.n	80185e4 <__ssvfiscanf_r+0x144>
 8018594:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018596:	fb07 1303 	mla	r3, r7, r3, r1
 801859a:	3b30      	subs	r3, #48	; 0x30
 801859c:	9343      	str	r3, [sp, #268]	; 0x10c
 801859e:	e7cf      	b.n	8018540 <__ssvfiscanf_r+0xa0>
 80185a0:	2b5b      	cmp	r3, #91	; 0x5b
 80185a2:	d06a      	beq.n	801867a <__ssvfiscanf_r+0x1da>
 80185a4:	d80c      	bhi.n	80185c0 <__ssvfiscanf_r+0x120>
 80185a6:	2b58      	cmp	r3, #88	; 0x58
 80185a8:	d1f0      	bne.n	801858c <__ssvfiscanf_r+0xec>
 80185aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80185ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185b0:	9241      	str	r2, [sp, #260]	; 0x104
 80185b2:	2210      	movs	r2, #16
 80185b4:	9242      	str	r2, [sp, #264]	; 0x108
 80185b6:	2b6e      	cmp	r3, #110	; 0x6e
 80185b8:	bf8c      	ite	hi
 80185ba:	2304      	movhi	r3, #4
 80185bc:	2303      	movls	r3, #3
 80185be:	e010      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 80185c0:	2b63      	cmp	r3, #99	; 0x63
 80185c2:	d065      	beq.n	8018690 <__ssvfiscanf_r+0x1f0>
 80185c4:	2b64      	cmp	r3, #100	; 0x64
 80185c6:	d1e1      	bne.n	801858c <__ssvfiscanf_r+0xec>
 80185c8:	9742      	str	r7, [sp, #264]	; 0x108
 80185ca:	e7f4      	b.n	80185b6 <__ssvfiscanf_r+0x116>
 80185cc:	2b70      	cmp	r3, #112	; 0x70
 80185ce:	d04b      	beq.n	8018668 <__ssvfiscanf_r+0x1c8>
 80185d0:	d826      	bhi.n	8018620 <__ssvfiscanf_r+0x180>
 80185d2:	2b6e      	cmp	r3, #110	; 0x6e
 80185d4:	d062      	beq.n	801869c <__ssvfiscanf_r+0x1fc>
 80185d6:	d84c      	bhi.n	8018672 <__ssvfiscanf_r+0x1d2>
 80185d8:	2b69      	cmp	r3, #105	; 0x69
 80185da:	d1d7      	bne.n	801858c <__ssvfiscanf_r+0xec>
 80185dc:	2300      	movs	r3, #0
 80185de:	9342      	str	r3, [sp, #264]	; 0x108
 80185e0:	2303      	movs	r3, #3
 80185e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80185e4:	6863      	ldr	r3, [r4, #4]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	dd68      	ble.n	80186bc <__ssvfiscanf_r+0x21c>
 80185ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80185ec:	0659      	lsls	r1, r3, #25
 80185ee:	d407      	bmi.n	8018600 <__ssvfiscanf_r+0x160>
 80185f0:	f7ff f8bc 	bl	801776c <__locale_ctype_ptr>
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	781a      	ldrb	r2, [r3, #0]
 80185f8:	4410      	add	r0, r2
 80185fa:	7842      	ldrb	r2, [r0, #1]
 80185fc:	0712      	lsls	r2, r2, #28
 80185fe:	d464      	bmi.n	80186ca <__ssvfiscanf_r+0x22a>
 8018600:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018602:	2b02      	cmp	r3, #2
 8018604:	dc73      	bgt.n	80186ee <__ssvfiscanf_r+0x24e>
 8018606:	466b      	mov	r3, sp
 8018608:	4622      	mov	r2, r4
 801860a:	a941      	add	r1, sp, #260	; 0x104
 801860c:	4630      	mov	r0, r6
 801860e:	f000 f897 	bl	8018740 <_scanf_chars>
 8018612:	2801      	cmp	r0, #1
 8018614:	f000 8089 	beq.w	801872a <__ssvfiscanf_r+0x28a>
 8018618:	2802      	cmp	r0, #2
 801861a:	f47f af71 	bne.w	8018500 <__ssvfiscanf_r+0x60>
 801861e:	e01d      	b.n	801865c <__ssvfiscanf_r+0x1bc>
 8018620:	2b75      	cmp	r3, #117	; 0x75
 8018622:	d0d1      	beq.n	80185c8 <__ssvfiscanf_r+0x128>
 8018624:	2b78      	cmp	r3, #120	; 0x78
 8018626:	d0c0      	beq.n	80185aa <__ssvfiscanf_r+0x10a>
 8018628:	2b73      	cmp	r3, #115	; 0x73
 801862a:	d1af      	bne.n	801858c <__ssvfiscanf_r+0xec>
 801862c:	2302      	movs	r3, #2
 801862e:	e7d8      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 8018630:	6863      	ldr	r3, [r4, #4]
 8018632:	2b00      	cmp	r3, #0
 8018634:	dd0c      	ble.n	8018650 <__ssvfiscanf_r+0x1b0>
 8018636:	6823      	ldr	r3, [r4, #0]
 8018638:	781a      	ldrb	r2, [r3, #0]
 801863a:	455a      	cmp	r2, fp
 801863c:	d175      	bne.n	801872a <__ssvfiscanf_r+0x28a>
 801863e:	3301      	adds	r3, #1
 8018640:	6862      	ldr	r2, [r4, #4]
 8018642:	6023      	str	r3, [r4, #0]
 8018644:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018646:	3a01      	subs	r2, #1
 8018648:	3301      	adds	r3, #1
 801864a:	6062      	str	r2, [r4, #4]
 801864c:	9345      	str	r3, [sp, #276]	; 0x114
 801864e:	e757      	b.n	8018500 <__ssvfiscanf_r+0x60>
 8018650:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018652:	4621      	mov	r1, r4
 8018654:	4630      	mov	r0, r6
 8018656:	4798      	blx	r3
 8018658:	2800      	cmp	r0, #0
 801865a:	d0ec      	beq.n	8018636 <__ssvfiscanf_r+0x196>
 801865c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801865e:	2800      	cmp	r0, #0
 8018660:	d159      	bne.n	8018716 <__ssvfiscanf_r+0x276>
 8018662:	f04f 30ff 	mov.w	r0, #4294967295
 8018666:	e05c      	b.n	8018722 <__ssvfiscanf_r+0x282>
 8018668:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801866a:	f042 0220 	orr.w	r2, r2, #32
 801866e:	9241      	str	r2, [sp, #260]	; 0x104
 8018670:	e79b      	b.n	80185aa <__ssvfiscanf_r+0x10a>
 8018672:	2308      	movs	r3, #8
 8018674:	9342      	str	r3, [sp, #264]	; 0x108
 8018676:	2304      	movs	r3, #4
 8018678:	e7b3      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 801867a:	4629      	mov	r1, r5
 801867c:	4640      	mov	r0, r8
 801867e:	f000 f9c7 	bl	8018a10 <__sccl>
 8018682:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018688:	9341      	str	r3, [sp, #260]	; 0x104
 801868a:	4605      	mov	r5, r0
 801868c:	2301      	movs	r3, #1
 801868e:	e7a8      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 8018690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018696:	9341      	str	r3, [sp, #260]	; 0x104
 8018698:	2300      	movs	r3, #0
 801869a:	e7a2      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 801869c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801869e:	06c3      	lsls	r3, r0, #27
 80186a0:	f53f af2e 	bmi.w	8018500 <__ssvfiscanf_r+0x60>
 80186a4:	9b00      	ldr	r3, [sp, #0]
 80186a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186a8:	1d19      	adds	r1, r3, #4
 80186aa:	9100      	str	r1, [sp, #0]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	07c0      	lsls	r0, r0, #31
 80186b0:	bf4c      	ite	mi
 80186b2:	801a      	strhmi	r2, [r3, #0]
 80186b4:	601a      	strpl	r2, [r3, #0]
 80186b6:	e723      	b.n	8018500 <__ssvfiscanf_r+0x60>
 80186b8:	2305      	movs	r3, #5
 80186ba:	e792      	b.n	80185e2 <__ssvfiscanf_r+0x142>
 80186bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80186be:	4621      	mov	r1, r4
 80186c0:	4630      	mov	r0, r6
 80186c2:	4798      	blx	r3
 80186c4:	2800      	cmp	r0, #0
 80186c6:	d090      	beq.n	80185ea <__ssvfiscanf_r+0x14a>
 80186c8:	e7c8      	b.n	801865c <__ssvfiscanf_r+0x1bc>
 80186ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186cc:	3201      	adds	r2, #1
 80186ce:	9245      	str	r2, [sp, #276]	; 0x114
 80186d0:	6862      	ldr	r2, [r4, #4]
 80186d2:	3a01      	subs	r2, #1
 80186d4:	2a00      	cmp	r2, #0
 80186d6:	6062      	str	r2, [r4, #4]
 80186d8:	dd02      	ble.n	80186e0 <__ssvfiscanf_r+0x240>
 80186da:	3301      	adds	r3, #1
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	e787      	b.n	80185f0 <__ssvfiscanf_r+0x150>
 80186e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80186e2:	4621      	mov	r1, r4
 80186e4:	4630      	mov	r0, r6
 80186e6:	4798      	blx	r3
 80186e8:	2800      	cmp	r0, #0
 80186ea:	d081      	beq.n	80185f0 <__ssvfiscanf_r+0x150>
 80186ec:	e7b6      	b.n	801865c <__ssvfiscanf_r+0x1bc>
 80186ee:	2b04      	cmp	r3, #4
 80186f0:	dc06      	bgt.n	8018700 <__ssvfiscanf_r+0x260>
 80186f2:	466b      	mov	r3, sp
 80186f4:	4622      	mov	r2, r4
 80186f6:	a941      	add	r1, sp, #260	; 0x104
 80186f8:	4630      	mov	r0, r6
 80186fa:	f000 f885 	bl	8018808 <_scanf_i>
 80186fe:	e788      	b.n	8018612 <__ssvfiscanf_r+0x172>
 8018700:	4b0e      	ldr	r3, [pc, #56]	; (801873c <__ssvfiscanf_r+0x29c>)
 8018702:	2b00      	cmp	r3, #0
 8018704:	f43f aefc 	beq.w	8018500 <__ssvfiscanf_r+0x60>
 8018708:	466b      	mov	r3, sp
 801870a:	4622      	mov	r2, r4
 801870c:	a941      	add	r1, sp, #260	; 0x104
 801870e:	4630      	mov	r0, r6
 8018710:	f7fc fd7e 	bl	8015210 <_scanf_float>
 8018714:	e77d      	b.n	8018612 <__ssvfiscanf_r+0x172>
 8018716:	89a3      	ldrh	r3, [r4, #12]
 8018718:	f013 0f40 	tst.w	r3, #64	; 0x40
 801871c:	bf18      	it	ne
 801871e:	f04f 30ff 	movne.w	r0, #4294967295
 8018722:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801872a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801872c:	e7f9      	b.n	8018722 <__ssvfiscanf_r+0x282>
 801872e:	bf00      	nop
 8018730:	080183ed 	.word	0x080183ed
 8018734:	08018467 	.word	0x08018467
 8018738:	0801973a 	.word	0x0801973a
 801873c:	08015211 	.word	0x08015211

08018740 <_scanf_chars>:
 8018740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018744:	4615      	mov	r5, r2
 8018746:	688a      	ldr	r2, [r1, #8]
 8018748:	4680      	mov	r8, r0
 801874a:	460c      	mov	r4, r1
 801874c:	b932      	cbnz	r2, 801875c <_scanf_chars+0x1c>
 801874e:	698a      	ldr	r2, [r1, #24]
 8018750:	2a00      	cmp	r2, #0
 8018752:	bf14      	ite	ne
 8018754:	f04f 32ff 	movne.w	r2, #4294967295
 8018758:	2201      	moveq	r2, #1
 801875a:	608a      	str	r2, [r1, #8]
 801875c:	6822      	ldr	r2, [r4, #0]
 801875e:	06d1      	lsls	r1, r2, #27
 8018760:	bf5f      	itttt	pl
 8018762:	681a      	ldrpl	r2, [r3, #0]
 8018764:	1d11      	addpl	r1, r2, #4
 8018766:	6019      	strpl	r1, [r3, #0]
 8018768:	6817      	ldrpl	r7, [r2, #0]
 801876a:	2600      	movs	r6, #0
 801876c:	69a3      	ldr	r3, [r4, #24]
 801876e:	b1db      	cbz	r3, 80187a8 <_scanf_chars+0x68>
 8018770:	2b01      	cmp	r3, #1
 8018772:	d107      	bne.n	8018784 <_scanf_chars+0x44>
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	6962      	ldr	r2, [r4, #20]
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	5cd3      	ldrb	r3, [r2, r3]
 801877c:	b9a3      	cbnz	r3, 80187a8 <_scanf_chars+0x68>
 801877e:	2e00      	cmp	r6, #0
 8018780:	d132      	bne.n	80187e8 <_scanf_chars+0xa8>
 8018782:	e006      	b.n	8018792 <_scanf_chars+0x52>
 8018784:	2b02      	cmp	r3, #2
 8018786:	d007      	beq.n	8018798 <_scanf_chars+0x58>
 8018788:	2e00      	cmp	r6, #0
 801878a:	d12d      	bne.n	80187e8 <_scanf_chars+0xa8>
 801878c:	69a3      	ldr	r3, [r4, #24]
 801878e:	2b01      	cmp	r3, #1
 8018790:	d12a      	bne.n	80187e8 <_scanf_chars+0xa8>
 8018792:	2001      	movs	r0, #1
 8018794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018798:	f7fe ffe8 	bl	801776c <__locale_ctype_ptr>
 801879c:	682b      	ldr	r3, [r5, #0]
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	4418      	add	r0, r3
 80187a2:	7843      	ldrb	r3, [r0, #1]
 80187a4:	071b      	lsls	r3, r3, #28
 80187a6:	d4ef      	bmi.n	8018788 <_scanf_chars+0x48>
 80187a8:	6823      	ldr	r3, [r4, #0]
 80187aa:	06da      	lsls	r2, r3, #27
 80187ac:	bf5e      	ittt	pl
 80187ae:	682b      	ldrpl	r3, [r5, #0]
 80187b0:	781b      	ldrbpl	r3, [r3, #0]
 80187b2:	703b      	strbpl	r3, [r7, #0]
 80187b4:	682a      	ldr	r2, [r5, #0]
 80187b6:	686b      	ldr	r3, [r5, #4]
 80187b8:	f102 0201 	add.w	r2, r2, #1
 80187bc:	602a      	str	r2, [r5, #0]
 80187be:	68a2      	ldr	r2, [r4, #8]
 80187c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80187c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80187c8:	606b      	str	r3, [r5, #4]
 80187ca:	f106 0601 	add.w	r6, r6, #1
 80187ce:	bf58      	it	pl
 80187d0:	3701      	addpl	r7, #1
 80187d2:	60a2      	str	r2, [r4, #8]
 80187d4:	b142      	cbz	r2, 80187e8 <_scanf_chars+0xa8>
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	dcc8      	bgt.n	801876c <_scanf_chars+0x2c>
 80187da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80187de:	4629      	mov	r1, r5
 80187e0:	4640      	mov	r0, r8
 80187e2:	4798      	blx	r3
 80187e4:	2800      	cmp	r0, #0
 80187e6:	d0c1      	beq.n	801876c <_scanf_chars+0x2c>
 80187e8:	6823      	ldr	r3, [r4, #0]
 80187ea:	f013 0310 	ands.w	r3, r3, #16
 80187ee:	d105      	bne.n	80187fc <_scanf_chars+0xbc>
 80187f0:	68e2      	ldr	r2, [r4, #12]
 80187f2:	3201      	adds	r2, #1
 80187f4:	60e2      	str	r2, [r4, #12]
 80187f6:	69a2      	ldr	r2, [r4, #24]
 80187f8:	b102      	cbz	r2, 80187fc <_scanf_chars+0xbc>
 80187fa:	703b      	strb	r3, [r7, #0]
 80187fc:	6923      	ldr	r3, [r4, #16]
 80187fe:	441e      	add	r6, r3
 8018800:	6126      	str	r6, [r4, #16]
 8018802:	2000      	movs	r0, #0
 8018804:	e7c6      	b.n	8018794 <_scanf_chars+0x54>
	...

08018808 <_scanf_i>:
 8018808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801880c:	469a      	mov	sl, r3
 801880e:	4b74      	ldr	r3, [pc, #464]	; (80189e0 <_scanf_i+0x1d8>)
 8018810:	460c      	mov	r4, r1
 8018812:	4683      	mov	fp, r0
 8018814:	4616      	mov	r6, r2
 8018816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801881a:	b087      	sub	sp, #28
 801881c:	ab03      	add	r3, sp, #12
 801881e:	68a7      	ldr	r7, [r4, #8]
 8018820:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018824:	4b6f      	ldr	r3, [pc, #444]	; (80189e4 <_scanf_i+0x1dc>)
 8018826:	69a1      	ldr	r1, [r4, #24]
 8018828:	4a6f      	ldr	r2, [pc, #444]	; (80189e8 <_scanf_i+0x1e0>)
 801882a:	2903      	cmp	r1, #3
 801882c:	bf08      	it	eq
 801882e:	461a      	moveq	r2, r3
 8018830:	1e7b      	subs	r3, r7, #1
 8018832:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018836:	bf84      	itt	hi
 8018838:	f240 135d 	movwhi	r3, #349	; 0x15d
 801883c:	60a3      	strhi	r3, [r4, #8]
 801883e:	6823      	ldr	r3, [r4, #0]
 8018840:	9200      	str	r2, [sp, #0]
 8018842:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018846:	bf88      	it	hi
 8018848:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801884c:	f104 091c 	add.w	r9, r4, #28
 8018850:	6023      	str	r3, [r4, #0]
 8018852:	bf8c      	ite	hi
 8018854:	197f      	addhi	r7, r7, r5
 8018856:	2700      	movls	r7, #0
 8018858:	464b      	mov	r3, r9
 801885a:	f04f 0800 	mov.w	r8, #0
 801885e:	9301      	str	r3, [sp, #4]
 8018860:	6831      	ldr	r1, [r6, #0]
 8018862:	ab03      	add	r3, sp, #12
 8018864:	2202      	movs	r2, #2
 8018866:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801886a:	7809      	ldrb	r1, [r1, #0]
 801886c:	f7e7 fcd0 	bl	8000210 <memchr>
 8018870:	9b01      	ldr	r3, [sp, #4]
 8018872:	b330      	cbz	r0, 80188c2 <_scanf_i+0xba>
 8018874:	f1b8 0f01 	cmp.w	r8, #1
 8018878:	d15a      	bne.n	8018930 <_scanf_i+0x128>
 801887a:	6862      	ldr	r2, [r4, #4]
 801887c:	b92a      	cbnz	r2, 801888a <_scanf_i+0x82>
 801887e:	6822      	ldr	r2, [r4, #0]
 8018880:	2108      	movs	r1, #8
 8018882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018886:	6061      	str	r1, [r4, #4]
 8018888:	6022      	str	r2, [r4, #0]
 801888a:	6822      	ldr	r2, [r4, #0]
 801888c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018890:	6022      	str	r2, [r4, #0]
 8018892:	68a2      	ldr	r2, [r4, #8]
 8018894:	1e51      	subs	r1, r2, #1
 8018896:	60a1      	str	r1, [r4, #8]
 8018898:	b19a      	cbz	r2, 80188c2 <_scanf_i+0xba>
 801889a:	6832      	ldr	r2, [r6, #0]
 801889c:	1c51      	adds	r1, r2, #1
 801889e:	6031      	str	r1, [r6, #0]
 80188a0:	7812      	ldrb	r2, [r2, #0]
 80188a2:	701a      	strb	r2, [r3, #0]
 80188a4:	1c5d      	adds	r5, r3, #1
 80188a6:	6873      	ldr	r3, [r6, #4]
 80188a8:	3b01      	subs	r3, #1
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	6073      	str	r3, [r6, #4]
 80188ae:	dc07      	bgt.n	80188c0 <_scanf_i+0xb8>
 80188b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80188b4:	4631      	mov	r1, r6
 80188b6:	4658      	mov	r0, fp
 80188b8:	4798      	blx	r3
 80188ba:	2800      	cmp	r0, #0
 80188bc:	f040 8086 	bne.w	80189cc <_scanf_i+0x1c4>
 80188c0:	462b      	mov	r3, r5
 80188c2:	f108 0801 	add.w	r8, r8, #1
 80188c6:	f1b8 0f03 	cmp.w	r8, #3
 80188ca:	d1c8      	bne.n	801885e <_scanf_i+0x56>
 80188cc:	6862      	ldr	r2, [r4, #4]
 80188ce:	b90a      	cbnz	r2, 80188d4 <_scanf_i+0xcc>
 80188d0:	220a      	movs	r2, #10
 80188d2:	6062      	str	r2, [r4, #4]
 80188d4:	6862      	ldr	r2, [r4, #4]
 80188d6:	4945      	ldr	r1, [pc, #276]	; (80189ec <_scanf_i+0x1e4>)
 80188d8:	6960      	ldr	r0, [r4, #20]
 80188da:	9301      	str	r3, [sp, #4]
 80188dc:	1a89      	subs	r1, r1, r2
 80188de:	f000 f897 	bl	8018a10 <__sccl>
 80188e2:	9b01      	ldr	r3, [sp, #4]
 80188e4:	f04f 0800 	mov.w	r8, #0
 80188e8:	461d      	mov	r5, r3
 80188ea:	68a3      	ldr	r3, [r4, #8]
 80188ec:	6822      	ldr	r2, [r4, #0]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d03a      	beq.n	8018968 <_scanf_i+0x160>
 80188f2:	6831      	ldr	r1, [r6, #0]
 80188f4:	6960      	ldr	r0, [r4, #20]
 80188f6:	f891 c000 	ldrb.w	ip, [r1]
 80188fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80188fe:	2800      	cmp	r0, #0
 8018900:	d032      	beq.n	8018968 <_scanf_i+0x160>
 8018902:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018906:	d121      	bne.n	801894c <_scanf_i+0x144>
 8018908:	0510      	lsls	r0, r2, #20
 801890a:	d51f      	bpl.n	801894c <_scanf_i+0x144>
 801890c:	f108 0801 	add.w	r8, r8, #1
 8018910:	b117      	cbz	r7, 8018918 <_scanf_i+0x110>
 8018912:	3301      	adds	r3, #1
 8018914:	3f01      	subs	r7, #1
 8018916:	60a3      	str	r3, [r4, #8]
 8018918:	6873      	ldr	r3, [r6, #4]
 801891a:	3b01      	subs	r3, #1
 801891c:	2b00      	cmp	r3, #0
 801891e:	6073      	str	r3, [r6, #4]
 8018920:	dd1b      	ble.n	801895a <_scanf_i+0x152>
 8018922:	6833      	ldr	r3, [r6, #0]
 8018924:	3301      	adds	r3, #1
 8018926:	6033      	str	r3, [r6, #0]
 8018928:	68a3      	ldr	r3, [r4, #8]
 801892a:	3b01      	subs	r3, #1
 801892c:	60a3      	str	r3, [r4, #8]
 801892e:	e7dc      	b.n	80188ea <_scanf_i+0xe2>
 8018930:	f1b8 0f02 	cmp.w	r8, #2
 8018934:	d1ad      	bne.n	8018892 <_scanf_i+0x8a>
 8018936:	6822      	ldr	r2, [r4, #0]
 8018938:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801893c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018940:	d1bf      	bne.n	80188c2 <_scanf_i+0xba>
 8018942:	2110      	movs	r1, #16
 8018944:	6061      	str	r1, [r4, #4]
 8018946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801894a:	e7a1      	b.n	8018890 <_scanf_i+0x88>
 801894c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018950:	6022      	str	r2, [r4, #0]
 8018952:	780b      	ldrb	r3, [r1, #0]
 8018954:	702b      	strb	r3, [r5, #0]
 8018956:	3501      	adds	r5, #1
 8018958:	e7de      	b.n	8018918 <_scanf_i+0x110>
 801895a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801895e:	4631      	mov	r1, r6
 8018960:	4658      	mov	r0, fp
 8018962:	4798      	blx	r3
 8018964:	2800      	cmp	r0, #0
 8018966:	d0df      	beq.n	8018928 <_scanf_i+0x120>
 8018968:	6823      	ldr	r3, [r4, #0]
 801896a:	05d9      	lsls	r1, r3, #23
 801896c:	d50c      	bpl.n	8018988 <_scanf_i+0x180>
 801896e:	454d      	cmp	r5, r9
 8018970:	d908      	bls.n	8018984 <_scanf_i+0x17c>
 8018972:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801897a:	4632      	mov	r2, r6
 801897c:	4658      	mov	r0, fp
 801897e:	4798      	blx	r3
 8018980:	1e6f      	subs	r7, r5, #1
 8018982:	463d      	mov	r5, r7
 8018984:	454d      	cmp	r5, r9
 8018986:	d029      	beq.n	80189dc <_scanf_i+0x1d4>
 8018988:	6822      	ldr	r2, [r4, #0]
 801898a:	f012 0210 	ands.w	r2, r2, #16
 801898e:	d113      	bne.n	80189b8 <_scanf_i+0x1b0>
 8018990:	702a      	strb	r2, [r5, #0]
 8018992:	6863      	ldr	r3, [r4, #4]
 8018994:	9e00      	ldr	r6, [sp, #0]
 8018996:	4649      	mov	r1, r9
 8018998:	4658      	mov	r0, fp
 801899a:	47b0      	blx	r6
 801899c:	f8da 3000 	ldr.w	r3, [sl]
 80189a0:	6821      	ldr	r1, [r4, #0]
 80189a2:	1d1a      	adds	r2, r3, #4
 80189a4:	f8ca 2000 	str.w	r2, [sl]
 80189a8:	f011 0f20 	tst.w	r1, #32
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	d010      	beq.n	80189d2 <_scanf_i+0x1ca>
 80189b0:	6018      	str	r0, [r3, #0]
 80189b2:	68e3      	ldr	r3, [r4, #12]
 80189b4:	3301      	adds	r3, #1
 80189b6:	60e3      	str	r3, [r4, #12]
 80189b8:	eba5 0509 	sub.w	r5, r5, r9
 80189bc:	44a8      	add	r8, r5
 80189be:	6925      	ldr	r5, [r4, #16]
 80189c0:	4445      	add	r5, r8
 80189c2:	6125      	str	r5, [r4, #16]
 80189c4:	2000      	movs	r0, #0
 80189c6:	b007      	add	sp, #28
 80189c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189cc:	f04f 0800 	mov.w	r8, #0
 80189d0:	e7ca      	b.n	8018968 <_scanf_i+0x160>
 80189d2:	07ca      	lsls	r2, r1, #31
 80189d4:	bf4c      	ite	mi
 80189d6:	8018      	strhmi	r0, [r3, #0]
 80189d8:	6018      	strpl	r0, [r3, #0]
 80189da:	e7ea      	b.n	80189b2 <_scanf_i+0x1aa>
 80189dc:	2001      	movs	r0, #1
 80189de:	e7f2      	b.n	80189c6 <_scanf_i+0x1be>
 80189e0:	08019298 	.word	0x08019298
 80189e4:	08016429 	.word	0x08016429
 80189e8:	08018b8d 	.word	0x08018b8d
 80189ec:	08019755 	.word	0x08019755

080189f0 <_sbrk_r>:
 80189f0:	b538      	push	{r3, r4, r5, lr}
 80189f2:	4c06      	ldr	r4, [pc, #24]	; (8018a0c <_sbrk_r+0x1c>)
 80189f4:	2300      	movs	r3, #0
 80189f6:	4605      	mov	r5, r0
 80189f8:	4608      	mov	r0, r1
 80189fa:	6023      	str	r3, [r4, #0]
 80189fc:	f7ee fbb4 	bl	8007168 <_sbrk>
 8018a00:	1c43      	adds	r3, r0, #1
 8018a02:	d102      	bne.n	8018a0a <_sbrk_r+0x1a>
 8018a04:	6823      	ldr	r3, [r4, #0]
 8018a06:	b103      	cbz	r3, 8018a0a <_sbrk_r+0x1a>
 8018a08:	602b      	str	r3, [r5, #0]
 8018a0a:	bd38      	pop	{r3, r4, r5, pc}
 8018a0c:	20040e6c 	.word	0x20040e6c

08018a10 <__sccl>:
 8018a10:	b570      	push	{r4, r5, r6, lr}
 8018a12:	780b      	ldrb	r3, [r1, #0]
 8018a14:	2b5e      	cmp	r3, #94	; 0x5e
 8018a16:	bf13      	iteet	ne
 8018a18:	1c4a      	addne	r2, r1, #1
 8018a1a:	1c8a      	addeq	r2, r1, #2
 8018a1c:	784b      	ldrbeq	r3, [r1, #1]
 8018a1e:	2100      	movne	r1, #0
 8018a20:	bf08      	it	eq
 8018a22:	2101      	moveq	r1, #1
 8018a24:	1e44      	subs	r4, r0, #1
 8018a26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018a2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018a2e:	42ac      	cmp	r4, r5
 8018a30:	d1fb      	bne.n	8018a2a <__sccl+0x1a>
 8018a32:	b913      	cbnz	r3, 8018a3a <__sccl+0x2a>
 8018a34:	3a01      	subs	r2, #1
 8018a36:	4610      	mov	r0, r2
 8018a38:	bd70      	pop	{r4, r5, r6, pc}
 8018a3a:	f081 0401 	eor.w	r4, r1, #1
 8018a3e:	54c4      	strb	r4, [r0, r3]
 8018a40:	1c51      	adds	r1, r2, #1
 8018a42:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018a46:	2d2d      	cmp	r5, #45	; 0x2d
 8018a48:	f101 36ff 	add.w	r6, r1, #4294967295
 8018a4c:	460a      	mov	r2, r1
 8018a4e:	d006      	beq.n	8018a5e <__sccl+0x4e>
 8018a50:	2d5d      	cmp	r5, #93	; 0x5d
 8018a52:	d0f0      	beq.n	8018a36 <__sccl+0x26>
 8018a54:	b90d      	cbnz	r5, 8018a5a <__sccl+0x4a>
 8018a56:	4632      	mov	r2, r6
 8018a58:	e7ed      	b.n	8018a36 <__sccl+0x26>
 8018a5a:	462b      	mov	r3, r5
 8018a5c:	e7ef      	b.n	8018a3e <__sccl+0x2e>
 8018a5e:	780e      	ldrb	r6, [r1, #0]
 8018a60:	2e5d      	cmp	r6, #93	; 0x5d
 8018a62:	d0fa      	beq.n	8018a5a <__sccl+0x4a>
 8018a64:	42b3      	cmp	r3, r6
 8018a66:	dcf8      	bgt.n	8018a5a <__sccl+0x4a>
 8018a68:	3301      	adds	r3, #1
 8018a6a:	429e      	cmp	r6, r3
 8018a6c:	54c4      	strb	r4, [r0, r3]
 8018a6e:	dcfb      	bgt.n	8018a68 <__sccl+0x58>
 8018a70:	3102      	adds	r1, #2
 8018a72:	e7e6      	b.n	8018a42 <__sccl+0x32>

08018a74 <strncmp>:
 8018a74:	b510      	push	{r4, lr}
 8018a76:	b16a      	cbz	r2, 8018a94 <strncmp+0x20>
 8018a78:	3901      	subs	r1, #1
 8018a7a:	1884      	adds	r4, r0, r2
 8018a7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d103      	bne.n	8018a90 <strncmp+0x1c>
 8018a88:	42a0      	cmp	r0, r4
 8018a8a:	d001      	beq.n	8018a90 <strncmp+0x1c>
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d1f5      	bne.n	8018a7c <strncmp+0x8>
 8018a90:	1a98      	subs	r0, r3, r2
 8018a92:	bd10      	pop	{r4, pc}
 8018a94:	4610      	mov	r0, r2
 8018a96:	e7fc      	b.n	8018a92 <strncmp+0x1e>

08018a98 <_strtoul_l.isra.0>:
 8018a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a9c:	4680      	mov	r8, r0
 8018a9e:	4689      	mov	r9, r1
 8018aa0:	4692      	mov	sl, r2
 8018aa2:	461e      	mov	r6, r3
 8018aa4:	460f      	mov	r7, r1
 8018aa6:	463d      	mov	r5, r7
 8018aa8:	9808      	ldr	r0, [sp, #32]
 8018aaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018aae:	f7fe fe59 	bl	8017764 <__locale_ctype_ptr_l>
 8018ab2:	4420      	add	r0, r4
 8018ab4:	7843      	ldrb	r3, [r0, #1]
 8018ab6:	f013 0308 	ands.w	r3, r3, #8
 8018aba:	d130      	bne.n	8018b1e <_strtoul_l.isra.0+0x86>
 8018abc:	2c2d      	cmp	r4, #45	; 0x2d
 8018abe:	d130      	bne.n	8018b22 <_strtoul_l.isra.0+0x8a>
 8018ac0:	787c      	ldrb	r4, [r7, #1]
 8018ac2:	1cbd      	adds	r5, r7, #2
 8018ac4:	2101      	movs	r1, #1
 8018ac6:	2e00      	cmp	r6, #0
 8018ac8:	d05c      	beq.n	8018b84 <_strtoul_l.isra.0+0xec>
 8018aca:	2e10      	cmp	r6, #16
 8018acc:	d109      	bne.n	8018ae2 <_strtoul_l.isra.0+0x4a>
 8018ace:	2c30      	cmp	r4, #48	; 0x30
 8018ad0:	d107      	bne.n	8018ae2 <_strtoul_l.isra.0+0x4a>
 8018ad2:	782b      	ldrb	r3, [r5, #0]
 8018ad4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018ad8:	2b58      	cmp	r3, #88	; 0x58
 8018ada:	d14e      	bne.n	8018b7a <_strtoul_l.isra.0+0xe2>
 8018adc:	786c      	ldrb	r4, [r5, #1]
 8018ade:	2610      	movs	r6, #16
 8018ae0:	3502      	adds	r5, #2
 8018ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	fbb2 f2f6 	udiv	r2, r2, r6
 8018aec:	fb06 fc02 	mul.w	ip, r6, r2
 8018af0:	ea6f 0c0c 	mvn.w	ip, ip
 8018af4:	4618      	mov	r0, r3
 8018af6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018afa:	2f09      	cmp	r7, #9
 8018afc:	d817      	bhi.n	8018b2e <_strtoul_l.isra.0+0x96>
 8018afe:	463c      	mov	r4, r7
 8018b00:	42a6      	cmp	r6, r4
 8018b02:	dd23      	ble.n	8018b4c <_strtoul_l.isra.0+0xb4>
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	db1e      	blt.n	8018b46 <_strtoul_l.isra.0+0xae>
 8018b08:	4282      	cmp	r2, r0
 8018b0a:	d31c      	bcc.n	8018b46 <_strtoul_l.isra.0+0xae>
 8018b0c:	d101      	bne.n	8018b12 <_strtoul_l.isra.0+0x7a>
 8018b0e:	45a4      	cmp	ip, r4
 8018b10:	db19      	blt.n	8018b46 <_strtoul_l.isra.0+0xae>
 8018b12:	fb00 4006 	mla	r0, r0, r6, r4
 8018b16:	2301      	movs	r3, #1
 8018b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b1c:	e7eb      	b.n	8018af6 <_strtoul_l.isra.0+0x5e>
 8018b1e:	462f      	mov	r7, r5
 8018b20:	e7c1      	b.n	8018aa6 <_strtoul_l.isra.0+0xe>
 8018b22:	2c2b      	cmp	r4, #43	; 0x2b
 8018b24:	bf04      	itt	eq
 8018b26:	1cbd      	addeq	r5, r7, #2
 8018b28:	787c      	ldrbeq	r4, [r7, #1]
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	e7cb      	b.n	8018ac6 <_strtoul_l.isra.0+0x2e>
 8018b2e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018b32:	2f19      	cmp	r7, #25
 8018b34:	d801      	bhi.n	8018b3a <_strtoul_l.isra.0+0xa2>
 8018b36:	3c37      	subs	r4, #55	; 0x37
 8018b38:	e7e2      	b.n	8018b00 <_strtoul_l.isra.0+0x68>
 8018b3a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018b3e:	2f19      	cmp	r7, #25
 8018b40:	d804      	bhi.n	8018b4c <_strtoul_l.isra.0+0xb4>
 8018b42:	3c57      	subs	r4, #87	; 0x57
 8018b44:	e7dc      	b.n	8018b00 <_strtoul_l.isra.0+0x68>
 8018b46:	f04f 33ff 	mov.w	r3, #4294967295
 8018b4a:	e7e5      	b.n	8018b18 <_strtoul_l.isra.0+0x80>
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	da09      	bge.n	8018b64 <_strtoul_l.isra.0+0xcc>
 8018b50:	2322      	movs	r3, #34	; 0x22
 8018b52:	f8c8 3000 	str.w	r3, [r8]
 8018b56:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5a:	f1ba 0f00 	cmp.w	sl, #0
 8018b5e:	d107      	bne.n	8018b70 <_strtoul_l.isra.0+0xd8>
 8018b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b64:	b101      	cbz	r1, 8018b68 <_strtoul_l.isra.0+0xd0>
 8018b66:	4240      	negs	r0, r0
 8018b68:	f1ba 0f00 	cmp.w	sl, #0
 8018b6c:	d0f8      	beq.n	8018b60 <_strtoul_l.isra.0+0xc8>
 8018b6e:	b10b      	cbz	r3, 8018b74 <_strtoul_l.isra.0+0xdc>
 8018b70:	f105 39ff 	add.w	r9, r5, #4294967295
 8018b74:	f8ca 9000 	str.w	r9, [sl]
 8018b78:	e7f2      	b.n	8018b60 <_strtoul_l.isra.0+0xc8>
 8018b7a:	2430      	movs	r4, #48	; 0x30
 8018b7c:	2e00      	cmp	r6, #0
 8018b7e:	d1b0      	bne.n	8018ae2 <_strtoul_l.isra.0+0x4a>
 8018b80:	2608      	movs	r6, #8
 8018b82:	e7ae      	b.n	8018ae2 <_strtoul_l.isra.0+0x4a>
 8018b84:	2c30      	cmp	r4, #48	; 0x30
 8018b86:	d0a4      	beq.n	8018ad2 <_strtoul_l.isra.0+0x3a>
 8018b88:	260a      	movs	r6, #10
 8018b8a:	e7aa      	b.n	8018ae2 <_strtoul_l.isra.0+0x4a>

08018b8c <_strtoul_r>:
 8018b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b8e:	4c06      	ldr	r4, [pc, #24]	; (8018ba8 <_strtoul_r+0x1c>)
 8018b90:	4d06      	ldr	r5, [pc, #24]	; (8018bac <_strtoul_r+0x20>)
 8018b92:	6824      	ldr	r4, [r4, #0]
 8018b94:	6a24      	ldr	r4, [r4, #32]
 8018b96:	2c00      	cmp	r4, #0
 8018b98:	bf08      	it	eq
 8018b9a:	462c      	moveq	r4, r5
 8018b9c:	9400      	str	r4, [sp, #0]
 8018b9e:	f7ff ff7b 	bl	8018a98 <_strtoul_l.isra.0>
 8018ba2:	b003      	add	sp, #12
 8018ba4:	bd30      	pop	{r4, r5, pc}
 8018ba6:	bf00      	nop
 8018ba8:	2000000c 	.word	0x2000000c
 8018bac:	20000070 	.word	0x20000070

08018bb0 <__submore>:
 8018bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb4:	460c      	mov	r4, r1
 8018bb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bbc:	4299      	cmp	r1, r3
 8018bbe:	d11d      	bne.n	8018bfc <__submore+0x4c>
 8018bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018bc4:	f7ff fa66 	bl	8018094 <_malloc_r>
 8018bc8:	b918      	cbnz	r0, 8018bd2 <__submore+0x22>
 8018bca:	f04f 30ff 	mov.w	r0, #4294967295
 8018bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bd6:	63a3      	str	r3, [r4, #56]	; 0x38
 8018bd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8018bde:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018be2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018be6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018bea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018bee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018bf2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018bf6:	6020      	str	r0, [r4, #0]
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e7e8      	b.n	8018bce <__submore+0x1e>
 8018bfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018bfe:	0077      	lsls	r7, r6, #1
 8018c00:	463a      	mov	r2, r7
 8018c02:	f000 f837 	bl	8018c74 <_realloc_r>
 8018c06:	4605      	mov	r5, r0
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	d0de      	beq.n	8018bca <__submore+0x1a>
 8018c0c:	eb00 0806 	add.w	r8, r0, r6
 8018c10:	4601      	mov	r1, r0
 8018c12:	4632      	mov	r2, r6
 8018c14:	4640      	mov	r0, r8
 8018c16:	f7fb fe8b 	bl	8014930 <memcpy>
 8018c1a:	f8c4 8000 	str.w	r8, [r4]
 8018c1e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018c22:	e7e9      	b.n	8018bf8 <__submore+0x48>

08018c24 <__ascii_wctomb>:
 8018c24:	b149      	cbz	r1, 8018c3a <__ascii_wctomb+0x16>
 8018c26:	2aff      	cmp	r2, #255	; 0xff
 8018c28:	bf85      	ittet	hi
 8018c2a:	238a      	movhi	r3, #138	; 0x8a
 8018c2c:	6003      	strhi	r3, [r0, #0]
 8018c2e:	700a      	strbls	r2, [r1, #0]
 8018c30:	f04f 30ff 	movhi.w	r0, #4294967295
 8018c34:	bf98      	it	ls
 8018c36:	2001      	movls	r0, #1
 8018c38:	4770      	bx	lr
 8018c3a:	4608      	mov	r0, r1
 8018c3c:	4770      	bx	lr

08018c3e <memmove>:
 8018c3e:	4288      	cmp	r0, r1
 8018c40:	b510      	push	{r4, lr}
 8018c42:	eb01 0302 	add.w	r3, r1, r2
 8018c46:	d807      	bhi.n	8018c58 <memmove+0x1a>
 8018c48:	1e42      	subs	r2, r0, #1
 8018c4a:	4299      	cmp	r1, r3
 8018c4c:	d00a      	beq.n	8018c64 <memmove+0x26>
 8018c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018c56:	e7f8      	b.n	8018c4a <memmove+0xc>
 8018c58:	4283      	cmp	r3, r0
 8018c5a:	d9f5      	bls.n	8018c48 <memmove+0xa>
 8018c5c:	1881      	adds	r1, r0, r2
 8018c5e:	1ad2      	subs	r2, r2, r3
 8018c60:	42d3      	cmn	r3, r2
 8018c62:	d100      	bne.n	8018c66 <memmove+0x28>
 8018c64:	bd10      	pop	{r4, pc}
 8018c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018c6e:	e7f7      	b.n	8018c60 <memmove+0x22>

08018c70 <__malloc_lock>:
 8018c70:	4770      	bx	lr

08018c72 <__malloc_unlock>:
 8018c72:	4770      	bx	lr

08018c74 <_realloc_r>:
 8018c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c76:	4607      	mov	r7, r0
 8018c78:	4614      	mov	r4, r2
 8018c7a:	460e      	mov	r6, r1
 8018c7c:	b921      	cbnz	r1, 8018c88 <_realloc_r+0x14>
 8018c7e:	4611      	mov	r1, r2
 8018c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018c84:	f7ff ba06 	b.w	8018094 <_malloc_r>
 8018c88:	b922      	cbnz	r2, 8018c94 <_realloc_r+0x20>
 8018c8a:	f7ff f9b5 	bl	8017ff8 <_free_r>
 8018c8e:	4625      	mov	r5, r4
 8018c90:	4628      	mov	r0, r5
 8018c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c94:	f000 f814 	bl	8018cc0 <_malloc_usable_size_r>
 8018c98:	42a0      	cmp	r0, r4
 8018c9a:	d20f      	bcs.n	8018cbc <_realloc_r+0x48>
 8018c9c:	4621      	mov	r1, r4
 8018c9e:	4638      	mov	r0, r7
 8018ca0:	f7ff f9f8 	bl	8018094 <_malloc_r>
 8018ca4:	4605      	mov	r5, r0
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	d0f2      	beq.n	8018c90 <_realloc_r+0x1c>
 8018caa:	4631      	mov	r1, r6
 8018cac:	4622      	mov	r2, r4
 8018cae:	f7fb fe3f 	bl	8014930 <memcpy>
 8018cb2:	4631      	mov	r1, r6
 8018cb4:	4638      	mov	r0, r7
 8018cb6:	f7ff f99f 	bl	8017ff8 <_free_r>
 8018cba:	e7e9      	b.n	8018c90 <_realloc_r+0x1c>
 8018cbc:	4635      	mov	r5, r6
 8018cbe:	e7e7      	b.n	8018c90 <_realloc_r+0x1c>

08018cc0 <_malloc_usable_size_r>:
 8018cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cc4:	1f18      	subs	r0, r3, #4
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	bfbc      	itt	lt
 8018cca:	580b      	ldrlt	r3, [r1, r0]
 8018ccc:	18c0      	addlt	r0, r0, r3
 8018cce:	4770      	bx	lr

08018cd0 <_init>:
 8018cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cd2:	bf00      	nop
 8018cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cd6:	bc08      	pop	{r3}
 8018cd8:	469e      	mov	lr, r3
 8018cda:	4770      	bx	lr

08018cdc <_fini>:
 8018cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cde:	bf00      	nop
 8018ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ce2:	bc08      	pop	{r3}
 8018ce4:	469e      	mov	lr, r3
 8018ce6:	4770      	bx	lr
