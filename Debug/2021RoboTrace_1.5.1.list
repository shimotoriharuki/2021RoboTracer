
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  080178b8  080178b8  000278b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183bc  080183bc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080183bc  080183bc  000283bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183c4  080183c4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080183c4  080183c4  000283c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080183cc  080183cc  000283cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080183d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037df0  200001e0  080185ac  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fd0  080185ac  00037fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037d9d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007921  00000000  00000000  00067fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e0  00000000  00000000  0006f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f20  00000000  00000000  00071ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f32  00000000  00000000  000739d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002577e  00000000  00000000  000aa902  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001102c6  00000000  00000000  000d0080  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a108  00000000  00000000  001e03c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080178a0 	.word	0x080178a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080178a0 	.word	0x080178a0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 f904 	bl	80091e4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035ac4 	.word	0x20035ac4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 f8ec 	bl	80091e4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035ac4 	.word	0x20035ac4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 ff8d 	bl	8008f40 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fcf4 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fcee 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fce8 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fce2 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fcdc 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fcd6 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fcd0 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fcca 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fcc4 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fcbe 	bl	8007a14 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fcb2 	bl	8007a14 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fcac 	bl	8007a14 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 ff8d 	bl	8015048 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b feb0 	bl	800cf14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b feac 	bl	800cf14 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035d18 	.word	0x20035d18
 80011d8:	200359fc 	.word	0x200359fc
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	ce73a049 	.word	0xce73a049
 80013ac:	3f77a3f6 	.word	0x3f77a3f6
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 fa4a 	bl	80119c8 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20034908 	.word	0x20034908

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 fe17 	bl	80141b0 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 fa8e 	bl	8011ab0 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 fa89 	bl	8011ab0 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f00f fff7 	bl	801159e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	080178b8 	.word	0x080178b8
 80015dc:	20034878 	.word	0x20034878
 80015e0:	20034908 	.word	0x20034908
 80015e4:	200348f8 	.word	0x200348f8

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 fa05 	bl	8011a1c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 fc70 	bl	8011ef8 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 f9ff 	bl	8011a1c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fdb2 	bl	80141b0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 fa2c 	bl	8011ab0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f00f ff9a 	bl	801159e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f010 f99e 	bl	80119c8 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034778 	.word	0x20034778
 800169c:	20033638 	.word	0x20033638
 80016a0:	080178d4 	.word	0x080178d4
 80016a4:	080178b8 	.word	0x080178b8
 80016a8:	20034878 	.word	0x20034878
 80016ac:	20034908 	.word	0x20034908
 80016b0:	200348f8 	.word	0x200348f8

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fdb5 	bl	8014258 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fdce 	bl	80122b4 <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f010 f950 	bl	80119c8 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	080178c4 	.word	0x080178c4
 8001738:	20034878 	.word	0x20034878
 800173c:	20034908 	.word	0x20034908

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fd6f 	bl	8014258 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fd88 	bl	80122b4 <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f010 f90a 	bl	80119c8 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080178d0 	.word	0x080178d0
 80017c4:	20034878 	.word	0x20034878
 80017c8:	20034908 	.word	0x20034908

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f fb6c 	bl	8010eb8 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080178e0 	.word	0x080178e0
 8001800:	20033738 	.word	0x20033738

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 fd4d 	bl	80142b0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 fd49 	bl	80142b0 <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034778 	.word	0x20034778
 800182c:	20033638 	.word	0x20033638

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fc21 	bl	801207c <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f010 f8ee 	bl	8011a1c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f fb7d 	bl	8010f44 <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f010 f8e6 	bl	8011a1c <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034778 	.word	0x20034778
 8001858:	20033638 	.word	0x20033638
 800185c:	20034908 	.word	0x20034908
 8001860:	080178d4 	.word	0x080178d4

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034878 	.word	0x20034878

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 fb44 	bl	8008f40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fced 	bl	800c2a0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a fe1a 	bl	800c508 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 fb30 	bl	8008f40 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	200359a4 	.word	0x200359a4

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 fb13 	bl	8008f40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a fcbc 	bl	800c2a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a fcb6 	bl	800c2a0 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 fb00 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	200359a4 	.word	0x200359a4

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035940 	.word	0x20035940
 8001a10:	2003593e 	.word	0x2003593e
 8001a14:	20035938 	.word	0x20035938

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a6c:	f7ff fb18 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fb24 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <_ZN3IMU4initEv+0x44>)
 8001a7a:	f7ff fb4b 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fb1d 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <_ZN3IMU4initEv+0x48>)
 8001a8c:	f7ff fb42 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a94:	f005 ffbe 	bl	8007a14 <HAL_Delay>

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	080178e4 	.word	0x080178e4
 8001aa4:	080178f0 	.word	0x080178f0

08001aa8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ab0:	f7ff ff7a 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3b 	bl	8000554 <__aeabi_i2d>
 8001ade:	a316      	add	r3, pc, #88	; (adr r3, 8001b38 <_ZN3IMU12updateValuesEv+0x90>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fda0 	bl	8000628 <__aeabi_dmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4625      	mov	r5, r4
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd2c 	bl	8000554 <__aeabi_i2d>
 8001afc:	a310      	add	r3, pc, #64	; (adr r3, 8001b40 <_ZN3IMU12updateValuesEv+0x98>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd91 	bl	8000628 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbd5 	bl	80002bc <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f7ff f835 	bl	8000b88 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001b2e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}
 8001b38:	eb851eb8 	.word	0xeb851eb8
 8001b3c:	3f9eb851 	.word	0x3f9eb851
 8001b40:	70a3d70a 	.word	0x70a3d70a
 8001b44:	3fef0a3d 	.word	0x3fef0a3d
 8001b48:	20035940 	.word	0x20035940
 8001b4c:	2003593e 	.word	0x2003593e
 8001b50:	20035938 	.word	0x20035938
 8001b54:	20000210 	.word	0x20000210

08001b58 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7fe fcfb 	bl	8000578 <__aeabi_f2d>
 8001b82:	a316      	add	r3, pc, #88	; (adr r3, 8001bdc <_ZN3IMU8getOmegaEv+0x84>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fe78 	bl	800087c <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b96:	a313      	add	r3, pc, #76	; (adr r3, 8001be4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fd42 	bl	8000628 <__aeabi_dmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4621      	mov	r1, r4
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bb2:	f7fe fe63 	bl	800087c <__aeabi_ddiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7ff f82b 	bl	8000c18 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	ee07 3a90 	vmov	s15, r3
}
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	40668000 	.word	0x40668000
 8001bdc:	66666666 	.word	0x66666666
 8001be0:	40306666 	.word	0x40306666
 8001be4:	54411744 	.word	0x54411744
 8001be8:	400921fb 	.word	0x400921fb

08001bec <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bf4:	466b      	mov	r3, sp
 8001bf6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfc:	f005 ff0a 	bl	8007a14 <HAL_Delay>
	lcd_clear();
 8001c00:	f7ff fa4e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fa5a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c0c:	4840      	ldr	r0, [pc, #256]	; (8001d10 <_ZN3IMU11calibrationEv+0x124>)
 8001c0e:	f7ff fa81 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c12:	2101      	movs	r1, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fa53 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c1a:	483e      	ldr	r0, [pc, #248]	; (8001d14 <_ZN3IMU11calibrationEv+0x128>)
 8001c1c:	f7ff fa7a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c24:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c2a:	1e5d      	subs	r5, r3, #1
 8001c2c:	61bd      	str	r5, [r7, #24]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	3301      	adds	r3, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f04f 0400 	mov.w	r4, #0
 8001c40:	0154      	lsls	r4, r2, #5
 8001c42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c46:	014b      	lsls	r3, r1, #5
 8001c48:	462b      	mov	r3, r5
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	0154      	lsls	r4, r2, #5
 8001c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c60:	014b      	lsls	r3, r1, #5
 8001c62:	462b      	mov	r3, r5
 8001c64:	3301      	adds	r3, #1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3303      	adds	r3, #3
 8001c6a:	3307      	adds	r3, #7
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	ebad 0d03 	sub.w	sp, sp, r3
 8001c74:	466b      	mov	r3, sp
 8001c76:	3303      	adds	r3, #3
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	83fb      	strh	r3, [r7, #30]
 8001c82:	8bfa      	ldrh	r2, [r7, #30]
 8001c84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	da13      	bge.n	8001cb4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c92:	8bfb      	ldrh	r3, [r7, #30]
 8001c94:	ee07 2a90 	vmov	s15, r2
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f005 feb4 	bl	8007a14 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	e7e6      	b.n	8001c82 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d00e      	beq.n	8001cea <_ZN3IMU11calibrationEv+0xfe>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e7ec      	b.n	8001cc4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d04:	46b5      	mov	sp, r6
}
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	080178f4 	.word	0x080178f4
 8001d14:	08017900 	.word	0x08017900

08001d18 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	1dfa      	adds	r2, r7, #7
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <INA260_read+0x50>)
 8001d36:	f007 fa55 	bl	80091e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2302      	movs	r3, #2
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <INA260_read+0x50>)
 8001d4a:	f007 fb49 	bl	80093e0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20035b58 	.word	0x20035b58

08001d6c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	460b      	mov	r3, r1
 8001d84:	717b      	strb	r3, [r7, #5]
 8001d86:	4613      	mov	r3, r2
 8001d88:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	733b      	strb	r3, [r7, #12]
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	737b      	strb	r3, [r7, #13]
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <INA260_write+0x48>)
 8001da6:	f007 fa1d 	bl	80091e4 <HAL_I2C_Master_Transmit>
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20035b58 	.word	0x20035b58

08001db8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dca:	797b      	ldrb	r3, [r7, #5]
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	79f9      	ldrb	r1, [r7, #7]
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ffcb 	bl	8001d6c <INA260_write>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	461a      	mov	r2, r3
 8001dec:	21df      	movs	r1, #223	; 0xdf
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffe2 	bl	8001db8 <setConfig>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
{

}
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e26:	f007 f873 	bl	8008f10 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <_ZN8JoyStick8getValueEv+0x2e>
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e42:	2101      	movs	r1, #1
 8001e44:	4823      	ldr	r0, [pc, #140]	; (8001ed4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e46:	f007 f863 	bl	8008f10 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x4e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e66:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e68:	f007 f852 	bl	8008f10 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <_ZN8JoyStick8getValueEv+0x70>
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e84:	2104      	movs	r1, #4
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e88:	f007 f842 	bl	8008f10 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x90>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea8:	f007 f832 	bl	8008f10 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020400 	.word	0x40020400

08001edc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b52      	cmp	r3, #82	; 0x52
 8001eec:	d112      	bne.n	8001f14 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef4:	4856      	ldr	r0, [pc, #344]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ef6:	f007 f823 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	4853      	ldr	r0, [pc, #332]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f02:	f007 f81d 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0c:	4850      	ldr	r0, [pc, #320]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f007 f817 	bl	8008f40 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f12:	e098      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b47      	cmp	r3, #71	; 0x47
 8001f18:	d112      	bne.n	8001f40 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f20:	484b      	ldr	r0, [pc, #300]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 f80d 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f2c:	4848      	ldr	r0, [pc, #288]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 f807 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f38:	4845      	ldr	r0, [pc, #276]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f3a:	f007 f801 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001f3e:	e082      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b42      	cmp	r3, #66	; 0x42
 8001f44:	d112      	bne.n	8001f6c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	4840      	ldr	r0, [pc, #256]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f006 fff7 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f58:	483d      	ldr	r0, [pc, #244]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f006 fff1 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	483a      	ldr	r0, [pc, #232]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f006 ffeb 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001f6a:	e06c      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b43      	cmp	r3, #67	; 0x43
 8001f70:	d112      	bne.n	8001f98 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	4835      	ldr	r0, [pc, #212]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f006 ffe1 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f84:	4832      	ldr	r0, [pc, #200]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f006 ffdb 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f90:	482f      	ldr	r0, [pc, #188]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f006 ffd5 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001f96:	e056      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f9c:	d112      	bne.n	8001fc4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	482a      	ldr	r0, [pc, #168]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f006 ffcb 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	4827      	ldr	r0, [pc, #156]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f006 ffc5 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbc:	4824      	ldr	r0, [pc, #144]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f006 ffbf 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001fc2:	e040      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b59      	cmp	r3, #89	; 0x59
 8001fc8:	d112      	bne.n	8001ff0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f006 ffb5 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f006 ffaf 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	4819      	ldr	r0, [pc, #100]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f006 ffa9 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8001fee:	e02a      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b57      	cmp	r3, #87	; 0x57
 8001ff4:	d112      	bne.n	800201c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f006 ff9f 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f006 ff99 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002016:	f006 ff93 	bl	8008f40 <HAL_GPIO_WritePin>
}
 800201a:	e014      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b7e      	cmp	r3, #126	; 0x7e
 8002020:	d111      	bne.n	8002046 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f006 ff89 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f006 ff83 	bl	8008f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002042:	f006 ff7d 	bl	8008f40 <HAL_GPIO_WritePin>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40020000 	.word	0x40020000

08002054 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002072:	4813      	ldr	r0, [pc, #76]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 8002074:	f006 ff64 	bl	8008f40 <HAL_GPIO_WritePin>
 8002078:	e009      	b.n	800208e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800208a:	f006 ff59 	bl	8008f40 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800208e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800209e:	f006 ff4f 	bl	8008f40 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020a2:	e009      	b.n	80020b8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 80020b4:	f006 ff44 	bl	8008f40 <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000

080020c4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b092      	sub	sp, #72	; 0x48
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe92 	bl	8001dfc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	331c      	adds	r3, #28
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
 80020e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d008      	beq.n	8002100 <_ZN10LineSensorC1Ev+0x3c>
 80020ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	3302      	adds	r3, #2
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
 80020fe:	e7f2      	b.n	80020e6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	643b      	str	r3, [r7, #64]	; 0x40
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <_ZN10LineSensorC1Ev+0x6a>
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	623b      	str	r3, [r7, #32]
		s = 0;
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	3304      	adds	r3, #4
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	e7f1      	b.n	8002112 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3338      	adds	r3, #56	; 0x38
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	429a      	cmp	r2, r3
 8002146:	d009      	beq.n	800215c <_ZN10LineSensorC1Ev+0x98>
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	617b      	str	r3, [r7, #20]
		m = 0;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	3304      	adds	r3, #4
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	e7f1      	b.n	8002140 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3338      	adds	r3, #56	; 0x38
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d009      	beq.n	800218a <_ZN10LineSensorC1Ev+0xc6>
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	60bb      	str	r3, [r7, #8]
		s = 1;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002180:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	3304      	adds	r3, #4
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	e7f1      	b.n	800216e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	3748      	adds	r7, #72	; 0x48
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	220e      	movs	r2, #14
 80021a0:	4619      	mov	r1, r3
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021a4:	f005 fc9c 	bl	8007ae0 <HAL_ADC_Start_DMA>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20035a7c 	.word	0x20035a7c

080021b4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	dc2f      	bgt.n	8002226 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3392      	adds	r3, #146	; 0x92
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	33a0      	adds	r3, #160	; 0xa0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	440b      	add	r3, r1
 8002212:	3306      	adds	r3, #6
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e7cc      	b.n	80021c0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002230:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b09      	cmp	r3, #9
 8002238:	d902      	bls.n	8002240 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]


}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	2000021c 	.word	0x2000021c

08002250 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800225e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f200 80b8 	bhi.w	80023d8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800226e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002272:	2b09      	cmp	r3, #9
 8002274:	d81c      	bhi.n	80022b0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002276:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800227a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800227e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4423      	add	r3, r4
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4403      	add	r3, r0
 8002294:	3304      	adds	r3, #4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800229e:	440b      	add	r3, r1
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022a8:	3301      	adds	r3, #1
 80022aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ae:	e7de      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d84d      	bhi.n	800235a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c2:	3301      	adds	r3, #1
 80022c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d83e      	bhi.n	800234e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022da:	4413      	add	r3, r2
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ec:	4413      	add	r3, r2
 80022ee:	3b30      	subs	r3, #48	; 0x30
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d521      	bpl.n	8002342 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002308:	4413      	add	r3, r2
 800230a:	3b30      	subs	r3, #48	; 0x30
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002310:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002314:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800231e:	440a      	add	r2, r1
 8002320:	3a30      	subs	r2, #48	; 0x30
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232a:	440b      	add	r3, r1
 800232c:	3b30      	subs	r3, #48	; 0x30
 800232e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002330:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233a:	4413      	add	r3, r2
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002342:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002346:	3301      	adds	r3, #1
 8002348:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800234c:	e7bc      	b.n	80022c8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800234e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002352:	3301      	adds	r3, #1
 8002354:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002358:	e7ad      	b.n	80022b6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f90b 	bl	8000578 <__aeabi_f2d>
 8002362:	a32a      	add	r3, pc, #168	; (adr r3, 800240c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f95e 	bl	8000628 <__aeabi_dmul>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	4625      	mov	r5, r4
 8002372:	461c      	mov	r4, r3
 8002374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8f9 	bl	8000578 <__aeabi_f2d>
 8002386:	a31c      	add	r3, pc, #112	; (adr r3, 80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f94c 	bl	8000628 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff90 	bl	80002bc <__adddf3>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	461a      	mov	r2, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fc34 	bl	8000c18 <__aeabi_d2f>
 80023b0:	4601      	mov	r1, r0
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d0:	3301      	adds	r3, #1
 80023d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023d6:	e742      	b.n	800225e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023e0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	66666666 	.word	0x66666666
 80023fc:	3fee6666 	.word	0x3fee6666
 8002400:	20000220 	.word	0x20000220
 8002404:	20000214 	.word	0x20000214
 8002408:	20000218 	.word	0x20000218
 800240c:	9999999a 	.word	0x9999999a
 8002410:	3fa99999 	.word	0x3fa99999

08002414 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a0      	sub	sp, #128	; 0x80
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f005 faf9 	bl	8007a14 <HAL_Delay>

	lcd_clear();
 8002422:	f7fe fe3d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fe49 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800242e:	4886      	ldr	r0, [pc, #536]	; (8002648 <_ZN10LineSensor11calibrationEv+0x234>)
 8002430:	f7fe fe70 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002434:	2101      	movs	r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fe42 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800243c:	4883      	ldr	r0, [pc, #524]	; (800264c <_ZN10LineSensor11calibrationEv+0x238>)
 800243e:	f7fe fe69 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002442:	2300      	movs	r3, #0
 8002444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800244c:	2b0d      	cmp	r3, #13
 800244e:	d823      	bhi.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002450:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002454:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	32b0      	adds	r2, #176	; 0xb0
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	440a      	add	r2, r1
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002468:	440b      	add	r3, r1
 800246a:	3b40      	subs	r3, #64	; 0x40
 800246c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800246e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002472:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	32b0      	adds	r2, #176	; 0xb0
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	440a      	add	r2, r1
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002486:	440b      	add	r3, r1
 8002488:	3b78      	subs	r3, #120	; 0x78
 800248a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800248c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002490:	3301      	adds	r3, #1
 8002492:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002496:	e7d7      	b.n	8002448 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcb8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024ba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024be:	2b0d      	cmp	r3, #13
 80024c0:	d850      	bhi.n	8002564 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024cc:	4413      	add	r3, r2
 80024ce:	3b40      	subs	r3, #64	; 0x40
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	33b0      	adds	r3, #176	; 0xb0
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	d50f      	bpl.n	800250e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024ee:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	32b0      	adds	r2, #176	; 0xb0
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	440a      	add	r2, r1
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002506:	440b      	add	r3, r1
 8002508:	3b40      	subs	r3, #64	; 0x40
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e024      	b.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800250e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002518:	4413      	add	r3, r2
 800251a:	3b78      	subs	r3, #120	; 0x78
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	33b0      	adds	r3, #176	; 0xb0
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd0e      	ble.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800253a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800253e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	32b0      	adds	r2, #176	; 0xb0
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	440a      	add	r2, r1
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002552:	440b      	add	r3, r1
 8002554:	3b78      	subs	r3, #120	; 0x78
 8002556:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002558:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800255c:	3301      	adds	r3, #1
 800255e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002562:	e7aa      	b.n	80024ba <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fce6 	bl	8003f3c <_ZN12RotarySwitch8getValueEv>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002586:	2201      	movs	r2, #1
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd61 	bl	8002054 <_ZN3LED2LREaa>
 8002592:	e781      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800259a:	2200      	movs	r2, #0
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd57 	bl	8002054 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025a6:	e777      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025b2:	2b0d      	cmp	r3, #13
 80025b4:	d826      	bhi.n	8002604 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025c0:	4413      	add	r3, r2
 80025c2:	3b40      	subs	r3, #64	; 0x40
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025d2:	4413      	add	r3, r2
 80025d4:	3b78      	subs	r3, #120	; 0x78
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025e2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002650 <_ZN10LineSensor11calibrationEv+0x23c>
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	3392      	adds	r3, #146	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002602:	e7d4      	b.n	80025ae <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800260a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d815      	bhi.n	800263e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002612:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002616:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002620:	440a      	add	r2, r1
 8002622:	3a78      	subs	r2, #120	; 0x78
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	33a0      	adds	r3, #160	; 0xa0
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002632:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002636:	3301      	adds	r3, #1
 8002638:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800263c:	e7e5      	b.n	800260a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800263e:	bf00      	nop
 8002640:	3780      	adds	r7, #128	; 0x80
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	0801790c 	.word	0x0801790c
 800264c:	08017918 	.word	0x08017918
 8002650:	447a0000 	.word	0x447a0000

08002654 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d012      	beq.n	80026a0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026f4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	db02      	blt.n	8002698 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002692:	8bfb      	ldrh	r3, [r7, #30]
 8002694:	3301      	adds	r3, #1
 8002696:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3304      	adds	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e7e8      	b.n	8002672 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d906      	bls.n	80026b4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e002      	b.n	80026ba <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b31      	cmp	r3, #49	; 0x31
 80026c0:	d903      	bls.n	80026ca <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026d8:	4293      	cmp	r3, r2
 80026da:	d903      	bls.n	80026e4 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026de:	f242 7210 	movw	r2, #10000	; 0x2710
 80026e2:	801a      	strh	r2, [r3, #0]

	return flag;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]

}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	442f0000 	.word	0x442f0000
 80026f8:	20000258 	.word	0x20000258
 80026fc:	2000025a 	.word	0x2000025a

08002700 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	ed87 0a01 	vstr	s0, [r7, #4]
 800270a:	edd7 7a01 	vldr	s15, [r7, #4]
 800270e:	eef0 7ae7 	vabs.f32	s15, s15
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

uint16_t mon_store_cnt;
float mon_pdis;
float mon_ave_l, mon_ave_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false), velocity_play_flag_(false), velocity_table_idx_(0)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	675a      	str	r2, [r3, #116]	; 0x74
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800278c:	333c      	adds	r3, #60	; 0x3c
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002798:	333e      	adds	r3, #62	; 0x3e
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
{
	motor_ = motor;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c0:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027c8:	2300      	movs	r3, #0
 80027ca:	82fb      	strh	r3, [r7, #22]
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	f241 726f 	movw	r2, #5999	; 0x176f
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d80c      	bhi.n	80027f0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xd0>
		velocity_table_[i] = 0;
 80027d6:	8afb      	ldrh	r3, [r7, #22]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	331e      	adds	r3, #30
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027e8:	8afb      	ldrh	r3, [r7, #22]
 80027ea:	3301      	adds	r3, #1
 80027ec:	82fb      	strh	r3, [r7, #22]
 80027ee:	e7ed      	b.n	80027cc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xac>
	}
}
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002868:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002874:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002880:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800288c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002898:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80028a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028ac:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <_ZN9LineTrace9calcErrorEv+0x130>)
 80028b4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe5d 	bl	8000578 <__aeabi_f2d>
 80028be:	a318      	add	r3, pc, #96	; (adr r3, 8002920 <_ZN9LineTrace9calcErrorEv+0x120>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd feb0 	bl	8000628 <__aeabi_dmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	4625      	mov	r5, r4
 80028ce:	461c      	mov	r4, r3
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe4f 	bl	8000578 <__aeabi_f2d>
 80028da:	a313      	add	r3, pc, #76	; (adr r3, 8002928 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fea2 	bl	8000628 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fce6 	bl	80002bc <__adddf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4618      	mov	r0, r3
 80028f6:	4621      	mov	r1, r4
 80028f8:	f7fe f98e 	bl	8000c18 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002904:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <_ZN9LineTrace9calcErrorEv+0x134>)
 800290a:	6013      	str	r3, [r2, #0]

	return diff;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	ee07 3a90 	vmov	s15, r3

}
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	f3af 8000 	nop.w
 8002920:	47ae147b 	.word	0x47ae147b
 8002924:	3fb47ae1 	.word	0x3fb47ae1
 8002928:	d70a3d71 	.word	0xd70a3d71
 800292c:	3fed70a3 	.word	0x3fed70a3
 8002930:	2000025c 	.word	0x2000025c
 8002934:	20000270 	.word	0x20000270
 8002938:	20000260 	.word	0x20000260
 800293c:	00000000 	.word	0x00000000

08002940 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff59 	bl	8002800 <_ZN9LineTrace9calcErrorEv>
 800294e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002972:	ed97 7a05 	vldr	s14, [r7, #20]
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002984:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	edd7 6a05 	vldr	s13, [r7, #20]
 800298e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fded 	bl	8000578 <__aeabi_f2d>
 800299e:	a32a      	add	r3, pc, #168	; (adr r3, 8002a48 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd ff6a 	bl	800087c <__aeabi_ddiv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	4618      	mov	r0, r3
 80029ae:	4621      	mov	r1, r4
 80029b0:	f7fe f932 	bl	8000c18 <__aeabi_d2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d4:	ee17 0a90 	vmov	r0, s15
 80029d8:	f7fd fdce 	bl	8000578 <__aeabi_f2d>
 80029dc:	a31a      	add	r3, pc, #104	; (adr r3, 8002a48 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe21 	bl	8000628 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f7fd fc65 	bl	80002bc <__adddf3>
 80029f2:	4603      	mov	r3, r0
 80029f4:	460c      	mov	r4, r1
 80029f6:	4618      	mov	r0, r3
 80029f8:	4621      	mov	r1, r4
 80029fa:	f7fe f90d 	bl	8000c18 <__aeabi_d2f>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a02:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a28:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a30:	4610      	mov	r0, r2
 8002a32:	f001 fe59 	bl	80046e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	6013      	str	r3, [r2, #0]

}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}
 8002a44:	f3af 8000 	nop.w
 8002a48:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a4c:	3f50624d 	.word	0x3f50624d
 8002a50:	20000278 	.word	0x20000278
 8002a54:	20000274 	.word	0x20000274

08002a58 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fd17 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f8b6 	bl	8003be0 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fe4b 	bl	800372c <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b04:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
	mon_ave_l = sensor_edge_val_l;
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <_ZN9LineTrace11isCrossLineEv+0xc4>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <_ZN9LineTrace11isCrossLineEv+0xc8>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6013      	str	r3, [r2, #0]

	if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002b74 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d50f      	bpl.n	8002b4a <_ZN9LineTrace11isCrossLineEv+0xa2>
 8002b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b74 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	d506      	bpl.n	8002b4a <_ZN9LineTrace11isCrossLineEv+0xa2>
		cnt++;
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	e002      	b.n	8002b50 <_ZN9LineTrace11isCrossLineEv+0xa8>
	}
	else{
		cnt = 0;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <_ZN9LineTrace11isCrossLineEv+0xb4>
		flag = true;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000268 	.word	0x20000268
 8002b70:	2000026c 	.word	0x2000026c
 8002b74:	44160000 	.word	0x44160000
 8002b78:	2000027c 	.word	0x2000027c

08002b7c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(radius < 130) velocity = 1.0;
 8002b88:	edd7 7a00 	vldr	s15, [r7]
 8002b8c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002bd4 <_ZN9LineTrace15radius2VelocityEf+0x58>
 8002b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b98:	d503      	bpl.n	8002ba2 <_ZN9LineTrace15radius2VelocityEf+0x26>
 8002b9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e00e      	b.n	8002bc0 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else if(radius < 250) velocity = 1.3;
 8002ba2:	edd7 7a00 	vldr	s15, [r7]
 8002ba6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002bd8 <_ZN9LineTrace15radius2VelocityEf+0x5c>
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d502      	bpl.n	8002bba <_ZN9LineTrace15radius2VelocityEf+0x3e>
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <_ZN9LineTrace15radius2VelocityEf+0x60>)
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else velocity = 1.5;
 8002bba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002bbe:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	ee07 3a90 	vmov	s15, r3
}
 8002bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	43020000 	.word	0x43020000
 8002bd8:	437a0000 	.word	0x437a0000
 8002bdc:	3fa66666 	.word	0x3fa66666

08002be0 <_ZN9LineTrace20createVelocityTabeleEv>:
void LineTrace::createVelocityTabele()
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d8      	ldr	r0, [r3, #28]
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <_ZN9LineTrace20createVelocityTabeleEv+0xdc>)
 8002bee:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <_ZN9LineTrace20createVelocityTabeleEv+0xe0>)
 8002bf0:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002bf2:	f000 fcf0 	bl	80035d6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fc83 	bl	8003506 <_ZN6Logger23getDistanceArrayPointerEv>
 8002c00:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc8b 	bl	8003522 <_ZN6Logger20getThetaArrayPointerEv>
 8002c0c:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c0e:	2300      	movs	r3, #0
 8002c10:	837b      	strh	r3, [r7, #26]
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d83f      	bhi.n	8002c9c <_ZN9LineTrace20createVelocityTabeleEv+0xbc>
		temp_distance = p_distance[i];
 8002c1c:	8b7b      	ldrh	r3, [r7, #26]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	d101      	bne.n	8002c46 <_ZN9LineTrace20createVelocityTabeleEv+0x66>
 8002c42:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002c44:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002c46:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c52:	eeb0 0a66 	vmov.f32	s0, s13
 8002c56:	f7ff fd53 	bl	8002700 <_ZSt3absf>
 8002c5a:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c62:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002ccc <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	db01      	blt.n	8002c74 <_ZN9LineTrace20createVelocityTabeleEv+0x94>
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002c72:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002c74:	8b7c      	ldrh	r4, [r7, #26]
 8002c76:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff7e 	bl	8002b7c <_ZN9LineTrace15radius2VelocityEf>
 8002c80:	eef0 7a40 	vmov.f32	s15, s0
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f104 031e 	add.w	r3, r4, #30
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	3301      	adds	r3, #1
 8002c98:	837b      	strh	r3, [r7, #26]
 8002c9a:	e7ba      	b.n	8002c12 <_ZN9LineTrace20createVelocityTabeleEv+0x32>
		//velocity_table_[i] = radius;
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002cb0:	f7fe fc9a 	bl	80015e8 <sd_write_array_float>

}
 8002cb4:	bf00      	nop
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	0801795c 	.word	0x0801795c
 8002cc0:	08017968 	.word	0x08017968
 8002cc4:	08017978 	.word	0x08017978
 8002cc8:	3727c5ac 	.word	0x3727c5ac
 8002ccc:	459c4000 	.word	0x459c4000
 8002cd0:	459c4000 	.word	0x459c4000
 8002cd4:	08017984 	.word	0x08017984

08002cd8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00f      	beq.n	8002d0e <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fb91 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8002cfc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	db01      	blt.n	8002d0e <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <_ZN9LineTrace20updateTargetVelocityEv+0x38>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01c      	beq.n	8002d4e <_ZN9LineTrace20updateTargetVelocityEv+0x76>
		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d1a:	333e      	adds	r3, #62	; 0x3e
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	331e      	adds	r3, #30
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f89a 	bl	8002e6a <_ZN9LineTrace17setTargetVelocityEf>

		velocity_table_idx_++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d3c:	333e      	adds	r3, #62	; 0x3e
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d4a:	333e      	adds	r3, #62	; 0x3e
 8002d4c:	801a      	strh	r2, [r3, #0]
	}

}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2201      	movs	r2, #1
 8002d66:	4912      	ldr	r1, [pc, #72]	; (8002db0 <_ZN9LineTrace4initEv+0x58>)
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <_ZN9LineTrace4initEv+0x5c>)
 8002d6a:	f7fe fca3 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	2201      	movs	r2, #1
 8002d74:	4910      	ldr	r1, [pc, #64]	; (8002db8 <_ZN9LineTrace4initEv+0x60>)
 8002d76:	480f      	ldr	r0, [pc, #60]	; (8002db4 <_ZN9LineTrace4initEv+0x5c>)
 8002d78:	f7fe fc9c 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2201      	movs	r2, #1
 8002d82:	490e      	ldr	r1, [pc, #56]	; (8002dbc <_ZN9LineTrace4initEv+0x64>)
 8002d84:	480b      	ldr	r0, [pc, #44]	; (8002db4 <_ZN9LineTrace4initEv+0x5c>)
 8002d86:	f7fe fc95 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d92:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d96:	eeb0 1a66 	vmov.f32	s2, s13
 8002d9a:	eef0 0a47 	vmov.f32	s1, s14
 8002d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f80c 	bl	8002dc0 <_ZN9LineTrace7setGainEfff>

}
 8002da8:	bf00      	nop
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	08017994 	.word	0x08017994
 8002db4:	0801799c 	.word	0x0801799c
 8002db8:	080179a4 	.word	0x080179a4
 8002dbc:	080179ac 	.word	0x080179ac

08002dc0 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dcc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dd0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
	return kp_;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	ee07 3a90 	vmov	s15, r3
}
 8002e02:	eeb0 0a67 	vmov.f32	s0, s15
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	return ki_;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	ee07 3a90 	vmov	s15, r3
}
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
	return kd_;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	ee07 3a90 	vmov	s15, r3
}
 8002e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d053      	beq.n	8002f42 <_ZN9LineTrace4flipEv+0xba>
		// ---- line following processing -----//
		pidTrace();
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fd50 	bl	8002940 <_ZN9LineTrace8pidTraceEv>
			odometry_->clearPotition();
		}
		*/

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe01 	bl	8002aa8 <_ZN9LineTrace11isCrossLineEv>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <_ZN9LineTrace4flipEv+0x48>
			led_.LR(1, -1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f8cc 	bl	8002054 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 f9a7 	bl	8004214 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fb09 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f9b7 	bl	8004248 <_ZN10SideSensor13getIgnoreFlagEv>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00f      	beq.n	8002f00 <_ZN9LineTrace4flipEv+0x78>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe faed 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002eea:	eeb0 7a40 	vmov.f32	s14, s0
 8002eee:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002f4c <_ZN9LineTrace4flipEv+0xc4>
 8002ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	db01      	blt.n	8002f00 <_ZN9LineTrace4flipEv+0x78>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <_ZN9LineTrace4flipEv+0x7a>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <_ZN9LineTrace4flipEv+0x98>
			side_sensor_->disableIgnore();
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 f98f 	bl	800422e <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f89a 	bl	8002054 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fb95 	bl	8002654 <_ZN10LineSensor13emergencyStopEv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <_ZN9LineTrace4flipEv+0xba>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002f50 <_ZN9LineTrace4flipEv+0xc8>
 8002f38:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002f50 <_ZN9LineTrace4flipEv+0xc8>
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fbd3 	bl	80046e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	43480000 	.word	0x43480000
 8002f50:	00000000 	.word	0x00000000

08002f54 <_ZN9LineTrace9flip100nsEv>:

void LineTrace::flip100ns()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	if(isTargetDistance(10) == true){
 8002f5c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f977 	bl	8003254 <_ZN9LineTrace16isTargetDistanceEf>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00f      	beq.n	8002f8c <_ZN9LineTrace9flip100nsEv+0x38>
		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff feb3 	bl	8002cd8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ---- Store Logs ------//
		storeLogs();
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8e6 	bl	8003144 <_ZN9LineTrace9storeLogsEv>

		// ---reset total cnt ---//
		encoder_->clearTotalCnt();
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fa8b 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fe2a 	bl	8003be0 <_ZN8Odometry13clearPotitionEv>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fbf2 	bl	800479a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 f91a 	bl	80041f4 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fbef 	bl	80047c0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f831 	bl	8002054 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ff8:	3340      	adds	r3, #64	; 0x40
 8002ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69d8      	ldr	r0, [r3, #28]
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <_ZN9LineTrace4stopEv+0x8c>)
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <_ZN9LineTrace4stopEv+0x90>)
 800300a:	4914      	ldr	r1, [pc, #80]	; (800305c <_ZN9LineTrace4stopEv+0x94>)
 800300c:	f000 fac0 	bl	8003590 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003010:	e00e      	b.n	8003030 <_ZN9LineTrace4stopEv+0x68>
	}
	else if(mode_selector_ == SECOND_RUNNING){//Secondary run
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003018:	3340      	adds	r3, #64	; 0x40
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d106      	bne.n	8003030 <_ZN9LineTrace4stopEv+0x68>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69d8      	ldr	r0, [r3, #28]
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <_ZN9LineTrace4stopEv+0x98>)
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <_ZN9LineTrace4stopEv+0x9c>)
 800302a:	490c      	ldr	r1, [pc, #48]	; (800305c <_ZN9LineTrace4stopEv+0x94>)
 800302c:	f000 fab0 	bl	8003590 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	}
	led_.LR(-1, 0);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	330c      	adds	r3, #12
 8003034:	2200      	movs	r2, #0
 8003036:	f04f 31ff 	mov.w	r1, #4294967295
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f80a 	bl	8002054 <_ZN3LED2LREaa>

	logger_->resetLogs();
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fae4 	bl	8003612 <_ZN6Logger9resetLogsEv>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0801795c 	.word	0x0801795c
 8003058:	08017968 	.word	0x08017968
 800305c:	08017978 	.word	0x08017978
 8003060:	080179b4 	.word	0x080179b4
 8003064:	080179c0 	.word	0x080179c0

08003068 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003074:	2300      	movs	r3, #0
 8003076:	737b      	strb	r3, [r7, #13]
	start();
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff8b 	bl	8002f94 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800307e:	7b7b      	ldrb	r3, [r7, #13]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d156      	bne.n	8003132 <_ZN9LineTrace7runningEv+0xca>
		switch(stage){
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <_ZN9LineTrace7runningEv+0x28>
 800308a:	2b0a      	cmp	r3, #10
 800308c:	d02b      	beq.n	80030e6 <_ZN9LineTrace7runningEv+0x7e>
 800308e:	e04f      	b.n	8003130 <_ZN9LineTrace7runningEv+0xc8>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4618      	mov	r0, r3
 8003096:	f001 f8a1 	bl	80041dc <_ZN10SideSensor16getWhiteLineCntREv>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03f      	beq.n	800312a <_ZN9LineTrace7runningEv+0xc2>
				}
				else if(mode_selector_ == SECOND_RUNNING)){ //Secondary run
					startVelocityPlay();
				}
				*/
				loggerStart();
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fcd4 	bl	8002a58 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030b6:	3340      	adds	r3, #64	; 0x40
 80030b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f887 	bl	80031d4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fa09 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	330c      	adds	r3, #12
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe ffba 	bl	8002054 <_ZN3LED2LREaa>
				stage = 10;
 80030e0:	230a      	movs	r3, #10
 80030e2:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80030e4:	e021      	b.n	800312a <_ZN9LineTrace7runningEv+0xc2>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 f876 	bl	80041dc <_ZN10SideSensor16getWhiteLineCntREv>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d016      	beq.n	800312e <_ZN9LineTrace7runningEv+0xc6>
				loggerStop();
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fcbf 	bl	8002a84 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f87c 	bl	8003204 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800310c:	2064      	movs	r0, #100	; 0x64
 800310e:	f004 fc81 	bl	8007a14 <HAL_Delay>

				setTargetVelocity(0);
 8003112:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003140 <_ZN9LineTrace7runningEv+0xd8>
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fea7 	bl	8002e6a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800311c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003120:	f004 fc78 	bl	8007a14 <HAL_Delay>

				goal_flag = true;
 8003124:	2301      	movs	r3, #1
 8003126:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003128:	e001      	b.n	800312e <_ZN9LineTrace7runningEv+0xc6>
			break;
 800312a:	bf00      	nop
 800312c:	e7a7      	b.n	800307e <_ZN9LineTrace7runningEv+0x16>
			break;
 800312e:	bf00      	nop
	while(goal_flag == false){
 8003130:	e7a5      	b.n	800307e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ff48 	bl	8002fc8 <_ZN9LineTrace4stopEv>
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	00000000 	.word	0x00000000

08003144 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	ed2d 8b02 	vpush	{d8}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00f      	beq.n	800317a <_ZN9LineTrace9storeLogsEv+0x36>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f95b 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8003164:	eeb0 7a40 	vmov.f32	s14, s0
 8003168:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	db01      	blt.n	800317a <_ZN9LineTrace9storeLogsEv+0x36>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <_ZN9LineTrace9storeLogsEv+0x38>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d021      	beq.n	80031c4 <_ZN9LineTrace9storeLogsEv+0x80>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69dc      	ldr	r4, [r3, #28]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe f946 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 800318e:	eeb0 8a40 	vmov.f32	s16, s0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd11 	bl	8003bbe <_ZN8Odometry8getThetaEv>
 800319c:	ec53 2b10 	vmov	r2, r3, d0
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7fd fd38 	bl	8000c18 <__aeabi_d2f>
 80031a8:	4603      	mov	r3, r0
 80031aa:	ee00 3a90 	vmov	s1, r3
 80031ae:	eeb0 0a48 	vmov.f32	s0, s16
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 f95f 	bl	8003476 <_ZN6Logger21storeDistanceAndThetaEff>

		mon_store_cnt++;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <_ZN9LineTrace9storeLogsEv+0x8c>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <_ZN9LineTrace9storeLogsEv+0x8c>)
 80031c2:	801a      	strh	r2, [r3, #0]
	}
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	ecbd 8b02 	vpop	{d8}
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	20000264 	.word	0x20000264

080031d4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe f959 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fcf8 	bl	8003be0 <_ZN8Odometry13clearPotitionEv>
	velocity_play_flag_ = true;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003212:	333c      	adds	r3, #60	; 0x3c
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800321e:	333e      	adds	r3, #62	; 0x3e
 8003220:	2200      	movs	r2, #0
 8003222:	801a      	strh	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003242:	3340      	adds	r3, #64	; 0x40
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	801a      	strh	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getTotalDistance() >= target_distance){
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe f8d6 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 800326e:	eeb0 7a40 	vmov.f32	s14, s0
 8003272:	edd7 7a00 	vldr	s15, [r7]
 8003276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032b4:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032c2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032d0:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80032d4:	2200      	movs	r2, #0
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80032f4:	f7fe fa6a 	bl	80017cc <sd_mount>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	bf0c      	ite	eq
 80032fe:	2301      	moveq	r3, #1
 8003300:	2300      	movne	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d016      	beq.n	8003336 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8003308:	f7fd feca 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800330c:	2100      	movs	r1, #0
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd fed6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003314:	4815      	ldr	r0, [pc, #84]	; (800336c <_ZN6Logger10sdCardInitEv+0x84>)
 8003316:	f7fd fefd 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800331a:	2101      	movs	r1, #1
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fecf 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003322:	4813      	ldr	r0, [pc, #76]	; (8003370 <_ZN6Logger10sdCardInitEv+0x88>)
 8003324:	f7fd fef6 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800332c:	f004 fb72 	bl	8007a14 <HAL_Delay>

	  ret = true;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e015      	b.n	8003362 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003336:	f7fd feb3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800333a:	2100      	movs	r1, #0
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd febf 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003342:	480a      	ldr	r0, [pc, #40]	; (800336c <_ZN6Logger10sdCardInitEv+0x84>)
 8003344:	f7fd fee6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003348:	2101      	movs	r1, #1
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd feb8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003350:	4808      	ldr	r0, [pc, #32]	; (8003374 <_ZN6Logger10sdCardInitEv+0x8c>)
 8003352:	f7fd fedf 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800335a:	f004 fb5b 	bl	8007a14 <HAL_Delay>

	  ret = false;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	080179d0 	.word	0x080179d0
 8003370:	080179dc 	.word	0x080179dc
 8003374:	080179e4 	.word	0x080179e4

08003378 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800338a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d029      	beq.n	80033e8 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800339a:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033b0:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c0:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033c4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033cc:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d906      	bls.n	80033e8 <_ZN6Logger8storeLogEf+0x70>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033e0:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]
	}
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003406:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02c      	beq.n	800346a <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003416:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003422:	3308      	adds	r3, #8
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003432:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003442:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003446:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800344e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	f241 3287 	movw	r2, #4999	; 0x1387
 8003458:	4293      	cmp	r3, r2
 800345a:	d906      	bls.n	800346a <_ZN6Logger9storeLog2Ef+0x76>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003462:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003466:	2200      	movs	r2, #0
 8003468:	801a      	strh	r2, [r3, #0]
	}
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003482:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800348c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003498:	3310      	adds	r3, #16
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034a8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034c2:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034d2:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034d6:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034de:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d906      	bls.n	80034fa <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034f2:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034f6:	2200      	movs	r2, #0
 80034f8:	801a      	strh	r2, [r3, #0]
	//}
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_ZN6Logger23getDistanceArrayPointerEv>:

const float *Logger::getDistanceArrayPointer()
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003514:	3340      	adds	r3, #64	; 0x40
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	68b8      	ldr	r0, [r7, #8]
 8003558:	f7fe f846 	bl	80015e8 <sd_write_array_float>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003576:	3320      	adds	r3, #32
 8003578:	2200      	movs	r2, #0
 800357a:	9200      	str	r2, [sp, #0]
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f7fe f830 	bl	80015e8 <sd_write_array_float>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80035a4:	3340      	adds	r3, #64	; 0x40
 80035a6:	2200      	movs	r2, #0
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	f241 7270 	movw	r2, #6000	; 0x1770
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68b8      	ldr	r0, [r7, #8]
 80035b2:	f7fe f819 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	f241 7270 	movw	r2, #6000	; 0x1770
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f7fe f80d 	bl	80015e8 <sd_write_array_float>
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80035ea:	3340      	adds	r3, #64	; 0x40
 80035ec:	f241 7270 	movw	r2, #6000	; 0x1770
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f7fe f85e 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80035fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f7fe f855 	bl	80016b4 <sd_read_array_float>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 8003612:	b480      	push	{r7}
 8003614:	b093      	sub	sp, #76	; 0x4c
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003628:	3320      	adds	r3, #32
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
 800362c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	429a      	cmp	r2, r3
 8003632:	d009      	beq.n	8003648 <_ZN6Logger9resetLogsEv+0x36>
 8003634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	3304      	adds	r3, #4
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	e7f1      	b.n	800362c <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800364e:	3320      	adds	r3, #32
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	643b      	str	r3, [r7, #64]	; 0x40
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800365c:	3320      	adds	r3, #32
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	429a      	cmp	r2, r3
 8003666:	d009      	beq.n	800367c <_ZN6Logger9resetLogsEv+0x6a>
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	623b      	str	r3, [r7, #32]
		log = 0;
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	3304      	adds	r3, #4
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
 800367a:	e7f1      	b.n	8003660 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003682:	3340      	adds	r3, #64	; 0x40
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003690:	3340      	adds	r3, #64	; 0x40
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	d009      	beq.n	80036b0 <_ZN6Logger9resetLogsEv+0x9e>
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	617b      	str	r3, [r7, #20]
		log = 0;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	3304      	adds	r3, #4
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	e7f1      	b.n	8003694 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80036c2:	3340      	adds	r3, #64	; 0x40
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d009      	beq.n	80036e2 <_ZN6Logger9resetLogsEv+0xd0>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	60bb      	str	r3, [r7, #8]
		log = 0;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	3304      	adds	r3, #4
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e0:	e7f1      	b.n	80036c6 <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80036e8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80036ec:	2200      	movs	r2, #0
 80036ee:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80036f6:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80036fa:	2200      	movs	r2, #0
 80036fc:	801a      	strh	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	374c      	adds	r7, #76	; 0x4c
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_ZN6Logger5startEv>:

void Logger::start()
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003718:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800373a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	801a      	strh	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	805a      	strh	r2, [r3, #2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003778:	2108      	movs	r1, #8
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <_ZN5Motor4initEv+0x20>)
 800377c:	f009 fafa 	bl	800cd74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003780:	210c      	movs	r1, #12
 8003782:	4803      	ldr	r0, [pc, #12]	; (8003790 <_ZN5Motor4initEv+0x20>)
 8003784:	f009 faf6 	bl	800cd74 <HAL_TIM_PWM_Start>

}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20035a3c 	.word	0x20035a3c

08003794 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da0d      	bge.n	80037c2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80037a6:	2200      	movs	r2, #0
 80037a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ac:	481f      	ldr	r0, [pc, #124]	; (800382c <_ZN5Motor9motorCtrlEv+0x98>)
 80037ae:	f005 fbc7 	bl	8008f40 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	425b      	negs	r3, r3
 80037bc:	b29b      	uxth	r3, r3
 80037be:	81fb      	strh	r3, [r7, #14]
 80037c0:	e00a      	b.n	80037d8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80037c2:	2201      	movs	r2, #1
 80037c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c8:	4818      	ldr	r0, [pc, #96]	; (800382c <_ZN5Motor9motorCtrlEv+0x98>)
 80037ca:	f005 fbb9 	bl	8008f40 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da0d      	bge.n	80037fe <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037e8:	4810      	ldr	r0, [pc, #64]	; (800382c <_ZN5Motor9motorCtrlEv+0x98>)
 80037ea:	f005 fba9 	bl	8008f40 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	425b      	negs	r3, r3
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	81bb      	strh	r3, [r7, #12]
 80037fc:	e00a      	b.n	8003814 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80037fe:	2200      	movs	r2, #0
 8003800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <_ZN5Motor9motorCtrlEv+0x98>)
 8003806:	f005 fb9b 	bl	8008f40 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003810:	b29b      	uxth	r3, r3
 8003812:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003814:	89fa      	ldrh	r2, [r7, #14]
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 800381c:	89ba      	ldrh	r2, [r7, #12]
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020c00 	.word	0x40020c00
 8003830:	20035a3c 	.word	0x20035a3c

08003834 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6178      	str	r0, [r7, #20]
 800383c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003840:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b30      	ldr	r3, [pc, #192]	; (800390c <_ZN5Motor8setRatioEdd+0xd8>)
 800384a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384e:	f7fd f97b 	bl	8000b48 <__aeabi_dcmpgt>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <_ZN5Motor8setRatioEdd+0x30>
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	4c2b      	ldr	r4, [pc, #172]	; (800390c <_ZN5Motor8setRatioEdd+0xd8>)
 800385e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003862:	e00e      	b.n	8003882 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <_ZN5Motor8setRatioEdd+0xdc>)
 800386a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800386e:	f7fd f94d 	bl	8000b0c <__aeabi_dcmplt>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <_ZN5Motor8setRatioEdd+0x4e>
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	4c24      	ldr	r4, [pc, #144]	; (8003910 <_ZN5Motor8setRatioEdd+0xdc>)
 800387e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <_ZN5Motor8setRatioEdd+0xd8>)
 8003888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800388c:	f7fd f95c 	bl	8000b48 <__aeabi_dcmpgt>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <_ZN5Motor8setRatioEdd+0x6e>
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	4c1c      	ldr	r4, [pc, #112]	; (800390c <_ZN5Motor8setRatioEdd+0xd8>)
 800389c:	e9c7 3400 	strd	r3, r4, [r7]
 80038a0:	e00e      	b.n	80038c0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <_ZN5Motor8setRatioEdd+0xdc>)
 80038a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038ac:	f7fd f92e 	bl	8000b0c <__aeabi_dcmplt>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <_ZN5Motor8setRatioEdd+0x8c>
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	4c15      	ldr	r4, [pc, #84]	; (8003910 <_ZN5Motor8setRatioEdd+0xdc>)
 80038bc:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_ZN5Motor8setRatioEdd+0xe0>)
 80038c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ca:	f7fc fead 	bl	8000628 <__aeabi_dmul>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	4618      	mov	r0, r3
 80038d4:	4621      	mov	r1, r4
 80038d6:	f7fd f957 	bl	8000b88 <__aeabi_d2iz>
 80038da:	4603      	mov	r3, r0
 80038dc:	b21a      	sxth	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <_ZN5Motor8setRatioEdd+0xe0>)
 80038e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038ec:	f7fc fe9c 	bl	8000628 <__aeabi_dmul>
 80038f0:	4603      	mov	r3, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4618      	mov	r0, r3
 80038f6:	4621      	mov	r1, r4
 80038f8:	f7fd f946 	bl	8000b88 <__aeabi_d2iz>
 80038fc:	4603      	mov	r3, r0
 80038fe:	b21a      	sxth	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	805a      	strh	r2, [r3, #2]

}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}
 800390c:	3ff00000 	.word	0x3ff00000
 8003910:	bff00000 	.word	0xbff00000
 8003914:	409c2000 	.word	0x409c2000

08003918 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8003918:	b490      	push	{r4, r7}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	609a      	str	r2, [r3, #8]
}
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bc90      	pop	{r4, r7}
 8003988:	4770      	bx	lr
 800398a:	0000      	movs	r0, r0
 800398c:	0000      	movs	r0, r0
	...

08003990 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe f8da 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 80039a4:	ee10 3a10 	vmov	r3, s0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fde5 	bl	8000578 <__aeabi_f2d>
 80039ae:	4603      	mov	r3, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fd1e 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 80039c0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80039c4:	a376      	add	r3, pc, #472	; (adr r3, 8003ba0 <_ZN8Odometry12calcPotitionEv+0x210>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039ce:	f7fc fe2b 	bl	8000628 <__aeabi_dmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7fc fdc8 	bl	8000578 <__aeabi_f2d>
 80039e8:	4682      	mov	sl, r0
 80039ea:	468b      	mov	fp, r1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a00:	f7fc ff3c 	bl	800087c <__aeabi_ddiv>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4640      	mov	r0, r8
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	f7fc fc56 	bl	80002bc <__adddf3>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	ec43 2b17 	vmov	d7, r2, r3
 8003a18:	eeb0 0a47 	vmov.f32	s0, s14
 8003a1c:	eef0 0a67 	vmov.f32	s1, s15
 8003a20:	f00e fcee 	bl	8012400 <cos>
 8003a24:	ec53 2b10 	vmov	r2, r3, d0
 8003a28:	4650      	mov	r0, sl
 8003a2a:	4659      	mov	r1, fp
 8003a2c:	f7fc fdfc 	bl	8000628 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fc fc40 	bl	80002bc <__adddf3>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7fc fd93 	bl	8000578 <__aeabi_f2d>
 8003a52:	4682      	mov	sl, r0
 8003a54:	468b      	mov	fp, r1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6a:	f7fc ff07 	bl	800087c <__aeabi_ddiv>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	f7fc fc21 	bl	80002bc <__adddf3>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	ec43 2b17 	vmov	d7, r2, r3
 8003a82:	eeb0 0a47 	vmov.f32	s0, s14
 8003a86:	eef0 0a67 	vmov.f32	s1, s15
 8003a8a:	f00e fcfd 	bl	8012488 <sin>
 8003a8e:	ec53 2b10 	vmov	r2, r3, d0
 8003a92:	4650      	mov	r0, sl
 8003a94:	4659      	mov	r1, fp
 8003a96:	f7fc fdc7 	bl	8000628 <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fc0b 	bl	80002bc <__adddf3>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8003abc:	461a      	mov	r2, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	f7fc fbfc 	bl	80002bc <__adddf3>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	ed93 7b08 	vldr	d7, [r3, #32]
 8003ada:	eeb0 0a47 	vmov.f32	s0, s14
 8003ade:	eef0 0a67 	vmov.f32	s1, s15
 8003ae2:	f00e fc8d 	bl	8012400 <cos>
 8003ae6:	ec51 0b10 	vmov	r0, r1, d0
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003af0:	f7fc fd9a 	bl	8000628 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fbde 	bl	80002bc <__adddf3>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	ed93 7b08 	vldr	d7, [r3, #32]
 8003b16:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1a:	eef0 0a67 	vmov.f32	s1, s15
 8003b1e:	f00e fcb3 	bl	8012488 <sin>
 8003b22:	ec51 0b10 	vmov	r0, r1, d0
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003b2c:	f7fc fd7c 	bl	8000628 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fbc0 	bl	80002bc <__adddf3>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	4621      	mov	r1, r4
 8003b50:	f7fd f862 	bl	8000c18 <__aeabi_d2f>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <_ZN8Odometry12calcPotitionEv+0x204>)
 8003b58:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003b60:	4618      	mov	r0, r3
 8003b62:	4621      	mov	r1, r4
 8003b64:	f7fd f858 	bl	8000c18 <__aeabi_d2f>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <_ZN8Odometry12calcPotitionEv+0x208>)
 8003b6c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003b74:	4618      	mov	r0, r3
 8003b76:	4621      	mov	r1, r4
 8003b78:	f7fd f84e 	bl	8000c18 <__aeabi_d2f>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8c:	f3af 8000 	nop.w
 8003b90:	405b8000 	.word	0x405b8000
 8003b94:	20000280 	.word	0x20000280
 8003b98:	20000284 	.word	0x20000284
 8003b9c:	20000288 	.word	0x20000288
 8003ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ba4:	3f50624d 	.word	0x3f50624d

08003ba8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff feed 	bl	8003990 <_ZN8Odometry12calcPotitionEv>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8003bbe:	b490      	push	{r4, r7}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
	return theta_;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003bcc:	ec44 3b17 	vmov	d7, r3, r4
}
 8003bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd4:	eef0 0a67 	vmov.f32	s1, s15
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc90      	pop	{r4, r7}
 8003bde:	4770      	bx	lr

08003be0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003be0:	b490      	push	{r4, r7}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f04f 0400 	mov.w	r4, #0
 8003bf2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f04f 0400 	mov.w	r4, #0
 8003c00:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	f04f 0400 	mov.w	r4, #0
 8003c0e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc90      	pop	{r4, r7}
 8003c1a:	4770      	bx	lr

08003c1c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003c1c:	b490      	push	{r4, r7}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c5a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003c5e:	2200      	movs	r2, #0
 8003c60:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <_ZN13PathFollowingC1Ev+0xec>)
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <_ZN13PathFollowingC1Ev+0xec>)
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003c7e:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <_ZN13PathFollowingC1Ev+0xec>)
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	f04f 0400 	mov.w	r4, #0
 8003c88:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f04f 0400 	mov.w	r4, #0
 8003ca4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	f04f 0400 	mov.w	r4, #0
 8003cb2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003cb6:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	f04f 0400 	mov.w	r4, #0
 8003cc0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	f04f 0400 	mov.w	r4, #0
 8003cce:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <_ZN13PathFollowingC1Ev+0xf0>)
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <_ZN13PathFollowingC1Ev+0xf4>)
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	f04f 0400 	mov.w	r4, #0
 8003cea:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <_ZN13PathFollowingC1Ev+0xf4>)
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc90      	pop	{r4, r7}
 8003d06:	4770      	bx	lr
 8003d08:	20035f40 	.word	0x20035f40
 8003d0c:	20035ed0 	.word	0x20035ed0
 8003d10:	20035f30 	.word	0x20035f30

08003d14 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003d1c:	f001 fce6 	bl	80056ec <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003d20:	f107 0318 	add.w	r3, r7, #24
 8003d24:	2201      	movs	r2, #1
 8003d26:	4915      	ldr	r1, [pc, #84]	; (8003d7c <_ZN13PathFollowing4initEv+0x68>)
 8003d28:	4815      	ldr	r0, [pc, #84]	; (8003d80 <_ZN13PathFollowing4initEv+0x6c>)
 8003d2a:	f7fd fd09 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003d2e:	f107 0310 	add.w	r3, r7, #16
 8003d32:	2201      	movs	r2, #1
 8003d34:	4913      	ldr	r1, [pc, #76]	; (8003d84 <_ZN13PathFollowing4initEv+0x70>)
 8003d36:	4812      	ldr	r0, [pc, #72]	; (8003d80 <_ZN13PathFollowing4initEv+0x6c>)
 8003d38:	f7fd fd02 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	2201      	movs	r2, #1
 8003d42:	4911      	ldr	r1, [pc, #68]	; (8003d88 <_ZN13PathFollowing4initEv+0x74>)
 8003d44:	480e      	ldr	r0, [pc, #56]	; (8003d80 <_ZN13PathFollowing4initEv+0x6c>)
 8003d46:	f7fd fcfb 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003d4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d4e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003d52:	ed97 5b02 	vldr	d5, [r7, #8]
 8003d56:	eeb0 2a45 	vmov.f32	s4, s10
 8003d5a:	eef0 2a65 	vmov.f32	s5, s11
 8003d5e:	eeb0 1a46 	vmov.f32	s2, s12
 8003d62:	eef0 1a66 	vmov.f32	s3, s13
 8003d66:	eeb0 0a47 	vmov.f32	s0, s14
 8003d6a:	eef0 0a67 	vmov.f32	s1, s15
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f80c 	bl	8003d8c <_ZN13PathFollowing7setGainEddd>
}
 8003d74:	bf00      	nop
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	080179ec 	.word	0x080179ec
 8003d80:	080179f4 	.word	0x080179f4
 8003d84:	080179fc 	.word	0x080179fc
 8003d88:	08017a04 	.word	0x08017a04

08003d8c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003d8c:	b490      	push	{r4, r7}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	61f8      	str	r0, [r7, #28]
 8003d94:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d98:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d9c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003da0:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003da2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003da6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003dac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003db0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003db6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003dba:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc90      	pop	{r4, r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	20035f40 	.word	0x20035f40

08003dcc <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003dcc:	b490      	push	{r4, r7}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dda:	ec44 3b17 	vmov	d7, r3, r4
}
 8003dde:	eeb0 0a47 	vmov.f32	s0, s14
 8003de2:	eef0 0a67 	vmov.f32	s1, s15
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc90      	pop	{r4, r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20035f40 	.word	0x20035f40

08003df4 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003df4:	b490      	push	{r4, r7}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003dfe:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003e02:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e06:	eeb0 0a47 	vmov.f32	s0, s14
 8003e0a:	eef0 0a67 	vmov.f32	s1, s15
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc90      	pop	{r4, r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20035f40 	.word	0x20035f40

08003e1c <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003e1c:	b490      	push	{r4, r7}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003e26:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003e2a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	eef0 0a67 	vmov.f32	s1, s15
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc90      	pop	{r4, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20035f40 	.word	0x20035f40

08003e44 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003e4c:	2088      	movs	r0, #136	; 0x88
 8003e4e:	f7fd ffc6 	bl	8001dde <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003e52:	2080      	movs	r0, #128	; 0x80
 8003e54:	f7fd ffc3 	bl	8001dde <INA260_init>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003e68:	2188      	movs	r1, #136	; 0x88
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7fd ff54 	bl	8001d18 <INA260_read>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fc fb6e 	bl	8000554 <__aeabi_i2d>
 8003e78:	a30c      	add	r3, pc, #48	; (adr r3, 8003eac <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f7fc fbd3 	bl	8000628 <__aeabi_dmul>
 8003e82:	4603      	mov	r3, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	4618      	mov	r0, r3
 8003e88:	4621      	mov	r1, r4
 8003e8a:	f7fc fec5 	bl	8000c18 <__aeabi_d2f>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	2000028c 	.word	0x2000028c
 8003eac:	47ae147b 	.word	0x47ae147b
 8003eb0:	3f547ae1 	.word	0x3f547ae1

08003eb4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	ee07 3a90 	vmov	s15, r3

}
 8003ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	0000      	movs	r0, r0
 8003ed4:	0000      	movs	r0, r0
	...

08003ed8 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc fb45 	bl	8000578 <__aeabi_f2d>
 8003eee:	a311      	add	r3, pc, #68	; (adr r3, 8003f34 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fe0a 	bl	8000b0c <__aeabi_dcmplt>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e002      	b.n	8003f12 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000290 	.word	0x20000290
 8003f34:	9999999a 	.word	0x9999999a
 8003f38:	401d9999 	.word	0x401d9999

08003f3c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4822      	ldr	r0, [pc, #136]	; (8003fd4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f4c:	f004 ffe0 	bl	8008f10 <HAL_GPIO_ReadPin>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003f68:	2108      	movs	r1, #8
 8003f6a:	481a      	ldr	r0, [pc, #104]	; (8003fd4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f6c:	f004 ffd0 	bl	8008f10 <HAL_GPIO_ReadPin>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003f80:	89fb      	ldrh	r3, [r7, #14]
 8003f82:	f043 0302 	orr.w	r3, r3, #2
 8003f86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003f88:	2110      	movs	r1, #16
 8003f8a:	4812      	ldr	r0, [pc, #72]	; (8003fd4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f8c:	f004 ffc0 	bl	8008f10 <HAL_GPIO_ReadPin>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003fac:	f004 ffb0 	bl	8008f10 <HAL_GPIO_ReadPin>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2301      	moveq	r3, #1
 8003fb8:	2300      	movne	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	f043 0308 	orr.w	r3, r3, #8
 8003fc6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003fc8:	89fb      	ldrh	r3, [r7, #14]

}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40020c00 	.word	0x40020c00

08003fd8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	805a      	strh	r2, [r3, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	809a      	strh	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	719a      	strb	r2, [r3, #6]
{

}
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	799b      	ldrb	r3, [r3, #6]
 8004014:	f083 0301 	eor.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80c7 	beq.w	80041ae <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004020:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d027      	beq.n	800407e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800402e:	2104      	movs	r1, #4
 8004030:	4862      	ldr	r0, [pc, #392]	; (80041bc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004032:	f004 ff6d 	bl	8008f10 <HAL_GPIO_ReadPin>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004046:	4b5e      	ldr	r3, [pc, #376]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	e002      	b.n	800405a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004056:	2200      	movs	r2, #0
 8004058:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800405a:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d93f      	bls.n	80040e2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004070:	4b51      	ldr	r3, [pc, #324]	; (80041b8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004076:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004078:	2200      	movs	r2, #0
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	e031      	b.n	80040e2 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02d      	beq.n	80040e2 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004086:	2104      	movs	r1, #4
 8004088:	484c      	ldr	r0, [pc, #304]	; (80041bc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800408a:	f004 ff41 	bl	8008f10 <HAL_GPIO_ReadPin>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d913      	bls.n	80040e2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	f083 0301 	eor.w	r3, r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80040c8:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	889b      	ldrh	r3, [r3, #4]
 80040d2:	3301      	adds	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	889a      	ldrh	r2, [r3, #4]
 80040de:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80040e0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f083 0301 	eor.w	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d027      	beq.n	8004140 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80040f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040f4:	4835      	ldr	r0, [pc, #212]	; (80041cc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80040f6:	f004 ff0b 	bl	8008f10 <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	e002      	b.n	800411e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d90c      	bls.n	8004140 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02e      	beq.n	80041a6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800414c:	481f      	ldr	r0, [pc, #124]	; (80041cc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800414e:	f004 fedf 	bl	8008f10 <HAL_GPIO_ReadPin>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e002      	b.n	8004176 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004172:	2200      	movs	r2, #0
 8004174:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d913      	bls.n	80041a6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	f083 0302 	eor.w	r3, r3, #2
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	885b      	ldrh	r3, [r3, #2]
 8004196:	3301      	adds	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	885a      	ldrh	r2, [r3, #2]
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80041a4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	881a      	ldrh	r2, [r3, #0]
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80041ac:	801a      	strh	r2, [r3, #0]
	}

}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000298 	.word	0x20000298
 80041bc:	40021000 	.word	0x40021000
 80041c0:	2000029c 	.word	0x2000029c
 80041c4:	20000296 	.word	0x20000296
 80041c8:	20000299 	.word	0x20000299
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	2000029a 	.word	0x2000029a
 80041d4:	20000294 	.word	0x20000294
 80041d8:	20000292 	.word	0x20000292

080041dc <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	889b      	ldrh	r3, [r3, #4]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	809a      	strh	r2, [r3, #4]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	719a      	strb	r2, [r3, #6]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	719a      	strb	r2, [r3, #6]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	799b      	ldrb	r3, [r3, #6]
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004270:	3308      	adds	r3, #8
 8004272:	4611      	mov	r1, r2
 8004274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004278:	4618      	mov	r0, r3
 800427a:	f00f f941 	bl	8013500 <memcpy>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	08017a28 	.word	0x08017a28

080042b4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	ed97 0a00 	vldr	s0, [r7]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff f850 	bl	8003378 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80042e2:	eeb0 0a67 	vmov.f32	s0, s15
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7ff f884 	bl	80033f4 <_ZN6Logger9storeLog2Ef>
	}

}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f919 	bl	800353c <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a06      	ldr	r2, [pc, #24]	; (8004328 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004310:	4904      	ldr	r1, [pc, #16]	; (8004324 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f926 	bl	8003564 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	08017c1c 	.word	0x08017c1c
 8004324:	08017c28 	.word	0x08017c28
 8004328:	08017c34 	.word	0x08017c34

0800432c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800433a:	2b00      	cmp	r3, #0
 800433c:	d046      	beq.n	80043cc <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3204      	adds	r2, #4
 8004350:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800436c:	3301      	adds	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800437c:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800437e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004386:	2bf9      	cmp	r3, #249	; 0xf9
 8004388:	d903      	bls.n	8004392 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	22fa      	movs	r2, #250	; 0xfa
 800438e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685c      	ldr	r4, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc f8eb 	bl	8000578 <__aeabi_f2d>
 80043a2:	4605      	mov	r5, r0
 80043a4:	460e      	mov	r6, r1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80043ac:	eef1 7a67 	vneg.f32	s15, s15
 80043b0:	ee17 3a90 	vmov	r3, s15
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc f8df 	bl	8000578 <__aeabi_f2d>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	ec43 2b11 	vmov	d1, r2, r3
 80043c2:	ec46 5b10 	vmov	d0, r5, r6
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff fa34 	bl	8003834 <_ZN5Motor8setRatioEdd>

	}

}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d4:	200002a0 	.word	0x200002a0

080043d8 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f980 	bl	800370a <_ZN6Logger5startEv>
	processing_flag_ = true;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	0000      	movs	r0, r0
 800441c:	0000      	movs	r0, r0
	...

08004420 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f97d 	bl	800372c <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004460 <_ZN20SystemIdentification4stopEv+0x40>
 800444a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004460 <_ZN20SystemIdentification4stopEv+0x40>
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f9f0 	bl	8003834 <_ZN5Motor8setRatioEdd>
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	f3af 8000 	nop.w
	...

08004468 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	615a      	str	r2, [r3, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	621a      	str	r2, [r3, #32]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

}
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	f107 020c 	add.w	r2, r7, #12
 8004510:	f107 0110 	add.w	r1, r7, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc ff5d 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800451a:	ed97 7a04 	vldr	s14, [r7, #16]
 800451e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004526:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800452a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800452e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7fc f820 	bl	8000578 <__aeabi_f2d>
 8004538:	a30b      	add	r3, pc, #44	; (adr r3, 8004568 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fc f873 	bl	8000628 <__aeabi_dmul>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	f7fc fb65 	bl	8000c18 <__aeabi_d2f>
 800454e:	4602      	mov	r2, r0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	ee07 3a90 	vmov	s15, r3
}
 800455c:	eeb0 0a67 	vmov.f32	s0, s15
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
 8004566:	bf00      	nop
 8004568:	1ab1d998 	.word	0x1ab1d998
 800456c:	3f7830b5 	.word	0x3f7830b5

08004570 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	ed93 7a00 	vldr	s14, [r3]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	edd3 7a02 	vldr	s15, [r3, #8]
 8004584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004588:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8004596:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80045ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80045b8:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ffdb 	bl	8000578 <__aeabi_f2d>
 80045c2:	4604      	mov	r4, r0
 80045c4:	460d      	mov	r5, r1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80045cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d4:	ee17 0a90 	vmov	r0, s15
 80045d8:	f7fb ffce 	bl	8000578 <__aeabi_f2d>
 80045dc:	a334      	add	r3, pc, #208	; (adr r3, 80046b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fc f821 	bl	8000628 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7fb fe65 	bl	80002bc <__adddf3>
 80045f2:	4603      	mov	r3, r0
 80045f4:	460c      	mov	r4, r1
 80045f6:	4618      	mov	r0, r3
 80045f8:	4621      	mov	r1, r4
 80045fa:	f7fc fb0d 	bl	8000c18 <__aeabi_d2f>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004602:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	ed93 7a05 	vldr	s14, [r3, #20]
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	edd7 6a05 	vldr	s13, [r7, #20]
 8004614:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461c:	ee17 0a90 	vmov	r0, s15
 8004620:	f7fb ffaa 	bl	8000578 <__aeabi_f2d>
 8004624:	a322      	add	r3, pc, #136	; (adr r3, 80046b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fc f927 	bl	800087c <__aeabi_ddiv>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	4618      	mov	r0, r3
 8004634:	4621      	mov	r1, r4
 8004636:	f7fc faef 	bl	8000c18 <__aeabi_d2f>
 800463a:	4603      	mov	r3, r0
 800463c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800463e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004642:	edd7 7a03 	vldr	s15, [r7, #12]
 8004646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004654:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004662:	edd7 7a02 	vldr	s15, [r7, #8]
 8004666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466a:	ee17 0a90 	vmov	r0, s15
 800466e:	f7fb ff83 	bl	8000578 <__aeabi_f2d>
 8004672:	4605      	mov	r5, r0
 8004674:	460e      	mov	r6, r1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800467c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004684:	ee17 0a90 	vmov	r0, s15
 8004688:	f7fb ff76 	bl	8000578 <__aeabi_f2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	ec43 2b11 	vmov	d1, r2, r3
 8004694:	ec46 5b10 	vmov	d0, r5, r6
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff f8cb 	bl	8003834 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ac:	f3af 8000 	nop.w
 80046b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80046b4:	3f50624d 	.word	0x3f50624d
 80046b8:	200002a8 	.word	0x200002a8
 80046bc:	200002a4 	.word	0x200002a4

080046c0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046cc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80046f4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	ed87 0a02 	vstr	s0, [r7, #8]
 800471c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004720:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	615a      	str	r2, [r3, #20]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	ed87 0a02 	vstr	s0, [r7, #8]
 800474e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004752:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff febf 	bl	8004500 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff feef 	bl	8004570 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80047f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80047d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80047f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff f829 	bl	8003834 <_ZN5Motor8setRatioEdd>

}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w
	...

080047f8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 800480a:	f001 fe21 	bl	8006450 <cppFlip1ms>

		tim6_timer++;
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004816:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d902      	bls.n	8004828 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10e      	bne.n	8004850 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8004832:	f001 fe57 	bl	80064e4 <cppFlip100ns>

		tim7_timer++;
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800483e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a10      	ldr	r2, [pc, #64]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d902      	bls.n	8004850 <HAL_TIM_PeriodElapsedCallback+0x58>
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800485a:	f001 fe51 	bl	8006500 <cppFlip10ms>

		tim13_timer++;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004866:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d902      	bls.n	8004878 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
	}

}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40001000 	.word	0x40001000
 8004884:	20035bac 	.word	0x20035bac
 8004888:	0001869f 	.word	0x0001869f
 800488c:	40001400 	.word	0x40001400
 8004890:	20035bf0 	.word	0x20035bf0
 8004894:	40001c00 	.word	0x40001c00
 8004898:	20035bf4 	.word	0x20035bf4

0800489c <init>:

void init()
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80048a0:	2201      	movs	r2, #1
 80048a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048a6:	4808      	ldr	r0, [pc, #32]	; (80048c8 <init+0x2c>)
 80048a8:	f004 fb4a 	bl	8008f40 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80048ac:	4807      	ldr	r0, [pc, #28]	; (80048cc <init+0x30>)
 80048ae:	f008 fa12 	bl	800ccd6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80048b2:	4807      	ldr	r0, [pc, #28]	; (80048d0 <init+0x34>)
 80048b4:	f008 fa0f 	bl	800ccd6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80048b8:	4806      	ldr	r0, [pc, #24]	; (80048d4 <init+0x38>)
 80048ba:	f008 fa0c 	bl	800ccd6 <HAL_TIM_Base_Start_IT>

	cppInit();
 80048be:	f001 fd1d 	bl	80062fc <cppInit>

	//path_following_initialize();

}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	20035cd8 	.word	0x20035cd8
 80048d0:	20035e7c 	.word	0x20035e7c
 80048d4:	20035bf8 	.word	0x20035bf8

080048d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048dc:	f003 f828 	bl	8007930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048e0:	f000 f82a 	bl	8004938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048e4:	f000 fdbc 	bl	8005460 <MX_GPIO_Init>
  MX_DMA_Init();
 80048e8:	f000 fd8a 	bl	8005400 <MX_DMA_Init>
  MX_I2C2_Init();
 80048ec:	f000 f9e8 	bl	8004cc0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80048f0:	f000 fa14 	bl	8004d1c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80048f4:	f000 fa32 	bl	8004d5c <MX_SPI2_Init>
  MX_TIM1_Init();
 80048f8:	f000 fa66 	bl	8004dc8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80048fc:	f000 fb70 	bl	8004fe0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004900:	f000 fc3c 	bl	800517c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004904:	f000 fd52 	bl	80053ac <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004908:	f00a f9b8 	bl	800ec7c <MX_FATFS_Init>
  MX_TIM6_Init();
 800490c:	f000 fbcc 	bl	80050a8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004910:	f000 f9a8 	bl	8004c64 <MX_I2C1_Init>
  MX_TIM3_Init();
 8004914:	f000 fb00 	bl	8004f18 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004918:	f000 fc88 	bl	800522c <MX_TIM10_Init>
  MX_TIM11_Init();
 800491c:	f000 fcd4 	bl	80052c8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004920:	f000 f898 	bl	8004a54 <MX_ADC2_Init>
  MX_TIM7_Init();
 8004924:	f000 fbf6 	bl	8005114 <MX_TIM7_Init>
  MX_TIM13_Init();
 8004928:	f000 fd1c 	bl	8005364 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800492c:	f7ff ffb6 	bl	800489c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004930:	f001 fe06 	bl	8006540 <cppLoop>
 8004934:	e7fc      	b.n	8004930 <main+0x58>
	...

08004938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0a4      	sub	sp, #144	; 0x90
 800493c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800493e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004942:	2234      	movs	r2, #52	; 0x34
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f00e fde5 	bl	8013516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800494c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	223c      	movs	r2, #60	; 0x3c
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f00e fdd6 	bl	8013516 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <SystemClock_Config+0x114>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a36      	ldr	r2, [pc, #216]	; (8004a4c <SystemClock_Config+0x114>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <SystemClock_Config+0x114>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <SystemClock_Config+0x118>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a30      	ldr	r2, [pc, #192]	; (8004a50 <SystemClock_Config+0x118>)
 8004990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <SystemClock_Config+0x118>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ac:	2302      	movs	r3, #2
 80049ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049b4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80049b6:	2308      	movs	r3, #8
 80049b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80049ba:	23b4      	movs	r3, #180	; 0xb4
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049c0:	2302      	movs	r3, #2
 80049c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80049c6:	2308      	movs	r3, #8
 80049c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049cc:	2302      	movs	r3, #2
 80049ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049d6:	4618      	mov	r0, r3
 80049d8:	f005 fed4 	bl	800a784 <HAL_RCC_OscConfig>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80049e2:	f000 fe7f 	bl	80056e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80049e6:	f005 fa4f 	bl	8009e88 <HAL_PWREx_EnableOverDrive>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80049f0:	f000 fe78 	bl	80056e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049f4:	230f      	movs	r3, #15
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049f8:	2302      	movs	r3, #2
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049fc:	2300      	movs	r3, #0
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a0a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a10:	2105      	movs	r1, #5
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fa88 	bl	8009f28 <HAL_RCC_ClockConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004a1e:	f000 fe61 	bl	80056e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004a22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004a26:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 fc67 	bl	800a308 <HAL_RCCEx_PeriphCLKConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004a40:	f000 fe50 	bl	80056e4 <Error_Handler>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3790      	adds	r7, #144	; 0x90
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40007000 	.word	0x40007000

08004a54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004a66:	4b7c      	ldr	r3, [pc, #496]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a68:	4a7c      	ldr	r2, [pc, #496]	; (8004c5c <MX_ADC2_Init+0x208>)
 8004a6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a6c:	4b7a      	ldr	r3, [pc, #488]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004a74:	4b78      	ldr	r3, [pc, #480]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004a7a:	4b77      	ldr	r3, [pc, #476]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004a80:	4b75      	ldr	r3, [pc, #468]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004a86:	4b74      	ldr	r3, [pc, #464]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a8e:	4b72      	ldr	r3, [pc, #456]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a94:	4b70      	ldr	r3, [pc, #448]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a96:	4a72      	ldr	r2, [pc, #456]	; (8004c60 <MX_ADC2_Init+0x20c>)
 8004a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a9a:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004aa0:	4b6d      	ldr	r3, [pc, #436]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004aa2:	220e      	movs	r2, #14
 8004aa4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004aa6:	4b6c      	ldr	r3, [pc, #432]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aae:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004ab4:	4868      	ldr	r0, [pc, #416]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004ab6:	f002 ffcf 	bl	8007a58 <HAL_ADC_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004ac0:	f000 fe10 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004acc:	2306      	movs	r3, #6
 8004ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4860      	ldr	r0, [pc, #384]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004ad6:	f003 f913 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004ae0:	f000 fe00 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004ae4:	230b      	movs	r3, #11
 8004ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004aec:	463b      	mov	r3, r7
 8004aee:	4619      	mov	r1, r3
 8004af0:	4859      	ldr	r0, [pc, #356]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004af2:	f003 f905 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004afc:	f000 fdf2 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004b00:	230c      	movs	r3, #12
 8004b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004b04:	2303      	movs	r3, #3
 8004b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b08:	463b      	mov	r3, r7
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4852      	ldr	r0, [pc, #328]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b0e:	f003 f8f7 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004b18:	f000 fde4 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004b1c:	230d      	movs	r3, #13
 8004b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004b20:	2304      	movs	r3, #4
 8004b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b24:	463b      	mov	r3, r7
 8004b26:	4619      	mov	r1, r3
 8004b28:	484b      	ldr	r0, [pc, #300]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b2a:	f003 f8e9 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004b34:	f000 fdd6 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004b3c:	2305      	movs	r3, #5
 8004b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b40:	463b      	mov	r3, r7
 8004b42:	4619      	mov	r1, r3
 8004b44:	4844      	ldr	r0, [pc, #272]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b46:	f003 f8db 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004b50:	f000 fdc8 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b54:	2301      	movs	r3, #1
 8004b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004b58:	2306      	movs	r3, #6
 8004b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	4619      	mov	r1, r3
 8004b60:	483d      	ldr	r0, [pc, #244]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b62:	f003 f8cd 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004b6c:	f000 fdba 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004b70:	2302      	movs	r3, #2
 8004b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004b74:	2307      	movs	r3, #7
 8004b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b78:	463b      	mov	r3, r7
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4836      	ldr	r0, [pc, #216]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b7e:	f003 f8bf 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004b88:	f000 fdac 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004b90:	2308      	movs	r3, #8
 8004b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b94:	463b      	mov	r3, r7
 8004b96:	4619      	mov	r1, r3
 8004b98:	482f      	ldr	r0, [pc, #188]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004b9a:	f003 f8b1 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004ba4:	f000 fd9e 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004ba8:	2304      	movs	r3, #4
 8004baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004bac:	2309      	movs	r3, #9
 8004bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4828      	ldr	r0, [pc, #160]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004bb6:	f003 f8a3 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004bc0:	f000 fd90 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004bc4:	2305      	movs	r3, #5
 8004bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004bc8:	230a      	movs	r3, #10
 8004bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4821      	ldr	r0, [pc, #132]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004bd2:	f003 f895 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004bdc:	f000 fd82 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004be0:	2306      	movs	r3, #6
 8004be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004be4:	230b      	movs	r3, #11
 8004be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004be8:	463b      	mov	r3, r7
 8004bea:	4619      	mov	r1, r3
 8004bec:	481a      	ldr	r0, [pc, #104]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004bee:	f003 f887 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004bf8:	f000 fd74 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004bfc:	2307      	movs	r3, #7
 8004bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004c00:	230c      	movs	r3, #12
 8004c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c04:	463b      	mov	r3, r7
 8004c06:	4619      	mov	r1, r3
 8004c08:	4813      	ldr	r0, [pc, #76]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004c0a:	f003 f879 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004c14:	f000 fd66 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004c18:	2308      	movs	r3, #8
 8004c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004c1c:	230d      	movs	r3, #13
 8004c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c20:	463b      	mov	r3, r7
 8004c22:	4619      	mov	r1, r3
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004c26:	f003 f86b 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004c30:	f000 fd58 	bl	80056e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004c34:	2309      	movs	r3, #9
 8004c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004c38:	230e      	movs	r3, #14
 8004c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4805      	ldr	r0, [pc, #20]	; (8004c58 <MX_ADC2_Init+0x204>)
 8004c42:	f003 f85d 	bl	8007d00 <HAL_ADC_ConfigChannel>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004c4c:	f000 fd4a 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20035a7c 	.word	0x20035a7c
 8004c5c:	40012100 	.word	0x40012100
 8004c60:	0f000001 	.word	0x0f000001

08004c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <MX_I2C1_Init+0x54>)
 8004c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c70:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <MX_I2C1_Init+0x58>)
 8004c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <MX_I2C1_Init+0x50>)
 8004ca2:	f004 f967 	bl	8008f74 <HAL_I2C_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004cac:	f000 fd1a 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20035ac4 	.word	0x20035ac4
 8004cb8:	40005400 	.word	0x40005400
 8004cbc:	000186a0 	.word	0x000186a0

08004cc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <MX_I2C2_Init+0x54>)
 8004cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <MX_I2C2_Init+0x58>)
 8004cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ce2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004cfc:	4804      	ldr	r0, [pc, #16]	; (8004d10 <MX_I2C2_Init+0x50>)
 8004cfe:	f004 f939 	bl	8008f74 <HAL_I2C_Init>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004d08:	f000 fcec 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20035b58 	.word	0x20035b58
 8004d14:	40005800 	.word	0x40005800
 8004d18:	000186a0 	.word	0x000186a0

08004d1c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d22:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <MX_SDIO_SD_Init+0x3c>)
 8004d24:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <MX_SDIO_SD_Init+0x38>)
 8004d46:	2202      	movs	r2, #2
 8004d48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20035d58 	.word	0x20035d58
 8004d58:	40012c00 	.word	0x40012c00

08004d5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004d60:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <MX_SPI2_Init+0x68>)
 8004d64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004d6e:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d86:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d90:	2228      	movs	r2, #40	; 0x28
 8004d92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004da8:	220a      	movs	r2, #10
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004dac:	4804      	ldr	r0, [pc, #16]	; (8004dc0 <MX_SPI2_Init+0x64>)
 8004dae:	f007 fa13 	bl	800c1d8 <HAL_SPI_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004db8:	f000 fc94 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200359a4 	.word	0x200359a4
 8004dc4:	40003800 	.word	0x40003800

08004dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b09a      	sub	sp, #104	; 0x68
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dd2:	2224      	movs	r2, #36	; 0x24
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f00e fb9d 	bl	8013516 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004de6:	f107 0320 	add.w	r3, r7, #32
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	609a      	str	r2, [r3, #8]
 8004df2:	60da      	str	r2, [r3, #12]
 8004df4:	611a      	str	r2, [r3, #16]
 8004df6:	615a      	str	r2, [r3, #20]
 8004df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f00e fb88 	bl	8013516 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e06:	4b42      	ldr	r3, [pc, #264]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e08:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <MX_TIM1_Init+0x14c>)
 8004e0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e0c:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004e18:	4b3d      	ldr	r3, [pc, #244]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e26:	4b3a      	ldr	r3, [pc, #232]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e2c:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e32:	4837      	ldr	r0, [pc, #220]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e34:	f007 ff73 	bl	800cd1e <HAL_TIM_PWM_Init>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004e3e:	f000 fc51 	bl	80056e4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e42:	2303      	movs	r3, #3
 8004e44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e46:	2300      	movs	r3, #0
 8004e48:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e56:	2300      	movs	r3, #0
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004e66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4828      	ldr	r0, [pc, #160]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e6e:	f007 ffbf 	bl	800cdf0 <HAL_TIM_Encoder_Init>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004e78:	f000 fc34 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4821      	ldr	r0, [pc, #132]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004e8c:	f008 fce6 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004e96:	f000 fc25 	bl	80056e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e9a:	2360      	movs	r3, #96	; 0x60
 8004e9c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004eb6:	f107 0320 	add.w	r3, r7, #32
 8004eba:	2208      	movs	r2, #8
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4814      	ldr	r0, [pc, #80]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004ec0:	f008 f968 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004eca:	f000 fc0b 	bl	80056e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004eec:	463b      	mov	r3, r7
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4807      	ldr	r0, [pc, #28]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004ef2:	f008 fd2f 	bl	800d954 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004efc:	f000 fbf2 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f00:	4803      	ldr	r0, [pc, #12]	; (8004f10 <MX_TIM1_Init+0x148>)
 8004f02:	f000 ffdf 	bl	8005ec4 <HAL_TIM_MspPostInit>

}
 8004f06:	bf00      	nop
 8004f08:	3768      	adds	r7, #104	; 0x68
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20035d18 	.word	0x20035d18
 8004f14:	40010000 	.word	0x40010000

08004f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f1e:	f107 0320 	add.w	r3, r7, #32
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	611a      	str	r2, [r3, #16]
 8004f36:	615a      	str	r2, [r3, #20]
 8004f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f3c:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <MX_TIM3_Init+0xc4>)
 8004f3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f40:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f4c:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f60:	481d      	ldr	r0, [pc, #116]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f62:	f007 fedc 	bl	800cd1e <HAL_TIM_PWM_Init>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004f6c:	f000 fbba 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f78:	f107 0320 	add.w	r3, r7, #32
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4816      	ldr	r0, [pc, #88]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004f80:	f008 fc6c 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004f8a:	f000 fbab 	bl	80056e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f8e:	2360      	movs	r3, #96	; 0x60
 8004f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	480c      	ldr	r0, [pc, #48]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004fa6:	f008 f8f5 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004fb0:	f000 fb98 	bl	80056e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004fbc:	f008 f8ea 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004fc6:	f000 fb8d 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004fca:	4803      	ldr	r0, [pc, #12]	; (8004fd8 <MX_TIM3_Init+0xc0>)
 8004fcc:	f000 ff7a 	bl	8005ec4 <HAL_TIM_MspPostInit>

}
 8004fd0:	bf00      	nop
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20035bb0 	.word	0x20035bb0
 8004fdc:	40000400 	.word	0x40000400

08004fe0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe6:	f107 0320 	add.w	r3, r7, #32
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	615a      	str	r2, [r3, #20]
 8005000:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005002:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <MX_TIM4_Init+0xc4>)
 8005006:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <MX_TIM4_Init+0xc0>)
 800500a:	2200      	movs	r2, #0
 800500c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005016:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800501a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800501c:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <MX_TIM4_Init+0xc0>)
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005022:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005028:	481d      	ldr	r0, [pc, #116]	; (80050a0 <MX_TIM4_Init+0xc0>)
 800502a:	f007 fe78 	bl	800cd1e <HAL_TIM_PWM_Init>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005034:	f000 fb56 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005040:	f107 0320 	add.w	r3, r7, #32
 8005044:	4619      	mov	r1, r3
 8005046:	4816      	ldr	r0, [pc, #88]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005048:	f008 fc08 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005052:	f000 fb47 	bl	80056e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005056:	2360      	movs	r3, #96	; 0x60
 8005058:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	2208      	movs	r2, #8
 800506a:	4619      	mov	r1, r3
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <MX_TIM4_Init+0xc0>)
 800506e:	f008 f891 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005078:	f000 fb34 	bl	80056e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	220c      	movs	r2, #12
 8005080:	4619      	mov	r1, r3
 8005082:	4807      	ldr	r0, [pc, #28]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005084:	f008 f886 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800508e:	f000 fb29 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005092:	4803      	ldr	r0, [pc, #12]	; (80050a0 <MX_TIM4_Init+0xc0>)
 8005094:	f000 ff16 	bl	8005ec4 <HAL_TIM_MspPostInit>

}
 8005098:	bf00      	nop
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20035a3c 	.word	0x20035a3c
 80050a4:	40000800 	.word	0x40000800

080050a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ae:	463b      	mov	r3, r7
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <MX_TIM6_Init+0x64>)
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <MX_TIM6_Init+0x68>)
 80050ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <MX_TIM6_Init+0x64>)
 80050be:	2259      	movs	r2, #89	; 0x59
 80050c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <MX_TIM6_Init+0x64>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <MX_TIM6_Init+0x64>)
 80050ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050d0:	4b0e      	ldr	r3, [pc, #56]	; (800510c <MX_TIM6_Init+0x64>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80050d6:	480d      	ldr	r0, [pc, #52]	; (800510c <MX_TIM6_Init+0x64>)
 80050d8:	f007 fdd2 	bl	800cc80 <HAL_TIM_Base_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80050e2:	f000 faff 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80050ee:	463b      	mov	r3, r7
 80050f0:	4619      	mov	r1, r3
 80050f2:	4806      	ldr	r0, [pc, #24]	; (800510c <MX_TIM6_Init+0x64>)
 80050f4:	f008 fbb2 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80050fe:	f000 faf1 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20035cd8 	.word	0x20035cd8
 8005110:	40001000 	.word	0x40001000

08005114 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800511a:	463b      	mov	r3, r7
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <MX_TIM7_Init+0x60>)
 8005124:	4a14      	ldr	r2, [pc, #80]	; (8005178 <MX_TIM7_Init+0x64>)
 8005126:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <MX_TIM7_Init+0x60>)
 800512a:	22b3      	movs	r2, #179	; 0xb3
 800512c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <MX_TIM7_Init+0x60>)
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <MX_TIM7_Init+0x60>)
 8005136:	2231      	movs	r2, #49	; 0x31
 8005138:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <MX_TIM7_Init+0x60>)
 800513c:	2280      	movs	r2, #128	; 0x80
 800513e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <MX_TIM7_Init+0x60>)
 8005142:	f007 fd9d 	bl	800cc80 <HAL_TIM_Base_Init>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800514c:	f000 faca 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005158:	463b      	mov	r3, r7
 800515a:	4619      	mov	r1, r3
 800515c:	4805      	ldr	r0, [pc, #20]	; (8005174 <MX_TIM7_Init+0x60>)
 800515e:	f008 fb7d 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005168:	f000 fabc 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20035e7c 	.word	0x20035e7c
 8005178:	40001400 	.word	0x40001400

0800517c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005182:	f107 030c 	add.w	r3, r7, #12
 8005186:	2224      	movs	r2, #36	; 0x24
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f00e f9c3 	bl	8013516 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005198:	4b22      	ldr	r3, [pc, #136]	; (8005224 <MX_TIM8_Init+0xa8>)
 800519a:	4a23      	ldr	r2, [pc, #140]	; (8005228 <MX_TIM8_Init+0xac>)
 800519c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80051a4:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051a6:	2210      	movs	r2, #16
 80051a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051be:	4b19      	ldr	r3, [pc, #100]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80051c4:	2303      	movs	r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051cc:	2301      	movs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051dc:	2301      	movs	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	4619      	mov	r1, r3
 80051ee:	480d      	ldr	r0, [pc, #52]	; (8005224 <MX_TIM8_Init+0xa8>)
 80051f0:	f007 fdfe 	bl	800cdf0 <HAL_TIM_Encoder_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80051fa:	f000 fa73 	bl	80056e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4806      	ldr	r0, [pc, #24]	; (8005224 <MX_TIM8_Init+0xa8>)
 800520c:	f008 fb26 	bl	800d85c <HAL_TIMEx_MasterConfigSynchronization>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005216:	f000 fa65 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800521a:	bf00      	nop
 800521c:	3730      	adds	r7, #48	; 0x30
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200359fc 	.word	0x200359fc
 8005228:	40010400 	.word	0x40010400

0800522c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	611a      	str	r2, [r3, #16]
 8005240:	615a      	str	r2, [r3, #20]
 8005242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <MX_TIM10_Init+0x94>)
 8005246:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <MX_TIM10_Init+0x98>)
 8005248:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <MX_TIM10_Init+0x94>)
 800524c:	2200      	movs	r2, #0
 800524e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <MX_TIM10_Init+0x94>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <MX_TIM10_Init+0x94>)
 8005258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800525c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525e:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <MX_TIM10_Init+0x94>)
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005264:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <MX_TIM10_Init+0x94>)
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800526a:	4815      	ldr	r0, [pc, #84]	; (80052c0 <MX_TIM10_Init+0x94>)
 800526c:	f007 fd08 	bl	800cc80 <HAL_TIM_Base_Init>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005276:	f000 fa35 	bl	80056e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800527a:	4811      	ldr	r0, [pc, #68]	; (80052c0 <MX_TIM10_Init+0x94>)
 800527c:	f007 fd4f 	bl	800cd1e <HAL_TIM_PWM_Init>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005286:	f000 fa2d 	bl	80056e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800528a:	2360      	movs	r3, #96	; 0x60
 800528c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	2200      	movs	r2, #0
 800529e:	4619      	mov	r1, r3
 80052a0:	4807      	ldr	r0, [pc, #28]	; (80052c0 <MX_TIM10_Init+0x94>)
 80052a2:	f007 ff77 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80052ac:	f000 fa1a 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <MX_TIM10_Init+0x94>)
 80052b2:	f000 fe07 	bl	8005ec4 <HAL_TIM_MspPostInit>

}
 80052b6:	bf00      	nop
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20035b18 	.word	0x20035b18
 80052c4:	40014400 	.word	0x40014400

080052c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	611a      	str	r2, [r3, #16]
 80052dc:	615a      	str	r2, [r3, #20]
 80052de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <MX_TIM11_Init+0x94>)
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <MX_TIM11_Init+0x98>)
 80052e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <MX_TIM11_Init+0x94>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <MX_TIM11_Init+0x94>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <MX_TIM11_Init+0x94>)
 80052f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <MX_TIM11_Init+0x94>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <MX_TIM11_Init+0x94>)
 8005302:	2200      	movs	r2, #0
 8005304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005306:	4815      	ldr	r0, [pc, #84]	; (800535c <MX_TIM11_Init+0x94>)
 8005308:	f007 fcba 	bl	800cc80 <HAL_TIM_Base_Init>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005312:	f000 f9e7 	bl	80056e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005316:	4811      	ldr	r0, [pc, #68]	; (800535c <MX_TIM11_Init+0x94>)
 8005318:	f007 fd01 	bl	800cd1e <HAL_TIM_PWM_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005322:	f000 f9df 	bl	80056e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005326:	2360      	movs	r3, #96	; 0x60
 8005328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005336:	1d3b      	adds	r3, r7, #4
 8005338:	2200      	movs	r2, #0
 800533a:	4619      	mov	r1, r3
 800533c:	4807      	ldr	r0, [pc, #28]	; (800535c <MX_TIM11_Init+0x94>)
 800533e:	f007 ff29 	bl	800d194 <HAL_TIM_PWM_ConfigChannel>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005348:	f000 f9cc 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800534c:	4803      	ldr	r0, [pc, #12]	; (800535c <MX_TIM11_Init+0x94>)
 800534e:	f000 fdb9 	bl	8005ec4 <HAL_TIM_MspPostInit>

}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20035c38 	.word	0x20035c38
 8005360:	40014800 	.word	0x40014800

08005364 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005368:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <MX_TIM13_Init+0x40>)
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <MX_TIM13_Init+0x44>)
 800536c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <MX_TIM13_Init+0x40>)
 8005370:	2259      	movs	r2, #89	; 0x59
 8005372:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <MX_TIM13_Init+0x40>)
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <MX_TIM13_Init+0x40>)
 800537c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005380:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <MX_TIM13_Init+0x40>)
 8005384:	2200      	movs	r2, #0
 8005386:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <MX_TIM13_Init+0x40>)
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800538e:	4805      	ldr	r0, [pc, #20]	; (80053a4 <MX_TIM13_Init+0x40>)
 8005390:	f007 fc76 	bl	800cc80 <HAL_TIM_Base_Init>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800539a:	f000 f9a3 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20035bf8 	.word	0x20035bf8
 80053a8:	40001c00 	.word	0x40001c00

080053ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053b2:	4a12      	ldr	r2, [pc, #72]	; (80053fc <MX_USART2_UART_Init+0x50>)
 80053b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053d2:	220c      	movs	r2, #12
 80053d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053e2:	4805      	ldr	r0, [pc, #20]	; (80053f8 <MX_USART2_UART_Init+0x4c>)
 80053e4:	f008 fb1c 	bl	800da20 <HAL_UART_Init>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80053ee:	f000 f979 	bl	80056e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20035ddc 	.word	0x20035ddc
 80053fc:	40004400 	.word	0x40004400

08005400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <MX_DMA_Init+0x5c>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	4a13      	ldr	r2, [pc, #76]	; (800545c <MX_DMA_Init+0x5c>)
 8005410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005414:	6313      	str	r3, [r2, #48]	; 0x30
 8005416:	4b11      	ldr	r3, [pc, #68]	; (800545c <MX_DMA_Init+0x5c>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	2100      	movs	r1, #0
 8005426:	203a      	movs	r0, #58	; 0x3a
 8005428:	f002 fff5 	bl	8008416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800542c:	203a      	movs	r0, #58	; 0x3a
 800542e:	f003 f80e 	bl	800844e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005432:	2200      	movs	r2, #0
 8005434:	2100      	movs	r1, #0
 8005436:	203b      	movs	r0, #59	; 0x3b
 8005438:	f002 ffed 	bl	8008416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800543c:	203b      	movs	r0, #59	; 0x3b
 800543e:	f003 f806 	bl	800844e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005442:	2200      	movs	r2, #0
 8005444:	2100      	movs	r1, #0
 8005446:	2045      	movs	r0, #69	; 0x45
 8005448:	f002 ffe5 	bl	8008416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800544c:	2045      	movs	r0, #69	; 0x45
 800544e:	f002 fffe 	bl	800844e <HAL_NVIC_EnableIRQ>

}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800

08005460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005466:	f107 031c 	add.w	r3, r7, #28
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	609a      	str	r2, [r3, #8]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	4b94      	ldr	r3, [pc, #592]	; (80056cc <MX_GPIO_Init+0x26c>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a93      	ldr	r2, [pc, #588]	; (80056cc <MX_GPIO_Init+0x26c>)
 8005480:	f043 0310 	orr.w	r3, r3, #16
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b91      	ldr	r3, [pc, #580]	; (80056cc <MX_GPIO_Init+0x26c>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <MX_GPIO_Init+0x26c>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4a8c      	ldr	r2, [pc, #560]	; (80056cc <MX_GPIO_Init+0x26c>)
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
 80054a2:	4b8a      	ldr	r3, [pc, #552]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	4b86      	ldr	r3, [pc, #536]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	4a85      	ldr	r2, [pc, #532]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6313      	str	r3, [r2, #48]	; 0x30
 80054be:	4b83      	ldr	r3, [pc, #524]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	4b7f      	ldr	r3, [pc, #508]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	4a7e      	ldr	r2, [pc, #504]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	6313      	str	r3, [r2, #48]	; 0x30
 80054da:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b78      	ldr	r3, [pc, #480]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	4a77      	ldr	r2, [pc, #476]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054f0:	f043 0302 	orr.w	r3, r3, #2
 80054f4:	6313      	str	r3, [r2, #48]	; 0x30
 80054f6:	4b75      	ldr	r3, [pc, #468]	; (80056cc <MX_GPIO_Init+0x26c>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
 8005506:	4b71      	ldr	r3, [pc, #452]	; (80056cc <MX_GPIO_Init+0x26c>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	4a70      	ldr	r2, [pc, #448]	; (80056cc <MX_GPIO_Init+0x26c>)
 800550c:	f043 0308 	orr.w	r3, r3, #8
 8005510:	6313      	str	r3, [r2, #48]	; 0x30
 8005512:	4b6e      	ldr	r3, [pc, #440]	; (80056cc <MX_GPIO_Init+0x26c>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800551e:	2200      	movs	r2, #0
 8005520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005524:	486a      	ldr	r0, [pc, #424]	; (80056d0 <MX_GPIO_Init+0x270>)
 8005526:	f003 fd0b 	bl	8008f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800552a:	2200      	movs	r2, #0
 800552c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005530:	4868      	ldr	r0, [pc, #416]	; (80056d4 <MX_GPIO_Init+0x274>)
 8005532:	f003 fd05 	bl	8008f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005536:	2200      	movs	r2, #0
 8005538:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800553c:	4866      	ldr	r0, [pc, #408]	; (80056d8 <MX_GPIO_Init+0x278>)
 800553e:	f003 fcff 	bl	8008f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005542:	2200      	movs	r2, #0
 8005544:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005548:	4864      	ldr	r0, [pc, #400]	; (80056dc <MX_GPIO_Init+0x27c>)
 800554a:	f003 fcf9 	bl	8008f40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800554e:	2304      	movs	r3, #4
 8005550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	4619      	mov	r1, r3
 8005560:	485b      	ldr	r0, [pc, #364]	; (80056d0 <MX_GPIO_Init+0x270>)
 8005562:	f003 fb2b 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005566:	230f      	movs	r3, #15
 8005568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800556a:	2303      	movs	r3, #3
 800556c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005572:	f107 031c 	add.w	r3, r7, #28
 8005576:	4619      	mov	r1, r3
 8005578:	4859      	ldr	r0, [pc, #356]	; (80056e0 <MX_GPIO_Init+0x280>)
 800557a:	f003 fb1f 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800557e:	23e1      	movs	r3, #225	; 0xe1
 8005580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005582:	2303      	movs	r3, #3
 8005584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558a:	f107 031c 	add.w	r3, r7, #28
 800558e:	4619      	mov	r1, r3
 8005590:	4852      	ldr	r0, [pc, #328]	; (80056dc <MX_GPIO_Init+0x27c>)
 8005592:	f003 fb13 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005596:	2303      	movs	r3, #3
 8005598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800559a:	2303      	movs	r3, #3
 800559c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a2:	f107 031c 	add.w	r3, r7, #28
 80055a6:	4619      	mov	r1, r3
 80055a8:	484a      	ldr	r0, [pc, #296]	; (80056d4 <MX_GPIO_Init+0x274>)
 80055aa:	f003 fb07 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055ae:	2304      	movs	r3, #4
 80055b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055b6:	2301      	movs	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ba:	f107 031c 	add.w	r3, r7, #28
 80055be:	4619      	mov	r1, r3
 80055c0:	4844      	ldr	r0, [pc, #272]	; (80056d4 <MX_GPIO_Init+0x274>)
 80055c2:	f003 fafb 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80055c6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80055ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055cc:	2300      	movs	r3, #0
 80055ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055d4:	f107 031c 	add.w	r3, r7, #28
 80055d8:	4619      	mov	r1, r3
 80055da:	483d      	ldr	r0, [pc, #244]	; (80056d0 <MX_GPIO_Init+0x270>)
 80055dc:	f003 faee 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80055e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e6:	2301      	movs	r3, #1
 80055e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055f2:	f107 031c 	add.w	r3, r7, #28
 80055f6:	4619      	mov	r1, r3
 80055f8:	4835      	ldr	r0, [pc, #212]	; (80056d0 <MX_GPIO_Init+0x270>)
 80055fa:	f003 fadf 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005604:	2301      	movs	r3, #1
 8005606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560c:	2300      	movs	r3, #0
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	4619      	mov	r1, r3
 8005616:	482f      	ldr	r0, [pc, #188]	; (80056d4 <MX_GPIO_Init+0x274>)
 8005618:	f003 fad0 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800561c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005622:	2300      	movs	r3, #0
 8005624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800562a:	f107 031c 	add.w	r3, r7, #28
 800562e:	4619      	mov	r1, r3
 8005630:	4829      	ldr	r0, [pc, #164]	; (80056d8 <MX_GPIO_Init+0x278>)
 8005632:	f003 fac3 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800563a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800563c:	2301      	movs	r3, #1
 800563e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005644:	2300      	movs	r3, #0
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005648:	f107 031c 	add.w	r3, r7, #28
 800564c:	4619      	mov	r1, r3
 800564e:	4822      	ldr	r0, [pc, #136]	; (80056d8 <MX_GPIO_Init+0x278>)
 8005650:	f003 fab4 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800565a:	2301      	movs	r3, #1
 800565c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800565e:	2301      	movs	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	2300      	movs	r3, #0
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005666:	f107 031c 	add.w	r3, r7, #28
 800566a:	4619      	mov	r1, r3
 800566c:	481a      	ldr	r0, [pc, #104]	; (80056d8 <MX_GPIO_Init+0x278>)
 800566e:	f003 faa5 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005672:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005676:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005678:	2301      	movs	r3, #1
 800567a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005684:	f107 031c 	add.w	r3, r7, #28
 8005688:	4619      	mov	r1, r3
 800568a:	4814      	ldr	r0, [pc, #80]	; (80056dc <MX_GPIO_Init+0x27c>)
 800568c:	f003 fa96 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005696:	2300      	movs	r3, #0
 8005698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569e:	f107 031c 	add.w	r3, r7, #28
 80056a2:	4619      	mov	r1, r3
 80056a4:	480d      	ldr	r0, [pc, #52]	; (80056dc <MX_GPIO_Init+0x27c>)
 80056a6:	f003 fa89 	bl	8008bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80056aa:	239b      	movs	r3, #155	; 0x9b
 80056ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ae:	2300      	movs	r3, #0
 80056b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056b2:	2301      	movs	r3, #1
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056b6:	f107 031c 	add.w	r3, r7, #28
 80056ba:	4619      	mov	r1, r3
 80056bc:	4806      	ldr	r0, [pc, #24]	; (80056d8 <MX_GPIO_Init+0x278>)
 80056be:	f003 fa7d 	bl	8008bbc <HAL_GPIO_Init>

}
 80056c2:	bf00      	nop
 80056c4:	3730      	adds	r7, #48	; 0x30
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40020400 	.word	0x40020400
 80056d8:	40020c00 	.word	0x40020c00
 80056dc:	40020000 	.word	0x40020000
 80056e0:	40020800 	.word	0x40020800

080056e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056ea:	e7fe      	b.n	80056ea <Error_Handler+0x6>

080056ec <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <HAL_MspInit+0x4c>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <HAL_MspInit+0x4c>)
 800570c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005710:	6453      	str	r3, [r2, #68]	; 0x44
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <HAL_MspInit+0x4c>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_MspInit+0x4c>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <HAL_MspInit+0x4c>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_MspInit+0x4c>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	f107 031c 	add.w	r3, r7, #28
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	609a      	str	r2, [r3, #8]
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <HAL_ADC_MspInit+0x148>)
 800576a:	4293      	cmp	r3, r2
 800576c:	f040 808e 	bne.w	800588c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	4a47      	ldr	r2, [pc, #284]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 800577a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800577e:	6453      	str	r3, [r2, #68]	; 0x44
 8005780:	4b45      	ldr	r3, [pc, #276]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	4a40      	ldr	r2, [pc, #256]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	6313      	str	r3, [r2, #48]	; 0x30
 800579c:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	4b3a      	ldr	r3, [pc, #232]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	4a39      	ldr	r2, [pc, #228]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6313      	str	r3, [r2, #48]	; 0x30
 80057b8:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	4a32      	ldr	r2, [pc, #200]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	6313      	str	r3, [r2, #48]	; 0x30
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <HAL_ADC_MspInit+0x14c>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80057e0:	230f      	movs	r3, #15
 80057e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057e4:	2303      	movs	r3, #3
 80057e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057ec:	f107 031c 	add.w	r3, r7, #28
 80057f0:	4619      	mov	r1, r3
 80057f2:	482a      	ldr	r0, [pc, #168]	; (800589c <HAL_ADC_MspInit+0x150>)
 80057f4:	f003 f9e2 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80057f8:	23ff      	movs	r3, #255	; 0xff
 80057fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057fc:	2303      	movs	r3, #3
 80057fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005804:	f107 031c 	add.w	r3, r7, #28
 8005808:	4619      	mov	r1, r3
 800580a:	4825      	ldr	r0, [pc, #148]	; (80058a0 <HAL_ADC_MspInit+0x154>)
 800580c:	f003 f9d6 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005810:	2303      	movs	r3, #3
 8005812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005814:	2303      	movs	r3, #3
 8005816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800581c:	f107 031c 	add.w	r3, r7, #28
 8005820:	4619      	mov	r1, r3
 8005822:	4820      	ldr	r0, [pc, #128]	; (80058a4 <HAL_ADC_MspInit+0x158>)
 8005824:	f003 f9ca 	bl	8008bbc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005828:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 800582a:	4a20      	ldr	r2, [pc, #128]	; (80058ac <HAL_ADC_MspInit+0x160>)
 800582c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005834:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005836:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005838:	2200      	movs	r2, #0
 800583a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800583c:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 800583e:	2200      	movs	r2, #0
 8005840:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005848:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 800584c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005850:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005858:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 800585c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005860:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005864:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005868:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 800586c:	2200      	movs	r2, #0
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005872:	f002 fe07 	bl	8008484 <HAL_DMA_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800587c:	f7ff ff32 	bl	80056e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
 8005886:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <HAL_ADC_MspInit+0x15c>)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800588c:	bf00      	nop
 800588e:	3730      	adds	r7, #48	; 0x30
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40012100 	.word	0x40012100
 8005898:	40023800 	.word	0x40023800
 800589c:	40020800 	.word	0x40020800
 80058a0:	40020000 	.word	0x40020000
 80058a4:	40020400 	.word	0x40020400
 80058a8:	20035e1c 	.word	0x20035e1c
 80058ac:	40026440 	.word	0x40026440

080058b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b8:	f107 031c 	add.w	r3, r7, #28
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a32      	ldr	r2, [pc, #200]	; (8005998 <HAL_I2C_MspInit+0xe8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d12c      	bne.n	800592c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	4b31      	ldr	r3, [pc, #196]	; (800599c <HAL_I2C_MspInit+0xec>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4a30      	ldr	r2, [pc, #192]	; (800599c <HAL_I2C_MspInit+0xec>)
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30
 80058e2:	4b2e      	ldr	r3, [pc, #184]	; (800599c <HAL_I2C_MspInit+0xec>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058ee:	23c0      	movs	r3, #192	; 0xc0
 80058f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058f2:	2312      	movs	r3, #18
 80058f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058f6:	2301      	movs	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fa:	2303      	movs	r3, #3
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80058fe:	2304      	movs	r3, #4
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005902:	f107 031c 	add.w	r3, r7, #28
 8005906:	4619      	mov	r1, r3
 8005908:	4825      	ldr	r0, [pc, #148]	; (80059a0 <HAL_I2C_MspInit+0xf0>)
 800590a:	f003 f957 	bl	8008bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800591c:	6413      	str	r3, [r2, #64]	; 0x40
 800591e:	4b1f      	ldr	r3, [pc, #124]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800592a:	e031      	b.n	8005990 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_I2C_MspInit+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d12c      	bne.n	8005990 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	4b18      	ldr	r3, [pc, #96]	; (800599c <HAL_I2C_MspInit+0xec>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	4a17      	ldr	r2, [pc, #92]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	6313      	str	r3, [r2, #48]	; 0x30
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005958:	2312      	movs	r3, #18
 800595a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800595c:	2301      	movs	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005960:	2303      	movs	r3, #3
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005964:	2304      	movs	r3, #4
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005968:	f107 031c 	add.w	r3, r7, #28
 800596c:	4619      	mov	r1, r3
 800596e:	480c      	ldr	r0, [pc, #48]	; (80059a0 <HAL_I2C_MspInit+0xf0>)
 8005970:	f003 f924 	bl	8008bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <HAL_I2C_MspInit+0xec>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	4a07      	ldr	r2, [pc, #28]	; (800599c <HAL_I2C_MspInit+0xec>)
 800597e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_I2C_MspInit+0xec>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	bf00      	nop
 8005992:	3730      	adds	r7, #48	; 0x30
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40005400 	.word	0x40005400
 800599c:	40023800 	.word	0x40023800
 80059a0:	40020400 	.word	0x40020400
 80059a4:	40005800 	.word	0x40005800

080059a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b0:	f107 0314 	add.w	r3, r7, #20
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	605a      	str	r2, [r3, #4]
 80059ba:	609a      	str	r2, [r3, #8]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a69      	ldr	r2, [pc, #420]	; (8005b6c <HAL_SD_MspInit+0x1c4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f040 80cb 	bne.w	8005b62 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	4b67      	ldr	r3, [pc, #412]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	4a66      	ldr	r2, [pc, #408]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059da:	6453      	str	r3, [r2, #68]	; 0x44
 80059dc:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	4b60      	ldr	r3, [pc, #384]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4a5f      	ldr	r2, [pc, #380]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059f2:	f043 0304 	orr.w	r3, r3, #4
 80059f6:	6313      	str	r3, [r2, #48]	; 0x30
 80059f8:	4b5d      	ldr	r3, [pc, #372]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	4a58      	ldr	r2, [pc, #352]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 8005a0e:	f043 0308 	orr.w	r3, r3, #8
 8005a12:	6313      	str	r3, [r2, #48]	; 0x30
 8005a14:	4b56      	ldr	r3, [pc, #344]	; (8005b70 <HAL_SD_MspInit+0x1c8>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005a20:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005a24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a26:	2302      	movs	r3, #2
 8005a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005a32:	230c      	movs	r3, #12
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	484d      	ldr	r0, [pc, #308]	; (8005b74 <HAL_SD_MspInit+0x1cc>)
 8005a3e:	f003 f8bd 	bl	8008bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a42:	2304      	movs	r3, #4
 8005a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a46:	2302      	movs	r3, #2
 8005a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005a52:	230c      	movs	r3, #12
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4846      	ldr	r0, [pc, #280]	; (8005b78 <HAL_SD_MspInit+0x1d0>)
 8005a5e:	f003 f8ad 	bl	8008bbc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005a62:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a64:	4a46      	ldr	r2, [pc, #280]	; (8005b80 <HAL_SD_MspInit+0x1d8>)
 8005a66:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005a68:	4b44      	ldr	r3, [pc, #272]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a70:	4b42      	ldr	r3, [pc, #264]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a76:	4b41      	ldr	r3, [pc, #260]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a7c:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a82:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a84:	4b3d      	ldr	r3, [pc, #244]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a92:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005a94:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a96:	2220      	movs	r2, #32
 8005a98:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a9a:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005a9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005aa0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005aa2:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005aa8:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005aaa:	2203      	movs	r2, #3
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005aae:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005ab0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005ab6:	4b31      	ldr	r3, [pc, #196]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005ab8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005abe:	482f      	ldr	r0, [pc, #188]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005ac0:	f002 fce0 	bl	8008484 <HAL_DMA_Init>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005aca:	f7ff fe0b 	bl	80056e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2a      	ldr	r2, [pc, #168]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ad4:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <HAL_SD_MspInit+0x1d4>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005ada:	4b2a      	ldr	r3, [pc, #168]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005adc:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <HAL_SD_MspInit+0x1e0>)
 8005ade:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ae6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ae8:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005aea:	2240      	movs	r2, #64	; 0x40
 8005aec:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aee:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005af4:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005afa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005afc:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b02:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b0e:	2220      	movs	r2, #32
 8005b10:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b18:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005b1a:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b22:	2203      	movs	r2, #3
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005b36:	4813      	ldr	r0, [pc, #76]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b38:	f002 fca4 	bl	8008484 <HAL_DMA_Init>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005b42:	f7ff fdcf 	bl	80056e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a0e      	ldr	r2, [pc, #56]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b4c:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <HAL_SD_MspInit+0x1dc>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	2031      	movs	r0, #49	; 0x31
 8005b58:	f002 fc5d 	bl	8008416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005b5c:	2031      	movs	r0, #49	; 0x31
 8005b5e:	f002 fc76 	bl	800844e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	; 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40020800 	.word	0x40020800
 8005b78:	40020c00 	.word	0x40020c00
 8005b7c:	20035944 	.word	0x20035944
 8005b80:	40026458 	.word	0x40026458
 8005b84:	20035c78 	.word	0x20035c78
 8005b88:	400264a0 	.word	0x400264a0

08005b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <HAL_SPI_MspInit+0x84>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d12c      	bne.n	8005c08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <HAL_SPI_MspInit+0x88>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005be6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bec:	2302      	movs	r3, #2
 8005bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005bf8:	2305      	movs	r3, #5
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bfc:	f107 0314 	add.w	r3, r7, #20
 8005c00:	4619      	mov	r1, r3
 8005c02:	4805      	ldr	r0, [pc, #20]	; (8005c18 <HAL_SPI_MspInit+0x8c>)
 8005c04:	f002 ffda 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005c08:	bf00      	nop
 8005c0a:	3728      	adds	r7, #40	; 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40003800 	.word	0x40003800
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40020400 	.word	0x40020400

08005c1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c24:	f107 031c 	add.w	r3, r7, #28
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_TIM_PWM_MspInit+0xd4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d12d      	bne.n	8005c9a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c64:	f043 0310 	orr.w	r3, r3, #16
 8005c68:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6a:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005c76:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c84:	2300      	movs	r3, #0
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c8c:	f107 031c 	add.w	r3, r7, #28
 8005c90:	4619      	mov	r1, r3
 8005c92:	4819      	ldr	r0, [pc, #100]	; (8005cf8 <HAL_TIM_PWM_MspInit+0xdc>)
 8005c94:	f002 ff92 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c98:	e026      	b.n	8005ce8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <HAL_TIM_PWM_MspInit+0xe0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cae:	f043 0302 	orr.w	r3, r3, #2
 8005cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	693b      	ldr	r3, [r7, #16]
}
 8005cc0:	e012      	b.n	8005ce8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a0e      	ldr	r2, [pc, #56]	; (8005d00 <HAL_TIM_PWM_MspInit+0xe4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cd6:	f043 0304 	orr.w	r3, r3, #4
 8005cda:	6413      	str	r3, [r2, #64]	; 0x40
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	3730      	adds	r7, #48	; 0x30
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800

08005d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <HAL_TIM_Base_MspInit+0x108>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d116      	bne.n	8005d44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a3c      	ldr	r2, [pc, #240]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d20:	f043 0310 	orr.w	r3, r3, #16
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b3a      	ldr	r3, [pc, #232]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005d32:	2200      	movs	r2, #0
 8005d34:	2101      	movs	r1, #1
 8005d36:	2036      	movs	r0, #54	; 0x36
 8005d38:	f002 fb6d 	bl	8008416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d3c:	2036      	movs	r0, #54	; 0x36
 8005d3e:	f002 fb86 	bl	800844e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005d42:	e05e      	b.n	8005e02 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_TIM_Base_MspInit+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d116      	bne.n	8005d7c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d58:	f043 0320 	orr.w	r3, r3, #32
 8005d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5e:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	2037      	movs	r0, #55	; 0x37
 8005d70:	f002 fb51 	bl	8008416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005d74:	2037      	movs	r0, #55	; 0x37
 8005d76:	f002 fb6a 	bl	800844e <HAL_NVIC_EnableIRQ>
}
 8005d7a:	e042      	b.n	8005e02 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a25      	ldr	r2, [pc, #148]	; (8005e18 <HAL_TIM_Base_MspInit+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10e      	bne.n	8005da4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d94:	6453      	str	r3, [r2, #68]	; 0x44
 8005d96:	4b1e      	ldr	r3, [pc, #120]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	697b      	ldr	r3, [r7, #20]
}
 8005da2:	e02e      	b.n	8005e02 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <HAL_TIM_Base_MspInit+0x118>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	693b      	ldr	r3, [r7, #16]
}
 8005dca:	e01a      	b.n	8005e02 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <HAL_TIM_Base_MspInit+0x11c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d115      	bne.n	8005e02 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	4a0c      	ldr	r2, [pc, #48]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de4:	6413      	str	r3, [r2, #64]	; 0x40
 8005de6:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <HAL_TIM_Base_MspInit+0x10c>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005df2:	2200      	movs	r2, #0
 8005df4:	2100      	movs	r1, #0
 8005df6:	202c      	movs	r0, #44	; 0x2c
 8005df8:	f002 fb0d 	bl	8008416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005dfc:	202c      	movs	r0, #44	; 0x2c
 8005dfe:	f002 fb26 	bl	800844e <HAL_NVIC_EnableIRQ>
}
 8005e02:	bf00      	nop
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40001000 	.word	0x40001000
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40001400 	.word	0x40001400
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800
 8005e20:	40001c00 	.word	0x40001c00

08005e24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <HAL_TIM_Encoder_MspInit+0x94>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d133      	bne.n	8005eae <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	6453      	str	r3, [r2, #68]	; 0x44
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e6c:	f043 0304 	orr.w	r3, r3, #4
 8005e70:	6313      	str	r3, [r2, #48]	; 0x30
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <HAL_TIM_Encoder_MspInit+0x98>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e7e:	23c0      	movs	r3, #192	; 0xc0
 8005e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e82:	2302      	movs	r3, #2
 8005e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4619      	mov	r1, r3
 8005e98:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005e9a:	f002 fe8f 	bl	8008bbc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	202c      	movs	r0, #44	; 0x2c
 8005ea4:	f002 fab7 	bl	8008416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ea8:	202c      	movs	r0, #44	; 0x2c
 8005eaa:	f002 fad0 	bl	800844e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005eae:	bf00      	nop
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40010400 	.word	0x40010400
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40020800 	.word	0x40020800

08005ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08c      	sub	sp, #48	; 0x30
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ecc:	f107 031c 	add.w	r3, r7, #28
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5c      	ldr	r2, [pc, #368]	; (8006054 <HAL_TIM_MspPostInit+0x190>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d11f      	bne.n	8005f26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	4a5a      	ldr	r2, [pc, #360]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005ef0:	f043 0310 	orr.w	r3, r3, #16
 8005ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef6:	4b58      	ldr	r3, [pc, #352]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005f14:	2301      	movs	r3, #1
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f18:	f107 031c 	add.w	r3, r7, #28
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	484f      	ldr	r0, [pc, #316]	; (800605c <HAL_TIM_MspPostInit+0x198>)
 8005f20:	f002 fe4c 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005f24:	e091      	b.n	800604a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a4d      	ldr	r2, [pc, #308]	; (8006060 <HAL_TIM_MspPostInit+0x19c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d11e      	bne.n	8005f6e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	4b48      	ldr	r3, [pc, #288]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	4a47      	ldr	r2, [pc, #284]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f40:	4b45      	ldr	r3, [pc, #276]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f4c:	2330      	movs	r3, #48	; 0x30
 8005f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f50:	2302      	movs	r3, #2
 8005f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f60:	f107 031c 	add.w	r3, r7, #28
 8005f64:	4619      	mov	r1, r3
 8005f66:	483f      	ldr	r0, [pc, #252]	; (8006064 <HAL_TIM_MspPostInit+0x1a0>)
 8005f68:	f002 fe28 	bl	8008bbc <HAL_GPIO_Init>
}
 8005f6c:	e06d      	b.n	800604a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a3d      	ldr	r2, [pc, #244]	; (8006068 <HAL_TIM_MspPostInit+0x1a4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d11f      	bne.n	8005fb8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	4a35      	ldr	r2, [pc, #212]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f82:	f043 0308 	orr.w	r3, r3, #8
 8005f86:	6313      	str	r3, [r2, #48]	; 0x30
 8005f88:	4b33      	ldr	r3, [pc, #204]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005f94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4619      	mov	r1, r3
 8005fb0:	482e      	ldr	r0, [pc, #184]	; (800606c <HAL_TIM_MspPostInit+0x1a8>)
 8005fb2:	f002 fe03 	bl	8008bbc <HAL_GPIO_Init>
}
 8005fb6:	e048      	b.n	800604a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <HAL_TIM_MspPostInit+0x1ac>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d11f      	bne.n	8006002 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	4a23      	ldr	r2, [pc, #140]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd2:	4b21      	ldr	r3, [pc, #132]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fec:	2300      	movs	r3, #0
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff4:	f107 031c 	add.w	r3, r7, #28
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	481a      	ldr	r0, [pc, #104]	; (8006064 <HAL_TIM_MspPostInit+0x1a0>)
 8005ffc:	f002 fdde 	bl	8008bbc <HAL_GPIO_Init>
}
 8006000:	e023      	b.n	800604a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <HAL_TIM_MspPostInit+0x1b0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d11e      	bne.n	800604a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	4a10      	ldr	r2, [pc, #64]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 8006016:	f043 0302 	orr.w	r3, r3, #2
 800601a:	6313      	str	r3, [r2, #48]	; 0x30
 800601c:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <HAL_TIM_MspPostInit+0x194>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602e:	2302      	movs	r3, #2
 8006030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006036:	2300      	movs	r3, #0
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800603a:	2303      	movs	r3, #3
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800603e:	f107 031c 	add.w	r3, r7, #28
 8006042:	4619      	mov	r1, r3
 8006044:	4807      	ldr	r0, [pc, #28]	; (8006064 <HAL_TIM_MspPostInit+0x1a0>)
 8006046:	f002 fdb9 	bl	8008bbc <HAL_GPIO_Init>
}
 800604a:	bf00      	nop
 800604c:	3730      	adds	r7, #48	; 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40023800 	.word	0x40023800
 800605c:	40021000 	.word	0x40021000
 8006060:	40000400 	.word	0x40000400
 8006064:	40020400 	.word	0x40020400
 8006068:	40000800 	.word	0x40000800
 800606c:	40020c00 	.word	0x40020c00
 8006070:	40014400 	.word	0x40014400
 8006074:	40014800 	.word	0x40014800

08006078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <HAL_UART_MspInit+0x84>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d12b      	bne.n	80060f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	4b18      	ldr	r3, [pc, #96]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a8:	6413      	str	r3, [r2, #64]	; 0x40
 80060aa:	4b15      	ldr	r3, [pc, #84]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a10      	ldr	r2, [pc, #64]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060c0:	f043 0308 	orr.w	r3, r3, #8
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <HAL_UART_MspInit+0x88>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80060d2:	2360      	movs	r3, #96	; 0x60
 80060d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d6:	2302      	movs	r3, #2
 80060d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060de:	2303      	movs	r3, #3
 80060e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060e2:	2307      	movs	r3, #7
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060e6:	f107 0314 	add.w	r3, r7, #20
 80060ea:	4619      	mov	r1, r3
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <HAL_UART_MspInit+0x8c>)
 80060ee:	f002 fd65 	bl	8008bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80060f2:	bf00      	nop
 80060f4:	3728      	adds	r7, #40	; 0x28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40004400 	.word	0x40004400
 8006100:	40023800 	.word	0x40023800
 8006104:	40020c00 	.word	0x40020c00

08006108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800610c:	e7fe      	b.n	800610c <NMI_Handler+0x4>

0800610e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006112:	e7fe      	b.n	8006112 <HardFault_Handler+0x4>

08006114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006118:	e7fe      	b.n	8006118 <MemManage_Handler+0x4>

0800611a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800611a:	b480      	push	{r7}
 800611c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800611e:	e7fe      	b.n	800611e <BusFault_Handler+0x4>

08006120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006124:	e7fe      	b.n	8006124 <UsageFault_Handler+0x4>

08006126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006154:	f001 fc3e 	bl	80079d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}

0800615c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006160:	4803      	ldr	r0, [pc, #12]	; (8006170 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006162:	f006 ff0e 	bl	800cf82 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006166:	4803      	ldr	r0, [pc, #12]	; (8006174 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006168:	f006 ff0b 	bl	800cf82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800616c:	bf00      	nop
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200359fc 	.word	0x200359fc
 8006174:	20035bf8 	.word	0x20035bf8

08006178 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800617c:	4802      	ldr	r0, [pc, #8]	; (8006188 <SDIO_IRQHandler+0x10>)
 800617e:	f004 ffa7 	bl	800b0d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20035d58 	.word	0x20035d58

0800618c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006190:	4802      	ldr	r0, [pc, #8]	; (800619c <TIM6_DAC_IRQHandler+0x10>)
 8006192:	f006 fef6 	bl	800cf82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006196:	bf00      	nop
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20035cd8 	.word	0x20035cd8

080061a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <TIM7_IRQHandler+0x10>)
 80061a6:	f006 feec 	bl	800cf82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20035e7c 	.word	0x20035e7c

080061b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <DMA2_Stream2_IRQHandler+0x10>)
 80061ba:	f002 fa8b 	bl	80086d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20035e1c 	.word	0x20035e1c

080061c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80061cc:	4802      	ldr	r0, [pc, #8]	; (80061d8 <DMA2_Stream3_IRQHandler+0x10>)
 80061ce:	f002 fa81 	bl	80086d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20035944 	.word	0x20035944

080061dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80061e0:	4802      	ldr	r0, [pc, #8]	; (80061ec <DMA2_Stream6_IRQHandler+0x10>)
 80061e2:	f002 fa77 	bl	80086d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20035c78 	.word	0x20035c78

080061f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <_sbrk+0x5c>)
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <_sbrk+0x60>)
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <_sbrk+0x64>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <_sbrk+0x64>)
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <_sbrk+0x68>)
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <_sbrk+0x64>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	429a      	cmp	r2, r3
 800621e:	d207      	bcs.n	8006230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006220:	f00d f944 	bl	80134ac <__errno>
 8006224:	4602      	mov	r2, r0
 8006226:	230c      	movs	r3, #12
 8006228:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	e009      	b.n	8006244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <_sbrk+0x64>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <_sbrk+0x64>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	4a05      	ldr	r2, [pc, #20]	; (8006254 <_sbrk+0x64>)
 8006240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20050000 	.word	0x20050000
 8006250:	00000800 	.word	0x00000800
 8006254:	200002ac 	.word	0x200002ac
 8006258:	20037fd0 	.word	0x20037fd0

0800625c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <SystemInit+0x28>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	4a07      	ldr	r2, [pc, #28]	; (8006284 <SystemInit+0x28>)
 8006268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800626c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <SystemInit+0x28>)
 8006272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006276:	609a      	str	r2, [r3, #8]
#endif
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
	lcd_clear();
 800628c:	f7fa ff08 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006290:	2100      	movs	r1, #0
 8006292:	2000      	movs	r0, #0
 8006294:	f7fa ff14 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006298:	4814      	ldr	r0, [pc, #80]	; (80062ec <batteryLowMode+0x64>)
 800629a:	f7fa ff3b 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800629e:	2101      	movs	r1, #1
 80062a0:	2000      	movs	r0, #0
 80062a2:	f7fa ff0d 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80062a6:	4812      	ldr	r0, [pc, #72]	; (80062f0 <batteryLowMode+0x68>)
 80062a8:	f7fa ff34 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80062ac:	2152      	movs	r1, #82	; 0x52
 80062ae:	4811      	ldr	r0, [pc, #68]	; (80062f4 <batteryLowMode+0x6c>)
 80062b0:	f7fb fe14 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80062b4:	2064      	movs	r0, #100	; 0x64
 80062b6:	f001 fbad 	bl	8007a14 <HAL_Delay>
		led.fullColor('Y');
 80062ba:	2159      	movs	r1, #89	; 0x59
 80062bc:	480d      	ldr	r0, [pc, #52]	; (80062f4 <batteryLowMode+0x6c>)
 80062be:	f7fb fe0d 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80062c2:	2064      	movs	r0, #100	; 0x64
 80062c4:	f001 fba6 	bl	8007a14 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80062c8:	480b      	ldr	r0, [pc, #44]	; (80062f8 <batteryLowMode+0x70>)
 80062ca:	f7fb fda3 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0e6      	beq.n	80062ac <batteryLowMode+0x24>
			HAL_Delay(500);
 80062de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062e2:	f001 fb97 	bl	8007a14 <HAL_Delay>
			break;
 80062e6:	bf00      	nop
		}
	}
}
 80062e8:	bf00      	nop
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08017c40 	.word	0x08017c40
 80062f0:	08017c48 	.word	0x08017c48
 80062f4:	200005bc 	.word	0x200005bc
 80062f8:	200005b0 	.word	0x200005b0

080062fc <cppInit>:

void cppInit(void)
{
 80062fc:	b598      	push	{r3, r4, r7, lr}
 80062fe:	af00      	add	r7, sp, #0
	lcd_init();
 8006300:	f7fa fe8a 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006304:	483f      	ldr	r0, [pc, #252]	; (8006404 <cppInit+0x108>)
 8006306:	f7fd fd9d 	bl	8003e44 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800630a:	2064      	movs	r0, #100	; 0x64
 800630c:	f001 fb82 	bl	8007a14 <HAL_Delay>
	power_sensor.updateValues();
 8006310:	483c      	ldr	r0, [pc, #240]	; (8006404 <cppInit+0x108>)
 8006312:	f7fd fda5 	bl	8003e60 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006316:	f7fa fec3 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800631a:	2100      	movs	r1, #0
 800631c:	2000      	movs	r0, #0
 800631e:	f7fa fecf 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006322:	4839      	ldr	r0, [pc, #228]	; (8006408 <cppInit+0x10c>)
 8006324:	f7fa fef6 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006328:	2101      	movs	r1, #1
 800632a:	2000      	movs	r0, #0
 800632c:	f7fa fec8 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006330:	4834      	ldr	r0, [pc, #208]	; (8006404 <cppInit+0x108>)
 8006332:	f7fd fdbf 	bl	8003eb4 <_ZN11PowerSensor17getButteryVoltageEv>
 8006336:	ee10 3a10 	vmov	r3, s0
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f91c 	bl	8000578 <__aeabi_f2d>
 8006340:	4603      	mov	r3, r0
 8006342:	460c      	mov	r4, r1
 8006344:	461a      	mov	r2, r3
 8006346:	4623      	mov	r3, r4
 8006348:	4830      	ldr	r0, [pc, #192]	; (800640c <cppInit+0x110>)
 800634a:	f7fa fee3 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800634e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006352:	f001 fb5f 	bl	8007a14 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8006356:	482b      	ldr	r0, [pc, #172]	; (8006404 <cppInit+0x108>)
 8006358:	f7fd fdbe 	bl	8003ed8 <_ZN11PowerSensor12butteryCheckEv>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <cppInit+0x6a>
 8006362:	f7ff ff91 	bl	8006288 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006366:	482a      	ldr	r0, [pc, #168]	; (8006410 <cppInit+0x114>)
 8006368:	f7fc ffbe 	bl	80032e8 <_ZN6Logger10sdCardInitEv>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <cppInit+0x86>
		led.fullColor('G');
 8006372:	2147      	movs	r1, #71	; 0x47
 8006374:	4827      	ldr	r0, [pc, #156]	; (8006414 <cppInit+0x118>)
 8006376:	f7fb fdb1 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800637a:	2064      	movs	r0, #100	; 0x64
 800637c:	f001 fb4a 	bl	8007a14 <HAL_Delay>
 8006380:	e006      	b.n	8006390 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006382:	2152      	movs	r1, #82	; 0x52
 8006384:	4823      	ldr	r0, [pc, #140]	; (8006414 <cppInit+0x118>)
 8006386:	f7fb fda9 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800638a:	2064      	movs	r0, #100	; 0x64
 800638c:	f001 fb42 	bl	8007a14 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006390:	4821      	ldr	r0, [pc, #132]	; (8006418 <cppInit+0x11c>)
 8006392:	f7fb feff 	bl	8002194 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006396:	4821      	ldr	r0, [pc, #132]	; (800641c <cppInit+0x120>)
 8006398:	f7fd f9ea 	bl	8003770 <_ZN5Motor4initEv>
	encoder.init();
 800639c:	4820      	ldr	r0, [pc, #128]	; (8006420 <cppInit+0x124>)
 800639e:	f7fa ff01 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 80063a2:	4820      	ldr	r0, [pc, #128]	; (8006424 <cppInit+0x128>)
 80063a4:	f7fb fb5a 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 80063a8:	481f      	ldr	r0, [pc, #124]	; (8006428 <cppInit+0x12c>)
 80063aa:	f7fc fcd5 	bl	8002d58 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80063ae:	481a      	ldr	r0, [pc, #104]	; (8006418 <cppInit+0x11c>)
 80063b0:	f7fc f830 	bl	8002414 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80063b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063b8:	f001 fb2c 	bl	8007a14 <HAL_Delay>

	led.fullColor('M');
 80063bc:	214d      	movs	r1, #77	; 0x4d
 80063be:	4815      	ldr	r0, [pc, #84]	; (8006414 <cppInit+0x118>)
 80063c0:	f7fb fd8c 	bl	8001edc <_ZN3LED9fullColorEc>
	imu.calibration();
 80063c4:	4817      	ldr	r0, [pc, #92]	; (8006424 <cppInit+0x128>)
 80063c6:	f7fb fc11 	bl	8001bec <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80063ca:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800642c <cppInit+0x130>
 80063ce:	eddf 0a18 	vldr	s1, [pc, #96]	; 8006430 <cppInit+0x134>
 80063d2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006434 <cppInit+0x138>
 80063d6:	4818      	ldr	r0, [pc, #96]	; (8006438 <cppInit+0x13c>)
 80063d8:	f7fe f99a 	bl	8004710 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80063dc:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800643c <cppInit+0x140>
 80063e0:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006440 <cppInit+0x144>
 80063e4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006444 <cppInit+0x148>
 80063e8:	4813      	ldr	r0, [pc, #76]	; (8006438 <cppInit+0x13c>)
 80063ea:	f7fe f9aa 	bl	8004742 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 80063ee:	480c      	ldr	r0, [pc, #48]	; (8006420 <cppInit+0x124>)
 80063f0:	f7fb f822 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80063f4:	4814      	ldr	r0, [pc, #80]	; (8006448 <cppInit+0x14c>)
 80063f6:	f7fd fbf3 	bl	8003be0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80063fa:	4814      	ldr	r0, [pc, #80]	; (800644c <cppInit+0x150>)
 80063fc:	f7fd fc8a 	bl	8003d14 <_ZN13PathFollowing4initEv>

}
 8006400:	bf00      	nop
 8006402:	bd98      	pop	{r3, r4, r7, pc}
 8006404:	200005c0 	.word	0x200005c0
 8006408:	08017c4c 	.word	0x08017c4c
 800640c:	08017c54 	.word	0x08017c54
 8006410:	200005e0 	.word	0x200005e0
 8006414:	200005bc 	.word	0x200005bc
 8006418:	200002b0 	.word	0x200002b0
 800641c:	200005b8 	.word	0x200005b8
 8006420:	20015da8 	.word	0x20015da8
 8006424:	200005cc 	.word	0x200005cc
 8006428:	20015e40 	.word	0x20015e40
 800642c:	3cceca68 	.word	0x3cceca68
 8006430:	4180f06f 	.word	0x4180f06f
 8006434:	3fea2d0e 	.word	0x3fea2d0e
 8006438:	20015dc4 	.word	0x20015dc4
 800643c:	3ab7dacd 	.word	0x3ab7dacd
 8006440:	3f5e3fbc 	.word	0x3f5e3fbc
 8006444:	3d8eefa2 	.word	0x3d8eefa2
 8006448:	20015e00 	.word	0x20015e00
 800644c:	2001be90 	.word	0x2001be90

08006450 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006454:	4819      	ldr	r0, [pc, #100]	; (80064bc <cppFlip1ms+0x6c>)
 8006456:	f7fb fefb 	bl	8002250 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800645a:	4819      	ldr	r0, [pc, #100]	; (80064c0 <cppFlip1ms+0x70>)
 800645c:	f7fb fb24 	bl	8001aa8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8006460:	4818      	ldr	r0, [pc, #96]	; (80064c4 <cppFlip1ms+0x74>)
 8006462:	f7fa fec1 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8006466:	4818      	ldr	r0, [pc, #96]	; (80064c8 <cppFlip1ms+0x78>)
 8006468:	f7fc fd0e 	bl	8002e88 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800646c:	4817      	ldr	r0, [pc, #92]	; (80064cc <cppFlip1ms+0x7c>)
 800646e:	f7fe f981 	bl	8004774 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006472:	4817      	ldr	r0, [pc, #92]	; (80064d0 <cppFlip1ms+0x80>)
 8006474:	f7fd fb98 	bl	8003ba8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8006478:	4816      	ldr	r0, [pc, #88]	; (80064d4 <cppFlip1ms+0x84>)
 800647a:	f7fd fdc5 	bl	8004008 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800647e:	4816      	ldr	r0, [pc, #88]	; (80064d8 <cppFlip1ms+0x88>)
 8006480:	f7fd f988 	bl	8003794 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <cppFlip1ms+0x8c>)
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	4b13      	ldr	r3, [pc, #76]	; (80064dc <cppFlip1ms+0x8c>)
 800648e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <cppFlip1ms+0x8c>)
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d90c      	bls.n	80064b2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006498:	4809      	ldr	r0, [pc, #36]	; (80064c0 <cppFlip1ms+0x70>)
 800649a:	f7fb fb5d 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 800649e:	eef0 7a40 	vmov.f32	s15, s0
 80064a2:	eeb0 0a67 	vmov.f32	s0, s15
 80064a6:	480e      	ldr	r0, [pc, #56]	; (80064e0 <cppFlip1ms+0x90>)
 80064a8:	f7fd ff04 	bl	80042b4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <cppFlip1ms+0x8c>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 80064b2:	4804      	ldr	r0, [pc, #16]	; (80064c4 <cppFlip1ms+0x74>)
 80064b4:	f7fa ffce 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	200002b0 	.word	0x200002b0
 80064c0:	200005cc 	.word	0x200005cc
 80064c4:	20015da8 	.word	0x20015da8
 80064c8:	20015e40 	.word	0x20015e40
 80064cc:	20015dc4 	.word	0x20015dc4
 80064d0:	20015e00 	.word	0x20015e00
 80064d4:	200005a8 	.word	0x200005a8
 80064d8:	200005b8 	.word	0x200005b8
 80064dc:	200335ba 	.word	0x200335ba
 80064e0:	2001bc84 	.word	0x2001bc84

080064e4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80064e8:	4803      	ldr	r0, [pc, #12]	; (80064f8 <cppFlip100ns+0x14>)
 80064ea:	f7fb fe63 	bl	80021b4 <_ZN10LineSensor17storeSensorValuesEv>
	line_trace.flip100ns();
 80064ee:	4803      	ldr	r0, [pc, #12]	; (80064fc <cppFlip100ns+0x18>)
 80064f0:	f7fc fd30 	bl	8002f54 <_ZN9LineTrace9flip100nsEv>
}
 80064f4:	bf00      	nop
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200002b0 	.word	0x200002b0
 80064fc:	20015e40 	.word	0x20015e40

08006500 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006504:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <cppFlip10ms+0x30>)
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	4b08      	ldr	r3, [pc, #32]	; (8006530 <cppFlip10ms+0x30>)
 800650e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <cppFlip10ms+0x30>)
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d905      	bls.n	8006524 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006518:	4806      	ldr	r0, [pc, #24]	; (8006534 <cppFlip10ms+0x34>)
 800651a:	f7fd ff07 	bl	800432c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <cppFlip10ms+0x30>)
 8006520:	2200      	movs	r2, #0
 8006522:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <cppFlip10ms+0x30>)
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <cppFlip10ms+0x38>)
 800652a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800652c:	bf00      	nop
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200335bc 	.word	0x200335bc
 8006534:	2001bc84 	.word	0x2001bc84
 8006538:	200335b8 	.word	0x200335b8
 800653c:	00000000 	.word	0x00000000

08006540 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8006540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006544:	b08b      	sub	sp, #44	; 0x2c
 8006546:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8006548:	48bf      	ldr	r0, [pc, #764]	; (8006848 <cppLoop+0x308>)
 800654a:	f7fd fcf7 	bl	8003f3c <_ZN12RotarySwitch8getValueEv>
 800654e:	4603      	mov	r3, r0
 8006550:	2b0f      	cmp	r3, #15
 8006552:	f201 80fb 	bhi.w	800774c <cppLoop+0x120c>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <cppLoop+0x1c>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	0800659d 	.word	0x0800659d
 8006560:	08006a77 	.word	0x08006a77
 8006564:	08006af3 	.word	0x08006af3
 8006568:	08006bc1 	.word	0x08006bc1
 800656c:	08006c71 	.word	0x08006c71
 8006570:	08006cff 	.word	0x08006cff
 8006574:	08006dc5 	.word	0x08006dc5
 8006578:	08006ed9 	.word	0x08006ed9
 800657c:	08006f79 	.word	0x08006f79
 8006580:	080074ad 	.word	0x080074ad
 8006584:	08007549 	.word	0x08007549
 8006588:	080075e3 	.word	0x080075e3
 800658c:	0800764b 	.word	0x0800764b
 8006590:	080076cf 	.word	0x080076cf
 8006594:	080076f9 	.word	0x080076f9
 8006598:	08007723 	.word	0x08007723
	static int16_t selector;

	case 0:
		led.fullColor('R');
 800659c:	2152      	movs	r1, #82	; 0x52
 800659e:	48ab      	ldr	r0, [pc, #684]	; (800684c <cppLoop+0x30c>)
 80065a0:	f7fb fc9c 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80065a4:	f7fa fd7c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80065a8:	2100      	movs	r1, #0
 80065aa:	2000      	movs	r0, #0
 80065ac:	f7fa fd88 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80065b0:	48a7      	ldr	r0, [pc, #668]	; (8006850 <cppLoop+0x310>)
 80065b2:	f7fc fc1e 	bl	8002df2 <_ZN9LineTrace5getKpEv>
 80065b6:	eeb0 7a40 	vmov.f32	s14, s0
 80065ba:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8006854 <cppLoop+0x314>
 80065be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c2:	ee17 0a90 	vmov	r0, s15
 80065c6:	f7f9 ffd7 	bl	8000578 <__aeabi_f2d>
 80065ca:	4603      	mov	r3, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	461a      	mov	r2, r3
 80065d0:	4623      	mov	r3, r4
 80065d2:	48a1      	ldr	r0, [pc, #644]	; (8006858 <cppLoop+0x318>)
 80065d4:	f7fa fd9e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80065d8:	2101      	movs	r1, #1
 80065da:	2000      	movs	r0, #0
 80065dc:	f7fa fd70 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80065e0:	489b      	ldr	r0, [pc, #620]	; (8006850 <cppLoop+0x310>)
 80065e2:	f7fc fc15 	bl	8002e10 <_ZN9LineTrace5getKiEv>
 80065e6:	eeb0 7a40 	vmov.f32	s14, s0
 80065ea:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800685c <cppLoop+0x31c>
 80065ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f2:	ee17 0a90 	vmov	r0, s15
 80065f6:	f7f9 ffbf 	bl	8000578 <__aeabi_f2d>
 80065fa:	4605      	mov	r5, r0
 80065fc:	460e      	mov	r6, r1
 80065fe:	4894      	ldr	r0, [pc, #592]	; (8006850 <cppLoop+0x310>)
 8006600:	f7fc fc15 	bl	8002e2e <_ZN9LineTrace5getKdEv>
 8006604:	eeb0 7a40 	vmov.f32	s14, s0
 8006608:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006860 <cppLoop+0x320>
 800660c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006610:	ee17 0a90 	vmov	r0, s15
 8006614:	f7f9 ffb0 	bl	8000578 <__aeabi_f2d>
 8006618:	4603      	mov	r3, r0
 800661a:	460c      	mov	r4, r1
 800661c:	e9cd 3400 	strd	r3, r4, [sp]
 8006620:	462a      	mov	r2, r5
 8006622:	4633      	mov	r3, r6
 8006624:	488f      	ldr	r0, [pc, #572]	; (8006864 <cppLoop+0x324>)
 8006626:	f7fa fd75 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 800662a:	4b8f      	ldr	r3, [pc, #572]	; (8006868 <cppLoop+0x328>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f3bf 8f5b 	dmb	ish
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d015      	beq.n	8006672 <cppLoop+0x132>
 8006646:	4888      	ldr	r0, [pc, #544]	; (8006868 <cppLoop+0x328>)
 8006648:	f00b fec9 	bl	80123de <__cxa_guard_acquire>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <cppLoop+0x132>
 800665c:	487c      	ldr	r0, [pc, #496]	; (8006850 <cppLoop+0x310>)
 800665e:	f7fc fbc8 	bl	8002df2 <_ZN9LineTrace5getKpEv>
 8006662:	eef0 7a40 	vmov.f32	s15, s0
 8006666:	4b81      	ldr	r3, [pc, #516]	; (800686c <cppLoop+0x32c>)
 8006668:	edc3 7a00 	vstr	s15, [r3]
 800666c:	487e      	ldr	r0, [pc, #504]	; (8006868 <cppLoop+0x328>)
 800666e:	f00b fec2 	bl	80123f6 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8006672:	4b7f      	ldr	r3, [pc, #508]	; (8006870 <cppLoop+0x330>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f3bf 8f5b 	dmb	ish
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d015      	beq.n	80066ba <cppLoop+0x17a>
 800668e:	4878      	ldr	r0, [pc, #480]	; (8006870 <cppLoop+0x330>)
 8006690:	f00b fea5 	bl	80123de <__cxa_guard_acquire>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <cppLoop+0x17a>
 80066a4:	486a      	ldr	r0, [pc, #424]	; (8006850 <cppLoop+0x310>)
 80066a6:	f7fc fbb3 	bl	8002e10 <_ZN9LineTrace5getKiEv>
 80066aa:	eef0 7a40 	vmov.f32	s15, s0
 80066ae:	4b71      	ldr	r3, [pc, #452]	; (8006874 <cppLoop+0x334>)
 80066b0:	edc3 7a00 	vstr	s15, [r3]
 80066b4:	486e      	ldr	r0, [pc, #440]	; (8006870 <cppLoop+0x330>)
 80066b6:	f00b fe9e 	bl	80123f6 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 80066ba:	4b6f      	ldr	r3, [pc, #444]	; (8006878 <cppLoop+0x338>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f3bf 8f5b 	dmb	ish
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d015      	beq.n	8006702 <cppLoop+0x1c2>
 80066d6:	4868      	ldr	r0, [pc, #416]	; (8006878 <cppLoop+0x338>)
 80066d8:	f00b fe81 	bl	80123de <__cxa_guard_acquire>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <cppLoop+0x1c2>
 80066ec:	4858      	ldr	r0, [pc, #352]	; (8006850 <cppLoop+0x310>)
 80066ee:	f7fc fb9e 	bl	8002e2e <_ZN9LineTrace5getKdEv>
 80066f2:	eef0 7a40 	vmov.f32	s15, s0
 80066f6:	4b61      	ldr	r3, [pc, #388]	; (800687c <cppLoop+0x33c>)
 80066f8:	edc3 7a00 	vstr	s15, [r3]
 80066fc:	485e      	ldr	r0, [pc, #376]	; (8006878 <cppLoop+0x338>)
 80066fe:	f00b fe7a 	bl	80123f6 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006702:	485f      	ldr	r0, [pc, #380]	; (8006880 <cppLoop+0x340>)
 8006704:	f7fb fb86 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006708:	4603      	mov	r3, r0
 800670a:	2b08      	cmp	r3, #8
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d022      	beq.n	800675e <cppLoop+0x21e>
			led.LR(-1, 1);
 8006718:	2201      	movs	r2, #1
 800671a:	f04f 31ff 	mov.w	r1, #4294967295
 800671e:	484b      	ldr	r0, [pc, #300]	; (800684c <cppLoop+0x30c>)
 8006720:	f7fb fc98 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006724:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006728:	f001 f974 	bl	8007a14 <HAL_Delay>

			selector++;
 800672c:	4b55      	ldr	r3, [pc, #340]	; (8006884 <cppLoop+0x344>)
 800672e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006732:	b29b      	uxth	r3, r3
 8006734:	3301      	adds	r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	b21a      	sxth	r2, r3
 800673a:	4b52      	ldr	r3, [pc, #328]	; (8006884 <cppLoop+0x344>)
 800673c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800673e:	4b51      	ldr	r3, [pc, #324]	; (8006884 <cppLoop+0x344>)
 8006740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006744:	2b02      	cmp	r3, #2
 8006746:	dd02      	ble.n	800674e <cppLoop+0x20e>
 8006748:	4b4e      	ldr	r3, [pc, #312]	; (8006884 <cppLoop+0x344>)
 800674a:	2200      	movs	r2, #0
 800674c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800674e:	2200      	movs	r2, #0
 8006750:	f04f 31ff 	mov.w	r1, #4294967295
 8006754:	483d      	ldr	r0, [pc, #244]	; (800684c <cppLoop+0x30c>)
 8006756:	f7fb fc7d 	bl	8002054 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800675a:	f000 bff9 	b.w	8007750 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_R){
 800675e:	4848      	ldr	r0, [pc, #288]	; (8006880 <cppLoop+0x340>)
 8006760:	f7fb fb58 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006764:	4603      	mov	r3, r0
 8006766:	2b10      	cmp	r3, #16
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8089 	beq.w	8006888 <cppLoop+0x348>
			led.LR(-1, 1);
 8006776:	2201      	movs	r2, #1
 8006778:	f04f 31ff 	mov.w	r1, #4294967295
 800677c:	4833      	ldr	r0, [pc, #204]	; (800684c <cppLoop+0x30c>)
 800677e:	f7fb fc69 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006782:	2064      	movs	r0, #100	; 0x64
 8006784:	f001 f946 	bl	8007a14 <HAL_Delay>
			if(selector == 0){
 8006788:	4b3e      	ldr	r3, [pc, #248]	; (8006884 <cppLoop+0x344>)
 800678a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d113      	bne.n	80067ba <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 8006792:	4b36      	ldr	r3, [pc, #216]	; (800686c <cppLoop+0x32c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7f9 feee 	bl	8000578 <__aeabi_f2d>
 800679c:	a324      	add	r3, pc, #144	; (adr r3, 8006830 <cppLoop+0x2f0>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fd8b 	bl	80002bc <__adddf3>
 80067a6:	4603      	mov	r3, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	4618      	mov	r0, r3
 80067ac:	4621      	mov	r1, r4
 80067ae:	f7fa fa33 	bl	8000c18 <__aeabi_d2f>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b2d      	ldr	r3, [pc, #180]	; (800686c <cppLoop+0x32c>)
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e02b      	b.n	8006812 <cppLoop+0x2d2>
			else if(selector == 1){
 80067ba:	4b32      	ldr	r3, [pc, #200]	; (8006884 <cppLoop+0x344>)
 80067bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d113      	bne.n	80067ec <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 80067c4:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <cppLoop+0x334>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7f9 fed5 	bl	8000578 <__aeabi_f2d>
 80067ce:	a31a      	add	r3, pc, #104	; (adr r3, 8006838 <cppLoop+0x2f8>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 fd72 	bl	80002bc <__adddf3>
 80067d8:	4603      	mov	r3, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	4618      	mov	r0, r3
 80067de:	4621      	mov	r1, r4
 80067e0:	f7fa fa1a 	bl	8000c18 <__aeabi_d2f>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <cppLoop+0x334>)
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e012      	b.n	8006812 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <cppLoop+0x33c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7f9 fec1 	bl	8000578 <__aeabi_f2d>
 80067f6:	a312      	add	r3, pc, #72	; (adr r3, 8006840 <cppLoop+0x300>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f7f9 fd5e 	bl	80002bc <__adddf3>
 8006800:	4603      	mov	r3, r0
 8006802:	460c      	mov	r4, r1
 8006804:	4618      	mov	r0, r3
 8006806:	4621      	mov	r1, r4
 8006808:	f7fa fa06 	bl	8000c18 <__aeabi_d2f>
 800680c:	4602      	mov	r2, r0
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <cppLoop+0x33c>)
 8006810:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006812:	2152      	movs	r1, #82	; 0x52
 8006814:	480d      	ldr	r0, [pc, #52]	; (800684c <cppLoop+0x30c>)
 8006816:	f7fb fb61 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800681a:	2200      	movs	r2, #0
 800681c:	f04f 31ff 	mov.w	r1, #4294967295
 8006820:	480a      	ldr	r0, [pc, #40]	; (800684c <cppLoop+0x30c>)
 8006822:	f7fb fc17 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8006826:	f000 bf93 	b.w	8007750 <cppLoop+0x1210>
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w
 8006830:	88e368f1 	.word	0x88e368f1
 8006834:	3ee4f8b5 	.word	0x3ee4f8b5
 8006838:	eb1c432d 	.word	0xeb1c432d
 800683c:	3f1a36e2 	.word	0x3f1a36e2
 8006840:	a0b5ed8d 	.word	0xa0b5ed8d
 8006844:	3eb0c6f7 	.word	0x3eb0c6f7
 8006848:	200005b4 	.word	0x200005b4
 800684c:	200005bc 	.word	0x200005bc
 8006850:	20015e40 	.word	0x20015e40
 8006854:	447a0000 	.word	0x447a0000
 8006858:	08017c58 	.word	0x08017c58
 800685c:	42c80000 	.word	0x42c80000
 8006860:	461c4000 	.word	0x461c4000
 8006864:	08017c64 	.word	0x08017c64
 8006868:	200335c4 	.word	0x200335c4
 800686c:	200335c0 	.word	0x200335c0
 8006870:	200335cc 	.word	0x200335cc
 8006874:	200335c8 	.word	0x200335c8
 8006878:	200335d4 	.word	0x200335d4
 800687c:	200335d0 	.word	0x200335d0
 8006880:	200005b0 	.word	0x200005b0
 8006884:	200335be 	.word	0x200335be
		else if(joy_stick.getValue() == JOY_L){
 8006888:	48bf      	ldr	r0, [pc, #764]	; (8006b88 <cppLoop+0x648>)
 800688a:	f7fb fac3 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d059      	beq.n	8006952 <cppLoop+0x412>
			led.LR(-1, 1);
 800689e:	2201      	movs	r2, #1
 80068a0:	f04f 31ff 	mov.w	r1, #4294967295
 80068a4:	48b9      	ldr	r0, [pc, #740]	; (8006b8c <cppLoop+0x64c>)
 80068a6:	f7fb fbd5 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80068aa:	2064      	movs	r0, #100	; 0x64
 80068ac:	f001 f8b2 	bl	8007a14 <HAL_Delay>
			if(selector == 0){
 80068b0:	4bb7      	ldr	r3, [pc, #732]	; (8006b90 <cppLoop+0x650>)
 80068b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d113      	bne.n	80068e2 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 80068ba:	4bb6      	ldr	r3, [pc, #728]	; (8006b94 <cppLoop+0x654>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 fe5a 	bl	8000578 <__aeabi_f2d>
 80068c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8006b70 <cppLoop+0x630>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fcf5 	bl	80002b8 <__aeabi_dsub>
 80068ce:	4603      	mov	r3, r0
 80068d0:	460c      	mov	r4, r1
 80068d2:	4618      	mov	r0, r3
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7fa f99f 	bl	8000c18 <__aeabi_d2f>
 80068da:	4602      	mov	r2, r0
 80068dc:	4bad      	ldr	r3, [pc, #692]	; (8006b94 <cppLoop+0x654>)
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e02b      	b.n	800693a <cppLoop+0x3fa>
			else if(selector == 1){
 80068e2:	4bab      	ldr	r3, [pc, #684]	; (8006b90 <cppLoop+0x650>)
 80068e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d113      	bne.n	8006914 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 80068ec:	4baa      	ldr	r3, [pc, #680]	; (8006b98 <cppLoop+0x658>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7f9 fe41 	bl	8000578 <__aeabi_f2d>
 80068f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006b78 <cppLoop+0x638>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f7f9 fcdc 	bl	80002b8 <__aeabi_dsub>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	4618      	mov	r0, r3
 8006906:	4621      	mov	r1, r4
 8006908:	f7fa f986 	bl	8000c18 <__aeabi_d2f>
 800690c:	4602      	mov	r2, r0
 800690e:	4ba2      	ldr	r3, [pc, #648]	; (8006b98 <cppLoop+0x658>)
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e012      	b.n	800693a <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006914:	4ba1      	ldr	r3, [pc, #644]	; (8006b9c <cppLoop+0x65c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fe2d 	bl	8000578 <__aeabi_f2d>
 800691e:	a398      	add	r3, pc, #608	; (adr r3, 8006b80 <cppLoop+0x640>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fcc8 	bl	80002b8 <__aeabi_dsub>
 8006928:	4603      	mov	r3, r0
 800692a:	460c      	mov	r4, r1
 800692c:	4618      	mov	r0, r3
 800692e:	4621      	mov	r1, r4
 8006930:	f7fa f972 	bl	8000c18 <__aeabi_d2f>
 8006934:	4602      	mov	r2, r0
 8006936:	4b99      	ldr	r3, [pc, #612]	; (8006b9c <cppLoop+0x65c>)
 8006938:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800693a:	2152      	movs	r1, #82	; 0x52
 800693c:	4893      	ldr	r0, [pc, #588]	; (8006b8c <cppLoop+0x64c>)
 800693e:	f7fb facd 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006942:	2200      	movs	r2, #0
 8006944:	f04f 31ff 	mov.w	r1, #4294967295
 8006948:	4890      	ldr	r0, [pc, #576]	; (8006b8c <cppLoop+0x64c>)
 800694a:	f7fb fb83 	bl	8002054 <_ZN3LED2LREaa>
		break;
 800694e:	f000 beff 	b.w	8007750 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_D){
 8006952:	488d      	ldr	r0, [pc, #564]	; (8006b88 <cppLoop+0x648>)
 8006954:	f7fb fa5e 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006958:	4603      	mov	r3, r0
 800695a:	2b04      	cmp	r3, #4
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03e      	beq.n	80069e6 <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006968:	2201      	movs	r2, #1
 800696a:	f04f 31ff 	mov.w	r1, #4294967295
 800696e:	4887      	ldr	r0, [pc, #540]	; (8006b8c <cppLoop+0x64c>)
 8006970:	f7fb fb70 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006974:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006978:	f001 f84c 	bl	8007a14 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800697c:	f107 031c 	add.w	r3, r7, #28
 8006980:	2201      	movs	r2, #1
 8006982:	4987      	ldr	r1, [pc, #540]	; (8006ba0 <cppLoop+0x660>)
 8006984:	4887      	ldr	r0, [pc, #540]	; (8006ba4 <cppLoop+0x664>)
 8006986:	f7fa fe95 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800698a:	f107 0318 	add.w	r3, r7, #24
 800698e:	2201      	movs	r2, #1
 8006990:	4985      	ldr	r1, [pc, #532]	; (8006ba8 <cppLoop+0x668>)
 8006992:	4884      	ldr	r0, [pc, #528]	; (8006ba4 <cppLoop+0x664>)
 8006994:	f7fa fe8e 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	2201      	movs	r2, #1
 800699e:	4983      	ldr	r1, [pc, #524]	; (8006bac <cppLoop+0x66c>)
 80069a0:	4880      	ldr	r0, [pc, #512]	; (8006ba4 <cppLoop+0x664>)
 80069a2:	f7fa fe87 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 80069a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80069aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80069ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80069b2:	eeb0 1a66 	vmov.f32	s2, s13
 80069b6:	eef0 0a47 	vmov.f32	s1, s14
 80069ba:	eeb0 0a67 	vmov.f32	s0, s15
 80069be:	487c      	ldr	r0, [pc, #496]	; (8006bb0 <cppLoop+0x670>)
 80069c0:	f7fc f9fe 	bl	8002dc0 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4a73      	ldr	r2, [pc, #460]	; (8006b94 <cppLoop+0x654>)
 80069c8:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4a72      	ldr	r2, [pc, #456]	; (8006b98 <cppLoop+0x658>)
 80069ce:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4a72      	ldr	r2, [pc, #456]	; (8006b9c <cppLoop+0x65c>)
 80069d4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80069d6:	2200      	movs	r2, #0
 80069d8:	f04f 31ff 	mov.w	r1, #4294967295
 80069dc:	486b      	ldr	r0, [pc, #428]	; (8006b8c <cppLoop+0x64c>)
 80069de:	f7fb fb39 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80069e2:	f000 beb5 	b.w	8007750 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_C){
 80069e6:	4868      	ldr	r0, [pc, #416]	; (8006b88 <cppLoop+0x648>)
 80069e8:	f7fb fa14 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 86a9 	beq.w	8007750 <cppLoop+0x1210>
			led.LR(-1, 1);
 80069fe:	2201      	movs	r2, #1
 8006a00:	f04f 31ff 	mov.w	r1, #4294967295
 8006a04:	4861      	ldr	r0, [pc, #388]	; (8006b8c <cppLoop+0x64c>)
 8006a06:	f7fb fb25 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a0e:	f001 f801 	bl	8007a14 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006a12:	2300      	movs	r3, #0
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4b5f      	ldr	r3, [pc, #380]	; (8006b94 <cppLoop+0x654>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4961      	ldr	r1, [pc, #388]	; (8006ba0 <cppLoop+0x660>)
 8006a1c:	4861      	ldr	r0, [pc, #388]	; (8006ba4 <cppLoop+0x664>)
 8006a1e:	f7fa fde3 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006a22:	2300      	movs	r3, #0
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4b5c      	ldr	r3, [pc, #368]	; (8006b98 <cppLoop+0x658>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	495f      	ldr	r1, [pc, #380]	; (8006ba8 <cppLoop+0x668>)
 8006a2c:	485d      	ldr	r0, [pc, #372]	; (8006ba4 <cppLoop+0x664>)
 8006a2e:	f7fa fddb 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <cppLoop+0x65c>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	495c      	ldr	r1, [pc, #368]	; (8006bac <cppLoop+0x66c>)
 8006a3c:	4859      	ldr	r0, [pc, #356]	; (8006ba4 <cppLoop+0x664>)
 8006a3e:	f7fa fdd3 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006a42:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <cppLoop+0x654>)
 8006a44:	edd3 7a00 	vldr	s15, [r3]
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <cppLoop+0x658>)
 8006a4a:	ed93 7a00 	vldr	s14, [r3]
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <cppLoop+0x65c>)
 8006a50:	edd3 6a00 	vldr	s13, [r3]
 8006a54:	eeb0 1a66 	vmov.f32	s2, s13
 8006a58:	eef0 0a47 	vmov.f32	s1, s14
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	4853      	ldr	r0, [pc, #332]	; (8006bb0 <cppLoop+0x670>)
 8006a62:	f7fc f9ad 	bl	8002dc0 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006a66:	2200      	movs	r2, #0
 8006a68:	f04f 31ff 	mov.w	r1, #4294967295
 8006a6c:	4847      	ldr	r0, [pc, #284]	; (8006b8c <cppLoop+0x64c>)
 8006a6e:	f7fb faf1 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8006a72:	f000 be6d 	b.w	8007750 <cppLoop+0x1210>

	case 1:
		led.fullColor('B');
 8006a76:	2142      	movs	r1, #66	; 0x42
 8006a78:	4844      	ldr	r0, [pc, #272]	; (8006b8c <cppLoop+0x64c>)
 8006a7a:	f7fb fa2f 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a7e:	f7fa fb0f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a82:	2100      	movs	r1, #0
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7fa fb1b 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006a8a:	484a      	ldr	r0, [pc, #296]	; (8006bb4 <cppLoop+0x674>)
 8006a8c:	f7fa fb42 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a90:	2101      	movs	r1, #1
 8006a92:	2000      	movs	r0, #0
 8006a94:	f7fa fb14 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006a98:	4847      	ldr	r0, [pc, #284]	; (8006bb8 <cppLoop+0x678>)
 8006a9a:	f7fa fb3b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a9e:	483a      	ldr	r0, [pc, #232]	; (8006b88 <cppLoop+0x648>)
 8006aa0:	f7fb f9b8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	bf0c      	ite	eq
 8006aaa:	2301      	moveq	r3, #1
 8006aac:	2300      	movne	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 864f 	beq.w	8007754 <cppLoop+0x1214>
			HAL_Delay(500);
 8006ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006aba:	f000 ffab 	bl	8007a14 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006abe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ac2:	483b      	ldr	r0, [pc, #236]	; (8006bb0 <cppLoop+0x670>)
 8006ac4:	f7fc f9d1 	bl	8002e6a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	2101      	movs	r1, #1
 8006ace:	482f      	ldr	r0, [pc, #188]	; (8006b8c <cppLoop+0x64c>)
 8006ad0:	f7fb fac0 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4836      	ldr	r0, [pc, #216]	; (8006bb0 <cppLoop+0x670>)
 8006ad8:	f7fc fbaa 	bl	8003230 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006adc:	4834      	ldr	r0, [pc, #208]	; (8006bb0 <cppLoop+0x670>)
 8006ade:	f7fc fac3 	bl	8003068 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4828      	ldr	r0, [pc, #160]	; (8006b8c <cppLoop+0x64c>)
 8006aea:	f7fb fab3 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006aee:	f000 be31 	b.w	8007754 <cppLoop+0x1214>

	case 2:
		led.fullColor('G');
 8006af2:	2147      	movs	r1, #71	; 0x47
 8006af4:	4825      	ldr	r0, [pc, #148]	; (8006b8c <cppLoop+0x64c>)
 8006af6:	f7fb f9f1 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006afa:	f7fa fad1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006afe:	2100      	movs	r1, #0
 8006b00:	2000      	movs	r0, #0
 8006b02:	f7fa fadd 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006b06:	482b      	ldr	r0, [pc, #172]	; (8006bb4 <cppLoop+0x674>)
 8006b08:	f7fa fb04 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f7fa fad6 	bl	80010c0 <lcd_locate>
		lcd_printf("update");
 8006b14:	4829      	ldr	r0, [pc, #164]	; (8006bbc <cppLoop+0x67c>)
 8006b16:	f7fa fafd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b1a:	481b      	ldr	r0, [pc, #108]	; (8006b88 <cppLoop+0x648>)
 8006b1c:	f7fb f97a 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8613 	beq.w	8007758 <cppLoop+0x1218>
			HAL_Delay(500);
 8006b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b36:	f000 ff6d 	bl	8007a14 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006b3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b3e:	481c      	ldr	r0, [pc, #112]	; (8006bb0 <cppLoop+0x670>)
 8006b40:	f7fc f993 	bl	8002e6a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4810      	ldr	r0, [pc, #64]	; (8006b8c <cppLoop+0x64c>)
 8006b4c:	f7fb fa82 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8006b50:	2101      	movs	r1, #1
 8006b52:	4817      	ldr	r0, [pc, #92]	; (8006bb0 <cppLoop+0x670>)
 8006b54:	f7fc fb6c 	bl	8003230 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006b58:	4815      	ldr	r0, [pc, #84]	; (8006bb0 <cppLoop+0x670>)
 8006b5a:	f7fc fa85 	bl	8003068 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	2100      	movs	r1, #0
 8006b64:	4809      	ldr	r0, [pc, #36]	; (8006b8c <cppLoop+0x64c>)
 8006b66:	f7fb fa75 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}
		break;
 8006b6a:	f000 bdf5 	b.w	8007758 <cppLoop+0x1218>
 8006b6e:	bf00      	nop
 8006b70:	88e368f1 	.word	0x88e368f1
 8006b74:	3ee4f8b5 	.word	0x3ee4f8b5
 8006b78:	eb1c432d 	.word	0xeb1c432d
 8006b7c:	3f1a36e2 	.word	0x3f1a36e2
 8006b80:	a0b5ed8d 	.word	0xa0b5ed8d
 8006b84:	3eb0c6f7 	.word	0x3eb0c6f7
 8006b88:	200005b0 	.word	0x200005b0
 8006b8c:	200005bc 	.word	0x200005bc
 8006b90:	200335be 	.word	0x200335be
 8006b94:	200335c0 	.word	0x200335c0
 8006b98:	200335c8 	.word	0x200335c8
 8006b9c:	200335d0 	.word	0x200335d0
 8006ba0:	08017c74 	.word	0x08017c74
 8006ba4:	08017c7c 	.word	0x08017c7c
 8006ba8:	08017c84 	.word	0x08017c84
 8006bac:	08017c8c 	.word	0x08017c8c
 8006bb0:	20015e40 	.word	0x20015e40
 8006bb4:	08017c94 	.word	0x08017c94
 8006bb8:	08017ca0 	.word	0x08017ca0
 8006bbc:	08017ca8 	.word	0x08017ca8

	case 3:
		led.fullColor('M');
 8006bc0:	214d      	movs	r1, #77	; 0x4d
 8006bc2:	48af      	ldr	r0, [pc, #700]	; (8006e80 <cppLoop+0x940>)
 8006bc4:	f7fb f98a 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006bc8:	f7fa fa6a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f7fa fa76 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006bd4:	48ab      	ldr	r0, [pc, #684]	; (8006e84 <cppLoop+0x944>)
 8006bd6:	f7fa fa9d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006bda:	2101      	movs	r1, #1
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f7fa fa6f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006be2:	48a9      	ldr	r0, [pc, #676]	; (8006e88 <cppLoop+0x948>)
 8006be4:	f7fa fa96 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006be8:	48a8      	ldr	r0, [pc, #672]	; (8006e8c <cppLoop+0x94c>)
 8006bea:	f7fb f913 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 85ae 	beq.w	800775c <cppLoop+0x121c>
			led.LR(-1, 1);
 8006c00:	2201      	movs	r2, #1
 8006c02:	f04f 31ff 	mov.w	r1, #4294967295
 8006c06:	489e      	ldr	r0, [pc, #632]	; (8006e80 <cppLoop+0x940>)
 8006c08:	f7fb fa24 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c10:	f000 ff00 	bl	8007a14 <HAL_Delay>

			logger.start();
 8006c14:	489e      	ldr	r0, [pc, #632]	; (8006e90 <cppLoop+0x950>)
 8006c16:	f7fc fd78 	bl	800370a <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006c1a:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006e94 <cppLoop+0x954>
 8006c1e:	489e      	ldr	r0, [pc, #632]	; (8006e98 <cppLoop+0x958>)
 8006c20:	f7fc f914 	bl	8002e4c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006c24:	489c      	ldr	r0, [pc, #624]	; (8006e98 <cppLoop+0x958>)
 8006c26:	f7fc f9b5 	bl	8002f94 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006c2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8006c2e:	f000 fef1 	bl	8007a14 <HAL_Delay>

			logger.stop();
 8006c32:	4897      	ldr	r0, [pc, #604]	; (8006e90 <cppLoop+0x950>)
 8006c34:	f7fc fd7a 	bl	800372c <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006c38:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006e94 <cppLoop+0x954>
 8006c3c:	4896      	ldr	r0, [pc, #600]	; (8006e98 <cppLoop+0x958>)
 8006c3e:	f7fc f905 	bl	8002e4c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006c42:	4895      	ldr	r0, [pc, #596]	; (8006e98 <cppLoop+0x958>)
 8006c44:	f7fc f9c0 	bl	8002fc8 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	488c      	ldr	r0, [pc, #560]	; (8006e80 <cppLoop+0x940>)
 8006c50:	f7fb fa00 	bl	8002054 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006c54:	f04f 32ff 	mov.w	r2, #4294967295
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4889      	ldr	r0, [pc, #548]	; (8006e80 <cppLoop+0x940>)
 8006c5c:	f7fb f9fa 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	f04f 31ff 	mov.w	r1, #4294967295
 8006c66:	4886      	ldr	r0, [pc, #536]	; (8006e80 <cppLoop+0x940>)
 8006c68:	f7fb f9f4 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006c6c:	f000 bd76 	b.w	800775c <cppLoop+0x121c>

	case 4:
		led.fullColor('Y');
 8006c70:	2159      	movs	r1, #89	; 0x59
 8006c72:	4883      	ldr	r0, [pc, #524]	; (8006e80 <cppLoop+0x940>)
 8006c74:	f7fb f932 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c78:	f7fa fa12 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f7fa fa1e 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006c84:	4885      	ldr	r0, [pc, #532]	; (8006e9c <cppLoop+0x95c>)
 8006c86:	f7fa fa45 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f7fa fa17 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006c92:	487d      	ldr	r0, [pc, #500]	; (8006e88 <cppLoop+0x948>)
 8006c94:	f7fa fa3e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c98:	487c      	ldr	r0, [pc, #496]	; (8006e8c <cppLoop+0x94c>)
 8006c9a:	f7fb f8bb 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2301      	moveq	r3, #1
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8558 	beq.w	8007760 <cppLoop+0x1220>
			led.LR(-1, 1);
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb6:	4872      	ldr	r0, [pc, #456]	; (8006e80 <cppLoop+0x940>)
 8006cb8:	f7fb f9cc 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cc0:	f000 fea8 	bl	8007a14 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006cc4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006e94 <cppLoop+0x954>
 8006cc8:	4873      	ldr	r0, [pc, #460]	; (8006e98 <cppLoop+0x958>)
 8006cca:	f7fc f8ce 	bl	8002e6a <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006cce:	4874      	ldr	r0, [pc, #464]	; (8006ea0 <cppLoop+0x960>)
 8006cd0:	f7fd fd63 	bl	800479a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006cd4:	4870      	ldr	r0, [pc, #448]	; (8006e98 <cppLoop+0x958>)
 8006cd6:	f7fc f95d 	bl	8002f94 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006cda:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cde:	f000 fe99 	bl	8007a14 <HAL_Delay>

			line_trace.stop();
 8006ce2:	486d      	ldr	r0, [pc, #436]	; (8006e98 <cppLoop+0x958>)
 8006ce4:	f7fc f970 	bl	8002fc8 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006ce8:	486d      	ldr	r0, [pc, #436]	; (8006ea0 <cppLoop+0x960>)
 8006cea:	f7fd fd69 	bl	80047c0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf4:	4862      	ldr	r0, [pc, #392]	; (8006e80 <cppLoop+0x940>)
 8006cf6:	f7fb f9ad 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8006cfa:	f000 bd31 	b.w	8007760 <cppLoop+0x1220>

	case 5:
		led.fullColor('C');
 8006cfe:	2143      	movs	r1, #67	; 0x43
 8006d00:	485f      	ldr	r0, [pc, #380]	; (8006e80 <cppLoop+0x940>)
 8006d02:	f7fb f8eb 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d06:	f7fa f9cb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f7fa f9d7 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006d12:	4864      	ldr	r0, [pc, #400]	; (8006ea4 <cppLoop+0x964>)
 8006d14:	f7fa f9fe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d18:	2101      	movs	r1, #1
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f7fa f9d0 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006d20:	4861      	ldr	r0, [pc, #388]	; (8006ea8 <cppLoop+0x968>)
 8006d22:	f7fa f9f7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d26:	4859      	ldr	r0, [pc, #356]	; (8006e8c <cppLoop+0x94c>)
 8006d28:	f7fb f874 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8513 	beq.w	8007764 <cppLoop+0x1224>
			led.LR(-1, 1);
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f04f 31ff 	mov.w	r1, #4294967295
 8006d44:	484e      	ldr	r0, [pc, #312]	; (8006e80 <cppLoop+0x940>)
 8006d46:	f7fb f985 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d4e:	f000 fe61 	bl	8007a14 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006d52:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006eac <cppLoop+0x96c>
 8006d56:	4850      	ldr	r0, [pc, #320]	; (8006e98 <cppLoop+0x958>)
 8006d58:	f7fc f878 	bl	8002e4c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006d5c:	484e      	ldr	r0, [pc, #312]	; (8006e98 <cppLoop+0x958>)
 8006d5e:	f7fc f919 	bl	8002f94 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d66:	f000 fe55 	bl	8007a14 <HAL_Delay>

			led.fullColor('R');
 8006d6a:	2152      	movs	r1, #82	; 0x52
 8006d6c:	4844      	ldr	r0, [pc, #272]	; (8006e80 <cppLoop+0x940>)
 8006d6e:	f7fb f8b5 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006d72:	484f      	ldr	r0, [pc, #316]	; (8006eb0 <cppLoop+0x970>)
 8006d74:	f7fa fb90 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006d78:	484d      	ldr	r0, [pc, #308]	; (8006eb0 <cppLoop+0x970>)
 8006d7a:	f7fa fb5d 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d82:	f000 fe47 	bl	8007a14 <HAL_Delay>

			line_trace.stop();
 8006d86:	4844      	ldr	r0, [pc, #272]	; (8006e98 <cppLoop+0x958>)
 8006d88:	f7fc f91e 	bl	8002fc8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006d8c:	4949      	ldr	r1, [pc, #292]	; (8006eb4 <cppLoop+0x974>)
 8006d8e:	484a      	ldr	r0, [pc, #296]	; (8006eb8 <cppLoop+0x978>)
 8006d90:	f7fa fbb5 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006d94:	4846      	ldr	r0, [pc, #280]	; (8006eb0 <cppLoop+0x970>)
 8006d96:	f7fa fb31 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006d9a:	eef0 7a40 	vmov.f32	s15, s0
 8006d9e:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006da2:	f107 0310 	add.w	r3, r7, #16
 8006da6:	2201      	movs	r2, #1
 8006da8:	4619      	mov	r1, r3
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7fa fbca 	bl	8001544 <sd_write_float>
			user_fclose();
 8006db0:	f7fa fbb8 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006db4:	2200      	movs	r2, #0
 8006db6:	f04f 31ff 	mov.w	r1, #4294967295
 8006dba:	4831      	ldr	r0, [pc, #196]	; (8006e80 <cppLoop+0x940>)
 8006dbc:	f7fb f94a 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006dc0:	f000 bcd0 	b.w	8007764 <cppLoop+0x1224>

	case 6:
		led.fullColor('R');
 8006dc4:	2152      	movs	r1, #82	; 0x52
 8006dc6:	482e      	ldr	r0, [pc, #184]	; (8006e80 <cppLoop+0x940>)
 8006dc8:	f7fb f888 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006dcc:	f7fa f968 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f7fa f974 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006dd8:	4838      	ldr	r0, [pc, #224]	; (8006ebc <cppLoop+0x97c>)
 8006dda:	f7fa f99b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dde:	2101      	movs	r1, #1
 8006de0:	2000      	movs	r0, #0
 8006de2:	f7fa f96d 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006de6:	4836      	ldr	r0, [pc, #216]	; (8006ec0 <cppLoop+0x980>)
 8006de8:	f7fa f994 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006dec:	4827      	ldr	r0, [pc, #156]	; (8006e8c <cppLoop+0x94c>)
 8006dee:	f7fb f811 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 84b2 	beq.w	8007768 <cppLoop+0x1228>
			HAL_Delay(500);
 8006e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e08:	f000 fe04 	bl	8007a14 <HAL_Delay>
			led.LR(-1, 1);
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e12:	481b      	ldr	r0, [pc, #108]	; (8006e80 <cppLoop+0x940>)
 8006e14:	f7fb f91e 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006e18:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006ec4 <cppLoop+0x984>
 8006e1c:	481e      	ldr	r0, [pc, #120]	; (8006e98 <cppLoop+0x958>)
 8006e1e:	f7fc f815 	bl	8002e4c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006e22:	481d      	ldr	r0, [pc, #116]	; (8006e98 <cppLoop+0x958>)
 8006e24:	f7fc f8b6 	bl	8002f94 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e2c:	f000 fdf2 	bl	8007a14 <HAL_Delay>

			led.fullColor('R');
 8006e30:	2152      	movs	r1, #82	; 0x52
 8006e32:	4813      	ldr	r0, [pc, #76]	; (8006e80 <cppLoop+0x940>)
 8006e34:	f7fb f852 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006e38:	481d      	ldr	r0, [pc, #116]	; (8006eb0 <cppLoop+0x970>)
 8006e3a:	f7fa fb2d 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006e3e:	481c      	ldr	r0, [pc, #112]	; (8006eb0 <cppLoop+0x970>)
 8006e40:	f7fa fafa 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006e44:	4820      	ldr	r0, [pc, #128]	; (8006ec8 <cppLoop+0x988>)
 8006e46:	f7fc fecb 	bl	8003be0 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006e4a:	4811      	ldr	r0, [pc, #68]	; (8006e90 <cppLoop+0x950>)
 8006e4c:	f7fc fc5d 	bl	800370a <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006e50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006e54:	f000 fdde 	bl	8007a14 <HAL_Delay>

			line_trace.stop();
 8006e58:	480f      	ldr	r0, [pc, #60]	; (8006e98 <cppLoop+0x958>)
 8006e5a:	f7fc f8b5 	bl	8002fc8 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006e5e:	480c      	ldr	r0, [pc, #48]	; (8006e90 <cppLoop+0x950>)
 8006e60:	f7fc fc64 	bl	800372c <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006e64:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <cppLoop+0x98c>)
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <cppLoop+0x990>)
 8006e68:	491a      	ldr	r1, [pc, #104]	; (8006ed4 <cppLoop+0x994>)
 8006e6a:	4809      	ldr	r0, [pc, #36]	; (8006e90 <cppLoop+0x950>)
 8006e6c:	f7fc fb90 	bl	8003590 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006e70:	2200      	movs	r2, #0
 8006e72:	f04f 31ff 	mov.w	r1, #4294967295
 8006e76:	4802      	ldr	r0, [pc, #8]	; (8006e80 <cppLoop+0x940>)
 8006e78:	f7fb f8ec 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006e7c:	f000 bc74 	b.w	8007768 <cppLoop+0x1228>
 8006e80:	200005bc 	.word	0x200005bc
 8006e84:	08017cb0 	.word	0x08017cb0
 8006e88:	08017cb8 	.word	0x08017cb8
 8006e8c:	200005b0 	.word	0x200005b0
 8006e90:	200005e0 	.word	0x200005e0
 8006e94:	3dcccccd 	.word	0x3dcccccd
 8006e98:	20015e40 	.word	0x20015e40
 8006e9c:	08017cc0 	.word	0x08017cc0
 8006ea0:	20015dc4 	.word	0x20015dc4
 8006ea4:	08017ccc 	.word	0x08017ccc
 8006ea8:	08017cd4 	.word	0x08017cd4
 8006eac:	00000000 	.word	0x00000000
 8006eb0:	20015da8 	.word	0x20015da8
 8006eb4:	08017ce0 	.word	0x08017ce0
 8006eb8:	08017ce8 	.word	0x08017ce8
 8006ebc:	08017cf4 	.word	0x08017cf4
 8006ec0:	08017d00 	.word	0x08017d00
 8006ec4:	3d8f5c29 	.word	0x3d8f5c29
 8006ec8:	20015e00 	.word	0x20015e00
 8006ecc:	08017d08 	.word	0x08017d08
 8006ed0:	08017d14 	.word	0x08017d14
 8006ed4:	08017d20 	.word	0x08017d20

	case 7:
		led.fullColor('G');
 8006ed8:	2147      	movs	r1, #71	; 0x47
 8006eda:	48b3      	ldr	r0, [pc, #716]	; (80071a8 <cppLoop+0xc68>)
 8006edc:	f7fa fffe 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ee0:	f7fa f8de 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f7fa f8ea 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006eec:	48af      	ldr	r0, [pc, #700]	; (80071ac <cppLoop+0xc6c>)
 8006eee:	f7fa f911 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	f7fa f8e3 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006efa:	48ad      	ldr	r0, [pc, #692]	; (80071b0 <cppLoop+0xc70>)
 8006efc:	f7fa f90a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006f00:	48ac      	ldr	r0, [pc, #688]	; (80071b4 <cppLoop+0xc74>)
 8006f02:	f7fa ff87 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 842a 	beq.w	800776c <cppLoop+0x122c>
			led.LR(-1, 1);
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f1e:	48a2      	ldr	r0, [pc, #648]	; (80071a8 <cppLoop+0xc68>)
 8006f20:	f7fb f898 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f28:	f000 fd74 	bl	8007a14 <HAL_Delay>

			led.fullColor('R');
 8006f2c:	2152      	movs	r1, #82	; 0x52
 8006f2e:	489e      	ldr	r0, [pc, #632]	; (80071a8 <cppLoop+0xc68>)
 8006f30:	f7fa ffd4 	bl	8001edc <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006f34:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80071b8 <cppLoop+0xc78>
 8006f38:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80071bc <cppLoop+0xc7c>
 8006f3c:	48a0      	ldr	r0, [pc, #640]	; (80071c0 <cppLoop+0xc80>)
 8006f3e:	f7fd fbbf 	bl	80046c0 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006f42:	489f      	ldr	r0, [pc, #636]	; (80071c0 <cppLoop+0xc80>)
 8006f44:	f7fd fc29 	bl	800479a <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f4c:	f000 fd62 	bl	8007a14 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006f50:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80071bc <cppLoop+0xc7c>
 8006f54:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80071bc <cppLoop+0xc7c>
 8006f58:	4899      	ldr	r0, [pc, #612]	; (80071c0 <cppLoop+0xc80>)
 8006f5a:	f7fd fbb1 	bl	80046c0 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006f5e:	2064      	movs	r0, #100	; 0x64
 8006f60:	f000 fd58 	bl	8007a14 <HAL_Delay>
			velocity_ctrl.stop();
 8006f64:	4896      	ldr	r0, [pc, #600]	; (80071c0 <cppLoop+0xc80>)
 8006f66:	f7fd fc2b 	bl	80047c0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f70:	488d      	ldr	r0, [pc, #564]	; (80071a8 <cppLoop+0xc68>)
 8006f72:	f7fb f86f 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8006f76:	e3f9      	b.n	800776c <cppLoop+0x122c>

	case 8:
		led.fullColor('B');
 8006f78:	2142      	movs	r1, #66	; 0x42
 8006f7a:	488b      	ldr	r0, [pc, #556]	; (80071a8 <cppLoop+0xc68>)
 8006f7c:	f7fa ffae 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006f80:	f7fa f88e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006f84:	2100      	movs	r1, #0
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7fa f89a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006f8c:	488d      	ldr	r0, [pc, #564]	; (80071c4 <cppLoop+0xc84>)
 8006f8e:	f7fc ff1d 	bl	8003dcc <_ZN13PathFollowing8getKxValEv>
 8006f92:	ec51 0b10 	vmov	r0, r1, d0
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	4b8b      	ldr	r3, [pc, #556]	; (80071c8 <cppLoop+0xc88>)
 8006f9c:	f7f9 fb44 	bl	8000628 <__aeabi_dmul>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	4888      	ldr	r0, [pc, #544]	; (80071cc <cppLoop+0xc8c>)
 8006faa:	f7fa f8b3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006fae:	2101      	movs	r1, #1
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f7fa f885 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006fb6:	4883      	ldr	r0, [pc, #524]	; (80071c4 <cppLoop+0xc84>)
 8006fb8:	f7fc ff1c 	bl	8003df4 <_ZN13PathFollowing8getKyValEv>
 8006fbc:	ec51 0b10 	vmov	r0, r1, d0
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	4b80      	ldr	r3, [pc, #512]	; (80071c8 <cppLoop+0xc88>)
 8006fc6:	f7f9 fb2f 	bl	8000628 <__aeabi_dmul>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	461d      	mov	r5, r3
 8006fd0:	4626      	mov	r6, r4
 8006fd2:	487c      	ldr	r0, [pc, #496]	; (80071c4 <cppLoop+0xc84>)
 8006fd4:	f7fc ff22 	bl	8003e1c <_ZN13PathFollowing8getKtValEv>
 8006fd8:	ec51 0b10 	vmov	r0, r1, d0
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	4b79      	ldr	r3, [pc, #484]	; (80071c8 <cppLoop+0xc88>)
 8006fe2:	f7f9 fb21 	bl	8000628 <__aeabi_dmul>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	e9cd 3400 	strd	r3, r4, [sp]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4633      	mov	r3, r6
 8006ff2:	4877      	ldr	r0, [pc, #476]	; (80071d0 <cppLoop+0xc90>)
 8006ff4:	f7fa f88e 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006ff8:	4b76      	ldr	r3, [pc, #472]	; (80071d4 <cppLoop+0xc94>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f3bf 8f5b 	dmb	ish
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d019      	beq.n	8007048 <cppLoop+0xb08>
 8007014:	486f      	ldr	r0, [pc, #444]	; (80071d4 <cppLoop+0xc94>)
 8007016:	f00b f9e2 	bl	80123de <__cxa_guard_acquire>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <cppLoop+0xb08>
 800702a:	4866      	ldr	r0, [pc, #408]	; (80071c4 <cppLoop+0xc84>)
 800702c:	f7fc fece 	bl	8003dcc <_ZN13PathFollowing8getKxValEv>
 8007030:	ec54 3b10 	vmov	r3, r4, d0
 8007034:	4618      	mov	r0, r3
 8007036:	4621      	mov	r1, r4
 8007038:	f7f9 fdee 	bl	8000c18 <__aeabi_d2f>
 800703c:	4602      	mov	r2, r0
 800703e:	4b66      	ldr	r3, [pc, #408]	; (80071d8 <cppLoop+0xc98>)
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	4864      	ldr	r0, [pc, #400]	; (80071d4 <cppLoop+0xc94>)
 8007044:	f00b f9d7 	bl	80123f6 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8007048:	4b64      	ldr	r3, [pc, #400]	; (80071dc <cppLoop+0xc9c>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f3bf 8f5b 	dmb	ish
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	bf0c      	ite	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	2300      	movne	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <cppLoop+0xb58>
 8007064:	485d      	ldr	r0, [pc, #372]	; (80071dc <cppLoop+0xc9c>)
 8007066:	f00b f9ba 	bl	80123de <__cxa_guard_acquire>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <cppLoop+0xb58>
 800707a:	4852      	ldr	r0, [pc, #328]	; (80071c4 <cppLoop+0xc84>)
 800707c:	f7fc feba 	bl	8003df4 <_ZN13PathFollowing8getKyValEv>
 8007080:	ec54 3b10 	vmov	r3, r4, d0
 8007084:	4618      	mov	r0, r3
 8007086:	4621      	mov	r1, r4
 8007088:	f7f9 fdc6 	bl	8000c18 <__aeabi_d2f>
 800708c:	4602      	mov	r2, r0
 800708e:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <cppLoop+0xca0>)
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	4852      	ldr	r0, [pc, #328]	; (80071dc <cppLoop+0xc9c>)
 8007094:	f00b f9af 	bl	80123f6 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8007098:	4b52      	ldr	r3, [pc, #328]	; (80071e4 <cppLoop+0xca4>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f3bf 8f5b 	dmb	ish
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d019      	beq.n	80070e8 <cppLoop+0xba8>
 80070b4:	484b      	ldr	r0, [pc, #300]	; (80071e4 <cppLoop+0xca4>)
 80070b6:	f00b f992 	bl	80123de <__cxa_guard_acquire>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <cppLoop+0xba8>
 80070ca:	483e      	ldr	r0, [pc, #248]	; (80071c4 <cppLoop+0xc84>)
 80070cc:	f7fc fea6 	bl	8003e1c <_ZN13PathFollowing8getKtValEv>
 80070d0:	ec54 3b10 	vmov	r3, r4, d0
 80070d4:	4618      	mov	r0, r3
 80070d6:	4621      	mov	r1, r4
 80070d8:	f7f9 fd9e 	bl	8000c18 <__aeabi_d2f>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <cppLoop+0xca8>)
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	4840      	ldr	r0, [pc, #256]	; (80071e4 <cppLoop+0xca4>)
 80070e4:	f00b f987 	bl	80123f6 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80070e8:	4832      	ldr	r0, [pc, #200]	; (80071b4 <cppLoop+0xc74>)
 80070ea:	f7fa fe93 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d021      	beq.n	8007142 <cppLoop+0xc02>
			led.LR(-1, 1);
 80070fe:	2201      	movs	r2, #1
 8007100:	f04f 31ff 	mov.w	r1, #4294967295
 8007104:	4828      	ldr	r0, [pc, #160]	; (80071a8 <cppLoop+0xc68>)
 8007106:	f7fa ffa5 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800710a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800710e:	f000 fc81 	bl	8007a14 <HAL_Delay>

			selector++;
 8007112:	4b36      	ldr	r3, [pc, #216]	; (80071ec <cppLoop+0xcac>)
 8007114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007118:	b29b      	uxth	r3, r3
 800711a:	3301      	adds	r3, #1
 800711c:	b29b      	uxth	r3, r3
 800711e:	b21a      	sxth	r2, r3
 8007120:	4b32      	ldr	r3, [pc, #200]	; (80071ec <cppLoop+0xcac>)
 8007122:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007124:	4b31      	ldr	r3, [pc, #196]	; (80071ec <cppLoop+0xcac>)
 8007126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800712a:	2b02      	cmp	r3, #2
 800712c:	dd02      	ble.n	8007134 <cppLoop+0xbf4>
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <cppLoop+0xcac>)
 8007130:	2200      	movs	r2, #0
 8007132:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007134:	2200      	movs	r2, #0
 8007136:	f04f 31ff 	mov.w	r1, #4294967295
 800713a:	481b      	ldr	r0, [pc, #108]	; (80071a8 <cppLoop+0xc68>)
 800713c:	f7fa ff8a 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8007140:	e316      	b.n	8007770 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_R){
 8007142:	481c      	ldr	r0, [pc, #112]	; (80071b4 <cppLoop+0xc74>)
 8007144:	f7fa fe66 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007148:	4603      	mov	r3, r0
 800714a:	2b10      	cmp	r3, #16
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8082 	beq.w	800725e <cppLoop+0xd1e>
			led.LR(-1, 1);
 800715a:	2201      	movs	r2, #1
 800715c:	f04f 31ff 	mov.w	r1, #4294967295
 8007160:	4811      	ldr	r0, [pc, #68]	; (80071a8 <cppLoop+0xc68>)
 8007162:	f7fa ff77 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007166:	2064      	movs	r0, #100	; 0x64
 8007168:	f000 fc54 	bl	8007a14 <HAL_Delay>
			if(selector == 0){
 800716c:	4b1f      	ldr	r3, [pc, #124]	; (80071ec <cppLoop+0xcac>)
 800716e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d13c      	bne.n	80071f0 <cppLoop+0xcb0>
				adj_kx = adj_kx + 0.00001;
 8007176:	4b18      	ldr	r3, [pc, #96]	; (80071d8 <cppLoop+0xc98>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 f9fc 	bl	8000578 <__aeabi_f2d>
 8007180:	a307      	add	r3, pc, #28	; (adr r3, 80071a0 <cppLoop+0xc60>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 f899 	bl	80002bc <__adddf3>
 800718a:	4603      	mov	r3, r0
 800718c:	460c      	mov	r4, r1
 800718e:	4618      	mov	r0, r3
 8007190:	4621      	mov	r1, r4
 8007192:	f7f9 fd41 	bl	8000c18 <__aeabi_d2f>
 8007196:	4602      	mov	r2, r0
 8007198:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <cppLoop+0xc98>)
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e054      	b.n	8007248 <cppLoop+0xd08>
 800719e:	bf00      	nop
 80071a0:	88e368f1 	.word	0x88e368f1
 80071a4:	3ee4f8b5 	.word	0x3ee4f8b5
 80071a8:	200005bc 	.word	0x200005bc
 80071ac:	08017d24 	.word	0x08017d24
 80071b0:	08017d30 	.word	0x08017d30
 80071b4:	200005b0 	.word	0x200005b0
 80071b8:	3fc8f5c3 	.word	0x3fc8f5c3
 80071bc:	00000000 	.word	0x00000000
 80071c0:	20015dc4 	.word	0x20015dc4
 80071c4:	2001be90 	.word	0x2001be90
 80071c8:	408f4000 	.word	0x408f4000
 80071cc:	08017c58 	.word	0x08017c58
 80071d0:	08017c64 	.word	0x08017c64
 80071d4:	200335dc 	.word	0x200335dc
 80071d8:	200335d8 	.word	0x200335d8
 80071dc:	200335e4 	.word	0x200335e4
 80071e0:	200335e0 	.word	0x200335e0
 80071e4:	200335ec 	.word	0x200335ec
 80071e8:	200335e8 	.word	0x200335e8
 80071ec:	200335be 	.word	0x200335be
			else if(selector == 1){
 80071f0:	4ba3      	ldr	r3, [pc, #652]	; (8007480 <cppLoop+0xf40>)
 80071f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d113      	bne.n	8007222 <cppLoop+0xce2>
				adj_ky = adj_ky + 0.00001;
 80071fa:	4ba2      	ldr	r3, [pc, #648]	; (8007484 <cppLoop+0xf44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7f9 f9ba 	bl	8000578 <__aeabi_f2d>
 8007204:	a39c      	add	r3, pc, #624	; (adr r3, 8007478 <cppLoop+0xf38>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f857 	bl	80002bc <__adddf3>
 800720e:	4603      	mov	r3, r0
 8007210:	460c      	mov	r4, r1
 8007212:	4618      	mov	r0, r3
 8007214:	4621      	mov	r1, r4
 8007216:	f7f9 fcff 	bl	8000c18 <__aeabi_d2f>
 800721a:	4602      	mov	r2, r0
 800721c:	4b99      	ldr	r3, [pc, #612]	; (8007484 <cppLoop+0xf44>)
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e012      	b.n	8007248 <cppLoop+0xd08>
				adj_kt = adj_kt + 0.00001;
 8007222:	4b99      	ldr	r3, [pc, #612]	; (8007488 <cppLoop+0xf48>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7f9 f9a6 	bl	8000578 <__aeabi_f2d>
 800722c:	a392      	add	r3, pc, #584	; (adr r3, 8007478 <cppLoop+0xf38>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f9 f843 	bl	80002bc <__adddf3>
 8007236:	4603      	mov	r3, r0
 8007238:	460c      	mov	r4, r1
 800723a:	4618      	mov	r0, r3
 800723c:	4621      	mov	r1, r4
 800723e:	f7f9 fceb 	bl	8000c18 <__aeabi_d2f>
 8007242:	4602      	mov	r2, r0
 8007244:	4b90      	ldr	r3, [pc, #576]	; (8007488 <cppLoop+0xf48>)
 8007246:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007248:	2152      	movs	r1, #82	; 0x52
 800724a:	4890      	ldr	r0, [pc, #576]	; (800748c <cppLoop+0xf4c>)
 800724c:	f7fa fe46 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007250:	2200      	movs	r2, #0
 8007252:	f04f 31ff 	mov.w	r1, #4294967295
 8007256:	488d      	ldr	r0, [pc, #564]	; (800748c <cppLoop+0xf4c>)
 8007258:	f7fa fefc 	bl	8002054 <_ZN3LED2LREaa>
		break;
 800725c:	e288      	b.n	8007770 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_L){
 800725e:	488c      	ldr	r0, [pc, #560]	; (8007490 <cppLoop+0xf50>)
 8007260:	f7fa fdd8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d058      	beq.n	8007326 <cppLoop+0xde6>
			led.LR(-1, 1);
 8007274:	2201      	movs	r2, #1
 8007276:	f04f 31ff 	mov.w	r1, #4294967295
 800727a:	4884      	ldr	r0, [pc, #528]	; (800748c <cppLoop+0xf4c>)
 800727c:	f7fa feea 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007280:	2064      	movs	r0, #100	; 0x64
 8007282:	f000 fbc7 	bl	8007a14 <HAL_Delay>
			if(selector == 0){
 8007286:	4b7e      	ldr	r3, [pc, #504]	; (8007480 <cppLoop+0xf40>)
 8007288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d113      	bne.n	80072b8 <cppLoop+0xd78>
				adj_kx = adj_kx - 0.00001;
 8007290:	4b80      	ldr	r3, [pc, #512]	; (8007494 <cppLoop+0xf54>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f7f9 f96f 	bl	8000578 <__aeabi_f2d>
 800729a:	a377      	add	r3, pc, #476	; (adr r3, 8007478 <cppLoop+0xf38>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f9 f80a 	bl	80002b8 <__aeabi_dsub>
 80072a4:	4603      	mov	r3, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4618      	mov	r0, r3
 80072aa:	4621      	mov	r1, r4
 80072ac:	f7f9 fcb4 	bl	8000c18 <__aeabi_d2f>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4b78      	ldr	r3, [pc, #480]	; (8007494 <cppLoop+0xf54>)
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e02b      	b.n	8007310 <cppLoop+0xdd0>
			else if(selector == 1){
 80072b8:	4b71      	ldr	r3, [pc, #452]	; (8007480 <cppLoop+0xf40>)
 80072ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d113      	bne.n	80072ea <cppLoop+0xdaa>
				adj_ky = adj_ky - 0.00001;
 80072c2:	4b70      	ldr	r3, [pc, #448]	; (8007484 <cppLoop+0xf44>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f9 f956 	bl	8000578 <__aeabi_f2d>
 80072cc:	a36a      	add	r3, pc, #424	; (adr r3, 8007478 <cppLoop+0xf38>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 fff1 	bl	80002b8 <__aeabi_dsub>
 80072d6:	4603      	mov	r3, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	4618      	mov	r0, r3
 80072dc:	4621      	mov	r1, r4
 80072de:	f7f9 fc9b 	bl	8000c18 <__aeabi_d2f>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b67      	ldr	r3, [pc, #412]	; (8007484 <cppLoop+0xf44>)
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e012      	b.n	8007310 <cppLoop+0xdd0>
				adj_kt = adj_kt - 0.00001;
 80072ea:	4b67      	ldr	r3, [pc, #412]	; (8007488 <cppLoop+0xf48>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f942 	bl	8000578 <__aeabi_f2d>
 80072f4:	a360      	add	r3, pc, #384	; (adr r3, 8007478 <cppLoop+0xf38>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffdd 	bl	80002b8 <__aeabi_dsub>
 80072fe:	4603      	mov	r3, r0
 8007300:	460c      	mov	r4, r1
 8007302:	4618      	mov	r0, r3
 8007304:	4621      	mov	r1, r4
 8007306:	f7f9 fc87 	bl	8000c18 <__aeabi_d2f>
 800730a:	4602      	mov	r2, r0
 800730c:	4b5e      	ldr	r3, [pc, #376]	; (8007488 <cppLoop+0xf48>)
 800730e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007310:	2152      	movs	r1, #82	; 0x52
 8007312:	485e      	ldr	r0, [pc, #376]	; (800748c <cppLoop+0xf4c>)
 8007314:	f7fa fde2 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007318:	2200      	movs	r2, #0
 800731a:	f04f 31ff 	mov.w	r1, #4294967295
 800731e:	485b      	ldr	r0, [pc, #364]	; (800748c <cppLoop+0xf4c>)
 8007320:	f7fa fe98 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8007324:	e224      	b.n	8007770 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_D){
 8007326:	485a      	ldr	r0, [pc, #360]	; (8007490 <cppLoop+0xf50>)
 8007328:	f7fa fd74 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800732c:	4603      	mov	r3, r0
 800732e:	2b04      	cmp	r3, #4
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d048      	beq.n	80073ce <cppLoop+0xe8e>
			led.LR(-1, 1);
 800733c:	2201      	movs	r2, #1
 800733e:	f04f 31ff 	mov.w	r1, #4294967295
 8007342:	4852      	ldr	r0, [pc, #328]	; (800748c <cppLoop+0xf4c>)
 8007344:	f7fa fe86 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007348:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800734c:	f000 fb62 	bl	8007a14 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	2201      	movs	r2, #1
 8007356:	4950      	ldr	r1, [pc, #320]	; (8007498 <cppLoop+0xf58>)
 8007358:	4850      	ldr	r0, [pc, #320]	; (800749c <cppLoop+0xf5c>)
 800735a:	f7fa f9ab 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	2201      	movs	r2, #1
 8007364:	494e      	ldr	r1, [pc, #312]	; (80074a0 <cppLoop+0xf60>)
 8007366:	484d      	ldr	r0, [pc, #308]	; (800749c <cppLoop+0xf5c>)
 8007368:	f7fa f9a4 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	2201      	movs	r2, #1
 8007370:	494c      	ldr	r1, [pc, #304]	; (80074a4 <cppLoop+0xf64>)
 8007372:	484a      	ldr	r0, [pc, #296]	; (800749c <cppLoop+0xf5c>)
 8007374:	f7fa f99e 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4618      	mov	r0, r3
 800737c:	f7f9 f8fc 	bl	8000578 <__aeabi_f2d>
 8007380:	4604      	mov	r4, r0
 8007382:	460d      	mov	r5, r1
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f7f9 f8f6 	bl	8000578 <__aeabi_f2d>
 800738c:	4680      	mov	r8, r0
 800738e:	4689      	mov	r9, r1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	f7f9 f8f0 	bl	8000578 <__aeabi_f2d>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	ec43 2b12 	vmov	d2, r2, r3
 80073a0:	ec49 8b11 	vmov	d1, r8, r9
 80073a4:	ec45 4b10 	vmov	d0, r4, r5
 80073a8:	483f      	ldr	r0, [pc, #252]	; (80074a8 <cppLoop+0xf68>)
 80073aa:	f7fc fcef 	bl	8003d8c <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a38      	ldr	r2, [pc, #224]	; (8007494 <cppLoop+0xf54>)
 80073b2:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4a33      	ldr	r2, [pc, #204]	; (8007484 <cppLoop+0xf44>)
 80073b8:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a32      	ldr	r2, [pc, #200]	; (8007488 <cppLoop+0xf48>)
 80073be:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80073c0:	2200      	movs	r2, #0
 80073c2:	f04f 31ff 	mov.w	r1, #4294967295
 80073c6:	4831      	ldr	r0, [pc, #196]	; (800748c <cppLoop+0xf4c>)
 80073c8:	f7fa fe44 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80073cc:	e1d0      	b.n	8007770 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_C){
 80073ce:	4830      	ldr	r0, [pc, #192]	; (8007490 <cppLoop+0xf50>)
 80073d0:	f7fa fd20 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	bf0c      	ite	eq
 80073da:	2301      	moveq	r3, #1
 80073dc:	2300      	movne	r3, #0
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 81c5 	beq.w	8007770 <cppLoop+0x1230>
			led.LR(-1, 1);
 80073e6:	2201      	movs	r2, #1
 80073e8:	f04f 31ff 	mov.w	r1, #4294967295
 80073ec:	4827      	ldr	r0, [pc, #156]	; (800748c <cppLoop+0xf4c>)
 80073ee:	f7fa fe31 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80073f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073f6:	f000 fb0d 	bl	8007a14 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 80073fa:	2300      	movs	r3, #0
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4b25      	ldr	r3, [pc, #148]	; (8007494 <cppLoop+0xf54>)
 8007400:	2201      	movs	r2, #1
 8007402:	4925      	ldr	r1, [pc, #148]	; (8007498 <cppLoop+0xf58>)
 8007404:	4825      	ldr	r0, [pc, #148]	; (800749c <cppLoop+0xf5c>)
 8007406:	f7fa f8ef 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <cppLoop+0xf44>)
 8007410:	2201      	movs	r2, #1
 8007412:	4923      	ldr	r1, [pc, #140]	; (80074a0 <cppLoop+0xf60>)
 8007414:	4821      	ldr	r0, [pc, #132]	; (800749c <cppLoop+0xf5c>)
 8007416:	f7fa f8e7 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 800741a:	2300      	movs	r3, #0
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <cppLoop+0xf48>)
 8007420:	2201      	movs	r2, #1
 8007422:	4920      	ldr	r1, [pc, #128]	; (80074a4 <cppLoop+0xf64>)
 8007424:	481d      	ldr	r0, [pc, #116]	; (800749c <cppLoop+0xf5c>)
 8007426:	f7fa f8df 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 800742a:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <cppLoop+0xf54>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 f8a2 	bl	8000578 <__aeabi_f2d>
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	4b12      	ldr	r3, [pc, #72]	; (8007484 <cppLoop+0xf44>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 f89b 	bl	8000578 <__aeabi_f2d>
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <cppLoop+0xf48>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 f894 	bl	8000578 <__aeabi_f2d>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	ec43 2b12 	vmov	d2, r2, r3
 8007458:	ec49 8b11 	vmov	d1, r8, r9
 800745c:	ec45 4b10 	vmov	d0, r4, r5
 8007460:	4811      	ldr	r0, [pc, #68]	; (80074a8 <cppLoop+0xf68>)
 8007462:	f7fc fc93 	bl	8003d8c <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8007466:	2200      	movs	r2, #0
 8007468:	f04f 31ff 	mov.w	r1, #4294967295
 800746c:	4807      	ldr	r0, [pc, #28]	; (800748c <cppLoop+0xf4c>)
 800746e:	f7fa fdf1 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8007472:	e17d      	b.n	8007770 <cppLoop+0x1230>
 8007474:	f3af 8000 	nop.w
 8007478:	88e368f1 	.word	0x88e368f1
 800747c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007480:	200335be 	.word	0x200335be
 8007484:	200335e0 	.word	0x200335e0
 8007488:	200335e8 	.word	0x200335e8
 800748c:	200005bc 	.word	0x200005bc
 8007490:	200005b0 	.word	0x200005b0
 8007494:	200335d8 	.word	0x200335d8
 8007498:	08017d38 	.word	0x08017d38
 800749c:	08017c7c 	.word	0x08017c7c
 80074a0:	08017d40 	.word	0x08017d40
 80074a4:	08017d48 	.word	0x08017d48
 80074a8:	2001be90 	.word	0x2001be90

	case 9:
		led.fullColor('M');
 80074ac:	214d      	movs	r1, #77	; 0x4d
 80074ae:	48c0      	ldr	r0, [pc, #768]	; (80077b0 <cppLoop+0x1270>)
 80074b0:	f7fa fd14 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80074b4:	f7f9 fdf4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80074b8:	2100      	movs	r1, #0
 80074ba:	2000      	movs	r0, #0
 80074bc:	f7f9 fe00 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80074c0:	48bc      	ldr	r0, [pc, #752]	; (80077b4 <cppLoop+0x1274>)
 80074c2:	f7f9 fe27 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80074c6:	2101      	movs	r1, #1
 80074c8:	2000      	movs	r0, #0
 80074ca:	f7f9 fdf9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80074ce:	48ba      	ldr	r0, [pc, #744]	; (80077b8 <cppLoop+0x1278>)
 80074d0:	f7f9 fe20 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80074d4:	48b9      	ldr	r0, [pc, #740]	; (80077bc <cppLoop+0x127c>)
 80074d6:	f7fa fc9d 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b02      	cmp	r3, #2
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8144 	beq.w	8007774 <cppLoop+0x1234>
			HAL_Delay(1500);
 80074ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80074f0:	f000 fa90 	bl	8007a14 <HAL_Delay>
			led.LR(-1, 1);
 80074f4:	2201      	movs	r2, #1
 80074f6:	f04f 31ff 	mov.w	r1, #4294967295
 80074fa:	48ad      	ldr	r0, [pc, #692]	; (80077b0 <cppLoop+0x1270>)
 80074fc:	f7fa fdaa 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 8007500:	48af      	ldr	r0, [pc, #700]	; (80077c0 <cppLoop+0x1280>)
 8007502:	f7fc f902 	bl	800370a <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8007506:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8007798 <cppLoop+0x1258>
 800750a:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 80077a0 <cppLoop+0x1260>
 800750e:	48ad      	ldr	r0, [pc, #692]	; (80077c4 <cppLoop+0x1284>)
 8007510:	f7fc f990 	bl	8003834 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007518:	f000 fa7c 	bl	8007a14 <HAL_Delay>

			logger.stop();
 800751c:	48a8      	ldr	r0, [pc, #672]	; (80077c0 <cppLoop+0x1280>)
 800751e:	f7fc f905 	bl	800372c <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007522:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 80077a8 <cppLoop+0x1268>
 8007526:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80077a8 <cppLoop+0x1268>
 800752a:	48a6      	ldr	r0, [pc, #664]	; (80077c4 <cppLoop+0x1284>)
 800752c:	f7fc f982 	bl	8003834 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007530:	4aa5      	ldr	r2, [pc, #660]	; (80077c8 <cppLoop+0x1288>)
 8007532:	49a6      	ldr	r1, [pc, #664]	; (80077cc <cppLoop+0x128c>)
 8007534:	48a2      	ldr	r0, [pc, #648]	; (80077c0 <cppLoop+0x1280>)
 8007536:	f7fc f801 	bl	800353c <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800753a:	2200      	movs	r2, #0
 800753c:	f04f 31ff 	mov.w	r1, #4294967295
 8007540:	489b      	ldr	r0, [pc, #620]	; (80077b0 <cppLoop+0x1270>)
 8007542:	f7fa fd87 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8007546:	e115      	b.n	8007774 <cppLoop+0x1234>

	case 10:
		led.fullColor('Y');
 8007548:	2159      	movs	r1, #89	; 0x59
 800754a:	4899      	ldr	r0, [pc, #612]	; (80077b0 <cppLoop+0x1270>)
 800754c:	f7fa fcc6 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007550:	f7f9 fda6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007554:	2100      	movs	r1, #0
 8007556:	2000      	movs	r0, #0
 8007558:	f7f9 fdb2 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800755c:	489c      	ldr	r0, [pc, #624]	; (80077d0 <cppLoop+0x1290>)
 800755e:	f7f9 fdd9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007562:	2101      	movs	r1, #1
 8007564:	2000      	movs	r0, #0
 8007566:	f7f9 fdab 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800756a:	489a      	ldr	r0, [pc, #616]	; (80077d4 <cppLoop+0x1294>)
 800756c:	f7f9 fdd2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007570:	4892      	ldr	r0, [pc, #584]	; (80077bc <cppLoop+0x127c>)
 8007572:	f7fa fc4f 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007576:	4603      	mov	r3, r0
 8007578:	2b02      	cmp	r3, #2
 800757a:	bf0c      	ite	eq
 800757c:	2301      	moveq	r3, #1
 800757e:	2300      	movne	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80f8 	beq.w	8007778 <cppLoop+0x1238>
			HAL_Delay(1500);
 8007588:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800758c:	f000 fa42 	bl	8007a14 <HAL_Delay>
			led.LR(-1, 1);
 8007590:	2201      	movs	r2, #1
 8007592:	f04f 31ff 	mov.w	r1, #4294967295
 8007596:	4886      	ldr	r0, [pc, #536]	; (80077b0 <cppLoop+0x1270>)
 8007598:	f7fa fd5c 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 800759c:	4888      	ldr	r0, [pc, #544]	; (80077c0 <cppLoop+0x1280>)
 800759e:	f7fc f8b4 	bl	800370a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80075a2:	488d      	ldr	r0, [pc, #564]	; (80077d8 <cppLoop+0x1298>)
 80075a4:	f7fd f8f9 	bl	800479a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80075a8:	eddf 0a8c 	vldr	s1, [pc, #560]	; 80077dc <cppLoop+0x129c>
 80075ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80075b0:	4889      	ldr	r0, [pc, #548]	; (80077d8 <cppLoop+0x1298>)
 80075b2:	f7fd f885 	bl	80046c0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80075b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075ba:	f000 fa2b 	bl	8007a14 <HAL_Delay>

			logger.stop();
 80075be:	4880      	ldr	r0, [pc, #512]	; (80077c0 <cppLoop+0x1280>)
 80075c0:	f7fc f8b4 	bl	800372c <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80075c4:	4884      	ldr	r0, [pc, #528]	; (80077d8 <cppLoop+0x1298>)
 80075c6:	f7fd f8fb 	bl	80047c0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80075ca:	4a85      	ldr	r2, [pc, #532]	; (80077e0 <cppLoop+0x12a0>)
 80075cc:	497f      	ldr	r1, [pc, #508]	; (80077cc <cppLoop+0x128c>)
 80075ce:	487c      	ldr	r0, [pc, #496]	; (80077c0 <cppLoop+0x1280>)
 80075d0:	f7fb ffb4 	bl	800353c <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80075d4:	2200      	movs	r2, #0
 80075d6:	f04f 31ff 	mov.w	r1, #4294967295
 80075da:	4875      	ldr	r0, [pc, #468]	; (80077b0 <cppLoop+0x1270>)
 80075dc:	f7fa fd3a 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 80075e0:	e0ca      	b.n	8007778 <cppLoop+0x1238>

	case 11:
		led.fullColor('C');
 80075e2:	2143      	movs	r1, #67	; 0x43
 80075e4:	4872      	ldr	r0, [pc, #456]	; (80077b0 <cppLoop+0x1270>)
 80075e6:	f7fa fc79 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075ea:	f7f9 fd59 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075ee:	2100      	movs	r1, #0
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7f9 fd65 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80075f6:	487b      	ldr	r0, [pc, #492]	; (80077e4 <cppLoop+0x12a4>)
 80075f8:	f7f9 fd8c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075fc:	2101      	movs	r1, #1
 80075fe:	2000      	movs	r0, #0
 8007600:	f7f9 fd5e 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007604:	4878      	ldr	r0, [pc, #480]	; (80077e8 <cppLoop+0x12a8>)
 8007606:	f7f9 fd85 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800760a:	486c      	ldr	r0, [pc, #432]	; (80077bc <cppLoop+0x127c>)
 800760c:	f7fa fc02 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007610:	4603      	mov	r3, r0
 8007612:	2b02      	cmp	r3, #2
 8007614:	bf0c      	ite	eq
 8007616:	2301      	moveq	r3, #1
 8007618:	2300      	movne	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80ad 	beq.w	800777c <cppLoop+0x123c>
			HAL_Delay(500);
 8007622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007626:	f000 f9f5 	bl	8007a14 <HAL_Delay>
			led.LR(-1, 1);
 800762a:	2201      	movs	r2, #1
 800762c:	f04f 31ff 	mov.w	r1, #4294967295
 8007630:	485f      	ldr	r0, [pc, #380]	; (80077b0 <cppLoop+0x1270>)
 8007632:	f7fa fd0f 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.createVelocityTabele();
 8007636:	486d      	ldr	r0, [pc, #436]	; (80077ec <cppLoop+0x12ac>)
 8007638:	f7fb fad2 	bl	8002be0 <_ZN9LineTrace20createVelocityTabeleEv>

			led.LR(-1, 0);
 800763c:	2200      	movs	r2, #0
 800763e:	f04f 31ff 	mov.w	r1, #4294967295
 8007642:	485b      	ldr	r0, [pc, #364]	; (80077b0 <cppLoop+0x1270>)
 8007644:	f7fa fd06 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8007648:	e098      	b.n	800777c <cppLoop+0x123c>

	case 12:
		led.fullColor('R');
 800764a:	2152      	movs	r1, #82	; 0x52
 800764c:	4858      	ldr	r0, [pc, #352]	; (80077b0 <cppLoop+0x1270>)
 800764e:	f7fa fc45 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007652:	f7f9 fd25 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007656:	2100      	movs	r1, #0
 8007658:	2000      	movs	r0, #0
 800765a:	f7f9 fd31 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800765e:	4864      	ldr	r0, [pc, #400]	; (80077f0 <cppLoop+0x12b0>)
 8007660:	f7f9 fd58 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007664:	2101      	movs	r1, #1
 8007666:	2000      	movs	r0, #0
 8007668:	f7f9 fd2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800766c:	4852      	ldr	r0, [pc, #328]	; (80077b8 <cppLoop+0x1278>)
 800766e:	f7f9 fd51 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007672:	4852      	ldr	r0, [pc, #328]	; (80077bc <cppLoop+0x127c>)
 8007674:	f7fa fbce 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007678:	4603      	mov	r3, r0
 800767a:	2b02      	cmp	r3, #2
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d07b      	beq.n	8007780 <cppLoop+0x1240>
			led.LR(-1, 1);
 8007688:	2201      	movs	r2, #1
 800768a:	f04f 31ff 	mov.w	r1, #4294967295
 800768e:	4848      	ldr	r0, [pc, #288]	; (80077b0 <cppLoop+0x1270>)
 8007690:	f7fa fce0 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007694:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007698:	f000 f9bc 	bl	8007a14 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800769c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80077f4 <cppLoop+0x12b4>
 80076a0:	4855      	ldr	r0, [pc, #340]	; (80077f8 <cppLoop+0x12b8>)
 80076a2:	f7fc fe99 	bl	80043d8 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80076a6:	4854      	ldr	r0, [pc, #336]	; (80077f8 <cppLoop+0x12b8>)
 80076a8:	f7fc fea6 	bl	80043f8 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80076ac:	f244 405c 	movw	r0, #17500	; 0x445c
 80076b0:	f000 f9b0 	bl	8007a14 <HAL_Delay>
			sys_ident.stop();
 80076b4:	4850      	ldr	r0, [pc, #320]	; (80077f8 <cppLoop+0x12b8>)
 80076b6:	f7fc feb3 	bl	8004420 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80076ba:	484f      	ldr	r0, [pc, #316]	; (80077f8 <cppLoop+0x12b8>)
 80076bc:	f7fc fe1a 	bl	80042f4 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80076c0:	2200      	movs	r2, #0
 80076c2:	f04f 31ff 	mov.w	r1, #4294967295
 80076c6:	483a      	ldr	r0, [pc, #232]	; (80077b0 <cppLoop+0x1270>)
 80076c8:	f7fa fcc4 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 80076cc:	e058      	b.n	8007780 <cppLoop+0x1240>

	case 13:
		led.fullColor('G');
 80076ce:	2147      	movs	r1, #71	; 0x47
 80076d0:	4837      	ldr	r0, [pc, #220]	; (80077b0 <cppLoop+0x1270>)
 80076d2:	f7fa fc03 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80076d6:	f7f9 fce3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076da:	2100      	movs	r1, #0
 80076dc:	2000      	movs	r0, #0
 80076de:	f7f9 fcef 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 80076e2:	4846      	ldr	r0, [pc, #280]	; (80077fc <cppLoop+0x12bc>)
 80076e4:	f7f9 fd16 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076e8:	2101      	movs	r1, #1
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f9 fce8 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80076f0:	4843      	ldr	r0, [pc, #268]	; (8007800 <cppLoop+0x12c0>)
 80076f2:	f7f9 fd0f 	bl	8001114 <lcd_printf>

		break;
 80076f6:	e044      	b.n	8007782 <cppLoop+0x1242>

	case 14:
		led.fullColor('B');
 80076f8:	2142      	movs	r1, #66	; 0x42
 80076fa:	482d      	ldr	r0, [pc, #180]	; (80077b0 <cppLoop+0x1270>)
 80076fc:	f7fa fbee 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007700:	f7f9 fcce 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007704:	2100      	movs	r1, #0
 8007706:	2000      	movs	r0, #0
 8007708:	f7f9 fcda 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 800770c:	483d      	ldr	r0, [pc, #244]	; (8007804 <cppLoop+0x12c4>)
 800770e:	f7f9 fd01 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007712:	2101      	movs	r1, #1
 8007714:	2000      	movs	r0, #0
 8007716:	f7f9 fcd3 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800771a:	4839      	ldr	r0, [pc, #228]	; (8007800 <cppLoop+0x12c0>)
 800771c:	f7f9 fcfa 	bl	8001114 <lcd_printf>

		break;
 8007720:	e02f      	b.n	8007782 <cppLoop+0x1242>

	case 15:
		led.fullColor('M');
 8007722:	214d      	movs	r1, #77	; 0x4d
 8007724:	4822      	ldr	r0, [pc, #136]	; (80077b0 <cppLoop+0x1270>)
 8007726:	f7fa fbd9 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800772a:	f7f9 fcb9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800772e:	2100      	movs	r1, #0
 8007730:	2000      	movs	r0, #0
 8007732:	f7f9 fcc5 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8007736:	4834      	ldr	r0, [pc, #208]	; (8007808 <cppLoop+0x12c8>)
 8007738:	f7f9 fcec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800773c:	2101      	movs	r1, #1
 800773e:	2000      	movs	r0, #0
 8007740:	f7f9 fcbe 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007744:	482e      	ldr	r0, [pc, #184]	; (8007800 <cppLoop+0x12c0>)
 8007746:	f7f9 fce5 	bl	8001114 <lcd_printf>

		break;
 800774a:	e01a      	b.n	8007782 <cppLoop+0x1242>

	default:
		break;
 800774c:	bf00      	nop
 800774e:	e018      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007750:	bf00      	nop
 8007752:	e016      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007754:	bf00      	nop
 8007756:	e014      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007758:	bf00      	nop
 800775a:	e012      	b.n	8007782 <cppLoop+0x1242>
		break;
 800775c:	bf00      	nop
 800775e:	e010      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007760:	bf00      	nop
 8007762:	e00e      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007764:	bf00      	nop
 8007766:	e00c      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007768:	bf00      	nop
 800776a:	e00a      	b.n	8007782 <cppLoop+0x1242>
		break;
 800776c:	bf00      	nop
 800776e:	e008      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007770:	bf00      	nop
 8007772:	e006      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007774:	bf00      	nop
 8007776:	e004      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007778:	bf00      	nop
 800777a:	e002      	b.n	8007782 <cppLoop+0x1242>
		break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <cppLoop+0x1242>
		break;
 8007780:	bf00      	nop

	}

	HAL_Delay(30);
 8007782:	201e      	movs	r0, #30
 8007784:	f000 f946 	bl	8007a14 <HAL_Delay>

}
 8007788:	bf00      	nop
 800778a:	3724      	adds	r7, #36	; 0x24
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007792:	bf00      	nop
 8007794:	f3af 8000 	nop.w
 8007798:	33333333 	.word	0x33333333
 800779c:	bfd33333 	.word	0xbfd33333
 80077a0:	33333333 	.word	0x33333333
 80077a4:	3fd33333 	.word	0x3fd33333
	...
 80077b0:	200005bc 	.word	0x200005bc
 80077b4:	08017d50 	.word	0x08017d50
 80077b8:	08017d00 	.word	0x08017d00
 80077bc:	200005b0 	.word	0x200005b0
 80077c0:	200005e0 	.word	0x200005e0
 80077c4:	200005b8 	.word	0x200005b8
 80077c8:	08017d58 	.word	0x08017d58
 80077cc:	08017d64 	.word	0x08017d64
 80077d0:	08017d70 	.word	0x08017d70
 80077d4:	08017d74 	.word	0x08017d74
 80077d8:	20015dc4 	.word	0x20015dc4
 80077dc:	00000000 	.word	0x00000000
 80077e0:	08017d80 	.word	0x08017d80
 80077e4:	08017d8c 	.word	0x08017d8c
 80077e8:	08017d98 	.word	0x08017d98
 80077ec:	20015e40 	.word	0x20015e40
 80077f0:	08017da4 	.word	0x08017da4
 80077f4:	3e99999a 	.word	0x3e99999a
 80077f8:	2001bc84 	.word	0x2001bc84
 80077fc:	08017dac 	.word	0x08017dac
 8007800:	08017db8 	.word	0x08017db8
 8007804:	08017dc4 	.word	0x08017dc4
 8007808:	08017dd0 	.word	0x08017dd0

0800780c <_Z41__static_initialization_and_destruction_0ii>:
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af04      	add	r7, sp, #16
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d13b      	bne.n	8007894 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007822:	4293      	cmp	r3, r2
 8007824:	d136      	bne.n	8007894 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 8007826:	481d      	ldr	r0, [pc, #116]	; (800789c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007828:	f7fa fc4c 	bl	80020c4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800782c:	481c      	ldr	r0, [pc, #112]	; (80078a0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800782e:	f7fc fbd3 	bl	8003fd8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007832:	481c      	ldr	r0, [pc, #112]	; (80078a4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007834:	f7fa fae2 	bl	8001dfc <_ZN8JoyStickC1Ev>
Motor motor;
 8007838:	481b      	ldr	r0, [pc, #108]	; (80078a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800783a:	f7fb ff88 	bl	800374e <_ZN5MotorC1Ev>
IMU imu;
 800783e:	481b      	ldr	r0, [pc, #108]	; (80078ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007840:	f7fa f8ea 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 8007844:	481a      	ldr	r0, [pc, #104]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007846:	f7fb fd27 	bl	8003298 <_ZN6LoggerC1Ev>
Encoder encoder;
 800784a:	481a      	ldr	r0, [pc, #104]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800784c:	f7f9 fc82 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007850:	4b16      	ldr	r3, [pc, #88]	; (80078ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007852:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007854:	4914      	ldr	r1, [pc, #80]	; (80078a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007856:	4818      	ldr	r0, [pc, #96]	; (80078b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007858:	f7fc fe06 	bl	8004468 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800785c:	4b16      	ldr	r3, [pc, #88]	; (80078b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800785e:	4a13      	ldr	r2, [pc, #76]	; (80078ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007860:	4914      	ldr	r1, [pc, #80]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007862:	4816      	ldr	r0, [pc, #88]	; (80078bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007864:	f7fc f858 	bl	8003918 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	4b13      	ldr	r3, [pc, #76]	; (80078bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800786e:	9302      	str	r3, [sp, #8]
 8007870:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800787c:	490a      	ldr	r1, [pc, #40]	; (80078a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800787e:	4810      	ldr	r0, [pc, #64]	; (80078c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007880:	f7fa ff4e 	bl	8002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007886:	490a      	ldr	r1, [pc, #40]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007888:	480e      	ldr	r0, [pc, #56]	; (80078c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800788a:	f7fc fce9 	bl	8004260 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800788e:	480e      	ldr	r0, [pc, #56]	; (80078c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007890:	f7fc f9c4 	bl	8003c1c <_ZN13PathFollowingC1Ev>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	200002b0 	.word	0x200002b0
 80078a0:	200005a8 	.word	0x200005a8
 80078a4:	200005b0 	.word	0x200005b0
 80078a8:	200005b8 	.word	0x200005b8
 80078ac:	200005cc 	.word	0x200005cc
 80078b0:	200005e0 	.word	0x200005e0
 80078b4:	20015da8 	.word	0x20015da8
 80078b8:	20015dc4 	.word	0x20015dc4
 80078bc:	20015e00 	.word	0x20015e00
 80078c0:	20015e40 	.word	0x20015e40
 80078c4:	2001bc84 	.word	0x2001bc84
 80078c8:	2001be90 	.word	0x2001be90

080078cc <_GLOBAL__sub_I_line_sensor>:
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80078d4:	2001      	movs	r0, #1
 80078d6:	f7ff ff99 	bl	800780c <_Z41__static_initialization_and_destruction_0ii>
 80078da:	bd80      	pop	{r7, pc}

080078dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80078dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007914 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80078e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80078e2:	e003      	b.n	80078ec <LoopCopyDataInit>

080078e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80078e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80078e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80078ea:	3104      	adds	r1, #4

080078ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80078f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80078f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80078f4:	d3f6      	bcc.n	80078e4 <CopyDataInit>
  ldr  r2, =_sbss
 80078f6:	4a0b      	ldr	r2, [pc, #44]	; (8007924 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80078f8:	e002      	b.n	8007900 <LoopFillZerobss>

080078fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80078fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80078fc:	f842 3b04 	str.w	r3, [r2], #4

08007900 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007902:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007904:	d3f9      	bcc.n	80078fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007906:	f7fe fca9 	bl	800625c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800790a:	f00b fdd5 	bl	80134b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800790e:	f7fc ffe3 	bl	80048d8 <main>
  bx  lr    
 8007912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007914:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007918:	080183d0 	.word	0x080183d0
  ldr  r0, =_sdata
 800791c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007920:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007924:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007928:	20037fd0 	.word	0x20037fd0

0800792c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800792c:	e7fe      	b.n	800792c <ADC_IRQHandler>
	...

08007930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <HAL_Init+0x40>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <HAL_Init+0x40>)
 800793a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800793e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <HAL_Init+0x40>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_Init+0x40>)
 8007946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800794a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <HAL_Init+0x40>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a07      	ldr	r2, [pc, #28]	; (8007970 <HAL_Init+0x40>)
 8007952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007958:	2003      	movs	r0, #3
 800795a:	f000 fd51 	bl	8008400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800795e:	2000      	movs	r0, #0
 8007960:	f000 f808 	bl	8007974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007964:	f7fd feca 	bl	80056fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023c00 	.word	0x40023c00

08007974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800797c:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <HAL_InitTick+0x54>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <HAL_InitTick+0x58>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800798a:	fbb3 f3f1 	udiv	r3, r3, r1
 800798e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fd69 	bl	800846a <HAL_SYSTICK_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e00e      	b.n	80079c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b0f      	cmp	r3, #15
 80079a6:	d80a      	bhi.n	80079be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079a8:	2200      	movs	r2, #0
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	f000 fd31 	bl	8008416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079b4:	4a06      	ldr	r2, [pc, #24]	; (80079d0 <HAL_InitTick+0x5c>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000000 	.word	0x20000000
 80079cc:	20000008 	.word	0x20000008
 80079d0:	20000004 	.word	0x20000004

080079d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_IncTick+0x20>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <HAL_IncTick+0x24>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4413      	add	r3, r2
 80079e4:	4a04      	ldr	r2, [pc, #16]	; (80079f8 <HAL_IncTick+0x24>)
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000008 	.word	0x20000008
 80079f8:	20035f58 	.word	0x20035f58

080079fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_GetTick+0x14>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20035f58 	.word	0x20035f58

08007a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a1c:	f7ff ffee 	bl	80079fc <HAL_GetTick>
 8007a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d005      	beq.n	8007a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_Delay+0x40>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a3a:	bf00      	nop
 8007a3c:	f7ff ffde 	bl	80079fc <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d8f7      	bhi.n	8007a3c <HAL_Delay+0x28>
  {
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000008 	.word	0x20000008

08007a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e033      	b.n	8007ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fd fe68 	bl	800574c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d118      	bne.n	8007ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a9e:	f023 0302 	bic.w	r3, r3, #2
 8007aa2:	f043 0202 	orr.w	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa5a 	bl	8007f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	f043 0201 	orr.w	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ac6:	e001      	b.n	8007acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_ADC_Start_DMA+0x1e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0cc      	b.n	8007c98 <HAL_ADC_Start_DMA+0x1b8>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d018      	beq.n	8007b46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007b24:	4b5e      	ldr	r3, [pc, #376]	; (8007ca0 <HAL_ADC_Start_DMA+0x1c0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5e      	ldr	r2, [pc, #376]	; (8007ca4 <HAL_ADC_Start_DMA+0x1c4>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	0c9a      	lsrs	r2, r3, #18
 8007b30:	4613      	mov	r3, r2
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	4413      	add	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007b38:	e002      	b.n	8007b40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f9      	bne.n	8007b3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 80a0 	bne.w	8007c96 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b94:	d106      	bne.n	8007ba4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	f023 0206 	bic.w	r2, r3, #6
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8007ba2:	e002      	b.n	8007baa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007bb2:	4b3d      	ldr	r3, [pc, #244]	; (8007ca8 <HAL_ADC_Start_DMA+0x1c8>)
 8007bb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	4a3c      	ldr	r2, [pc, #240]	; (8007cac <HAL_ADC_Start_DMA+0x1cc>)
 8007bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	4a3b      	ldr	r2, [pc, #236]	; (8007cb0 <HAL_ADC_Start_DMA+0x1d0>)
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	4a3a      	ldr	r2, [pc, #232]	; (8007cb4 <HAL_ADC_Start_DMA+0x1d4>)
 8007bcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007bd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007be6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689a      	ldr	r2, [r3, #8]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bf6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	334c      	adds	r3, #76	; 0x4c
 8007c02:	4619      	mov	r1, r3
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f000 fcea 	bl	80085e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f003 031f 	and.w	r3, r3, #31
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d12a      	bne.n	8007c6e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a26      	ldr	r2, [pc, #152]	; (8007cb8 <HAL_ADC_Start_DMA+0x1d8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d015      	beq.n	8007c4e <HAL_ADC_Start_DMA+0x16e>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a25      	ldr	r2, [pc, #148]	; (8007cbc <HAL_ADC_Start_DMA+0x1dc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d105      	bne.n	8007c38 <HAL_ADC_Start_DMA+0x158>
 8007c2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ca8 <HAL_ADC_Start_DMA+0x1c8>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a20      	ldr	r2, [pc, #128]	; (8007cc0 <HAL_ADC_Start_DMA+0x1e0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d129      	bne.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
 8007c42:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_ADC_Start_DMA+0x1c8>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	d823      	bhi.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11c      	bne.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	e013      	b.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a11      	ldr	r2, [pc, #68]	; (8007cb8 <HAL_ADC_Start_DMA+0x1d8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d10e      	bne.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d107      	bne.n	8007c96 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c94:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000000 	.word	0x20000000
 8007ca4:	431bde83 	.word	0x431bde83
 8007ca8:	40012300 	.word	0x40012300
 8007cac:	0800815d 	.word	0x0800815d
 8007cb0:	08008217 	.word	0x08008217
 8007cb4:	08008233 	.word	0x08008233
 8007cb8:	40012000 	.word	0x40012000
 8007cbc:	40012100 	.word	0x40012100
 8007cc0:	40012200 	.word	0x40012200

08007cc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_ADC_ConfigChannel+0x1c>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e113      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x244>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	d925      	bls.n	8007d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68d9      	ldr	r1, [r3, #12]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4413      	add	r3, r2
 8007d40:	3b1e      	subs	r3, #30
 8007d42:	2207      	movs	r2, #7
 8007d44:	fa02 f303 	lsl.w	r3, r2, r3
 8007d48:	43da      	mvns	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	400a      	ands	r2, r1
 8007d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68d9      	ldr	r1, [r3, #12]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4618      	mov	r0, r3
 8007d64:	4603      	mov	r3, r0
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4403      	add	r3, r0
 8007d6a:	3b1e      	subs	r3, #30
 8007d6c:	409a      	lsls	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	60da      	str	r2, [r3, #12]
 8007d76:	e022      	b.n	8007dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6919      	ldr	r1, [r3, #16]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	4613      	mov	r3, r2
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	2207      	movs	r2, #7
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43da      	mvns	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	400a      	ands	r2, r1
 8007d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6919      	ldr	r1, [r3, #16]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4403      	add	r3, r0
 8007db4:	409a      	lsls	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	d824      	bhi.n	8007e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3b05      	subs	r3, #5
 8007dd8:	221f      	movs	r2, #31
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43da      	mvns	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	400a      	ands	r2, r1
 8007de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4618      	mov	r0, r3
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	3b05      	subs	r3, #5
 8007e02:	fa00 f203 	lsl.w	r2, r0, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e0e:	e04c      	b.n	8007eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b0c      	cmp	r3, #12
 8007e16:	d824      	bhi.n	8007e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	3b23      	subs	r3, #35	; 0x23
 8007e2a:	221f      	movs	r2, #31
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	43da      	mvns	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	400a      	ands	r2, r1
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4618      	mov	r0, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	3b23      	subs	r3, #35	; 0x23
 8007e54:	fa00 f203 	lsl.w	r2, r0, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007e60:	e023      	b.n	8007eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	3b41      	subs	r3, #65	; 0x41
 8007e74:	221f      	movs	r2, #31
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43da      	mvns	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	400a      	ands	r2, r1
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4618      	mov	r0, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3b41      	subs	r3, #65	; 0x41
 8007e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007eaa:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <HAL_ADC_ConfigChannel+0x250>)
 8007eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a28      	ldr	r2, [pc, #160]	; (8007f54 <HAL_ADC_ConfigChannel+0x254>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10f      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x1d8>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b12      	cmp	r3, #18
 8007ebe:	d10b      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1d      	ldr	r2, [pc, #116]	; (8007f54 <HAL_ADC_ConfigChannel+0x254>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d12b      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x23a>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1c      	ldr	r2, [pc, #112]	; (8007f58 <HAL_ADC_ConfigChannel+0x258>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <HAL_ADC_ConfigChannel+0x1f4>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b11      	cmp	r3, #17
 8007ef2:	d122      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <HAL_ADC_ConfigChannel+0x258>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d111      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <HAL_ADC_ConfigChannel+0x25c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a11      	ldr	r2, [pc, #68]	; (8007f60 <HAL_ADC_ConfigChannel+0x260>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	0c9a      	lsrs	r2, r3, #18
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f2c:	e002      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f9      	bne.n	8007f2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40012300 	.word	0x40012300
 8007f54:	40012000 	.word	0x40012000
 8007f58:	10000012 	.word	0x10000012
 8007f5c:	20000000 	.word	0x20000000
 8007f60:	431bde83 	.word	0x431bde83

08007f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f6c:	4b79      	ldr	r3, [pc, #484]	; (8008154 <ADC_Init+0x1f0>)
 8007f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6859      	ldr	r1, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	021a      	lsls	r2, r3, #8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6859      	ldr	r1, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	4a58      	ldr	r2, [pc, #352]	; (8008158 <ADC_Init+0x1f4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800800a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6899      	ldr	r1, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800802c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6899      	ldr	r1, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	609a      	str	r2, [r3, #8]
 8008040:	e00f      	b.n	8008062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0202 	bic.w	r2, r2, #2
 8008070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6899      	ldr	r1, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7e1b      	ldrb	r3, [r3, #24]
 800807c:	005a      	lsls	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01b      	beq.n	80080c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800809e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80080ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6859      	ldr	r1, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	3b01      	subs	r3, #1
 80080bc:	035a      	lsls	r2, r3, #13
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	e007      	b.n	80080d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	051a      	lsls	r2, r3, #20
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800810c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800811a:	025a      	lsls	r2, r3, #9
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	029a      	lsls	r2, r3, #10
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40012300 	.word	0x40012300
 8008158:	0f000001 	.word	0x0f000001

0800815c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d13c      	bne.n	80081f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d12b      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008194:	2b00      	cmp	r3, #0
 8008196:	d127      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d119      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0220 	bic.w	r2, r2, #32
 80081c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	f043 0201 	orr.w	r2, r3, #1
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff fd6b 	bl	8007cc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80081ee:	e00e      	b.n	800820e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fd75 	bl	8007cec <HAL_ADC_ErrorCallback>
}
 8008202:	e004      	b.n	800820e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fd57 	bl	8007cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2240      	movs	r2, #64	; 0x40
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fd4a 	bl	8007cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800827c:	4013      	ands	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800828c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008292:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	60d3      	str	r3, [r2, #12]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__NVIC_GetPriorityGrouping+0x18>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	f003 0307 	and.w	r3, r3, #7
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	e000ed00 	.word	0xe000ed00

080082c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db0b      	blt.n	80082ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	f003 021f 	and.w	r2, r3, #31
 80082dc:	4907      	ldr	r1, [pc, #28]	; (80082fc <__NVIC_EnableIRQ+0x38>)
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	2001      	movs	r0, #1
 80082e6:	fa00 f202 	lsl.w	r2, r0, r2
 80082ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	e000e100 	.word	0xe000e100

08008300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800830c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	db0a      	blt.n	800832a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	490c      	ldr	r1, [pc, #48]	; (800834c <__NVIC_SetPriority+0x4c>)
 800831a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831e:	0112      	lsls	r2, r2, #4
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	440b      	add	r3, r1
 8008324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008328:	e00a      	b.n	8008340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4908      	ldr	r1, [pc, #32]	; (8008350 <__NVIC_SetPriority+0x50>)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	3b04      	subs	r3, #4
 8008338:	0112      	lsls	r2, r2, #4
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	440b      	add	r3, r1
 800833e:	761a      	strb	r2, [r3, #24]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	e000e100 	.word	0xe000e100
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008354:	b480      	push	{r7}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f1c3 0307 	rsb	r3, r3, #7
 800836e:	2b04      	cmp	r3, #4
 8008370:	bf28      	it	cs
 8008372:	2304      	movcs	r3, #4
 8008374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	3304      	adds	r3, #4
 800837a:	2b06      	cmp	r3, #6
 800837c:	d902      	bls.n	8008384 <NVIC_EncodePriority+0x30>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	3b03      	subs	r3, #3
 8008382:	e000      	b.n	8008386 <NVIC_EncodePriority+0x32>
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008388:	f04f 32ff 	mov.w	r2, #4294967295
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	43da      	mvns	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	401a      	ands	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800839c:	f04f 31ff 	mov.w	r1, #4294967295
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	43d9      	mvns	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083ac:	4313      	orrs	r3, r2
         );
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3724      	adds	r7, #36	; 0x24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083cc:	d301      	bcc.n	80083d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083ce:	2301      	movs	r3, #1
 80083d0:	e00f      	b.n	80083f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <SysTick_Config+0x40>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083da:	210f      	movs	r1, #15
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	f7ff ff8e 	bl	8008300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <SysTick_Config+0x40>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083ea:	4b04      	ldr	r3, [pc, #16]	; (80083fc <SysTick_Config+0x40>)
 80083ec:	2207      	movs	r2, #7
 80083ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	e000e010 	.word	0xe000e010

08008400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff29 	bl	8008260 <__NVIC_SetPriorityGrouping>
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	4603      	mov	r3, r0
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008428:	f7ff ff3e 	bl	80082a8 <__NVIC_GetPriorityGrouping>
 800842c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f7ff ff8e 	bl	8008354 <NVIC_EncodePriority>
 8008438:	4602      	mov	r2, r0
 800843a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff ff5d 	bl	8008300 <__NVIC_SetPriority>
}
 8008446:	bf00      	nop
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	4603      	mov	r3, r0
 8008456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff ff31 	bl	80082c4 <__NVIC_EnableIRQ>
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff ffa2 	bl	80083bc <SysTick_Config>
 8008478:	4603      	mov	r3, r0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008490:	f7ff fab4 	bl	80079fc <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e099      	b.n	80085d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0201 	bic.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084c0:	e00f      	b.n	80084e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084c2:	f7ff fa9b 	bl	80079fc <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	d908      	bls.n	80084e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2203      	movs	r2, #3
 80084da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e078      	b.n	80085d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e8      	bne.n	80084c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4b38      	ldr	r3, [pc, #224]	; (80085dc <HAL_DMA_Init+0x158>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800850e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800851a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b04      	cmp	r3, #4
 800853a:	d107      	bne.n	800854c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	4313      	orrs	r3, r2
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0307 	bic.w	r3, r3, #7
 8008562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b04      	cmp	r3, #4
 8008574:	d117      	bne.n	80085a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00e      	beq.n	80085a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fa9d 	bl	8008ac8 <DMA_CheckFifoParam>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d008      	beq.n	80085a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085a2:	2301      	movs	r3, #1
 80085a4:	e016      	b.n	80085d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa54 	bl	8008a5c <DMA_CalcBaseAndBitshift>
 80085b4:	4603      	mov	r3, r0
 80085b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085bc:	223f      	movs	r2, #63	; 0x3f
 80085be:	409a      	lsls	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	f010803f 	.word	0xf010803f

080085e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_DMA_Start_IT+0x26>
 8008602:	2302      	movs	r3, #2
 8008604:	e040      	b.n	8008688 <HAL_DMA_Start_IT+0xa8>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b01      	cmp	r3, #1
 8008618:	d12f      	bne.n	800867a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f9e6 	bl	8008a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008638:	223f      	movs	r2, #63	; 0x3f
 800863a:	409a      	lsls	r2, r3
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0216 	orr.w	r2, r2, #22
 800864e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0208 	orr.w	r2, r2, #8
 8008666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e005      	b.n	8008686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008682:	2302      	movs	r3, #2
 8008684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d004      	beq.n	80086ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2280      	movs	r2, #128	; 0x80
 80086a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e00c      	b.n	80086c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2205      	movs	r2, #5
 80086b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086e0:	4b92      	ldr	r3, [pc, #584]	; (800892c <HAL_DMA_IRQHandler+0x258>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a92      	ldr	r2, [pc, #584]	; (8008930 <HAL_DMA_IRQHandler+0x25c>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	0a9b      	lsrs	r3, r3, #10
 80086ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	2208      	movs	r2, #8
 8008700:	409a      	lsls	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4013      	ands	r3, r2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01a      	beq.n	8008740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d013      	beq.n	8008740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0204 	bic.w	r2, r2, #4
 8008726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872c:	2208      	movs	r2, #8
 800872e:	409a      	lsls	r2, r3
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008738:	f043 0201 	orr.w	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008744:	2201      	movs	r2, #1
 8008746:	409a      	lsls	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d012      	beq.n	8008776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008762:	2201      	movs	r2, #1
 8008764:	409a      	lsls	r2, r3
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876e:	f043 0202 	orr.w	r2, r3, #2
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877a:	2204      	movs	r2, #4
 800877c:	409a      	lsls	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4013      	ands	r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d012      	beq.n	80087ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008798:	2204      	movs	r2, #4
 800879a:	409a      	lsls	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a4:	f043 0204 	orr.w	r2, r3, #4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	2210      	movs	r2, #16
 80087b2:	409a      	lsls	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d043      	beq.n	8008844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d03c      	beq.n	8008844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ce:	2210      	movs	r2, #16
 80087d0:	409a      	lsls	r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d018      	beq.n	8008816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d108      	bne.n	8008804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d024      	beq.n	8008844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
 8008802:	e01f      	b.n	8008844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01b      	beq.n	8008844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
 8008814:	e016      	b.n	8008844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0208 	bic.w	r2, r2, #8
 8008832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008848:	2220      	movs	r2, #32
 800884a:	409a      	lsls	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4013      	ands	r3, r2
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 808e 	beq.w	8008972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8086 	beq.w	8008972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886a:	2220      	movs	r2, #32
 800886c:	409a      	lsls	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b05      	cmp	r3, #5
 800887c:	d136      	bne.n	80088ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0216 	bic.w	r2, r2, #22
 800888c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695a      	ldr	r2, [r3, #20]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800889c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <HAL_DMA_IRQHandler+0x1da>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0208 	bic.w	r2, r2, #8
 80088bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c2:	223f      	movs	r2, #63	; 0x3f
 80088c4:	409a      	lsls	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d07d      	beq.n	80089de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
        }
        return;
 80088ea:	e078      	b.n	80089de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01c      	beq.n	8008934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d108      	bne.n	800891a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890c:	2b00      	cmp	r3, #0
 800890e:	d030      	beq.n	8008972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	4798      	blx	r3
 8008918:	e02b      	b.n	8008972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d027      	beq.n	8008972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3
 800892a:	e022      	b.n	8008972 <HAL_DMA_IRQHandler+0x29e>
 800892c:	20000000 	.word	0x20000000
 8008930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0210 	bic.w	r2, r2, #16
 8008950:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008976:	2b00      	cmp	r3, #0
 8008978:	d032      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d022      	beq.n	80089cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2205      	movs	r2, #5
 800898a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d307      	bcc.n	80089ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f2      	bne.n	800899e <HAL_DMA_IRQHandler+0x2ca>
 80089b8:	e000      	b.n	80089bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80089ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
 80089dc:	e000      	b.n	80089e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80089de:	bf00      	nop
    }
  }
}
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop

080089e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d108      	bne.n	8008a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a3e:	e007      	b.n	8008a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	60da      	str	r2, [r3, #12]
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	3b10      	subs	r3, #16
 8008a6c:	4a14      	ldr	r2, [pc, #80]	; (8008ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	091b      	lsrs	r3, r3, #4
 8008a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a76:	4a13      	ldr	r2, [pc, #76]	; (8008ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d909      	bls.n	8008a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a92:	f023 0303 	bic.w	r3, r3, #3
 8008a96:	1d1a      	adds	r2, r3, #4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8008a9c:	e007      	b.n	8008aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	aaaaaaab 	.word	0xaaaaaaab
 8008ac4:	08017e10 	.word	0x08017e10

08008ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11f      	bne.n	8008b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d855      	bhi.n	8008b94 <DMA_CheckFifoParam+0xcc>
 8008ae8:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <DMA_CheckFifoParam+0x28>)
 8008aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aee:	bf00      	nop
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b13 	.word	0x08008b13
 8008af8:	08008b01 	.word	0x08008b01
 8008afc:	08008b95 	.word	0x08008b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d045      	beq.n	8008b98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b10:	e042      	b.n	8008b98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b1a:	d13f      	bne.n	8008b9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b20:	e03c      	b.n	8008b9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2a:	d121      	bne.n	8008b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d836      	bhi.n	8008ba0 <DMA_CheckFifoParam+0xd8>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <DMA_CheckFifoParam+0x70>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b49 	.word	0x08008b49
 8008b44:	08008b61 	.word	0x08008b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e02f      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d024      	beq.n	8008ba4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b5e:	e021      	b.n	8008ba4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b68:	d11e      	bne.n	8008ba8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b6e:	e01b      	b.n	8008ba8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d902      	bls.n	8008b7c <DMA_CheckFifoParam+0xb4>
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d003      	beq.n	8008b82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b7a:	e018      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b80:	e015      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
      break;
 8008b92:	e00b      	b.n	8008bac <DMA_CheckFifoParam+0xe4>
      break;
 8008b94:	bf00      	nop
 8008b96:	e00a      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e008      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e006      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e004      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e002      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;   
 8008ba8:	bf00      	nop
 8008baa:	e000      	b.n	8008bae <DMA_CheckFifoParam+0xe6>
      break;
 8008bac:	bf00      	nop
    }
  } 
  
  return status; 
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b089      	sub	sp, #36	; 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	e177      	b.n	8008ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008bd8:	2201      	movs	r2, #1
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4013      	ands	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	f040 8166 	bne.w	8008ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d00b      	beq.n	8008c16 <HAL_GPIO_Init+0x5a>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d007      	beq.n	8008c16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c0a:	2b11      	cmp	r3, #17
 8008c0c:	d003      	beq.n	8008c16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b12      	cmp	r3, #18
 8008c14:	d130      	bne.n	8008c78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	2203      	movs	r2, #3
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	43db      	mvns	r3, r3
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	43db      	mvns	r3, r3
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	091b      	lsrs	r3, r3, #4
 8008c62:	f003 0201 	and.w	r2, r3, #1
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	2203      	movs	r2, #3
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d003      	beq.n	8008cb8 <HAL_GPIO_Init+0xfc>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b12      	cmp	r3, #18
 8008cb6:	d123      	bne.n	8008d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	08da      	lsrs	r2, r3, #3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3208      	adds	r2, #8
 8008cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	220f      	movs	r2, #15
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691a      	ldr	r2, [r3, #16]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	08da      	lsrs	r2, r3, #3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3208      	adds	r2, #8
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	43db      	mvns	r3, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 0203 	and.w	r2, r3, #3
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	fa02 f303 	lsl.w	r3, r2, r3
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80c0 	beq.w	8008ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	4b65      	ldr	r3, [pc, #404]	; (8008edc <HAL_GPIO_Init+0x320>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	4a64      	ldr	r2, [pc, #400]	; (8008edc <HAL_GPIO_Init+0x320>)
 8008d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d50:	6453      	str	r3, [r2, #68]	; 0x44
 8008d52:	4b62      	ldr	r3, [pc, #392]	; (8008edc <HAL_GPIO_Init+0x320>)
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d5e:	4a60      	ldr	r2, [pc, #384]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	3302      	adds	r3, #2
 8008d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	220f      	movs	r2, #15
 8008d76:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a57      	ldr	r2, [pc, #348]	; (8008ee4 <HAL_GPIO_Init+0x328>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d037      	beq.n	8008dfa <HAL_GPIO_Init+0x23e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a56      	ldr	r2, [pc, #344]	; (8008ee8 <HAL_GPIO_Init+0x32c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d031      	beq.n	8008df6 <HAL_GPIO_Init+0x23a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a55      	ldr	r2, [pc, #340]	; (8008eec <HAL_GPIO_Init+0x330>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d02b      	beq.n	8008df2 <HAL_GPIO_Init+0x236>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a54      	ldr	r2, [pc, #336]	; (8008ef0 <HAL_GPIO_Init+0x334>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d025      	beq.n	8008dee <HAL_GPIO_Init+0x232>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a53      	ldr	r2, [pc, #332]	; (8008ef4 <HAL_GPIO_Init+0x338>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d01f      	beq.n	8008dea <HAL_GPIO_Init+0x22e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a52      	ldr	r2, [pc, #328]	; (8008ef8 <HAL_GPIO_Init+0x33c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d019      	beq.n	8008de6 <HAL_GPIO_Init+0x22a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a51      	ldr	r2, [pc, #324]	; (8008efc <HAL_GPIO_Init+0x340>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <HAL_GPIO_Init+0x226>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a50      	ldr	r2, [pc, #320]	; (8008f00 <HAL_GPIO_Init+0x344>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00d      	beq.n	8008dde <HAL_GPIO_Init+0x222>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a4f      	ldr	r2, [pc, #316]	; (8008f04 <HAL_GPIO_Init+0x348>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <HAL_GPIO_Init+0x21e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a4e      	ldr	r2, [pc, #312]	; (8008f08 <HAL_GPIO_Init+0x34c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d101      	bne.n	8008dd6 <HAL_GPIO_Init+0x21a>
 8008dd2:	2309      	movs	r3, #9
 8008dd4:	e012      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e010      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dda:	2308      	movs	r3, #8
 8008ddc:	e00e      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dde:	2307      	movs	r3, #7
 8008de0:	e00c      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008de2:	2306      	movs	r3, #6
 8008de4:	e00a      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008de6:	2305      	movs	r3, #5
 8008de8:	e008      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dea:	2304      	movs	r3, #4
 8008dec:	e006      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dee:	2303      	movs	r3, #3
 8008df0:	e004      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e002      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <HAL_GPIO_Init+0x240>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	f002 0203 	and.w	r2, r2, #3
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	4093      	lsls	r3, r2
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e0c:	4934      	ldr	r1, [pc, #208]	; (8008ee0 <HAL_GPIO_Init+0x324>)
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	3302      	adds	r3, #2
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e1a:	4b3c      	ldr	r3, [pc, #240]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	43db      	mvns	r3, r3
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	4013      	ands	r3, r2
 8008e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e3e:	4a33      	ldr	r2, [pc, #204]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008e44:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	4013      	ands	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e68:	4a28      	ldr	r2, [pc, #160]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e6e:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e92:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ebc:	4a13      	ldr	r2, [pc, #76]	; (8008f0c <HAL_GPIO_Init+0x350>)
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b0f      	cmp	r3, #15
 8008ecc:	f67f ae84 	bls.w	8008bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	3724      	adds	r7, #36	; 0x24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	40013800 	.word	0x40013800
 8008ee4:	40020000 	.word	0x40020000
 8008ee8:	40020400 	.word	0x40020400
 8008eec:	40020800 	.word	0x40020800
 8008ef0:	40020c00 	.word	0x40020c00
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40021400 	.word	0x40021400
 8008efc:	40021800 	.word	0x40021800
 8008f00:	40021c00 	.word	0x40021c00
 8008f04:	40022000 	.word	0x40022000
 8008f08:	40022400 	.word	0x40022400
 8008f0c:	40013c00 	.word	0x40013c00

08008f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	887b      	ldrh	r3, [r7, #2]
 8008f22:	4013      	ands	r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e001      	b.n	8008f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	807b      	strh	r3, [r7, #2]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f50:	787b      	ldrb	r3, [r7, #1]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f56:	887a      	ldrh	r2, [r7, #2]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f5c:	e003      	b.n	8008f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f5e:	887b      	ldrh	r3, [r7, #2]
 8008f60:	041a      	lsls	r2, r3, #16
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	619a      	str	r2, [r3, #24]
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
	...

08008f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e11f      	b.n	80091c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fc fc88 	bl	80058b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2224      	movs	r2, #36	; 0x24
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fd8:	f001 f96e 	bl	800a2b8 <HAL_RCC_GetPCLK1Freq>
 8008fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4a7b      	ldr	r2, [pc, #492]	; (80091d0 <HAL_I2C_Init+0x25c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d807      	bhi.n	8008ff8 <HAL_I2C_Init+0x84>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a7a      	ldr	r2, [pc, #488]	; (80091d4 <HAL_I2C_Init+0x260>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	bf94      	ite	ls
 8008ff0:	2301      	movls	r3, #1
 8008ff2:	2300      	movhi	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	e006      	b.n	8009006 <HAL_I2C_Init+0x92>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a77      	ldr	r2, [pc, #476]	; (80091d8 <HAL_I2C_Init+0x264>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bf94      	ite	ls
 8009000:	2301      	movls	r3, #1
 8009002:	2300      	movhi	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e0db      	b.n	80091c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a72      	ldr	r2, [pc, #456]	; (80091dc <HAL_I2C_Init+0x268>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	0c9b      	lsrs	r3, r3, #18
 8009018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	4a64      	ldr	r2, [pc, #400]	; (80091d0 <HAL_I2C_Init+0x25c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d802      	bhi.n	8009048 <HAL_I2C_Init+0xd4>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	3301      	adds	r3, #1
 8009046:	e009      	b.n	800905c <HAL_I2C_Init+0xe8>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	4a63      	ldr	r2, [pc, #396]	; (80091e0 <HAL_I2C_Init+0x26c>)
 8009054:	fba2 2303 	umull	r2, r3, r2, r3
 8009058:	099b      	lsrs	r3, r3, #6
 800905a:	3301      	adds	r3, #1
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	430b      	orrs	r3, r1
 8009062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800906e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4956      	ldr	r1, [pc, #344]	; (80091d0 <HAL_I2C_Init+0x25c>)
 8009078:	428b      	cmp	r3, r1
 800907a:	d80d      	bhi.n	8009098 <HAL_I2C_Init+0x124>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	1e59      	subs	r1, r3, #1
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	fbb1 f3f3 	udiv	r3, r1, r3
 800908a:	3301      	adds	r3, #1
 800908c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009090:	2b04      	cmp	r3, #4
 8009092:	bf38      	it	cc
 8009094:	2304      	movcc	r3, #4
 8009096:	e04f      	b.n	8009138 <HAL_I2C_Init+0x1c4>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d111      	bne.n	80090c4 <HAL_I2C_Init+0x150>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	1e58      	subs	r0, r3, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6859      	ldr	r1, [r3, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	440b      	add	r3, r1
 80090ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80090b2:	3301      	adds	r3, #1
 80090b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bf0c      	ite	eq
 80090bc:	2301      	moveq	r3, #1
 80090be:	2300      	movne	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	e012      	b.n	80090ea <HAL_I2C_Init+0x176>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	1e58      	subs	r0, r3, #1
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6859      	ldr	r1, [r3, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	0099      	lsls	r1, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80090da:	3301      	adds	r3, #1
 80090dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf0c      	ite	eq
 80090e4:	2301      	moveq	r3, #1
 80090e6:	2300      	movne	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_I2C_Init+0x17e>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e022      	b.n	8009138 <HAL_I2C_Init+0x1c4>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10e      	bne.n	8009118 <HAL_I2C_Init+0x1a4>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1e58      	subs	r0, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6859      	ldr	r1, [r3, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	440b      	add	r3, r1
 8009108:	fbb0 f3f3 	udiv	r3, r0, r3
 800910c:	3301      	adds	r3, #1
 800910e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009116:	e00f      	b.n	8009138 <HAL_I2C_Init+0x1c4>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	1e58      	subs	r0, r3, #1
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6859      	ldr	r1, [r3, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	0099      	lsls	r1, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	fbb0 f3f3 	udiv	r3, r0, r3
 800912e:	3301      	adds	r3, #1
 8009130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	6809      	ldr	r1, [r1, #0]
 800913c:	4313      	orrs	r3, r2
 800913e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	69da      	ldr	r2, [r3, #28]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	6911      	ldr	r1, [r2, #16]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	68d2      	ldr	r2, [r2, #12]
 8009172:	4311      	orrs	r1, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	430b      	orrs	r3, r1
 800917a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	695a      	ldr	r2, [r3, #20]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	000186a0 	.word	0x000186a0
 80091d4:	001e847f 	.word	0x001e847f
 80091d8:	003d08ff 	.word	0x003d08ff
 80091dc:	431bde83 	.word	0x431bde83
 80091e0:	10624dd3 	.word	0x10624dd3

080091e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	461a      	mov	r2, r3
 80091f0:	460b      	mov	r3, r1
 80091f2:	817b      	strh	r3, [r7, #10]
 80091f4:	4613      	mov	r3, r2
 80091f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091f8:	f7fe fc00 	bl	80079fc <HAL_GetTick>
 80091fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b20      	cmp	r3, #32
 8009208:	f040 80e0 	bne.w	80093cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	2319      	movs	r3, #25
 8009212:	2201      	movs	r2, #1
 8009214:	4970      	ldr	r1, [pc, #448]	; (80093d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fc58 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009222:	2302      	movs	r3, #2
 8009224:	e0d3      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_I2C_Master_Transmit+0x50>
 8009230:	2302      	movs	r3, #2
 8009232:	e0cc      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b01      	cmp	r3, #1
 8009248:	d007      	beq.n	800925a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0201 	orr.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2221      	movs	r2, #33	; 0x21
 800926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2210      	movs	r2, #16
 8009276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	893a      	ldrh	r2, [r7, #8]
 800928a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4a50      	ldr	r2, [pc, #320]	; (80093dc <HAL_I2C_Master_Transmit+0x1f8>)
 800929a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800929c:	8979      	ldrh	r1, [r7, #10]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fac2 	bl	800982c <I2C_MasterRequestWrite>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e08d      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80092c8:	e066      	b.n	8009398 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	6a39      	ldr	r1, [r7, #32]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fcd2 	bl	8009c78 <I2C_WaitOnTXEFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00d      	beq.n	80092f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d107      	bne.n	80092f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e06b      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	781a      	ldrb	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931e:	3b01      	subs	r3, #1
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b04      	cmp	r3, #4
 8009332:	d11b      	bne.n	800936c <HAL_I2C_Master_Transmit+0x188>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	d017      	beq.n	800936c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009356:	b29b      	uxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	6a39      	ldr	r1, [r7, #32]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fcc2 	bl	8009cfa <I2C_WaitOnBTFFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00d      	beq.n	8009398 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009380:	2b04      	cmp	r3, #4
 8009382:	d107      	bne.n	8009394 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009392:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e01a      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939c:	2b00      	cmp	r3, #0
 800939e:	d194      	bne.n	80092ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	e000      	b.n	80093ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80093cc:	2302      	movs	r3, #2
  }
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	00100002 	.word	0x00100002
 80093dc:	ffff0000 	.word	0xffff0000

080093e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08c      	sub	sp, #48	; 0x30
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	607a      	str	r2, [r7, #4]
 80093ea:	461a      	mov	r2, r3
 80093ec:	460b      	mov	r3, r1
 80093ee:	817b      	strh	r3, [r7, #10]
 80093f0:	4613      	mov	r3, r2
 80093f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093f4:	f7fe fb02 	bl	80079fc <HAL_GetTick>
 80093f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b20      	cmp	r3, #32
 8009404:	f040 820b 	bne.w	800981e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2319      	movs	r3, #25
 800940e:	2201      	movs	r2, #1
 8009410:	497c      	ldr	r1, [pc, #496]	; (8009604 <HAL_I2C_Master_Receive+0x224>)
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fb5a 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800941e:	2302      	movs	r3, #2
 8009420:	e1fe      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_I2C_Master_Receive+0x50>
 800942c:	2302      	movs	r3, #2
 800942e:	e1f7      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b01      	cmp	r3, #1
 8009444:	d007      	beq.n	8009456 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0201 	orr.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2222      	movs	r2, #34	; 0x22
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2210      	movs	r2, #16
 8009472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	893a      	ldrh	r2, [r7, #8]
 8009486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a5c      	ldr	r2, [pc, #368]	; (8009608 <HAL_I2C_Master_Receive+0x228>)
 8009496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009498:	8979      	ldrh	r1, [r7, #10]
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fa46 	bl	8009930 <I2C_MasterRequestRead>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e1b8      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d113      	bne.n	80094de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b6:	2300      	movs	r3, #0
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	623b      	str	r3, [r7, #32]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	623b      	str	r3, [r7, #32]
 80094ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e18c      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d11b      	bne.n	800951e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	61fb      	str	r3, [r7, #28]
 800950a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e16c      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009522:	2b02      	cmp	r3, #2
 8009524:	d11b      	bne.n	800955e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009534:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	e14c      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800956c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009584:	e138      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958a:	2b03      	cmp	r3, #3
 800958c:	f200 80f1 	bhi.w	8009772 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009594:	2b01      	cmp	r3, #1
 8009596:	d123      	bne.n	80095e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fbed 	bl	8009d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e139      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095de:	e10b      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d14e      	bne.n	8009686 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	2200      	movs	r2, #0
 80095f0:	4906      	ldr	r1, [pc, #24]	; (800960c <HAL_I2C_Master_Receive+0x22c>)
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fa6a 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d008      	beq.n	8009610 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e10e      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
 8009602:	bf00      	nop
 8009604:	00100002 	.word	0x00100002
 8009608:	ffff0000 	.word	0xffff0000
 800960c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800961e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009684:	e0b8      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	2200      	movs	r2, #0
 800968e:	4966      	ldr	r1, [pc, #408]	; (8009828 <HAL_I2C_Master_Receive+0x448>)
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 fa1b 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0bf      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2200      	movs	r2, #0
 80096ea:	494f      	ldr	r1, [pc, #316]	; (8009828 <HAL_I2C_Master_Receive+0x448>)
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 f9ed 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e091      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800970a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975a:	3b01      	subs	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009766:	b29b      	uxth	r3, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009770:	e042      	b.n	80097f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fb00 	bl	8009d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e04c      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d118      	bne.n	80097f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	691a      	ldr	r2, [r3, #16]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	b2d2      	uxtb	r2, r2
 80097d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f aec2 	bne.w	8009586 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800981e:	2302      	movs	r3, #2
  }
}
 8009820:	4618      	mov	r0, r3
 8009822:	3728      	adds	r7, #40	; 0x28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	00010004 	.word	0x00010004

0800982c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	607a      	str	r2, [r7, #4]
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	460b      	mov	r3, r1
 800983a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b08      	cmp	r3, #8
 8009846:	d006      	beq.n	8009856 <I2C_MasterRequestWrite+0x2a>
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d003      	beq.n	8009856 <I2C_MasterRequestWrite+0x2a>
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009854:	d108      	bne.n	8009868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	e00b      	b.n	8009880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	2b12      	cmp	r3, #18
 800986e:	d107      	bne.n	8009880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800987e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 f91d 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00d      	beq.n	80098b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a6:	d103      	bne.n	80098b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e035      	b.n	8009920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098bc:	d108      	bne.n	80098d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098be:	897b      	ldrh	r3, [r7, #10]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098cc:	611a      	str	r2, [r3, #16]
 80098ce:	e01b      	b.n	8009908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098d0:	897b      	ldrh	r3, [r7, #10]
 80098d2:	11db      	asrs	r3, r3, #7
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0306 	and.w	r3, r3, #6
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f063 030f 	orn	r3, r3, #15
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	490e      	ldr	r1, [pc, #56]	; (8009928 <I2C_MasterRequestWrite+0xfc>)
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f943 	bl	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e010      	b.n	8009920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80098fe:	897b      	ldrh	r3, [r7, #10]
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4907      	ldr	r1, [pc, #28]	; (800992c <I2C_MasterRequestWrite+0x100>)
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f933 	bl	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	00010008 	.word	0x00010008
 800992c:	00010002 	.word	0x00010002

08009930 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af02      	add	r7, sp, #8
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	460b      	mov	r3, r1
 800993e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009954:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b08      	cmp	r3, #8
 800995a:	d006      	beq.n	800996a <I2C_MasterRequestRead+0x3a>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d003      	beq.n	800996a <I2C_MasterRequestRead+0x3a>
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009968:	d108      	bne.n	800997c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e00b      	b.n	8009994 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009980:	2b11      	cmp	r3, #17
 8009982:	d107      	bne.n	8009994 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f893 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00d      	beq.n	80099c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ba:	d103      	bne.n	80099c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e079      	b.n	8009abc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099d0:	d108      	bne.n	80099e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099d2:	897b      	ldrh	r3, [r7, #10]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	611a      	str	r2, [r3, #16]
 80099e2:	e05f      	b.n	8009aa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80099e4:	897b      	ldrh	r3, [r7, #10]
 80099e6:	11db      	asrs	r3, r3, #7
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 0306 	and.w	r3, r3, #6
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f063 030f 	orn	r3, r3, #15
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	4930      	ldr	r1, [pc, #192]	; (8009ac4 <I2C_MasterRequestRead+0x194>)
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 f8b9 	bl	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e054      	b.n	8009abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a12:	897b      	ldrh	r3, [r7, #10]
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	4929      	ldr	r1, [pc, #164]	; (8009ac8 <I2C_MasterRequestRead+0x198>)
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 f8a9 	bl	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e044      	b.n	8009abc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a32:	2300      	movs	r3, #0
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	613b      	str	r3, [r7, #16]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	613b      	str	r3, [r7, #16]
 8009a46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f831 	bl	8009acc <I2C_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00d      	beq.n	8009a8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a7e:	d103      	bne.n	8009a88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e017      	b.n	8009abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009a8c:	897b      	ldrh	r3, [r7, #10]
 8009a8e:	11db      	asrs	r3, r3, #7
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 0306 	and.w	r3, r3, #6
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f063 030e 	orn	r3, r3, #14
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4907      	ldr	r1, [pc, #28]	; (8009ac8 <I2C_MasterRequestRead+0x198>)
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 f865 	bl	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	00010008 	.word	0x00010008
 8009ac8:	00010002 	.word	0x00010002

08009acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009adc:	e025      	b.n	8009b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d021      	beq.n	8009b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7fd ff89 	bl	80079fc <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d116      	bne.n	8009b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e023      	b.n	8009b72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	0c1b      	lsrs	r3, r3, #16
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d10d      	bne.n	8009b50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	43da      	mvns	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bf0c      	ite	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	2300      	movne	r3, #0
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	e00c      	b.n	8009b6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	43da      	mvns	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	bf0c      	ite	eq
 8009b62:	2301      	moveq	r3, #1
 8009b64:	2300      	movne	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d0b6      	beq.n	8009ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b88:	e051      	b.n	8009c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b98:	d123      	bne.n	8009be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f043 0204 	orr.w	r2, r3, #4
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e046      	b.n	8009c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be8:	d021      	beq.n	8009c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bea:	f7fd ff07 	bl	80079fc <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d302      	bcc.n	8009c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d116      	bne.n	8009c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f043 0220 	orr.w	r2, r3, #32
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e020      	b.n	8009c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d10c      	bne.n	8009c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	43da      	mvns	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4013      	ands	r3, r2
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bf14      	ite	ne
 8009c4a:	2301      	movne	r3, #1
 8009c4c:	2300      	moveq	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	e00b      	b.n	8009c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	43da      	mvns	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bf14      	ite	ne
 8009c64:	2301      	movne	r3, #1
 8009c66:	2300      	moveq	r3, #0
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d18d      	bne.n	8009b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c84:	e02d      	b.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 f8ce 	bl	8009e28 <I2C_IsAcknowledgeFailed>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e02d      	b.n	8009cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9c:	d021      	beq.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9e:	f7fd fead 	bl	80079fc <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d302      	bcc.n	8009cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d116      	bne.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	f043 0220 	orr.w	r2, r3, #32
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e007      	b.n	8009cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cec:	2b80      	cmp	r3, #128	; 0x80
 8009cee:	d1ca      	bne.n	8009c86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d06:	e02d      	b.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f88d 	bl	8009e28 <I2C_IsAcknowledgeFailed>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e02d      	b.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1e:	d021      	beq.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d20:	f7fd fe6c 	bl	80079fc <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d116      	bne.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	f043 0220 	orr.w	r2, r3, #32
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e007      	b.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d1ca      	bne.n	8009d08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d88:	e042      	b.n	8009e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b10      	cmp	r3, #16
 8009d96:	d119      	bne.n	8009dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f06f 0210 	mvn.w	r2, #16
 8009da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e029      	b.n	8009e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dcc:	f7fd fe16 	bl	80079fc <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d302      	bcc.n	8009de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d116      	bne.n	8009e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	f043 0220 	orr.w	r2, r3, #32
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e007      	b.n	8009e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1a:	2b40      	cmp	r3, #64	; 0x40
 8009e1c:	d1b5      	bne.n	8009d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e3e:	d11b      	bne.n	8009e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	f043 0204 	orr.w	r2, r3, #4
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e000      	b.n	8009e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
	...

08009e88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e92:	2300      	movs	r3, #0
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	4b20      	ldr	r3, [pc, #128]	; (8009f18 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <HAL_PWREx_EnableOverDrive+0x90>)
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009eae:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <HAL_PWREx_EnableOverDrive+0x94>)
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009eb4:	f7fd fda2 	bl	80079fc <HAL_GetTick>
 8009eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009eba:	e009      	b.n	8009ed0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ebc:	f7fd fd9e 	bl	80079fc <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eca:	d901      	bls.n	8009ed0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e01f      	b.n	8009f10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009ed0:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d1ee      	bne.n	8009ebc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ee4:	f7fd fd8a 	bl	80079fc <HAL_GetTick>
 8009ee8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009eea:	e009      	b.n	8009f00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009eec:	f7fd fd86 	bl	80079fc <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009efa:	d901      	bls.n	8009f00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e007      	b.n	8009f10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f0c:	d1ee      	bne.n	8009eec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	40023800 	.word	0x40023800
 8009f1c:	420e0040 	.word	0x420e0040
 8009f20:	40007000 	.word	0x40007000
 8009f24:	420e0044 	.word	0x420e0044

08009f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e0cc      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f3c:	4b68      	ldr	r3, [pc, #416]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d90c      	bls.n	8009f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f4a:	4b65      	ldr	r3, [pc, #404]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f52:	4b63      	ldr	r3, [pc, #396]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 030f 	and.w	r3, r3, #15
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d001      	beq.n	8009f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e0b8      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d020      	beq.n	8009fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f7c:	4b59      	ldr	r3, [pc, #356]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	4a58      	ldr	r2, [pc, #352]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0308 	and.w	r3, r3, #8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f94:	4b53      	ldr	r3, [pc, #332]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	4a52      	ldr	r2, [pc, #328]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fa0:	4b50      	ldr	r3, [pc, #320]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	494d      	ldr	r1, [pc, #308]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d044      	beq.n	800a048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d107      	bne.n	8009fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fc6:	4b47      	ldr	r3, [pc, #284]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d119      	bne.n	800a006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e07f      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d003      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fe6:	4b3f      	ldr	r3, [pc, #252]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e06f      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ff6:	4b3b      	ldr	r3, [pc, #236]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e067      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a006:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f023 0203 	bic.w	r2, r3, #3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	4934      	ldr	r1, [pc, #208]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a014:	4313      	orrs	r3, r2
 800a016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a018:	f7fd fcf0 	bl	80079fc <HAL_GetTick>
 800a01c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a01e:	e00a      	b.n	800a036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a020:	f7fd fcec 	bl	80079fc <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a02e:	4293      	cmp	r3, r2
 800a030:	d901      	bls.n	800a036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e04f      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a036:	4b2b      	ldr	r3, [pc, #172]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 020c 	and.w	r2, r3, #12
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	429a      	cmp	r2, r3
 800a046:	d1eb      	bne.n	800a020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a048:	4b25      	ldr	r3, [pc, #148]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d20c      	bcs.n	800a070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a056:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a05e:	4b20      	ldr	r3, [pc, #128]	; (800a0e0 <HAL_RCC_ClockConfig+0x1b8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d001      	beq.n	800a070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e032      	b.n	800a0d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d008      	beq.n	800a08e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a07c:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	4916      	ldr	r1, [pc, #88]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	490e      	ldr	r1, [pc, #56]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0ae:	f000 f821 	bl	800a0f4 <HAL_RCC_GetSysClockFreq>
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <HAL_RCC_ClockConfig+0x1bc>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	091b      	lsrs	r3, r3, #4
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <HAL_RCC_ClockConfig+0x1c0>)
 800a0c0:	5cd3      	ldrb	r3, [r2, r3]
 800a0c2:	fa21 f303 	lsr.w	r3, r1, r3
 800a0c6:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <HAL_RCC_ClockConfig+0x1c4>)
 800a0c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <HAL_RCC_ClockConfig+0x1c8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fd fc50 	bl	8007974 <HAL_InitTick>

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	40023c00 	.word	0x40023c00
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	08017df8 	.word	0x08017df8
 800a0ec:	20000000 	.word	0x20000000
 800a0f0:	20000004 	.word	0x20000004

0800a0f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	607b      	str	r3, [r7, #4]
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	2300      	movs	r3, #0
 800a104:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a10a:	4b63      	ldr	r3, [pc, #396]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f003 030c 	and.w	r3, r3, #12
 800a112:	2b04      	cmp	r3, #4
 800a114:	d007      	beq.n	800a126 <HAL_RCC_GetSysClockFreq+0x32>
 800a116:	2b08      	cmp	r3, #8
 800a118:	d008      	beq.n	800a12c <HAL_RCC_GetSysClockFreq+0x38>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f040 80b4 	bne.w	800a288 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a120:	4b5e      	ldr	r3, [pc, #376]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a122:	60bb      	str	r3, [r7, #8]
       break;
 800a124:	e0b3      	b.n	800a28e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a126:	4b5d      	ldr	r3, [pc, #372]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a128:	60bb      	str	r3, [r7, #8]
      break;
 800a12a:	e0b0      	b.n	800a28e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a12c:	4b5a      	ldr	r3, [pc, #360]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a134:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a136:	4b58      	ldr	r3, [pc, #352]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d04a      	beq.n	800a1d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a142:	4b55      	ldr	r3, [pc, #340]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	099b      	lsrs	r3, r3, #6
 800a148:	f04f 0400 	mov.w	r4, #0
 800a14c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	ea03 0501 	and.w	r5, r3, r1
 800a158:	ea04 0602 	and.w	r6, r4, r2
 800a15c:	4629      	mov	r1, r5
 800a15e:	4632      	mov	r2, r6
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	f04f 0400 	mov.w	r4, #0
 800a168:	0154      	lsls	r4, r2, #5
 800a16a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a16e:	014b      	lsls	r3, r1, #5
 800a170:	4619      	mov	r1, r3
 800a172:	4622      	mov	r2, r4
 800a174:	1b49      	subs	r1, r1, r5
 800a176:	eb62 0206 	sbc.w	r2, r2, r6
 800a17a:	f04f 0300 	mov.w	r3, #0
 800a17e:	f04f 0400 	mov.w	r4, #0
 800a182:	0194      	lsls	r4, r2, #6
 800a184:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a188:	018b      	lsls	r3, r1, #6
 800a18a:	1a5b      	subs	r3, r3, r1
 800a18c:	eb64 0402 	sbc.w	r4, r4, r2
 800a190:	f04f 0100 	mov.w	r1, #0
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	00e2      	lsls	r2, r4, #3
 800a19a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a19e:	00d9      	lsls	r1, r3, #3
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	195b      	adds	r3, r3, r5
 800a1a6:	eb44 0406 	adc.w	r4, r4, r6
 800a1aa:	f04f 0100 	mov.w	r1, #0
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	02a2      	lsls	r2, r4, #10
 800a1b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a1b8:	0299      	lsls	r1, r3, #10
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f04f 0400 	mov.w	r4, #0
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	f7f6 fd74 	bl	8000cb8 <__aeabi_uldivmod>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	60fb      	str	r3, [r7, #12]
 800a1d6:	e049      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d8:	4b2f      	ldr	r3, [pc, #188]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	099b      	lsrs	r3, r3, #6
 800a1de:	f04f 0400 	mov.w	r4, #0
 800a1e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1e6:	f04f 0200 	mov.w	r2, #0
 800a1ea:	ea03 0501 	and.w	r5, r3, r1
 800a1ee:	ea04 0602 	and.w	r6, r4, r2
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	f04f 0300 	mov.w	r3, #0
 800a1fa:	f04f 0400 	mov.w	r4, #0
 800a1fe:	0154      	lsls	r4, r2, #5
 800a200:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a204:	014b      	lsls	r3, r1, #5
 800a206:	4619      	mov	r1, r3
 800a208:	4622      	mov	r2, r4
 800a20a:	1b49      	subs	r1, r1, r5
 800a20c:	eb62 0206 	sbc.w	r2, r2, r6
 800a210:	f04f 0300 	mov.w	r3, #0
 800a214:	f04f 0400 	mov.w	r4, #0
 800a218:	0194      	lsls	r4, r2, #6
 800a21a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a21e:	018b      	lsls	r3, r1, #6
 800a220:	1a5b      	subs	r3, r3, r1
 800a222:	eb64 0402 	sbc.w	r4, r4, r2
 800a226:	f04f 0100 	mov.w	r1, #0
 800a22a:	f04f 0200 	mov.w	r2, #0
 800a22e:	00e2      	lsls	r2, r4, #3
 800a230:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a234:	00d9      	lsls	r1, r3, #3
 800a236:	460b      	mov	r3, r1
 800a238:	4614      	mov	r4, r2
 800a23a:	195b      	adds	r3, r3, r5
 800a23c:	eb44 0406 	adc.w	r4, r4, r6
 800a240:	f04f 0100 	mov.w	r1, #0
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	02a2      	lsls	r2, r4, #10
 800a24a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a24e:	0299      	lsls	r1, r3, #10
 800a250:	460b      	mov	r3, r1
 800a252:	4614      	mov	r4, r2
 800a254:	4618      	mov	r0, r3
 800a256:	4621      	mov	r1, r4
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f04f 0400 	mov.w	r4, #0
 800a25e:	461a      	mov	r2, r3
 800a260:	4623      	mov	r3, r4
 800a262:	f7f6 fd29 	bl	8000cb8 <__aeabi_uldivmod>
 800a266:	4603      	mov	r3, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	0c1b      	lsrs	r3, r3, #16
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	3301      	adds	r3, #1
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	fbb2 f3f3 	udiv	r3, r2, r3
 800a284:	60bb      	str	r3, [r7, #8]
      break;
 800a286:	e002      	b.n	800a28e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a28a:	60bb      	str	r3, [r7, #8]
      break;
 800a28c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a28e:	68bb      	ldr	r3, [r7, #8]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a298:	40023800 	.word	0x40023800
 800a29c:	00f42400 	.word	0x00f42400

0800a2a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20000000 	.word	0x20000000

0800a2b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a2bc:	f7ff fff0 	bl	800a2a0 <HAL_RCC_GetHCLKFreq>
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	0a9b      	lsrs	r3, r3, #10
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	4a03      	ldr	r2, [pc, #12]	; (800a2dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2ce:	5cd3      	ldrb	r3, [r2, r3]
 800a2d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	08017e08 	.word	0x08017e08

0800a2e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a2e4:	f7ff ffdc 	bl	800a2a0 <HAL_RCC_GetHCLKFreq>
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	4b05      	ldr	r3, [pc, #20]	; (800a300 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	0b5b      	lsrs	r3, r3, #13
 800a2f0:	f003 0307 	and.w	r3, r3, #7
 800a2f4:	4a03      	ldr	r2, [pc, #12]	; (800a304 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2f6:	5cd3      	ldrb	r3, [r2, r3]
 800a2f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40023800 	.word	0x40023800
 800a304:	08017e08 	.word	0x08017e08

0800a308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a330:	4b66      	ldr	r3, [pc, #408]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a336:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33e:	4963      	ldr	r1, [pc, #396]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a340:	4313      	orrs	r3, r2
 800a342:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a352:	4b5e      	ldr	r3, [pc, #376]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a358:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a360:	495a      	ldr	r1, [pc, #360]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a362:	4313      	orrs	r3, r2
 800a364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10b      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d075      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a38c:	4b50      	ldr	r3, [pc, #320]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a392:	f7fd fb33 	bl	80079fc <HAL_GetTick>
 800a396:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a398:	e008      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a39a:	f7fd fb2f 	bl	80079fc <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d901      	bls.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e1dc      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3ac:	4b47      	ldr	r3, [pc, #284]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1f0      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d009      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	019a      	lsls	r2, r3, #6
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	071b      	lsls	r3, r3, #28
 800a3d0:	493e      	ldr	r1, [pc, #248]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01f      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a3e4:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ea:	0f1b      	lsrs	r3, r3, #28
 800a3ec:	f003 0307 	and.w	r3, r3, #7
 800a3f0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	019a      	lsls	r2, r3, #6
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	431a      	orrs	r2, r3
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	071b      	lsls	r3, r3, #28
 800a404:	4931      	ldr	r1, [pc, #196]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a406:	4313      	orrs	r3, r2
 800a408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a40c:	4b2f      	ldr	r3, [pc, #188]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a412:	f023 021f 	bic.w	r2, r3, #31
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	492b      	ldr	r1, [pc, #172]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00d      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	019a      	lsls	r2, r3, #6
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	061b      	lsls	r3, r3, #24
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	071b      	lsls	r3, r3, #28
 800a444:	4921      	ldr	r1, [pc, #132]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a446:	4313      	orrs	r3, r2
 800a448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a44c:	4b20      	ldr	r3, [pc, #128]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a44e:	2201      	movs	r2, #1
 800a450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a452:	f7fd fad3 	bl	80079fc <HAL_GetTick>
 800a456:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a458:	e008      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a45a:	f7fd facf 	bl	80079fc <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d901      	bls.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e17c      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a46c:	4b17      	ldr	r3, [pc, #92]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0f0      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d112      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10c      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80ce 	beq.w	800a63a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a4a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a6:	f040 80c8 	bne.w	800a63a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a4aa:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4b0:	f7fd faa4 	bl	80079fc <HAL_GetTick>
 800a4b4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4b6:	e00f      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a4b8:	f7fd faa0 	bl	80079fc <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d908      	bls.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e14d      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a4ca:	bf00      	nop
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	42470068 	.word	0x42470068
 800a4d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4d8:	4ba5      	ldr	r3, [pc, #660]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e4:	d0e8      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02e      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a4f2:	4b9f      	ldr	r3, [pc, #636]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f8:	0c1b      	lsrs	r3, r3, #16
 800a4fa:	f003 0303 	and.w	r3, r3, #3
 800a4fe:	3301      	adds	r3, #1
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a504:	4b9a      	ldr	r3, [pc, #616]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50a:	0f1b      	lsrs	r3, r3, #28
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	019a      	lsls	r2, r3, #6
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	3b01      	subs	r3, #1
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	431a      	orrs	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	061b      	lsls	r3, r3, #24
 800a528:	431a      	orrs	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	071b      	lsls	r3, r3, #28
 800a52e:	4990      	ldr	r1, [pc, #576]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a530:	4313      	orrs	r3, r2
 800a532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a536:	4b8e      	ldr	r3, [pc, #568]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	3b01      	subs	r3, #1
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	4989      	ldr	r1, [pc, #548]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d02c      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a55c:	4b84      	ldr	r3, [pc, #528]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	0c1b      	lsrs	r3, r3, #16
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	3301      	adds	r3, #1
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a56e:	4b80      	ldr	r3, [pc, #512]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	0e1b      	lsrs	r3, r3, #24
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	019a      	lsls	r2, r3, #6
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	085b      	lsrs	r3, r3, #1
 800a586:	3b01      	subs	r3, #1
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	431a      	orrs	r2, r3
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	061b      	lsls	r3, r3, #24
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	071b      	lsls	r3, r3, #28
 800a598:	4975      	ldr	r1, [pc, #468]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a5a0:	4b73      	ldr	r3, [pc, #460]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	4970      	ldr	r1, [pc, #448]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d024      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a5c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5ca:	d11f      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a5cc:	4b68      	ldr	r3, [pc, #416]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	0e1b      	lsrs	r3, r3, #24
 800a5d4:	f003 030f 	and.w	r3, r3, #15
 800a5d8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a5da:	4b65      	ldr	r3, [pc, #404]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e0:	0f1b      	lsrs	r3, r3, #28
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	019a      	lsls	r2, r3, #6
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	041b      	lsls	r3, r3, #16
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	061b      	lsls	r3, r3, #24
 800a5fe:	431a      	orrs	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	071b      	lsls	r3, r3, #28
 800a604:	495a      	ldr	r1, [pc, #360]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a606:	4313      	orrs	r3, r2
 800a608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a60c:	4b59      	ldr	r3, [pc, #356]	; (800a774 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a60e:	2201      	movs	r2, #1
 800a610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a612:	f7fd f9f3 	bl	80079fc <HAL_GetTick>
 800a616:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a618:	e008      	b.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a61a:	f7fd f9ef 	bl	80079fc <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d901      	bls.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e09c      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a62c:	4b50      	ldr	r3, [pc, #320]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a638:	d1ef      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0320 	and.w	r3, r3, #32
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 8083 	beq.w	800a74e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a648:	2300      	movs	r3, #0
 800a64a:	60bb      	str	r3, [r7, #8]
 800a64c:	4b48      	ldr	r3, [pc, #288]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	4a47      	ldr	r2, [pc, #284]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a656:	6413      	str	r3, [r2, #64]	; 0x40
 800a658:	4b45      	ldr	r3, [pc, #276]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a660:	60bb      	str	r3, [r7, #8]
 800a662:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a664:	4b44      	ldr	r3, [pc, #272]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a43      	ldr	r2, [pc, #268]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a66a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a66e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a670:	f7fd f9c4 	bl	80079fc <HAL_GetTick>
 800a674:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a676:	e008      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a678:	f7fd f9c0 	bl	80079fc <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e06d      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a68a:	4b3b      	ldr	r3, [pc, #236]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0f0      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a696:	4b36      	ldr	r3, [pc, #216]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a69e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d02f      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d028      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6b4:	4b2e      	ldr	r3, [pc, #184]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6bc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a6be:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a6c4:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a6ca:	4a29      	ldr	r2, [pc, #164]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a6d0:	4b27      	ldr	r3, [pc, #156]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d114      	bne.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a6dc:	f7fd f98e 	bl	80079fc <HAL_GetTick>
 800a6e0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6e2:	e00a      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6e4:	f7fd f98a 	bl	80079fc <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e035      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0ee      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a70e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a712:	d10d      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a714:	4b16      	ldr	r3, [pc, #88]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a728:	4911      	ldr	r1, [pc, #68]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	608b      	str	r3, [r1, #8]
 800a72e:	e005      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	4a0e      	ldr	r2, [pc, #56]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a736:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a73a:	6093      	str	r3, [r2, #8]
 800a73c:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a73e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a748:	4909      	ldr	r1, [pc, #36]	; (800a770 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0310 	and.w	r3, r3, #16
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a762:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3720      	adds	r7, #32
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	40023800 	.word	0x40023800
 800a774:	42470070 	.word	0x42470070
 800a778:	40007000 	.word	0x40007000
 800a77c:	42470e40 	.word	0x42470e40
 800a780:	424711e0 	.word	0x424711e0

0800a784 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d075      	beq.n	800a888 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a79c:	4ba2      	ldr	r3, [pc, #648]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f003 030c 	and.w	r3, r3, #12
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d00c      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7a8:	4b9f      	ldr	r3, [pc, #636]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d112      	bne.n	800a7da <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7b4:	4b9c      	ldr	r3, [pc, #624]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7c0:	d10b      	bne.n	800a7da <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7c2:	4b99      	ldr	r3, [pc, #612]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d05b      	beq.n	800a886 <HAL_RCC_OscConfig+0x102>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d157      	bne.n	800a886 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e20b      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e2:	d106      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x6e>
 800a7e4:	4b90      	ldr	r3, [pc, #576]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a8f      	ldr	r2, [pc, #572]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e01d      	b.n	800a82e <HAL_RCC_OscConfig+0xaa>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7fa:	d10c      	bne.n	800a816 <HAL_RCC_OscConfig+0x92>
 800a7fc:	4b8a      	ldr	r3, [pc, #552]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a89      	ldr	r2, [pc, #548]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	4b87      	ldr	r3, [pc, #540]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a86      	ldr	r2, [pc, #536]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a80e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e00b      	b.n	800a82e <HAL_RCC_OscConfig+0xaa>
 800a816:	4b84      	ldr	r3, [pc, #528]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a83      	ldr	r2, [pc, #524]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a81c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	4b81      	ldr	r3, [pc, #516]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a80      	ldr	r2, [pc, #512]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a82c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d013      	beq.n	800a85e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a836:	f7fd f8e1 	bl	80079fc <HAL_GetTick>
 800a83a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a83e:	f7fd f8dd 	bl	80079fc <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b64      	cmp	r3, #100	; 0x64
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e1d0      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a850:	4b75      	ldr	r3, [pc, #468]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f0      	beq.n	800a83e <HAL_RCC_OscConfig+0xba>
 800a85c:	e014      	b.n	800a888 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85e:	f7fd f8cd 	bl	80079fc <HAL_GetTick>
 800a862:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a864:	e008      	b.n	800a878 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a866:	f7fd f8c9 	bl	80079fc <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b64      	cmp	r3, #100	; 0x64
 800a872:	d901      	bls.n	800a878 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e1bc      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a878:	4b6b      	ldr	r3, [pc, #428]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1f0      	bne.n	800a866 <HAL_RCC_OscConfig+0xe2>
 800a884:	e000      	b.n	800a888 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a886:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d063      	beq.n	800a95c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a894:	4b64      	ldr	r3, [pc, #400]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	f003 030c 	and.w	r3, r3, #12
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8a0:	4b61      	ldr	r3, [pc, #388]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d11c      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8ac:	4b5e      	ldr	r3, [pc, #376]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d116      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8b8:	4b5b      	ldr	r3, [pc, #364]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x14c>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d001      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e190      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8d0:	4b55      	ldr	r3, [pc, #340]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	4952      	ldr	r1, [pc, #328]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8e4:	e03a      	b.n	800a95c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d020      	beq.n	800a930 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8ee:	4b4f      	ldr	r3, [pc, #316]	; (800aa2c <HAL_RCC_OscConfig+0x2a8>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7fd f882 	bl	80079fc <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8fc:	f7fd f87e 	bl	80079fc <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e171      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a90e:	4b46      	ldr	r3, [pc, #280]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f0      	beq.n	800a8fc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a91a:	4b43      	ldr	r3, [pc, #268]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	493f      	ldr	r1, [pc, #252]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	600b      	str	r3, [r1, #0]
 800a92e:	e015      	b.n	800a95c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <HAL_RCC_OscConfig+0x2a8>)
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a936:	f7fd f861 	bl	80079fc <HAL_GetTick>
 800a93a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a93e:	f7fd f85d 	bl	80079fc <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e150      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a950:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f0      	bne.n	800a93e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0308 	and.w	r3, r3, #8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d030      	beq.n	800a9ca <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d016      	beq.n	800a99e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a970:	4b2f      	ldr	r3, [pc, #188]	; (800aa30 <HAL_RCC_OscConfig+0x2ac>)
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a976:	f7fd f841 	bl	80079fc <HAL_GetTick>
 800a97a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a97e:	f7fd f83d 	bl	80079fc <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e130      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a990:	4b25      	ldr	r3, [pc, #148]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <HAL_RCC_OscConfig+0x1fa>
 800a99c:	e015      	b.n	800a9ca <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a99e:	4b24      	ldr	r3, [pc, #144]	; (800aa30 <HAL_RCC_OscConfig+0x2ac>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9a4:	f7fd f82a 	bl	80079fc <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9ac:	f7fd f826 	bl	80079fc <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e119      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9be:	4b1a      	ldr	r3, [pc, #104]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f0      	bne.n	800a9ac <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 809f 	beq.w	800ab16 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9dc:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10f      	bne.n	800aa08 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a9f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	6413      	str	r3, [r2, #64]	; 0x40
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <HAL_RCC_OscConfig+0x2a4>)
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aa04:	2301      	movs	r3, #1
 800aa06:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <HAL_RCC_OscConfig+0x2b0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d120      	bne.n	800aa56 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <HAL_RCC_OscConfig+0x2b0>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a06      	ldr	r2, [pc, #24]	; (800aa34 <HAL_RCC_OscConfig+0x2b0>)
 800aa1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa20:	f7fc ffec 	bl	80079fc <HAL_GetTick>
 800aa24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa26:	e010      	b.n	800aa4a <HAL_RCC_OscConfig+0x2c6>
 800aa28:	40023800 	.word	0x40023800
 800aa2c:	42470000 	.word	0x42470000
 800aa30:	42470e80 	.word	0x42470e80
 800aa34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa38:	f7fc ffe0 	bl	80079fc <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e0d3      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa4a:	4b6c      	ldr	r3, [pc, #432]	; (800abfc <HAL_RCC_OscConfig+0x478>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0f0      	beq.n	800aa38 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d106      	bne.n	800aa6c <HAL_RCC_OscConfig+0x2e8>
 800aa5e:	4b68      	ldr	r3, [pc, #416]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa62:	4a67      	ldr	r2, [pc, #412]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	6713      	str	r3, [r2, #112]	; 0x70
 800aa6a:	e01c      	b.n	800aaa6 <HAL_RCC_OscConfig+0x322>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	2b05      	cmp	r3, #5
 800aa72:	d10c      	bne.n	800aa8e <HAL_RCC_OscConfig+0x30a>
 800aa74:	4b62      	ldr	r3, [pc, #392]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa78:	4a61      	ldr	r2, [pc, #388]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa7a:	f043 0304 	orr.w	r3, r3, #4
 800aa7e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa80:	4b5f      	ldr	r3, [pc, #380]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	4a5e      	ldr	r2, [pc, #376]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa8c:	e00b      	b.n	800aaa6 <HAL_RCC_OscConfig+0x322>
 800aa8e:	4b5c      	ldr	r3, [pc, #368]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa92:	4a5b      	ldr	r2, [pc, #364]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa94:	f023 0301 	bic.w	r3, r3, #1
 800aa98:	6713      	str	r3, [r2, #112]	; 0x70
 800aa9a:	4b59      	ldr	r3, [pc, #356]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9e:	4a58      	ldr	r2, [pc, #352]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aaa0:	f023 0304 	bic.w	r3, r3, #4
 800aaa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d015      	beq.n	800aada <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaae:	f7fc ffa5 	bl	80079fc <HAL_GetTick>
 800aab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aab4:	e00a      	b.n	800aacc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aab6:	f7fc ffa1 	bl	80079fc <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d901      	bls.n	800aacc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e092      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aacc:	4b4c      	ldr	r3, [pc, #304]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0ee      	beq.n	800aab6 <HAL_RCC_OscConfig+0x332>
 800aad8:	e014      	b.n	800ab04 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aada:	f7fc ff8f 	bl	80079fc <HAL_GetTick>
 800aade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aae0:	e00a      	b.n	800aaf8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aae2:	f7fc ff8b 	bl	80079fc <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d901      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e07c      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaf8:	4b41      	ldr	r3, [pc, #260]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1ee      	bne.n	800aae2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d105      	bne.n	800ab16 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab0a:	4b3d      	ldr	r3, [pc, #244]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	4a3c      	ldr	r2, [pc, #240]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800ab10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d068      	beq.n	800abf0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab1e:	4b38      	ldr	r3, [pc, #224]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 030c 	and.w	r3, r3, #12
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d060      	beq.n	800abec <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d145      	bne.n	800abbe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab32:	4b34      	ldr	r3, [pc, #208]	; (800ac04 <HAL_RCC_OscConfig+0x480>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab38:	f7fc ff60 	bl	80079fc <HAL_GetTick>
 800ab3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab40:	f7fc ff5c 	bl	80079fc <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e04f      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab52:	4b2b      	ldr	r3, [pc, #172]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f0      	bne.n	800ab40 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	69da      	ldr	r2, [r3, #28]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	019b      	lsls	r3, r3, #6
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab74:	085b      	lsrs	r3, r3, #1
 800ab76:	3b01      	subs	r3, #1
 800ab78:	041b      	lsls	r3, r3, #16
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	061b      	lsls	r3, r3, #24
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab88:	071b      	lsls	r3, r3, #28
 800ab8a:	491d      	ldr	r1, [pc, #116]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab90:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <HAL_RCC_OscConfig+0x480>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab96:	f7fc ff31 	bl	80079fc <HAL_GetTick>
 800ab9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab9c:	e008      	b.n	800abb0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab9e:	f7fc ff2d 	bl	80079fc <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e020      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abb0:	4b13      	ldr	r3, [pc, #76]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0f0      	beq.n	800ab9e <HAL_RCC_OscConfig+0x41a>
 800abbc:	e018      	b.n	800abf0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abbe:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <HAL_RCC_OscConfig+0x480>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc4:	f7fc ff1a 	bl	80079fc <HAL_GetTick>
 800abc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abca:	e008      	b.n	800abde <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abcc:	f7fc ff16 	bl	80079fc <HAL_GetTick>
 800abd0:	4602      	mov	r2, r0
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d901      	bls.n	800abde <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e009      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abde:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <HAL_RCC_OscConfig+0x47c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f0      	bne.n	800abcc <HAL_RCC_OscConfig+0x448>
 800abea:	e001      	b.n	800abf0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e000      	b.n	800abf2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	40007000 	.word	0x40007000
 800ac00:	40023800 	.word	0x40023800
 800ac04:	42470060 	.word	0x42470060

0800ac08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e022      	b.n	800ac60 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d105      	bne.n	800ac32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fa febb 	bl	80059a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2203      	movs	r2, #3
 800ac36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f814 	bl	800ac68 <HAL_SD_InitCard>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e00a      	b.n	800ac60 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac68:	b5b0      	push	{r4, r5, r7, lr}
 800ac6a:	b08e      	sub	sp, #56	; 0x38
 800ac6c:	af04      	add	r7, sp, #16
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ac70:	2300      	movs	r3, #0
 800ac72:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ac84:	2376      	movs	r3, #118	; 0x76
 800ac86:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681d      	ldr	r5, [r3, #0]
 800ac8c:	466c      	mov	r4, sp
 800ac8e:	f107 0314 	add.w	r3, r7, #20
 800ac92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aca0:	4628      	mov	r0, r5
 800aca2:	f003 fa87 	bl	800e1b4 <SDIO_Init>
 800aca6:	4603      	mov	r3, r0
 800aca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800acac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e031      	b.n	800ad1c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800acb8:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <HAL_SD_InitCard+0xbc>)
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f003 fabf 	bl	800e246 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800acc8:	4b16      	ldr	r3, [pc, #88]	; (800ad24 <HAL_SD_InitCard+0xbc>)
 800acca:	2201      	movs	r2, #1
 800accc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 ffc6 	bl	800bc60 <SD_PowerON>
 800acd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e013      	b.n	800ad1c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fee5 	bl	800bac4 <SD_InitCard>
 800acfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00b      	beq.n	800ad1a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	431a      	orrs	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e000      	b.n	800ad1c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3728      	adds	r7, #40	; 0x28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bdb0      	pop	{r4, r5, r7, pc}
 800ad24:	422580a0 	.word	0x422580a0

0800ad28 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08c      	sub	sp, #48	; 0x30
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d107      	bne.n	800ad50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e0c7      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	f040 80c0 	bne.w	800aede <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	441a      	add	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d907      	bls.n	800ad82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e0ae      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2203      	movs	r2, #3
 800ad86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ada0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	4a50      	ldr	r2, [pc, #320]	; (800aee8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ada8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	4a4f      	ldr	r2, [pc, #316]	; (800aeec <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800adb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb6:	2200      	movs	r2, #0
 800adb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3380      	adds	r3, #128	; 0x80
 800adc4:	4619      	mov	r1, r3
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	025b      	lsls	r3, r3, #9
 800adcc:	089b      	lsrs	r3, r3, #2
 800adce:	f7fd fc07 	bl	80085e0 <HAL_DMA_Start_IT>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d017      	beq.n	800ae08 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ade6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a40      	ldr	r2, [pc, #256]	; (800aef0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800adee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e06b      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ae08:	4b3a      	ldr	r3, [pc, #232]	; (800aef4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d002      	beq.n	800ae1c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	025b      	lsls	r3, r3, #9
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae24:	4618      	mov	r0, r3
 800ae26:	f003 faa1 	bl	800e36c <SDMMC_CmdBlockLength>
 800ae2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00f      	beq.n	800ae52 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a2e      	ldr	r2, [pc, #184]	; (800aef0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e046      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
 800ae56:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	025b      	lsls	r3, r3, #9
 800ae5c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ae5e:	2390      	movs	r3, #144	; 0x90
 800ae60:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ae62:	2302      	movs	r3, #2
 800ae64:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f107 0210 	add.w	r2, r7, #16
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f003 fa4b 	bl	800e314 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d90a      	bls.n	800ae9a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2282      	movs	r2, #130	; 0x82
 800ae88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae90:	4618      	mov	r0, r3
 800ae92:	f003 faaf 	bl	800e3f4 <SDMMC_CmdReadMultiBlock>
 800ae96:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae98:	e009      	b.n	800aeae <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2281      	movs	r2, #129	; 0x81
 800ae9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aea6:	4618      	mov	r0, r3
 800aea8:	f003 fa82 	bl	800e3b0 <SDMMC_CmdReadSingleBlock>
 800aeac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d012      	beq.n	800aeda <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a0d      	ldr	r2, [pc, #52]	; (800aef0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	431a      	orrs	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e002      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800aede:	2302      	movs	r3, #2
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3730      	adds	r7, #48	; 0x30
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	0800b8d3 	.word	0x0800b8d3
 800aeec:	0800b945 	.word	0x0800b945
 800aef0:	004005ff 	.word	0x004005ff
 800aef4:	4225858c 	.word	0x4225858c

0800aef8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08c      	sub	sp, #48	; 0x30
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d107      	bne.n	800af20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e0ca      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b01      	cmp	r3, #1
 800af2a:	f040 80c3 	bne.w	800b0b4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	441a      	add	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af3e:	429a      	cmp	r2, r3
 800af40:	d907      	bls.n	800af52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e0b1      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2203      	movs	r2, #3
 800af56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2200      	movs	r2, #0
 800af60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f042 021a 	orr.w	r2, r2, #26
 800af70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af76:	4a52      	ldr	r2, [pc, #328]	; (800b0c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800af78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7e:	4a51      	ldr	r2, [pc, #324]	; (800b0c4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800af80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af86:	2200      	movs	r2, #0
 800af88:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d002      	beq.n	800af98 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	025b      	lsls	r3, r3, #9
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afa0:	4618      	mov	r0, r3
 800afa2:	f003 f9e3 	bl	800e36c <SDMMC_CmdBlockLength>
 800afa6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00f      	beq.n	800afce <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a45      	ldr	r2, [pc, #276]	; (800b0c8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e073      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d90a      	bls.n	800afea <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	22a0      	movs	r2, #160	; 0xa0
 800afd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afe0:	4618      	mov	r0, r3
 800afe2:	f003 fa4b 	bl	800e47c <SDMMC_CmdWriteMultiBlock>
 800afe6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800afe8:	e009      	b.n	800affe <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2290      	movs	r2, #144	; 0x90
 800afee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aff6:	4618      	mov	r0, r3
 800aff8:	f003 fa1e 	bl	800e438 <SDMMC_CmdWriteSingleBlock>
 800affc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d012      	beq.n	800b02a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a2f      	ldr	r2, [pc, #188]	; (800b0c8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b00a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	431a      	orrs	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e045      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b02a:	4b28      	ldr	r3, [pc, #160]	; (800b0cc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3380      	adds	r3, #128	; 0x80
 800b03c:	461a      	mov	r2, r3
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	025b      	lsls	r3, r3, #9
 800b042:	089b      	lsrs	r3, r3, #2
 800b044:	f7fd facc 	bl	80085e0 <HAL_DMA_Start_IT>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d01a      	beq.n	800b084 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 021a 	bic.w	r2, r2, #26
 800b05c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a19      	ldr	r2, [pc, #100]	; (800b0c8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e018      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	025b      	lsls	r3, r3, #9
 800b08e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b090:	2390      	movs	r3, #144	; 0x90
 800b092:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b098:	2300      	movs	r3, #0
 800b09a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f107 0210 	add.w	r2, r7, #16
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f003 f932 	bl	800e314 <SDIO_ConfigData>

      return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e000      	b.n	800b0b6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b0b4:	2302      	movs	r3, #2
  }
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3730      	adds	r7, #48	; 0x30
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	0800b8a9 	.word	0x0800b8a9
 800b0c4:	0800b945 	.word	0x0800b945
 800b0c8:	004005ff 	.word	0x004005ff
 800b0cc:	4225858c 	.word	0x4225858c

0800b0d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d008      	beq.n	800b0fe <HAL_SD_IRQHandler+0x2e>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 ffc8 	bl	800c08c <SD_Read_IT>
 800b0fc:	e155      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 808f 	beq.w	800b22c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b116:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b126:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b12a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0201 	bic.w	r2, r2, #1
 800b13a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f003 0308 	and.w	r3, r3, #8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d039      	beq.n	800b1ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <HAL_SD_IRQHandler+0x8a>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f003 0320 	and.w	r3, r3, #32
 800b156:	2b00      	cmp	r3, #0
 800b158:	d011      	beq.n	800b17e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f003 f9ae 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800b164:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d008      	beq.n	800b17e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f91f 	bl	800b3bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f240 523a 	movw	r2, #1338	; 0x53a
 800b186:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d104      	bne.n	800b1aa <HAL_SD_IRQHandler+0xda>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f003 fe04 	bl	800edb8 <HAL_SD_RxCpltCallback>
 800b1b0:	e0fb      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f003 fdf6 	bl	800eda4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1b8:	e0f7      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80f2 	beq.w	800b3aa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f003 0320 	and.w	r3, r3, #32
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d011      	beq.n	800b1f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f003 f973 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800b1da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d008      	beq.n	800b1f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f8e4 	bl	800b3bc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f040 80d5 	bne.w	800b3aa <HAL_SD_IRQHandler+0x2da>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	f040 80cf 	bne.w	800b3aa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0208 	bic.w	r2, r2, #8
 800b21a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f003 fdbd 	bl	800eda4 <HAL_SD_TxCpltCallback>
}
 800b22a:	e0be      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <HAL_SD_IRQHandler+0x17c>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b00      	cmp	r3, #0
 800b242:	d003      	beq.n	800b24c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 ff72 	bl	800c12e <SD_Write_IT>
 800b24a:	e0ae      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 80a7 	beq.w	800b3aa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26e:	f043 0202 	orr.w	r2, r3, #2
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	f043 0208 	orr.w	r2, r3, #8
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a2:	f043 0220 	orr.w	r2, r3, #32
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	f003 0310 	and.w	r3, r3, #16
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2bc:	f043 0210 	orr.w	r2, r3, #16
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b2dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f003 f8ec 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f855 	bl	800b3bc <HAL_SD_ErrorCallback>
}
 800b312:	e04a      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d045      	beq.n	800b3aa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d104      	bne.n	800b332 <HAL_SD_IRQHandler+0x262>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d011      	beq.n	800b356 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b336:	4a1f      	ldr	r2, [pc, #124]	; (800b3b4 <HAL_SD_IRQHandler+0x2e4>)
 800b338:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fd f9a6 	bl	8008690 <HAL_DMA_Abort_IT>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d02f      	beq.n	800b3aa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fb4a 	bl	800b9e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b354:	e029      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d104      	bne.n	800b36a <HAL_SD_IRQHandler+0x29a>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f003 0302 	and.w	r3, r3, #2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d011      	beq.n	800b38e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	4a12      	ldr	r2, [pc, #72]	; (800b3b8 <HAL_SD_IRQHandler+0x2e8>)
 800b370:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b376:	4618      	mov	r0, r3
 800b378:	f7fd f98a 	bl	8008690 <HAL_DMA_Abort_IT>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d013      	beq.n	800b3aa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	4618      	mov	r0, r3
 800b388:	f000 fb65 	bl	800ba56 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b38c:	e00d      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f003 fcf4 	bl	800ed90 <HAL_SD_AbortCallback>
}
 800b3a8:	e7ff      	b.n	800b3aa <HAL_SD_IRQHandler+0x2da>
 800b3aa:	bf00      	nop
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800b9e9 	.word	0x0800b9e9
 800b3b8:	0800ba57 	.word	0x0800ba57

0800b3bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3de:	0f9b      	lsrs	r3, r3, #30
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ea:	0e9b      	lsrs	r3, r3, #26
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fc:	0e1b      	lsrs	r3, r3, #24
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0303 	and.w	r3, r3, #3
 800b404:	b2da      	uxtb	r2, r3
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b40e:	0c1b      	lsrs	r3, r3, #16
 800b410:	b2da      	uxtb	r2, r3
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b426:	b2da      	uxtb	r2, r3
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b430:	0d1b      	lsrs	r3, r3, #20
 800b432:	b29a      	uxth	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b43c:	0c1b      	lsrs	r3, r3, #16
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 030f 	and.w	r3, r3, #15
 800b444:	b2da      	uxtb	r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b44e:	0bdb      	lsrs	r3, r3, #15
 800b450:	b2db      	uxtb	r3, r3
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	b2da      	uxtb	r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b460:	0b9b      	lsrs	r3, r3, #14
 800b462:	b2db      	uxtb	r3, r3
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b472:	0b5b      	lsrs	r3, r3, #13
 800b474:	b2db      	uxtb	r3, r3
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b484:	0b1b      	lsrs	r3, r3, #12
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2200      	movs	r2, #0
 800b496:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d163      	bne.n	800b568 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4a4:	009a      	lsls	r2, r3, #2
 800b4a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b4b0:	0f92      	lsrs	r2, r2, #30
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4bc:	0edb      	lsrs	r3, r3, #27
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ce:	0e1b      	lsrs	r3, r3, #24
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e0:	0d5b      	lsrs	r3, r3, #21
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	f003 0307 	and.w	r3, r3, #7
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f2:	0c9b      	lsrs	r3, r3, #18
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b504:	0bdb      	lsrs	r3, r3, #15
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	7e1b      	ldrb	r3, [r3, #24]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	f003 0307 	and.w	r3, r3, #7
 800b526:	3302      	adds	r3, #2
 800b528:	2201      	movs	r2, #1
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b532:	fb02 f203 	mul.w	r2, r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	7a1b      	ldrb	r3, [r3, #8]
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	f003 030f 	and.w	r3, r3, #15
 800b544:	2201      	movs	r2, #1
 800b546:	409a      	lsls	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b554:	0a52      	lsrs	r2, r2, #9
 800b556:	fb02 f203 	mul.w	r2, r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b564:	661a      	str	r2, [r3, #96]	; 0x60
 800b566:	e031      	b.n	800b5cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d11d      	bne.n	800b5ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b574:	041b      	lsls	r3, r3, #16
 800b576:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	431a      	orrs	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	3301      	adds	r3, #1
 800b58c:	029a      	lsls	r2, r3, #10
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	661a      	str	r2, [r3, #96]	; 0x60
 800b5aa:	e00f      	b.n	800b5cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a58      	ldr	r2, [pc, #352]	; (800b714 <HAL_SD_GetCardCSD+0x344>)
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e09d      	b.n	800b708 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d0:	0b9b      	lsrs	r3, r3, #14
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e2:	09db      	lsrs	r3, r3, #7
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b604:	0fdb      	lsrs	r3, r3, #31
 800b606:	b2da      	uxtb	r2, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b610:	0f5b      	lsrs	r3, r3, #29
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 0303 	and.w	r3, r3, #3
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b622:	0e9b      	lsrs	r3, r3, #26
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b634:	0d9b      	lsrs	r3, r3, #22
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f003 030f 	and.w	r3, r3, #15
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b646:	0d5b      	lsrs	r3, r3, #21
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b662:	0c1b      	lsrs	r3, r3, #16
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b676:	0bdb      	lsrs	r3, r3, #15
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68a:	0b9b      	lsrs	r3, r3, #14
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	b2da      	uxtb	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69e:	0b5b      	lsrs	r3, r3, #13
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	0b1b      	lsrs	r3, r3, #12
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c6:	0a9b      	lsrs	r3, r3, #10
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6da:	0a1b      	lsrs	r3, r3, #8
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ee:	085b      	lsrs	r3, r3, #1
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2201      	movs	r2, #1
 800b702:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	004005ff 	.word	0x004005ff

0800b718 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b770:	b5b0      	push	{r4, r5, r7, lr}
 800b772:	b08e      	sub	sp, #56	; 0x38
 800b774:	af04      	add	r7, sp, #16
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2203      	movs	r2, #3
 800b77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b786:	2b03      	cmp	r3, #3
 800b788:	d02e      	beq.n	800b7e8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b790:	d106      	bne.n	800b7a0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	639a      	str	r2, [r3, #56]	; 0x38
 800b79e:	e029      	b.n	800b7f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7a6:	d10a      	bne.n	800b7be <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fb0f 	bl	800bdcc <SD_WideBus_Enable>
 800b7ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	639a      	str	r2, [r3, #56]	; 0x38
 800b7bc:	e01a      	b.n	800b7f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fb4c 	bl	800be62 <SD_WideBus_Disable>
 800b7ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	639a      	str	r2, [r3, #56]	; 0x38
 800b7d8:	e00c      	b.n	800b7f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38
 800b7e6:	e005      	b.n	800b7f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a18      	ldr	r2, [pc, #96]	; (800b864 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e024      	b.n	800b85a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681d      	ldr	r5, [r3, #0]
 800b836:	466c      	mov	r4, sp
 800b838:	f107 0318 	add.w	r3, r7, #24
 800b83c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b844:	f107 030c 	add.w	r3, r7, #12
 800b848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b84a:	4628      	mov	r0, r5
 800b84c:	f002 fcb2 	bl	800e1b4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3728      	adds	r7, #40	; 0x28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bdb0      	pop	{r4, r5, r7, pc}
 800b862:	bf00      	nop
 800b864:	004005ff 	.word	0x004005ff

0800b868 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b874:	f107 030c 	add.w	r3, r7, #12
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa7e 	bl	800bd7c <SD_SendStatus>
 800b880:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	0a5b      	lsrs	r3, r3, #9
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b89e:	693b      	ldr	r3, [r7, #16]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b8c6:	bf00      	nop
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e4:	2b82      	cmp	r3, #130	; 0x82
 800b8e6:	d111      	bne.n	800b90c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f002 fde7 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800b8f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d008      	beq.n	800b90c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	431a      	orrs	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f7ff fd58 	bl	800b3bc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f022 0208 	bic.w	r2, r2, #8
 800b91a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f240 523a 	movw	r2, #1338	; 0x53a
 800b924:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f003 fa3f 	bl	800edb8 <HAL_SD_RxCpltCallback>
#endif
}
 800b93a:	bf00      	nop
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fd f848 	bl	80089e8 <HAL_DMA_GetError>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d03e      	beq.n	800b9dc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b964:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d002      	beq.n	800b97a <SD_DMAError+0x36>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d12d      	bne.n	800b9d6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a19      	ldr	r2, [pc, #100]	; (800b9e4 <SD_DMAError+0xa0>)
 800b980:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b990:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b996:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b99e:	6978      	ldr	r0, [r7, #20]
 800b9a0:	f7ff ff62 	bl	800b868 <HAL_SD_GetCardState>
 800b9a4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b06      	cmp	r3, #6
 800b9aa:	d002      	beq.n	800b9b2 <SD_DMAError+0x6e>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b05      	cmp	r3, #5
 800b9b0:	d10a      	bne.n	800b9c8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f002 fd82 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b9d6:	6978      	ldr	r0, [r7, #20]
 800b9d8:	f7ff fcf0 	bl	800b3bc <HAL_SD_ErrorCallback>
#endif
  }
}
 800b9dc:	bf00      	nop
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	004005ff 	.word	0x004005ff

0800b9e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f240 523a 	movw	r2, #1338	; 0x53a
 800b9fe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7ff ff31 	bl	800b868 <HAL_SD_GetCardState>
 800ba06:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b06      	cmp	r3, #6
 800ba1a:	d002      	beq.n	800ba22 <SD_DMATxAbort+0x3a>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	d10a      	bne.n	800ba38 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f002 fd4a 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	431a      	orrs	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f003 f9a5 	bl	800ed90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ba46:	e002      	b.n	800ba4e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f7ff fcb7 	bl	800b3bc <HAL_SD_ErrorCallback>
}
 800ba4e:	bf00      	nop
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f7ff fefa 	bl	800b868 <HAL_SD_GetCardState>
 800ba74:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b06      	cmp	r3, #6
 800ba88:	d002      	beq.n	800ba90 <SD_DMARxAbort+0x3a>
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b05      	cmp	r3, #5
 800ba8e:	d10a      	bne.n	800baa6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f002 fd13 	bl	800e4c0 <SDMMC_CmdStopTransfer>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa0:	431a      	orrs	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f003 f96e 	bl	800ed90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bab4:	e002      	b.n	800babc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff fc80 	bl	800b3bc <HAL_SD_ErrorCallback>
}
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bac4:	b5b0      	push	{r4, r5, r7, lr}
 800bac6:	b094      	sub	sp, #80	; 0x50
 800bac8:	af04      	add	r7, sp, #16
 800baca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bacc:	2301      	movs	r3, #1
 800bace:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f002 fbc5 	bl	800e264 <SDIO_GetPowerState>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bae0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bae4:	e0b7      	b.n	800bc56 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	2b03      	cmp	r3, #3
 800baec:	d02f      	beq.n	800bb4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f002 fdee 	bl	800e6d4 <SDMMC_CmdSendCID>
 800baf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <SD_InitCard+0x40>
    {
      return errorstate;
 800bb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb02:	e0a8      	b.n	800bc56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f002 fbef 	bl	800e2ee <SDIO_GetResponse>
 800bb10:	4602      	mov	r2, r0
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f002 fbe6 	bl	800e2ee <SDIO_GetResponse>
 800bb22:	4602      	mov	r2, r0
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2108      	movs	r1, #8
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f002 fbdd 	bl	800e2ee <SDIO_GetResponse>
 800bb34:	4602      	mov	r2, r0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	210c      	movs	r1, #12
 800bb40:	4618      	mov	r0, r3
 800bb42:	f002 fbd4 	bl	800e2ee <SDIO_GetResponse>
 800bb46:	4602      	mov	r2, r0
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d00d      	beq.n	800bb72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f107 020e 	add.w	r2, r7, #14
 800bb5e:	4611      	mov	r1, r2
 800bb60:	4618      	mov	r0, r3
 800bb62:	f002 fdf4 	bl	800e74e <SDMMC_CmdSetRelAdd>
 800bb66:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <SD_InitCard+0xae>
    {
      return errorstate;
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	e071      	b.n	800bc56 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d036      	beq.n	800bbe8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bb7a:	89fb      	ldrh	r3, [r7, #14]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4610      	mov	r0, r2
 800bb90:	f002 fdbe 	bl	800e710 <SDMMC_CmdSendCSD>
 800bb94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9e:	e05a      	b.n	800bc56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f002 fba1 	bl	800e2ee <SDIO_GetResponse>
 800bbac:	4602      	mov	r2, r0
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2104      	movs	r1, #4
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f002 fb98 	bl	800e2ee <SDIO_GetResponse>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2108      	movs	r1, #8
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f002 fb8f 	bl	800e2ee <SDIO_GetResponse>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	210c      	movs	r1, #12
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f002 fb86 	bl	800e2ee <SDIO_GetResponse>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2104      	movs	r1, #4
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f002 fb7d 	bl	800e2ee <SDIO_GetResponse>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	0d1a      	lsrs	r2, r3, #20
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bbfc:	f107 0310 	add.w	r3, r7, #16
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff fbe4 	bl	800b3d0 <HAL_SD_GetCardCSD>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc12:	e020      	b.n	800bc56 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6819      	ldr	r1, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	f04f 0400 	mov.w	r4, #0
 800bc22:	461a      	mov	r2, r3
 800bc24:	4623      	mov	r3, r4
 800bc26:	4608      	mov	r0, r1
 800bc28:	f002 fc6c 	bl	800e504 <SDMMC_CmdSelDesel>
 800bc2c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <SD_InitCard+0x174>
  {
    return errorstate;
 800bc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc36:	e00e      	b.n	800bc56 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681d      	ldr	r5, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	466c      	mov	r4, sp
 800bc40:	f103 0210 	add.w	r2, r3, #16
 800bc44:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f002 fab0 	bl	800e1b4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3740      	adds	r7, #64	; 0x40
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bc60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	2300      	movs	r3, #0
 800bc72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f002 fc66 	bl	800e54a <SDMMC_CmdGoIdleState>
 800bc7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <SD_PowerON+0x2a>
  {
    return errorstate;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	e072      	b.n	800bd70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f002 fc79 	bl	800e586 <SDMMC_CmdOperCond>
 800bc94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00d      	beq.n	800bcb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f002 fc4f 	bl	800e54a <SDMMC_CmdGoIdleState>
 800bcac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <SD_PowerON+0x5e>
    {
      return errorstate;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	e05b      	b.n	800bd70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d137      	bne.n	800bd36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2100      	movs	r1, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f002 fc79 	bl	800e5c4 <SDMMC_CmdAppCommand>
 800bcd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d02d      	beq.n	800bd36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bcde:	e047      	b.n	800bd70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f002 fc6c 	bl	800e5c4 <SDMMC_CmdAppCommand>
 800bcec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <SD_PowerON+0x98>
    {
      return errorstate;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	e03b      	b.n	800bd70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	491e      	ldr	r1, [pc, #120]	; (800bd78 <SD_PowerON+0x118>)
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f002 fc82 	bl	800e608 <SDMMC_CmdAppOperCommand>
 800bd04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd10:	e02e      	b.n	800bd70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2100      	movs	r1, #0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f002 fae8 	bl	800e2ee <SDIO_GetResponse>
 800bd1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	0fdb      	lsrs	r3, r3, #31
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d101      	bne.n	800bd2c <SD_PowerON+0xcc>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <SD_PowerON+0xce>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	613b      	str	r3, [r7, #16]

    count++;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	3301      	adds	r3, #1
 800bd34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d802      	bhi.n	800bd46 <SD_PowerON+0xe6>
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0cc      	beq.n	800bce0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d902      	bls.n	800bd56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bd50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd54:	e00c      	b.n	800bd70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	645a      	str	r2, [r3, #68]	; 0x44
 800bd66:	e002      	b.n	800bd6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	c1100000 	.word	0xc1100000

0800bd7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bd8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd90:	e018      	b.n	800bdc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9a:	041b      	lsls	r3, r3, #16
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f002 fcf6 	bl	800e790 <SDMMC_CmdSendStatus>
 800bda4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	e009      	b.n	800bdc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f002 fa99 	bl	800e2ee <SDIO_GetResponse>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2100      	movs	r1, #0
 800bde2:	4618      	mov	r0, r3
 800bde4:	f002 fa83 	bl	800e2ee <SDIO_GetResponse>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdf2:	d102      	bne.n	800bdfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bdf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdf8:	e02f      	b.n	800be5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bdfa:	f107 030c 	add.w	r3, r7, #12
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f879 	bl	800bef8 <SD_FindSCR>
 800be06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	e023      	b.n	800be5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01c      	beq.n	800be56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be24:	041b      	lsls	r3, r3, #16
 800be26:	4619      	mov	r1, r3
 800be28:	4610      	mov	r0, r2
 800be2a:	f002 fbcb 	bl	800e5c4 <SDMMC_CmdAppCommand>
 800be2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	e00f      	b.n	800be5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2102      	movs	r1, #2
 800be40:	4618      	mov	r0, r3
 800be42:	f002 fc04 	bl	800e64e <SDMMC_CmdBusWidth>
 800be46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	e003      	b.n	800be5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800be52:	2300      	movs	r3, #0
 800be54:	e001      	b.n	800be5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b086      	sub	sp, #24
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800be6a:	2300      	movs	r3, #0
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	2300      	movs	r3, #0
 800be70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2100      	movs	r1, #0
 800be78:	4618      	mov	r0, r3
 800be7a:	f002 fa38 	bl	800e2ee <SDIO_GetResponse>
 800be7e:	4603      	mov	r3, r0
 800be80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be88:	d102      	bne.n	800be90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800be8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be8e:	e02f      	b.n	800bef0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f82e 	bl	800bef8 <SD_FindSCR>
 800be9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	e023      	b.n	800bef0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d01c      	beq.n	800beec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f002 fb80 	bl	800e5c4 <SDMMC_CmdAppCommand>
 800bec4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	e00f      	b.n	800bef0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2100      	movs	r1, #0
 800bed6:	4618      	mov	r0, r3
 800bed8:	f002 fbb9 	bl	800e64e <SDMMC_CmdBusWidth>
 800bedc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	e003      	b.n	800bef0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bee8:	2300      	movs	r3, #0
 800beea:	e001      	b.n	800bef0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800beec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3718      	adds	r7, #24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b08f      	sub	sp, #60	; 0x3c
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf02:	f7fb fd7b 	bl	80079fc <HAL_GetTick>
 800bf06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60bb      	str	r3, [r7, #8]
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2108      	movs	r1, #8
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f002 fa24 	bl	800e36c <SDMMC_CmdBlockLength>
 800bf24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	e0a9      	b.n	800c084 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f002 fb41 	bl	800e5c4 <SDMMC_CmdAppCommand>
 800bf42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <SD_FindSCR+0x56>
  {
    return errorstate;
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	e09a      	b.n	800c084 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bf54:	2308      	movs	r3, #8
 800bf56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bf58:	2330      	movs	r3, #48	; 0x30
 800bf5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bf64:	2301      	movs	r3, #1
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f107 0210 	add.w	r2, r7, #16
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f002 f9ce 	bl	800e314 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f002 fb88 	bl	800e692 <SDMMC_CmdSendSCR>
 800bf82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d022      	beq.n	800bfd0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	e07a      	b.n	800c084 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00e      	beq.n	800bfba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6819      	ldr	r1, [r3, #0]
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	f107 0208 	add.w	r2, r7, #8
 800bfa8:	18d4      	adds	r4, r2, r3
 800bfaa:	4608      	mov	r0, r1
 800bfac:	f002 f92d 	bl	800e20a <SDIO_ReadFIFO>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	6023      	str	r3, [r4, #0]
      index++;
 800bfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bfba:	f7fb fd1f 	bl	80079fc <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d102      	bne.n	800bfd0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bfca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfce:	e059      	b.n	800c084 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd6:	f240 432a 	movw	r3, #1066	; 0x42a
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0d6      	beq.n	800bf8e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe6:	f003 0308 	and.w	r3, r3, #8
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2208      	movs	r2, #8
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bff6:	2308      	movs	r3, #8
 800bff8:	e044      	b.n	800c084 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d005      	beq.n	800c014 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2202      	movs	r2, #2
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c010:	2302      	movs	r3, #2
 800c012:	e037      	b.n	800c084 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01a:	f003 0320 	and.w	r3, r3, #32
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2220      	movs	r2, #32
 800c028:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c02a:	2320      	movs	r3, #32
 800c02c:	e02a      	b.n	800c084 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f240 523a 	movw	r2, #1338	; 0x53a
 800c036:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	061a      	lsls	r2, r3, #24
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c044:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	0a1b      	lsrs	r3, r3, #8
 800c04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c04e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0e1b      	lsrs	r3, r3, #24
 800c054:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	601a      	str	r2, [r3, #0]
    scr++;
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	3304      	adds	r3, #4
 800c05e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	061a      	lsls	r2, r3, #24
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	021b      	lsls	r3, r3, #8
 800c068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c06c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	0a1b      	lsrs	r3, r3, #8
 800c072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c076:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	0e1b      	lsrs	r3, r3, #24
 800c07c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	373c      	adds	r7, #60	; 0x3c
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd90      	pop	{r4, r7, pc}

0800c08c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c098:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d03f      	beq.n	800c126 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	e033      	b.n	800c114 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f002 f8aa 	bl	800e20a <SDIO_ReadFIFO>
 800c0b6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	0c1b      	lsrs	r3, r3, #16
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	0e1b      	lsrs	r3, r3, #24
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3301      	adds	r3, #1
 800c106:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	3301      	adds	r3, #1
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b07      	cmp	r3, #7
 800c118:	d9c8      	bls.n	800c0ac <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c126:	bf00      	nop
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b086      	sub	sp, #24
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d043      	beq.n	800c1d0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]
 800c14c:	e037      	b.n	800c1be <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	021a      	lsls	r2, r3, #8
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	4313      	orrs	r3, r2
 800c16a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	3b01      	subs	r3, #1
 800c176:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	041a      	lsls	r2, r3, #16
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	4313      	orrs	r3, r2
 800c182:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3301      	adds	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	061a      	lsls	r2, r3, #24
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	4313      	orrs	r3, r2
 800c19a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f107 0208 	add.w	r2, r7, #8
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 f836 	bl	800e224 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	617b      	str	r3, [r7, #20]
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2b07      	cmp	r3, #7
 800c1c2:	d9c4      	bls.n	800c14e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c1d0:	bf00      	nop
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e056      	b.n	800c298 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7f9 fcc1 	bl	8005b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c220:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	431a      	orrs	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	431a      	orrs	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	431a      	orrs	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	431a      	orrs	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c246:	431a      	orrs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	ea42 0103 	orr.w	r1, r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	430a      	orrs	r2, r1
 800c260:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	0c1b      	lsrs	r3, r3, #16
 800c268:	f003 0104 	and.w	r1, r3, #4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	69da      	ldr	r2, [r3, #28]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d101      	bne.n	800c2c2 <HAL_SPI_Transmit+0x22>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e11e      	b.n	800c500 <HAL_SPI_Transmit+0x260>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2ca:	f7fb fb97 	bl	80079fc <HAL_GetTick>
 800c2ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c2d0:	88fb      	ldrh	r3, [r7, #6]
 800c2d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d002      	beq.n	800c2e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2e4:	e103      	b.n	800c4ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <HAL_SPI_Transmit+0x52>
 800c2ec:	88fb      	ldrh	r3, [r7, #6]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2f6:	e0fa      	b.n	800c4ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2203      	movs	r2, #3
 800c2fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	88fa      	ldrh	r2, [r7, #6]
 800c310:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	88fa      	ldrh	r2, [r7, #6]
 800c316:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c33e:	d107      	bne.n	800c350 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c34e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c35a:	2b40      	cmp	r3, #64	; 0x40
 800c35c:	d007      	beq.n	800c36e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c36c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c376:	d14b      	bne.n	800c410 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <HAL_SPI_Transmit+0xe6>
 800c380:	8afb      	ldrh	r3, [r7, #22]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d13e      	bne.n	800c404 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38a:	881a      	ldrh	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c396:	1c9a      	adds	r2, r3, #2
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c3aa:	e02b      	b.n	800c404 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f003 0302 	and.w	r3, r3, #2
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d112      	bne.n	800c3e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	881a      	ldrh	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ca:	1c9a      	adds	r2, r3, #2
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800c3de:	e011      	b.n	800c404 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3e0:	f7fb fb0c 	bl	80079fc <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d803      	bhi.n	800c3f8 <HAL_SPI_Transmit+0x158>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f6:	d102      	bne.n	800c3fe <HAL_SPI_Transmit+0x15e>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c402:	e074      	b.n	800c4ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c408:	b29b      	uxth	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1ce      	bne.n	800c3ac <HAL_SPI_Transmit+0x10c>
 800c40e:	e04c      	b.n	800c4aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <HAL_SPI_Transmit+0x17e>
 800c418:	8afb      	ldrh	r3, [r7, #22]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d140      	bne.n	800c4a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	330c      	adds	r3, #12
 800c428:	7812      	ldrb	r2, [r2, #0]
 800c42a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	3b01      	subs	r3, #1
 800c43e:	b29a      	uxth	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c444:	e02c      	b.n	800c4a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b02      	cmp	r3, #2
 800c452:	d113      	bne.n	800c47c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	330c      	adds	r3, #12
 800c45e:	7812      	ldrb	r2, [r2, #0]
 800c460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c470:	b29b      	uxth	r3, r3
 800c472:	3b01      	subs	r3, #1
 800c474:	b29a      	uxth	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	86da      	strh	r2, [r3, #54]	; 0x36
 800c47a:	e011      	b.n	800c4a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c47c:	f7fb fabe 	bl	80079fc <HAL_GetTick>
 800c480:	4602      	mov	r2, r0
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d803      	bhi.n	800c494 <HAL_SPI_Transmit+0x1f4>
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d102      	bne.n	800c49a <HAL_SPI_Transmit+0x1fa>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c49e:	e026      	b.n	800c4ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1cd      	bne.n	800c446 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 fba4 	bl	800cbfc <SPI_EndRxTxTransaction>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2220      	movs	r2, #32
 800c4be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	77fb      	strb	r3, [r7, #31]
 800c4ea:	e000      	b.n	800c4ee <HAL_SPI_Transmit+0x24e>
  }

error:
 800c4ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c4fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3720      	adds	r7, #32
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	603b      	str	r3, [r7, #0]
 800c514:	4613      	mov	r3, r2
 800c516:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c524:	d112      	bne.n	800c54c <HAL_SPI_Receive+0x44>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10e      	bne.n	800c54c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2204      	movs	r2, #4
 800c532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c536:	88fa      	ldrh	r2, [r7, #6]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	4613      	mov	r3, r2
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	68b9      	ldr	r1, [r7, #8]
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f000 f8e9 	bl	800c71a <HAL_SPI_TransmitReceive>
 800c548:	4603      	mov	r3, r0
 800c54a:	e0e2      	b.n	800c712 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <HAL_SPI_Receive+0x52>
 800c556:	2302      	movs	r3, #2
 800c558:	e0db      	b.n	800c712 <HAL_SPI_Receive+0x20a>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c562:	f7fb fa4b 	bl	80079fc <HAL_GetTick>
 800c566:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b01      	cmp	r3, #1
 800c572:	d002      	beq.n	800c57a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c574:	2302      	movs	r3, #2
 800c576:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c578:	e0c2      	b.n	800c700 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <HAL_SPI_Receive+0x7e>
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c58a:	e0b9      	b.n	800c700 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2204      	movs	r2, #4
 800c590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	88fa      	ldrh	r2, [r7, #6]
 800c5aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5d2:	d107      	bne.n	800c5e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ee:	2b40      	cmp	r3, #64	; 0x40
 800c5f0:	d007      	beq.n	800c602 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c600:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d162      	bne.n	800c6d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c60a:	e02e      	b.n	800c66a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b01      	cmp	r3, #1
 800c618:	d115      	bne.n	800c646 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f103 020c 	add.w	r2, r3, #12
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	3b01      	subs	r3, #1
 800c63e:	b29a      	uxth	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c644:	e011      	b.n	800c66a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c646:	f7fb f9d9 	bl	80079fc <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	429a      	cmp	r2, r3
 800c654:	d803      	bhi.n	800c65e <HAL_SPI_Receive+0x156>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65c:	d102      	bne.n	800c664 <HAL_SPI_Receive+0x15c>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c668:	e04a      	b.n	800c700 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1cb      	bne.n	800c60c <HAL_SPI_Receive+0x104>
 800c674:	e031      	b.n	800c6da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b01      	cmp	r3, #1
 800c682:	d113      	bne.n	800c6ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68da      	ldr	r2, [r3, #12]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68e:	b292      	uxth	r2, r2
 800c690:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c696:	1c9a      	adds	r2, r3, #2
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c6aa:	e011      	b.n	800c6d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ac:	f7fb f9a6 	bl	80079fc <HAL_GetTick>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d803      	bhi.n	800c6c4 <HAL_SPI_Receive+0x1bc>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c2:	d102      	bne.n	800c6ca <HAL_SPI_Receive+0x1c2>
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d102      	bne.n	800c6d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c6ce:	e017      	b.n	800c700 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1cd      	bne.n	800c676 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f000 fa27 	bl	800cb32 <SPI_EndRxTransaction>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2220      	movs	r2, #32
 800c6ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	75fb      	strb	r3, [r7, #23]
 800c6fc:	e000      	b.n	800c700 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c6fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c710:	7dfb      	ldrb	r3, [r7, #23]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b08c      	sub	sp, #48	; 0x30
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
 800c726:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c728:	2301      	movs	r3, #1
 800c72a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d101      	bne.n	800c740 <HAL_SPI_TransmitReceive+0x26>
 800c73c:	2302      	movs	r3, #2
 800c73e:	e18a      	b.n	800ca56 <HAL_SPI_TransmitReceive+0x33c>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c748:	f7fb f958 	bl	80079fc <HAL_GetTick>
 800c74c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c75e:	887b      	ldrh	r3, [r7, #2]
 800c760:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c766:	2b01      	cmp	r3, #1
 800c768:	d00f      	beq.n	800c78a <HAL_SPI_TransmitReceive+0x70>
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c770:	d107      	bne.n	800c782 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d103      	bne.n	800c782 <HAL_SPI_TransmitReceive+0x68>
 800c77a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d003      	beq.n	800c78a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c782:	2302      	movs	r3, #2
 800c784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c788:	e15b      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <HAL_SPI_TransmitReceive+0x82>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <HAL_SPI_TransmitReceive+0x82>
 800c796:	887b      	ldrh	r3, [r7, #2]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d103      	bne.n	800c7a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c7a2:	e14e      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d003      	beq.n	800c7b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2205      	movs	r2, #5
 800c7b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	887a      	ldrh	r2, [r7, #2]
 800c7c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	887a      	ldrh	r2, [r7, #2]
 800c7ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	887a      	ldrh	r2, [r7, #2]
 800c7da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	887a      	ldrh	r2, [r7, #2]
 800c7e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f8:	2b40      	cmp	r3, #64	; 0x40
 800c7fa:	d007      	beq.n	800c80c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c80a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c814:	d178      	bne.n	800c908 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <HAL_SPI_TransmitReceive+0x10a>
 800c81e:	8b7b      	ldrh	r3, [r7, #26]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d166      	bne.n	800c8f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c828:	881a      	ldrh	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c834:	1c9a      	adds	r2, r3, #2
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c83e:	b29b      	uxth	r3, r3
 800c840:	3b01      	subs	r3, #1
 800c842:	b29a      	uxth	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c848:	e053      	b.n	800c8f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b02      	cmp	r3, #2
 800c856:	d11b      	bne.n	800c890 <HAL_SPI_TransmitReceive+0x176>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d016      	beq.n	800c890 <HAL_SPI_TransmitReceive+0x176>
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	2b01      	cmp	r3, #1
 800c866:	d113      	bne.n	800c890 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	881a      	ldrh	r2, [r3, #0]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c878:	1c9a      	adds	r2, r3, #2
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c882:	b29b      	uxth	r3, r3
 800c884:	3b01      	subs	r3, #1
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c88c:	2300      	movs	r3, #0
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d119      	bne.n	800c8d2 <HAL_SPI_TransmitReceive+0x1b8>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d014      	beq.n	800c8d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	b292      	uxth	r2, r2
 800c8b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	1c9a      	adds	r2, r3, #2
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c8d2:	f7fb f893 	bl	80079fc <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d807      	bhi.n	800c8f2 <HAL_SPI_TransmitReceive+0x1d8>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e8:	d003      	beq.n	800c8f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c8f0:	e0a7      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1a6      	bne.n	800c84a <HAL_SPI_TransmitReceive+0x130>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1a1      	bne.n	800c84a <HAL_SPI_TransmitReceive+0x130>
 800c906:	e07c      	b.n	800ca02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <HAL_SPI_TransmitReceive+0x1fc>
 800c910:	8b7b      	ldrh	r3, [r7, #26]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d16b      	bne.n	800c9ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	330c      	adds	r3, #12
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c932:	b29b      	uxth	r3, r3
 800c934:	3b01      	subs	r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c93c:	e057      	b.n	800c9ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	f003 0302 	and.w	r3, r3, #2
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d11c      	bne.n	800c986 <HAL_SPI_TransmitReceive+0x26c>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c950:	b29b      	uxth	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d017      	beq.n	800c986 <HAL_SPI_TransmitReceive+0x26c>
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d114      	bne.n	800c986 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	330c      	adds	r3, #12
 800c966:	7812      	ldrb	r2, [r2, #0]
 800c968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	1c5a      	adds	r2, r3, #1
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c978:	b29b      	uxth	r3, r3
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b01      	cmp	r3, #1
 800c992:	d119      	bne.n	800c9c8 <HAL_SPI_TransmitReceive+0x2ae>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c998:	b29b      	uxth	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d014      	beq.n	800c9c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68da      	ldr	r2, [r3, #12]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9c8:	f7fb f818 	bl	80079fc <HAL_GetTick>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d803      	bhi.n	800c9e0 <HAL_SPI_TransmitReceive+0x2c6>
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d102      	bne.n	800c9e6 <HAL_SPI_TransmitReceive+0x2cc>
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d103      	bne.n	800c9ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c9ec:	e029      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1a2      	bne.n	800c93e <HAL_SPI_TransmitReceive+0x224>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d19d      	bne.n	800c93e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 f8f8 	bl	800cbfc <SPI_EndRxTxTransaction>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d006      	beq.n	800ca20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ca1e:	e010      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10b      	bne.n	800ca40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca28:	2300      	movs	r3, #0
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	e000      	b.n	800ca42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ca40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3730      	adds	r7, #48	; 0x30
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	603b      	str	r3, [r7, #0]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca6e:	e04c      	b.n	800cb0a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca76:	d048      	beq.n	800cb0a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca78:	f7fa ffc0 	bl	80079fc <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d902      	bls.n	800ca8e <SPI_WaitFlagStateUntilTimeout+0x30>
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d13d      	bne.n	800cb0a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685a      	ldr	r2, [r3, #4]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800caa6:	d111      	bne.n	800cacc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab0:	d004      	beq.n	800cabc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caba:	d107      	bne.n	800cacc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cad4:	d10f      	bne.n	800caf6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800caf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e00f      	b.n	800cb2a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689a      	ldr	r2, [r3, #8]
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	4013      	ands	r3, r2
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	bf0c      	ite	eq
 800cb1a:	2301      	moveq	r3, #1
 800cb1c:	2300      	movne	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	461a      	mov	r2, r3
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d1a3      	bne.n	800ca70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af02      	add	r7, sp, #8
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb46:	d111      	bne.n	800cb6c <SPI_EndRxTransaction+0x3a>
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb50:	d004      	beq.n	800cb5c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb5a:	d107      	bne.n	800cb6c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb6a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb74:	d12a      	bne.n	800cbcc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb7e:	d012      	beq.n	800cba6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	2200      	movs	r2, #0
 800cb88:	2180      	movs	r1, #128	; 0x80
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7ff ff67 	bl	800ca5e <SPI_WaitFlagStateUntilTimeout>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d02d      	beq.n	800cbf2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	f043 0220 	orr.w	r2, r3, #32
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e026      	b.n	800cbf4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2200      	movs	r2, #0
 800cbae:	2101      	movs	r1, #1
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff ff54 	bl	800ca5e <SPI_WaitFlagStateUntilTimeout>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01a      	beq.n	800cbf2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc0:	f043 0220 	orr.w	r2, r3, #32
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e013      	b.n	800cbf4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff ff41 	bl	800ca5e <SPI_WaitFlagStateUntilTimeout>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbe6:	f043 0220 	orr.w	r2, r3, #32
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e000      	b.n	800cbf4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b088      	sub	sp, #32
 800cc00:	af02      	add	r7, sp, #8
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cc08:	4b1b      	ldr	r3, [pc, #108]	; (800cc78 <SPI_EndRxTxTransaction+0x7c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a1b      	ldr	r2, [pc, #108]	; (800cc7c <SPI_EndRxTxTransaction+0x80>)
 800cc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc12:	0d5b      	lsrs	r3, r3, #21
 800cc14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc18:	fb02 f303 	mul.w	r3, r2, r3
 800cc1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc26:	d112      	bne.n	800cc4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2180      	movs	r1, #128	; 0x80
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff ff13 	bl	800ca5e <SPI_WaitFlagStateUntilTimeout>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d016      	beq.n	800cc6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc42:	f043 0220 	orr.w	r2, r3, #32
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e00f      	b.n	800cc6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00a      	beq.n	800cc6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc64:	2b80      	cmp	r3, #128	; 0x80
 800cc66:	d0f2      	beq.n	800cc4e <SPI_EndRxTxTransaction+0x52>
 800cc68:	e000      	b.n	800cc6c <SPI_EndRxTxTransaction+0x70>
        break;
 800cc6a:	bf00      	nop
  }

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20000000 	.word	0x20000000
 800cc7c:	165e9f81 	.word	0x165e9f81

0800cc80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e01d      	b.n	800ccce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7f9 f82c 	bl	8005d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f000 fb56 	bl	800d370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f042 0201 	orr.w	r2, r2, #1
 800ccec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f003 0307 	and.w	r3, r3, #7
 800ccf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b06      	cmp	r3, #6
 800ccfe:	d007      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f042 0201 	orr.w	r2, r2, #1
 800cd0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b082      	sub	sp, #8
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e01d      	b.n	800cd6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d106      	bne.n	800cd4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7f8 ff69 	bl	8005c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2202      	movs	r2, #2
 800cd4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3304      	adds	r3, #4
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	f000 fb07 	bl	800d370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2201      	movs	r2, #1
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 fd42 	bl	800d810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a15      	ldr	r2, [pc, #84]	; (800cde8 <HAL_TIM_PWM_Start+0x74>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d004      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x2c>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a14      	ldr	r2, [pc, #80]	; (800cdec <HAL_TIM_PWM_Start+0x78>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d101      	bne.n	800cda4 <HAL_TIM_PWM_Start+0x30>
 800cda0:	2301      	movs	r3, #1
 800cda2:	e000      	b.n	800cda6 <HAL_TIM_PWM_Start+0x32>
 800cda4:	2300      	movs	r3, #0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d007      	beq.n	800cdba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cdb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	f003 0307 	and.w	r3, r3, #7
 800cdc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b06      	cmp	r3, #6
 800cdca:	d007      	beq.n	800cddc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f042 0201 	orr.w	r2, r2, #1
 800cdda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	40010000 	.word	0x40010000
 800cdec:	40010400 	.word	0x40010400

0800cdf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e083      	b.n	800cf0c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7f9 f803 	bl	8005e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2202      	movs	r2, #2
 800ce22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce34:	f023 0307 	bic.w	r3, r3, #7
 800ce38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f000 fa93 	bl	800d370 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6a1b      	ldr	r3, [r3, #32]
 800ce60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce72:	f023 0303 	bic.w	r3, r3, #3
 800ce76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	689a      	ldr	r2, [r3, #8]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	021b      	lsls	r3, r3, #8
 800ce82:	4313      	orrs	r3, r2
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ce90:	f023 030c 	bic.w	r3, r3, #12
 800ce94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68da      	ldr	r2, [r3, #12]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	4313      	orrs	r3, r2
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	011a      	lsls	r2, r3, #4
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	031b      	lsls	r3, r3, #12
 800cec0:	4313      	orrs	r3, r2
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cece:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ced6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	011b      	lsls	r3, r3, #4
 800cee2:	4313      	orrs	r3, r2
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <HAL_TIM_Encoder_Start+0x16>
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	d008      	beq.n	800cf3a <HAL_TIM_Encoder_Start+0x26>
 800cf28:	e00f      	b.n	800cf4a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	2100      	movs	r1, #0
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 fc6c 	bl	800d810 <TIM_CCxChannelCmd>
      break;
 800cf38:	e016      	b.n	800cf68 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	2104      	movs	r1, #4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fc64 	bl	800d810 <TIM_CCxChannelCmd>
      break;
 800cf48:	e00e      	b.n	800cf68 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	2100      	movs	r1, #0
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 fc5c 	bl	800d810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	2104      	movs	r1, #4
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fc55 	bl	800d810 <TIM_CCxChannelCmd>
      break;
 800cf66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f042 0201 	orr.w	r2, r2, #1
 800cf76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d122      	bne.n	800cfde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	f003 0302 	and.w	r3, r3, #2
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d11b      	bne.n	800cfde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f06f 0202 	mvn.w	r2, #2
 800cfae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	f003 0303 	and.w	r3, r3, #3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f9b5 	bl	800d334 <HAL_TIM_IC_CaptureCallback>
 800cfca:	e005      	b.n	800cfd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f9a7 	bl	800d320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9b8 	bl	800d348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b04      	cmp	r3, #4
 800cfea:	d122      	bne.n	800d032 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	f003 0304 	and.w	r3, r3, #4
 800cff6:	2b04      	cmp	r3, #4
 800cff8:	d11b      	bne.n	800d032 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f06f 0204 	mvn.w	r2, #4
 800d002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f98b 	bl	800d334 <HAL_TIM_IC_CaptureCallback>
 800d01e:	e005      	b.n	800d02c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f97d 	bl	800d320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f98e 	bl	800d348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	f003 0308 	and.w	r3, r3, #8
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d122      	bne.n	800d086 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	f003 0308 	and.w	r3, r3, #8
 800d04a:	2b08      	cmp	r3, #8
 800d04c:	d11b      	bne.n	800d086 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f06f 0208 	mvn.w	r2, #8
 800d056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2204      	movs	r2, #4
 800d05c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f961 	bl	800d334 <HAL_TIM_IC_CaptureCallback>
 800d072:	e005      	b.n	800d080 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f953 	bl	800d320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f964 	bl	800d348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	f003 0310 	and.w	r3, r3, #16
 800d090:	2b10      	cmp	r3, #16
 800d092:	d122      	bne.n	800d0da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f003 0310 	and.w	r3, r3, #16
 800d09e:	2b10      	cmp	r3, #16
 800d0a0:	d11b      	bne.n	800d0da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f06f 0210 	mvn.w	r2, #16
 800d0aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2208      	movs	r2, #8
 800d0b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	69db      	ldr	r3, [r3, #28]
 800d0b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f937 	bl	800d334 <HAL_TIM_IC_CaptureCallback>
 800d0c6:	e005      	b.n	800d0d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f929 	bl	800d320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f93a 	bl	800d348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d10e      	bne.n	800d106 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d107      	bne.n	800d106 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f06f 0201 	mvn.w	r2, #1
 800d0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7f7 fb79 	bl	80047f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d110:	2b80      	cmp	r3, #128	; 0x80
 800d112:	d10e      	bne.n	800d132 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d11e:	2b80      	cmp	r3, #128	; 0x80
 800d120:	d107      	bne.n	800d132 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fc6d 	bl	800da0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13c:	2b40      	cmp	r3, #64	; 0x40
 800d13e:	d10e      	bne.n	800d15e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14a:	2b40      	cmp	r3, #64	; 0x40
 800d14c:	d107      	bne.n	800d15e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f8ff 	bl	800d35c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b20      	cmp	r3, #32
 800d16a:	d10e      	bne.n	800d18a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b20      	cmp	r3, #32
 800d178:	d107      	bne.n	800d18a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f06f 0220 	mvn.w	r2, #32
 800d182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fc37 	bl	800d9f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d18a:	bf00      	nop
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d101      	bne.n	800d1ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	e0b4      	b.n	800d318 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b0c      	cmp	r3, #12
 800d1c2:	f200 809f 	bhi.w	800d304 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d201 	.word	0x0800d201
 800d1d0:	0800d305 	.word	0x0800d305
 800d1d4:	0800d305 	.word	0x0800d305
 800d1d8:	0800d305 	.word	0x0800d305
 800d1dc:	0800d241 	.word	0x0800d241
 800d1e0:	0800d305 	.word	0x0800d305
 800d1e4:	0800d305 	.word	0x0800d305
 800d1e8:	0800d305 	.word	0x0800d305
 800d1ec:	0800d283 	.word	0x0800d283
 800d1f0:	0800d305 	.word	0x0800d305
 800d1f4:	0800d305 	.word	0x0800d305
 800d1f8:	0800d305 	.word	0x0800d305
 800d1fc:	0800d2c3 	.word	0x0800d2c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	4618      	mov	r0, r3
 800d208:	f000 f952 	bl	800d4b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	699a      	ldr	r2, [r3, #24]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0208 	orr.w	r2, r2, #8
 800d21a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	699a      	ldr	r2, [r3, #24]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f022 0204 	bic.w	r2, r2, #4
 800d22a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6999      	ldr	r1, [r3, #24]
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	691a      	ldr	r2, [r3, #16]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	619a      	str	r2, [r3, #24]
      break;
 800d23e:	e062      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68b9      	ldr	r1, [r7, #8]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f9a2 	bl	800d590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	699a      	ldr	r2, [r3, #24]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	699a      	ldr	r2, [r3, #24]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6999      	ldr	r1, [r3, #24]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	021a      	lsls	r2, r3, #8
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	430a      	orrs	r2, r1
 800d27e:	619a      	str	r2, [r3, #24]
      break;
 800d280:	e041      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 f9f7 	bl	800d67c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	69da      	ldr	r2, [r3, #28]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f042 0208 	orr.w	r2, r2, #8
 800d29c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	69da      	ldr	r2, [r3, #28]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 0204 	bic.w	r2, r2, #4
 800d2ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	69d9      	ldr	r1, [r3, #28]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	691a      	ldr	r2, [r3, #16]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	61da      	str	r2, [r3, #28]
      break;
 800d2c0:	e021      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 fa4b 	bl	800d764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	69da      	ldr	r2, [r3, #28]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	69da      	ldr	r2, [r3, #28]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	69d9      	ldr	r1, [r3, #28]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	021a      	lsls	r2, r3, #8
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	61da      	str	r2, [r3, #28]
      break;
 800d302:	e000      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d304:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a40      	ldr	r2, [pc, #256]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d013      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d38e:	d00f      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a3d      	ldr	r2, [pc, #244]	; (800d488 <TIM_Base_SetConfig+0x118>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d00b      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a3c      	ldr	r2, [pc, #240]	; (800d48c <TIM_Base_SetConfig+0x11c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d007      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a3b      	ldr	r2, [pc, #236]	; (800d490 <TIM_Base_SetConfig+0x120>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d003      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a3a      	ldr	r2, [pc, #232]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d108      	bne.n	800d3c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a2f      	ldr	r2, [pc, #188]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d02b      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3d0:	d027      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a2c      	ldr	r2, [pc, #176]	; (800d488 <TIM_Base_SetConfig+0x118>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d023      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a2b      	ldr	r2, [pc, #172]	; (800d48c <TIM_Base_SetConfig+0x11c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d01f      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <TIM_Base_SetConfig+0x120>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d01b      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a29      	ldr	r2, [pc, #164]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d017      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a28      	ldr	r2, [pc, #160]	; (800d498 <TIM_Base_SetConfig+0x128>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d013      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a27      	ldr	r2, [pc, #156]	; (800d49c <TIM_Base_SetConfig+0x12c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d00f      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a26      	ldr	r2, [pc, #152]	; (800d4a0 <TIM_Base_SetConfig+0x130>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d00b      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a25      	ldr	r2, [pc, #148]	; (800d4a4 <TIM_Base_SetConfig+0x134>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d007      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a24      	ldr	r2, [pc, #144]	; (800d4a8 <TIM_Base_SetConfig+0x138>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d003      	beq.n	800d422 <TIM_Base_SetConfig+0xb2>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a23      	ldr	r2, [pc, #140]	; (800d4ac <TIM_Base_SetConfig+0x13c>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d108      	bne.n	800d434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a0a      	ldr	r2, [pc, #40]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d003      	beq.n	800d468 <TIM_Base_SetConfig+0xf8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a0c      	ldr	r2, [pc, #48]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d103      	bne.n	800d470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	691a      	ldr	r2, [r3, #16]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	615a      	str	r2, [r3, #20]
}
 800d476:	bf00      	nop
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	40010000 	.word	0x40010000
 800d488:	40000400 	.word	0x40000400
 800d48c:	40000800 	.word	0x40000800
 800d490:	40000c00 	.word	0x40000c00
 800d494:	40010400 	.word	0x40010400
 800d498:	40014000 	.word	0x40014000
 800d49c:	40014400 	.word	0x40014400
 800d4a0:	40014800 	.word	0x40014800
 800d4a4:	40001800 	.word	0x40001800
 800d4a8:	40001c00 	.word	0x40001c00
 800d4ac:	40002000 	.word	0x40002000

0800d4b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b087      	sub	sp, #28
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	f023 0201 	bic.w	r2, r3, #1
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f023 0303 	bic.w	r3, r3, #3
 800d4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f023 0302 	bic.w	r3, r3, #2
 800d4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	4313      	orrs	r3, r2
 800d502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a20      	ldr	r2, [pc, #128]	; (800d588 <TIM_OC1_SetConfig+0xd8>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d003      	beq.n	800d514 <TIM_OC1_SetConfig+0x64>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a1f      	ldr	r2, [pc, #124]	; (800d58c <TIM_OC1_SetConfig+0xdc>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d10c      	bne.n	800d52e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f023 0308 	bic.w	r3, r3, #8
 800d51a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	4313      	orrs	r3, r2
 800d524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f023 0304 	bic.w	r3, r3, #4
 800d52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a15      	ldr	r2, [pc, #84]	; (800d588 <TIM_OC1_SetConfig+0xd8>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d003      	beq.n	800d53e <TIM_OC1_SetConfig+0x8e>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a14      	ldr	r2, [pc, #80]	; (800d58c <TIM_OC1_SetConfig+0xdc>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d111      	bne.n	800d562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d54c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	693a      	ldr	r2, [r7, #16]
 800d554:	4313      	orrs	r3, r2
 800d556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	4313      	orrs	r3, r2
 800d560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	621a      	str	r2, [r3, #32]
}
 800d57c:	bf00      	nop
 800d57e:	371c      	adds	r7, #28
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	40010000 	.word	0x40010000
 800d58c:	40010400 	.word	0x40010400

0800d590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a1b      	ldr	r3, [r3, #32]
 800d59e:	f023 0210 	bic.w	r2, r3, #16
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f023 0320 	bic.w	r3, r3, #32
 800d5da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a22      	ldr	r2, [pc, #136]	; (800d674 <TIM_OC2_SetConfig+0xe4>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d003      	beq.n	800d5f8 <TIM_OC2_SetConfig+0x68>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a21      	ldr	r2, [pc, #132]	; (800d678 <TIM_OC2_SetConfig+0xe8>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d10d      	bne.n	800d614 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	011b      	lsls	r3, r3, #4
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	4313      	orrs	r3, r2
 800d60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a17      	ldr	r2, [pc, #92]	; (800d674 <TIM_OC2_SetConfig+0xe4>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d003      	beq.n	800d624 <TIM_OC2_SetConfig+0x94>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a16      	ldr	r2, [pc, #88]	; (800d678 <TIM_OC2_SetConfig+0xe8>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d113      	bne.n	800d64c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d62a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	4313      	orrs	r3, r2
 800d64a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	621a      	str	r2, [r3, #32]
}
 800d666:	bf00      	nop
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	40010000 	.word	0x40010000
 800d678:	40010400 	.word	0x40010400

0800d67c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f023 0303 	bic.w	r3, r3, #3
 800d6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a21      	ldr	r2, [pc, #132]	; (800d75c <TIM_OC3_SetConfig+0xe0>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d003      	beq.n	800d6e2 <TIM_OC3_SetConfig+0x66>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a20      	ldr	r2, [pc, #128]	; (800d760 <TIM_OC3_SetConfig+0xe4>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d10d      	bne.n	800d6fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	021b      	lsls	r3, r3, #8
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a16      	ldr	r2, [pc, #88]	; (800d75c <TIM_OC3_SetConfig+0xe0>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d003      	beq.n	800d70e <TIM_OC3_SetConfig+0x92>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a15      	ldr	r2, [pc, #84]	; (800d760 <TIM_OC3_SetConfig+0xe4>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d113      	bne.n	800d736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	695b      	ldr	r3, [r3, #20]
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	4313      	orrs	r3, r2
 800d728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	4313      	orrs	r3, r2
 800d734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	621a      	str	r2, [r3, #32]
}
 800d750:	bf00      	nop
 800d752:	371c      	adds	r7, #28
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	40010000 	.word	0x40010000
 800d760:	40010400 	.word	0x40010400

0800d764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d764:	b480      	push	{r7}
 800d766:	b087      	sub	sp, #28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	69db      	ldr	r3, [r3, #28]
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	021b      	lsls	r3, r3, #8
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	031b      	lsls	r3, r3, #12
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a12      	ldr	r2, [pc, #72]	; (800d808 <TIM_OC4_SetConfig+0xa4>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d003      	beq.n	800d7cc <TIM_OC4_SetConfig+0x68>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a11      	ldr	r2, [pc, #68]	; (800d80c <TIM_OC4_SetConfig+0xa8>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d109      	bne.n	800d7e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	019b      	lsls	r3, r3, #6
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	685a      	ldr	r2, [r3, #4]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	621a      	str	r2, [r3, #32]
}
 800d7fa:	bf00      	nop
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40010000 	.word	0x40010000
 800d80c:	40010400 	.word	0x40010400

0800d810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	f003 031f 	and.w	r3, r3, #31
 800d822:	2201      	movs	r2, #1
 800d824:	fa02 f303 	lsl.w	r3, r2, r3
 800d828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6a1a      	ldr	r2, [r3, #32]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	43db      	mvns	r3, r3
 800d832:	401a      	ands	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6a1a      	ldr	r2, [r3, #32]
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f003 031f 	and.w	r3, r3, #31
 800d842:	6879      	ldr	r1, [r7, #4]
 800d844:	fa01 f303 	lsl.w	r3, r1, r3
 800d848:	431a      	orrs	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	621a      	str	r2, [r3, #32]
}
 800d84e:	bf00      	nop
 800d850:	371c      	adds	r7, #28
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
	...

0800d85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d101      	bne.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d870:	2302      	movs	r3, #2
 800d872:	e05a      	b.n	800d92a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2202      	movs	r2, #2
 800d880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d89a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a21      	ldr	r2, [pc, #132]	; (800d938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d022      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8c0:	d01d      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a1d      	ldr	r2, [pc, #116]	; (800d93c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d018      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a1b      	ldr	r2, [pc, #108]	; (800d940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d013      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a1a      	ldr	r2, [pc, #104]	; (800d944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d00e      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a18      	ldr	r2, [pc, #96]	; (800d948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d009      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a17      	ldr	r2, [pc, #92]	; (800d94c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d004      	beq.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a15      	ldr	r2, [pc, #84]	; (800d950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d10c      	bne.n	800d918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40010000 	.word	0x40010000
 800d93c:	40000400 	.word	0x40000400
 800d940:	40000800 	.word	0x40000800
 800d944:	40000c00 	.word	0x40000c00
 800d948:	40010400 	.word	0x40010400
 800d94c:	40014000 	.word	0x40014000
 800d950:	40001800 	.word	0x40001800

0800d954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d954:	b480      	push	{r7}
 800d956:	b085      	sub	sp, #20
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d101      	bne.n	800d970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d96c:	2302      	movs	r3, #2
 800d96e:	e03d      	b.n	800d9ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	4313      	orrs	r3, r2
 800d992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	e03f      	b.n	800dab2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d106      	bne.n	800da4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7f8 fb16 	bl	8006078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2224      	movs	r2, #36	; 0x24
 800da50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f829 	bl	800dabc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	691a      	ldr	r2, [r3, #16]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	695a      	ldr	r2, [r3, #20]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2220      	movs	r2, #32
 800daa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2220      	movs	r2, #32
 800daac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
	...

0800dabc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	b085      	sub	sp, #20
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68da      	ldr	r2, [r3, #12]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	430a      	orrs	r2, r1
 800dada:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689a      	ldr	r2, [r3, #8]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	431a      	orrs	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dafe:	f023 030c 	bic.w	r3, r3, #12
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	6812      	ldr	r2, [r2, #0]
 800db06:	68f9      	ldr	r1, [r7, #12]
 800db08:	430b      	orrs	r3, r1
 800db0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	699a      	ldr	r2, [r3, #24]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	430a      	orrs	r2, r1
 800db20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db2a:	f040 818b 	bne.w	800de44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4ac1      	ldr	r2, [pc, #772]	; (800de38 <UART_SetConfig+0x37c>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d005      	beq.n	800db44 <UART_SetConfig+0x88>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4abf      	ldr	r2, [pc, #764]	; (800de3c <UART_SetConfig+0x380>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	f040 80bd 	bne.w	800dcbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800db44:	f7fc fbcc 	bl	800a2e0 <HAL_RCC_GetPCLK2Freq>
 800db48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	461d      	mov	r5, r3
 800db4e:	f04f 0600 	mov.w	r6, #0
 800db52:	46a8      	mov	r8, r5
 800db54:	46b1      	mov	r9, r6
 800db56:	eb18 0308 	adds.w	r3, r8, r8
 800db5a:	eb49 0409 	adc.w	r4, r9, r9
 800db5e:	4698      	mov	r8, r3
 800db60:	46a1      	mov	r9, r4
 800db62:	eb18 0805 	adds.w	r8, r8, r5
 800db66:	eb49 0906 	adc.w	r9, r9, r6
 800db6a:	f04f 0100 	mov.w	r1, #0
 800db6e:	f04f 0200 	mov.w	r2, #0
 800db72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800db76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800db7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800db7e:	4688      	mov	r8, r1
 800db80:	4691      	mov	r9, r2
 800db82:	eb18 0005 	adds.w	r0, r8, r5
 800db86:	eb49 0106 	adc.w	r1, r9, r6
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	461d      	mov	r5, r3
 800db90:	f04f 0600 	mov.w	r6, #0
 800db94:	196b      	adds	r3, r5, r5
 800db96:	eb46 0406 	adc.w	r4, r6, r6
 800db9a:	461a      	mov	r2, r3
 800db9c:	4623      	mov	r3, r4
 800db9e:	f7f3 f88b 	bl	8000cb8 <__aeabi_uldivmod>
 800dba2:	4603      	mov	r3, r0
 800dba4:	460c      	mov	r4, r1
 800dba6:	461a      	mov	r2, r3
 800dba8:	4ba5      	ldr	r3, [pc, #660]	; (800de40 <UART_SetConfig+0x384>)
 800dbaa:	fba3 2302 	umull	r2, r3, r3, r2
 800dbae:	095b      	lsrs	r3, r3, #5
 800dbb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	461d      	mov	r5, r3
 800dbb8:	f04f 0600 	mov.w	r6, #0
 800dbbc:	46a9      	mov	r9, r5
 800dbbe:	46b2      	mov	sl, r6
 800dbc0:	eb19 0309 	adds.w	r3, r9, r9
 800dbc4:	eb4a 040a 	adc.w	r4, sl, sl
 800dbc8:	4699      	mov	r9, r3
 800dbca:	46a2      	mov	sl, r4
 800dbcc:	eb19 0905 	adds.w	r9, r9, r5
 800dbd0:	eb4a 0a06 	adc.w	sl, sl, r6
 800dbd4:	f04f 0100 	mov.w	r1, #0
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dbe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dbe8:	4689      	mov	r9, r1
 800dbea:	4692      	mov	sl, r2
 800dbec:	eb19 0005 	adds.w	r0, r9, r5
 800dbf0:	eb4a 0106 	adc.w	r1, sl, r6
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	461d      	mov	r5, r3
 800dbfa:	f04f 0600 	mov.w	r6, #0
 800dbfe:	196b      	adds	r3, r5, r5
 800dc00:	eb46 0406 	adc.w	r4, r6, r6
 800dc04:	461a      	mov	r2, r3
 800dc06:	4623      	mov	r3, r4
 800dc08:	f7f3 f856 	bl	8000cb8 <__aeabi_uldivmod>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	461a      	mov	r2, r3
 800dc12:	4b8b      	ldr	r3, [pc, #556]	; (800de40 <UART_SetConfig+0x384>)
 800dc14:	fba3 1302 	umull	r1, r3, r3, r2
 800dc18:	095b      	lsrs	r3, r3, #5
 800dc1a:	2164      	movs	r1, #100	; 0x64
 800dc1c:	fb01 f303 	mul.w	r3, r1, r3
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	3332      	adds	r3, #50	; 0x32
 800dc26:	4a86      	ldr	r2, [pc, #536]	; (800de40 <UART_SetConfig+0x384>)
 800dc28:	fba2 2303 	umull	r2, r3, r2, r3
 800dc2c:	095b      	lsrs	r3, r3, #5
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dc34:	4498      	add	r8, r3
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	461d      	mov	r5, r3
 800dc3a:	f04f 0600 	mov.w	r6, #0
 800dc3e:	46a9      	mov	r9, r5
 800dc40:	46b2      	mov	sl, r6
 800dc42:	eb19 0309 	adds.w	r3, r9, r9
 800dc46:	eb4a 040a 	adc.w	r4, sl, sl
 800dc4a:	4699      	mov	r9, r3
 800dc4c:	46a2      	mov	sl, r4
 800dc4e:	eb19 0905 	adds.w	r9, r9, r5
 800dc52:	eb4a 0a06 	adc.w	sl, sl, r6
 800dc56:	f04f 0100 	mov.w	r1, #0
 800dc5a:	f04f 0200 	mov.w	r2, #0
 800dc5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc6a:	4689      	mov	r9, r1
 800dc6c:	4692      	mov	sl, r2
 800dc6e:	eb19 0005 	adds.w	r0, r9, r5
 800dc72:	eb4a 0106 	adc.w	r1, sl, r6
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	461d      	mov	r5, r3
 800dc7c:	f04f 0600 	mov.w	r6, #0
 800dc80:	196b      	adds	r3, r5, r5
 800dc82:	eb46 0406 	adc.w	r4, r6, r6
 800dc86:	461a      	mov	r2, r3
 800dc88:	4623      	mov	r3, r4
 800dc8a:	f7f3 f815 	bl	8000cb8 <__aeabi_uldivmod>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	460c      	mov	r4, r1
 800dc92:	461a      	mov	r2, r3
 800dc94:	4b6a      	ldr	r3, [pc, #424]	; (800de40 <UART_SetConfig+0x384>)
 800dc96:	fba3 1302 	umull	r1, r3, r3, r2
 800dc9a:	095b      	lsrs	r3, r3, #5
 800dc9c:	2164      	movs	r1, #100	; 0x64
 800dc9e:	fb01 f303 	mul.w	r3, r1, r3
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	3332      	adds	r3, #50	; 0x32
 800dca8:	4a65      	ldr	r2, [pc, #404]	; (800de40 <UART_SetConfig+0x384>)
 800dcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800dcae:	095b      	lsrs	r3, r3, #5
 800dcb0:	f003 0207 	and.w	r2, r3, #7
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4442      	add	r2, r8
 800dcba:	609a      	str	r2, [r3, #8]
 800dcbc:	e26f      	b.n	800e19e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dcbe:	f7fc fafb 	bl	800a2b8 <HAL_RCC_GetPCLK1Freq>
 800dcc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	461d      	mov	r5, r3
 800dcc8:	f04f 0600 	mov.w	r6, #0
 800dccc:	46a8      	mov	r8, r5
 800dcce:	46b1      	mov	r9, r6
 800dcd0:	eb18 0308 	adds.w	r3, r8, r8
 800dcd4:	eb49 0409 	adc.w	r4, r9, r9
 800dcd8:	4698      	mov	r8, r3
 800dcda:	46a1      	mov	r9, r4
 800dcdc:	eb18 0805 	adds.w	r8, r8, r5
 800dce0:	eb49 0906 	adc.w	r9, r9, r6
 800dce4:	f04f 0100 	mov.w	r1, #0
 800dce8:	f04f 0200 	mov.w	r2, #0
 800dcec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dcf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dcf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dcf8:	4688      	mov	r8, r1
 800dcfa:	4691      	mov	r9, r2
 800dcfc:	eb18 0005 	adds.w	r0, r8, r5
 800dd00:	eb49 0106 	adc.w	r1, r9, r6
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	461d      	mov	r5, r3
 800dd0a:	f04f 0600 	mov.w	r6, #0
 800dd0e:	196b      	adds	r3, r5, r5
 800dd10:	eb46 0406 	adc.w	r4, r6, r6
 800dd14:	461a      	mov	r2, r3
 800dd16:	4623      	mov	r3, r4
 800dd18:	f7f2 ffce 	bl	8000cb8 <__aeabi_uldivmod>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	461a      	mov	r2, r3
 800dd22:	4b47      	ldr	r3, [pc, #284]	; (800de40 <UART_SetConfig+0x384>)
 800dd24:	fba3 2302 	umull	r2, r3, r3, r2
 800dd28:	095b      	lsrs	r3, r3, #5
 800dd2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	461d      	mov	r5, r3
 800dd32:	f04f 0600 	mov.w	r6, #0
 800dd36:	46a9      	mov	r9, r5
 800dd38:	46b2      	mov	sl, r6
 800dd3a:	eb19 0309 	adds.w	r3, r9, r9
 800dd3e:	eb4a 040a 	adc.w	r4, sl, sl
 800dd42:	4699      	mov	r9, r3
 800dd44:	46a2      	mov	sl, r4
 800dd46:	eb19 0905 	adds.w	r9, r9, r5
 800dd4a:	eb4a 0a06 	adc.w	sl, sl, r6
 800dd4e:	f04f 0100 	mov.w	r1, #0
 800dd52:	f04f 0200 	mov.w	r2, #0
 800dd56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd62:	4689      	mov	r9, r1
 800dd64:	4692      	mov	sl, r2
 800dd66:	eb19 0005 	adds.w	r0, r9, r5
 800dd6a:	eb4a 0106 	adc.w	r1, sl, r6
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	461d      	mov	r5, r3
 800dd74:	f04f 0600 	mov.w	r6, #0
 800dd78:	196b      	adds	r3, r5, r5
 800dd7a:	eb46 0406 	adc.w	r4, r6, r6
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4623      	mov	r3, r4
 800dd82:	f7f2 ff99 	bl	8000cb8 <__aeabi_uldivmod>
 800dd86:	4603      	mov	r3, r0
 800dd88:	460c      	mov	r4, r1
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	4b2c      	ldr	r3, [pc, #176]	; (800de40 <UART_SetConfig+0x384>)
 800dd8e:	fba3 1302 	umull	r1, r3, r3, r2
 800dd92:	095b      	lsrs	r3, r3, #5
 800dd94:	2164      	movs	r1, #100	; 0x64
 800dd96:	fb01 f303 	mul.w	r3, r1, r3
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	3332      	adds	r3, #50	; 0x32
 800dda0:	4a27      	ldr	r2, [pc, #156]	; (800de40 <UART_SetConfig+0x384>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	095b      	lsrs	r3, r3, #5
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ddae:	4498      	add	r8, r3
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	461d      	mov	r5, r3
 800ddb4:	f04f 0600 	mov.w	r6, #0
 800ddb8:	46a9      	mov	r9, r5
 800ddba:	46b2      	mov	sl, r6
 800ddbc:	eb19 0309 	adds.w	r3, r9, r9
 800ddc0:	eb4a 040a 	adc.w	r4, sl, sl
 800ddc4:	4699      	mov	r9, r3
 800ddc6:	46a2      	mov	sl, r4
 800ddc8:	eb19 0905 	adds.w	r9, r9, r5
 800ddcc:	eb4a 0a06 	adc.w	sl, sl, r6
 800ddd0:	f04f 0100 	mov.w	r1, #0
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dde0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dde4:	4689      	mov	r9, r1
 800dde6:	4692      	mov	sl, r2
 800dde8:	eb19 0005 	adds.w	r0, r9, r5
 800ddec:	eb4a 0106 	adc.w	r1, sl, r6
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	461d      	mov	r5, r3
 800ddf6:	f04f 0600 	mov.w	r6, #0
 800ddfa:	196b      	adds	r3, r5, r5
 800ddfc:	eb46 0406 	adc.w	r4, r6, r6
 800de00:	461a      	mov	r2, r3
 800de02:	4623      	mov	r3, r4
 800de04:	f7f2 ff58 	bl	8000cb8 <__aeabi_uldivmod>
 800de08:	4603      	mov	r3, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	461a      	mov	r2, r3
 800de0e:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <UART_SetConfig+0x384>)
 800de10:	fba3 1302 	umull	r1, r3, r3, r2
 800de14:	095b      	lsrs	r3, r3, #5
 800de16:	2164      	movs	r1, #100	; 0x64
 800de18:	fb01 f303 	mul.w	r3, r1, r3
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	3332      	adds	r3, #50	; 0x32
 800de22:	4a07      	ldr	r2, [pc, #28]	; (800de40 <UART_SetConfig+0x384>)
 800de24:	fba2 2303 	umull	r2, r3, r2, r3
 800de28:	095b      	lsrs	r3, r3, #5
 800de2a:	f003 0207 	and.w	r2, r3, #7
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4442      	add	r2, r8
 800de34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800de36:	e1b2      	b.n	800e19e <UART_SetConfig+0x6e2>
 800de38:	40011000 	.word	0x40011000
 800de3c:	40011400 	.word	0x40011400
 800de40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4ad7      	ldr	r2, [pc, #860]	; (800e1a8 <UART_SetConfig+0x6ec>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d005      	beq.n	800de5a <UART_SetConfig+0x39e>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4ad6      	ldr	r2, [pc, #856]	; (800e1ac <UART_SetConfig+0x6f0>)
 800de54:	4293      	cmp	r3, r2
 800de56:	f040 80d1 	bne.w	800dffc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800de5a:	f7fc fa41 	bl	800a2e0 <HAL_RCC_GetPCLK2Freq>
 800de5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	469a      	mov	sl, r3
 800de64:	f04f 0b00 	mov.w	fp, #0
 800de68:	46d0      	mov	r8, sl
 800de6a:	46d9      	mov	r9, fp
 800de6c:	eb18 0308 	adds.w	r3, r8, r8
 800de70:	eb49 0409 	adc.w	r4, r9, r9
 800de74:	4698      	mov	r8, r3
 800de76:	46a1      	mov	r9, r4
 800de78:	eb18 080a 	adds.w	r8, r8, sl
 800de7c:	eb49 090b 	adc.w	r9, r9, fp
 800de80:	f04f 0100 	mov.w	r1, #0
 800de84:	f04f 0200 	mov.w	r2, #0
 800de88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800de8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800de90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800de94:	4688      	mov	r8, r1
 800de96:	4691      	mov	r9, r2
 800de98:	eb1a 0508 	adds.w	r5, sl, r8
 800de9c:	eb4b 0609 	adc.w	r6, fp, r9
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	4619      	mov	r1, r3
 800dea6:	f04f 0200 	mov.w	r2, #0
 800deaa:	f04f 0300 	mov.w	r3, #0
 800deae:	f04f 0400 	mov.w	r4, #0
 800deb2:	0094      	lsls	r4, r2, #2
 800deb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800deb8:	008b      	lsls	r3, r1, #2
 800deba:	461a      	mov	r2, r3
 800debc:	4623      	mov	r3, r4
 800debe:	4628      	mov	r0, r5
 800dec0:	4631      	mov	r1, r6
 800dec2:	f7f2 fef9 	bl	8000cb8 <__aeabi_uldivmod>
 800dec6:	4603      	mov	r3, r0
 800dec8:	460c      	mov	r4, r1
 800deca:	461a      	mov	r2, r3
 800decc:	4bb8      	ldr	r3, [pc, #736]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800dece:	fba3 2302 	umull	r2, r3, r3, r2
 800ded2:	095b      	lsrs	r3, r3, #5
 800ded4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	469b      	mov	fp, r3
 800dedc:	f04f 0c00 	mov.w	ip, #0
 800dee0:	46d9      	mov	r9, fp
 800dee2:	46e2      	mov	sl, ip
 800dee4:	eb19 0309 	adds.w	r3, r9, r9
 800dee8:	eb4a 040a 	adc.w	r4, sl, sl
 800deec:	4699      	mov	r9, r3
 800deee:	46a2      	mov	sl, r4
 800def0:	eb19 090b 	adds.w	r9, r9, fp
 800def4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800def8:	f04f 0100 	mov.w	r1, #0
 800defc:	f04f 0200 	mov.w	r2, #0
 800df00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df0c:	4689      	mov	r9, r1
 800df0e:	4692      	mov	sl, r2
 800df10:	eb1b 0509 	adds.w	r5, fp, r9
 800df14:	eb4c 060a 	adc.w	r6, ip, sl
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	4619      	mov	r1, r3
 800df1e:	f04f 0200 	mov.w	r2, #0
 800df22:	f04f 0300 	mov.w	r3, #0
 800df26:	f04f 0400 	mov.w	r4, #0
 800df2a:	0094      	lsls	r4, r2, #2
 800df2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800df30:	008b      	lsls	r3, r1, #2
 800df32:	461a      	mov	r2, r3
 800df34:	4623      	mov	r3, r4
 800df36:	4628      	mov	r0, r5
 800df38:	4631      	mov	r1, r6
 800df3a:	f7f2 febd 	bl	8000cb8 <__aeabi_uldivmod>
 800df3e:	4603      	mov	r3, r0
 800df40:	460c      	mov	r4, r1
 800df42:	461a      	mov	r2, r3
 800df44:	4b9a      	ldr	r3, [pc, #616]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800df46:	fba3 1302 	umull	r1, r3, r3, r2
 800df4a:	095b      	lsrs	r3, r3, #5
 800df4c:	2164      	movs	r1, #100	; 0x64
 800df4e:	fb01 f303 	mul.w	r3, r1, r3
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	3332      	adds	r3, #50	; 0x32
 800df58:	4a95      	ldr	r2, [pc, #596]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800df5a:	fba2 2303 	umull	r2, r3, r2, r3
 800df5e:	095b      	lsrs	r3, r3, #5
 800df60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df64:	4498      	add	r8, r3
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	469b      	mov	fp, r3
 800df6a:	f04f 0c00 	mov.w	ip, #0
 800df6e:	46d9      	mov	r9, fp
 800df70:	46e2      	mov	sl, ip
 800df72:	eb19 0309 	adds.w	r3, r9, r9
 800df76:	eb4a 040a 	adc.w	r4, sl, sl
 800df7a:	4699      	mov	r9, r3
 800df7c:	46a2      	mov	sl, r4
 800df7e:	eb19 090b 	adds.w	r9, r9, fp
 800df82:	eb4a 0a0c 	adc.w	sl, sl, ip
 800df86:	f04f 0100 	mov.w	r1, #0
 800df8a:	f04f 0200 	mov.w	r2, #0
 800df8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df9a:	4689      	mov	r9, r1
 800df9c:	4692      	mov	sl, r2
 800df9e:	eb1b 0509 	adds.w	r5, fp, r9
 800dfa2:	eb4c 060a 	adc.w	r6, ip, sl
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	f04f 0200 	mov.w	r2, #0
 800dfb0:	f04f 0300 	mov.w	r3, #0
 800dfb4:	f04f 0400 	mov.w	r4, #0
 800dfb8:	0094      	lsls	r4, r2, #2
 800dfba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dfbe:	008b      	lsls	r3, r1, #2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	4623      	mov	r3, r4
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	f7f2 fe76 	bl	8000cb8 <__aeabi_uldivmod>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	460c      	mov	r4, r1
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	4b77      	ldr	r3, [pc, #476]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800dfd4:	fba3 1302 	umull	r1, r3, r3, r2
 800dfd8:	095b      	lsrs	r3, r3, #5
 800dfda:	2164      	movs	r1, #100	; 0x64
 800dfdc:	fb01 f303 	mul.w	r3, r1, r3
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	011b      	lsls	r3, r3, #4
 800dfe4:	3332      	adds	r3, #50	; 0x32
 800dfe6:	4a72      	ldr	r2, [pc, #456]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800dfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfec:	095b      	lsrs	r3, r3, #5
 800dfee:	f003 020f 	and.w	r2, r3, #15
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4442      	add	r2, r8
 800dff8:	609a      	str	r2, [r3, #8]
 800dffa:	e0d0      	b.n	800e19e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800dffc:	f7fc f95c 	bl	800a2b8 <HAL_RCC_GetPCLK1Freq>
 800e000:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	469a      	mov	sl, r3
 800e006:	f04f 0b00 	mov.w	fp, #0
 800e00a:	46d0      	mov	r8, sl
 800e00c:	46d9      	mov	r9, fp
 800e00e:	eb18 0308 	adds.w	r3, r8, r8
 800e012:	eb49 0409 	adc.w	r4, r9, r9
 800e016:	4698      	mov	r8, r3
 800e018:	46a1      	mov	r9, r4
 800e01a:	eb18 080a 	adds.w	r8, r8, sl
 800e01e:	eb49 090b 	adc.w	r9, r9, fp
 800e022:	f04f 0100 	mov.w	r1, #0
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e02e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e032:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e036:	4688      	mov	r8, r1
 800e038:	4691      	mov	r9, r2
 800e03a:	eb1a 0508 	adds.w	r5, sl, r8
 800e03e:	eb4b 0609 	adc.w	r6, fp, r9
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	4619      	mov	r1, r3
 800e048:	f04f 0200 	mov.w	r2, #0
 800e04c:	f04f 0300 	mov.w	r3, #0
 800e050:	f04f 0400 	mov.w	r4, #0
 800e054:	0094      	lsls	r4, r2, #2
 800e056:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e05a:	008b      	lsls	r3, r1, #2
 800e05c:	461a      	mov	r2, r3
 800e05e:	4623      	mov	r3, r4
 800e060:	4628      	mov	r0, r5
 800e062:	4631      	mov	r1, r6
 800e064:	f7f2 fe28 	bl	8000cb8 <__aeabi_uldivmod>
 800e068:	4603      	mov	r3, r0
 800e06a:	460c      	mov	r4, r1
 800e06c:	461a      	mov	r2, r3
 800e06e:	4b50      	ldr	r3, [pc, #320]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800e070:	fba3 2302 	umull	r2, r3, r3, r2
 800e074:	095b      	lsrs	r3, r3, #5
 800e076:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	469b      	mov	fp, r3
 800e07e:	f04f 0c00 	mov.w	ip, #0
 800e082:	46d9      	mov	r9, fp
 800e084:	46e2      	mov	sl, ip
 800e086:	eb19 0309 	adds.w	r3, r9, r9
 800e08a:	eb4a 040a 	adc.w	r4, sl, sl
 800e08e:	4699      	mov	r9, r3
 800e090:	46a2      	mov	sl, r4
 800e092:	eb19 090b 	adds.w	r9, r9, fp
 800e096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e09a:	f04f 0100 	mov.w	r1, #0
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0ae:	4689      	mov	r9, r1
 800e0b0:	4692      	mov	sl, r2
 800e0b2:	eb1b 0509 	adds.w	r5, fp, r9
 800e0b6:	eb4c 060a 	adc.w	r6, ip, sl
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	f04f 0200 	mov.w	r2, #0
 800e0c4:	f04f 0300 	mov.w	r3, #0
 800e0c8:	f04f 0400 	mov.w	r4, #0
 800e0cc:	0094      	lsls	r4, r2, #2
 800e0ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0d2:	008b      	lsls	r3, r1, #2
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	4623      	mov	r3, r4
 800e0d8:	4628      	mov	r0, r5
 800e0da:	4631      	mov	r1, r6
 800e0dc:	f7f2 fdec 	bl	8000cb8 <__aeabi_uldivmod>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	4b32      	ldr	r3, [pc, #200]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800e0e8:	fba3 1302 	umull	r1, r3, r3, r2
 800e0ec:	095b      	lsrs	r3, r3, #5
 800e0ee:	2164      	movs	r1, #100	; 0x64
 800e0f0:	fb01 f303 	mul.w	r3, r1, r3
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	3332      	adds	r3, #50	; 0x32
 800e0fa:	4a2d      	ldr	r2, [pc, #180]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800e0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e100:	095b      	lsrs	r3, r3, #5
 800e102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e106:	4498      	add	r8, r3
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	469b      	mov	fp, r3
 800e10c:	f04f 0c00 	mov.w	ip, #0
 800e110:	46d9      	mov	r9, fp
 800e112:	46e2      	mov	sl, ip
 800e114:	eb19 0309 	adds.w	r3, r9, r9
 800e118:	eb4a 040a 	adc.w	r4, sl, sl
 800e11c:	4699      	mov	r9, r3
 800e11e:	46a2      	mov	sl, r4
 800e120:	eb19 090b 	adds.w	r9, r9, fp
 800e124:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e128:	f04f 0100 	mov.w	r1, #0
 800e12c:	f04f 0200 	mov.w	r2, #0
 800e130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e134:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e138:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e13c:	4689      	mov	r9, r1
 800e13e:	4692      	mov	sl, r2
 800e140:	eb1b 0509 	adds.w	r5, fp, r9
 800e144:	eb4c 060a 	adc.w	r6, ip, sl
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	4619      	mov	r1, r3
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	f04f 0300 	mov.w	r3, #0
 800e156:	f04f 0400 	mov.w	r4, #0
 800e15a:	0094      	lsls	r4, r2, #2
 800e15c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e160:	008b      	lsls	r3, r1, #2
 800e162:	461a      	mov	r2, r3
 800e164:	4623      	mov	r3, r4
 800e166:	4628      	mov	r0, r5
 800e168:	4631      	mov	r1, r6
 800e16a:	f7f2 fda5 	bl	8000cb8 <__aeabi_uldivmod>
 800e16e:	4603      	mov	r3, r0
 800e170:	460c      	mov	r4, r1
 800e172:	461a      	mov	r2, r3
 800e174:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800e176:	fba3 1302 	umull	r1, r3, r3, r2
 800e17a:	095b      	lsrs	r3, r3, #5
 800e17c:	2164      	movs	r1, #100	; 0x64
 800e17e:	fb01 f303 	mul.w	r3, r1, r3
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	011b      	lsls	r3, r3, #4
 800e186:	3332      	adds	r3, #50	; 0x32
 800e188:	4a09      	ldr	r2, [pc, #36]	; (800e1b0 <UART_SetConfig+0x6f4>)
 800e18a:	fba2 2303 	umull	r2, r3, r2, r3
 800e18e:	095b      	lsrs	r3, r3, #5
 800e190:	f003 020f 	and.w	r2, r3, #15
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4442      	add	r2, r8
 800e19a:	609a      	str	r2, [r3, #8]
}
 800e19c:	e7ff      	b.n	800e19e <UART_SetConfig+0x6e2>
 800e19e:	bf00      	nop
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a8:	40011000 	.word	0x40011000
 800e1ac:	40011400 	.word	0x40011400
 800e1b0:	51eb851f 	.word	0x51eb851f

0800e1b4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e1b4:	b084      	sub	sp, #16
 800e1b6:	b480      	push	{r7}
 800e1b8:	b085      	sub	sp, #20
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	f107 001c 	add.w	r0, r7, #28
 800e1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e1ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e1ce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e1d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e1d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e1da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e1de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e1ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	b004      	add	sp, #16
 800e208:	4770      	bx	lr

0800e20a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b083      	sub	sp, #12
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e218:	4618      	mov	r0, r3
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2203      	movs	r2, #3
 800e252:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e254:	2002      	movs	r0, #2
 800e256:	f7f9 fbdd 	bl	8007a14 <HAL_Delay>
  
  return HAL_OK;
 800e25a:	2300      	movs	r3, #0
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 0303 	and.w	r3, r3, #3
}
 800e274:	4618      	mov	r0, r3
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e29e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e2a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e2aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e2ba:	f023 030f 	bic.w	r3, r3, #15
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	431a      	orrs	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	691b      	ldr	r3, [r3, #16]
 800e2e0:	b2db      	uxtb	r3, r3
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b085      	sub	sp, #20
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	3314      	adds	r3, #20
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	4413      	add	r3, r2
 800e302:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
}  
 800e308:	4618      	mov	r0, r3
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e33a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e340:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e346:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e352:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	431a      	orrs	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e35e:	2300      	movs	r3, #0

}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e37a:	2310      	movs	r3, #16
 800e37c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e37e:	2340      	movs	r3, #64	; 0x40
 800e380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e382:	2300      	movs	r3, #0
 800e384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e38a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e38c:	f107 0308 	add.w	r3, r7, #8
 800e390:	4619      	mov	r1, r3
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7ff ff74 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e398:	f241 3288 	movw	r2, #5000	; 0x1388
 800e39c:	2110      	movs	r1, #16
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fa40 	bl	800e824 <SDMMC_GetCmdResp1>
 800e3a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e3be:	2311      	movs	r3, #17
 800e3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3c2:	2340      	movs	r3, #64	; 0x40
 800e3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3d0:	f107 0308 	add.w	r3, r7, #8
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff ff52 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3e0:	2111      	movs	r1, #17
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fa1e 	bl	800e824 <SDMMC_GetCmdResp1>
 800e3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3720      	adds	r7, #32
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e402:	2312      	movs	r3, #18
 800e404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e406:	2340      	movs	r3, #64	; 0x40
 800e408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e414:	f107 0308 	add.w	r3, r7, #8
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff ff30 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e420:	f241 3288 	movw	r2, #5000	; 0x1388
 800e424:	2112      	movs	r1, #18
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f9fc 	bl	800e824 <SDMMC_GetCmdResp1>
 800e42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e42e:	69fb      	ldr	r3, [r7, #28]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3720      	adds	r7, #32
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b088      	sub	sp, #32
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e446:	2318      	movs	r3, #24
 800e448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e44a:	2340      	movs	r3, #64	; 0x40
 800e44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e44e:	2300      	movs	r3, #0
 800e450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e458:	f107 0308 	add.w	r3, r7, #8
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7ff ff0e 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e464:	f241 3288 	movw	r2, #5000	; 0x1388
 800e468:	2118      	movs	r1, #24
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f9da 	bl	800e824 <SDMMC_GetCmdResp1>
 800e470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e472:	69fb      	ldr	r3, [r7, #28]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e48a:	2319      	movs	r3, #25
 800e48c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e48e:	2340      	movs	r3, #64	; 0x40
 800e490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e492:	2300      	movs	r3, #0
 800e494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e49a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e49c:	f107 0308 	add.w	r3, r7, #8
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff feec 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4ac:	2119      	movs	r1, #25
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f9b8 	bl	800e824 <SDMMC_GetCmdResp1>
 800e4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4b6:	69fb      	ldr	r3, [r7, #28]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3720      	adds	r7, #32
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b088      	sub	sp, #32
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4de:	f107 0308 	add.w	r3, r7, #8
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff fecb 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e4ea:	4a05      	ldr	r2, [pc, #20]	; (800e500 <SDMMC_CmdStopTransfer+0x40>)
 800e4ec:	210c      	movs	r1, #12
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f998 	bl	800e824 <SDMMC_GetCmdResp1>
 800e4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f6:	69fb      	ldr	r3, [r7, #28]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3720      	adds	r7, #32
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	05f5e100 	.word	0x05f5e100

0800e504 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08a      	sub	sp, #40	; 0x28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e514:	2307      	movs	r3, #7
 800e516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e518:	2340      	movs	r3, #64	; 0x40
 800e51a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e51c:	2300      	movs	r3, #0
 800e51e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e524:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	4619      	mov	r1, r3
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f7ff fea7 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e532:	f241 3288 	movw	r2, #5000	; 0x1388
 800e536:	2107      	movs	r1, #7
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 f973 	bl	800e824 <SDMMC_GetCmdResp1>
 800e53e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e542:	4618      	mov	r0, r3
 800e544:	3728      	adds	r7, #40	; 0x28
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b088      	sub	sp, #32
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e552:	2300      	movs	r3, #0
 800e554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e55a:	2300      	movs	r3, #0
 800e55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e55e:	2300      	movs	r3, #0
 800e560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e566:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e568:	f107 0308 	add.w	r3, r7, #8
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fe86 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f92d 	bl	800e7d4 <SDMMC_GetCmdError>
 800e57a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e57c:	69fb      	ldr	r3, [r7, #28]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3720      	adds	r7, #32
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b088      	sub	sp, #32
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e58e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e594:	2308      	movs	r3, #8
 800e596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e598:	2340      	movs	r3, #64	; 0x40
 800e59a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e59c:	2300      	movs	r3, #0
 800e59e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5a6:	f107 0308 	add.w	r3, r7, #8
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff fe67 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fb16 	bl	800ebe4 <SDMMC_GetCmdResp7>
 800e5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ba:	69fb      	ldr	r3, [r7, #28]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3720      	adds	r7, #32
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e5d2:	2337      	movs	r3, #55	; 0x37
 800e5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5d6:	2340      	movs	r3, #64	; 0x40
 800e5d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5e4:	f107 0308 	add.w	r3, r7, #8
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff fe48 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f4:	2137      	movs	r1, #55	; 0x37
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f914 	bl	800e824 <SDMMC_GetCmdResp1>
 800e5fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5fe:	69fb      	ldr	r3, [r7, #28]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3720      	adds	r7, #32
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e61e:	2329      	movs	r3, #41	; 0x29
 800e620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e622:	2340      	movs	r3, #64	; 0x40
 800e624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e62e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e630:	f107 0308 	add.w	r3, r7, #8
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fe22 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fa23 	bl	800ea88 <SDMMC_GetCmdResp3>
 800e642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e644:	69fb      	ldr	r3, [r7, #28]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3720      	adds	r7, #32
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b088      	sub	sp, #32
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e65c:	2306      	movs	r3, #6
 800e65e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e660:	2340      	movs	r3, #64	; 0x40
 800e662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e664:	2300      	movs	r3, #0
 800e666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e66c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e66e:	f107 0308 	add.w	r3, r7, #8
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff fe03 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e67e:	2106      	movs	r1, #6
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f8cf 	bl	800e824 <SDMMC_GetCmdResp1>
 800e686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e688:	69fb      	ldr	r3, [r7, #28]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3720      	adds	r7, #32
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b088      	sub	sp, #32
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e69e:	2333      	movs	r3, #51	; 0x33
 800e6a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6a2:	2340      	movs	r3, #64	; 0x40
 800e6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6b0:	f107 0308 	add.w	r3, r7, #8
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fde2 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6c0:	2133      	movs	r1, #51	; 0x33
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f8ae 	bl	800e824 <SDMMC_GetCmdResp1>
 800e6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3720      	adds	r7, #32
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e6e4:	23c0      	movs	r3, #192	; 0xc0
 800e6e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6f2:	f107 0308 	add.w	r3, r7, #8
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7ff fdc1 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f97c 	bl	800e9fc <SDMMC_GetCmdResp2>
 800e704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e706:	69fb      	ldr	r3, [r7, #28]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3720      	adds	r7, #32
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e71e:	2309      	movs	r3, #9
 800e720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e722:	23c0      	movs	r3, #192	; 0xc0
 800e724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e726:	2300      	movs	r3, #0
 800e728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e72e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e730:	f107 0308 	add.w	r3, r7, #8
 800e734:	4619      	mov	r1, r3
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7ff fda2 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f95d 	bl	800e9fc <SDMMC_GetCmdResp2>
 800e742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e744:	69fb      	ldr	r3, [r7, #28]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3720      	adds	r7, #32
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b088      	sub	sp, #32
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e758:	2300      	movs	r3, #0
 800e75a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e75c:	2303      	movs	r3, #3
 800e75e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e760:	2340      	movs	r3, #64	; 0x40
 800e762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e764:	2300      	movs	r3, #0
 800e766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e76c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e76e:	f107 0308 	add.w	r3, r7, #8
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff fd83 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	2103      	movs	r1, #3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f9bc 	bl	800eafc <SDMMC_GetCmdResp6>
 800e784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e786:	69fb      	ldr	r3, [r7, #28]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3720      	adds	r7, #32
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e79e:	230d      	movs	r3, #13
 800e7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7a2:	2340      	movs	r3, #64	; 0x40
 800e7a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7b0:	f107 0308 	add.w	r3, r7, #8
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff fd62 	bl	800e280 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c0:	210d      	movs	r1, #13
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f82e 	bl	800e824 <SDMMC_GetCmdResp1>
 800e7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7ca:	69fb      	ldr	r3, [r7, #28]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3720      	adds	r7, #32
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e7d4:	b490      	push	{r4, r7}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7dc:	4b0f      	ldr	r3, [pc, #60]	; (800e81c <SDMMC_GetCmdError+0x48>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a0f      	ldr	r2, [pc, #60]	; (800e820 <SDMMC_GetCmdError+0x4c>)
 800e7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7e6:	0a5b      	lsrs	r3, r3, #9
 800e7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	1e5c      	subs	r4, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d102      	bne.n	800e7fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7fc:	e009      	b.n	800e812 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0f2      	beq.n	800e7f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	22c5      	movs	r2, #197	; 0xc5
 800e80e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bc90      	pop	{r4, r7}
 800e81a:	4770      	bx	lr
 800e81c:	20000000 	.word	0x20000000
 800e820:	10624dd3 	.word	0x10624dd3

0800e824 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	460b      	mov	r3, r1
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e832:	4b6f      	ldr	r3, [pc, #444]	; (800e9f0 <SDMMC_GetCmdResp1+0x1cc>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a6f      	ldr	r2, [pc, #444]	; (800e9f4 <SDMMC_GetCmdResp1+0x1d0>)
 800e838:	fba2 2303 	umull	r2, r3, r2, r3
 800e83c:	0a5b      	lsrs	r3, r3, #9
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e844:	4623      	mov	r3, r4
 800e846:	1e5c      	subs	r4, r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e84c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e850:	e0c9      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e856:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d0f0      	beq.n	800e844 <SDMMC_GetCmdResp1+0x20>
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1eb      	bne.n	800e844 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e870:	f003 0304 	and.w	r3, r3, #4
 800e874:	2b00      	cmp	r3, #0
 800e876:	d004      	beq.n	800e882 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2204      	movs	r2, #4
 800e87c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e87e:	2304      	movs	r3, #4
 800e880:	e0b1      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2201      	movs	r2, #1
 800e892:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e894:	2301      	movs	r3, #1
 800e896:	e0a6      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	22c5      	movs	r2, #197	; 0xc5
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f7ff fd18 	bl	800e2d4 <SDIO_GetCommandResponse>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	7afb      	ldrb	r3, [r7, #11]
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d001      	beq.n	800e8b2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e099      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f7ff fd1a 	bl	800e2ee <SDIO_GetResponse>
 800e8ba:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	4b4e      	ldr	r3, [pc, #312]	; (800e9f8 <SDMMC_GetCmdResp1+0x1d4>)
 800e8c0:	4013      	ands	r3, r2
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d101      	bne.n	800e8ca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	e08d      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	da02      	bge.n	800e8d6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e8d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e8d4:	e087      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e8e0:	2340      	movs	r3, #64	; 0x40
 800e8e2:	e080      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e8ee:	2380      	movs	r3, #128	; 0x80
 800e8f0:	e079      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e8fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e900:	e071      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e90c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e910:	e069      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e920:	e061      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e92c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e930:	e059      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e93c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e940:	e051      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e94c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e950:	e049      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d002      	beq.n	800e962 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e95c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e960:	e041      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e96c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e970:	e039      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e97c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e980:	e031      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e98c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e990:	e029      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e99c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e9a0:	e021      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e9ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e9b0:	e019      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e9bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e9c0:	e011      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e9cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e9d0:	e009      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	f003 0308 	and.w	r3, r3, #8
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e9dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e9e0:	e001      	b.n	800e9e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e9e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	371c      	adds	r7, #28
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd90      	pop	{r4, r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20000000 	.word	0x20000000
 800e9f4:	10624dd3 	.word	0x10624dd3
 800e9f8:	fdffe008 	.word	0xfdffe008

0800e9fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e9fc:	b490      	push	{r4, r7}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea04:	4b1e      	ldr	r3, [pc, #120]	; (800ea80 <SDMMC_GetCmdResp2+0x84>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a1e      	ldr	r2, [pc, #120]	; (800ea84 <SDMMC_GetCmdResp2+0x88>)
 800ea0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea0e:	0a5b      	lsrs	r3, r3, #9
 800ea10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ea18:	4623      	mov	r3, r4
 800ea1a:	1e5c      	subs	r4, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea24:	e026      	b.n	800ea74 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0f0      	beq.n	800ea18 <SDMMC_GetCmdResp2+0x1c>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1eb      	bne.n	800ea18 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea44:	f003 0304 	and.w	r3, r3, #4
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2204      	movs	r2, #4
 800ea50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea52:	2304      	movs	r3, #4
 800ea54:	e00e      	b.n	800ea74 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d004      	beq.n	800ea6c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e003      	b.n	800ea74 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	22c5      	movs	r2, #197	; 0xc5
 800ea70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bc90      	pop	{r4, r7}
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	20000000 	.word	0x20000000
 800ea84:	10624dd3 	.word	0x10624dd3

0800ea88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ea88:	b490      	push	{r4, r7}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea90:	4b18      	ldr	r3, [pc, #96]	; (800eaf4 <SDMMC_GetCmdResp3+0x6c>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a18      	ldr	r2, [pc, #96]	; (800eaf8 <SDMMC_GetCmdResp3+0x70>)
 800ea96:	fba2 2303 	umull	r2, r3, r2, r3
 800ea9a:	0a5b      	lsrs	r3, r3, #9
 800ea9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaa0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eaa4:	4623      	mov	r3, r4
 800eaa6:	1e5c      	subs	r4, r3, #1
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d102      	bne.n	800eab2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eaac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eab0:	e01b      	b.n	800eaea <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0f0      	beq.n	800eaa4 <SDMMC_GetCmdResp3+0x1c>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1eb      	bne.n	800eaa4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d004      	beq.n	800eae2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2204      	movs	r2, #4
 800eadc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eade:	2304      	movs	r3, #4
 800eae0:	e003      	b.n	800eaea <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	22c5      	movs	r2, #197	; 0xc5
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bc90      	pop	{r4, r7}
 800eaf2:	4770      	bx	lr
 800eaf4:	20000000 	.word	0x20000000
 800eaf8:	10624dd3 	.word	0x10624dd3

0800eafc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	460b      	mov	r3, r1
 800eb06:	607a      	str	r2, [r7, #4]
 800eb08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb0a:	4b34      	ldr	r3, [pc, #208]	; (800ebdc <SDMMC_GetCmdResp6+0xe0>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a34      	ldr	r2, [pc, #208]	; (800ebe0 <SDMMC_GetCmdResp6+0xe4>)
 800eb10:	fba2 2303 	umull	r2, r3, r2, r3
 800eb14:	0a5b      	lsrs	r3, r3, #9
 800eb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb1a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eb1e:	4623      	mov	r3, r4
 800eb20:	1e5c      	subs	r4, r3, #1
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb2a:	e052      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb30:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d0f0      	beq.n	800eb1e <SDMMC_GetCmdResp6+0x22>
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1eb      	bne.n	800eb1e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4a:	f003 0304 	and.w	r3, r3, #4
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2204      	movs	r2, #4
 800eb56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb58:	2304      	movs	r3, #4
 800eb5a:	e03a      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e02f      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7ff fbae 	bl	800e2d4 <SDIO_GetCommandResponse>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	7afb      	ldrb	r3, [r7, #11]
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d001      	beq.n	800eb86 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e025      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	22c5      	movs	r2, #197	; 0xc5
 800eb8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff fbad 	bl	800e2ee <SDIO_GetResponse>
 800eb94:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d106      	bne.n	800ebae <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	0c1b      	lsrs	r3, r3, #16
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e011      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ebb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ebbc:	e009      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ebc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebcc:	e001      	b.n	800ebd2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ebce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	371c      	adds	r7, #28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd90      	pop	{r4, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20000000 	.word	0x20000000
 800ebe0:	10624dd3 	.word	0x10624dd3

0800ebe4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ebe4:	b490      	push	{r4, r7}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebec:	4b21      	ldr	r3, [pc, #132]	; (800ec74 <SDMMC_GetCmdResp7+0x90>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a21      	ldr	r2, [pc, #132]	; (800ec78 <SDMMC_GetCmdResp7+0x94>)
 800ebf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf6:	0a5b      	lsrs	r3, r3, #9
 800ebf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebfc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ec00:	4623      	mov	r3, r4
 800ec02:	1e5c      	subs	r4, r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec0c:	e02c      	b.n	800ec68 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0f0      	beq.n	800ec00 <SDMMC_GetCmdResp7+0x1c>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1eb      	bne.n	800ec00 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d004      	beq.n	800ec3e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2204      	movs	r2, #4
 800ec38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec3a:	2304      	movs	r3, #4
 800ec3c:	e014      	b.n	800ec68 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec42:	f003 0301 	and.w	r3, r3, #1
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d004      	beq.n	800ec54 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec50:	2301      	movs	r3, #1
 800ec52:	e009      	b.n	800ec68 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2240      	movs	r2, #64	; 0x40
 800ec64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ec66:	2300      	movs	r3, #0
  
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bc90      	pop	{r4, r7}
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	20000000 	.word	0x20000000
 800ec78:	10624dd3 	.word	0x10624dd3

0800ec7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ec80:	4904      	ldr	r1, [pc, #16]	; (800ec94 <MX_FATFS_Init+0x18>)
 800ec82:	4805      	ldr	r0, [pc, #20]	; (800ec98 <MX_FATFS_Init+0x1c>)
 800ec84:	f003 fb9c 	bl	80123c0 <FATFS_LinkDriver>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4b03      	ldr	r3, [pc, #12]	; (800ec9c <MX_FATFS_Init+0x20>)
 800ec8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec90:	bf00      	nop
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	20035f60 	.word	0x20035f60
 800ec98:	08017e18 	.word	0x08017e18
 800ec9c:	20035f5c 	.word	0x20035f5c

0800eca0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ecaa:	f000 f896 	bl	800edda <BSP_SD_IsDetected>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d001      	beq.n	800ecb8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e012      	b.n	800ecde <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ecb8:	480b      	ldr	r0, [pc, #44]	; (800ece8 <BSP_SD_Init+0x48>)
 800ecba:	f7fb ffa5 	bl	800ac08 <HAL_SD_Init>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ecc2:	79fb      	ldrb	r3, [r7, #7]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d109      	bne.n	800ecdc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ecc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eccc:	4806      	ldr	r0, [pc, #24]	; (800ece8 <BSP_SD_Init+0x48>)
 800ecce:	f7fc fd4f 	bl	800b770 <HAL_SD_ConfigWideBusOperation>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d001      	beq.n	800ecdc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20035d58 	.word	0x20035d58

0800ecec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	68f9      	ldr	r1, [r7, #12]
 800ed02:	4806      	ldr	r0, [pc, #24]	; (800ed1c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ed04:	f7fc f810 	bl	800ad28 <HAL_SD_ReadBlocks_DMA>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	20035d58 	.word	0x20035d58

0800ed20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	68f9      	ldr	r1, [r7, #12]
 800ed36:	4806      	ldr	r0, [pc, #24]	; (800ed50 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ed38:	f7fc f8de 	bl	800aef8 <HAL_SD_WriteBlocks_DMA>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20035d58 	.word	0x20035d58

0800ed54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed58:	4805      	ldr	r0, [pc, #20]	; (800ed70 <BSP_SD_GetCardState+0x1c>)
 800ed5a:	f7fc fd85 	bl	800b868 <HAL_SD_GetCardState>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b04      	cmp	r3, #4
 800ed62:	bf14      	ite	ne
 800ed64:	2301      	movne	r3, #1
 800ed66:	2300      	moveq	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20035d58 	.word	0x20035d58

0800ed74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	4803      	ldr	r0, [pc, #12]	; (800ed8c <BSP_SD_GetCardInfo+0x18>)
 800ed80:	f7fc fcca 	bl	800b718 <HAL_SD_GetCardInfo>
}
 800ed84:	bf00      	nop
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20035d58 	.word	0x20035d58

0800ed90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ed98:	f000 f818 	bl	800edcc <BSP_SD_AbortCallback>
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800edac:	f000 f9a8 	bl	800f100 <BSP_SD_WriteCpltCallback>
}
 800edb0:	bf00      	nop
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800edc0:	f000 f9aa 	bl	800f118 <BSP_SD_ReadCpltCallback>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0

}
 800edd0:	bf00      	nop
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ede0:	2301      	movs	r3, #1
 800ede2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ede4:	f000 f80c 	bl	800ee00 <BSP_PlatformIsDetected>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d101      	bne.n	800edf2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800edee:	2300      	movs	r3, #0
 800edf0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800edf2:	79fb      	ldrb	r3, [r7, #7]
 800edf4:	b2db      	uxtb	r3, r3
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ee06:	2301      	movs	r3, #1
 800ee08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ee0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ee0e:	4806      	ldr	r0, [pc, #24]	; (800ee28 <BSP_PlatformIsDetected+0x28>)
 800ee10:	f7fa f87e 	bl	8008f10 <HAL_GPIO_ReadPin>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	40020000 	.word	0x40020000

0800ee2c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ee34:	f7f8 fde2 	bl	80079fc <HAL_GetTick>
 800ee38:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ee3a:	e006      	b.n	800ee4a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee3c:	f7ff ff8a 	bl	800ed54 <BSP_SD_GetCardState>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e009      	b.n	800ee5e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ee4a:	f7f8 fdd7 	bl	80079fc <HAL_GetTick>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d8f0      	bhi.n	800ee3c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ee5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee72:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <SD_CheckStatus+0x38>)
 800ee74:	2201      	movs	r2, #1
 800ee76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee78:	f7ff ff6c 	bl	800ed54 <BSP_SD_GetCardState>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d107      	bne.n	800ee92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee82:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <SD_CheckStatus+0x38>)
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f023 0301 	bic.w	r3, r3, #1
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b04      	ldr	r3, [pc, #16]	; (800eea0 <SD_CheckStatus+0x38>)
 800ee90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee92:	4b03      	ldr	r3, [pc, #12]	; (800eea0 <SD_CheckStatus+0x38>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	b2db      	uxtb	r3, r3
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	20000009 	.word	0x20000009

0800eea4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	4603      	mov	r3, r0
 800eeac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800eeae:	f7ff fef7 	bl	800eca0 <BSP_SD_Init>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d107      	bne.n	800eec8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff ffd4 	bl	800ee68 <SD_CheckStatus>
 800eec0:	4603      	mov	r3, r0
 800eec2:	461a      	mov	r2, r3
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <SD_initialize+0x34>)
 800eec6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eec8:	4b03      	ldr	r3, [pc, #12]	; (800eed8 <SD_initialize+0x34>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	b2db      	uxtb	r3, r3
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20000009 	.word	0x20000009

0800eedc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	4603      	mov	r3, r0
 800eee4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eee6:	79fb      	ldrb	r3, [r7, #7]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff ffbd 	bl	800ee68 <SD_CheckStatus>
 800eeee:	4603      	mov	r3, r0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	607a      	str	r2, [r7, #4]
 800ef02:	603b      	str	r3, [r7, #0]
 800ef04:	4603      	mov	r3, r0
 800ef06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef0c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ef10:	f7ff ff8c 	bl	800ee2c <SD_CheckStatusWithTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	da01      	bge.n	800ef1e <SD_read+0x26>
  {
    return res;
 800ef1a:	7dfb      	ldrb	r3, [r7, #23]
 800ef1c:	e03b      	b.n	800ef96 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	6879      	ldr	r1, [r7, #4]
 800ef22:	68b8      	ldr	r0, [r7, #8]
 800ef24:	f7ff fee2 	bl	800ecec <BSP_SD_ReadBlocks_DMA>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d132      	bne.n	800ef94 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ef2e:	4b1c      	ldr	r3, [pc, #112]	; (800efa0 <SD_read+0xa8>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ef34:	f7f8 fd62 	bl	80079fc <HAL_GetTick>
 800ef38:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ef3a:	bf00      	nop
 800ef3c:	4b18      	ldr	r3, [pc, #96]	; (800efa0 <SD_read+0xa8>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d108      	bne.n	800ef56 <SD_read+0x5e>
 800ef44:	f7f8 fd5a 	bl	80079fc <HAL_GetTick>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d9f2      	bls.n	800ef3c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ef56:	4b12      	ldr	r3, [pc, #72]	; (800efa0 <SD_read+0xa8>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d102      	bne.n	800ef64 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	75fb      	strb	r3, [r7, #23]
 800ef62:	e017      	b.n	800ef94 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ef64:	4b0e      	ldr	r3, [pc, #56]	; (800efa0 <SD_read+0xa8>)
 800ef66:	2200      	movs	r2, #0
 800ef68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ef6a:	f7f8 fd47 	bl	80079fc <HAL_GetTick>
 800ef6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef70:	e007      	b.n	800ef82 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef72:	f7ff feef 	bl	800ed54 <BSP_SD_GetCardState>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <SD_read+0x8a>
          {
            res = RES_OK;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ef80:	e008      	b.n	800ef94 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef82:	f7f8 fd3b 	bl	80079fc <HAL_GetTick>
 800ef86:	4602      	mov	r2, r0
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d9ee      	bls.n	800ef72 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3718      	adds	r7, #24
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	200335f4 	.word	0x200335f4

0800efa4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	4603      	mov	r3, r0
 800efb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800efb8:	4b24      	ldr	r3, [pc, #144]	; (800f04c <SD_write+0xa8>)
 800efba:	2200      	movs	r2, #0
 800efbc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800efbe:	f247 5030 	movw	r0, #30000	; 0x7530
 800efc2:	f7ff ff33 	bl	800ee2c <SD_CheckStatusWithTimeout>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	da01      	bge.n	800efd0 <SD_write+0x2c>
  {
    return res;
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	e038      	b.n	800f042 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	6879      	ldr	r1, [r7, #4]
 800efd4:	68b8      	ldr	r0, [r7, #8]
 800efd6:	f7ff fea3 	bl	800ed20 <BSP_SD_WriteBlocks_DMA>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d12f      	bne.n	800f040 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800efe0:	f7f8 fd0c 	bl	80079fc <HAL_GetTick>
 800efe4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800efe6:	bf00      	nop
 800efe8:	4b18      	ldr	r3, [pc, #96]	; (800f04c <SD_write+0xa8>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d108      	bne.n	800f002 <SD_write+0x5e>
 800eff0:	f7f8 fd04 	bl	80079fc <HAL_GetTick>
 800eff4:	4602      	mov	r2, r0
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	f247 522f 	movw	r2, #29999	; 0x752f
 800effe:	4293      	cmp	r3, r2
 800f000:	d9f2      	bls.n	800efe8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f002:	4b12      	ldr	r3, [pc, #72]	; (800f04c <SD_write+0xa8>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	75fb      	strb	r3, [r7, #23]
 800f00e:	e017      	b.n	800f040 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f010:	4b0e      	ldr	r3, [pc, #56]	; (800f04c <SD_write+0xa8>)
 800f012:	2200      	movs	r2, #0
 800f014:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f016:	f7f8 fcf1 	bl	80079fc <HAL_GetTick>
 800f01a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f01c:	e007      	b.n	800f02e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f01e:	f7ff fe99 	bl	800ed54 <BSP_SD_GetCardState>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <SD_write+0x8a>
          {
            res = RES_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	75fb      	strb	r3, [r7, #23]
            break;
 800f02c:	e008      	b.n	800f040 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f02e:	f7f8 fce5 	bl	80079fc <HAL_GetTick>
 800f032:	4602      	mov	r2, r0
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	f247 522f 	movw	r2, #29999	; 0x752f
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d9ee      	bls.n	800f01e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f040:	7dfb      	ldrb	r3, [r7, #23]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	200335f0 	.word	0x200335f0

0800f050 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08c      	sub	sp, #48	; 0x30
 800f054:	af00      	add	r7, sp, #0
 800f056:	4603      	mov	r3, r0
 800f058:	603a      	str	r2, [r7, #0]
 800f05a:	71fb      	strb	r3, [r7, #7]
 800f05c:	460b      	mov	r3, r1
 800f05e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f060:	2301      	movs	r3, #1
 800f062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f066:	4b25      	ldr	r3, [pc, #148]	; (800f0fc <SD_ioctl+0xac>)
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <SD_ioctl+0x28>
 800f074:	2303      	movs	r3, #3
 800f076:	e03c      	b.n	800f0f2 <SD_ioctl+0xa2>

  switch (cmd)
 800f078:	79bb      	ldrb	r3, [r7, #6]
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d834      	bhi.n	800f0e8 <SD_ioctl+0x98>
 800f07e:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <SD_ioctl+0x34>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f095 	.word	0x0800f095
 800f088:	0800f09d 	.word	0x0800f09d
 800f08c:	0800f0b5 	.word	0x0800f0b5
 800f090:	0800f0cf 	.word	0x0800f0cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f094:	2300      	movs	r3, #0
 800f096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f09a:	e028      	b.n	800f0ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f09c:	f107 030c 	add.w	r3, r7, #12
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff fe67 	bl	800ed74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0b2:	e01c      	b.n	800f0ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0b4:	f107 030c 	add.w	r3, r7, #12
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff fe5b 	bl	800ed74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0cc:	e00f      	b.n	800f0ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0ce:	f107 030c 	add.w	r3, r7, #12
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7ff fe4e 	bl	800ed74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0da:	0a5a      	lsrs	r2, r3, #9
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0e6:	e002      	b.n	800f0ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f0e8:	2304      	movs	r3, #4
 800f0ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f0ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3730      	adds	r7, #48	; 0x30
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20000009 	.word	0x20000009

0800f100 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f100:	b480      	push	{r7}
 800f102:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f104:	4b03      	ldr	r3, [pc, #12]	; (800f114 <BSP_SD_WriteCpltCallback+0x14>)
 800f106:	2201      	movs	r2, #1
 800f108:	601a      	str	r2, [r3, #0]
}
 800f10a:	bf00      	nop
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	200335f0 	.word	0x200335f0

0800f118 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f118:	b480      	push	{r7}
 800f11a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f11c:	4b03      	ldr	r3, [pc, #12]	; (800f12c <BSP_SD_ReadCpltCallback+0x14>)
 800f11e:	2201      	movs	r2, #1
 800f120:	601a      	str	r2, [r3, #0]
}
 800f122:	bf00      	nop
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	200335f4 	.word	0x200335f4

0800f130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f13a:	79fb      	ldrb	r3, [r7, #7]
 800f13c:	4a08      	ldr	r2, [pc, #32]	; (800f160 <disk_status+0x30>)
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	4413      	add	r3, r2
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	79fa      	ldrb	r2, [r7, #7]
 800f148:	4905      	ldr	r1, [pc, #20]	; (800f160 <disk_status+0x30>)
 800f14a:	440a      	add	r2, r1
 800f14c:	7a12      	ldrb	r2, [r2, #8]
 800f14e:	4610      	mov	r0, r2
 800f150:	4798      	blx	r3
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	20033620 	.word	0x20033620

0800f164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f172:	79fb      	ldrb	r3, [r7, #7]
 800f174:	4a0d      	ldr	r2, [pc, #52]	; (800f1ac <disk_initialize+0x48>)
 800f176:	5cd3      	ldrb	r3, [r2, r3]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d111      	bne.n	800f1a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f17c:	79fb      	ldrb	r3, [r7, #7]
 800f17e:	4a0b      	ldr	r2, [pc, #44]	; (800f1ac <disk_initialize+0x48>)
 800f180:	2101      	movs	r1, #1
 800f182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f184:	79fb      	ldrb	r3, [r7, #7]
 800f186:	4a09      	ldr	r2, [pc, #36]	; (800f1ac <disk_initialize+0x48>)
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	79fa      	ldrb	r2, [r7, #7]
 800f192:	4906      	ldr	r1, [pc, #24]	; (800f1ac <disk_initialize+0x48>)
 800f194:	440a      	add	r2, r1
 800f196:	7a12      	ldrb	r2, [r2, #8]
 800f198:	4610      	mov	r0, r2
 800f19a:	4798      	blx	r3
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20033620 	.word	0x20033620

0800f1b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f1b0:	b590      	push	{r4, r7, lr}
 800f1b2:	b087      	sub	sp, #28
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60b9      	str	r1, [r7, #8]
 800f1b8:	607a      	str	r2, [r7, #4]
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	4603      	mov	r3, r0
 800f1be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	4a0a      	ldr	r2, [pc, #40]	; (800f1ec <disk_read+0x3c>)
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	4413      	add	r3, r2
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	689c      	ldr	r4, [r3, #8]
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
 800f1ce:	4a07      	ldr	r2, [pc, #28]	; (800f1ec <disk_read+0x3c>)
 800f1d0:	4413      	add	r3, r2
 800f1d2:	7a18      	ldrb	r0, [r3, #8]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	47a0      	blx	r4
 800f1dc:	4603      	mov	r3, r0
 800f1de:	75fb      	strb	r3, [r7, #23]
  return res;
 800f1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	371c      	adds	r7, #28
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd90      	pop	{r4, r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20033620 	.word	0x20033620

0800f1f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f1f0:	b590      	push	{r4, r7, lr}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60b9      	str	r1, [r7, #8]
 800f1f8:	607a      	str	r2, [r7, #4]
 800f1fa:	603b      	str	r3, [r7, #0]
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f200:	7bfb      	ldrb	r3, [r7, #15]
 800f202:	4a0a      	ldr	r2, [pc, #40]	; (800f22c <disk_write+0x3c>)
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	68dc      	ldr	r4, [r3, #12]
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
 800f20e:	4a07      	ldr	r2, [pc, #28]	; (800f22c <disk_write+0x3c>)
 800f210:	4413      	add	r3, r2
 800f212:	7a18      	ldrb	r0, [r3, #8]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	47a0      	blx	r4
 800f21c:	4603      	mov	r3, r0
 800f21e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f220:	7dfb      	ldrb	r3, [r7, #23]
}
 800f222:	4618      	mov	r0, r3
 800f224:	371c      	adds	r7, #28
 800f226:	46bd      	mov	sp, r7
 800f228:	bd90      	pop	{r4, r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20033620 	.word	0x20033620

0800f230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	603a      	str	r2, [r7, #0]
 800f23a:	71fb      	strb	r3, [r7, #7]
 800f23c:	460b      	mov	r3, r1
 800f23e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f240:	79fb      	ldrb	r3, [r7, #7]
 800f242:	4a09      	ldr	r2, [pc, #36]	; (800f268 <disk_ioctl+0x38>)
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4413      	add	r3, r2
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	79fa      	ldrb	r2, [r7, #7]
 800f24e:	4906      	ldr	r1, [pc, #24]	; (800f268 <disk_ioctl+0x38>)
 800f250:	440a      	add	r2, r1
 800f252:	7a10      	ldrb	r0, [r2, #8]
 800f254:	79b9      	ldrb	r1, [r7, #6]
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	4798      	blx	r3
 800f25a:	4603      	mov	r3, r0
 800f25c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20033620 	.word	0x20033620

0800f26c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3301      	adds	r3, #1
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f27c:	89fb      	ldrh	r3, [r7, #14]
 800f27e:	021b      	lsls	r3, r3, #8
 800f280:	b21a      	sxth	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	b21b      	sxth	r3, r3
 800f288:	4313      	orrs	r3, r2
 800f28a:	b21b      	sxth	r3, r3
 800f28c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f28e:	89fb      	ldrh	r3, [r7, #14]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3714      	adds	r7, #20
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3303      	adds	r3, #3
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	021b      	lsls	r3, r3, #8
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	3202      	adds	r2, #2
 800f2b4:	7812      	ldrb	r2, [r2, #0]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	021b      	lsls	r3, r3, #8
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	7812      	ldrb	r2, [r2, #0]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	021b      	lsls	r3, r3, #8
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	7812      	ldrb	r2, [r2, #0]
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr

0800f2e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f2e2:	b480      	push	{r7}
 800f2e4:	b083      	sub	sp, #12
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	1c5a      	adds	r2, r3, #1
 800f2f2:	607a      	str	r2, [r7, #4]
 800f2f4:	887a      	ldrh	r2, [r7, #2]
 800f2f6:	b2d2      	uxtb	r2, r2
 800f2f8:	701a      	strb	r2, [r3, #0]
 800f2fa:	887b      	ldrh	r3, [r7, #2]
 800f2fc:	0a1b      	lsrs	r3, r3, #8
 800f2fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	607a      	str	r2, [r7, #4]
 800f306:	887a      	ldrh	r2, [r7, #2]
 800f308:	b2d2      	uxtb	r2, r2
 800f30a:	701a      	strb	r2, [r3, #0]
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	1c5a      	adds	r2, r3, #1
 800f326:	607a      	str	r2, [r7, #4]
 800f328:	683a      	ldr	r2, [r7, #0]
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	701a      	strb	r2, [r3, #0]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	0a1b      	lsrs	r3, r3, #8
 800f332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	607a      	str	r2, [r7, #4]
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	b2d2      	uxtb	r2, r2
 800f33e:	701a      	strb	r2, [r3, #0]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	0a1b      	lsrs	r3, r3, #8
 800f344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	683a      	ldr	r2, [r7, #0]
 800f34e:	b2d2      	uxtb	r2, r2
 800f350:	701a      	strb	r2, [r3, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	0a1b      	lsrs	r3, r3, #8
 800f356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	1c5a      	adds	r2, r3, #1
 800f35c:	607a      	str	r2, [r7, #4]
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	b2d2      	uxtb	r2, r2
 800f362:	701a      	strb	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f370:	b480      	push	{r7}
 800f372:	b087      	sub	sp, #28
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00d      	beq.n	800f3a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	1c53      	adds	r3, r2, #1
 800f38e:	613b      	str	r3, [r7, #16]
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	1c59      	adds	r1, r3, #1
 800f394:	6179      	str	r1, [r7, #20]
 800f396:	7812      	ldrb	r2, [r2, #0]
 800f398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	607b      	str	r3, [r7, #4]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1f1      	bne.n	800f38a <mem_cpy+0x1a>
	}
}
 800f3a6:	bf00      	nop
 800f3a8:	371c      	adds	r7, #28
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f3b2:	b480      	push	{r7}
 800f3b4:	b087      	sub	sp, #28
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	617a      	str	r2, [r7, #20]
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	b2d2      	uxtb	r2, r2
 800f3cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	607b      	str	r3, [r7, #4]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1f3      	bne.n	800f3c2 <mem_set+0x10>
}
 800f3da:	bf00      	nop
 800f3dc:	371c      	adds	r7, #28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f3e6:	b480      	push	{r7}
 800f3e8:	b089      	sub	sp, #36	; 0x24
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	60f8      	str	r0, [r7, #12]
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	61fb      	str	r3, [r7, #28]
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	61fa      	str	r2, [r7, #28]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	61ba      	str	r2, [r7, #24]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	1acb      	subs	r3, r1, r3
 800f412:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3b01      	subs	r3, #1
 800f418:	607b      	str	r3, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <mem_cmp+0x40>
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0eb      	beq.n	800f3fe <mem_cmp+0x18>

	return r;
 800f426:	697b      	ldr	r3, [r7, #20]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3724      	adds	r7, #36	; 0x24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f43e:	e002      	b.n	800f446 <chk_chr+0x12>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	3301      	adds	r3, #1
 800f444:	607b      	str	r3, [r7, #4]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d005      	beq.n	800f45a <chk_chr+0x26>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	4293      	cmp	r3, r2
 800f458:	d1f2      	bne.n	800f440 <chk_chr+0xc>
	return *str;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	781b      	ldrb	r3, [r3, #0]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f476:	2300      	movs	r3, #0
 800f478:	60bb      	str	r3, [r7, #8]
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	e029      	b.n	800f4d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f480:	4a27      	ldr	r2, [pc, #156]	; (800f520 <chk_lock+0xb4>)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	011b      	lsls	r3, r3, #4
 800f486:	4413      	add	r3, r2
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d01d      	beq.n	800f4ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f48e:	4a24      	ldr	r2, [pc, #144]	; (800f520 <chk_lock+0xb4>)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	4413      	add	r3, r2
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d116      	bne.n	800f4ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f4a0:	4a1f      	ldr	r2, [pc, #124]	; (800f520 <chk_lock+0xb4>)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	011b      	lsls	r3, r3, #4
 800f4a6:	4413      	add	r3, r2
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d10c      	bne.n	800f4ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f4b4:	4a1a      	ldr	r2, [pc, #104]	; (800f520 <chk_lock+0xb4>)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	011b      	lsls	r3, r3, #4
 800f4ba:	4413      	add	r3, r2
 800f4bc:	3308      	adds	r3, #8
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d102      	bne.n	800f4ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f4c8:	e007      	b.n	800f4da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d9d2      	bls.n	800f480 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d109      	bne.n	800f4f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <chk_lock+0x80>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	d101      	bne.n	800f4f0 <chk_lock+0x84>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	e010      	b.n	800f512 <chk_lock+0xa6>
 800f4f0:	2312      	movs	r3, #18
 800f4f2:	e00e      	b.n	800f512 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d108      	bne.n	800f50c <chk_lock+0xa0>
 800f4fa:	4a09      	ldr	r2, [pc, #36]	; (800f520 <chk_lock+0xb4>)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	011b      	lsls	r3, r3, #4
 800f500:	4413      	add	r3, r2
 800f502:	330c      	adds	r3, #12
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f50a:	d101      	bne.n	800f510 <chk_lock+0xa4>
 800f50c:	2310      	movs	r3, #16
 800f50e:	e000      	b.n	800f512 <chk_lock+0xa6>
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	20033600 	.word	0x20033600

0800f524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f52a:	2300      	movs	r3, #0
 800f52c:	607b      	str	r3, [r7, #4]
 800f52e:	e002      	b.n	800f536 <enq_lock+0x12>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3301      	adds	r3, #1
 800f534:	607b      	str	r3, [r7, #4]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d806      	bhi.n	800f54a <enq_lock+0x26>
 800f53c:	4a09      	ldr	r2, [pc, #36]	; (800f564 <enq_lock+0x40>)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	011b      	lsls	r3, r3, #4
 800f542:	4413      	add	r3, r2
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1f2      	bne.n	800f530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	bf14      	ite	ne
 800f550:	2301      	movne	r3, #1
 800f552:	2300      	moveq	r3, #0
 800f554:	b2db      	uxtb	r3, r3
}
 800f556:	4618      	mov	r0, r3
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	20033600 	.word	0x20033600

0800f568 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	e01f      	b.n	800f5b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f578:	4a41      	ldr	r2, [pc, #260]	; (800f680 <inc_lock+0x118>)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	011b      	lsls	r3, r3, #4
 800f57e:	4413      	add	r3, r2
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	d113      	bne.n	800f5b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f58a:	4a3d      	ldr	r2, [pc, #244]	; (800f680 <inc_lock+0x118>)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	4413      	add	r3, r2
 800f592:	3304      	adds	r3, #4
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d109      	bne.n	800f5b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f59e:	4a38      	ldr	r2, [pc, #224]	; (800f680 <inc_lock+0x118>)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	011b      	lsls	r3, r3, #4
 800f5a4:	4413      	add	r3, r2
 800f5a6:	3308      	adds	r3, #8
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d006      	beq.n	800f5c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d9dc      	bls.n	800f578 <inc_lock+0x10>
 800f5be:	e000      	b.n	800f5c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f5c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d132      	bne.n	800f62e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60fb      	str	r3, [r7, #12]
 800f5cc:	e002      	b.n	800f5d4 <inc_lock+0x6c>
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	60fb      	str	r3, [r7, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d806      	bhi.n	800f5e8 <inc_lock+0x80>
 800f5da:	4a29      	ldr	r2, [pc, #164]	; (800f680 <inc_lock+0x118>)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	011b      	lsls	r3, r3, #4
 800f5e0:	4413      	add	r3, r2
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1f2      	bne.n	800f5ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d101      	bne.n	800f5f2 <inc_lock+0x8a>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e040      	b.n	800f674 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	4922      	ldr	r1, [pc, #136]	; (800f680 <inc_lock+0x118>)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	011b      	lsls	r3, r3, #4
 800f5fc:	440b      	add	r3, r1
 800f5fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	689a      	ldr	r2, [r3, #8]
 800f604:	491e      	ldr	r1, [pc, #120]	; (800f680 <inc_lock+0x118>)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	011b      	lsls	r3, r3, #4
 800f60a:	440b      	add	r3, r1
 800f60c:	3304      	adds	r3, #4
 800f60e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	695a      	ldr	r2, [r3, #20]
 800f614:	491a      	ldr	r1, [pc, #104]	; (800f680 <inc_lock+0x118>)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	440b      	add	r3, r1
 800f61c:	3308      	adds	r3, #8
 800f61e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f620:	4a17      	ldr	r2, [pc, #92]	; (800f680 <inc_lock+0x118>)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	011b      	lsls	r3, r3, #4
 800f626:	4413      	add	r3, r2
 800f628:	330c      	adds	r3, #12
 800f62a:	2200      	movs	r2, #0
 800f62c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d009      	beq.n	800f648 <inc_lock+0xe0>
 800f634:	4a12      	ldr	r2, [pc, #72]	; (800f680 <inc_lock+0x118>)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	011b      	lsls	r3, r3, #4
 800f63a:	4413      	add	r3, r2
 800f63c:	330c      	adds	r3, #12
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <inc_lock+0xe0>
 800f644:	2300      	movs	r3, #0
 800f646:	e015      	b.n	800f674 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d108      	bne.n	800f660 <inc_lock+0xf8>
 800f64e:	4a0c      	ldr	r2, [pc, #48]	; (800f680 <inc_lock+0x118>)
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	011b      	lsls	r3, r3, #4
 800f654:	4413      	add	r3, r2
 800f656:	330c      	adds	r3, #12
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	3301      	adds	r3, #1
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	e001      	b.n	800f664 <inc_lock+0xfc>
 800f660:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f664:	4906      	ldr	r1, [pc, #24]	; (800f680 <inc_lock+0x118>)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	011b      	lsls	r3, r3, #4
 800f66a:	440b      	add	r3, r1
 800f66c:	330c      	adds	r3, #12
 800f66e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	3301      	adds	r3, #1
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	20033600 	.word	0x20033600

0800f684 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3b01      	subs	r3, #1
 800f690:	607b      	str	r3, [r7, #4]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d825      	bhi.n	800f6e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800f698:	4a17      	ldr	r2, [pc, #92]	; (800f6f8 <dec_lock+0x74>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	4413      	add	r3, r2
 800f6a0:	330c      	adds	r3, #12
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f6a6:	89fb      	ldrh	r3, [r7, #14]
 800f6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ac:	d101      	bne.n	800f6b2 <dec_lock+0x2e>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f6b2:	89fb      	ldrh	r3, [r7, #14]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d002      	beq.n	800f6be <dec_lock+0x3a>
 800f6b8:	89fb      	ldrh	r3, [r7, #14]
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f6be:	4a0e      	ldr	r2, [pc, #56]	; (800f6f8 <dec_lock+0x74>)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	4413      	add	r3, r2
 800f6c6:	330c      	adds	r3, #12
 800f6c8:	89fa      	ldrh	r2, [r7, #14]
 800f6ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f6cc:	89fb      	ldrh	r3, [r7, #14]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d105      	bne.n	800f6de <dec_lock+0x5a>
 800f6d2:	4a09      	ldr	r2, [pc, #36]	; (800f6f8 <dec_lock+0x74>)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	011b      	lsls	r3, r3, #4
 800f6d8:	4413      	add	r3, r2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	737b      	strb	r3, [r7, #13]
 800f6e2:	e001      	b.n	800f6e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f6e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	20033600 	.word	0x20033600

0800f6fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f704:	2300      	movs	r3, #0
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	e010      	b.n	800f72c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f70a:	4a0d      	ldr	r2, [pc, #52]	; (800f740 <clear_lock+0x44>)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	011b      	lsls	r3, r3, #4
 800f710:	4413      	add	r3, r2
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	429a      	cmp	r2, r3
 800f718:	d105      	bne.n	800f726 <clear_lock+0x2a>
 800f71a:	4a09      	ldr	r2, [pc, #36]	; (800f740 <clear_lock+0x44>)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	011b      	lsls	r3, r3, #4
 800f720:	4413      	add	r3, r2
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3301      	adds	r3, #1
 800f72a:	60fb      	str	r3, [r7, #12]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d9eb      	bls.n	800f70a <clear_lock+0xe>
	}
}
 800f732:	bf00      	nop
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	20033600 	.word	0x20033600

0800f744 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f74c:	2300      	movs	r3, #0
 800f74e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	78db      	ldrb	r3, [r3, #3]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d034      	beq.n	800f7c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f75c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	7858      	ldrb	r0, [r3, #1]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f768:	2301      	movs	r3, #1
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	f7ff fd40 	bl	800f1f0 <disk_write>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f776:	2301      	movs	r3, #1
 800f778:	73fb      	strb	r3, [r7, #15]
 800f77a:	e022      	b.n	800f7c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	1ad2      	subs	r2, r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a1b      	ldr	r3, [r3, #32]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d217      	bcs.n	800f7c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	789b      	ldrb	r3, [r3, #2]
 800f796:	613b      	str	r3, [r7, #16]
 800f798:	e010      	b.n	800f7bc <sync_window+0x78>
					wsect += fs->fsize;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	7858      	ldrb	r0, [r3, #1]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	f7ff fd1d 	bl	800f1f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	613b      	str	r3, [r7, #16]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d8eb      	bhi.n	800f79a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3718      	adds	r7, #24
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7de:	683a      	ldr	r2, [r7, #0]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d01b      	beq.n	800f81c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ffad 	bl	800f744 <sync_window>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f7ee:	7bfb      	ldrb	r3, [r7, #15]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d113      	bne.n	800f81c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	7858      	ldrb	r0, [r3, #1]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7fe:	2301      	movs	r3, #1
 800f800:	683a      	ldr	r2, [r7, #0]
 800f802:	f7ff fcd5 	bl	800f1b0 <disk_read>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d004      	beq.n	800f816 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f812:	2301      	movs	r3, #1
 800f814:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
	...

0800f828 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7ff ff87 	bl	800f744 <sync_window>
 800f836:	4603      	mov	r3, r0
 800f838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d159      	bne.n	800f8f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2b03      	cmp	r3, #3
 800f846:	d149      	bne.n	800f8dc <sync_fs+0xb4>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	791b      	ldrb	r3, [r3, #4]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d145      	bne.n	800f8dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	899b      	ldrh	r3, [r3, #12]
 800f85a:	461a      	mov	r2, r3
 800f85c:	2100      	movs	r1, #0
 800f85e:	f7ff fda8 	bl	800f3b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3338      	adds	r3, #56	; 0x38
 800f866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f86a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fd37 	bl	800f2e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	3338      	adds	r3, #56	; 0x38
 800f878:	4921      	ldr	r1, [pc, #132]	; (800f900 <sync_fs+0xd8>)
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff fd4c 	bl	800f318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3338      	adds	r3, #56	; 0x38
 800f884:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f888:	491e      	ldr	r1, [pc, #120]	; (800f904 <sync_fs+0xdc>)
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff fd44 	bl	800f318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3338      	adds	r3, #56	; 0x38
 800f894:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	695b      	ldr	r3, [r3, #20]
 800f89c:	4619      	mov	r1, r3
 800f89e:	4610      	mov	r0, r2
 800f8a0:	f7ff fd3a 	bl	800f318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3338      	adds	r3, #56	; 0x38
 800f8a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	f7ff fd30 	bl	800f318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	7858      	ldrb	r0, [r3, #1]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	f7ff fc8d 	bl	800f1f0 <disk_write>
			fs->fsi_flag = 0;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	785b      	ldrb	r3, [r3, #1]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff fca3 	bl	800f230 <disk_ioctl>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <sync_fs+0xcc>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	41615252 	.word	0x41615252
 800f904:	61417272 	.word	0x61417272

0800f908 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	3b02      	subs	r3, #2
 800f916:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	69db      	ldr	r3, [r3, #28]
 800f91c:	3b02      	subs	r3, #2
 800f91e:	683a      	ldr	r2, [r7, #0]
 800f920:	429a      	cmp	r2, r3
 800f922:	d301      	bcc.n	800f928 <clust2sect+0x20>
 800f924:	2300      	movs	r3, #0
 800f926:	e008      	b.n	800f93a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	895b      	ldrh	r3, [r3, #10]
 800f92c:	461a      	mov	r2, r3
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	fb03 f202 	mul.w	r2, r3, r2
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f938:	4413      	add	r3, r2
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	370c      	adds	r7, #12
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b086      	sub	sp, #24
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d904      	bls.n	800f966 <get_fat+0x20>
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d302      	bcc.n	800f96c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f966:	2301      	movs	r3, #1
 800f968:	617b      	str	r3, [r7, #20]
 800f96a:	e0b7      	b.n	800fadc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f96c:	f04f 33ff 	mov.w	r3, #4294967295
 800f970:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b02      	cmp	r3, #2
 800f978:	d05a      	beq.n	800fa30 <get_fat+0xea>
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d07d      	beq.n	800fa7a <get_fat+0x134>
 800f97e:	2b01      	cmp	r3, #1
 800f980:	f040 80a2 	bne.w	800fac8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	60fb      	str	r3, [r7, #12]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	085b      	lsrs	r3, r3, #1
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	899b      	ldrh	r3, [r3, #12]
 800f99a:	4619      	mov	r1, r3
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9a2:	4413      	add	r3, r2
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	6938      	ldr	r0, [r7, #16]
 800f9a8:	f7ff ff10 	bl	800f7cc <move_window>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f040 808d 	bne.w	800face <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	60fa      	str	r2, [r7, #12]
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	8992      	ldrh	r2, [r2, #12]
 800f9be:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9c2:	fb02 f201 	mul.w	r2, r2, r1
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	899b      	ldrh	r3, [r3, #12]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9e2:	4413      	add	r3, r2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6938      	ldr	r0, [r7, #16]
 800f9e8:	f7ff fef0 	bl	800f7cc <move_window>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d16f      	bne.n	800fad2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	899b      	ldrh	r3, [r3, #12]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9fe:	fb02 f201 	mul.w	r2, r2, r1
 800fa02:	1a9b      	subs	r3, r3, r2
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	4413      	add	r3, r2
 800fa08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa0c:	021b      	lsls	r3, r3, #8
 800fa0e:	461a      	mov	r2, r3
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	f003 0301 	and.w	r3, r3, #1
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <get_fat+0xe0>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	091b      	lsrs	r3, r3, #4
 800fa24:	e002      	b.n	800fa2c <get_fat+0xe6>
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa2c:	617b      	str	r3, [r7, #20]
			break;
 800fa2e:	e055      	b.n	800fadc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	899b      	ldrh	r3, [r3, #12]
 800fa38:	085b      	lsrs	r3, r3, #1
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa44:	4413      	add	r3, r2
 800fa46:	4619      	mov	r1, r3
 800fa48:	6938      	ldr	r0, [r7, #16]
 800fa4a:	f7ff febf 	bl	800f7cc <move_window>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d140      	bne.n	800fad6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	8992      	ldrh	r2, [r2, #12]
 800fa62:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa66:	fb02 f200 	mul.w	r2, r2, r0
 800fa6a:	1a9b      	subs	r3, r3, r2
 800fa6c:	440b      	add	r3, r1
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff fbfc 	bl	800f26c <ld_word>
 800fa74:	4603      	mov	r3, r0
 800fa76:	617b      	str	r3, [r7, #20]
			break;
 800fa78:	e030      	b.n	800fadc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	899b      	ldrh	r3, [r3, #12]
 800fa82:	089b      	lsrs	r3, r3, #2
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	4619      	mov	r1, r3
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa8e:	4413      	add	r3, r2
 800fa90:	4619      	mov	r1, r3
 800fa92:	6938      	ldr	r0, [r7, #16]
 800fa94:	f7ff fe9a 	bl	800f7cc <move_window>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d11d      	bne.n	800fada <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	8992      	ldrh	r2, [r2, #12]
 800faac:	fbb3 f0f2 	udiv	r0, r3, r2
 800fab0:	fb02 f200 	mul.w	r2, r2, r0
 800fab4:	1a9b      	subs	r3, r3, r2
 800fab6:	440b      	add	r3, r1
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff fbef 	bl	800f29c <ld_dword>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fac4:	617b      	str	r3, [r7, #20]
			break;
 800fac6:	e009      	b.n	800fadc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fac8:	2301      	movs	r3, #1
 800faca:	617b      	str	r3, [r7, #20]
 800facc:	e006      	b.n	800fadc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800face:	bf00      	nop
 800fad0:	e004      	b.n	800fadc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fad2:	bf00      	nop
 800fad4:	e002      	b.n	800fadc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fad6:	bf00      	nop
 800fad8:	e000      	b.n	800fadc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fada:	bf00      	nop
		}
	}

	return val;
 800fadc:	697b      	ldr	r3, [r7, #20]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3718      	adds	r7, #24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fae6:	b590      	push	{r4, r7, lr}
 800fae8:	b089      	sub	sp, #36	; 0x24
 800faea:	af00      	add	r7, sp, #0
 800faec:	60f8      	str	r0, [r7, #12]
 800faee:	60b9      	str	r1, [r7, #8]
 800faf0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800faf2:	2302      	movs	r3, #2
 800faf4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	f240 8106 	bls.w	800fd0a <put_fat+0x224>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	f080 8100 	bcs.w	800fd0a <put_fat+0x224>
		switch (fs->fs_type) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	f000 8088 	beq.w	800fc24 <put_fat+0x13e>
 800fb14:	2b03      	cmp	r3, #3
 800fb16:	f000 80b0 	beq.w	800fc7a <put_fat+0x194>
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	f040 80f5 	bne.w	800fd0a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	61bb      	str	r3, [r7, #24]
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	085b      	lsrs	r3, r3, #1
 800fb28:	69ba      	ldr	r2, [r7, #24]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	899b      	ldrh	r3, [r3, #12]
 800fb36:	4619      	mov	r1, r3
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb3e:	4413      	add	r3, r2
 800fb40:	4619      	mov	r1, r3
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f7ff fe42 	bl	800f7cc <move_window>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb4c:	7ffb      	ldrb	r3, [r7, #31]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f040 80d4 	bne.w	800fcfc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	61ba      	str	r2, [r7, #24]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	8992      	ldrh	r2, [r2, #12]
 800fb64:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb68:	fb02 f200 	mul.w	r2, r2, r0
 800fb6c:	1a9b      	subs	r3, r3, r2
 800fb6e:	440b      	add	r3, r1
 800fb70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00d      	beq.n	800fb98 <put_fat+0xb2>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	b25b      	sxtb	r3, r3
 800fb82:	f003 030f 	and.w	r3, r3, #15
 800fb86:	b25a      	sxtb	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	011b      	lsls	r3, r3, #4
 800fb8e:	b25b      	sxtb	r3, r3
 800fb90:	4313      	orrs	r3, r2
 800fb92:	b25b      	sxtb	r3, r3
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	e001      	b.n	800fb9c <put_fat+0xb6>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	697a      	ldr	r2, [r7, #20]
 800fb9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2201      	movs	r2, #1
 800fba4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	4619      	mov	r1, r3
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbb6:	4413      	add	r3, r2
 800fbb8:	4619      	mov	r1, r3
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7ff fe06 	bl	800f7cc <move_window>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fbc4:	7ffb      	ldrb	r3, [r7, #31]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f040 809a 	bne.w	800fd00 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	899b      	ldrh	r3, [r3, #12]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbde:	fb02 f200 	mul.w	r2, r2, r0
 800fbe2:	1a9b      	subs	r3, r3, r2
 800fbe4:	440b      	add	r3, r1
 800fbe6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <put_fat+0x114>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	091b      	lsrs	r3, r3, #4
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	e00e      	b.n	800fc18 <put_fat+0x132>
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	b25b      	sxtb	r3, r3
 800fc00:	f023 030f 	bic.w	r3, r3, #15
 800fc04:	b25a      	sxtb	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	0a1b      	lsrs	r3, r3, #8
 800fc0a:	b25b      	sxtb	r3, r3
 800fc0c:	f003 030f 	and.w	r3, r3, #15
 800fc10:	b25b      	sxtb	r3, r3
 800fc12:	4313      	orrs	r3, r2
 800fc14:	b25b      	sxtb	r3, r3
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	70da      	strb	r2, [r3, #3]
			break;
 800fc22:	e072      	b.n	800fd0a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	899b      	ldrh	r3, [r3, #12]
 800fc2c:	085b      	lsrs	r3, r3, #1
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	4619      	mov	r1, r3
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc38:	4413      	add	r3, r2
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f7ff fdc5 	bl	800f7cc <move_window>
 800fc42:	4603      	mov	r3, r0
 800fc44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc46:	7ffb      	ldrb	r3, [r7, #31]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d15b      	bne.n	800fd04 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	005b      	lsls	r3, r3, #1
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	8992      	ldrh	r2, [r2, #12]
 800fc5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc5e:	fb02 f200 	mul.w	r2, r2, r0
 800fc62:	1a9b      	subs	r3, r3, r2
 800fc64:	440b      	add	r3, r1
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	b292      	uxth	r2, r2
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fb38 	bl	800f2e2 <st_word>
			fs->wflag = 1;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	70da      	strb	r2, [r3, #3]
			break;
 800fc78:	e047      	b.n	800fd0a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	899b      	ldrh	r3, [r3, #12]
 800fc82:	089b      	lsrs	r3, r3, #2
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	4619      	mov	r1, r3
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc8e:	4413      	add	r3, r2
 800fc90:	4619      	mov	r1, r3
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7ff fd9a 	bl	800f7cc <move_window>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc9c:	7ffb      	ldrb	r3, [r7, #31]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d132      	bne.n	800fd08 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	8992      	ldrh	r2, [r2, #12]
 800fcb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcba:	fb02 f200 	mul.w	r2, r2, r0
 800fcbe:	1a9b      	subs	r3, r3, r2
 800fcc0:	440b      	add	r3, r1
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff faea 	bl	800f29c <ld_dword>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fcce:	4323      	orrs	r3, r4
 800fcd0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	8992      	ldrh	r2, [r2, #12]
 800fce0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fce4:	fb02 f200 	mul.w	r2, r2, r0
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	440b      	add	r3, r1
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff fb12 	bl	800f318 <st_dword>
			fs->wflag = 1;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	70da      	strb	r2, [r3, #3]
			break;
 800fcfa:	e006      	b.n	800fd0a <put_fat+0x224>
			if (res != FR_OK) break;
 800fcfc:	bf00      	nop
 800fcfe:	e004      	b.n	800fd0a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd00:	bf00      	nop
 800fd02:	e002      	b.n	800fd0a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd04:	bf00      	nop
 800fd06:	e000      	b.n	800fd0a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd08:	bf00      	nop
		}
	}
	return res;
 800fd0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3724      	adds	r7, #36	; 0x24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd90      	pop	{r4, r7, pc}

0800fd14 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b088      	sub	sp, #32
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d904      	bls.n	800fd3a <remove_chain+0x26>
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	69db      	ldr	r3, [r3, #28]
 800fd34:	68ba      	ldr	r2, [r7, #8]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d301      	bcc.n	800fd3e <remove_chain+0x2a>
 800fd3a:	2302      	movs	r3, #2
 800fd3c:	e04b      	b.n	800fdd6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00c      	beq.n	800fd5e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fd44:	f04f 32ff 	mov.w	r2, #4294967295
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	69b8      	ldr	r0, [r7, #24]
 800fd4c:	f7ff fecb 	bl	800fae6 <put_fat>
 800fd50:	4603      	mov	r3, r0
 800fd52:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fd54:	7ffb      	ldrb	r3, [r7, #31]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <remove_chain+0x4a>
 800fd5a:	7ffb      	ldrb	r3, [r7, #31]
 800fd5c:	e03b      	b.n	800fdd6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fd5e:	68b9      	ldr	r1, [r7, #8]
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7ff fdf0 	bl	800f946 <get_fat>
 800fd66:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d031      	beq.n	800fdd2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d101      	bne.n	800fd78 <remove_chain+0x64>
 800fd74:	2302      	movs	r3, #2
 800fd76:	e02e      	b.n	800fdd6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7e:	d101      	bne.n	800fd84 <remove_chain+0x70>
 800fd80:	2301      	movs	r3, #1
 800fd82:	e028      	b.n	800fdd6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fd84:	2200      	movs	r2, #0
 800fd86:	68b9      	ldr	r1, [r7, #8]
 800fd88:	69b8      	ldr	r0, [r7, #24]
 800fd8a:	f7ff feac 	bl	800fae6 <put_fat>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fd92:	7ffb      	ldrb	r3, [r7, #31]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <remove_chain+0x88>
 800fd98:	7ffb      	ldrb	r3, [r7, #31]
 800fd9a:	e01c      	b.n	800fdd6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	695a      	ldr	r2, [r3, #20]
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	69db      	ldr	r3, [r3, #28]
 800fda4:	3b02      	subs	r3, #2
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d20b      	bcs.n	800fdc2 <remove_chain+0xae>
			fs->free_clst++;
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	791b      	ldrb	r3, [r3, #4]
 800fdb8:	f043 0301 	orr.w	r3, r3, #1
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	69db      	ldr	r3, [r3, #28]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d3c6      	bcc.n	800fd5e <remove_chain+0x4a>
 800fdd0:	e000      	b.n	800fdd4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fdd2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3720      	adds	r7, #32
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b088      	sub	sp, #32
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d10d      	bne.n	800fe10 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	691b      	ldr	r3, [r3, #16]
 800fdf8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <create_chain+0x2c>
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	69db      	ldr	r3, [r3, #28]
 800fe04:	69ba      	ldr	r2, [r7, #24]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d31b      	bcc.n	800fe42 <create_chain+0x64>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	61bb      	str	r3, [r7, #24]
 800fe0e:	e018      	b.n	800fe42 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fe10:	6839      	ldr	r1, [r7, #0]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7ff fd97 	bl	800f946 <get_fat>
 800fe18:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d801      	bhi.n	800fe24 <create_chain+0x46>
 800fe20:	2301      	movs	r3, #1
 800fe22:	e070      	b.n	800ff06 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2a:	d101      	bne.n	800fe30 <create_chain+0x52>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	e06a      	b.n	800ff06 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d201      	bcs.n	800fe3e <create_chain+0x60>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	e063      	b.n	800ff06 <create_chain+0x128>
		scl = clst;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	69db      	ldr	r3, [r3, #28]
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d307      	bcc.n	800fe66 <create_chain+0x88>
				ncl = 2;
 800fe56:	2302      	movs	r3, #2
 800fe58:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fe5a:	69fa      	ldr	r2, [r7, #28]
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d901      	bls.n	800fe66 <create_chain+0x88>
 800fe62:	2300      	movs	r3, #0
 800fe64:	e04f      	b.n	800ff06 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fe66:	69f9      	ldr	r1, [r7, #28]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fd6c 	bl	800f946 <get_fat>
 800fe6e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00e      	beq.n	800fe94 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d003      	beq.n	800fe84 <create_chain+0xa6>
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe82:	d101      	bne.n	800fe88 <create_chain+0xaa>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	e03e      	b.n	800ff06 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fe88:	69fa      	ldr	r2, [r7, #28]
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d1da      	bne.n	800fe46 <create_chain+0x68>
 800fe90:	2300      	movs	r3, #0
 800fe92:	e038      	b.n	800ff06 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fe94:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fe96:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9a:	69f9      	ldr	r1, [r7, #28]
 800fe9c:	6938      	ldr	r0, [r7, #16]
 800fe9e:	f7ff fe22 	bl	800fae6 <put_fat>
 800fea2:	4603      	mov	r3, r0
 800fea4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d109      	bne.n	800fec0 <create_chain+0xe2>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d006      	beq.n	800fec0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800feb2:	69fa      	ldr	r2, [r7, #28]
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6938      	ldr	r0, [r7, #16]
 800feb8:	f7ff fe15 	bl	800fae6 <put_fat>
 800febc:	4603      	mov	r3, r0
 800febe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d116      	bne.n	800fef4 <create_chain+0x116>
		fs->last_clst = ncl;
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	69fa      	ldr	r2, [r7, #28]
 800feca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	695a      	ldr	r2, [r3, #20]
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	69db      	ldr	r3, [r3, #28]
 800fed4:	3b02      	subs	r3, #2
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d804      	bhi.n	800fee4 <create_chain+0x106>
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	695b      	ldr	r3, [r3, #20]
 800fede:	1e5a      	subs	r2, r3, #1
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	791b      	ldrb	r3, [r3, #4]
 800fee8:	f043 0301 	orr.w	r3, r3, #1
 800feec:	b2da      	uxtb	r2, r3
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	711a      	strb	r2, [r3, #4]
 800fef2:	e007      	b.n	800ff04 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fef4:	7dfb      	ldrb	r3, [r7, #23]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d102      	bne.n	800ff00 <create_chain+0x122>
 800fefa:	f04f 33ff 	mov.w	r3, #4294967295
 800fefe:	e000      	b.n	800ff02 <create_chain+0x124>
 800ff00:	2301      	movs	r3, #1
 800ff02:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff04:	69fb      	ldr	r3, [r7, #28]
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3720      	adds	r7, #32
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b087      	sub	sp, #28
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff22:	3304      	adds	r3, #4
 800ff24:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	899b      	ldrh	r3, [r3, #12]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	8952      	ldrh	r2, [r2, #10]
 800ff36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	1d1a      	adds	r2, r3, #4
 800ff40:	613a      	str	r2, [r7, #16]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d101      	bne.n	800ff50 <clmt_clust+0x42>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e010      	b.n	800ff72 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ff50:	697a      	ldr	r2, [r7, #20]
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d307      	bcc.n	800ff68 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ff58:	697a      	ldr	r2, [r7, #20]
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	617b      	str	r3, [r7, #20]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	3304      	adds	r3, #4
 800ff64:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff66:	e7e9      	b.n	800ff3c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ff68:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	4413      	add	r3, r2
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	371c      	adds	r7, #28
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b086      	sub	sp, #24
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff94:	d204      	bcs.n	800ffa0 <dir_sdi+0x22>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	f003 031f 	and.w	r3, r3, #31
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	e071      	b.n	8010088 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <dir_sdi+0x46>
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d902      	bls.n	800ffc4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d10c      	bne.n	800ffe4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	095b      	lsrs	r3, r3, #5
 800ffce:	693a      	ldr	r2, [r7, #16]
 800ffd0:	8912      	ldrh	r2, [r2, #8]
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d301      	bcc.n	800ffda <dir_sdi+0x5c>
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	e056      	b.n	8010088 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	61da      	str	r2, [r3, #28]
 800ffe2:	e02d      	b.n	8010040 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	895b      	ldrh	r3, [r3, #10]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	fb03 f302 	mul.w	r3, r3, r2
 800fff2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fff4:	e019      	b.n	801002a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6979      	ldr	r1, [r7, #20]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff fca3 	bl	800f946 <get_fat>
 8010000:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010008:	d101      	bne.n	801000e <dir_sdi+0x90>
 801000a:	2301      	movs	r3, #1
 801000c:	e03c      	b.n	8010088 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d904      	bls.n	801001e <dir_sdi+0xa0>
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	69db      	ldr	r3, [r3, #28]
 8010018:	697a      	ldr	r2, [r7, #20]
 801001a:	429a      	cmp	r2, r3
 801001c:	d301      	bcc.n	8010022 <dir_sdi+0xa4>
 801001e:	2302      	movs	r3, #2
 8010020:	e032      	b.n	8010088 <dir_sdi+0x10a>
			ofs -= csz;
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801002a:	683a      	ldr	r2, [r7, #0]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	429a      	cmp	r2, r3
 8010030:	d2e1      	bcs.n	800fff6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010032:	6979      	ldr	r1, [r7, #20]
 8010034:	6938      	ldr	r0, [r7, #16]
 8010036:	f7ff fc67 	bl	800f908 <clust2sect>
 801003a:	4602      	mov	r2, r0
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <dir_sdi+0xd4>
 801004e:	2302      	movs	r3, #2
 8010050:	e01a      	b.n	8010088 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	69da      	ldr	r2, [r3, #28]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	4619      	mov	r1, r3
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010062:	441a      	add	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	899b      	ldrh	r3, [r3, #12]
 8010072:	461a      	mov	r2, r3
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	fbb3 f0f2 	udiv	r0, r3, r2
 801007a:	fb02 f200 	mul.w	r2, r2, r0
 801007e:	1a9b      	subs	r3, r3, r2
 8010080:	18ca      	adds	r2, r1, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010086:	2300      	movs	r3, #0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	695b      	ldr	r3, [r3, #20]
 80100a4:	3320      	adds	r3, #32
 80100a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	69db      	ldr	r3, [r3, #28]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d003      	beq.n	80100b8 <dir_next+0x28>
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100b6:	d301      	bcc.n	80100bc <dir_next+0x2c>
 80100b8:	2304      	movs	r3, #4
 80100ba:	e0bb      	b.n	8010234 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	899b      	ldrh	r3, [r3, #12]
 80100c0:	461a      	mov	r2, r3
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80100c8:	fb02 f201 	mul.w	r2, r2, r1
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f040 809d 	bne.w	801020e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10b      	bne.n	80100fe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	095b      	lsrs	r3, r3, #5
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	8912      	ldrh	r2, [r2, #8]
 80100ee:	4293      	cmp	r3, r2
 80100f0:	f0c0 808d 	bcc.w	801020e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	61da      	str	r2, [r3, #28]
 80100fa:	2304      	movs	r3, #4
 80100fc:	e09a      	b.n	8010234 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	461a      	mov	r2, r3
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	fbb3 f3f2 	udiv	r3, r3, r2
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	8952      	ldrh	r2, [r2, #10]
 801010e:	3a01      	subs	r2, #1
 8010110:	4013      	ands	r3, r2
 8010112:	2b00      	cmp	r3, #0
 8010114:	d17b      	bne.n	801020e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	699b      	ldr	r3, [r3, #24]
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f7ff fc11 	bl	800f946 <get_fat>
 8010124:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d801      	bhi.n	8010130 <dir_next+0xa0>
 801012c:	2302      	movs	r3, #2
 801012e:	e081      	b.n	8010234 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010136:	d101      	bne.n	801013c <dir_next+0xac>
 8010138:	2301      	movs	r3, #1
 801013a:	e07b      	b.n	8010234 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	69db      	ldr	r3, [r3, #28]
 8010140:	697a      	ldr	r2, [r7, #20]
 8010142:	429a      	cmp	r2, r3
 8010144:	d359      	bcc.n	80101fa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d104      	bne.n	8010156 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	61da      	str	r2, [r3, #28]
 8010152:	2304      	movs	r3, #4
 8010154:	e06e      	b.n	8010234 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	699b      	ldr	r3, [r3, #24]
 801015c:	4619      	mov	r1, r3
 801015e:	4610      	mov	r0, r2
 8010160:	f7ff fe3d 	bl	800fdde <create_chain>
 8010164:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d101      	bne.n	8010170 <dir_next+0xe0>
 801016c:	2307      	movs	r3, #7
 801016e:	e061      	b.n	8010234 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d101      	bne.n	801017a <dir_next+0xea>
 8010176:	2302      	movs	r3, #2
 8010178:	e05c      	b.n	8010234 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010180:	d101      	bne.n	8010186 <dir_next+0xf6>
 8010182:	2301      	movs	r3, #1
 8010184:	e056      	b.n	8010234 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff fadc 	bl	800f744 <sync_window>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <dir_next+0x106>
 8010192:	2301      	movs	r3, #1
 8010194:	e04e      	b.n	8010234 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	899b      	ldrh	r3, [r3, #12]
 80101a0:	461a      	mov	r2, r3
 80101a2:	2100      	movs	r1, #0
 80101a4:	f7ff f905 	bl	800f3b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101a8:	2300      	movs	r3, #0
 80101aa:	613b      	str	r3, [r7, #16]
 80101ac:	6979      	ldr	r1, [r7, #20]
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f7ff fbaa 	bl	800f908 <clust2sect>
 80101b4:	4602      	mov	r2, r0
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	635a      	str	r2, [r3, #52]	; 0x34
 80101ba:	e012      	b.n	80101e2 <dir_next+0x152>
						fs->wflag = 1;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2201      	movs	r2, #1
 80101c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f7ff fabe 	bl	800f744 <sync_window>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <dir_next+0x142>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e030      	b.n	8010234 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	3301      	adds	r3, #1
 80101d6:	613b      	str	r3, [r7, #16]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	635a      	str	r2, [r3, #52]	; 0x34
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	895b      	ldrh	r3, [r3, #10]
 80101e6:	461a      	mov	r2, r3
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d3e6      	bcc.n	80101bc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	1ad2      	subs	r2, r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	697a      	ldr	r2, [r7, #20]
 80101fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010200:	6979      	ldr	r1, [r7, #20]
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f7ff fb80 	bl	800f908 <clust2sect>
 8010208:	4602      	mov	r2, r0
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	899b      	ldrh	r3, [r3, #12]
 801021e:	461a      	mov	r2, r3
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	fbb3 f0f2 	udiv	r0, r3, r2
 8010226:	fb02 f200 	mul.w	r2, r2, r0
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	18ca      	adds	r2, r1, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3718      	adds	r7, #24
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801024c:	2100      	movs	r1, #0
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7ff fe95 	bl	800ff7e <dir_sdi>
 8010254:	4603      	mov	r3, r0
 8010256:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d12b      	bne.n	80102b6 <dir_alloc+0x7a>
		n = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	69db      	ldr	r3, [r3, #28]
 8010266:	4619      	mov	r1, r3
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f7ff faaf 	bl	800f7cc <move_window>
 801026e:	4603      	mov	r3, r0
 8010270:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d11d      	bne.n	80102b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6a1b      	ldr	r3, [r3, #32]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	2be5      	cmp	r3, #229	; 0xe5
 8010280:	d004      	beq.n	801028c <dir_alloc+0x50>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6a1b      	ldr	r3, [r3, #32]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d107      	bne.n	801029c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	3301      	adds	r3, #1
 8010290:	613b      	str	r3, [r7, #16]
 8010292:	693a      	ldr	r2, [r7, #16]
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d102      	bne.n	80102a0 <dir_alloc+0x64>
 801029a:	e00c      	b.n	80102b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801029c:	2300      	movs	r3, #0
 801029e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80102a0:	2101      	movs	r1, #1
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff fef4 	bl	8010090 <dir_next>
 80102a8:	4603      	mov	r3, r0
 80102aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d0d7      	beq.n	8010262 <dir_alloc+0x26>
 80102b2:	e000      	b.n	80102b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	2b04      	cmp	r3, #4
 80102ba:	d101      	bne.n	80102c0 <dir_alloc+0x84>
 80102bc:	2307      	movs	r3, #7
 80102be:	75fb      	strb	r3, [r7, #23]
	return res;
 80102c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3718      	adds	r7, #24
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b084      	sub	sp, #16
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
 80102d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	331a      	adds	r3, #26
 80102d8:	4618      	mov	r0, r3
 80102da:	f7fe ffc7 	bl	800f26c <ld_word>
 80102de:	4603      	mov	r3, r0
 80102e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b03      	cmp	r3, #3
 80102e8:	d109      	bne.n	80102fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	3314      	adds	r3, #20
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe ffbc 	bl	800f26c <ld_word>
 80102f4:	4603      	mov	r3, r0
 80102f6:	041b      	lsls	r3, r3, #16
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80102fe:	68fb      	ldr	r3, [r7, #12]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	331a      	adds	r3, #26
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	b292      	uxth	r2, r2
 801031c:	4611      	mov	r1, r2
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe ffdf 	bl	800f2e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	2b03      	cmp	r3, #3
 801032a:	d109      	bne.n	8010340 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	f103 0214 	add.w	r2, r3, #20
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	0c1b      	lsrs	r3, r3, #16
 8010336:	b29b      	uxth	r3, r3
 8010338:	4619      	mov	r1, r3
 801033a:	4610      	mov	r0, r2
 801033c:	f7fe ffd1 	bl	800f2e2 <st_word>
	}
}
 8010340:	bf00      	nop
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010352:	2304      	movs	r3, #4
 8010354:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801035c:	e03c      	b.n	80103d8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	4619      	mov	r1, r3
 8010364:	6938      	ldr	r0, [r7, #16]
 8010366:	f7ff fa31 	bl	800f7cc <move_window>
 801036a:	4603      	mov	r3, r0
 801036c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d136      	bne.n	80103e2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6a1b      	ldr	r3, [r3, #32]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d102      	bne.n	8010388 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010382:	2304      	movs	r3, #4
 8010384:	75fb      	strb	r3, [r7, #23]
 8010386:	e031      	b.n	80103ec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6a1b      	ldr	r3, [r3, #32]
 801038c:	330b      	adds	r3, #11
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010394:	73bb      	strb	r3, [r7, #14]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	7bba      	ldrb	r2, [r7, #14]
 801039a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801039c:	7bfb      	ldrb	r3, [r7, #15]
 801039e:	2be5      	cmp	r3, #229	; 0xe5
 80103a0:	d011      	beq.n	80103c6 <dir_read+0x7e>
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
 80103a4:	2b2e      	cmp	r3, #46	; 0x2e
 80103a6:	d00e      	beq.n	80103c6 <dir_read+0x7e>
 80103a8:	7bbb      	ldrb	r3, [r7, #14]
 80103aa:	2b0f      	cmp	r3, #15
 80103ac:	d00b      	beq.n	80103c6 <dir_read+0x7e>
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
 80103b0:	f023 0320 	bic.w	r3, r3, #32
 80103b4:	2b08      	cmp	r3, #8
 80103b6:	bf0c      	ite	eq
 80103b8:	2301      	moveq	r3, #1
 80103ba:	2300      	movne	r3, #0
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	461a      	mov	r2, r3
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d00f      	beq.n	80103e6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80103c6:	2100      	movs	r1, #0
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff fe61 	bl	8010090 <dir_next>
 80103ce:	4603      	mov	r3, r0
 80103d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d108      	bne.n	80103ea <dir_read+0xa2>
	while (dp->sect) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	69db      	ldr	r3, [r3, #28]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d1be      	bne.n	801035e <dir_read+0x16>
 80103e0:	e004      	b.n	80103ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80103e2:	bf00      	nop
 80103e4:	e002      	b.n	80103ec <dir_read+0xa4>
				break;
 80103e6:	bf00      	nop
 80103e8:	e000      	b.n	80103ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80103ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80103ec:	7dfb      	ldrb	r3, [r7, #23]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d002      	beq.n	80103f8 <dir_read+0xb0>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	61da      	str	r2, [r3, #28]
	return res;
 80103f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3718      	adds	r7, #24
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010402:	b580      	push	{r7, lr}
 8010404:	b086      	sub	sp, #24
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010410:	2100      	movs	r1, #0
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff fdb3 	bl	800ff7e <dir_sdi>
 8010418:	4603      	mov	r3, r0
 801041a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801041c:	7dfb      	ldrb	r3, [r7, #23]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d001      	beq.n	8010426 <dir_find+0x24>
 8010422:	7dfb      	ldrb	r3, [r7, #23]
 8010424:	e03e      	b.n	80104a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	69db      	ldr	r3, [r3, #28]
 801042a:	4619      	mov	r1, r3
 801042c:	6938      	ldr	r0, [r7, #16]
 801042e:	f7ff f9cd 	bl	800f7cc <move_window>
 8010432:	4603      	mov	r3, r0
 8010434:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d12f      	bne.n	801049c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a1b      	ldr	r3, [r3, #32]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010444:	7bfb      	ldrb	r3, [r7, #15]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d102      	bne.n	8010450 <dir_find+0x4e>
 801044a:	2304      	movs	r3, #4
 801044c:	75fb      	strb	r3, [r7, #23]
 801044e:	e028      	b.n	80104a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a1b      	ldr	r3, [r3, #32]
 8010454:	330b      	adds	r3, #11
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801045c:	b2da      	uxtb	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	330b      	adds	r3, #11
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	f003 0308 	and.w	r3, r3, #8
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10a      	bne.n	8010488 <dir_find+0x86>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a18      	ldr	r0, [r3, #32]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	3324      	adds	r3, #36	; 0x24
 801047a:	220b      	movs	r2, #11
 801047c:	4619      	mov	r1, r3
 801047e:	f7fe ffb2 	bl	800f3e6 <mem_cmp>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00b      	beq.n	80104a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010488:	2100      	movs	r1, #0
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7ff fe00 	bl	8010090 <dir_next>
 8010490:	4603      	mov	r3, r0
 8010492:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010494:	7dfb      	ldrb	r3, [r7, #23]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0c5      	beq.n	8010426 <dir_find+0x24>
 801049a:	e002      	b.n	80104a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 801049c:	bf00      	nop
 801049e:	e000      	b.n	80104a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104a0:	bf00      	nop

	return res;
 80104a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80104ba:	2101      	movs	r1, #1
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7ff febd 	bl	801023c <dir_alloc>
 80104c2:	4603      	mov	r3, r0
 80104c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d11c      	bne.n	8010506 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	69db      	ldr	r3, [r3, #28]
 80104d0:	4619      	mov	r1, r3
 80104d2:	68b8      	ldr	r0, [r7, #8]
 80104d4:	f7ff f97a 	bl	800f7cc <move_window>
 80104d8:	4603      	mov	r3, r0
 80104da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d111      	bne.n	8010506 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a1b      	ldr	r3, [r3, #32]
 80104e6:	2220      	movs	r2, #32
 80104e8:	2100      	movs	r1, #0
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe ff61 	bl	800f3b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6a18      	ldr	r0, [r3, #32]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	3324      	adds	r3, #36	; 0x24
 80104f8:	220b      	movs	r2, #11
 80104fa:	4619      	mov	r1, r3
 80104fc:	f7fe ff38 	bl	800f370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	2201      	movs	r2, #1
 8010504:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010506:	7bfb      	ldrb	r3, [r7, #15]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3710      	adds	r7, #16
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	69db      	ldr	r3, [r3, #28]
 8010522:	4619      	mov	r1, r3
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f7ff f951 	bl	800f7cc <move_window>
 801052a:	4603      	mov	r3, r0
 801052c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801052e:	7afb      	ldrb	r3, [r7, #11]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d106      	bne.n	8010542 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a1b      	ldr	r3, [r3, #32]
 8010538:	22e5      	movs	r2, #229	; 0xe5
 801053a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2201      	movs	r2, #1
 8010540:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010542:	7afb      	ldrb	r3, [r7, #11]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b088      	sub	sp, #32
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	60fb      	str	r3, [r7, #12]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3324      	adds	r3, #36	; 0x24
 8010560:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010562:	220b      	movs	r2, #11
 8010564:	2120      	movs	r1, #32
 8010566:	68b8      	ldr	r0, [r7, #8]
 8010568:	f7fe ff23 	bl	800f3b2 <mem_set>
	si = i = 0; ni = 8;
 801056c:	2300      	movs	r3, #0
 801056e:	613b      	str	r3, [r7, #16]
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	617b      	str	r3, [r7, #20]
 8010574:	2308      	movs	r3, #8
 8010576:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	4413      	add	r3, r2
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b2e      	cmp	r3, #46	; 0x2e
 8010582:	d12f      	bne.n	80105e4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	617a      	str	r2, [r7, #20]
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4413      	add	r3, r2
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010592:	7ffb      	ldrb	r3, [r7, #31]
 8010594:	2b2e      	cmp	r3, #46	; 0x2e
 8010596:	d10a      	bne.n	80105ae <create_name+0x62>
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d807      	bhi.n	80105ae <create_name+0x62>
			sfn[i++] = c;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	613a      	str	r2, [r7, #16]
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	4413      	add	r3, r2
 80105a8:	7ffa      	ldrb	r2, [r7, #31]
 80105aa:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80105ac:	e7ea      	b.n	8010584 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80105ae:	7ffb      	ldrb	r3, [r7, #31]
 80105b0:	2b2f      	cmp	r3, #47	; 0x2f
 80105b2:	d007      	beq.n	80105c4 <create_name+0x78>
 80105b4:	7ffb      	ldrb	r3, [r7, #31]
 80105b6:	2b5c      	cmp	r3, #92	; 0x5c
 80105b8:	d004      	beq.n	80105c4 <create_name+0x78>
 80105ba:	7ffb      	ldrb	r3, [r7, #31]
 80105bc:	2b20      	cmp	r3, #32
 80105be:	d901      	bls.n	80105c4 <create_name+0x78>
 80105c0:	2306      	movs	r3, #6
 80105c2:	e084      	b.n	80106ce <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	441a      	add	r2, r3
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80105ce:	7ffb      	ldrb	r3, [r7, #31]
 80105d0:	2b20      	cmp	r3, #32
 80105d2:	d801      	bhi.n	80105d8 <create_name+0x8c>
 80105d4:	2224      	movs	r2, #36	; 0x24
 80105d6:	e000      	b.n	80105da <create_name+0x8e>
 80105d8:	2220      	movs	r2, #32
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	330b      	adds	r3, #11
 80105de:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	e074      	b.n	80106ce <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	1c5a      	adds	r2, r3, #1
 80105e8:	617a      	str	r2, [r7, #20]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	4413      	add	r3, r2
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105f2:	7ffb      	ldrb	r3, [r7, #31]
 80105f4:	2b20      	cmp	r3, #32
 80105f6:	d94e      	bls.n	8010696 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80105f8:	7ffb      	ldrb	r3, [r7, #31]
 80105fa:	2b2f      	cmp	r3, #47	; 0x2f
 80105fc:	d006      	beq.n	801060c <create_name+0xc0>
 80105fe:	7ffb      	ldrb	r3, [r7, #31]
 8010600:	2b5c      	cmp	r3, #92	; 0x5c
 8010602:	d110      	bne.n	8010626 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010604:	e002      	b.n	801060c <create_name+0xc0>
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	3301      	adds	r3, #1
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	4413      	add	r3, r2
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b2f      	cmp	r3, #47	; 0x2f
 8010616:	d0f6      	beq.n	8010606 <create_name+0xba>
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	4413      	add	r3, r2
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b5c      	cmp	r3, #92	; 0x5c
 8010622:	d0f0      	beq.n	8010606 <create_name+0xba>
			break;
 8010624:	e038      	b.n	8010698 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010626:	7ffb      	ldrb	r3, [r7, #31]
 8010628:	2b2e      	cmp	r3, #46	; 0x2e
 801062a:	d003      	beq.n	8010634 <create_name+0xe8>
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	429a      	cmp	r2, r3
 8010632:	d30c      	bcc.n	801064e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	2b0b      	cmp	r3, #11
 8010638:	d002      	beq.n	8010640 <create_name+0xf4>
 801063a:	7ffb      	ldrb	r3, [r7, #31]
 801063c:	2b2e      	cmp	r3, #46	; 0x2e
 801063e:	d001      	beq.n	8010644 <create_name+0xf8>
 8010640:	2306      	movs	r3, #6
 8010642:	e044      	b.n	80106ce <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010644:	2308      	movs	r3, #8
 8010646:	613b      	str	r3, [r7, #16]
 8010648:	230b      	movs	r3, #11
 801064a:	61bb      	str	r3, [r7, #24]
			continue;
 801064c:	e022      	b.n	8010694 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801064e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010652:	2b00      	cmp	r3, #0
 8010654:	da04      	bge.n	8010660 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010656:	7ffb      	ldrb	r3, [r7, #31]
 8010658:	3b80      	subs	r3, #128	; 0x80
 801065a:	4a1f      	ldr	r2, [pc, #124]	; (80106d8 <create_name+0x18c>)
 801065c:	5cd3      	ldrb	r3, [r2, r3]
 801065e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010660:	7ffb      	ldrb	r3, [r7, #31]
 8010662:	4619      	mov	r1, r3
 8010664:	481d      	ldr	r0, [pc, #116]	; (80106dc <create_name+0x190>)
 8010666:	f7fe fee5 	bl	800f434 <chk_chr>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d001      	beq.n	8010674 <create_name+0x128>
 8010670:	2306      	movs	r3, #6
 8010672:	e02c      	b.n	80106ce <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010674:	7ffb      	ldrb	r3, [r7, #31]
 8010676:	2b60      	cmp	r3, #96	; 0x60
 8010678:	d905      	bls.n	8010686 <create_name+0x13a>
 801067a:	7ffb      	ldrb	r3, [r7, #31]
 801067c:	2b7a      	cmp	r3, #122	; 0x7a
 801067e:	d802      	bhi.n	8010686 <create_name+0x13a>
 8010680:	7ffb      	ldrb	r3, [r7, #31]
 8010682:	3b20      	subs	r3, #32
 8010684:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	613a      	str	r2, [r7, #16]
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	4413      	add	r3, r2
 8010690:	7ffa      	ldrb	r2, [r7, #31]
 8010692:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010694:	e7a6      	b.n	80105e4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010696:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	441a      	add	r2, r3
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <create_name+0x160>
 80106a8:	2306      	movs	r3, #6
 80106aa:	e010      	b.n	80106ce <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	2be5      	cmp	r3, #229	; 0xe5
 80106b2:	d102      	bne.n	80106ba <create_name+0x16e>
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2205      	movs	r2, #5
 80106b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80106ba:	7ffb      	ldrb	r3, [r7, #31]
 80106bc:	2b20      	cmp	r3, #32
 80106be:	d801      	bhi.n	80106c4 <create_name+0x178>
 80106c0:	2204      	movs	r2, #4
 80106c2:	e000      	b.n	80106c6 <create_name+0x17a>
 80106c4:	2200      	movs	r2, #0
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	330b      	adds	r3, #11
 80106ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80106cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3720      	adds	r7, #32
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	08017e2c 	.word	0x08017e2c
 80106dc:	08017ddc 	.word	0x08017ddc

080106e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b2f      	cmp	r3, #47	; 0x2f
 80106fa:	d00b      	beq.n	8010714 <follow_path+0x34>
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	2b5c      	cmp	r3, #92	; 0x5c
 8010702:	d007      	beq.n	8010714 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	699a      	ldr	r2, [r3, #24]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	609a      	str	r2, [r3, #8]
 801070c:	e00d      	b.n	801072a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	603b      	str	r3, [r7, #0]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	2b2f      	cmp	r3, #47	; 0x2f
 801071a:	d0f8      	beq.n	801070e <follow_path+0x2e>
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	2b5c      	cmp	r3, #92	; 0x5c
 8010722:	d0f4      	beq.n	801070e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	2200      	movs	r2, #0
 8010728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b1f      	cmp	r3, #31
 8010730:	d80a      	bhi.n	8010748 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2280      	movs	r2, #128	; 0x80
 8010736:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801073a:	2100      	movs	r1, #0
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7ff fc1e 	bl	800ff7e <dir_sdi>
 8010742:	4603      	mov	r3, r0
 8010744:	75fb      	strb	r3, [r7, #23]
 8010746:	e05b      	b.n	8010800 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010748:	463b      	mov	r3, r7
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fefd 	bl	801054c <create_name>
 8010752:	4603      	mov	r3, r0
 8010754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010756:	7dfb      	ldrb	r3, [r7, #23]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d14c      	bne.n	80107f6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f7ff fe50 	bl	8010402 <dir_find>
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801076c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801076e:	7dfb      	ldrb	r3, [r7, #23]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d01b      	beq.n	80107ac <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010774:	7dfb      	ldrb	r3, [r7, #23]
 8010776:	2b04      	cmp	r3, #4
 8010778:	d13f      	bne.n	80107fa <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801077a:	7afb      	ldrb	r3, [r7, #11]
 801077c:	f003 0320 	and.w	r3, r3, #32
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00b      	beq.n	801079c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010784:	7afb      	ldrb	r3, [r7, #11]
 8010786:	f003 0304 	and.w	r3, r3, #4
 801078a:	2b00      	cmp	r3, #0
 801078c:	d031      	beq.n	80107f2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2280      	movs	r2, #128	; 0x80
 8010792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010796:	2300      	movs	r3, #0
 8010798:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801079a:	e02e      	b.n	80107fa <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801079c:	7afb      	ldrb	r3, [r7, #11]
 801079e:	f003 0304 	and.w	r3, r3, #4
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d129      	bne.n	80107fa <follow_path+0x11a>
 80107a6:	2305      	movs	r3, #5
 80107a8:	75fb      	strb	r3, [r7, #23]
				break;
 80107aa:	e026      	b.n	80107fa <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80107ac:	7afb      	ldrb	r3, [r7, #11]
 80107ae:	f003 0304 	and.w	r3, r3, #4
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d123      	bne.n	80107fe <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	799b      	ldrb	r3, [r3, #6]
 80107ba:	f003 0310 	and.w	r3, r3, #16
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d102      	bne.n	80107c8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80107c2:	2305      	movs	r3, #5
 80107c4:	75fb      	strb	r3, [r7, #23]
 80107c6:	e01b      	b.n	8010800 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	695b      	ldr	r3, [r3, #20]
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	8992      	ldrh	r2, [r2, #12]
 80107d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80107da:	fb02 f200 	mul.w	r2, r2, r0
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	440b      	add	r3, r1
 80107e2:	4619      	mov	r1, r3
 80107e4:	68f8      	ldr	r0, [r7, #12]
 80107e6:	f7ff fd70 	bl	80102ca <ld_clust>
 80107ea:	4602      	mov	r2, r0
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	609a      	str	r2, [r3, #8]
 80107f0:	e7aa      	b.n	8010748 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80107f2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80107f4:	e7a8      	b.n	8010748 <follow_path+0x68>
			if (res != FR_OK) break;
 80107f6:	bf00      	nop
 80107f8:	e002      	b.n	8010800 <follow_path+0x120>
				break;
 80107fa:	bf00      	nop
 80107fc:	e000      	b.n	8010800 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80107fe:	bf00      	nop
			}
		}
	}

	return res;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801080a:	b480      	push	{r7}
 801080c:	b087      	sub	sp, #28
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010812:	f04f 33ff 	mov.w	r3, #4294967295
 8010816:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d031      	beq.n	8010884 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	617b      	str	r3, [r7, #20]
 8010826:	e002      	b.n	801082e <get_ldnumber+0x24>
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	3301      	adds	r3, #1
 801082c:	617b      	str	r3, [r7, #20]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	2b20      	cmp	r3, #32
 8010834:	d903      	bls.n	801083e <get_ldnumber+0x34>
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	2b3a      	cmp	r3, #58	; 0x3a
 801083c:	d1f4      	bne.n	8010828 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b3a      	cmp	r3, #58	; 0x3a
 8010844:	d11c      	bne.n	8010880 <get_ldnumber+0x76>
			tp = *path;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	60fa      	str	r2, [r7, #12]
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	3b30      	subs	r3, #48	; 0x30
 8010856:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b09      	cmp	r3, #9
 801085c:	d80e      	bhi.n	801087c <get_ldnumber+0x72>
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	429a      	cmp	r2, r3
 8010864:	d10a      	bne.n	801087c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d107      	bne.n	801087c <get_ldnumber+0x72>
					vol = (int)i;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	3301      	adds	r3, #1
 8010874:	617b      	str	r3, [r7, #20]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	697a      	ldr	r2, [r7, #20]
 801087a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	e002      	b.n	8010886 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010880:	2300      	movs	r3, #0
 8010882:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010884:	693b      	ldr	r3, [r7, #16]
}
 8010886:	4618      	mov	r0, r3
 8010888:	371c      	adds	r7, #28
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
	...

08010894 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	70da      	strb	r2, [r3, #3]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f04f 32ff 	mov.w	r2, #4294967295
 80108aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7fe ff8c 	bl	800f7cc <move_window>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <check_fs+0x2a>
 80108ba:	2304      	movs	r3, #4
 80108bc:	e038      	b.n	8010930 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	3338      	adds	r3, #56	; 0x38
 80108c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe fcd0 	bl	800f26c <ld_word>
 80108cc:	4603      	mov	r3, r0
 80108ce:	461a      	mov	r2, r3
 80108d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d001      	beq.n	80108dc <check_fs+0x48>
 80108d8:	2303      	movs	r3, #3
 80108da:	e029      	b.n	8010930 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108e2:	2be9      	cmp	r3, #233	; 0xe9
 80108e4:	d009      	beq.n	80108fa <check_fs+0x66>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108ec:	2beb      	cmp	r3, #235	; 0xeb
 80108ee:	d11e      	bne.n	801092e <check_fs+0x9a>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80108f6:	2b90      	cmp	r3, #144	; 0x90
 80108f8:	d119      	bne.n	801092e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	3338      	adds	r3, #56	; 0x38
 80108fe:	3336      	adds	r3, #54	; 0x36
 8010900:	4618      	mov	r0, r3
 8010902:	f7fe fccb 	bl	800f29c <ld_dword>
 8010906:	4603      	mov	r3, r0
 8010908:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801090c:	4a0a      	ldr	r2, [pc, #40]	; (8010938 <check_fs+0xa4>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d101      	bne.n	8010916 <check_fs+0x82>
 8010912:	2300      	movs	r3, #0
 8010914:	e00c      	b.n	8010930 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	3338      	adds	r3, #56	; 0x38
 801091a:	3352      	adds	r3, #82	; 0x52
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fcbd 	bl	800f29c <ld_dword>
 8010922:	4602      	mov	r2, r0
 8010924:	4b05      	ldr	r3, [pc, #20]	; (801093c <check_fs+0xa8>)
 8010926:	429a      	cmp	r2, r3
 8010928:	d101      	bne.n	801092e <check_fs+0x9a>
 801092a:	2300      	movs	r3, #0
 801092c:	e000      	b.n	8010930 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801092e:	2302      	movs	r3, #2
}
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	00544146 	.word	0x00544146
 801093c:	33544146 	.word	0x33544146

08010940 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b096      	sub	sp, #88	; 0x58
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	4613      	mov	r3, r2
 801094c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	2200      	movs	r2, #0
 8010952:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f7ff ff58 	bl	801080a <get_ldnumber>
 801095a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801095c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801095e:	2b00      	cmp	r3, #0
 8010960:	da01      	bge.n	8010966 <find_volume+0x26>
 8010962:	230b      	movs	r3, #11
 8010964:	e268      	b.n	8010e38 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010966:	4ab0      	ldr	r2, [pc, #704]	; (8010c28 <find_volume+0x2e8>)
 8010968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801096e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010972:	2b00      	cmp	r3, #0
 8010974:	d101      	bne.n	801097a <find_volume+0x3a>
 8010976:	230c      	movs	r3, #12
 8010978:	e25e      	b.n	8010e38 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801097e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010980:	79fb      	ldrb	r3, [r7, #7]
 8010982:	f023 0301 	bic.w	r3, r3, #1
 8010986:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d01a      	beq.n	80109c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe fbcb 	bl	800f130 <disk_status>
 801099a:	4603      	mov	r3, r0
 801099c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80109a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10c      	bne.n	80109c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80109ac:	79fb      	ldrb	r3, [r7, #7]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d007      	beq.n	80109c2 <find_volume+0x82>
 80109b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109b6:	f003 0304 	and.w	r3, r3, #4
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80109be:	230a      	movs	r3, #10
 80109c0:	e23a      	b.n	8010e38 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80109c2:	2300      	movs	r3, #0
 80109c4:	e238      	b.n	8010e38 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80109c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c8:	2200      	movs	r2, #0
 80109ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80109cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ce:	b2da      	uxtb	r2, r3
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80109d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d6:	785b      	ldrb	r3, [r3, #1]
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe fbc3 	bl	800f164 <disk_initialize>
 80109de:	4603      	mov	r3, r0
 80109e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80109e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109e8:	f003 0301 	and.w	r3, r3, #1
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80109f0:	2303      	movs	r3, #3
 80109f2:	e221      	b.n	8010e38 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d007      	beq.n	8010a0a <find_volume+0xca>
 80109fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109fe:	f003 0304 	and.w	r3, r3, #4
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010a06:	230a      	movs	r3, #10
 8010a08:	e216      	b.n	8010e38 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0c:	7858      	ldrb	r0, [r3, #1]
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	330c      	adds	r3, #12
 8010a12:	461a      	mov	r2, r3
 8010a14:	2102      	movs	r1, #2
 8010a16:	f7fe fc0b 	bl	800f230 <disk_ioctl>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d001      	beq.n	8010a24 <find_volume+0xe4>
 8010a20:	2301      	movs	r3, #1
 8010a22:	e209      	b.n	8010e38 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a26:	899b      	ldrh	r3, [r3, #12]
 8010a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a2c:	d80d      	bhi.n	8010a4a <find_volume+0x10a>
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	899b      	ldrh	r3, [r3, #12]
 8010a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a36:	d308      	bcc.n	8010a4a <find_volume+0x10a>
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	899b      	ldrh	r3, [r3, #12]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	3b01      	subs	r3, #1
 8010a44:	4013      	ands	r3, r2
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d001      	beq.n	8010a4e <find_volume+0x10e>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e1f4      	b.n	8010e38 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a56:	f7ff ff1d 	bl	8010894 <check_fs>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d14b      	bne.n	8010b00 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a68:	2300      	movs	r3, #0
 8010a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8010a6c:	e01f      	b.n	8010aae <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a76:	011b      	lsls	r3, r3, #4
 8010a78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010a7c:	4413      	add	r3, r2
 8010a7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a82:	3304      	adds	r3, #4
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d006      	beq.n	8010a98 <find_volume+0x158>
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fe fc04 	bl	800f29c <ld_dword>
 8010a94:	4602      	mov	r2, r0
 8010a96:	e000      	b.n	8010a9a <find_volume+0x15a>
 8010a98:	2200      	movs	r2, #0
 8010a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010aa2:	440b      	add	r3, r1
 8010aa4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aaa:	3301      	adds	r3, #1
 8010aac:	643b      	str	r3, [r7, #64]	; 0x40
 8010aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ab0:	2b03      	cmp	r3, #3
 8010ab2:	d9dc      	bls.n	8010a6e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <find_volume+0x184>
 8010abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010acc:	4413      	add	r3, r2
 8010ace:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010ad2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d005      	beq.n	8010ae6 <find_volume+0x1a6>
 8010ada:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ade:	f7ff fed9 	bl	8010894 <check_fs>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	e000      	b.n	8010ae8 <find_volume+0x1a8>
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d905      	bls.n	8010b00 <find_volume+0x1c0>
 8010af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010af6:	3301      	adds	r3, #1
 8010af8:	643b      	str	r3, [r7, #64]	; 0x40
 8010afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010afc:	2b03      	cmp	r3, #3
 8010afe:	d9e1      	bls.n	8010ac4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b04:	2b04      	cmp	r3, #4
 8010b06:	d101      	bne.n	8010b0c <find_volume+0x1cc>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e195      	b.n	8010e38 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d901      	bls.n	8010b18 <find_volume+0x1d8>
 8010b14:	230d      	movs	r3, #13
 8010b16:	e18f      	b.n	8010e38 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1a:	3338      	adds	r3, #56	; 0x38
 8010b1c:	330b      	adds	r3, #11
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fba4 	bl	800f26c <ld_word>
 8010b24:	4603      	mov	r3, r0
 8010b26:	461a      	mov	r2, r3
 8010b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2a:	899b      	ldrh	r3, [r3, #12]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d001      	beq.n	8010b34 <find_volume+0x1f4>
 8010b30:	230d      	movs	r3, #13
 8010b32:	e181      	b.n	8010e38 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b36:	3338      	adds	r3, #56	; 0x38
 8010b38:	3316      	adds	r3, #22
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fe fb96 	bl	800f26c <ld_word>
 8010b40:	4603      	mov	r3, r0
 8010b42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <find_volume+0x218>
 8010b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4c:	3338      	adds	r3, #56	; 0x38
 8010b4e:	3324      	adds	r3, #36	; 0x24
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fe fba3 	bl	800f29c <ld_dword>
 8010b56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b5c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b60:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6a:	789b      	ldrb	r3, [r3, #2]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d005      	beq.n	8010b7c <find_volume+0x23c>
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	789b      	ldrb	r3, [r3, #2]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d001      	beq.n	8010b7c <find_volume+0x23c>
 8010b78:	230d      	movs	r3, #13
 8010b7a:	e15d      	b.n	8010e38 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7e:	789b      	ldrb	r3, [r3, #2]
 8010b80:	461a      	mov	r2, r3
 8010b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b84:	fb02 f303 	mul.w	r3, r2, r3
 8010b88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b98:	895b      	ldrh	r3, [r3, #10]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d008      	beq.n	8010bb0 <find_volume+0x270>
 8010b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba0:	895b      	ldrh	r3, [r3, #10]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba6:	895b      	ldrh	r3, [r3, #10]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	4013      	ands	r3, r2
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d001      	beq.n	8010bb4 <find_volume+0x274>
 8010bb0:	230d      	movs	r3, #13
 8010bb2:	e141      	b.n	8010e38 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb6:	3338      	adds	r3, #56	; 0x38
 8010bb8:	3311      	adds	r3, #17
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fe fb56 	bl	800f26c <ld_word>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bca:	891b      	ldrh	r3, [r3, #8]
 8010bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bce:	8992      	ldrh	r2, [r2, #12]
 8010bd0:	0952      	lsrs	r2, r2, #5
 8010bd2:	b292      	uxth	r2, r2
 8010bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bd8:	fb02 f201 	mul.w	r2, r2, r1
 8010bdc:	1a9b      	subs	r3, r3, r2
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d001      	beq.n	8010be8 <find_volume+0x2a8>
 8010be4:	230d      	movs	r3, #13
 8010be6:	e127      	b.n	8010e38 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bea:	3338      	adds	r3, #56	; 0x38
 8010bec:	3313      	adds	r3, #19
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fe fb3c 	bl	800f26c <ld_word>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <find_volume+0x2cc>
 8010bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c00:	3338      	adds	r3, #56	; 0x38
 8010c02:	3320      	adds	r3, #32
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fe fb49 	bl	800f29c <ld_dword>
 8010c0a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	3338      	adds	r3, #56	; 0x38
 8010c10:	330e      	adds	r3, #14
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe fb2a 	bl	800f26c <ld_word>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010c1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d104      	bne.n	8010c2c <find_volume+0x2ec>
 8010c22:	230d      	movs	r3, #13
 8010c24:	e108      	b.n	8010e38 <find_volume+0x4f8>
 8010c26:	bf00      	nop
 8010c28:	200335f8 	.word	0x200335f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010c2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c30:	4413      	add	r3, r2
 8010c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c34:	8911      	ldrh	r1, [r2, #8]
 8010c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c38:	8992      	ldrh	r2, [r2, #12]
 8010c3a:	0952      	lsrs	r2, r2, #5
 8010c3c:	b292      	uxth	r2, r2
 8010c3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8010c42:	b292      	uxth	r2, r2
 8010c44:	4413      	add	r3, r2
 8010c46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d201      	bcs.n	8010c54 <find_volume+0x314>
 8010c50:	230d      	movs	r3, #13
 8010c52:	e0f1      	b.n	8010e38 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c5c:	8952      	ldrh	r2, [r2, #10]
 8010c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c62:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <find_volume+0x32e>
 8010c6a:	230d      	movs	r3, #13
 8010c6c:	e0e4      	b.n	8010e38 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010c6e:	2303      	movs	r3, #3
 8010c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d802      	bhi.n	8010c84 <find_volume+0x344>
 8010c7e:	2302      	movs	r3, #2
 8010c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d802      	bhi.n	8010c94 <find_volume+0x354>
 8010c8e:	2301      	movs	r3, #1
 8010c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c96:	1c9a      	adds	r2, r3, #2
 8010c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ca0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ca2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca6:	441a      	add	r2, r3
 8010ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010caa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010cac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb0:	441a      	add	r2, r3
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cba:	2b03      	cmp	r3, #3
 8010cbc:	d11e      	bne.n	8010cfc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc0:	3338      	adds	r3, #56	; 0x38
 8010cc2:	332a      	adds	r3, #42	; 0x2a
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe fad1 	bl	800f26c <ld_word>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <find_volume+0x394>
 8010cd0:	230d      	movs	r3, #13
 8010cd2:	e0b1      	b.n	8010e38 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	891b      	ldrh	r3, [r3, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <find_volume+0x3a0>
 8010cdc:	230d      	movs	r3, #13
 8010cde:	e0ab      	b.n	8010e38 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	3338      	adds	r3, #56	; 0x38
 8010ce4:	332c      	adds	r3, #44	; 0x2c
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fe fad8 	bl	800f29c <ld_dword>
 8010cec:	4602      	mov	r2, r0
 8010cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf4:	69db      	ldr	r3, [r3, #28]
 8010cf6:	009b      	lsls	r3, r3, #2
 8010cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8010cfa:	e01f      	b.n	8010d3c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfe:	891b      	ldrh	r3, [r3, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <find_volume+0x3c8>
 8010d04:	230d      	movs	r3, #13
 8010d06:	e097      	b.n	8010e38 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0e:	441a      	add	r2, r3
 8010d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d12:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d103      	bne.n	8010d24 <find_volume+0x3e4>
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1e:	69db      	ldr	r3, [r3, #28]
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	e00a      	b.n	8010d3a <find_volume+0x3fa>
 8010d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d26:	69da      	ldr	r2, [r3, #28]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	4413      	add	r3, r2
 8010d2e:	085a      	lsrs	r2, r3, #1
 8010d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d32:	69db      	ldr	r3, [r3, #28]
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010d3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	6a1a      	ldr	r2, [r3, #32]
 8010d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d42:	899b      	ldrh	r3, [r3, #12]
 8010d44:	4619      	mov	r1, r3
 8010d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d48:	440b      	add	r3, r1
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d4e:	8989      	ldrh	r1, [r1, #12]
 8010d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d201      	bcs.n	8010d5c <find_volume+0x41c>
 8010d58:	230d      	movs	r3, #13
 8010d5a:	e06d      	b.n	8010e38 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d62:	615a      	str	r2, [r3, #20]
 8010d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d66:	695a      	ldr	r2, [r3, #20]
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6e:	2280      	movs	r2, #128	; 0x80
 8010d70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d149      	bne.n	8010e0e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7c:	3338      	adds	r3, #56	; 0x38
 8010d7e:	3330      	adds	r3, #48	; 0x30
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe fa73 	bl	800f26c <ld_word>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d140      	bne.n	8010e0e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d8e:	3301      	adds	r3, #1
 8010d90:	4619      	mov	r1, r3
 8010d92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d94:	f7fe fd1a 	bl	800f7cc <move_window>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d137      	bne.n	8010e0e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da0:	2200      	movs	r2, #0
 8010da2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	3338      	adds	r3, #56	; 0x38
 8010da8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fe fa5d 	bl	800f26c <ld_word>
 8010db2:	4603      	mov	r3, r0
 8010db4:	461a      	mov	r2, r3
 8010db6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d127      	bne.n	8010e0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	3338      	adds	r3, #56	; 0x38
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fe fa6a 	bl	800f29c <ld_dword>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	4b1d      	ldr	r3, [pc, #116]	; (8010e40 <find_volume+0x500>)
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d11e      	bne.n	8010e0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	3338      	adds	r3, #56	; 0x38
 8010dd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fe fa5f 	bl	800f29c <ld_dword>
 8010dde:	4602      	mov	r2, r0
 8010de0:	4b18      	ldr	r3, [pc, #96]	; (8010e44 <find_volume+0x504>)
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d113      	bne.n	8010e0e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	3338      	adds	r3, #56	; 0x38
 8010dea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe fa54 	bl	800f29c <ld_dword>
 8010df4:	4602      	mov	r2, r0
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfc:	3338      	adds	r3, #56	; 0x38
 8010dfe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fa4a 	bl	800f29c <ld_dword>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010e14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e16:	4b0c      	ldr	r3, [pc, #48]	; (8010e48 <find_volume+0x508>)
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	4b0a      	ldr	r3, [pc, #40]	; (8010e48 <find_volume+0x508>)
 8010e20:	801a      	strh	r2, [r3, #0]
 8010e22:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <find_volume+0x508>)
 8010e24:	881a      	ldrh	r2, [r3, #0]
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e32:	f7fe fc63 	bl	800f6fc <clear_lock>
#endif
	return FR_OK;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3758      	adds	r7, #88	; 0x58
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	41615252 	.word	0x41615252
 8010e44:	61417272 	.word	0x61417272
 8010e48:	200335fc 	.word	0x200335fc

08010e4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010e56:	2309      	movs	r3, #9
 8010e58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d01c      	beq.n	8010e9a <validate+0x4e>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d018      	beq.n	8010e9a <validate+0x4e>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d013      	beq.n	8010e9a <validate+0x4e>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	889a      	ldrh	r2, [r3, #4]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	88db      	ldrh	r3, [r3, #6]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d10c      	bne.n	8010e9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	785b      	ldrb	r3, [r3, #1]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fe f952 	bl	800f130 <disk_status>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	f003 0301 	and.w	r3, r3, #1
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d101      	bne.n	8010e9a <validate+0x4e>
			res = FR_OK;
 8010e96:	2300      	movs	r3, #0
 8010e98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <validate+0x5a>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	e000      	b.n	8010ea8 <validate+0x5c>
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	683a      	ldr	r2, [r7, #0]
 8010eaa:	6013      	str	r3, [r2, #0]
	return res;
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
	...

08010eb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b088      	sub	sp, #32
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010eca:	f107 0310 	add.w	r3, r7, #16
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff fc9b 	bl	801080a <get_ldnumber>
 8010ed4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	da01      	bge.n	8010ee0 <f_mount+0x28>
 8010edc:	230b      	movs	r3, #11
 8010ede:	e02b      	b.n	8010f38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010ee0:	4a17      	ldr	r2, [pc, #92]	; (8010f40 <f_mount+0x88>)
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ee8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d005      	beq.n	8010efc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010ef0:	69b8      	ldr	r0, [r7, #24]
 8010ef2:	f7fe fc03 	bl	800f6fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	490d      	ldr	r1, [pc, #52]	; (8010f40 <f_mount+0x88>)
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d002      	beq.n	8010f1e <f_mount+0x66>
 8010f18:	79fb      	ldrb	r3, [r7, #7]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d001      	beq.n	8010f22 <f_mount+0x6a>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e00a      	b.n	8010f38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010f22:	f107 010c 	add.w	r1, r7, #12
 8010f26:	f107 0308 	add.w	r3, r7, #8
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff fd07 	bl	8010940 <find_volume>
 8010f32:	4603      	mov	r3, r0
 8010f34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	200335f8 	.word	0x200335f8

08010f44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b098      	sub	sp, #96	; 0x60
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d101      	bne.n	8010f5c <f_open+0x18>
 8010f58:	2309      	movs	r3, #9
 8010f5a:	e1ba      	b.n	80112d2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010f64:	79fa      	ldrb	r2, [r7, #7]
 8010f66:	f107 0110 	add.w	r1, r7, #16
 8010f6a:	f107 0308 	add.w	r3, r7, #8
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff fce6 	bl	8010940 <find_volume>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f040 819e 	bne.w	80112c0 <f_open+0x37c>
		dj.obj.fs = fs;
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	f107 0314 	add.w	r3, r7, #20
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ff fba5 	bl	80106e0 <follow_path>
 8010f96:	4603      	mov	r3, r0
 8010f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d11a      	bne.n	8010fda <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010fa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010fa8:	b25b      	sxtb	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	da03      	bge.n	8010fb6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010fae:	2306      	movs	r3, #6
 8010fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010fb4:	e011      	b.n	8010fda <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010fb6:	79fb      	ldrb	r3, [r7, #7]
 8010fb8:	f023 0301 	bic.w	r3, r3, #1
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	bf14      	ite	ne
 8010fc0:	2301      	movne	r3, #1
 8010fc2:	2300      	moveq	r3, #0
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	f107 0314 	add.w	r3, r7, #20
 8010fcc:	4611      	mov	r1, r2
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe fa4c 	bl	800f46c <chk_lock>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010fda:	79fb      	ldrb	r3, [r7, #7]
 8010fdc:	f003 031c 	and.w	r3, r3, #28
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d07e      	beq.n	80110e2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d017      	beq.n	801101c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ff0:	2b04      	cmp	r3, #4
 8010ff2:	d10e      	bne.n	8011012 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010ff4:	f7fe fa96 	bl	800f524 <enq_lock>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d006      	beq.n	801100c <f_open+0xc8>
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	4618      	mov	r0, r3
 8011004:	f7ff fa52 	bl	80104ac <dir_register>
 8011008:	4603      	mov	r3, r0
 801100a:	e000      	b.n	801100e <f_open+0xca>
 801100c:	2312      	movs	r3, #18
 801100e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011012:	79fb      	ldrb	r3, [r7, #7]
 8011014:	f043 0308 	orr.w	r3, r3, #8
 8011018:	71fb      	strb	r3, [r7, #7]
 801101a:	e010      	b.n	801103e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801101c:	7ebb      	ldrb	r3, [r7, #26]
 801101e:	f003 0311 	and.w	r3, r3, #17
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <f_open+0xea>
					res = FR_DENIED;
 8011026:	2307      	movs	r3, #7
 8011028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801102c:	e007      	b.n	801103e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	f003 0304 	and.w	r3, r3, #4
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <f_open+0xfa>
 8011038:	2308      	movs	r3, #8
 801103a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801103e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011042:	2b00      	cmp	r3, #0
 8011044:	d167      	bne.n	8011116 <f_open+0x1d2>
 8011046:	79fb      	ldrb	r3, [r7, #7]
 8011048:	f003 0308 	and.w	r3, r3, #8
 801104c:	2b00      	cmp	r3, #0
 801104e:	d062      	beq.n	8011116 <f_open+0x1d2>
				dw = GET_FATTIME();
 8011050:	4ba2      	ldr	r3, [pc, #648]	; (80112dc <f_open+0x398>)
 8011052:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011056:	330e      	adds	r3, #14
 8011058:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801105a:	4618      	mov	r0, r3
 801105c:	f7fe f95c 	bl	800f318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011062:	3316      	adds	r3, #22
 8011064:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011066:	4618      	mov	r0, r3
 8011068:	f7fe f956 	bl	800f318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106e:	330b      	adds	r3, #11
 8011070:	2220      	movs	r2, #32
 8011072:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011078:	4611      	mov	r1, r2
 801107a:	4618      	mov	r0, r3
 801107c:	f7ff f925 	bl	80102ca <ld_clust>
 8011080:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011086:	2200      	movs	r2, #0
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff f93d 	bl	8010308 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011090:	331c      	adds	r3, #28
 8011092:	2100      	movs	r1, #0
 8011094:	4618      	mov	r0, r3
 8011096:	f7fe f93f 	bl	800f318 <st_dword>
					fs->wflag = 1;
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	2201      	movs	r2, #1
 801109e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80110a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d037      	beq.n	8011116 <f_open+0x1d2>
						dw = fs->winsect;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110aa:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80110ac:	f107 0314 	add.w	r3, r7, #20
 80110b0:	2200      	movs	r2, #0
 80110b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fe fe2d 	bl	800fd14 <remove_chain>
 80110ba:	4603      	mov	r3, r0
 80110bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80110c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d126      	bne.n	8011116 <f_open+0x1d2>
							res = move_window(fs, dw);
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7fe fb7d 	bl	800f7cc <move_window>
 80110d2:	4603      	mov	r3, r0
 80110d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110dc:	3a01      	subs	r2, #1
 80110de:	611a      	str	r2, [r3, #16]
 80110e0:	e019      	b.n	8011116 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80110e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d115      	bne.n	8011116 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80110ea:	7ebb      	ldrb	r3, [r7, #26]
 80110ec:	f003 0310 	and.w	r3, r3, #16
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d003      	beq.n	80110fc <f_open+0x1b8>
					res = FR_NO_FILE;
 80110f4:	2304      	movs	r3, #4
 80110f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80110fa:	e00c      	b.n	8011116 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80110fc:	79fb      	ldrb	r3, [r7, #7]
 80110fe:	f003 0302 	and.w	r3, r3, #2
 8011102:	2b00      	cmp	r3, #0
 8011104:	d007      	beq.n	8011116 <f_open+0x1d2>
 8011106:	7ebb      	ldrb	r3, [r7, #26]
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	2b00      	cmp	r3, #0
 801110e:	d002      	beq.n	8011116 <f_open+0x1d2>
						res = FR_DENIED;
 8011110:	2307      	movs	r3, #7
 8011112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801111a:	2b00      	cmp	r3, #0
 801111c:	d128      	bne.n	8011170 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801111e:	79fb      	ldrb	r3, [r7, #7]
 8011120:	f003 0308 	and.w	r3, r3, #8
 8011124:	2b00      	cmp	r3, #0
 8011126:	d003      	beq.n	8011130 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011128:	79fb      	ldrb	r3, [r7, #7]
 801112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801113e:	79fb      	ldrb	r3, [r7, #7]
 8011140:	f023 0301 	bic.w	r3, r3, #1
 8011144:	2b00      	cmp	r3, #0
 8011146:	bf14      	ite	ne
 8011148:	2301      	movne	r3, #1
 801114a:	2300      	moveq	r3, #0
 801114c:	b2db      	uxtb	r3, r3
 801114e:	461a      	mov	r2, r3
 8011150:	f107 0314 	add.w	r3, r7, #20
 8011154:	4611      	mov	r1, r2
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fa06 	bl	800f568 <inc_lock>
 801115c:	4602      	mov	r2, r0
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d102      	bne.n	8011170 <f_open+0x22c>
 801116a:	2302      	movs	r3, #2
 801116c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011174:	2b00      	cmp	r3, #0
 8011176:	f040 80a3 	bne.w	80112c0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801117e:	4611      	mov	r1, r2
 8011180:	4618      	mov	r0, r3
 8011182:	f7ff f8a2 	bl	80102ca <ld_clust>
 8011186:	4602      	mov	r2, r0
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	331c      	adds	r3, #28
 8011190:	4618      	mov	r0, r3
 8011192:	f7fe f883 	bl	800f29c <ld_dword>
 8011196:	4602      	mov	r2, r0
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2200      	movs	r2, #0
 80111a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80111a2:	693a      	ldr	r2, [r7, #16]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	88da      	ldrh	r2, [r3, #6]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	79fa      	ldrb	r2, [r7, #7]
 80111b4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2200      	movs	r2, #0
 80111ba:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	3330      	adds	r3, #48	; 0x30
 80111cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80111d0:	2100      	movs	r1, #0
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe f8ed 	bl	800f3b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80111d8:	79fb      	ldrb	r3, [r7, #7]
 80111da:	f003 0320 	and.w	r3, r3, #32
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d06e      	beq.n	80112c0 <f_open+0x37c>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d06a      	beq.n	80112c0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	68da      	ldr	r2, [r3, #12]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	895b      	ldrh	r3, [r3, #10]
 80111f6:	461a      	mov	r2, r3
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	899b      	ldrh	r3, [r3, #12]
 80111fc:	fb03 f302 	mul.w	r3, r3, r2
 8011200:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	657b      	str	r3, [r7, #84]	; 0x54
 801120e:	e016      	b.n	801123e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011214:	4618      	mov	r0, r3
 8011216:	f7fe fb96 	bl	800f946 <get_fat>
 801121a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801121c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801121e:	2b01      	cmp	r3, #1
 8011220:	d802      	bhi.n	8011228 <f_open+0x2e4>
 8011222:	2302      	movs	r3, #2
 8011224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122e:	d102      	bne.n	8011236 <f_open+0x2f2>
 8011230:	2301      	movs	r3, #1
 8011232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801123a:	1ad3      	subs	r3, r2, r3
 801123c:	657b      	str	r3, [r7, #84]	; 0x54
 801123e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011242:	2b00      	cmp	r3, #0
 8011244:	d103      	bne.n	801124e <f_open+0x30a>
 8011246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801124a:	429a      	cmp	r2, r3
 801124c:	d8e0      	bhi.n	8011210 <f_open+0x2cc>
				}
				fp->clust = clst;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011252:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011258:	2b00      	cmp	r3, #0
 801125a:	d131      	bne.n	80112c0 <f_open+0x37c>
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	899b      	ldrh	r3, [r3, #12]
 8011260:	461a      	mov	r2, r3
 8011262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011264:	fbb3 f1f2 	udiv	r1, r3, r2
 8011268:	fb02 f201 	mul.w	r2, r2, r1
 801126c:	1a9b      	subs	r3, r3, r2
 801126e:	2b00      	cmp	r3, #0
 8011270:	d026      	beq.n	80112c0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fb46 	bl	800f908 <clust2sect>
 801127c:	6478      	str	r0, [r7, #68]	; 0x44
 801127e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011280:	2b00      	cmp	r3, #0
 8011282:	d103      	bne.n	801128c <f_open+0x348>
						res = FR_INT_ERR;
 8011284:	2302      	movs	r3, #2
 8011286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801128a:	e019      	b.n	80112c0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	899b      	ldrh	r3, [r3, #12]
 8011290:	461a      	mov	r2, r3
 8011292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011294:	fbb3 f2f2 	udiv	r2, r3, r2
 8011298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801129a:	441a      	add	r2, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	7858      	ldrb	r0, [r3, #1]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6a1a      	ldr	r2, [r3, #32]
 80112ae:	2301      	movs	r3, #1
 80112b0:	f7fd ff7e 	bl	800f1b0 <disk_read>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d002      	beq.n	80112c0 <f_open+0x37c>
 80112ba:	2301      	movs	r3, #1
 80112bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80112c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d002      	beq.n	80112ce <f_open+0x38a>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80112ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3760      	adds	r7, #96	; 0x60
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	274a0000 	.word	0x274a0000

080112e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08e      	sub	sp, #56	; 0x38
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
 80112ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f107 0214 	add.w	r2, r7, #20
 80112fe:	4611      	mov	r1, r2
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff fda3 	bl	8010e4c <validate>
 8011306:	4603      	mov	r3, r0
 8011308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801130c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011310:	2b00      	cmp	r3, #0
 8011312:	d107      	bne.n	8011324 <f_read+0x44>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	7d5b      	ldrb	r3, [r3, #21]
 8011318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801131c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011320:	2b00      	cmp	r3, #0
 8011322:	d002      	beq.n	801132a <f_read+0x4a>
 8011324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011328:	e135      	b.n	8011596 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	7d1b      	ldrb	r3, [r3, #20]
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <f_read+0x5a>
 8011336:	2307      	movs	r3, #7
 8011338:	e12d      	b.n	8011596 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	68da      	ldr	r2, [r3, #12]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	699b      	ldr	r3, [r3, #24]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	429a      	cmp	r2, r3
 801134c:	f240 811e 	bls.w	801158c <f_read+0x2ac>
 8011350:	6a3b      	ldr	r3, [r7, #32]
 8011352:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011354:	e11a      	b.n	801158c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	699b      	ldr	r3, [r3, #24]
 801135a:	697a      	ldr	r2, [r7, #20]
 801135c:	8992      	ldrh	r2, [r2, #12]
 801135e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011362:	fb02 f201 	mul.w	r2, r2, r1
 8011366:	1a9b      	subs	r3, r3, r2
 8011368:	2b00      	cmp	r3, #0
 801136a:	f040 80d5 	bne.w	8011518 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	699b      	ldr	r3, [r3, #24]
 8011372:	697a      	ldr	r2, [r7, #20]
 8011374:	8992      	ldrh	r2, [r2, #12]
 8011376:	fbb3 f3f2 	udiv	r3, r3, r2
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	8952      	ldrh	r2, [r2, #10]
 801137e:	3a01      	subs	r2, #1
 8011380:	4013      	ands	r3, r2
 8011382:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d12f      	bne.n	80113ea <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	699b      	ldr	r3, [r3, #24]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d103      	bne.n	801139a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	633b      	str	r3, [r7, #48]	; 0x30
 8011398:	e013      	b.n	80113c2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d007      	beq.n	80113b2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	699b      	ldr	r3, [r3, #24]
 80113a6:	4619      	mov	r1, r3
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f7fe fdb0 	bl	800ff0e <clmt_clust>
 80113ae:	6338      	str	r0, [r7, #48]	; 0x30
 80113b0:	e007      	b.n	80113c2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80113b2:	68fa      	ldr	r2, [r7, #12]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	69db      	ldr	r3, [r3, #28]
 80113b8:	4619      	mov	r1, r3
 80113ba:	4610      	mov	r0, r2
 80113bc:	f7fe fac3 	bl	800f946 <get_fat>
 80113c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80113c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d804      	bhi.n	80113d2 <f_read+0xf2>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2202      	movs	r2, #2
 80113cc:	755a      	strb	r2, [r3, #21]
 80113ce:	2302      	movs	r3, #2
 80113d0:	e0e1      	b.n	8011596 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d8:	d104      	bne.n	80113e4 <f_read+0x104>
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2201      	movs	r2, #1
 80113de:	755a      	strb	r2, [r3, #21]
 80113e0:	2301      	movs	r3, #1
 80113e2:	e0d8      	b.n	8011596 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113ea:	697a      	ldr	r2, [r7, #20]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	69db      	ldr	r3, [r3, #28]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fe fa88 	bl	800f908 <clust2sect>
 80113f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <f_read+0x12a>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2202      	movs	r2, #2
 8011404:	755a      	strb	r2, [r3, #21]
 8011406:	2302      	movs	r3, #2
 8011408:	e0c5      	b.n	8011596 <f_read+0x2b6>
			sect += csect;
 801140a:	69ba      	ldr	r2, [r7, #24]
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	4413      	add	r3, r2
 8011410:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	899b      	ldrh	r3, [r3, #12]
 8011416:	461a      	mov	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	fbb3 f3f2 	udiv	r3, r3, r2
 801141e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011422:	2b00      	cmp	r3, #0
 8011424:	d041      	beq.n	80114aa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011426:	69fa      	ldr	r2, [r7, #28]
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	4413      	add	r3, r2
 801142c:	697a      	ldr	r2, [r7, #20]
 801142e:	8952      	ldrh	r2, [r2, #10]
 8011430:	4293      	cmp	r3, r2
 8011432:	d905      	bls.n	8011440 <f_read+0x160>
					cc = fs->csize - csect;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	895b      	ldrh	r3, [r3, #10]
 8011438:	461a      	mov	r2, r3
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	7858      	ldrb	r0, [r3, #1]
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801144a:	f7fd feb1 	bl	800f1b0 <disk_read>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d004      	beq.n	801145e <f_read+0x17e>
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2201      	movs	r2, #1
 8011458:	755a      	strb	r2, [r3, #21]
 801145a:	2301      	movs	r3, #1
 801145c:	e09b      	b.n	8011596 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	7d1b      	ldrb	r3, [r3, #20]
 8011462:	b25b      	sxtb	r3, r3
 8011464:	2b00      	cmp	r3, #0
 8011466:	da18      	bge.n	801149a <f_read+0x1ba>
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	6a1a      	ldr	r2, [r3, #32]
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011472:	429a      	cmp	r2, r3
 8011474:	d911      	bls.n	801149a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6a1a      	ldr	r2, [r3, #32]
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	697a      	ldr	r2, [r7, #20]
 8011480:	8992      	ldrh	r2, [r2, #12]
 8011482:	fb02 f303 	mul.w	r3, r2, r3
 8011486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011488:	18d0      	adds	r0, r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	899b      	ldrh	r3, [r3, #12]
 8011494:	461a      	mov	r2, r3
 8011496:	f7fd ff6b 	bl	800f370 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	899b      	ldrh	r3, [r3, #12]
 801149e:	461a      	mov	r2, r3
 80114a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a2:	fb02 f303 	mul.w	r3, r2, r3
 80114a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80114a8:	e05c      	b.n	8011564 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6a1b      	ldr	r3, [r3, #32]
 80114ae:	69ba      	ldr	r2, [r7, #24]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d02e      	beq.n	8011512 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	7d1b      	ldrb	r3, [r3, #20]
 80114b8:	b25b      	sxtb	r3, r3
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	da18      	bge.n	80114f0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	7858      	ldrb	r0, [r3, #1]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6a1a      	ldr	r2, [r3, #32]
 80114cc:	2301      	movs	r3, #1
 80114ce:	f7fd fe8f 	bl	800f1f0 <disk_write>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d004      	beq.n	80114e2 <f_read+0x202>
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2201      	movs	r2, #1
 80114dc:	755a      	strb	r2, [r3, #21]
 80114de:	2301      	movs	r3, #1
 80114e0:	e059      	b.n	8011596 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	7d1b      	ldrb	r3, [r3, #20]
 80114e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	7858      	ldrb	r0, [r3, #1]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114fa:	2301      	movs	r3, #1
 80114fc:	69ba      	ldr	r2, [r7, #24]
 80114fe:	f7fd fe57 	bl	800f1b0 <disk_read>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d004      	beq.n	8011512 <f_read+0x232>
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2201      	movs	r2, #1
 801150c:	755a      	strb	r2, [r3, #21]
 801150e:	2301      	movs	r3, #1
 8011510:	e041      	b.n	8011596 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	69ba      	ldr	r2, [r7, #24]
 8011516:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	899b      	ldrh	r3, [r3, #12]
 801151c:	4618      	mov	r0, r3
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	699b      	ldr	r3, [r3, #24]
 8011522:	697a      	ldr	r2, [r7, #20]
 8011524:	8992      	ldrh	r2, [r2, #12]
 8011526:	fbb3 f1f2 	udiv	r1, r3, r2
 801152a:	fb02 f201 	mul.w	r2, r2, r1
 801152e:	1a9b      	subs	r3, r3, r2
 8011530:	1ac3      	subs	r3, r0, r3
 8011532:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	429a      	cmp	r2, r3
 801153a:	d901      	bls.n	8011540 <f_read+0x260>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	697a      	ldr	r2, [r7, #20]
 801154c:	8992      	ldrh	r2, [r2, #12]
 801154e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011552:	fb02 f200 	mul.w	r2, r2, r0
 8011556:	1a9b      	subs	r3, r3, r2
 8011558:	440b      	add	r3, r1
 801155a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801155c:	4619      	mov	r1, r3
 801155e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011560:	f7fd ff06 	bl	800f370 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011568:	4413      	add	r3, r2
 801156a:	627b      	str	r3, [r7, #36]	; 0x24
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	699a      	ldr	r2, [r3, #24]
 8011570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011572:	441a      	add	r2, r3
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	619a      	str	r2, [r3, #24]
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157e:	441a      	add	r2, r3
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	f47f aee1 	bne.w	8011356 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011594:	2300      	movs	r3, #0
}
 8011596:	4618      	mov	r0, r3
 8011598:	3738      	adds	r7, #56	; 0x38
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b08c      	sub	sp, #48	; 0x30
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	60b9      	str	r1, [r7, #8]
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	2200      	movs	r2, #0
 80115b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f107 0210 	add.w	r2, r7, #16
 80115bc:	4611      	mov	r1, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff fc44 	bl	8010e4c <validate>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80115ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d107      	bne.n	80115e2 <f_write+0x44>
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	7d5b      	ldrb	r3, [r3, #21]
 80115d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80115da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d002      	beq.n	80115e8 <f_write+0x4a>
 80115e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115e6:	e16a      	b.n	80118be <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	7d1b      	ldrb	r3, [r3, #20]
 80115ec:	f003 0302 	and.w	r3, r3, #2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d101      	bne.n	80115f8 <f_write+0x5a>
 80115f4:	2307      	movs	r3, #7
 80115f6:	e162      	b.n	80118be <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	699a      	ldr	r2, [r3, #24]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	441a      	add	r2, r3
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	429a      	cmp	r2, r3
 8011606:	f080 814c 	bcs.w	80118a2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	699b      	ldr	r3, [r3, #24]
 801160e:	43db      	mvns	r3, r3
 8011610:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011612:	e146      	b.n	80118a2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	693a      	ldr	r2, [r7, #16]
 801161a:	8992      	ldrh	r2, [r2, #12]
 801161c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011620:	fb02 f201 	mul.w	r2, r2, r1
 8011624:	1a9b      	subs	r3, r3, r2
 8011626:	2b00      	cmp	r3, #0
 8011628:	f040 80f1 	bne.w	801180e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	699b      	ldr	r3, [r3, #24]
 8011630:	693a      	ldr	r2, [r7, #16]
 8011632:	8992      	ldrh	r2, [r2, #12]
 8011634:	fbb3 f3f2 	udiv	r3, r3, r2
 8011638:	693a      	ldr	r2, [r7, #16]
 801163a:	8952      	ldrh	r2, [r2, #10]
 801163c:	3a01      	subs	r2, #1
 801163e:	4013      	ands	r3, r2
 8011640:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d143      	bne.n	80116d0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	699b      	ldr	r3, [r3, #24]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d10c      	bne.n	801166a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	689b      	ldr	r3, [r3, #8]
 8011654:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011658:	2b00      	cmp	r3, #0
 801165a:	d11a      	bne.n	8011692 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2100      	movs	r1, #0
 8011660:	4618      	mov	r0, r3
 8011662:	f7fe fbbc 	bl	800fdde <create_chain>
 8011666:	62b8      	str	r0, [r7, #40]	; 0x28
 8011668:	e013      	b.n	8011692 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166e:	2b00      	cmp	r3, #0
 8011670:	d007      	beq.n	8011682 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	699b      	ldr	r3, [r3, #24]
 8011676:	4619      	mov	r1, r3
 8011678:	68f8      	ldr	r0, [r7, #12]
 801167a:	f7fe fc48 	bl	800ff0e <clmt_clust>
 801167e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011680:	e007      	b.n	8011692 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011682:	68fa      	ldr	r2, [r7, #12]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	69db      	ldr	r3, [r3, #28]
 8011688:	4619      	mov	r1, r3
 801168a:	4610      	mov	r0, r2
 801168c:	f7fe fba7 	bl	800fdde <create_chain>
 8011690:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 8109 	beq.w	80118ac <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169c:	2b01      	cmp	r3, #1
 801169e:	d104      	bne.n	80116aa <f_write+0x10c>
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2202      	movs	r2, #2
 80116a4:	755a      	strb	r2, [r3, #21]
 80116a6:	2302      	movs	r3, #2
 80116a8:	e109      	b.n	80118be <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80116aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116b0:	d104      	bne.n	80116bc <f_write+0x11e>
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2201      	movs	r2, #1
 80116b6:	755a      	strb	r2, [r3, #21]
 80116b8:	2301      	movs	r3, #1
 80116ba:	e100      	b.n	80118be <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d102      	bne.n	80116d0 <f_write+0x132>
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7d1b      	ldrb	r3, [r3, #20]
 80116d4:	b25b      	sxtb	r3, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	da18      	bge.n	801170c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	7858      	ldrb	r0, [r3, #1]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6a1a      	ldr	r2, [r3, #32]
 80116e8:	2301      	movs	r3, #1
 80116ea:	f7fd fd81 	bl	800f1f0 <disk_write>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <f_write+0x160>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2201      	movs	r2, #1
 80116f8:	755a      	strb	r2, [r3, #21]
 80116fa:	2301      	movs	r3, #1
 80116fc:	e0df      	b.n	80118be <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	7d1b      	ldrb	r3, [r3, #20]
 8011702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011706:	b2da      	uxtb	r2, r3
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801170c:	693a      	ldr	r2, [r7, #16]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	4619      	mov	r1, r3
 8011714:	4610      	mov	r0, r2
 8011716:	f7fe f8f7 	bl	800f908 <clust2sect>
 801171a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d104      	bne.n	801172c <f_write+0x18e>
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2202      	movs	r2, #2
 8011726:	755a      	strb	r2, [r3, #21]
 8011728:	2302      	movs	r3, #2
 801172a:	e0c8      	b.n	80118be <f_write+0x320>
			sect += csect;
 801172c:	697a      	ldr	r2, [r7, #20]
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	4413      	add	r3, r2
 8011732:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	899b      	ldrh	r3, [r3, #12]
 8011738:	461a      	mov	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011740:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011742:	6a3b      	ldr	r3, [r7, #32]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d043      	beq.n	80117d0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011748:	69ba      	ldr	r2, [r7, #24]
 801174a:	6a3b      	ldr	r3, [r7, #32]
 801174c:	4413      	add	r3, r2
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	8952      	ldrh	r2, [r2, #10]
 8011752:	4293      	cmp	r3, r2
 8011754:	d905      	bls.n	8011762 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	895b      	ldrh	r3, [r3, #10]
 801175a:	461a      	mov	r2, r3
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	7858      	ldrb	r0, [r3, #1]
 8011766:	6a3b      	ldr	r3, [r7, #32]
 8011768:	697a      	ldr	r2, [r7, #20]
 801176a:	69f9      	ldr	r1, [r7, #28]
 801176c:	f7fd fd40 	bl	800f1f0 <disk_write>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d004      	beq.n	8011780 <f_write+0x1e2>
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2201      	movs	r2, #1
 801177a:	755a      	strb	r2, [r3, #21]
 801177c:	2301      	movs	r3, #1
 801177e:	e09e      	b.n	80118be <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6a1a      	ldr	r2, [r3, #32]
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	6a3a      	ldr	r2, [r7, #32]
 801178a:	429a      	cmp	r2, r3
 801178c:	d918      	bls.n	80117c0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	6a1a      	ldr	r2, [r3, #32]
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	693a      	ldr	r2, [r7, #16]
 801179e:	8992      	ldrh	r2, [r2, #12]
 80117a0:	fb02 f303 	mul.w	r3, r2, r3
 80117a4:	69fa      	ldr	r2, [r7, #28]
 80117a6:	18d1      	adds	r1, r2, r3
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	899b      	ldrh	r3, [r3, #12]
 80117ac:	461a      	mov	r2, r3
 80117ae:	f7fd fddf 	bl	800f370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117ba:	b2da      	uxtb	r2, r3
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	899b      	ldrh	r3, [r3, #12]
 80117c4:	461a      	mov	r2, r3
 80117c6:	6a3b      	ldr	r3, [r7, #32]
 80117c8:	fb02 f303 	mul.w	r3, r2, r3
 80117cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80117ce:	e04b      	b.n	8011868 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6a1b      	ldr	r3, [r3, #32]
 80117d4:	697a      	ldr	r2, [r7, #20]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d016      	beq.n	8011808 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	699a      	ldr	r2, [r3, #24]
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d210      	bcs.n	8011808 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	7858      	ldrb	r0, [r3, #1]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117f0:	2301      	movs	r3, #1
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	f7fd fcdc 	bl	800f1b0 <disk_read>
 80117f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d004      	beq.n	8011808 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2201      	movs	r2, #1
 8011802:	755a      	strb	r2, [r3, #21]
 8011804:	2301      	movs	r3, #1
 8011806:	e05a      	b.n	80118be <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	697a      	ldr	r2, [r7, #20]
 801180c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	899b      	ldrh	r3, [r3, #12]
 8011812:	4618      	mov	r0, r3
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	699b      	ldr	r3, [r3, #24]
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	8992      	ldrh	r2, [r2, #12]
 801181c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011820:	fb02 f201 	mul.w	r2, r2, r1
 8011824:	1a9b      	subs	r3, r3, r2
 8011826:	1ac3      	subs	r3, r0, r3
 8011828:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	429a      	cmp	r2, r3
 8011830:	d901      	bls.n	8011836 <f_write+0x298>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	699b      	ldr	r3, [r3, #24]
 8011840:	693a      	ldr	r2, [r7, #16]
 8011842:	8992      	ldrh	r2, [r2, #12]
 8011844:	fbb3 f0f2 	udiv	r0, r3, r2
 8011848:	fb02 f200 	mul.w	r2, r2, r0
 801184c:	1a9b      	subs	r3, r3, r2
 801184e:	440b      	add	r3, r1
 8011850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011852:	69f9      	ldr	r1, [r7, #28]
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd fd8b 	bl	800f370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	7d1b      	ldrb	r3, [r3, #20]
 801185e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011862:	b2da      	uxtb	r2, r3
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011868:	69fa      	ldr	r2, [r7, #28]
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	4413      	add	r3, r2
 801186e:	61fb      	str	r3, [r7, #28]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	699a      	ldr	r2, [r3, #24]
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	441a      	add	r2, r3
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	619a      	str	r2, [r3, #24]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	68da      	ldr	r2, [r3, #12]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	699b      	ldr	r3, [r3, #24]
 8011884:	429a      	cmp	r2, r3
 8011886:	bf38      	it	cc
 8011888:	461a      	movcc	r2, r3
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	60da      	str	r2, [r3, #12]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011894:	441a      	add	r2, r3
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f47f aeb5 	bne.w	8011614 <f_write+0x76>
 80118aa:	e000      	b.n	80118ae <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80118ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	7d1b      	ldrb	r3, [r3, #20]
 80118b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80118bc:	2300      	movs	r3, #0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3730      	adds	r7, #48	; 0x30
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
	...

080118c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f107 0208 	add.w	r2, r7, #8
 80118d6:	4611      	mov	r1, r2
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff fab7 	bl	8010e4c <validate>
 80118de:	4603      	mov	r3, r0
 80118e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d167      	bne.n	80119b8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7d1b      	ldrb	r3, [r3, #20]
 80118ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d061      	beq.n	80119b8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7d1b      	ldrb	r3, [r3, #20]
 80118f8:	b25b      	sxtb	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	da15      	bge.n	801192a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	7858      	ldrb	r0, [r3, #1]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a1a      	ldr	r2, [r3, #32]
 801190c:	2301      	movs	r3, #1
 801190e:	f7fd fc6f 	bl	800f1f0 <disk_write>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	d001      	beq.n	801191c <f_sync+0x54>
 8011918:	2301      	movs	r3, #1
 801191a:	e04e      	b.n	80119ba <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
 8011920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011924:	b2da      	uxtb	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801192a:	4b26      	ldr	r3, [pc, #152]	; (80119c4 <f_sync+0xfc>)
 801192c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801192e:	68ba      	ldr	r2, [r7, #8]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011934:	4619      	mov	r1, r3
 8011936:	4610      	mov	r0, r2
 8011938:	f7fd ff48 	bl	800f7cc <move_window>
 801193c:	4603      	mov	r3, r0
 801193e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011940:	7dfb      	ldrb	r3, [r7, #23]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d138      	bne.n	80119b8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	330b      	adds	r3, #11
 8011950:	781a      	ldrb	r2, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	330b      	adds	r3, #11
 8011956:	f042 0220 	orr.w	r2, r2, #32
 801195a:	b2d2      	uxtb	r2, r2
 801195c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	461a      	mov	r2, r3
 8011968:	68f9      	ldr	r1, [r7, #12]
 801196a:	f7fe fccd 	bl	8010308 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f103 021c 	add.w	r2, r3, #28
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	4619      	mov	r1, r3
 801197a:	4610      	mov	r0, r2
 801197c:	f7fd fccc 	bl	800f318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	3316      	adds	r3, #22
 8011984:	6939      	ldr	r1, [r7, #16]
 8011986:	4618      	mov	r0, r3
 8011988:	f7fd fcc6 	bl	800f318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3312      	adds	r3, #18
 8011990:	2100      	movs	r1, #0
 8011992:	4618      	mov	r0, r3
 8011994:	f7fd fca5 	bl	800f2e2 <st_word>
					fs->wflag = 1;
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2201      	movs	r2, #1
 801199c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fd ff41 	bl	800f828 <sync_fs>
 80119a6:	4603      	mov	r3, r0
 80119a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	7d1b      	ldrb	r3, [r3, #20]
 80119ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80119b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3718      	adds	r7, #24
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	274a0000 	.word	0x274a0000

080119c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7ff ff79 	bl	80118c8 <f_sync>
 80119d6:	4603      	mov	r3, r0
 80119d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80119da:	7bfb      	ldrb	r3, [r7, #15]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d118      	bne.n	8011a12 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f107 0208 	add.w	r2, r7, #8
 80119e6:	4611      	mov	r1, r2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7ff fa2f 	bl	8010e4c <validate>
 80119ee:	4603      	mov	r3, r0
 80119f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80119f2:	7bfb      	ldrb	r3, [r7, #15]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10c      	bne.n	8011a12 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fd fe41 	bl	800f684 <dec_lock>
 8011a02:	4603      	mov	r3, r0
 8011a04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d102      	bne.n	8011a12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011a1c:	b590      	push	{r4, r7, lr}
 8011a1e:	b091      	sub	sp, #68	; 0x44
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011a24:	f107 0108 	add.w	r1, r7, #8
 8011a28:	1d3b      	adds	r3, r7, #4
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe ff87 	bl	8010940 <find_volume>
 8011a32:	4603      	mov	r3, r0
 8011a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d131      	bne.n	8011aa4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	f107 030c 	add.w	r3, r7, #12
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7fe fe47 	bl	80106e0 <follow_path>
 8011a52:	4603      	mov	r3, r0
 8011a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011a58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d11a      	bne.n	8011a96 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011a60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011a64:	b25b      	sxtb	r3, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	da03      	bge.n	8011a72 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	697a      	ldr	r2, [r7, #20]
 8011a6e:	619a      	str	r2, [r3, #24]
 8011a70:	e011      	b.n	8011a96 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011a72:	7cbb      	ldrb	r3, [r7, #18]
 8011a74:	f003 0310 	and.w	r3, r3, #16
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d009      	beq.n	8011a90 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a80:	68bc      	ldr	r4, [r7, #8]
 8011a82:	4611      	mov	r1, r2
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7fe fc20 	bl	80102ca <ld_clust>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	61a3      	str	r3, [r4, #24]
 8011a8e:	e002      	b.n	8011a96 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011a90:	2305      	movs	r3, #5
 8011a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a9a:	2b04      	cmp	r3, #4
 8011a9c:	d102      	bne.n	8011aa4 <f_chdir+0x88>
 8011a9e:	2305      	movs	r3, #5
 8011aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011aa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3744      	adds	r7, #68	; 0x44
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd90      	pop	{r4, r7, pc}

08011ab0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b090      	sub	sp, #64	; 0x40
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f107 0208 	add.w	r2, r7, #8
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7ff f9c2 	bl	8010e4c <validate>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d103      	bne.n	8011ade <f_lseek+0x2e>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7d5b      	ldrb	r3, [r3, #21]
 8011ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d002      	beq.n	8011aec <f_lseek+0x3c>
 8011ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011aea:	e201      	b.n	8011ef0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 80d9 	beq.w	8011ca8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afc:	d15a      	bne.n	8011bb4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b02:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	1d1a      	adds	r2, r3, #4
 8011b08:	627a      	str	r2, [r7, #36]	; 0x24
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	617b      	str	r3, [r7, #20]
 8011b0e:	2302      	movs	r3, #2
 8011b10:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d03a      	beq.n	8011b94 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b20:	613b      	str	r3, [r7, #16]
 8011b22:	2300      	movs	r3, #0
 8011b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	3302      	adds	r3, #2
 8011b2a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b32:	3301      	adds	r3, #1
 8011b34:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fd ff03 	bl	800f946 <get_fat>
 8011b40:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d804      	bhi.n	8011b52 <f_lseek+0xa2>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	755a      	strb	r2, [r3, #21]
 8011b4e:	2302      	movs	r3, #2
 8011b50:	e1ce      	b.n	8011ef0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b58:	d104      	bne.n	8011b64 <f_lseek+0xb4>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	755a      	strb	r2, [r3, #21]
 8011b60:	2301      	movs	r3, #1
 8011b62:	e1c5      	b.n	8011ef0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	3301      	adds	r3, #1
 8011b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d0de      	beq.n	8011b2c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d809      	bhi.n	8011b8a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b78:	1d1a      	adds	r2, r3, #4
 8011b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8011b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b7e:	601a      	str	r2, [r3, #0]
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	1d1a      	adds	r2, r3, #4
 8011b84:	627a      	str	r2, [r7, #36]	; 0x24
 8011b86:	693a      	ldr	r2, [r7, #16]
 8011b88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	69db      	ldr	r3, [r3, #28]
 8011b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d3c4      	bcc.n	8011b1e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d803      	bhi.n	8011bac <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	e19f      	b.n	8011eec <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011bac:	2311      	movs	r3, #17
 8011bae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011bb2:	e19b      	b.n	8011eec <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d902      	bls.n	8011bc4 <f_lseek+0x114>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	683a      	ldr	r2, [r7, #0]
 8011bc8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 818d 	beq.w	8011eec <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7fe f998 	bl	800ff0e <clmt_clust>
 8011bde:	4602      	mov	r2, r0
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	69db      	ldr	r3, [r3, #28]
 8011bea:	4619      	mov	r1, r3
 8011bec:	4610      	mov	r0, r2
 8011bee:	f7fd fe8b 	bl	800f908 <clust2sect>
 8011bf2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011bf4:	69bb      	ldr	r3, [r7, #24]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d104      	bne.n	8011c04 <f_lseek+0x154>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2202      	movs	r2, #2
 8011bfe:	755a      	strb	r2, [r3, #21]
 8011c00:	2302      	movs	r3, #2
 8011c02:	e175      	b.n	8011ef0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	8992      	ldrh	r2, [r2, #12]
 8011c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	8952      	ldrh	r2, [r2, #10]
 8011c14:	3a01      	subs	r2, #1
 8011c16:	4013      	ands	r3, r2
 8011c18:	69ba      	ldr	r2, [r7, #24]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	8992      	ldrh	r2, [r2, #12]
 8011c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c2a:	fb02 f201 	mul.w	r2, r2, r1
 8011c2e:	1a9b      	subs	r3, r3, r2
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f000 815b 	beq.w	8011eec <f_lseek+0x43c>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6a1b      	ldr	r3, [r3, #32]
 8011c3a:	69ba      	ldr	r2, [r7, #24]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	f000 8155 	beq.w	8011eec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	7d1b      	ldrb	r3, [r3, #20]
 8011c46:	b25b      	sxtb	r3, r3
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	da18      	bge.n	8011c7e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	7858      	ldrb	r0, [r3, #1]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1a      	ldr	r2, [r3, #32]
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	f7fd fac8 	bl	800f1f0 <disk_write>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d004      	beq.n	8011c70 <f_lseek+0x1c0>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	755a      	strb	r2, [r3, #21]
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e13f      	b.n	8011ef0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7d1b      	ldrb	r3, [r3, #20]
 8011c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	7858      	ldrb	r0, [r3, #1]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c88:	2301      	movs	r3, #1
 8011c8a:	69ba      	ldr	r2, [r7, #24]
 8011c8c:	f7fd fa90 	bl	800f1b0 <disk_read>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d004      	beq.n	8011ca0 <f_lseek+0x1f0>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2201      	movs	r2, #1
 8011c9a:	755a      	strb	r2, [r3, #21]
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	e127      	b.n	8011ef0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	621a      	str	r2, [r3, #32]
 8011ca6:	e121      	b.n	8011eec <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	683a      	ldr	r2, [r7, #0]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d908      	bls.n	8011cc4 <f_lseek+0x214>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	7d1b      	ldrb	r3, [r3, #20]
 8011cb6:	f003 0302 	and.w	r3, r3, #2
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d102      	bne.n	8011cc4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cd2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f000 80b5 	beq.w	8011e46 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	895b      	ldrh	r3, [r3, #10]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	899b      	ldrh	r3, [r3, #12]
 8011ce6:	fb03 f302 	mul.w	r3, r3, r2
 8011cea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d01b      	beq.n	8011d2a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	1e5a      	subs	r2, r3, #1
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	1e59      	subs	r1, r3, #1
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d30f      	bcc.n	8011d2a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011d0a:	6a3b      	ldr	r3, [r7, #32]
 8011d0c:	1e5a      	subs	r2, r3, #1
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	425b      	negs	r3, r3
 8011d12:	401a      	ands	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	699b      	ldr	r3, [r3, #24]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	69db      	ldr	r3, [r3, #28]
 8011d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d28:	e022      	b.n	8011d70 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	689b      	ldr	r3, [r3, #8]
 8011d2e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d119      	bne.n	8011d6a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2100      	movs	r1, #0
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fe f84f 	bl	800fdde <create_chain>
 8011d40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d104      	bne.n	8011d52 <f_lseek+0x2a2>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2202      	movs	r2, #2
 8011d4c:	755a      	strb	r2, [r3, #21]
 8011d4e:	2302      	movs	r3, #2
 8011d50:	e0ce      	b.n	8011ef0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d104      	bne.n	8011d64 <f_lseek+0x2b4>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	755a      	strb	r2, [r3, #21]
 8011d60:	2301      	movs	r3, #1
 8011d62:	e0c5      	b.n	8011ef0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d067      	beq.n	8011e46 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d76:	e03a      	b.n	8011dee <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011d78:	683a      	ldr	r2, [r7, #0]
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	603b      	str	r3, [r7, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699a      	ldr	r2, [r3, #24]
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	441a      	add	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7d1b      	ldrb	r3, [r3, #20]
 8011d90:	f003 0302 	and.w	r3, r3, #2
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00b      	beq.n	8011db0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe f81e 	bl	800fdde <create_chain>
 8011da2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d108      	bne.n	8011dbc <f_lseek+0x30c>
							ofs = 0; break;
 8011daa:	2300      	movs	r3, #0
 8011dac:	603b      	str	r3, [r7, #0]
 8011dae:	e022      	b.n	8011df6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fd fdc6 	bl	800f946 <get_fat>
 8011dba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc2:	d104      	bne.n	8011dce <f_lseek+0x31e>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	755a      	strb	r2, [r3, #21]
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e090      	b.n	8011ef0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d904      	bls.n	8011dde <f_lseek+0x32e>
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	69db      	ldr	r3, [r3, #28]
 8011dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d304      	bcc.n	8011de8 <f_lseek+0x338>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2202      	movs	r2, #2
 8011de2:	755a      	strb	r2, [r3, #21]
 8011de4:	2302      	movs	r3, #2
 8011de6:	e083      	b.n	8011ef0 <f_lseek+0x440>
					fp->clust = clst;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011dee:	683a      	ldr	r2, [r7, #0]
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d8c0      	bhi.n	8011d78 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	699a      	ldr	r2, [r3, #24]
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	441a      	add	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	899b      	ldrh	r3, [r3, #12]
 8011e06:	461a      	mov	r2, r3
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e0e:	fb02 f201 	mul.w	r2, r2, r1
 8011e12:	1a9b      	subs	r3, r3, r2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d016      	beq.n	8011e46 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fd fd73 	bl	800f908 <clust2sect>
 8011e22:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d104      	bne.n	8011e34 <f_lseek+0x384>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2202      	movs	r2, #2
 8011e2e:	755a      	strb	r2, [r3, #21]
 8011e30:	2302      	movs	r3, #2
 8011e32:	e05d      	b.n	8011ef0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	899b      	ldrh	r3, [r3, #12]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e42:	4413      	add	r3, r2
 8011e44:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	699a      	ldr	r2, [r3, #24]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d90a      	bls.n	8011e68 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	699a      	ldr	r2, [r3, #24]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	7d1b      	ldrb	r3, [r3, #20]
 8011e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	699b      	ldr	r3, [r3, #24]
 8011e6c:	68ba      	ldr	r2, [r7, #8]
 8011e6e:	8992      	ldrh	r2, [r2, #12]
 8011e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e74:	fb02 f201 	mul.w	r2, r2, r1
 8011e78:	1a9b      	subs	r3, r3, r2
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d036      	beq.n	8011eec <f_lseek+0x43c>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d031      	beq.n	8011eec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	7d1b      	ldrb	r3, [r3, #20]
 8011e8c:	b25b      	sxtb	r3, r3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	da18      	bge.n	8011ec4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	7858      	ldrb	r0, [r3, #1]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a1a      	ldr	r2, [r3, #32]
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	f7fd f9a5 	bl	800f1f0 <disk_write>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d004      	beq.n	8011eb6 <f_lseek+0x406>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2201      	movs	r2, #1
 8011eb0:	755a      	strb	r2, [r3, #21]
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e01c      	b.n	8011ef0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7d1b      	ldrb	r3, [r3, #20]
 8011eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	7858      	ldrb	r0, [r3, #1]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ece:	2301      	movs	r3, #1
 8011ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ed2:	f7fd f96d 	bl	800f1b0 <disk_read>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d004      	beq.n	8011ee6 <f_lseek+0x436>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	755a      	strb	r2, [r3, #21]
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e004      	b.n	8011ef0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011eea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011eec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3740      	adds	r7, #64	; 0x40
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b09e      	sub	sp, #120	; 0x78
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011f00:	2300      	movs	r3, #0
 8011f02:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011f04:	f107 010c 	add.w	r1, r7, #12
 8011f08:	1d3b      	adds	r3, r7, #4
 8011f0a:	2202      	movs	r2, #2
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe fd17 	bl	8010940 <find_volume>
 8011f12:	4603      	mov	r3, r0
 8011f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011f1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f040 80a4 	bne.w	801206e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fbd6 	bl	80106e0 <follow_path>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011f3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d108      	bne.n	8011f54 <f_unlink+0x5c>
 8011f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011f46:	f003 0320 	and.w	r3, r3, #32
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011f4e:	2306      	movs	r3, #6
 8011f50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011f54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d108      	bne.n	8011f6e <f_unlink+0x76>
 8011f5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f60:	2102      	movs	r1, #2
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fd fa82 	bl	800f46c <chk_lock>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011f6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d17b      	bne.n	801206e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011f76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011f7a:	b25b      	sxtb	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	da03      	bge.n	8011f88 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011f80:	2306      	movs	r3, #6
 8011f82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011f86:	e008      	b.n	8011f9a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011f88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d002      	beq.n	8011f9a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011f94:	2307      	movs	r3, #7
 8011f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011f9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d13d      	bne.n	801201e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fe f98e 	bl	80102ca <ld_clust>
 8011fae:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011fb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011fb4:	f003 0310 	and.w	r3, r3, #16
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d030      	beq.n	801201e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	699b      	ldr	r3, [r3, #24]
 8011fc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d103      	bne.n	8011fce <f_unlink+0xd6>
						res = FR_DENIED;
 8011fc6:	2307      	movs	r3, #7
 8011fc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011fcc:	e027      	b.n	801201e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fd4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011fd6:	f107 0310 	add.w	r3, r7, #16
 8011fda:	2100      	movs	r1, #0
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd ffce 	bl	800ff7e <dir_sdi>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011fe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d116      	bne.n	801201e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011ff0:	f107 0310 	add.w	r3, r7, #16
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fe f9a6 	bl	8010348 <dir_read>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012006:	2b00      	cmp	r3, #0
 8012008:	d102      	bne.n	8012010 <f_unlink+0x118>
 801200a:	2307      	movs	r3, #7
 801200c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012010:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012014:	2b04      	cmp	r3, #4
 8012016:	d102      	bne.n	801201e <f_unlink+0x126>
 8012018:	2300      	movs	r3, #0
 801201a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801201e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012022:	2b00      	cmp	r3, #0
 8012024:	d123      	bne.n	801206e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801202a:	4618      	mov	r0, r3
 801202c:	f7fe fa70 	bl	8010510 <dir_remove>
 8012030:	4603      	mov	r3, r0
 8012032:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012036:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801203a:	2b00      	cmp	r3, #0
 801203c:	d10c      	bne.n	8012058 <f_unlink+0x160>
 801203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012040:	2b00      	cmp	r3, #0
 8012042:	d009      	beq.n	8012058 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012048:	2200      	movs	r2, #0
 801204a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801204c:	4618      	mov	r0, r3
 801204e:	f7fd fe61 	bl	800fd14 <remove_chain>
 8012052:	4603      	mov	r3, r0
 8012054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801205c:	2b00      	cmp	r3, #0
 801205e:	d106      	bne.n	801206e <f_unlink+0x176>
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4618      	mov	r0, r3
 8012064:	f7fd fbe0 	bl	800f828 <sync_fs>
 8012068:	4603      	mov	r3, r0
 801206a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801206e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012072:	4618      	mov	r0, r3
 8012074:	3778      	adds	r7, #120	; 0x78
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
	...

0801207c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b096      	sub	sp, #88	; 0x58
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012084:	f107 0108 	add.w	r1, r7, #8
 8012088:	1d3b      	adds	r3, r7, #4
 801208a:	2202      	movs	r2, #2
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fc57 	bl	8010940 <find_volume>
 8012092:	4603      	mov	r3, r0
 8012094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801209c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f040 80fe 	bne.w	80122a2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	f107 030c 	add.w	r3, r7, #12
 80120ac:	4611      	mov	r1, r2
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fb16 	bl	80106e0 <follow_path>
 80120b4:	4603      	mov	r3, r0
 80120b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80120ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d102      	bne.n	80120c8 <f_mkdir+0x4c>
 80120c2:	2308      	movs	r3, #8
 80120c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80120c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120cc:	2b04      	cmp	r3, #4
 80120ce:	d108      	bne.n	80120e2 <f_mkdir+0x66>
 80120d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80120d4:	f003 0320 	and.w	r3, r3, #32
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80120dc:	2306      	movs	r3, #6
 80120de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80120e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120e6:	2b04      	cmp	r3, #4
 80120e8:	f040 80db 	bne.w	80122a2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80120ec:	f107 030c 	add.w	r3, r7, #12
 80120f0:	2100      	movs	r1, #0
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fd fe73 	bl	800fdde <create_chain>
 80120f8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	895b      	ldrh	r3, [r3, #10]
 80120fe:	461a      	mov	r2, r3
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	899b      	ldrh	r3, [r3, #12]
 8012104:	fb03 f302 	mul.w	r3, r3, r2
 8012108:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012112:	2b00      	cmp	r3, #0
 8012114:	d102      	bne.n	801211c <f_mkdir+0xa0>
 8012116:	2307      	movs	r3, #7
 8012118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801211e:	2b01      	cmp	r3, #1
 8012120:	d102      	bne.n	8012128 <f_mkdir+0xac>
 8012122:	2302      	movs	r3, #2
 8012124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212e:	d102      	bne.n	8012136 <f_mkdir+0xba>
 8012130:	2301      	movs	r3, #1
 8012132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <f_mkdir+0xd0>
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	4618      	mov	r0, r3
 8012142:	f7fd faff 	bl	800f744 <sync_window>
 8012146:	4603      	mov	r3, r0
 8012148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801214c:	4b58      	ldr	r3, [pc, #352]	; (80122b0 <f_mkdir+0x234>)
 801214e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012154:	2b00      	cmp	r3, #0
 8012156:	d16c      	bne.n	8012232 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801215c:	4618      	mov	r0, r3
 801215e:	f7fd fbd3 	bl	800f908 <clust2sect>
 8012162:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	3338      	adds	r3, #56	; 0x38
 8012168:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	899b      	ldrh	r3, [r3, #12]
 801216e:	461a      	mov	r2, r3
 8012170:	2100      	movs	r1, #0
 8012172:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012174:	f7fd f91d 	bl	800f3b2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012178:	220b      	movs	r2, #11
 801217a:	2120      	movs	r1, #32
 801217c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801217e:	f7fd f918 	bl	800f3b2 <mem_set>
					dir[DIR_Name] = '.';
 8012182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012184:	222e      	movs	r2, #46	; 0x2e
 8012186:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801218a:	330b      	adds	r3, #11
 801218c:	2210      	movs	r2, #16
 801218e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012192:	3316      	adds	r3, #22
 8012194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012196:	4618      	mov	r0, r3
 8012198:	f7fd f8be 	bl	800f318 <st_dword>
					st_clust(fs, dir, dcl);
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fe f8b0 	bl	8010308 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80121a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121aa:	3320      	adds	r3, #32
 80121ac:	2220      	movs	r2, #32
 80121ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fd f8dd 	bl	800f370 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80121b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b8:	3321      	adds	r3, #33	; 0x21
 80121ba:	222e      	movs	r2, #46	; 0x2e
 80121bc:	701a      	strb	r2, [r3, #0]
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b03      	cmp	r3, #3
 80121c8:	d106      	bne.n	80121d8 <f_mkdir+0x15c>
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d101      	bne.n	80121d8 <f_mkdir+0x15c>
 80121d4:	2300      	movs	r3, #0
 80121d6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80121d8:	68b8      	ldr	r0, [r7, #8]
 80121da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121dc:	3320      	adds	r3, #32
 80121de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121e0:	4619      	mov	r1, r3
 80121e2:	f7fe f891 	bl	8010308 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	895b      	ldrh	r3, [r3, #10]
 80121ea:	653b      	str	r3, [r7, #80]	; 0x50
 80121ec:	e01c      	b.n	8012228 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80121ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f0:	1c5a      	adds	r2, r3, #1
 80121f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80121f4:	68ba      	ldr	r2, [r7, #8]
 80121f6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	2201      	movs	r2, #1
 80121fc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	4618      	mov	r0, r3
 8012202:	f7fd fa9f 	bl	800f744 <sync_window>
 8012206:	4603      	mov	r3, r0
 8012208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801220c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10d      	bne.n	8012230 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	899b      	ldrh	r3, [r3, #12]
 8012218:	461a      	mov	r2, r3
 801221a:	2100      	movs	r1, #0
 801221c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801221e:	f7fd f8c8 	bl	800f3b2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012224:	3b01      	subs	r3, #1
 8012226:	653b      	str	r3, [r7, #80]	; 0x50
 8012228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1df      	bne.n	80121ee <f_mkdir+0x172>
 801222e:	e000      	b.n	8012232 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012230:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012236:	2b00      	cmp	r3, #0
 8012238:	d107      	bne.n	801224a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801223a:	f107 030c 	add.w	r3, r7, #12
 801223e:	4618      	mov	r0, r3
 8012240:	f7fe f934 	bl	80104ac <dir_register>
 8012244:	4603      	mov	r3, r0
 8012246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801224a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801224e:	2b00      	cmp	r3, #0
 8012250:	d120      	bne.n	8012294 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012254:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012258:	3316      	adds	r3, #22
 801225a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801225c:	4618      	mov	r0, r3
 801225e:	f7fd f85b 	bl	800f318 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012268:	4618      	mov	r0, r3
 801226a:	f7fe f84d 	bl	8010308 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012270:	330b      	adds	r3, #11
 8012272:	2210      	movs	r2, #16
 8012274:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	2201      	movs	r2, #1
 801227a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801227c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012280:	2b00      	cmp	r3, #0
 8012282:	d10e      	bne.n	80122a2 <f_mkdir+0x226>
					res = sync_fs(fs);
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	4618      	mov	r0, r3
 8012288:	f7fd face 	bl	800f828 <sync_fs>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012292:	e006      	b.n	80122a2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012294:	f107 030c 	add.w	r3, r7, #12
 8012298:	2200      	movs	r2, #0
 801229a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801229c:	4618      	mov	r0, r3
 801229e:	f7fd fd39 	bl	800fd14 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80122a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3758      	adds	r7, #88	; 0x58
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	274a0000 	.word	0x274a0000

080122b4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b088      	sub	sp, #32
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
	int n = 0;
 80122c0:	2300      	movs	r3, #0
 80122c2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80122c8:	e017      	b.n	80122fa <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80122ca:	f107 0310 	add.w	r3, r7, #16
 80122ce:	f107 0114 	add.w	r1, r7, #20
 80122d2:	2201      	movs	r2, #1
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff f803 	bl	80112e0 <f_read>
		if (rc != 1) break;
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d112      	bne.n	8012306 <f_gets+0x52>
		c = s[0];
 80122e0:	7d3b      	ldrb	r3, [r7, #20]
 80122e2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	1c5a      	adds	r2, r3, #1
 80122e8:	61ba      	str	r2, [r7, #24]
 80122ea:	7dfa      	ldrb	r2, [r7, #23]
 80122ec:	701a      	strb	r2, [r3, #0]
		n++;
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	3301      	adds	r3, #1
 80122f2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80122f4:	7dfb      	ldrb	r3, [r7, #23]
 80122f6:	2b0a      	cmp	r3, #10
 80122f8:	d007      	beq.n	801230a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	69fa      	ldr	r2, [r7, #28]
 8012300:	429a      	cmp	r2, r3
 8012302:	dbe2      	blt.n	80122ca <f_gets+0x16>
 8012304:	e002      	b.n	801230c <f_gets+0x58>
		if (rc != 1) break;
 8012306:	bf00      	nop
 8012308:	e000      	b.n	801230c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801230a:	bf00      	nop
	}
	*p = 0;
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d001      	beq.n	801231c <f_gets+0x68>
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	e000      	b.n	801231e <f_gets+0x6a>
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3720      	adds	r7, #32
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012328:	b480      	push	{r7}
 801232a:	b087      	sub	sp, #28
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	4613      	mov	r3, r2
 8012334:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012336:	2301      	movs	r3, #1
 8012338:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801233a:	2300      	movs	r3, #0
 801233c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801233e:	4b1f      	ldr	r3, [pc, #124]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012340:	7a5b      	ldrb	r3, [r3, #9]
 8012342:	b2db      	uxtb	r3, r3
 8012344:	2b00      	cmp	r3, #0
 8012346:	d131      	bne.n	80123ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012348:	4b1c      	ldr	r3, [pc, #112]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 801234a:	7a5b      	ldrb	r3, [r3, #9]
 801234c:	b2db      	uxtb	r3, r3
 801234e:	461a      	mov	r2, r3
 8012350:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012352:	2100      	movs	r1, #0
 8012354:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012356:	4b19      	ldr	r3, [pc, #100]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012358:	7a5b      	ldrb	r3, [r3, #9]
 801235a:	b2db      	uxtb	r3, r3
 801235c:	4a17      	ldr	r2, [pc, #92]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	4413      	add	r3, r2
 8012362:	68fa      	ldr	r2, [r7, #12]
 8012364:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012366:	4b15      	ldr	r3, [pc, #84]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012368:	7a5b      	ldrb	r3, [r3, #9]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	461a      	mov	r2, r3
 801236e:	4b13      	ldr	r3, [pc, #76]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012370:	4413      	add	r3, r2
 8012372:	79fa      	ldrb	r2, [r7, #7]
 8012374:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012376:	4b11      	ldr	r3, [pc, #68]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012378:	7a5b      	ldrb	r3, [r3, #9]
 801237a:	b2db      	uxtb	r3, r3
 801237c:	1c5a      	adds	r2, r3, #1
 801237e:	b2d1      	uxtb	r1, r2
 8012380:	4a0e      	ldr	r2, [pc, #56]	; (80123bc <FATFS_LinkDriverEx+0x94>)
 8012382:	7251      	strb	r1, [r2, #9]
 8012384:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012386:	7dbb      	ldrb	r3, [r7, #22]
 8012388:	3330      	adds	r3, #48	; 0x30
 801238a:	b2da      	uxtb	r2, r3
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	3301      	adds	r3, #1
 8012394:	223a      	movs	r2, #58	; 0x3a
 8012396:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	3302      	adds	r3, #2
 801239c:	222f      	movs	r2, #47	; 0x2f
 801239e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	3303      	adds	r3, #3
 80123a4:	2200      	movs	r2, #0
 80123a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	371c      	adds	r7, #28
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	20033620 	.word	0x20033620

080123c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80123ca:	2200      	movs	r2, #0
 80123cc:	6839      	ldr	r1, [r7, #0]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ff ffaa 	bl	8012328 <FATFS_LinkDriverEx>
 80123d4:	4603      	mov	r3, r0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <__cxa_guard_acquire>:
 80123de:	6803      	ldr	r3, [r0, #0]
 80123e0:	07db      	lsls	r3, r3, #31
 80123e2:	d406      	bmi.n	80123f2 <__cxa_guard_acquire+0x14>
 80123e4:	7843      	ldrb	r3, [r0, #1]
 80123e6:	b103      	cbz	r3, 80123ea <__cxa_guard_acquire+0xc>
 80123e8:	deff      	udf	#255	; 0xff
 80123ea:	2301      	movs	r3, #1
 80123ec:	7043      	strb	r3, [r0, #1]
 80123ee:	4618      	mov	r0, r3
 80123f0:	4770      	bx	lr
 80123f2:	2000      	movs	r0, #0
 80123f4:	4770      	bx	lr

080123f6 <__cxa_guard_release>:
 80123f6:	2301      	movs	r3, #1
 80123f8:	6003      	str	r3, [r0, #0]
 80123fa:	4770      	bx	lr
 80123fc:	0000      	movs	r0, r0
	...

08012400 <cos>:
 8012400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012402:	ec51 0b10 	vmov	r0, r1, d0
 8012406:	4a1e      	ldr	r2, [pc, #120]	; (8012480 <cos+0x80>)
 8012408:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801240c:	4293      	cmp	r3, r2
 801240e:	dc06      	bgt.n	801241e <cos+0x1e>
 8012410:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012478 <cos+0x78>
 8012414:	f000 fa74 	bl	8012900 <__kernel_cos>
 8012418:	ec51 0b10 	vmov	r0, r1, d0
 801241c:	e007      	b.n	801242e <cos+0x2e>
 801241e:	4a19      	ldr	r2, [pc, #100]	; (8012484 <cos+0x84>)
 8012420:	4293      	cmp	r3, r2
 8012422:	dd09      	ble.n	8012438 <cos+0x38>
 8012424:	ee10 2a10 	vmov	r2, s0
 8012428:	460b      	mov	r3, r1
 801242a:	f7ed ff45 	bl	80002b8 <__aeabi_dsub>
 801242e:	ec41 0b10 	vmov	d0, r0, r1
 8012432:	b005      	add	sp, #20
 8012434:	f85d fb04 	ldr.w	pc, [sp], #4
 8012438:	4668      	mov	r0, sp
 801243a:	f000 f86d 	bl	8012518 <__ieee754_rem_pio2>
 801243e:	f000 0003 	and.w	r0, r0, #3
 8012442:	2801      	cmp	r0, #1
 8012444:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012448:	ed9d 0b00 	vldr	d0, [sp]
 801244c:	d007      	beq.n	801245e <cos+0x5e>
 801244e:	2802      	cmp	r0, #2
 8012450:	d00e      	beq.n	8012470 <cos+0x70>
 8012452:	2800      	cmp	r0, #0
 8012454:	d0de      	beq.n	8012414 <cos+0x14>
 8012456:	2001      	movs	r0, #1
 8012458:	f000 fe5a 	bl	8013110 <__kernel_sin>
 801245c:	e7dc      	b.n	8012418 <cos+0x18>
 801245e:	f000 fe57 	bl	8013110 <__kernel_sin>
 8012462:	ec53 2b10 	vmov	r2, r3, d0
 8012466:	ee10 0a10 	vmov	r0, s0
 801246a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801246e:	e7de      	b.n	801242e <cos+0x2e>
 8012470:	f000 fa46 	bl	8012900 <__kernel_cos>
 8012474:	e7f5      	b.n	8012462 <cos+0x62>
 8012476:	bf00      	nop
	...
 8012480:	3fe921fb 	.word	0x3fe921fb
 8012484:	7fefffff 	.word	0x7fefffff

08012488 <sin>:
 8012488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801248a:	ec51 0b10 	vmov	r0, r1, d0
 801248e:	4a20      	ldr	r2, [pc, #128]	; (8012510 <sin+0x88>)
 8012490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012494:	4293      	cmp	r3, r2
 8012496:	dc07      	bgt.n	80124a8 <sin+0x20>
 8012498:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012508 <sin+0x80>
 801249c:	2000      	movs	r0, #0
 801249e:	f000 fe37 	bl	8013110 <__kernel_sin>
 80124a2:	ec51 0b10 	vmov	r0, r1, d0
 80124a6:	e007      	b.n	80124b8 <sin+0x30>
 80124a8:	4a1a      	ldr	r2, [pc, #104]	; (8012514 <sin+0x8c>)
 80124aa:	4293      	cmp	r3, r2
 80124ac:	dd09      	ble.n	80124c2 <sin+0x3a>
 80124ae:	ee10 2a10 	vmov	r2, s0
 80124b2:	460b      	mov	r3, r1
 80124b4:	f7ed ff00 	bl	80002b8 <__aeabi_dsub>
 80124b8:	ec41 0b10 	vmov	d0, r0, r1
 80124bc:	b005      	add	sp, #20
 80124be:	f85d fb04 	ldr.w	pc, [sp], #4
 80124c2:	4668      	mov	r0, sp
 80124c4:	f000 f828 	bl	8012518 <__ieee754_rem_pio2>
 80124c8:	f000 0003 	and.w	r0, r0, #3
 80124cc:	2801      	cmp	r0, #1
 80124ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124d2:	ed9d 0b00 	vldr	d0, [sp]
 80124d6:	d004      	beq.n	80124e2 <sin+0x5a>
 80124d8:	2802      	cmp	r0, #2
 80124da:	d005      	beq.n	80124e8 <sin+0x60>
 80124dc:	b970      	cbnz	r0, 80124fc <sin+0x74>
 80124de:	2001      	movs	r0, #1
 80124e0:	e7dd      	b.n	801249e <sin+0x16>
 80124e2:	f000 fa0d 	bl	8012900 <__kernel_cos>
 80124e6:	e7dc      	b.n	80124a2 <sin+0x1a>
 80124e8:	2001      	movs	r0, #1
 80124ea:	f000 fe11 	bl	8013110 <__kernel_sin>
 80124ee:	ec53 2b10 	vmov	r2, r3, d0
 80124f2:	ee10 0a10 	vmov	r0, s0
 80124f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124fa:	e7dd      	b.n	80124b8 <sin+0x30>
 80124fc:	f000 fa00 	bl	8012900 <__kernel_cos>
 8012500:	e7f5      	b.n	80124ee <sin+0x66>
 8012502:	bf00      	nop
 8012504:	f3af 8000 	nop.w
	...
 8012510:	3fe921fb 	.word	0x3fe921fb
 8012514:	7fefffff 	.word	0x7fefffff

08012518 <__ieee754_rem_pio2>:
 8012518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251c:	ec57 6b10 	vmov	r6, r7, d0
 8012520:	4bc3      	ldr	r3, [pc, #780]	; (8012830 <__ieee754_rem_pio2+0x318>)
 8012522:	b08d      	sub	sp, #52	; 0x34
 8012524:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012528:	4598      	cmp	r8, r3
 801252a:	4604      	mov	r4, r0
 801252c:	9704      	str	r7, [sp, #16]
 801252e:	dc07      	bgt.n	8012540 <__ieee754_rem_pio2+0x28>
 8012530:	2200      	movs	r2, #0
 8012532:	2300      	movs	r3, #0
 8012534:	ed84 0b00 	vstr	d0, [r4]
 8012538:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801253c:	2500      	movs	r5, #0
 801253e:	e027      	b.n	8012590 <__ieee754_rem_pio2+0x78>
 8012540:	4bbc      	ldr	r3, [pc, #752]	; (8012834 <__ieee754_rem_pio2+0x31c>)
 8012542:	4598      	cmp	r8, r3
 8012544:	dc75      	bgt.n	8012632 <__ieee754_rem_pio2+0x11a>
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	4dbb      	ldr	r5, [pc, #748]	; (8012838 <__ieee754_rem_pio2+0x320>)
 801254a:	2b00      	cmp	r3, #0
 801254c:	ee10 0a10 	vmov	r0, s0
 8012550:	a3a9      	add	r3, pc, #676	; (adr r3, 80127f8 <__ieee754_rem_pio2+0x2e0>)
 8012552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012556:	4639      	mov	r1, r7
 8012558:	dd36      	ble.n	80125c8 <__ieee754_rem_pio2+0xb0>
 801255a:	f7ed fead 	bl	80002b8 <__aeabi_dsub>
 801255e:	45a8      	cmp	r8, r5
 8012560:	4606      	mov	r6, r0
 8012562:	460f      	mov	r7, r1
 8012564:	d018      	beq.n	8012598 <__ieee754_rem_pio2+0x80>
 8012566:	a3a6      	add	r3, pc, #664	; (adr r3, 8012800 <__ieee754_rem_pio2+0x2e8>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	f7ed fea4 	bl	80002b8 <__aeabi_dsub>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	e9c4 2300 	strd	r2, r3, [r4]
 8012578:	4630      	mov	r0, r6
 801257a:	4639      	mov	r1, r7
 801257c:	f7ed fe9c 	bl	80002b8 <__aeabi_dsub>
 8012580:	a39f      	add	r3, pc, #636	; (adr r3, 8012800 <__ieee754_rem_pio2+0x2e8>)
 8012582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012586:	f7ed fe97 	bl	80002b8 <__aeabi_dsub>
 801258a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801258e:	2501      	movs	r5, #1
 8012590:	4628      	mov	r0, r5
 8012592:	b00d      	add	sp, #52	; 0x34
 8012594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012598:	a39b      	add	r3, pc, #620	; (adr r3, 8012808 <__ieee754_rem_pio2+0x2f0>)
 801259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259e:	f7ed fe8b 	bl	80002b8 <__aeabi_dsub>
 80125a2:	a39b      	add	r3, pc, #620	; (adr r3, 8012810 <__ieee754_rem_pio2+0x2f8>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	4606      	mov	r6, r0
 80125aa:	460f      	mov	r7, r1
 80125ac:	f7ed fe84 	bl	80002b8 <__aeabi_dsub>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	e9c4 2300 	strd	r2, r3, [r4]
 80125b8:	4630      	mov	r0, r6
 80125ba:	4639      	mov	r1, r7
 80125bc:	f7ed fe7c 	bl	80002b8 <__aeabi_dsub>
 80125c0:	a393      	add	r3, pc, #588	; (adr r3, 8012810 <__ieee754_rem_pio2+0x2f8>)
 80125c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c6:	e7de      	b.n	8012586 <__ieee754_rem_pio2+0x6e>
 80125c8:	f7ed fe78 	bl	80002bc <__adddf3>
 80125cc:	45a8      	cmp	r8, r5
 80125ce:	4606      	mov	r6, r0
 80125d0:	460f      	mov	r7, r1
 80125d2:	d016      	beq.n	8012602 <__ieee754_rem_pio2+0xea>
 80125d4:	a38a      	add	r3, pc, #552	; (adr r3, 8012800 <__ieee754_rem_pio2+0x2e8>)
 80125d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125da:	f7ed fe6f 	bl	80002bc <__adddf3>
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	e9c4 2300 	strd	r2, r3, [r4]
 80125e6:	4630      	mov	r0, r6
 80125e8:	4639      	mov	r1, r7
 80125ea:	f7ed fe65 	bl	80002b8 <__aeabi_dsub>
 80125ee:	a384      	add	r3, pc, #528	; (adr r3, 8012800 <__ieee754_rem_pio2+0x2e8>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	f7ed fe62 	bl	80002bc <__adddf3>
 80125f8:	f04f 35ff 	mov.w	r5, #4294967295
 80125fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012600:	e7c6      	b.n	8012590 <__ieee754_rem_pio2+0x78>
 8012602:	a381      	add	r3, pc, #516	; (adr r3, 8012808 <__ieee754_rem_pio2+0x2f0>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f7ed fe58 	bl	80002bc <__adddf3>
 801260c:	a380      	add	r3, pc, #512	; (adr r3, 8012810 <__ieee754_rem_pio2+0x2f8>)
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	4606      	mov	r6, r0
 8012614:	460f      	mov	r7, r1
 8012616:	f7ed fe51 	bl	80002bc <__adddf3>
 801261a:	4602      	mov	r2, r0
 801261c:	460b      	mov	r3, r1
 801261e:	e9c4 2300 	strd	r2, r3, [r4]
 8012622:	4630      	mov	r0, r6
 8012624:	4639      	mov	r1, r7
 8012626:	f7ed fe47 	bl	80002b8 <__aeabi_dsub>
 801262a:	a379      	add	r3, pc, #484	; (adr r3, 8012810 <__ieee754_rem_pio2+0x2f8>)
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	e7e0      	b.n	80125f4 <__ieee754_rem_pio2+0xdc>
 8012632:	4b82      	ldr	r3, [pc, #520]	; (801283c <__ieee754_rem_pio2+0x324>)
 8012634:	4598      	cmp	r8, r3
 8012636:	f300 80d0 	bgt.w	80127da <__ieee754_rem_pio2+0x2c2>
 801263a:	f000 fe23 	bl	8013284 <fabs>
 801263e:	ec57 6b10 	vmov	r6, r7, d0
 8012642:	ee10 0a10 	vmov	r0, s0
 8012646:	a374      	add	r3, pc, #464	; (adr r3, 8012818 <__ieee754_rem_pio2+0x300>)
 8012648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264c:	4639      	mov	r1, r7
 801264e:	f7ed ffeb 	bl	8000628 <__aeabi_dmul>
 8012652:	2200      	movs	r2, #0
 8012654:	4b7a      	ldr	r3, [pc, #488]	; (8012840 <__ieee754_rem_pio2+0x328>)
 8012656:	f7ed fe31 	bl	80002bc <__adddf3>
 801265a:	f7ee fa95 	bl	8000b88 <__aeabi_d2iz>
 801265e:	4605      	mov	r5, r0
 8012660:	f7ed ff78 	bl	8000554 <__aeabi_i2d>
 8012664:	a364      	add	r3, pc, #400	; (adr r3, 80127f8 <__ieee754_rem_pio2+0x2e0>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801266e:	f7ed ffdb 	bl	8000628 <__aeabi_dmul>
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ed fe1d 	bl	80002b8 <__aeabi_dsub>
 801267e:	a360      	add	r3, pc, #384	; (adr r3, 8012800 <__ieee754_rem_pio2+0x2e8>)
 8012680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012684:	4682      	mov	sl, r0
 8012686:	468b      	mov	fp, r1
 8012688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801268c:	f7ed ffcc 	bl	8000628 <__aeabi_dmul>
 8012690:	2d1f      	cmp	r5, #31
 8012692:	4606      	mov	r6, r0
 8012694:	460f      	mov	r7, r1
 8012696:	dc0c      	bgt.n	80126b2 <__ieee754_rem_pio2+0x19a>
 8012698:	1e6a      	subs	r2, r5, #1
 801269a:	4b6a      	ldr	r3, [pc, #424]	; (8012844 <__ieee754_rem_pio2+0x32c>)
 801269c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126a0:	4543      	cmp	r3, r8
 80126a2:	d006      	beq.n	80126b2 <__ieee754_rem_pio2+0x19a>
 80126a4:	4632      	mov	r2, r6
 80126a6:	463b      	mov	r3, r7
 80126a8:	4650      	mov	r0, sl
 80126aa:	4659      	mov	r1, fp
 80126ac:	f7ed fe04 	bl	80002b8 <__aeabi_dsub>
 80126b0:	e00e      	b.n	80126d0 <__ieee754_rem_pio2+0x1b8>
 80126b2:	4632      	mov	r2, r6
 80126b4:	463b      	mov	r3, r7
 80126b6:	4650      	mov	r0, sl
 80126b8:	4659      	mov	r1, fp
 80126ba:	f7ed fdfd 	bl	80002b8 <__aeabi_dsub>
 80126be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80126c2:	9305      	str	r3, [sp, #20]
 80126c4:	9a05      	ldr	r2, [sp, #20]
 80126c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	2b10      	cmp	r3, #16
 80126ce:	dc02      	bgt.n	80126d6 <__ieee754_rem_pio2+0x1be>
 80126d0:	e9c4 0100 	strd	r0, r1, [r4]
 80126d4:	e039      	b.n	801274a <__ieee754_rem_pio2+0x232>
 80126d6:	a34c      	add	r3, pc, #304	; (adr r3, 8012808 <__ieee754_rem_pio2+0x2f0>)
 80126d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126e0:	f7ed ffa2 	bl	8000628 <__aeabi_dmul>
 80126e4:	4606      	mov	r6, r0
 80126e6:	460f      	mov	r7, r1
 80126e8:	4602      	mov	r2, r0
 80126ea:	460b      	mov	r3, r1
 80126ec:	4650      	mov	r0, sl
 80126ee:	4659      	mov	r1, fp
 80126f0:	f7ed fde2 	bl	80002b8 <__aeabi_dsub>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	4680      	mov	r8, r0
 80126fa:	4689      	mov	r9, r1
 80126fc:	4650      	mov	r0, sl
 80126fe:	4659      	mov	r1, fp
 8012700:	f7ed fdda 	bl	80002b8 <__aeabi_dsub>
 8012704:	4632      	mov	r2, r6
 8012706:	463b      	mov	r3, r7
 8012708:	f7ed fdd6 	bl	80002b8 <__aeabi_dsub>
 801270c:	a340      	add	r3, pc, #256	; (adr r3, 8012810 <__ieee754_rem_pio2+0x2f8>)
 801270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012712:	4606      	mov	r6, r0
 8012714:	460f      	mov	r7, r1
 8012716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801271a:	f7ed ff85 	bl	8000628 <__aeabi_dmul>
 801271e:	4632      	mov	r2, r6
 8012720:	463b      	mov	r3, r7
 8012722:	f7ed fdc9 	bl	80002b8 <__aeabi_dsub>
 8012726:	4602      	mov	r2, r0
 8012728:	460b      	mov	r3, r1
 801272a:	4606      	mov	r6, r0
 801272c:	460f      	mov	r7, r1
 801272e:	4640      	mov	r0, r8
 8012730:	4649      	mov	r1, r9
 8012732:	f7ed fdc1 	bl	80002b8 <__aeabi_dsub>
 8012736:	9a05      	ldr	r2, [sp, #20]
 8012738:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	2b31      	cmp	r3, #49	; 0x31
 8012740:	dc20      	bgt.n	8012784 <__ieee754_rem_pio2+0x26c>
 8012742:	e9c4 0100 	strd	r0, r1, [r4]
 8012746:	46c2      	mov	sl, r8
 8012748:	46cb      	mov	fp, r9
 801274a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801274e:	4650      	mov	r0, sl
 8012750:	4642      	mov	r2, r8
 8012752:	464b      	mov	r3, r9
 8012754:	4659      	mov	r1, fp
 8012756:	f7ed fdaf 	bl	80002b8 <__aeabi_dsub>
 801275a:	463b      	mov	r3, r7
 801275c:	4632      	mov	r2, r6
 801275e:	f7ed fdab 	bl	80002b8 <__aeabi_dsub>
 8012762:	9b04      	ldr	r3, [sp, #16]
 8012764:	2b00      	cmp	r3, #0
 8012766:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801276a:	f6bf af11 	bge.w	8012590 <__ieee754_rem_pio2+0x78>
 801276e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012772:	6063      	str	r3, [r4, #4]
 8012774:	f8c4 8000 	str.w	r8, [r4]
 8012778:	60a0      	str	r0, [r4, #8]
 801277a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801277e:	60e3      	str	r3, [r4, #12]
 8012780:	426d      	negs	r5, r5
 8012782:	e705      	b.n	8012590 <__ieee754_rem_pio2+0x78>
 8012784:	a326      	add	r3, pc, #152	; (adr r3, 8012820 <__ieee754_rem_pio2+0x308>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801278e:	f7ed ff4b 	bl	8000628 <__aeabi_dmul>
 8012792:	4606      	mov	r6, r0
 8012794:	460f      	mov	r7, r1
 8012796:	4602      	mov	r2, r0
 8012798:	460b      	mov	r3, r1
 801279a:	4640      	mov	r0, r8
 801279c:	4649      	mov	r1, r9
 801279e:	f7ed fd8b 	bl	80002b8 <__aeabi_dsub>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4682      	mov	sl, r0
 80127a8:	468b      	mov	fp, r1
 80127aa:	4640      	mov	r0, r8
 80127ac:	4649      	mov	r1, r9
 80127ae:	f7ed fd83 	bl	80002b8 <__aeabi_dsub>
 80127b2:	4632      	mov	r2, r6
 80127b4:	463b      	mov	r3, r7
 80127b6:	f7ed fd7f 	bl	80002b8 <__aeabi_dsub>
 80127ba:	a31b      	add	r3, pc, #108	; (adr r3, 8012828 <__ieee754_rem_pio2+0x310>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	4606      	mov	r6, r0
 80127c2:	460f      	mov	r7, r1
 80127c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127c8:	f7ed ff2e 	bl	8000628 <__aeabi_dmul>
 80127cc:	4632      	mov	r2, r6
 80127ce:	463b      	mov	r3, r7
 80127d0:	f7ed fd72 	bl	80002b8 <__aeabi_dsub>
 80127d4:	4606      	mov	r6, r0
 80127d6:	460f      	mov	r7, r1
 80127d8:	e764      	b.n	80126a4 <__ieee754_rem_pio2+0x18c>
 80127da:	4b1b      	ldr	r3, [pc, #108]	; (8012848 <__ieee754_rem_pio2+0x330>)
 80127dc:	4598      	cmp	r8, r3
 80127de:	dd35      	ble.n	801284c <__ieee754_rem_pio2+0x334>
 80127e0:	ee10 2a10 	vmov	r2, s0
 80127e4:	463b      	mov	r3, r7
 80127e6:	4630      	mov	r0, r6
 80127e8:	4639      	mov	r1, r7
 80127ea:	f7ed fd65 	bl	80002b8 <__aeabi_dsub>
 80127ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80127f2:	e9c4 0100 	strd	r0, r1, [r4]
 80127f6:	e6a1      	b.n	801253c <__ieee754_rem_pio2+0x24>
 80127f8:	54400000 	.word	0x54400000
 80127fc:	3ff921fb 	.word	0x3ff921fb
 8012800:	1a626331 	.word	0x1a626331
 8012804:	3dd0b461 	.word	0x3dd0b461
 8012808:	1a600000 	.word	0x1a600000
 801280c:	3dd0b461 	.word	0x3dd0b461
 8012810:	2e037073 	.word	0x2e037073
 8012814:	3ba3198a 	.word	0x3ba3198a
 8012818:	6dc9c883 	.word	0x6dc9c883
 801281c:	3fe45f30 	.word	0x3fe45f30
 8012820:	2e000000 	.word	0x2e000000
 8012824:	3ba3198a 	.word	0x3ba3198a
 8012828:	252049c1 	.word	0x252049c1
 801282c:	397b839a 	.word	0x397b839a
 8012830:	3fe921fb 	.word	0x3fe921fb
 8012834:	4002d97b 	.word	0x4002d97b
 8012838:	3ff921fb 	.word	0x3ff921fb
 801283c:	413921fb 	.word	0x413921fb
 8012840:	3fe00000 	.word	0x3fe00000
 8012844:	08017eac 	.word	0x08017eac
 8012848:	7fefffff 	.word	0x7fefffff
 801284c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012850:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012854:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012858:	4630      	mov	r0, r6
 801285a:	460f      	mov	r7, r1
 801285c:	f7ee f994 	bl	8000b88 <__aeabi_d2iz>
 8012860:	f7ed fe78 	bl	8000554 <__aeabi_i2d>
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	4630      	mov	r0, r6
 801286a:	4639      	mov	r1, r7
 801286c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012870:	f7ed fd22 	bl	80002b8 <__aeabi_dsub>
 8012874:	2200      	movs	r2, #0
 8012876:	4b1f      	ldr	r3, [pc, #124]	; (80128f4 <__ieee754_rem_pio2+0x3dc>)
 8012878:	f7ed fed6 	bl	8000628 <__aeabi_dmul>
 801287c:	460f      	mov	r7, r1
 801287e:	4606      	mov	r6, r0
 8012880:	f7ee f982 	bl	8000b88 <__aeabi_d2iz>
 8012884:	f7ed fe66 	bl	8000554 <__aeabi_i2d>
 8012888:	4602      	mov	r2, r0
 801288a:	460b      	mov	r3, r1
 801288c:	4630      	mov	r0, r6
 801288e:	4639      	mov	r1, r7
 8012890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012894:	f7ed fd10 	bl	80002b8 <__aeabi_dsub>
 8012898:	2200      	movs	r2, #0
 801289a:	4b16      	ldr	r3, [pc, #88]	; (80128f4 <__ieee754_rem_pio2+0x3dc>)
 801289c:	f7ed fec4 	bl	8000628 <__aeabi_dmul>
 80128a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80128a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80128a8:	f04f 0803 	mov.w	r8, #3
 80128ac:	2600      	movs	r6, #0
 80128ae:	2700      	movs	r7, #0
 80128b0:	4632      	mov	r2, r6
 80128b2:	463b      	mov	r3, r7
 80128b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80128b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80128bc:	f7ee f91c 	bl	8000af8 <__aeabi_dcmpeq>
 80128c0:	b9b0      	cbnz	r0, 80128f0 <__ieee754_rem_pio2+0x3d8>
 80128c2:	4b0d      	ldr	r3, [pc, #52]	; (80128f8 <__ieee754_rem_pio2+0x3e0>)
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	2302      	movs	r3, #2
 80128c8:	9300      	str	r3, [sp, #0]
 80128ca:	462a      	mov	r2, r5
 80128cc:	4643      	mov	r3, r8
 80128ce:	4621      	mov	r1, r4
 80128d0:	a806      	add	r0, sp, #24
 80128d2:	f000 f8dd 	bl	8012a90 <__kernel_rem_pio2>
 80128d6:	9b04      	ldr	r3, [sp, #16]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	4605      	mov	r5, r0
 80128dc:	f6bf ae58 	bge.w	8012590 <__ieee754_rem_pio2+0x78>
 80128e0:	6863      	ldr	r3, [r4, #4]
 80128e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80128e6:	6063      	str	r3, [r4, #4]
 80128e8:	68e3      	ldr	r3, [r4, #12]
 80128ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80128ee:	e746      	b.n	801277e <__ieee754_rem_pio2+0x266>
 80128f0:	46d0      	mov	r8, sl
 80128f2:	e7dd      	b.n	80128b0 <__ieee754_rem_pio2+0x398>
 80128f4:	41700000 	.word	0x41700000
 80128f8:	08017f2c 	.word	0x08017f2c
 80128fc:	00000000 	.word	0x00000000

08012900 <__kernel_cos>:
 8012900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012904:	ec59 8b10 	vmov	r8, r9, d0
 8012908:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801290c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012910:	ed2d 8b02 	vpush	{d8}
 8012914:	eeb0 8a41 	vmov.f32	s16, s2
 8012918:	eef0 8a61 	vmov.f32	s17, s3
 801291c:	da07      	bge.n	801292e <__kernel_cos+0x2e>
 801291e:	ee10 0a10 	vmov	r0, s0
 8012922:	4649      	mov	r1, r9
 8012924:	f7ee f930 	bl	8000b88 <__aeabi_d2iz>
 8012928:	2800      	cmp	r0, #0
 801292a:	f000 8089 	beq.w	8012a40 <__kernel_cos+0x140>
 801292e:	4642      	mov	r2, r8
 8012930:	464b      	mov	r3, r9
 8012932:	4640      	mov	r0, r8
 8012934:	4649      	mov	r1, r9
 8012936:	f7ed fe77 	bl	8000628 <__aeabi_dmul>
 801293a:	2200      	movs	r2, #0
 801293c:	4b4e      	ldr	r3, [pc, #312]	; (8012a78 <__kernel_cos+0x178>)
 801293e:	4604      	mov	r4, r0
 8012940:	460d      	mov	r5, r1
 8012942:	f7ed fe71 	bl	8000628 <__aeabi_dmul>
 8012946:	a340      	add	r3, pc, #256	; (adr r3, 8012a48 <__kernel_cos+0x148>)
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	4682      	mov	sl, r0
 801294e:	468b      	mov	fp, r1
 8012950:	4620      	mov	r0, r4
 8012952:	4629      	mov	r1, r5
 8012954:	f7ed fe68 	bl	8000628 <__aeabi_dmul>
 8012958:	a33d      	add	r3, pc, #244	; (adr r3, 8012a50 <__kernel_cos+0x150>)
 801295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295e:	f7ed fcad 	bl	80002bc <__adddf3>
 8012962:	4622      	mov	r2, r4
 8012964:	462b      	mov	r3, r5
 8012966:	f7ed fe5f 	bl	8000628 <__aeabi_dmul>
 801296a:	a33b      	add	r3, pc, #236	; (adr r3, 8012a58 <__kernel_cos+0x158>)
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	f7ed fca2 	bl	80002b8 <__aeabi_dsub>
 8012974:	4622      	mov	r2, r4
 8012976:	462b      	mov	r3, r5
 8012978:	f7ed fe56 	bl	8000628 <__aeabi_dmul>
 801297c:	a338      	add	r3, pc, #224	; (adr r3, 8012a60 <__kernel_cos+0x160>)
 801297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012982:	f7ed fc9b 	bl	80002bc <__adddf3>
 8012986:	4622      	mov	r2, r4
 8012988:	462b      	mov	r3, r5
 801298a:	f7ed fe4d 	bl	8000628 <__aeabi_dmul>
 801298e:	a336      	add	r3, pc, #216	; (adr r3, 8012a68 <__kernel_cos+0x168>)
 8012990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012994:	f7ed fc90 	bl	80002b8 <__aeabi_dsub>
 8012998:	4622      	mov	r2, r4
 801299a:	462b      	mov	r3, r5
 801299c:	f7ed fe44 	bl	8000628 <__aeabi_dmul>
 80129a0:	a333      	add	r3, pc, #204	; (adr r3, 8012a70 <__kernel_cos+0x170>)
 80129a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a6:	f7ed fc89 	bl	80002bc <__adddf3>
 80129aa:	4622      	mov	r2, r4
 80129ac:	462b      	mov	r3, r5
 80129ae:	f7ed fe3b 	bl	8000628 <__aeabi_dmul>
 80129b2:	4622      	mov	r2, r4
 80129b4:	462b      	mov	r3, r5
 80129b6:	f7ed fe37 	bl	8000628 <__aeabi_dmul>
 80129ba:	ec53 2b18 	vmov	r2, r3, d8
 80129be:	4604      	mov	r4, r0
 80129c0:	460d      	mov	r5, r1
 80129c2:	4640      	mov	r0, r8
 80129c4:	4649      	mov	r1, r9
 80129c6:	f7ed fe2f 	bl	8000628 <__aeabi_dmul>
 80129ca:	460b      	mov	r3, r1
 80129cc:	4602      	mov	r2, r0
 80129ce:	4629      	mov	r1, r5
 80129d0:	4620      	mov	r0, r4
 80129d2:	f7ed fc71 	bl	80002b8 <__aeabi_dsub>
 80129d6:	4b29      	ldr	r3, [pc, #164]	; (8012a7c <__kernel_cos+0x17c>)
 80129d8:	429e      	cmp	r6, r3
 80129da:	4680      	mov	r8, r0
 80129dc:	4689      	mov	r9, r1
 80129de:	dc11      	bgt.n	8012a04 <__kernel_cos+0x104>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	4650      	mov	r0, sl
 80129e6:	4659      	mov	r1, fp
 80129e8:	f7ed fc66 	bl	80002b8 <__aeabi_dsub>
 80129ec:	460b      	mov	r3, r1
 80129ee:	4924      	ldr	r1, [pc, #144]	; (8012a80 <__kernel_cos+0x180>)
 80129f0:	4602      	mov	r2, r0
 80129f2:	2000      	movs	r0, #0
 80129f4:	f7ed fc60 	bl	80002b8 <__aeabi_dsub>
 80129f8:	ecbd 8b02 	vpop	{d8}
 80129fc:	ec41 0b10 	vmov	d0, r0, r1
 8012a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a04:	4b1f      	ldr	r3, [pc, #124]	; (8012a84 <__kernel_cos+0x184>)
 8012a06:	491e      	ldr	r1, [pc, #120]	; (8012a80 <__kernel_cos+0x180>)
 8012a08:	429e      	cmp	r6, r3
 8012a0a:	bfcc      	ite	gt
 8012a0c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012a88 <__kernel_cos+0x188>)
 8012a0e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012a12:	2400      	movs	r4, #0
 8012a14:	4622      	mov	r2, r4
 8012a16:	462b      	mov	r3, r5
 8012a18:	2000      	movs	r0, #0
 8012a1a:	f7ed fc4d 	bl	80002b8 <__aeabi_dsub>
 8012a1e:	4622      	mov	r2, r4
 8012a20:	4606      	mov	r6, r0
 8012a22:	460f      	mov	r7, r1
 8012a24:	462b      	mov	r3, r5
 8012a26:	4650      	mov	r0, sl
 8012a28:	4659      	mov	r1, fp
 8012a2a:	f7ed fc45 	bl	80002b8 <__aeabi_dsub>
 8012a2e:	4642      	mov	r2, r8
 8012a30:	464b      	mov	r3, r9
 8012a32:	f7ed fc41 	bl	80002b8 <__aeabi_dsub>
 8012a36:	4602      	mov	r2, r0
 8012a38:	460b      	mov	r3, r1
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	4639      	mov	r1, r7
 8012a3e:	e7d9      	b.n	80129f4 <__kernel_cos+0xf4>
 8012a40:	2000      	movs	r0, #0
 8012a42:	490f      	ldr	r1, [pc, #60]	; (8012a80 <__kernel_cos+0x180>)
 8012a44:	e7d8      	b.n	80129f8 <__kernel_cos+0xf8>
 8012a46:	bf00      	nop
 8012a48:	be8838d4 	.word	0xbe8838d4
 8012a4c:	bda8fae9 	.word	0xbda8fae9
 8012a50:	bdb4b1c4 	.word	0xbdb4b1c4
 8012a54:	3e21ee9e 	.word	0x3e21ee9e
 8012a58:	809c52ad 	.word	0x809c52ad
 8012a5c:	3e927e4f 	.word	0x3e927e4f
 8012a60:	19cb1590 	.word	0x19cb1590
 8012a64:	3efa01a0 	.word	0x3efa01a0
 8012a68:	16c15177 	.word	0x16c15177
 8012a6c:	3f56c16c 	.word	0x3f56c16c
 8012a70:	5555554c 	.word	0x5555554c
 8012a74:	3fa55555 	.word	0x3fa55555
 8012a78:	3fe00000 	.word	0x3fe00000
 8012a7c:	3fd33332 	.word	0x3fd33332
 8012a80:	3ff00000 	.word	0x3ff00000
 8012a84:	3fe90000 	.word	0x3fe90000
 8012a88:	3fd20000 	.word	0x3fd20000
 8012a8c:	00000000 	.word	0x00000000

08012a90 <__kernel_rem_pio2>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	ed2d 8b02 	vpush	{d8}
 8012a98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012a9c:	1ed4      	subs	r4, r2, #3
 8012a9e:	9308      	str	r3, [sp, #32]
 8012aa0:	9101      	str	r1, [sp, #4]
 8012aa2:	4bc5      	ldr	r3, [pc, #788]	; (8012db8 <__kernel_rem_pio2+0x328>)
 8012aa4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012aa6:	9009      	str	r0, [sp, #36]	; 0x24
 8012aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012aac:	9304      	str	r3, [sp, #16]
 8012aae:	9b08      	ldr	r3, [sp, #32]
 8012ab0:	3b01      	subs	r3, #1
 8012ab2:	9307      	str	r3, [sp, #28]
 8012ab4:	2318      	movs	r3, #24
 8012ab6:	fb94 f4f3 	sdiv	r4, r4, r3
 8012aba:	f06f 0317 	mvn.w	r3, #23
 8012abe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012ac2:	fb04 3303 	mla	r3, r4, r3, r3
 8012ac6:	eb03 0a02 	add.w	sl, r3, r2
 8012aca:	9b04      	ldr	r3, [sp, #16]
 8012acc:	9a07      	ldr	r2, [sp, #28]
 8012ace:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012da8 <__kernel_rem_pio2+0x318>
 8012ad2:	eb03 0802 	add.w	r8, r3, r2
 8012ad6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012ad8:	1aa7      	subs	r7, r4, r2
 8012ada:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012ade:	ae22      	add	r6, sp, #136	; 0x88
 8012ae0:	2500      	movs	r5, #0
 8012ae2:	4545      	cmp	r5, r8
 8012ae4:	dd13      	ble.n	8012b0e <__kernel_rem_pio2+0x7e>
 8012ae6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012da8 <__kernel_rem_pio2+0x318>
 8012aea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012aee:	2600      	movs	r6, #0
 8012af0:	9b04      	ldr	r3, [sp, #16]
 8012af2:	429e      	cmp	r6, r3
 8012af4:	dc32      	bgt.n	8012b5c <__kernel_rem_pio2+0xcc>
 8012af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af8:	9302      	str	r3, [sp, #8]
 8012afa:	9b08      	ldr	r3, [sp, #32]
 8012afc:	199d      	adds	r5, r3, r6
 8012afe:	ab22      	add	r3, sp, #136	; 0x88
 8012b00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b04:	9306      	str	r3, [sp, #24]
 8012b06:	ec59 8b18 	vmov	r8, r9, d8
 8012b0a:	2700      	movs	r7, #0
 8012b0c:	e01f      	b.n	8012b4e <__kernel_rem_pio2+0xbe>
 8012b0e:	42ef      	cmn	r7, r5
 8012b10:	d407      	bmi.n	8012b22 <__kernel_rem_pio2+0x92>
 8012b12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012b16:	f7ed fd1d 	bl	8000554 <__aeabi_i2d>
 8012b1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012b1e:	3501      	adds	r5, #1
 8012b20:	e7df      	b.n	8012ae2 <__kernel_rem_pio2+0x52>
 8012b22:	ec51 0b18 	vmov	r0, r1, d8
 8012b26:	e7f8      	b.n	8012b1a <__kernel_rem_pio2+0x8a>
 8012b28:	9906      	ldr	r1, [sp, #24]
 8012b2a:	9d02      	ldr	r5, [sp, #8]
 8012b2c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012b30:	9106      	str	r1, [sp, #24]
 8012b32:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012b36:	9502      	str	r5, [sp, #8]
 8012b38:	f7ed fd76 	bl	8000628 <__aeabi_dmul>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4640      	mov	r0, r8
 8012b42:	4649      	mov	r1, r9
 8012b44:	f7ed fbba 	bl	80002bc <__adddf3>
 8012b48:	3701      	adds	r7, #1
 8012b4a:	4680      	mov	r8, r0
 8012b4c:	4689      	mov	r9, r1
 8012b4e:	9b07      	ldr	r3, [sp, #28]
 8012b50:	429f      	cmp	r7, r3
 8012b52:	dde9      	ble.n	8012b28 <__kernel_rem_pio2+0x98>
 8012b54:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012b58:	3601      	adds	r6, #1
 8012b5a:	e7c9      	b.n	8012af0 <__kernel_rem_pio2+0x60>
 8012b5c:	9b04      	ldr	r3, [sp, #16]
 8012b5e:	aa0e      	add	r2, sp, #56	; 0x38
 8012b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b64:	930c      	str	r3, [sp, #48]	; 0x30
 8012b66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012b68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012b6c:	9c04      	ldr	r4, [sp, #16]
 8012b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b70:	ab9a      	add	r3, sp, #616	; 0x268
 8012b72:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012b76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b7e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012b82:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012b86:	ab9a      	add	r3, sp, #616	; 0x268
 8012b88:	445b      	add	r3, fp
 8012b8a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012b8e:	2500      	movs	r5, #0
 8012b90:	1b63      	subs	r3, r4, r5
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	dc78      	bgt.n	8012c88 <__kernel_rem_pio2+0x1f8>
 8012b96:	4650      	mov	r0, sl
 8012b98:	ec49 8b10 	vmov	d0, r8, r9
 8012b9c:	f000 fc00 	bl	80133a0 <scalbn>
 8012ba0:	ec57 6b10 	vmov	r6, r7, d0
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012baa:	ee10 0a10 	vmov	r0, s0
 8012bae:	4639      	mov	r1, r7
 8012bb0:	f7ed fd3a 	bl	8000628 <__aeabi_dmul>
 8012bb4:	ec41 0b10 	vmov	d0, r0, r1
 8012bb8:	f000 fb6e 	bl	8013298 <floor>
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	ec51 0b10 	vmov	r0, r1, d0
 8012bc2:	4b7e      	ldr	r3, [pc, #504]	; (8012dbc <__kernel_rem_pio2+0x32c>)
 8012bc4:	f7ed fd30 	bl	8000628 <__aeabi_dmul>
 8012bc8:	4602      	mov	r2, r0
 8012bca:	460b      	mov	r3, r1
 8012bcc:	4630      	mov	r0, r6
 8012bce:	4639      	mov	r1, r7
 8012bd0:	f7ed fb72 	bl	80002b8 <__aeabi_dsub>
 8012bd4:	460f      	mov	r7, r1
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	f7ed ffd6 	bl	8000b88 <__aeabi_d2iz>
 8012bdc:	9006      	str	r0, [sp, #24]
 8012bde:	f7ed fcb9 	bl	8000554 <__aeabi_i2d>
 8012be2:	4602      	mov	r2, r0
 8012be4:	460b      	mov	r3, r1
 8012be6:	4630      	mov	r0, r6
 8012be8:	4639      	mov	r1, r7
 8012bea:	f7ed fb65 	bl	80002b8 <__aeabi_dsub>
 8012bee:	f1ba 0f00 	cmp.w	sl, #0
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	dd6c      	ble.n	8012cd2 <__kernel_rem_pio2+0x242>
 8012bf8:	1e62      	subs	r2, r4, #1
 8012bfa:	ab0e      	add	r3, sp, #56	; 0x38
 8012bfc:	f1ca 0118 	rsb	r1, sl, #24
 8012c00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c04:	9d06      	ldr	r5, [sp, #24]
 8012c06:	fa40 f301 	asr.w	r3, r0, r1
 8012c0a:	441d      	add	r5, r3
 8012c0c:	408b      	lsls	r3, r1
 8012c0e:	1ac0      	subs	r0, r0, r3
 8012c10:	ab0e      	add	r3, sp, #56	; 0x38
 8012c12:	9506      	str	r5, [sp, #24]
 8012c14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012c18:	f1ca 0317 	rsb	r3, sl, #23
 8012c1c:	fa40 f303 	asr.w	r3, r0, r3
 8012c20:	9302      	str	r3, [sp, #8]
 8012c22:	9b02      	ldr	r3, [sp, #8]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dd62      	ble.n	8012cee <__kernel_rem_pio2+0x25e>
 8012c28:	9b06      	ldr	r3, [sp, #24]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	9306      	str	r3, [sp, #24]
 8012c30:	4615      	mov	r5, r2
 8012c32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012c36:	4294      	cmp	r4, r2
 8012c38:	f300 8095 	bgt.w	8012d66 <__kernel_rem_pio2+0x2d6>
 8012c3c:	f1ba 0f00 	cmp.w	sl, #0
 8012c40:	dd07      	ble.n	8012c52 <__kernel_rem_pio2+0x1c2>
 8012c42:	f1ba 0f01 	cmp.w	sl, #1
 8012c46:	f000 80a2 	beq.w	8012d8e <__kernel_rem_pio2+0x2fe>
 8012c4a:	f1ba 0f02 	cmp.w	sl, #2
 8012c4e:	f000 80c1 	beq.w	8012dd4 <__kernel_rem_pio2+0x344>
 8012c52:	9b02      	ldr	r3, [sp, #8]
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d14a      	bne.n	8012cee <__kernel_rem_pio2+0x25e>
 8012c58:	4632      	mov	r2, r6
 8012c5a:	463b      	mov	r3, r7
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	4958      	ldr	r1, [pc, #352]	; (8012dc0 <__kernel_rem_pio2+0x330>)
 8012c60:	f7ed fb2a 	bl	80002b8 <__aeabi_dsub>
 8012c64:	4606      	mov	r6, r0
 8012c66:	460f      	mov	r7, r1
 8012c68:	2d00      	cmp	r5, #0
 8012c6a:	d040      	beq.n	8012cee <__kernel_rem_pio2+0x25e>
 8012c6c:	4650      	mov	r0, sl
 8012c6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012db0 <__kernel_rem_pio2+0x320>
 8012c72:	f000 fb95 	bl	80133a0 <scalbn>
 8012c76:	4630      	mov	r0, r6
 8012c78:	4639      	mov	r1, r7
 8012c7a:	ec53 2b10 	vmov	r2, r3, d0
 8012c7e:	f7ed fb1b 	bl	80002b8 <__aeabi_dsub>
 8012c82:	4606      	mov	r6, r0
 8012c84:	460f      	mov	r7, r1
 8012c86:	e032      	b.n	8012cee <__kernel_rem_pio2+0x25e>
 8012c88:	2200      	movs	r2, #0
 8012c8a:	4b4e      	ldr	r3, [pc, #312]	; (8012dc4 <__kernel_rem_pio2+0x334>)
 8012c8c:	4640      	mov	r0, r8
 8012c8e:	4649      	mov	r1, r9
 8012c90:	f7ed fcca 	bl	8000628 <__aeabi_dmul>
 8012c94:	f7ed ff78 	bl	8000b88 <__aeabi_d2iz>
 8012c98:	f7ed fc5c 	bl	8000554 <__aeabi_i2d>
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	4b4a      	ldr	r3, [pc, #296]	; (8012dc8 <__kernel_rem_pio2+0x338>)
 8012ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ca4:	f7ed fcc0 	bl	8000628 <__aeabi_dmul>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	460b      	mov	r3, r1
 8012cac:	4640      	mov	r0, r8
 8012cae:	4649      	mov	r1, r9
 8012cb0:	f7ed fb02 	bl	80002b8 <__aeabi_dsub>
 8012cb4:	f7ed ff68 	bl	8000b88 <__aeabi_d2iz>
 8012cb8:	ab0e      	add	r3, sp, #56	; 0x38
 8012cba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012cbe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc6:	f7ed faf9 	bl	80002bc <__adddf3>
 8012cca:	3501      	adds	r5, #1
 8012ccc:	4680      	mov	r8, r0
 8012cce:	4689      	mov	r9, r1
 8012cd0:	e75e      	b.n	8012b90 <__kernel_rem_pio2+0x100>
 8012cd2:	d105      	bne.n	8012ce0 <__kernel_rem_pio2+0x250>
 8012cd4:	1e63      	subs	r3, r4, #1
 8012cd6:	aa0e      	add	r2, sp, #56	; 0x38
 8012cd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012cdc:	15c3      	asrs	r3, r0, #23
 8012cde:	e79f      	b.n	8012c20 <__kernel_rem_pio2+0x190>
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	4b3a      	ldr	r3, [pc, #232]	; (8012dcc <__kernel_rem_pio2+0x33c>)
 8012ce4:	f7ed ff26 	bl	8000b34 <__aeabi_dcmpge>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d139      	bne.n	8012d60 <__kernel_rem_pio2+0x2d0>
 8012cec:	9002      	str	r0, [sp, #8]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	f7ed feff 	bl	8000af8 <__aeabi_dcmpeq>
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	f000 80c7 	beq.w	8012e8e <__kernel_rem_pio2+0x3fe>
 8012d00:	1e65      	subs	r5, r4, #1
 8012d02:	462b      	mov	r3, r5
 8012d04:	2200      	movs	r2, #0
 8012d06:	9904      	ldr	r1, [sp, #16]
 8012d08:	428b      	cmp	r3, r1
 8012d0a:	da6a      	bge.n	8012de2 <__kernel_rem_pio2+0x352>
 8012d0c:	2a00      	cmp	r2, #0
 8012d0e:	f000 8088 	beq.w	8012e22 <__kernel_rem_pio2+0x392>
 8012d12:	ab0e      	add	r3, sp, #56	; 0x38
 8012d14:	f1aa 0a18 	sub.w	sl, sl, #24
 8012d18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f000 80b4 	beq.w	8012e8a <__kernel_rem_pio2+0x3fa>
 8012d22:	4650      	mov	r0, sl
 8012d24:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012db0 <__kernel_rem_pio2+0x320>
 8012d28:	f000 fb3a 	bl	80133a0 <scalbn>
 8012d2c:	00ec      	lsls	r4, r5, #3
 8012d2e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012d30:	191e      	adds	r6, r3, r4
 8012d32:	ec59 8b10 	vmov	r8, r9, d0
 8012d36:	f106 0a08 	add.w	sl, r6, #8
 8012d3a:	462f      	mov	r7, r5
 8012d3c:	2f00      	cmp	r7, #0
 8012d3e:	f280 80df 	bge.w	8012f00 <__kernel_rem_pio2+0x470>
 8012d42:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012da8 <__kernel_rem_pio2+0x318>
 8012d46:	f04f 0a00 	mov.w	sl, #0
 8012d4a:	eba5 030a 	sub.w	r3, r5, sl
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f2c0 810a 	blt.w	8012f68 <__kernel_rem_pio2+0x4d8>
 8012d54:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012dd0 <__kernel_rem_pio2+0x340>
 8012d58:	ec59 8b18 	vmov	r8, r9, d8
 8012d5c:	2700      	movs	r7, #0
 8012d5e:	e0f5      	b.n	8012f4c <__kernel_rem_pio2+0x4bc>
 8012d60:	2302      	movs	r3, #2
 8012d62:	9302      	str	r3, [sp, #8]
 8012d64:	e760      	b.n	8012c28 <__kernel_rem_pio2+0x198>
 8012d66:	ab0e      	add	r3, sp, #56	; 0x38
 8012d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d6c:	b94d      	cbnz	r5, 8012d82 <__kernel_rem_pio2+0x2f2>
 8012d6e:	b12b      	cbz	r3, 8012d7c <__kernel_rem_pio2+0x2ec>
 8012d70:	a80e      	add	r0, sp, #56	; 0x38
 8012d72:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012d76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	3201      	adds	r2, #1
 8012d7e:	461d      	mov	r5, r3
 8012d80:	e759      	b.n	8012c36 <__kernel_rem_pio2+0x1a6>
 8012d82:	a80e      	add	r0, sp, #56	; 0x38
 8012d84:	1acb      	subs	r3, r1, r3
 8012d86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012d8a:	462b      	mov	r3, r5
 8012d8c:	e7f6      	b.n	8012d7c <__kernel_rem_pio2+0x2ec>
 8012d8e:	1e62      	subs	r2, r4, #1
 8012d90:	ab0e      	add	r3, sp, #56	; 0x38
 8012d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012d9a:	a90e      	add	r1, sp, #56	; 0x38
 8012d9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012da0:	e757      	b.n	8012c52 <__kernel_rem_pio2+0x1c2>
 8012da2:	bf00      	nop
 8012da4:	f3af 8000 	nop.w
	...
 8012db4:	3ff00000 	.word	0x3ff00000
 8012db8:	08018078 	.word	0x08018078
 8012dbc:	40200000 	.word	0x40200000
 8012dc0:	3ff00000 	.word	0x3ff00000
 8012dc4:	3e700000 	.word	0x3e700000
 8012dc8:	41700000 	.word	0x41700000
 8012dcc:	3fe00000 	.word	0x3fe00000
 8012dd0:	08018038 	.word	0x08018038
 8012dd4:	1e62      	subs	r2, r4, #1
 8012dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8012dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ddc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012de0:	e7db      	b.n	8012d9a <__kernel_rem_pio2+0x30a>
 8012de2:	a90e      	add	r1, sp, #56	; 0x38
 8012de4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012de8:	3b01      	subs	r3, #1
 8012dea:	430a      	orrs	r2, r1
 8012dec:	e78b      	b.n	8012d06 <__kernel_rem_pio2+0x276>
 8012dee:	3301      	adds	r3, #1
 8012df0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012df4:	2900      	cmp	r1, #0
 8012df6:	d0fa      	beq.n	8012dee <__kernel_rem_pio2+0x35e>
 8012df8:	9a08      	ldr	r2, [sp, #32]
 8012dfa:	4422      	add	r2, r4
 8012dfc:	00d2      	lsls	r2, r2, #3
 8012dfe:	a922      	add	r1, sp, #136	; 0x88
 8012e00:	18e3      	adds	r3, r4, r3
 8012e02:	9206      	str	r2, [sp, #24]
 8012e04:	440a      	add	r2, r1
 8012e06:	9302      	str	r3, [sp, #8]
 8012e08:	f10b 0108 	add.w	r1, fp, #8
 8012e0c:	f102 0308 	add.w	r3, r2, #8
 8012e10:	1c66      	adds	r6, r4, #1
 8012e12:	910a      	str	r1, [sp, #40]	; 0x28
 8012e14:	2500      	movs	r5, #0
 8012e16:	930d      	str	r3, [sp, #52]	; 0x34
 8012e18:	9b02      	ldr	r3, [sp, #8]
 8012e1a:	42b3      	cmp	r3, r6
 8012e1c:	da04      	bge.n	8012e28 <__kernel_rem_pio2+0x398>
 8012e1e:	461c      	mov	r4, r3
 8012e20:	e6a6      	b.n	8012b70 <__kernel_rem_pio2+0xe0>
 8012e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e24:	2301      	movs	r3, #1
 8012e26:	e7e3      	b.n	8012df0 <__kernel_rem_pio2+0x360>
 8012e28:	9b06      	ldr	r3, [sp, #24]
 8012e2a:	18ef      	adds	r7, r5, r3
 8012e2c:	ab22      	add	r3, sp, #136	; 0x88
 8012e2e:	441f      	add	r7, r3
 8012e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012e36:	f7ed fb8d 	bl	8000554 <__aeabi_i2d>
 8012e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e3c:	461c      	mov	r4, r3
 8012e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e40:	e9c7 0100 	strd	r0, r1, [r7]
 8012e44:	eb03 0b05 	add.w	fp, r3, r5
 8012e48:	2700      	movs	r7, #0
 8012e4a:	f04f 0800 	mov.w	r8, #0
 8012e4e:	f04f 0900 	mov.w	r9, #0
 8012e52:	9b07      	ldr	r3, [sp, #28]
 8012e54:	429f      	cmp	r7, r3
 8012e56:	dd08      	ble.n	8012e6a <__kernel_rem_pio2+0x3da>
 8012e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e5a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012e5c:	18eb      	adds	r3, r5, r3
 8012e5e:	4413      	add	r3, r2
 8012e60:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012e64:	3601      	adds	r6, #1
 8012e66:	3508      	adds	r5, #8
 8012e68:	e7d6      	b.n	8012e18 <__kernel_rem_pio2+0x388>
 8012e6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012e6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012e72:	f7ed fbd9 	bl	8000628 <__aeabi_dmul>
 8012e76:	4602      	mov	r2, r0
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4640      	mov	r0, r8
 8012e7c:	4649      	mov	r1, r9
 8012e7e:	f7ed fa1d 	bl	80002bc <__adddf3>
 8012e82:	3701      	adds	r7, #1
 8012e84:	4680      	mov	r8, r0
 8012e86:	4689      	mov	r9, r1
 8012e88:	e7e3      	b.n	8012e52 <__kernel_rem_pio2+0x3c2>
 8012e8a:	3d01      	subs	r5, #1
 8012e8c:	e741      	b.n	8012d12 <__kernel_rem_pio2+0x282>
 8012e8e:	f1ca 0000 	rsb	r0, sl, #0
 8012e92:	ec47 6b10 	vmov	d0, r6, r7
 8012e96:	f000 fa83 	bl	80133a0 <scalbn>
 8012e9a:	ec57 6b10 	vmov	r6, r7, d0
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	4b99      	ldr	r3, [pc, #612]	; (8013108 <__kernel_rem_pio2+0x678>)
 8012ea2:	ee10 0a10 	vmov	r0, s0
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	f7ed fe44 	bl	8000b34 <__aeabi_dcmpge>
 8012eac:	b1f8      	cbz	r0, 8012eee <__kernel_rem_pio2+0x45e>
 8012eae:	2200      	movs	r2, #0
 8012eb0:	4b96      	ldr	r3, [pc, #600]	; (801310c <__kernel_rem_pio2+0x67c>)
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	4639      	mov	r1, r7
 8012eb6:	f7ed fbb7 	bl	8000628 <__aeabi_dmul>
 8012eba:	f7ed fe65 	bl	8000b88 <__aeabi_d2iz>
 8012ebe:	4680      	mov	r8, r0
 8012ec0:	f7ed fb48 	bl	8000554 <__aeabi_i2d>
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	4b90      	ldr	r3, [pc, #576]	; (8013108 <__kernel_rem_pio2+0x678>)
 8012ec8:	f7ed fbae 	bl	8000628 <__aeabi_dmul>
 8012ecc:	460b      	mov	r3, r1
 8012ece:	4602      	mov	r2, r0
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f7ed f9f0 	bl	80002b8 <__aeabi_dsub>
 8012ed8:	f7ed fe56 	bl	8000b88 <__aeabi_d2iz>
 8012edc:	1c65      	adds	r5, r4, #1
 8012ede:	ab0e      	add	r3, sp, #56	; 0x38
 8012ee0:	f10a 0a18 	add.w	sl, sl, #24
 8012ee4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ee8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012eec:	e719      	b.n	8012d22 <__kernel_rem_pio2+0x292>
 8012eee:	4630      	mov	r0, r6
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	f7ed fe49 	bl	8000b88 <__aeabi_d2iz>
 8012ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8012ef8:	4625      	mov	r5, r4
 8012efa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012efe:	e710      	b.n	8012d22 <__kernel_rem_pio2+0x292>
 8012f00:	ab0e      	add	r3, sp, #56	; 0x38
 8012f02:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012f06:	f7ed fb25 	bl	8000554 <__aeabi_i2d>
 8012f0a:	4642      	mov	r2, r8
 8012f0c:	464b      	mov	r3, r9
 8012f0e:	f7ed fb8b 	bl	8000628 <__aeabi_dmul>
 8012f12:	2200      	movs	r2, #0
 8012f14:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012f18:	4b7c      	ldr	r3, [pc, #496]	; (801310c <__kernel_rem_pio2+0x67c>)
 8012f1a:	4640      	mov	r0, r8
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	f7ed fb83 	bl	8000628 <__aeabi_dmul>
 8012f22:	3f01      	subs	r7, #1
 8012f24:	4680      	mov	r8, r0
 8012f26:	4689      	mov	r9, r1
 8012f28:	e708      	b.n	8012d3c <__kernel_rem_pio2+0x2ac>
 8012f2a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f32:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012f36:	f7ed fb77 	bl	8000628 <__aeabi_dmul>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	4640      	mov	r0, r8
 8012f40:	4649      	mov	r1, r9
 8012f42:	f7ed f9bb 	bl	80002bc <__adddf3>
 8012f46:	3701      	adds	r7, #1
 8012f48:	4680      	mov	r8, r0
 8012f4a:	4689      	mov	r9, r1
 8012f4c:	9b04      	ldr	r3, [sp, #16]
 8012f4e:	429f      	cmp	r7, r3
 8012f50:	dc01      	bgt.n	8012f56 <__kernel_rem_pio2+0x4c6>
 8012f52:	45ba      	cmp	sl, r7
 8012f54:	dae9      	bge.n	8012f2a <__kernel_rem_pio2+0x49a>
 8012f56:	ab4a      	add	r3, sp, #296	; 0x128
 8012f58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f5c:	e9c3 8900 	strd	r8, r9, [r3]
 8012f60:	f10a 0a01 	add.w	sl, sl, #1
 8012f64:	3e08      	subs	r6, #8
 8012f66:	e6f0      	b.n	8012d4a <__kernel_rem_pio2+0x2ba>
 8012f68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d85b      	bhi.n	8013026 <__kernel_rem_pio2+0x596>
 8012f6e:	e8df f003 	tbb	[pc, r3]
 8012f72:	264a      	.short	0x264a
 8012f74:	0226      	.short	0x0226
 8012f76:	ab9a      	add	r3, sp, #616	; 0x268
 8012f78:	441c      	add	r4, r3
 8012f7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012f7e:	46a2      	mov	sl, r4
 8012f80:	46ab      	mov	fp, r5
 8012f82:	f1bb 0f00 	cmp.w	fp, #0
 8012f86:	dc6c      	bgt.n	8013062 <__kernel_rem_pio2+0x5d2>
 8012f88:	46a2      	mov	sl, r4
 8012f8a:	46ab      	mov	fp, r5
 8012f8c:	f1bb 0f01 	cmp.w	fp, #1
 8012f90:	f300 8086 	bgt.w	80130a0 <__kernel_rem_pio2+0x610>
 8012f94:	2000      	movs	r0, #0
 8012f96:	2100      	movs	r1, #0
 8012f98:	2d01      	cmp	r5, #1
 8012f9a:	f300 80a0 	bgt.w	80130de <__kernel_rem_pio2+0x64e>
 8012f9e:	9b02      	ldr	r3, [sp, #8]
 8012fa0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012fa4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	f040 809e 	bne.w	80130ea <__kernel_rem_pio2+0x65a>
 8012fae:	9b01      	ldr	r3, [sp, #4]
 8012fb0:	e9c3 7800 	strd	r7, r8, [r3]
 8012fb4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012fb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012fbc:	e033      	b.n	8013026 <__kernel_rem_pio2+0x596>
 8012fbe:	3408      	adds	r4, #8
 8012fc0:	ab4a      	add	r3, sp, #296	; 0x128
 8012fc2:	441c      	add	r4, r3
 8012fc4:	462e      	mov	r6, r5
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	2100      	movs	r1, #0
 8012fca:	2e00      	cmp	r6, #0
 8012fcc:	da3a      	bge.n	8013044 <__kernel_rem_pio2+0x5b4>
 8012fce:	9b02      	ldr	r3, [sp, #8]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d03d      	beq.n	8013050 <__kernel_rem_pio2+0x5c0>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fda:	9c01      	ldr	r4, [sp, #4]
 8012fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012fe8:	f7ed f966 	bl	80002b8 <__aeabi_dsub>
 8012fec:	ae4c      	add	r6, sp, #304	; 0x130
 8012fee:	2401      	movs	r4, #1
 8012ff0:	42a5      	cmp	r5, r4
 8012ff2:	da30      	bge.n	8013056 <__kernel_rem_pio2+0x5c6>
 8012ff4:	9b02      	ldr	r3, [sp, #8]
 8012ff6:	b113      	cbz	r3, 8012ffe <__kernel_rem_pio2+0x56e>
 8012ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	9b01      	ldr	r3, [sp, #4]
 8013000:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013004:	e00f      	b.n	8013026 <__kernel_rem_pio2+0x596>
 8013006:	ab9a      	add	r3, sp, #616	; 0x268
 8013008:	441c      	add	r4, r3
 801300a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801300e:	2000      	movs	r0, #0
 8013010:	2100      	movs	r1, #0
 8013012:	2d00      	cmp	r5, #0
 8013014:	da10      	bge.n	8013038 <__kernel_rem_pio2+0x5a8>
 8013016:	9b02      	ldr	r3, [sp, #8]
 8013018:	b113      	cbz	r3, 8013020 <__kernel_rem_pio2+0x590>
 801301a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801301e:	4619      	mov	r1, r3
 8013020:	9b01      	ldr	r3, [sp, #4]
 8013022:	e9c3 0100 	strd	r0, r1, [r3]
 8013026:	9b06      	ldr	r3, [sp, #24]
 8013028:	f003 0007 	and.w	r0, r3, #7
 801302c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013030:	ecbd 8b02 	vpop	{d8}
 8013034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013038:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801303c:	f7ed f93e 	bl	80002bc <__adddf3>
 8013040:	3d01      	subs	r5, #1
 8013042:	e7e6      	b.n	8013012 <__kernel_rem_pio2+0x582>
 8013044:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013048:	f7ed f938 	bl	80002bc <__adddf3>
 801304c:	3e01      	subs	r6, #1
 801304e:	e7bc      	b.n	8012fca <__kernel_rem_pio2+0x53a>
 8013050:	4602      	mov	r2, r0
 8013052:	460b      	mov	r3, r1
 8013054:	e7c1      	b.n	8012fda <__kernel_rem_pio2+0x54a>
 8013056:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801305a:	f7ed f92f 	bl	80002bc <__adddf3>
 801305e:	3401      	adds	r4, #1
 8013060:	e7c6      	b.n	8012ff0 <__kernel_rem_pio2+0x560>
 8013062:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013066:	ed3a 7b02 	vldmdb	sl!, {d7}
 801306a:	4640      	mov	r0, r8
 801306c:	ec53 2b17 	vmov	r2, r3, d7
 8013070:	4649      	mov	r1, r9
 8013072:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013076:	f7ed f921 	bl	80002bc <__adddf3>
 801307a:	4602      	mov	r2, r0
 801307c:	460b      	mov	r3, r1
 801307e:	4606      	mov	r6, r0
 8013080:	460f      	mov	r7, r1
 8013082:	4640      	mov	r0, r8
 8013084:	4649      	mov	r1, r9
 8013086:	f7ed f917 	bl	80002b8 <__aeabi_dsub>
 801308a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801308e:	f7ed f915 	bl	80002bc <__adddf3>
 8013092:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013096:	e9ca 0100 	strd	r0, r1, [sl]
 801309a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801309e:	e770      	b.n	8012f82 <__kernel_rem_pio2+0x4f2>
 80130a0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80130a4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80130a8:	4630      	mov	r0, r6
 80130aa:	ec53 2b17 	vmov	r2, r3, d7
 80130ae:	4639      	mov	r1, r7
 80130b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80130b4:	f7ed f902 	bl	80002bc <__adddf3>
 80130b8:	4602      	mov	r2, r0
 80130ba:	460b      	mov	r3, r1
 80130bc:	4680      	mov	r8, r0
 80130be:	4689      	mov	r9, r1
 80130c0:	4630      	mov	r0, r6
 80130c2:	4639      	mov	r1, r7
 80130c4:	f7ed f8f8 	bl	80002b8 <__aeabi_dsub>
 80130c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130cc:	f7ed f8f6 	bl	80002bc <__adddf3>
 80130d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130d4:	e9ca 0100 	strd	r0, r1, [sl]
 80130d8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80130dc:	e756      	b.n	8012f8c <__kernel_rem_pio2+0x4fc>
 80130de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80130e2:	f7ed f8eb 	bl	80002bc <__adddf3>
 80130e6:	3d01      	subs	r5, #1
 80130e8:	e756      	b.n	8012f98 <__kernel_rem_pio2+0x508>
 80130ea:	9b01      	ldr	r3, [sp, #4]
 80130ec:	9a01      	ldr	r2, [sp, #4]
 80130ee:	601f      	str	r7, [r3, #0]
 80130f0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80130f4:	605c      	str	r4, [r3, #4]
 80130f6:	609d      	str	r5, [r3, #8]
 80130f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80130fc:	60d3      	str	r3, [r2, #12]
 80130fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013102:	6110      	str	r0, [r2, #16]
 8013104:	6153      	str	r3, [r2, #20]
 8013106:	e78e      	b.n	8013026 <__kernel_rem_pio2+0x596>
 8013108:	41700000 	.word	0x41700000
 801310c:	3e700000 	.word	0x3e700000

08013110 <__kernel_sin>:
 8013110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013114:	ec55 4b10 	vmov	r4, r5, d0
 8013118:	b085      	sub	sp, #20
 801311a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801311e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013122:	ed8d 1b00 	vstr	d1, [sp]
 8013126:	9002      	str	r0, [sp, #8]
 8013128:	da06      	bge.n	8013138 <__kernel_sin+0x28>
 801312a:	ee10 0a10 	vmov	r0, s0
 801312e:	4629      	mov	r1, r5
 8013130:	f7ed fd2a 	bl	8000b88 <__aeabi_d2iz>
 8013134:	2800      	cmp	r0, #0
 8013136:	d051      	beq.n	80131dc <__kernel_sin+0xcc>
 8013138:	4622      	mov	r2, r4
 801313a:	462b      	mov	r3, r5
 801313c:	4620      	mov	r0, r4
 801313e:	4629      	mov	r1, r5
 8013140:	f7ed fa72 	bl	8000628 <__aeabi_dmul>
 8013144:	4682      	mov	sl, r0
 8013146:	468b      	mov	fp, r1
 8013148:	4602      	mov	r2, r0
 801314a:	460b      	mov	r3, r1
 801314c:	4620      	mov	r0, r4
 801314e:	4629      	mov	r1, r5
 8013150:	f7ed fa6a 	bl	8000628 <__aeabi_dmul>
 8013154:	a341      	add	r3, pc, #260	; (adr r3, 801325c <__kernel_sin+0x14c>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	4680      	mov	r8, r0
 801315c:	4689      	mov	r9, r1
 801315e:	4650      	mov	r0, sl
 8013160:	4659      	mov	r1, fp
 8013162:	f7ed fa61 	bl	8000628 <__aeabi_dmul>
 8013166:	a33f      	add	r3, pc, #252	; (adr r3, 8013264 <__kernel_sin+0x154>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	f7ed f8a4 	bl	80002b8 <__aeabi_dsub>
 8013170:	4652      	mov	r2, sl
 8013172:	465b      	mov	r3, fp
 8013174:	f7ed fa58 	bl	8000628 <__aeabi_dmul>
 8013178:	a33c      	add	r3, pc, #240	; (adr r3, 801326c <__kernel_sin+0x15c>)
 801317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317e:	f7ed f89d 	bl	80002bc <__adddf3>
 8013182:	4652      	mov	r2, sl
 8013184:	465b      	mov	r3, fp
 8013186:	f7ed fa4f 	bl	8000628 <__aeabi_dmul>
 801318a:	a33a      	add	r3, pc, #232	; (adr r3, 8013274 <__kernel_sin+0x164>)
 801318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013190:	f7ed f892 	bl	80002b8 <__aeabi_dsub>
 8013194:	4652      	mov	r2, sl
 8013196:	465b      	mov	r3, fp
 8013198:	f7ed fa46 	bl	8000628 <__aeabi_dmul>
 801319c:	a337      	add	r3, pc, #220	; (adr r3, 801327c <__kernel_sin+0x16c>)
 801319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a2:	f7ed f88b 	bl	80002bc <__adddf3>
 80131a6:	9b02      	ldr	r3, [sp, #8]
 80131a8:	4606      	mov	r6, r0
 80131aa:	460f      	mov	r7, r1
 80131ac:	b9db      	cbnz	r3, 80131e6 <__kernel_sin+0xd6>
 80131ae:	4602      	mov	r2, r0
 80131b0:	460b      	mov	r3, r1
 80131b2:	4650      	mov	r0, sl
 80131b4:	4659      	mov	r1, fp
 80131b6:	f7ed fa37 	bl	8000628 <__aeabi_dmul>
 80131ba:	a325      	add	r3, pc, #148	; (adr r3, 8013250 <__kernel_sin+0x140>)
 80131bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c0:	f7ed f87a 	bl	80002b8 <__aeabi_dsub>
 80131c4:	4642      	mov	r2, r8
 80131c6:	464b      	mov	r3, r9
 80131c8:	f7ed fa2e 	bl	8000628 <__aeabi_dmul>
 80131cc:	4602      	mov	r2, r0
 80131ce:	460b      	mov	r3, r1
 80131d0:	4620      	mov	r0, r4
 80131d2:	4629      	mov	r1, r5
 80131d4:	f7ed f872 	bl	80002bc <__adddf3>
 80131d8:	4604      	mov	r4, r0
 80131da:	460d      	mov	r5, r1
 80131dc:	ec45 4b10 	vmov	d0, r4, r5
 80131e0:	b005      	add	sp, #20
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	2200      	movs	r2, #0
 80131e8:	4b1b      	ldr	r3, [pc, #108]	; (8013258 <__kernel_sin+0x148>)
 80131ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ee:	f7ed fa1b 	bl	8000628 <__aeabi_dmul>
 80131f2:	4632      	mov	r2, r6
 80131f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131f8:	463b      	mov	r3, r7
 80131fa:	4640      	mov	r0, r8
 80131fc:	4649      	mov	r1, r9
 80131fe:	f7ed fa13 	bl	8000628 <__aeabi_dmul>
 8013202:	4602      	mov	r2, r0
 8013204:	460b      	mov	r3, r1
 8013206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801320a:	f7ed f855 	bl	80002b8 <__aeabi_dsub>
 801320e:	4652      	mov	r2, sl
 8013210:	465b      	mov	r3, fp
 8013212:	f7ed fa09 	bl	8000628 <__aeabi_dmul>
 8013216:	e9dd 2300 	ldrd	r2, r3, [sp]
 801321a:	f7ed f84d 	bl	80002b8 <__aeabi_dsub>
 801321e:	a30c      	add	r3, pc, #48	; (adr r3, 8013250 <__kernel_sin+0x140>)
 8013220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013224:	4606      	mov	r6, r0
 8013226:	460f      	mov	r7, r1
 8013228:	4640      	mov	r0, r8
 801322a:	4649      	mov	r1, r9
 801322c:	f7ed f9fc 	bl	8000628 <__aeabi_dmul>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	4630      	mov	r0, r6
 8013236:	4639      	mov	r1, r7
 8013238:	f7ed f840 	bl	80002bc <__adddf3>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4620      	mov	r0, r4
 8013242:	4629      	mov	r1, r5
 8013244:	f7ed f838 	bl	80002b8 <__aeabi_dsub>
 8013248:	e7c6      	b.n	80131d8 <__kernel_sin+0xc8>
 801324a:	bf00      	nop
 801324c:	f3af 8000 	nop.w
 8013250:	55555549 	.word	0x55555549
 8013254:	3fc55555 	.word	0x3fc55555
 8013258:	3fe00000 	.word	0x3fe00000
 801325c:	5acfd57c 	.word	0x5acfd57c
 8013260:	3de5d93a 	.word	0x3de5d93a
 8013264:	8a2b9ceb 	.word	0x8a2b9ceb
 8013268:	3e5ae5e6 	.word	0x3e5ae5e6
 801326c:	57b1fe7d 	.word	0x57b1fe7d
 8013270:	3ec71de3 	.word	0x3ec71de3
 8013274:	19c161d5 	.word	0x19c161d5
 8013278:	3f2a01a0 	.word	0x3f2a01a0
 801327c:	1110f8a6 	.word	0x1110f8a6
 8013280:	3f811111 	.word	0x3f811111

08013284 <fabs>:
 8013284:	ec51 0b10 	vmov	r0, r1, d0
 8013288:	ee10 2a10 	vmov	r2, s0
 801328c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013290:	ec43 2b10 	vmov	d0, r2, r3
 8013294:	4770      	bx	lr
	...

08013298 <floor>:
 8013298:	ec51 0b10 	vmov	r0, r1, d0
 801329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80132a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80132a8:	2e13      	cmp	r6, #19
 80132aa:	460c      	mov	r4, r1
 80132ac:	ee10 5a10 	vmov	r5, s0
 80132b0:	4680      	mov	r8, r0
 80132b2:	dc34      	bgt.n	801331e <floor+0x86>
 80132b4:	2e00      	cmp	r6, #0
 80132b6:	da16      	bge.n	80132e6 <floor+0x4e>
 80132b8:	a335      	add	r3, pc, #212	; (adr r3, 8013390 <floor+0xf8>)
 80132ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132be:	f7ec fffd 	bl	80002bc <__adddf3>
 80132c2:	2200      	movs	r2, #0
 80132c4:	2300      	movs	r3, #0
 80132c6:	f7ed fc3f 	bl	8000b48 <__aeabi_dcmpgt>
 80132ca:	b148      	cbz	r0, 80132e0 <floor+0x48>
 80132cc:	2c00      	cmp	r4, #0
 80132ce:	da59      	bge.n	8013384 <floor+0xec>
 80132d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80132d4:	4a30      	ldr	r2, [pc, #192]	; (8013398 <floor+0x100>)
 80132d6:	432b      	orrs	r3, r5
 80132d8:	2500      	movs	r5, #0
 80132da:	42ab      	cmp	r3, r5
 80132dc:	bf18      	it	ne
 80132de:	4614      	movne	r4, r2
 80132e0:	4621      	mov	r1, r4
 80132e2:	4628      	mov	r0, r5
 80132e4:	e025      	b.n	8013332 <floor+0x9a>
 80132e6:	4f2d      	ldr	r7, [pc, #180]	; (801339c <floor+0x104>)
 80132e8:	4137      	asrs	r7, r6
 80132ea:	ea01 0307 	and.w	r3, r1, r7
 80132ee:	4303      	orrs	r3, r0
 80132f0:	d01f      	beq.n	8013332 <floor+0x9a>
 80132f2:	a327      	add	r3, pc, #156	; (adr r3, 8013390 <floor+0xf8>)
 80132f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f8:	f7ec ffe0 	bl	80002bc <__adddf3>
 80132fc:	2200      	movs	r2, #0
 80132fe:	2300      	movs	r3, #0
 8013300:	f7ed fc22 	bl	8000b48 <__aeabi_dcmpgt>
 8013304:	2800      	cmp	r0, #0
 8013306:	d0eb      	beq.n	80132e0 <floor+0x48>
 8013308:	2c00      	cmp	r4, #0
 801330a:	bfbe      	ittt	lt
 801330c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013310:	fa43 f606 	asrlt.w	r6, r3, r6
 8013314:	19a4      	addlt	r4, r4, r6
 8013316:	ea24 0407 	bic.w	r4, r4, r7
 801331a:	2500      	movs	r5, #0
 801331c:	e7e0      	b.n	80132e0 <floor+0x48>
 801331e:	2e33      	cmp	r6, #51	; 0x33
 8013320:	dd0b      	ble.n	801333a <floor+0xa2>
 8013322:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013326:	d104      	bne.n	8013332 <floor+0x9a>
 8013328:	ee10 2a10 	vmov	r2, s0
 801332c:	460b      	mov	r3, r1
 801332e:	f7ec ffc5 	bl	80002bc <__adddf3>
 8013332:	ec41 0b10 	vmov	d0, r0, r1
 8013336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801333e:	f04f 33ff 	mov.w	r3, #4294967295
 8013342:	fa23 f707 	lsr.w	r7, r3, r7
 8013346:	4207      	tst	r7, r0
 8013348:	d0f3      	beq.n	8013332 <floor+0x9a>
 801334a:	a311      	add	r3, pc, #68	; (adr r3, 8013390 <floor+0xf8>)
 801334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013350:	f7ec ffb4 	bl	80002bc <__adddf3>
 8013354:	2200      	movs	r2, #0
 8013356:	2300      	movs	r3, #0
 8013358:	f7ed fbf6 	bl	8000b48 <__aeabi_dcmpgt>
 801335c:	2800      	cmp	r0, #0
 801335e:	d0bf      	beq.n	80132e0 <floor+0x48>
 8013360:	2c00      	cmp	r4, #0
 8013362:	da02      	bge.n	801336a <floor+0xd2>
 8013364:	2e14      	cmp	r6, #20
 8013366:	d103      	bne.n	8013370 <floor+0xd8>
 8013368:	3401      	adds	r4, #1
 801336a:	ea25 0507 	bic.w	r5, r5, r7
 801336e:	e7b7      	b.n	80132e0 <floor+0x48>
 8013370:	2301      	movs	r3, #1
 8013372:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013376:	fa03 f606 	lsl.w	r6, r3, r6
 801337a:	4435      	add	r5, r6
 801337c:	4545      	cmp	r5, r8
 801337e:	bf38      	it	cc
 8013380:	18e4      	addcc	r4, r4, r3
 8013382:	e7f2      	b.n	801336a <floor+0xd2>
 8013384:	2500      	movs	r5, #0
 8013386:	462c      	mov	r4, r5
 8013388:	e7aa      	b.n	80132e0 <floor+0x48>
 801338a:	bf00      	nop
 801338c:	f3af 8000 	nop.w
 8013390:	8800759c 	.word	0x8800759c
 8013394:	7e37e43c 	.word	0x7e37e43c
 8013398:	bff00000 	.word	0xbff00000
 801339c:	000fffff 	.word	0x000fffff

080133a0 <scalbn>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	ec55 4b10 	vmov	r4, r5, d0
 80133a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80133aa:	4606      	mov	r6, r0
 80133ac:	462b      	mov	r3, r5
 80133ae:	b9aa      	cbnz	r2, 80133dc <scalbn+0x3c>
 80133b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80133b4:	4323      	orrs	r3, r4
 80133b6:	d03b      	beq.n	8013430 <scalbn+0x90>
 80133b8:	4b31      	ldr	r3, [pc, #196]	; (8013480 <scalbn+0xe0>)
 80133ba:	4629      	mov	r1, r5
 80133bc:	2200      	movs	r2, #0
 80133be:	ee10 0a10 	vmov	r0, s0
 80133c2:	f7ed f931 	bl	8000628 <__aeabi_dmul>
 80133c6:	4b2f      	ldr	r3, [pc, #188]	; (8013484 <scalbn+0xe4>)
 80133c8:	429e      	cmp	r6, r3
 80133ca:	4604      	mov	r4, r0
 80133cc:	460d      	mov	r5, r1
 80133ce:	da12      	bge.n	80133f6 <scalbn+0x56>
 80133d0:	a327      	add	r3, pc, #156	; (adr r3, 8013470 <scalbn+0xd0>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ed f927 	bl	8000628 <__aeabi_dmul>
 80133da:	e009      	b.n	80133f0 <scalbn+0x50>
 80133dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80133e0:	428a      	cmp	r2, r1
 80133e2:	d10c      	bne.n	80133fe <scalbn+0x5e>
 80133e4:	ee10 2a10 	vmov	r2, s0
 80133e8:	4620      	mov	r0, r4
 80133ea:	4629      	mov	r1, r5
 80133ec:	f7ec ff66 	bl	80002bc <__adddf3>
 80133f0:	4604      	mov	r4, r0
 80133f2:	460d      	mov	r5, r1
 80133f4:	e01c      	b.n	8013430 <scalbn+0x90>
 80133f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80133fa:	460b      	mov	r3, r1
 80133fc:	3a36      	subs	r2, #54	; 0x36
 80133fe:	4432      	add	r2, r6
 8013400:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013404:	428a      	cmp	r2, r1
 8013406:	dd0b      	ble.n	8013420 <scalbn+0x80>
 8013408:	ec45 4b11 	vmov	d1, r4, r5
 801340c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013478 <scalbn+0xd8>
 8013410:	f000 f83c 	bl	801348c <copysign>
 8013414:	a318      	add	r3, pc, #96	; (adr r3, 8013478 <scalbn+0xd8>)
 8013416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341a:	ec51 0b10 	vmov	r0, r1, d0
 801341e:	e7da      	b.n	80133d6 <scalbn+0x36>
 8013420:	2a00      	cmp	r2, #0
 8013422:	dd08      	ble.n	8013436 <scalbn+0x96>
 8013424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801342c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013430:	ec45 4b10 	vmov	d0, r4, r5
 8013434:	bd70      	pop	{r4, r5, r6, pc}
 8013436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801343a:	da0d      	bge.n	8013458 <scalbn+0xb8>
 801343c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013440:	429e      	cmp	r6, r3
 8013442:	ec45 4b11 	vmov	d1, r4, r5
 8013446:	dce1      	bgt.n	801340c <scalbn+0x6c>
 8013448:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013470 <scalbn+0xd0>
 801344c:	f000 f81e 	bl	801348c <copysign>
 8013450:	a307      	add	r3, pc, #28	; (adr r3, 8013470 <scalbn+0xd0>)
 8013452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013456:	e7e0      	b.n	801341a <scalbn+0x7a>
 8013458:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801345c:	3236      	adds	r2, #54	; 0x36
 801345e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013466:	4620      	mov	r0, r4
 8013468:	4629      	mov	r1, r5
 801346a:	2200      	movs	r2, #0
 801346c:	4b06      	ldr	r3, [pc, #24]	; (8013488 <scalbn+0xe8>)
 801346e:	e7b2      	b.n	80133d6 <scalbn+0x36>
 8013470:	c2f8f359 	.word	0xc2f8f359
 8013474:	01a56e1f 	.word	0x01a56e1f
 8013478:	8800759c 	.word	0x8800759c
 801347c:	7e37e43c 	.word	0x7e37e43c
 8013480:	43500000 	.word	0x43500000
 8013484:	ffff3cb0 	.word	0xffff3cb0
 8013488:	3c900000 	.word	0x3c900000

0801348c <copysign>:
 801348c:	ec51 0b10 	vmov	r0, r1, d0
 8013490:	ee11 0a90 	vmov	r0, s3
 8013494:	ee10 2a10 	vmov	r2, s0
 8013498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801349c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80134a0:	ea41 0300 	orr.w	r3, r1, r0
 80134a4:	ec43 2b10 	vmov	d0, r2, r3
 80134a8:	4770      	bx	lr
	...

080134ac <__errno>:
 80134ac:	4b01      	ldr	r3, [pc, #4]	; (80134b4 <__errno+0x8>)
 80134ae:	6818      	ldr	r0, [r3, #0]
 80134b0:	4770      	bx	lr
 80134b2:	bf00      	nop
 80134b4:	2000000c 	.word	0x2000000c

080134b8 <__libc_init_array>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	4e0d      	ldr	r6, [pc, #52]	; (80134f0 <__libc_init_array+0x38>)
 80134bc:	4c0d      	ldr	r4, [pc, #52]	; (80134f4 <__libc_init_array+0x3c>)
 80134be:	1ba4      	subs	r4, r4, r6
 80134c0:	10a4      	asrs	r4, r4, #2
 80134c2:	2500      	movs	r5, #0
 80134c4:	42a5      	cmp	r5, r4
 80134c6:	d109      	bne.n	80134dc <__libc_init_array+0x24>
 80134c8:	4e0b      	ldr	r6, [pc, #44]	; (80134f8 <__libc_init_array+0x40>)
 80134ca:	4c0c      	ldr	r4, [pc, #48]	; (80134fc <__libc_init_array+0x44>)
 80134cc:	f004 f9e8 	bl	80178a0 <_init>
 80134d0:	1ba4      	subs	r4, r4, r6
 80134d2:	10a4      	asrs	r4, r4, #2
 80134d4:	2500      	movs	r5, #0
 80134d6:	42a5      	cmp	r5, r4
 80134d8:	d105      	bne.n	80134e6 <__libc_init_array+0x2e>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134e0:	4798      	blx	r3
 80134e2:	3501      	adds	r5, #1
 80134e4:	e7ee      	b.n	80134c4 <__libc_init_array+0xc>
 80134e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134ea:	4798      	blx	r3
 80134ec:	3501      	adds	r5, #1
 80134ee:	e7f2      	b.n	80134d6 <__libc_init_array+0x1e>
 80134f0:	080183c4 	.word	0x080183c4
 80134f4:	080183c4 	.word	0x080183c4
 80134f8:	080183c4 	.word	0x080183c4
 80134fc:	080183cc 	.word	0x080183cc

08013500 <memcpy>:
 8013500:	b510      	push	{r4, lr}
 8013502:	1e43      	subs	r3, r0, #1
 8013504:	440a      	add	r2, r1
 8013506:	4291      	cmp	r1, r2
 8013508:	d100      	bne.n	801350c <memcpy+0xc>
 801350a:	bd10      	pop	{r4, pc}
 801350c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013514:	e7f7      	b.n	8013506 <memcpy+0x6>

08013516 <memset>:
 8013516:	4402      	add	r2, r0
 8013518:	4603      	mov	r3, r0
 801351a:	4293      	cmp	r3, r2
 801351c:	d100      	bne.n	8013520 <memset+0xa>
 801351e:	4770      	bx	lr
 8013520:	f803 1b01 	strb.w	r1, [r3], #1
 8013524:	e7f9      	b.n	801351a <memset+0x4>

08013526 <__cvt>:
 8013526:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801352a:	ec55 4b10 	vmov	r4, r5, d0
 801352e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013534:	2d00      	cmp	r5, #0
 8013536:	460e      	mov	r6, r1
 8013538:	4691      	mov	r9, r2
 801353a:	4619      	mov	r1, r3
 801353c:	bfb8      	it	lt
 801353e:	4622      	movlt	r2, r4
 8013540:	462b      	mov	r3, r5
 8013542:	f027 0720 	bic.w	r7, r7, #32
 8013546:	bfbb      	ittet	lt
 8013548:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801354c:	461d      	movlt	r5, r3
 801354e:	2300      	movge	r3, #0
 8013550:	232d      	movlt	r3, #45	; 0x2d
 8013552:	bfb8      	it	lt
 8013554:	4614      	movlt	r4, r2
 8013556:	2f46      	cmp	r7, #70	; 0x46
 8013558:	700b      	strb	r3, [r1, #0]
 801355a:	d004      	beq.n	8013566 <__cvt+0x40>
 801355c:	2f45      	cmp	r7, #69	; 0x45
 801355e:	d100      	bne.n	8013562 <__cvt+0x3c>
 8013560:	3601      	adds	r6, #1
 8013562:	2102      	movs	r1, #2
 8013564:	e000      	b.n	8013568 <__cvt+0x42>
 8013566:	2103      	movs	r1, #3
 8013568:	ab03      	add	r3, sp, #12
 801356a:	9301      	str	r3, [sp, #4]
 801356c:	ab02      	add	r3, sp, #8
 801356e:	9300      	str	r3, [sp, #0]
 8013570:	4632      	mov	r2, r6
 8013572:	4653      	mov	r3, sl
 8013574:	ec45 4b10 	vmov	d0, r4, r5
 8013578:	f001 fdfe 	bl	8015178 <_dtoa_r>
 801357c:	2f47      	cmp	r7, #71	; 0x47
 801357e:	4680      	mov	r8, r0
 8013580:	d102      	bne.n	8013588 <__cvt+0x62>
 8013582:	f019 0f01 	tst.w	r9, #1
 8013586:	d026      	beq.n	80135d6 <__cvt+0xb0>
 8013588:	2f46      	cmp	r7, #70	; 0x46
 801358a:	eb08 0906 	add.w	r9, r8, r6
 801358e:	d111      	bne.n	80135b4 <__cvt+0x8e>
 8013590:	f898 3000 	ldrb.w	r3, [r8]
 8013594:	2b30      	cmp	r3, #48	; 0x30
 8013596:	d10a      	bne.n	80135ae <__cvt+0x88>
 8013598:	2200      	movs	r2, #0
 801359a:	2300      	movs	r3, #0
 801359c:	4620      	mov	r0, r4
 801359e:	4629      	mov	r1, r5
 80135a0:	f7ed faaa 	bl	8000af8 <__aeabi_dcmpeq>
 80135a4:	b918      	cbnz	r0, 80135ae <__cvt+0x88>
 80135a6:	f1c6 0601 	rsb	r6, r6, #1
 80135aa:	f8ca 6000 	str.w	r6, [sl]
 80135ae:	f8da 3000 	ldr.w	r3, [sl]
 80135b2:	4499      	add	r9, r3
 80135b4:	2200      	movs	r2, #0
 80135b6:	2300      	movs	r3, #0
 80135b8:	4620      	mov	r0, r4
 80135ba:	4629      	mov	r1, r5
 80135bc:	f7ed fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 80135c0:	b938      	cbnz	r0, 80135d2 <__cvt+0xac>
 80135c2:	2230      	movs	r2, #48	; 0x30
 80135c4:	9b03      	ldr	r3, [sp, #12]
 80135c6:	454b      	cmp	r3, r9
 80135c8:	d205      	bcs.n	80135d6 <__cvt+0xb0>
 80135ca:	1c59      	adds	r1, r3, #1
 80135cc:	9103      	str	r1, [sp, #12]
 80135ce:	701a      	strb	r2, [r3, #0]
 80135d0:	e7f8      	b.n	80135c4 <__cvt+0x9e>
 80135d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80135d6:	9b03      	ldr	r3, [sp, #12]
 80135d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135da:	eba3 0308 	sub.w	r3, r3, r8
 80135de:	4640      	mov	r0, r8
 80135e0:	6013      	str	r3, [r2, #0]
 80135e2:	b004      	add	sp, #16
 80135e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080135e8 <__exponent>:
 80135e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ea:	2900      	cmp	r1, #0
 80135ec:	4604      	mov	r4, r0
 80135ee:	bfba      	itte	lt
 80135f0:	4249      	neglt	r1, r1
 80135f2:	232d      	movlt	r3, #45	; 0x2d
 80135f4:	232b      	movge	r3, #43	; 0x2b
 80135f6:	2909      	cmp	r1, #9
 80135f8:	f804 2b02 	strb.w	r2, [r4], #2
 80135fc:	7043      	strb	r3, [r0, #1]
 80135fe:	dd20      	ble.n	8013642 <__exponent+0x5a>
 8013600:	f10d 0307 	add.w	r3, sp, #7
 8013604:	461f      	mov	r7, r3
 8013606:	260a      	movs	r6, #10
 8013608:	fb91 f5f6 	sdiv	r5, r1, r6
 801360c:	fb06 1115 	mls	r1, r6, r5, r1
 8013610:	3130      	adds	r1, #48	; 0x30
 8013612:	2d09      	cmp	r5, #9
 8013614:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013618:	f103 32ff 	add.w	r2, r3, #4294967295
 801361c:	4629      	mov	r1, r5
 801361e:	dc09      	bgt.n	8013634 <__exponent+0x4c>
 8013620:	3130      	adds	r1, #48	; 0x30
 8013622:	3b02      	subs	r3, #2
 8013624:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013628:	42bb      	cmp	r3, r7
 801362a:	4622      	mov	r2, r4
 801362c:	d304      	bcc.n	8013638 <__exponent+0x50>
 801362e:	1a10      	subs	r0, r2, r0
 8013630:	b003      	add	sp, #12
 8013632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013634:	4613      	mov	r3, r2
 8013636:	e7e7      	b.n	8013608 <__exponent+0x20>
 8013638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801363c:	f804 2b01 	strb.w	r2, [r4], #1
 8013640:	e7f2      	b.n	8013628 <__exponent+0x40>
 8013642:	2330      	movs	r3, #48	; 0x30
 8013644:	4419      	add	r1, r3
 8013646:	7083      	strb	r3, [r0, #2]
 8013648:	1d02      	adds	r2, r0, #4
 801364a:	70c1      	strb	r1, [r0, #3]
 801364c:	e7ef      	b.n	801362e <__exponent+0x46>
	...

08013650 <_printf_float>:
 8013650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013654:	b08d      	sub	sp, #52	; 0x34
 8013656:	460c      	mov	r4, r1
 8013658:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801365c:	4616      	mov	r6, r2
 801365e:	461f      	mov	r7, r3
 8013660:	4605      	mov	r5, r0
 8013662:	f002 fe7b 	bl	801635c <_localeconv_r>
 8013666:	6803      	ldr	r3, [r0, #0]
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	4618      	mov	r0, r3
 801366c:	f7ec fdc8 	bl	8000200 <strlen>
 8013670:	2300      	movs	r3, #0
 8013672:	930a      	str	r3, [sp, #40]	; 0x28
 8013674:	f8d8 3000 	ldr.w	r3, [r8]
 8013678:	9005      	str	r0, [sp, #20]
 801367a:	3307      	adds	r3, #7
 801367c:	f023 0307 	bic.w	r3, r3, #7
 8013680:	f103 0208 	add.w	r2, r3, #8
 8013684:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013688:	f8d4 b000 	ldr.w	fp, [r4]
 801368c:	f8c8 2000 	str.w	r2, [r8]
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013698:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801369c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80136a0:	9307      	str	r3, [sp, #28]
 80136a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80136a6:	f04f 32ff 	mov.w	r2, #4294967295
 80136aa:	4ba7      	ldr	r3, [pc, #668]	; (8013948 <_printf_float+0x2f8>)
 80136ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136b0:	f7ed fa54 	bl	8000b5c <__aeabi_dcmpun>
 80136b4:	bb70      	cbnz	r0, 8013714 <_printf_float+0xc4>
 80136b6:	f04f 32ff 	mov.w	r2, #4294967295
 80136ba:	4ba3      	ldr	r3, [pc, #652]	; (8013948 <_printf_float+0x2f8>)
 80136bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136c0:	f7ed fa2e 	bl	8000b20 <__aeabi_dcmple>
 80136c4:	bb30      	cbnz	r0, 8013714 <_printf_float+0xc4>
 80136c6:	2200      	movs	r2, #0
 80136c8:	2300      	movs	r3, #0
 80136ca:	4640      	mov	r0, r8
 80136cc:	4649      	mov	r1, r9
 80136ce:	f7ed fa1d 	bl	8000b0c <__aeabi_dcmplt>
 80136d2:	b110      	cbz	r0, 80136da <_printf_float+0x8a>
 80136d4:	232d      	movs	r3, #45	; 0x2d
 80136d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136da:	4a9c      	ldr	r2, [pc, #624]	; (801394c <_printf_float+0x2fc>)
 80136dc:	4b9c      	ldr	r3, [pc, #624]	; (8013950 <_printf_float+0x300>)
 80136de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80136e2:	bf8c      	ite	hi
 80136e4:	4690      	movhi	r8, r2
 80136e6:	4698      	movls	r8, r3
 80136e8:	2303      	movs	r3, #3
 80136ea:	f02b 0204 	bic.w	r2, fp, #4
 80136ee:	6123      	str	r3, [r4, #16]
 80136f0:	6022      	str	r2, [r4, #0]
 80136f2:	f04f 0900 	mov.w	r9, #0
 80136f6:	9700      	str	r7, [sp, #0]
 80136f8:	4633      	mov	r3, r6
 80136fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80136fc:	4621      	mov	r1, r4
 80136fe:	4628      	mov	r0, r5
 8013700:	f000 f9e6 	bl	8013ad0 <_printf_common>
 8013704:	3001      	adds	r0, #1
 8013706:	f040 808d 	bne.w	8013824 <_printf_float+0x1d4>
 801370a:	f04f 30ff 	mov.w	r0, #4294967295
 801370e:	b00d      	add	sp, #52	; 0x34
 8013710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013714:	4642      	mov	r2, r8
 8013716:	464b      	mov	r3, r9
 8013718:	4640      	mov	r0, r8
 801371a:	4649      	mov	r1, r9
 801371c:	f7ed fa1e 	bl	8000b5c <__aeabi_dcmpun>
 8013720:	b110      	cbz	r0, 8013728 <_printf_float+0xd8>
 8013722:	4a8c      	ldr	r2, [pc, #560]	; (8013954 <_printf_float+0x304>)
 8013724:	4b8c      	ldr	r3, [pc, #560]	; (8013958 <_printf_float+0x308>)
 8013726:	e7da      	b.n	80136de <_printf_float+0x8e>
 8013728:	6861      	ldr	r1, [r4, #4]
 801372a:	1c4b      	adds	r3, r1, #1
 801372c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013730:	a80a      	add	r0, sp, #40	; 0x28
 8013732:	d13e      	bne.n	80137b2 <_printf_float+0x162>
 8013734:	2306      	movs	r3, #6
 8013736:	6063      	str	r3, [r4, #4]
 8013738:	2300      	movs	r3, #0
 801373a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801373e:	ab09      	add	r3, sp, #36	; 0x24
 8013740:	9300      	str	r3, [sp, #0]
 8013742:	ec49 8b10 	vmov	d0, r8, r9
 8013746:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801374a:	6022      	str	r2, [r4, #0]
 801374c:	f8cd a004 	str.w	sl, [sp, #4]
 8013750:	6861      	ldr	r1, [r4, #4]
 8013752:	4628      	mov	r0, r5
 8013754:	f7ff fee7 	bl	8013526 <__cvt>
 8013758:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801375c:	2b47      	cmp	r3, #71	; 0x47
 801375e:	4680      	mov	r8, r0
 8013760:	d109      	bne.n	8013776 <_printf_float+0x126>
 8013762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013764:	1cd8      	adds	r0, r3, #3
 8013766:	db02      	blt.n	801376e <_printf_float+0x11e>
 8013768:	6862      	ldr	r2, [r4, #4]
 801376a:	4293      	cmp	r3, r2
 801376c:	dd47      	ble.n	80137fe <_printf_float+0x1ae>
 801376e:	f1aa 0a02 	sub.w	sl, sl, #2
 8013772:	fa5f fa8a 	uxtb.w	sl, sl
 8013776:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801377a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801377c:	d824      	bhi.n	80137c8 <_printf_float+0x178>
 801377e:	3901      	subs	r1, #1
 8013780:	4652      	mov	r2, sl
 8013782:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013786:	9109      	str	r1, [sp, #36]	; 0x24
 8013788:	f7ff ff2e 	bl	80135e8 <__exponent>
 801378c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801378e:	1813      	adds	r3, r2, r0
 8013790:	2a01      	cmp	r2, #1
 8013792:	4681      	mov	r9, r0
 8013794:	6123      	str	r3, [r4, #16]
 8013796:	dc02      	bgt.n	801379e <_printf_float+0x14e>
 8013798:	6822      	ldr	r2, [r4, #0]
 801379a:	07d1      	lsls	r1, r2, #31
 801379c:	d501      	bpl.n	80137a2 <_printf_float+0x152>
 801379e:	3301      	adds	r3, #1
 80137a0:	6123      	str	r3, [r4, #16]
 80137a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d0a5      	beq.n	80136f6 <_printf_float+0xa6>
 80137aa:	232d      	movs	r3, #45	; 0x2d
 80137ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137b0:	e7a1      	b.n	80136f6 <_printf_float+0xa6>
 80137b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80137b6:	f000 8177 	beq.w	8013aa8 <_printf_float+0x458>
 80137ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80137be:	d1bb      	bne.n	8013738 <_printf_float+0xe8>
 80137c0:	2900      	cmp	r1, #0
 80137c2:	d1b9      	bne.n	8013738 <_printf_float+0xe8>
 80137c4:	2301      	movs	r3, #1
 80137c6:	e7b6      	b.n	8013736 <_printf_float+0xe6>
 80137c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80137cc:	d119      	bne.n	8013802 <_printf_float+0x1b2>
 80137ce:	2900      	cmp	r1, #0
 80137d0:	6863      	ldr	r3, [r4, #4]
 80137d2:	dd0c      	ble.n	80137ee <_printf_float+0x19e>
 80137d4:	6121      	str	r1, [r4, #16]
 80137d6:	b913      	cbnz	r3, 80137de <_printf_float+0x18e>
 80137d8:	6822      	ldr	r2, [r4, #0]
 80137da:	07d2      	lsls	r2, r2, #31
 80137dc:	d502      	bpl.n	80137e4 <_printf_float+0x194>
 80137de:	3301      	adds	r3, #1
 80137e0:	440b      	add	r3, r1
 80137e2:	6123      	str	r3, [r4, #16]
 80137e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80137e8:	f04f 0900 	mov.w	r9, #0
 80137ec:	e7d9      	b.n	80137a2 <_printf_float+0x152>
 80137ee:	b913      	cbnz	r3, 80137f6 <_printf_float+0x1a6>
 80137f0:	6822      	ldr	r2, [r4, #0]
 80137f2:	07d0      	lsls	r0, r2, #31
 80137f4:	d501      	bpl.n	80137fa <_printf_float+0x1aa>
 80137f6:	3302      	adds	r3, #2
 80137f8:	e7f3      	b.n	80137e2 <_printf_float+0x192>
 80137fa:	2301      	movs	r3, #1
 80137fc:	e7f1      	b.n	80137e2 <_printf_float+0x192>
 80137fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013802:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013806:	4293      	cmp	r3, r2
 8013808:	db05      	blt.n	8013816 <_printf_float+0x1c6>
 801380a:	6822      	ldr	r2, [r4, #0]
 801380c:	6123      	str	r3, [r4, #16]
 801380e:	07d1      	lsls	r1, r2, #31
 8013810:	d5e8      	bpl.n	80137e4 <_printf_float+0x194>
 8013812:	3301      	adds	r3, #1
 8013814:	e7e5      	b.n	80137e2 <_printf_float+0x192>
 8013816:	2b00      	cmp	r3, #0
 8013818:	bfd4      	ite	le
 801381a:	f1c3 0302 	rsble	r3, r3, #2
 801381e:	2301      	movgt	r3, #1
 8013820:	4413      	add	r3, r2
 8013822:	e7de      	b.n	80137e2 <_printf_float+0x192>
 8013824:	6823      	ldr	r3, [r4, #0]
 8013826:	055a      	lsls	r2, r3, #21
 8013828:	d407      	bmi.n	801383a <_printf_float+0x1ea>
 801382a:	6923      	ldr	r3, [r4, #16]
 801382c:	4642      	mov	r2, r8
 801382e:	4631      	mov	r1, r6
 8013830:	4628      	mov	r0, r5
 8013832:	47b8      	blx	r7
 8013834:	3001      	adds	r0, #1
 8013836:	d12b      	bne.n	8013890 <_printf_float+0x240>
 8013838:	e767      	b.n	801370a <_printf_float+0xba>
 801383a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801383e:	f240 80dc 	bls.w	80139fa <_printf_float+0x3aa>
 8013842:	2200      	movs	r2, #0
 8013844:	2300      	movs	r3, #0
 8013846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801384a:	f7ed f955 	bl	8000af8 <__aeabi_dcmpeq>
 801384e:	2800      	cmp	r0, #0
 8013850:	d033      	beq.n	80138ba <_printf_float+0x26a>
 8013852:	2301      	movs	r3, #1
 8013854:	4a41      	ldr	r2, [pc, #260]	; (801395c <_printf_float+0x30c>)
 8013856:	4631      	mov	r1, r6
 8013858:	4628      	mov	r0, r5
 801385a:	47b8      	blx	r7
 801385c:	3001      	adds	r0, #1
 801385e:	f43f af54 	beq.w	801370a <_printf_float+0xba>
 8013862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013866:	429a      	cmp	r2, r3
 8013868:	db02      	blt.n	8013870 <_printf_float+0x220>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	07d8      	lsls	r0, r3, #31
 801386e:	d50f      	bpl.n	8013890 <_printf_float+0x240>
 8013870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013874:	4631      	mov	r1, r6
 8013876:	4628      	mov	r0, r5
 8013878:	47b8      	blx	r7
 801387a:	3001      	adds	r0, #1
 801387c:	f43f af45 	beq.w	801370a <_printf_float+0xba>
 8013880:	f04f 0800 	mov.w	r8, #0
 8013884:	f104 091a 	add.w	r9, r4, #26
 8013888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801388a:	3b01      	subs	r3, #1
 801388c:	4543      	cmp	r3, r8
 801388e:	dc09      	bgt.n	80138a4 <_printf_float+0x254>
 8013890:	6823      	ldr	r3, [r4, #0]
 8013892:	079b      	lsls	r3, r3, #30
 8013894:	f100 8103 	bmi.w	8013a9e <_printf_float+0x44e>
 8013898:	68e0      	ldr	r0, [r4, #12]
 801389a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801389c:	4298      	cmp	r0, r3
 801389e:	bfb8      	it	lt
 80138a0:	4618      	movlt	r0, r3
 80138a2:	e734      	b.n	801370e <_printf_float+0xbe>
 80138a4:	2301      	movs	r3, #1
 80138a6:	464a      	mov	r2, r9
 80138a8:	4631      	mov	r1, r6
 80138aa:	4628      	mov	r0, r5
 80138ac:	47b8      	blx	r7
 80138ae:	3001      	adds	r0, #1
 80138b0:	f43f af2b 	beq.w	801370a <_printf_float+0xba>
 80138b4:	f108 0801 	add.w	r8, r8, #1
 80138b8:	e7e6      	b.n	8013888 <_printf_float+0x238>
 80138ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138bc:	2b00      	cmp	r3, #0
 80138be:	dc2b      	bgt.n	8013918 <_printf_float+0x2c8>
 80138c0:	2301      	movs	r3, #1
 80138c2:	4a26      	ldr	r2, [pc, #152]	; (801395c <_printf_float+0x30c>)
 80138c4:	4631      	mov	r1, r6
 80138c6:	4628      	mov	r0, r5
 80138c8:	47b8      	blx	r7
 80138ca:	3001      	adds	r0, #1
 80138cc:	f43f af1d 	beq.w	801370a <_printf_float+0xba>
 80138d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138d2:	b923      	cbnz	r3, 80138de <_printf_float+0x28e>
 80138d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138d6:	b913      	cbnz	r3, 80138de <_printf_float+0x28e>
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	07d9      	lsls	r1, r3, #31
 80138dc:	d5d8      	bpl.n	8013890 <_printf_float+0x240>
 80138de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138e2:	4631      	mov	r1, r6
 80138e4:	4628      	mov	r0, r5
 80138e6:	47b8      	blx	r7
 80138e8:	3001      	adds	r0, #1
 80138ea:	f43f af0e 	beq.w	801370a <_printf_float+0xba>
 80138ee:	f04f 0900 	mov.w	r9, #0
 80138f2:	f104 0a1a 	add.w	sl, r4, #26
 80138f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138f8:	425b      	negs	r3, r3
 80138fa:	454b      	cmp	r3, r9
 80138fc:	dc01      	bgt.n	8013902 <_printf_float+0x2b2>
 80138fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013900:	e794      	b.n	801382c <_printf_float+0x1dc>
 8013902:	2301      	movs	r3, #1
 8013904:	4652      	mov	r2, sl
 8013906:	4631      	mov	r1, r6
 8013908:	4628      	mov	r0, r5
 801390a:	47b8      	blx	r7
 801390c:	3001      	adds	r0, #1
 801390e:	f43f aefc 	beq.w	801370a <_printf_float+0xba>
 8013912:	f109 0901 	add.w	r9, r9, #1
 8013916:	e7ee      	b.n	80138f6 <_printf_float+0x2a6>
 8013918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801391a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801391c:	429a      	cmp	r2, r3
 801391e:	bfa8      	it	ge
 8013920:	461a      	movge	r2, r3
 8013922:	2a00      	cmp	r2, #0
 8013924:	4691      	mov	r9, r2
 8013926:	dd07      	ble.n	8013938 <_printf_float+0x2e8>
 8013928:	4613      	mov	r3, r2
 801392a:	4631      	mov	r1, r6
 801392c:	4642      	mov	r2, r8
 801392e:	4628      	mov	r0, r5
 8013930:	47b8      	blx	r7
 8013932:	3001      	adds	r0, #1
 8013934:	f43f aee9 	beq.w	801370a <_printf_float+0xba>
 8013938:	f104 031a 	add.w	r3, r4, #26
 801393c:	f04f 0b00 	mov.w	fp, #0
 8013940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013944:	9306      	str	r3, [sp, #24]
 8013946:	e015      	b.n	8013974 <_printf_float+0x324>
 8013948:	7fefffff 	.word	0x7fefffff
 801394c:	0801808c 	.word	0x0801808c
 8013950:	08018088 	.word	0x08018088
 8013954:	08018094 	.word	0x08018094
 8013958:	08018090 	.word	0x08018090
 801395c:	080182b3 	.word	0x080182b3
 8013960:	2301      	movs	r3, #1
 8013962:	9a06      	ldr	r2, [sp, #24]
 8013964:	4631      	mov	r1, r6
 8013966:	4628      	mov	r0, r5
 8013968:	47b8      	blx	r7
 801396a:	3001      	adds	r0, #1
 801396c:	f43f aecd 	beq.w	801370a <_printf_float+0xba>
 8013970:	f10b 0b01 	add.w	fp, fp, #1
 8013974:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013978:	ebaa 0309 	sub.w	r3, sl, r9
 801397c:	455b      	cmp	r3, fp
 801397e:	dcef      	bgt.n	8013960 <_printf_float+0x310>
 8013980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013984:	429a      	cmp	r2, r3
 8013986:	44d0      	add	r8, sl
 8013988:	db15      	blt.n	80139b6 <_printf_float+0x366>
 801398a:	6823      	ldr	r3, [r4, #0]
 801398c:	07da      	lsls	r2, r3, #31
 801398e:	d412      	bmi.n	80139b6 <_printf_float+0x366>
 8013990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013994:	eba3 020a 	sub.w	r2, r3, sl
 8013998:	eba3 0a01 	sub.w	sl, r3, r1
 801399c:	4592      	cmp	sl, r2
 801399e:	bfa8      	it	ge
 80139a0:	4692      	movge	sl, r2
 80139a2:	f1ba 0f00 	cmp.w	sl, #0
 80139a6:	dc0e      	bgt.n	80139c6 <_printf_float+0x376>
 80139a8:	f04f 0800 	mov.w	r8, #0
 80139ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139b0:	f104 091a 	add.w	r9, r4, #26
 80139b4:	e019      	b.n	80139ea <_printf_float+0x39a>
 80139b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139ba:	4631      	mov	r1, r6
 80139bc:	4628      	mov	r0, r5
 80139be:	47b8      	blx	r7
 80139c0:	3001      	adds	r0, #1
 80139c2:	d1e5      	bne.n	8013990 <_printf_float+0x340>
 80139c4:	e6a1      	b.n	801370a <_printf_float+0xba>
 80139c6:	4653      	mov	r3, sl
 80139c8:	4642      	mov	r2, r8
 80139ca:	4631      	mov	r1, r6
 80139cc:	4628      	mov	r0, r5
 80139ce:	47b8      	blx	r7
 80139d0:	3001      	adds	r0, #1
 80139d2:	d1e9      	bne.n	80139a8 <_printf_float+0x358>
 80139d4:	e699      	b.n	801370a <_printf_float+0xba>
 80139d6:	2301      	movs	r3, #1
 80139d8:	464a      	mov	r2, r9
 80139da:	4631      	mov	r1, r6
 80139dc:	4628      	mov	r0, r5
 80139de:	47b8      	blx	r7
 80139e0:	3001      	adds	r0, #1
 80139e2:	f43f ae92 	beq.w	801370a <_printf_float+0xba>
 80139e6:	f108 0801 	add.w	r8, r8, #1
 80139ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139ee:	1a9b      	subs	r3, r3, r2
 80139f0:	eba3 030a 	sub.w	r3, r3, sl
 80139f4:	4543      	cmp	r3, r8
 80139f6:	dcee      	bgt.n	80139d6 <_printf_float+0x386>
 80139f8:	e74a      	b.n	8013890 <_printf_float+0x240>
 80139fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139fc:	2a01      	cmp	r2, #1
 80139fe:	dc01      	bgt.n	8013a04 <_printf_float+0x3b4>
 8013a00:	07db      	lsls	r3, r3, #31
 8013a02:	d53a      	bpl.n	8013a7a <_printf_float+0x42a>
 8013a04:	2301      	movs	r3, #1
 8013a06:	4642      	mov	r2, r8
 8013a08:	4631      	mov	r1, r6
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	47b8      	blx	r7
 8013a0e:	3001      	adds	r0, #1
 8013a10:	f43f ae7b 	beq.w	801370a <_printf_float+0xba>
 8013a14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a18:	4631      	mov	r1, r6
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	47b8      	blx	r7
 8013a1e:	3001      	adds	r0, #1
 8013a20:	f108 0801 	add.w	r8, r8, #1
 8013a24:	f43f ae71 	beq.w	801370a <_printf_float+0xba>
 8013a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013a34:	2300      	movs	r3, #0
 8013a36:	f7ed f85f 	bl	8000af8 <__aeabi_dcmpeq>
 8013a3a:	b9c8      	cbnz	r0, 8013a70 <_printf_float+0x420>
 8013a3c:	4653      	mov	r3, sl
 8013a3e:	4642      	mov	r2, r8
 8013a40:	4631      	mov	r1, r6
 8013a42:	4628      	mov	r0, r5
 8013a44:	47b8      	blx	r7
 8013a46:	3001      	adds	r0, #1
 8013a48:	d10e      	bne.n	8013a68 <_printf_float+0x418>
 8013a4a:	e65e      	b.n	801370a <_printf_float+0xba>
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	4652      	mov	r2, sl
 8013a50:	4631      	mov	r1, r6
 8013a52:	4628      	mov	r0, r5
 8013a54:	47b8      	blx	r7
 8013a56:	3001      	adds	r0, #1
 8013a58:	f43f ae57 	beq.w	801370a <_printf_float+0xba>
 8013a5c:	f108 0801 	add.w	r8, r8, #1
 8013a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a62:	3b01      	subs	r3, #1
 8013a64:	4543      	cmp	r3, r8
 8013a66:	dcf1      	bgt.n	8013a4c <_printf_float+0x3fc>
 8013a68:	464b      	mov	r3, r9
 8013a6a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013a6e:	e6de      	b.n	801382e <_printf_float+0x1de>
 8013a70:	f04f 0800 	mov.w	r8, #0
 8013a74:	f104 0a1a 	add.w	sl, r4, #26
 8013a78:	e7f2      	b.n	8013a60 <_printf_float+0x410>
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e7df      	b.n	8013a3e <_printf_float+0x3ee>
 8013a7e:	2301      	movs	r3, #1
 8013a80:	464a      	mov	r2, r9
 8013a82:	4631      	mov	r1, r6
 8013a84:	4628      	mov	r0, r5
 8013a86:	47b8      	blx	r7
 8013a88:	3001      	adds	r0, #1
 8013a8a:	f43f ae3e 	beq.w	801370a <_printf_float+0xba>
 8013a8e:	f108 0801 	add.w	r8, r8, #1
 8013a92:	68e3      	ldr	r3, [r4, #12]
 8013a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a96:	1a9b      	subs	r3, r3, r2
 8013a98:	4543      	cmp	r3, r8
 8013a9a:	dcf0      	bgt.n	8013a7e <_printf_float+0x42e>
 8013a9c:	e6fc      	b.n	8013898 <_printf_float+0x248>
 8013a9e:	f04f 0800 	mov.w	r8, #0
 8013aa2:	f104 0919 	add.w	r9, r4, #25
 8013aa6:	e7f4      	b.n	8013a92 <_printf_float+0x442>
 8013aa8:	2900      	cmp	r1, #0
 8013aaa:	f43f ae8b 	beq.w	80137c4 <_printf_float+0x174>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013ab4:	ab09      	add	r3, sp, #36	; 0x24
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	ec49 8b10 	vmov	d0, r8, r9
 8013abc:	6022      	str	r2, [r4, #0]
 8013abe:	f8cd a004 	str.w	sl, [sp, #4]
 8013ac2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	f7ff fd2d 	bl	8013526 <__cvt>
 8013acc:	4680      	mov	r8, r0
 8013ace:	e648      	b.n	8013762 <_printf_float+0x112>

08013ad0 <_printf_common>:
 8013ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ad4:	4691      	mov	r9, r2
 8013ad6:	461f      	mov	r7, r3
 8013ad8:	688a      	ldr	r2, [r1, #8]
 8013ada:	690b      	ldr	r3, [r1, #16]
 8013adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	bfb8      	it	lt
 8013ae4:	4613      	movlt	r3, r2
 8013ae6:	f8c9 3000 	str.w	r3, [r9]
 8013aea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013aee:	4606      	mov	r6, r0
 8013af0:	460c      	mov	r4, r1
 8013af2:	b112      	cbz	r2, 8013afa <_printf_common+0x2a>
 8013af4:	3301      	adds	r3, #1
 8013af6:	f8c9 3000 	str.w	r3, [r9]
 8013afa:	6823      	ldr	r3, [r4, #0]
 8013afc:	0699      	lsls	r1, r3, #26
 8013afe:	bf42      	ittt	mi
 8013b00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013b04:	3302      	addmi	r3, #2
 8013b06:	f8c9 3000 	strmi.w	r3, [r9]
 8013b0a:	6825      	ldr	r5, [r4, #0]
 8013b0c:	f015 0506 	ands.w	r5, r5, #6
 8013b10:	d107      	bne.n	8013b22 <_printf_common+0x52>
 8013b12:	f104 0a19 	add.w	sl, r4, #25
 8013b16:	68e3      	ldr	r3, [r4, #12]
 8013b18:	f8d9 2000 	ldr.w	r2, [r9]
 8013b1c:	1a9b      	subs	r3, r3, r2
 8013b1e:	42ab      	cmp	r3, r5
 8013b20:	dc28      	bgt.n	8013b74 <_printf_common+0xa4>
 8013b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013b26:	6822      	ldr	r2, [r4, #0]
 8013b28:	3300      	adds	r3, #0
 8013b2a:	bf18      	it	ne
 8013b2c:	2301      	movne	r3, #1
 8013b2e:	0692      	lsls	r2, r2, #26
 8013b30:	d42d      	bmi.n	8013b8e <_printf_common+0xbe>
 8013b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b36:	4639      	mov	r1, r7
 8013b38:	4630      	mov	r0, r6
 8013b3a:	47c0      	blx	r8
 8013b3c:	3001      	adds	r0, #1
 8013b3e:	d020      	beq.n	8013b82 <_printf_common+0xb2>
 8013b40:	6823      	ldr	r3, [r4, #0]
 8013b42:	68e5      	ldr	r5, [r4, #12]
 8013b44:	f8d9 2000 	ldr.w	r2, [r9]
 8013b48:	f003 0306 	and.w	r3, r3, #6
 8013b4c:	2b04      	cmp	r3, #4
 8013b4e:	bf08      	it	eq
 8013b50:	1aad      	subeq	r5, r5, r2
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	6922      	ldr	r2, [r4, #16]
 8013b56:	bf0c      	ite	eq
 8013b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b5c:	2500      	movne	r5, #0
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	bfc4      	itt	gt
 8013b62:	1a9b      	subgt	r3, r3, r2
 8013b64:	18ed      	addgt	r5, r5, r3
 8013b66:	f04f 0900 	mov.w	r9, #0
 8013b6a:	341a      	adds	r4, #26
 8013b6c:	454d      	cmp	r5, r9
 8013b6e:	d11a      	bne.n	8013ba6 <_printf_common+0xd6>
 8013b70:	2000      	movs	r0, #0
 8013b72:	e008      	b.n	8013b86 <_printf_common+0xb6>
 8013b74:	2301      	movs	r3, #1
 8013b76:	4652      	mov	r2, sl
 8013b78:	4639      	mov	r1, r7
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	47c0      	blx	r8
 8013b7e:	3001      	adds	r0, #1
 8013b80:	d103      	bne.n	8013b8a <_printf_common+0xba>
 8013b82:	f04f 30ff 	mov.w	r0, #4294967295
 8013b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b8a:	3501      	adds	r5, #1
 8013b8c:	e7c3      	b.n	8013b16 <_printf_common+0x46>
 8013b8e:	18e1      	adds	r1, r4, r3
 8013b90:	1c5a      	adds	r2, r3, #1
 8013b92:	2030      	movs	r0, #48	; 0x30
 8013b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b98:	4422      	add	r2, r4
 8013b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ba2:	3302      	adds	r3, #2
 8013ba4:	e7c5      	b.n	8013b32 <_printf_common+0x62>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	4622      	mov	r2, r4
 8013baa:	4639      	mov	r1, r7
 8013bac:	4630      	mov	r0, r6
 8013bae:	47c0      	blx	r8
 8013bb0:	3001      	adds	r0, #1
 8013bb2:	d0e6      	beq.n	8013b82 <_printf_common+0xb2>
 8013bb4:	f109 0901 	add.w	r9, r9, #1
 8013bb8:	e7d8      	b.n	8013b6c <_printf_common+0x9c>
	...

08013bbc <_printf_i>:
 8013bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	7e09      	ldrb	r1, [r1, #24]
 8013bc8:	b085      	sub	sp, #20
 8013bca:	296e      	cmp	r1, #110	; 0x6e
 8013bcc:	4617      	mov	r7, r2
 8013bce:	4606      	mov	r6, r0
 8013bd0:	4698      	mov	r8, r3
 8013bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bd4:	f000 80b3 	beq.w	8013d3e <_printf_i+0x182>
 8013bd8:	d822      	bhi.n	8013c20 <_printf_i+0x64>
 8013bda:	2963      	cmp	r1, #99	; 0x63
 8013bdc:	d036      	beq.n	8013c4c <_printf_i+0x90>
 8013bde:	d80a      	bhi.n	8013bf6 <_printf_i+0x3a>
 8013be0:	2900      	cmp	r1, #0
 8013be2:	f000 80b9 	beq.w	8013d58 <_printf_i+0x19c>
 8013be6:	2958      	cmp	r1, #88	; 0x58
 8013be8:	f000 8083 	beq.w	8013cf2 <_printf_i+0x136>
 8013bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013bf4:	e032      	b.n	8013c5c <_printf_i+0xa0>
 8013bf6:	2964      	cmp	r1, #100	; 0x64
 8013bf8:	d001      	beq.n	8013bfe <_printf_i+0x42>
 8013bfa:	2969      	cmp	r1, #105	; 0x69
 8013bfc:	d1f6      	bne.n	8013bec <_printf_i+0x30>
 8013bfe:	6820      	ldr	r0, [r4, #0]
 8013c00:	6813      	ldr	r3, [r2, #0]
 8013c02:	0605      	lsls	r5, r0, #24
 8013c04:	f103 0104 	add.w	r1, r3, #4
 8013c08:	d52a      	bpl.n	8013c60 <_printf_i+0xa4>
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	6011      	str	r1, [r2, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	da03      	bge.n	8013c1a <_printf_i+0x5e>
 8013c12:	222d      	movs	r2, #45	; 0x2d
 8013c14:	425b      	negs	r3, r3
 8013c16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013c1a:	486f      	ldr	r0, [pc, #444]	; (8013dd8 <_printf_i+0x21c>)
 8013c1c:	220a      	movs	r2, #10
 8013c1e:	e039      	b.n	8013c94 <_printf_i+0xd8>
 8013c20:	2973      	cmp	r1, #115	; 0x73
 8013c22:	f000 809d 	beq.w	8013d60 <_printf_i+0x1a4>
 8013c26:	d808      	bhi.n	8013c3a <_printf_i+0x7e>
 8013c28:	296f      	cmp	r1, #111	; 0x6f
 8013c2a:	d020      	beq.n	8013c6e <_printf_i+0xb2>
 8013c2c:	2970      	cmp	r1, #112	; 0x70
 8013c2e:	d1dd      	bne.n	8013bec <_printf_i+0x30>
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	f043 0320 	orr.w	r3, r3, #32
 8013c36:	6023      	str	r3, [r4, #0]
 8013c38:	e003      	b.n	8013c42 <_printf_i+0x86>
 8013c3a:	2975      	cmp	r1, #117	; 0x75
 8013c3c:	d017      	beq.n	8013c6e <_printf_i+0xb2>
 8013c3e:	2978      	cmp	r1, #120	; 0x78
 8013c40:	d1d4      	bne.n	8013bec <_printf_i+0x30>
 8013c42:	2378      	movs	r3, #120	; 0x78
 8013c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c48:	4864      	ldr	r0, [pc, #400]	; (8013ddc <_printf_i+0x220>)
 8013c4a:	e055      	b.n	8013cf8 <_printf_i+0x13c>
 8013c4c:	6813      	ldr	r3, [r2, #0]
 8013c4e:	1d19      	adds	r1, r3, #4
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	6011      	str	r1, [r2, #0]
 8013c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	e08c      	b.n	8013d7a <_printf_i+0x1be>
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	6011      	str	r1, [r2, #0]
 8013c64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c68:	bf18      	it	ne
 8013c6a:	b21b      	sxthne	r3, r3
 8013c6c:	e7cf      	b.n	8013c0e <_printf_i+0x52>
 8013c6e:	6813      	ldr	r3, [r2, #0]
 8013c70:	6825      	ldr	r5, [r4, #0]
 8013c72:	1d18      	adds	r0, r3, #4
 8013c74:	6010      	str	r0, [r2, #0]
 8013c76:	0628      	lsls	r0, r5, #24
 8013c78:	d501      	bpl.n	8013c7e <_printf_i+0xc2>
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	e002      	b.n	8013c84 <_printf_i+0xc8>
 8013c7e:	0668      	lsls	r0, r5, #25
 8013c80:	d5fb      	bpl.n	8013c7a <_printf_i+0xbe>
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	4854      	ldr	r0, [pc, #336]	; (8013dd8 <_printf_i+0x21c>)
 8013c86:	296f      	cmp	r1, #111	; 0x6f
 8013c88:	bf14      	ite	ne
 8013c8a:	220a      	movne	r2, #10
 8013c8c:	2208      	moveq	r2, #8
 8013c8e:	2100      	movs	r1, #0
 8013c90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c94:	6865      	ldr	r5, [r4, #4]
 8013c96:	60a5      	str	r5, [r4, #8]
 8013c98:	2d00      	cmp	r5, #0
 8013c9a:	f2c0 8095 	blt.w	8013dc8 <_printf_i+0x20c>
 8013c9e:	6821      	ldr	r1, [r4, #0]
 8013ca0:	f021 0104 	bic.w	r1, r1, #4
 8013ca4:	6021      	str	r1, [r4, #0]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d13d      	bne.n	8013d26 <_printf_i+0x16a>
 8013caa:	2d00      	cmp	r5, #0
 8013cac:	f040 808e 	bne.w	8013dcc <_printf_i+0x210>
 8013cb0:	4665      	mov	r5, ip
 8013cb2:	2a08      	cmp	r2, #8
 8013cb4:	d10b      	bne.n	8013cce <_printf_i+0x112>
 8013cb6:	6823      	ldr	r3, [r4, #0]
 8013cb8:	07db      	lsls	r3, r3, #31
 8013cba:	d508      	bpl.n	8013cce <_printf_i+0x112>
 8013cbc:	6923      	ldr	r3, [r4, #16]
 8013cbe:	6862      	ldr	r2, [r4, #4]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	bfde      	ittt	le
 8013cc4:	2330      	movle	r3, #48	; 0x30
 8013cc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cce:	ebac 0305 	sub.w	r3, ip, r5
 8013cd2:	6123      	str	r3, [r4, #16]
 8013cd4:	f8cd 8000 	str.w	r8, [sp]
 8013cd8:	463b      	mov	r3, r7
 8013cda:	aa03      	add	r2, sp, #12
 8013cdc:	4621      	mov	r1, r4
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f7ff fef6 	bl	8013ad0 <_printf_common>
 8013ce4:	3001      	adds	r0, #1
 8013ce6:	d14d      	bne.n	8013d84 <_printf_i+0x1c8>
 8013ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cec:	b005      	add	sp, #20
 8013cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cf2:	4839      	ldr	r0, [pc, #228]	; (8013dd8 <_printf_i+0x21c>)
 8013cf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013cf8:	6813      	ldr	r3, [r2, #0]
 8013cfa:	6821      	ldr	r1, [r4, #0]
 8013cfc:	1d1d      	adds	r5, r3, #4
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	6015      	str	r5, [r2, #0]
 8013d02:	060a      	lsls	r2, r1, #24
 8013d04:	d50b      	bpl.n	8013d1e <_printf_i+0x162>
 8013d06:	07ca      	lsls	r2, r1, #31
 8013d08:	bf44      	itt	mi
 8013d0a:	f041 0120 	orrmi.w	r1, r1, #32
 8013d0e:	6021      	strmi	r1, [r4, #0]
 8013d10:	b91b      	cbnz	r3, 8013d1a <_printf_i+0x15e>
 8013d12:	6822      	ldr	r2, [r4, #0]
 8013d14:	f022 0220 	bic.w	r2, r2, #32
 8013d18:	6022      	str	r2, [r4, #0]
 8013d1a:	2210      	movs	r2, #16
 8013d1c:	e7b7      	b.n	8013c8e <_printf_i+0xd2>
 8013d1e:	064d      	lsls	r5, r1, #25
 8013d20:	bf48      	it	mi
 8013d22:	b29b      	uxthmi	r3, r3
 8013d24:	e7ef      	b.n	8013d06 <_printf_i+0x14a>
 8013d26:	4665      	mov	r5, ip
 8013d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d2c:	fb02 3311 	mls	r3, r2, r1, r3
 8013d30:	5cc3      	ldrb	r3, [r0, r3]
 8013d32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013d36:	460b      	mov	r3, r1
 8013d38:	2900      	cmp	r1, #0
 8013d3a:	d1f5      	bne.n	8013d28 <_printf_i+0x16c>
 8013d3c:	e7b9      	b.n	8013cb2 <_printf_i+0xf6>
 8013d3e:	6813      	ldr	r3, [r2, #0]
 8013d40:	6825      	ldr	r5, [r4, #0]
 8013d42:	6961      	ldr	r1, [r4, #20]
 8013d44:	1d18      	adds	r0, r3, #4
 8013d46:	6010      	str	r0, [r2, #0]
 8013d48:	0628      	lsls	r0, r5, #24
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	d501      	bpl.n	8013d52 <_printf_i+0x196>
 8013d4e:	6019      	str	r1, [r3, #0]
 8013d50:	e002      	b.n	8013d58 <_printf_i+0x19c>
 8013d52:	066a      	lsls	r2, r5, #25
 8013d54:	d5fb      	bpl.n	8013d4e <_printf_i+0x192>
 8013d56:	8019      	strh	r1, [r3, #0]
 8013d58:	2300      	movs	r3, #0
 8013d5a:	6123      	str	r3, [r4, #16]
 8013d5c:	4665      	mov	r5, ip
 8013d5e:	e7b9      	b.n	8013cd4 <_printf_i+0x118>
 8013d60:	6813      	ldr	r3, [r2, #0]
 8013d62:	1d19      	adds	r1, r3, #4
 8013d64:	6011      	str	r1, [r2, #0]
 8013d66:	681d      	ldr	r5, [r3, #0]
 8013d68:	6862      	ldr	r2, [r4, #4]
 8013d6a:	2100      	movs	r1, #0
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	f7ec fa4f 	bl	8000210 <memchr>
 8013d72:	b108      	cbz	r0, 8013d78 <_printf_i+0x1bc>
 8013d74:	1b40      	subs	r0, r0, r5
 8013d76:	6060      	str	r0, [r4, #4]
 8013d78:	6863      	ldr	r3, [r4, #4]
 8013d7a:	6123      	str	r3, [r4, #16]
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d82:	e7a7      	b.n	8013cd4 <_printf_i+0x118>
 8013d84:	6923      	ldr	r3, [r4, #16]
 8013d86:	462a      	mov	r2, r5
 8013d88:	4639      	mov	r1, r7
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	47c0      	blx	r8
 8013d8e:	3001      	adds	r0, #1
 8013d90:	d0aa      	beq.n	8013ce8 <_printf_i+0x12c>
 8013d92:	6823      	ldr	r3, [r4, #0]
 8013d94:	079b      	lsls	r3, r3, #30
 8013d96:	d413      	bmi.n	8013dc0 <_printf_i+0x204>
 8013d98:	68e0      	ldr	r0, [r4, #12]
 8013d9a:	9b03      	ldr	r3, [sp, #12]
 8013d9c:	4298      	cmp	r0, r3
 8013d9e:	bfb8      	it	lt
 8013da0:	4618      	movlt	r0, r3
 8013da2:	e7a3      	b.n	8013cec <_printf_i+0x130>
 8013da4:	2301      	movs	r3, #1
 8013da6:	464a      	mov	r2, r9
 8013da8:	4639      	mov	r1, r7
 8013daa:	4630      	mov	r0, r6
 8013dac:	47c0      	blx	r8
 8013dae:	3001      	adds	r0, #1
 8013db0:	d09a      	beq.n	8013ce8 <_printf_i+0x12c>
 8013db2:	3501      	adds	r5, #1
 8013db4:	68e3      	ldr	r3, [r4, #12]
 8013db6:	9a03      	ldr	r2, [sp, #12]
 8013db8:	1a9b      	subs	r3, r3, r2
 8013dba:	42ab      	cmp	r3, r5
 8013dbc:	dcf2      	bgt.n	8013da4 <_printf_i+0x1e8>
 8013dbe:	e7eb      	b.n	8013d98 <_printf_i+0x1dc>
 8013dc0:	2500      	movs	r5, #0
 8013dc2:	f104 0919 	add.w	r9, r4, #25
 8013dc6:	e7f5      	b.n	8013db4 <_printf_i+0x1f8>
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d1ac      	bne.n	8013d26 <_printf_i+0x16a>
 8013dcc:	7803      	ldrb	r3, [r0, #0]
 8013dce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013dd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dd6:	e76c      	b.n	8013cb2 <_printf_i+0xf6>
 8013dd8:	08018098 	.word	0x08018098
 8013ddc:	080180a9 	.word	0x080180a9

08013de0 <_scanf_float>:
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	469a      	mov	sl, r3
 8013de6:	688b      	ldr	r3, [r1, #8]
 8013de8:	4616      	mov	r6, r2
 8013dea:	1e5a      	subs	r2, r3, #1
 8013dec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013df0:	b087      	sub	sp, #28
 8013df2:	bf83      	ittte	hi
 8013df4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013df8:	189b      	addhi	r3, r3, r2
 8013dfa:	9301      	strhi	r3, [sp, #4]
 8013dfc:	2300      	movls	r3, #0
 8013dfe:	bf86      	itte	hi
 8013e00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013e04:	608b      	strhi	r3, [r1, #8]
 8013e06:	9301      	strls	r3, [sp, #4]
 8013e08:	680b      	ldr	r3, [r1, #0]
 8013e0a:	4688      	mov	r8, r1
 8013e0c:	f04f 0b00 	mov.w	fp, #0
 8013e10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013e14:	f848 3b1c 	str.w	r3, [r8], #28
 8013e18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013e1c:	4607      	mov	r7, r0
 8013e1e:	460c      	mov	r4, r1
 8013e20:	4645      	mov	r5, r8
 8013e22:	465a      	mov	r2, fp
 8013e24:	46d9      	mov	r9, fp
 8013e26:	f8cd b008 	str.w	fp, [sp, #8]
 8013e2a:	68a1      	ldr	r1, [r4, #8]
 8013e2c:	b181      	cbz	r1, 8013e50 <_scanf_float+0x70>
 8013e2e:	6833      	ldr	r3, [r6, #0]
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	2b49      	cmp	r3, #73	; 0x49
 8013e34:	d071      	beq.n	8013f1a <_scanf_float+0x13a>
 8013e36:	d84d      	bhi.n	8013ed4 <_scanf_float+0xf4>
 8013e38:	2b39      	cmp	r3, #57	; 0x39
 8013e3a:	d840      	bhi.n	8013ebe <_scanf_float+0xde>
 8013e3c:	2b31      	cmp	r3, #49	; 0x31
 8013e3e:	f080 8088 	bcs.w	8013f52 <_scanf_float+0x172>
 8013e42:	2b2d      	cmp	r3, #45	; 0x2d
 8013e44:	f000 8090 	beq.w	8013f68 <_scanf_float+0x188>
 8013e48:	d815      	bhi.n	8013e76 <_scanf_float+0x96>
 8013e4a:	2b2b      	cmp	r3, #43	; 0x2b
 8013e4c:	f000 808c 	beq.w	8013f68 <_scanf_float+0x188>
 8013e50:	f1b9 0f00 	cmp.w	r9, #0
 8013e54:	d003      	beq.n	8013e5e <_scanf_float+0x7e>
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e5c:	6023      	str	r3, [r4, #0]
 8013e5e:	3a01      	subs	r2, #1
 8013e60:	2a01      	cmp	r2, #1
 8013e62:	f200 80ea 	bhi.w	801403a <_scanf_float+0x25a>
 8013e66:	4545      	cmp	r5, r8
 8013e68:	f200 80dc 	bhi.w	8014024 <_scanf_float+0x244>
 8013e6c:	2601      	movs	r6, #1
 8013e6e:	4630      	mov	r0, r6
 8013e70:	b007      	add	sp, #28
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	2b2e      	cmp	r3, #46	; 0x2e
 8013e78:	f000 809f 	beq.w	8013fba <_scanf_float+0x1da>
 8013e7c:	2b30      	cmp	r3, #48	; 0x30
 8013e7e:	d1e7      	bne.n	8013e50 <_scanf_float+0x70>
 8013e80:	6820      	ldr	r0, [r4, #0]
 8013e82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013e86:	d064      	beq.n	8013f52 <_scanf_float+0x172>
 8013e88:	9b01      	ldr	r3, [sp, #4]
 8013e8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013e8e:	6020      	str	r0, [r4, #0]
 8013e90:	f109 0901 	add.w	r9, r9, #1
 8013e94:	b11b      	cbz	r3, 8013e9e <_scanf_float+0xbe>
 8013e96:	3b01      	subs	r3, #1
 8013e98:	3101      	adds	r1, #1
 8013e9a:	9301      	str	r3, [sp, #4]
 8013e9c:	60a1      	str	r1, [r4, #8]
 8013e9e:	68a3      	ldr	r3, [r4, #8]
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	60a3      	str	r3, [r4, #8]
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	6123      	str	r3, [r4, #16]
 8013eaa:	6873      	ldr	r3, [r6, #4]
 8013eac:	3b01      	subs	r3, #1
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	6073      	str	r3, [r6, #4]
 8013eb2:	f340 80ac 	ble.w	801400e <_scanf_float+0x22e>
 8013eb6:	6833      	ldr	r3, [r6, #0]
 8013eb8:	3301      	adds	r3, #1
 8013eba:	6033      	str	r3, [r6, #0]
 8013ebc:	e7b5      	b.n	8013e2a <_scanf_float+0x4a>
 8013ebe:	2b45      	cmp	r3, #69	; 0x45
 8013ec0:	f000 8085 	beq.w	8013fce <_scanf_float+0x1ee>
 8013ec4:	2b46      	cmp	r3, #70	; 0x46
 8013ec6:	d06a      	beq.n	8013f9e <_scanf_float+0x1be>
 8013ec8:	2b41      	cmp	r3, #65	; 0x41
 8013eca:	d1c1      	bne.n	8013e50 <_scanf_float+0x70>
 8013ecc:	2a01      	cmp	r2, #1
 8013ece:	d1bf      	bne.n	8013e50 <_scanf_float+0x70>
 8013ed0:	2202      	movs	r2, #2
 8013ed2:	e046      	b.n	8013f62 <_scanf_float+0x182>
 8013ed4:	2b65      	cmp	r3, #101	; 0x65
 8013ed6:	d07a      	beq.n	8013fce <_scanf_float+0x1ee>
 8013ed8:	d818      	bhi.n	8013f0c <_scanf_float+0x12c>
 8013eda:	2b54      	cmp	r3, #84	; 0x54
 8013edc:	d066      	beq.n	8013fac <_scanf_float+0x1cc>
 8013ede:	d811      	bhi.n	8013f04 <_scanf_float+0x124>
 8013ee0:	2b4e      	cmp	r3, #78	; 0x4e
 8013ee2:	d1b5      	bne.n	8013e50 <_scanf_float+0x70>
 8013ee4:	2a00      	cmp	r2, #0
 8013ee6:	d146      	bne.n	8013f76 <_scanf_float+0x196>
 8013ee8:	f1b9 0f00 	cmp.w	r9, #0
 8013eec:	d145      	bne.n	8013f7a <_scanf_float+0x19a>
 8013eee:	6821      	ldr	r1, [r4, #0]
 8013ef0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013ef4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013ef8:	d13f      	bne.n	8013f7a <_scanf_float+0x19a>
 8013efa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013efe:	6021      	str	r1, [r4, #0]
 8013f00:	2201      	movs	r2, #1
 8013f02:	e02e      	b.n	8013f62 <_scanf_float+0x182>
 8013f04:	2b59      	cmp	r3, #89	; 0x59
 8013f06:	d01e      	beq.n	8013f46 <_scanf_float+0x166>
 8013f08:	2b61      	cmp	r3, #97	; 0x61
 8013f0a:	e7de      	b.n	8013eca <_scanf_float+0xea>
 8013f0c:	2b6e      	cmp	r3, #110	; 0x6e
 8013f0e:	d0e9      	beq.n	8013ee4 <_scanf_float+0x104>
 8013f10:	d815      	bhi.n	8013f3e <_scanf_float+0x15e>
 8013f12:	2b66      	cmp	r3, #102	; 0x66
 8013f14:	d043      	beq.n	8013f9e <_scanf_float+0x1be>
 8013f16:	2b69      	cmp	r3, #105	; 0x69
 8013f18:	d19a      	bne.n	8013e50 <_scanf_float+0x70>
 8013f1a:	f1bb 0f00 	cmp.w	fp, #0
 8013f1e:	d138      	bne.n	8013f92 <_scanf_float+0x1b2>
 8013f20:	f1b9 0f00 	cmp.w	r9, #0
 8013f24:	d197      	bne.n	8013e56 <_scanf_float+0x76>
 8013f26:	6821      	ldr	r1, [r4, #0]
 8013f28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013f2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013f30:	d195      	bne.n	8013e5e <_scanf_float+0x7e>
 8013f32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f36:	6021      	str	r1, [r4, #0]
 8013f38:	f04f 0b01 	mov.w	fp, #1
 8013f3c:	e011      	b.n	8013f62 <_scanf_float+0x182>
 8013f3e:	2b74      	cmp	r3, #116	; 0x74
 8013f40:	d034      	beq.n	8013fac <_scanf_float+0x1cc>
 8013f42:	2b79      	cmp	r3, #121	; 0x79
 8013f44:	d184      	bne.n	8013e50 <_scanf_float+0x70>
 8013f46:	f1bb 0f07 	cmp.w	fp, #7
 8013f4a:	d181      	bne.n	8013e50 <_scanf_float+0x70>
 8013f4c:	f04f 0b08 	mov.w	fp, #8
 8013f50:	e007      	b.n	8013f62 <_scanf_float+0x182>
 8013f52:	eb12 0f0b 	cmn.w	r2, fp
 8013f56:	f47f af7b 	bne.w	8013e50 <_scanf_float+0x70>
 8013f5a:	6821      	ldr	r1, [r4, #0]
 8013f5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013f60:	6021      	str	r1, [r4, #0]
 8013f62:	702b      	strb	r3, [r5, #0]
 8013f64:	3501      	adds	r5, #1
 8013f66:	e79a      	b.n	8013e9e <_scanf_float+0xbe>
 8013f68:	6821      	ldr	r1, [r4, #0]
 8013f6a:	0608      	lsls	r0, r1, #24
 8013f6c:	f57f af70 	bpl.w	8013e50 <_scanf_float+0x70>
 8013f70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013f74:	e7f4      	b.n	8013f60 <_scanf_float+0x180>
 8013f76:	2a02      	cmp	r2, #2
 8013f78:	d047      	beq.n	801400a <_scanf_float+0x22a>
 8013f7a:	f1bb 0f01 	cmp.w	fp, #1
 8013f7e:	d003      	beq.n	8013f88 <_scanf_float+0x1a8>
 8013f80:	f1bb 0f04 	cmp.w	fp, #4
 8013f84:	f47f af64 	bne.w	8013e50 <_scanf_float+0x70>
 8013f88:	f10b 0b01 	add.w	fp, fp, #1
 8013f8c:	fa5f fb8b 	uxtb.w	fp, fp
 8013f90:	e7e7      	b.n	8013f62 <_scanf_float+0x182>
 8013f92:	f1bb 0f03 	cmp.w	fp, #3
 8013f96:	d0f7      	beq.n	8013f88 <_scanf_float+0x1a8>
 8013f98:	f1bb 0f05 	cmp.w	fp, #5
 8013f9c:	e7f2      	b.n	8013f84 <_scanf_float+0x1a4>
 8013f9e:	f1bb 0f02 	cmp.w	fp, #2
 8013fa2:	f47f af55 	bne.w	8013e50 <_scanf_float+0x70>
 8013fa6:	f04f 0b03 	mov.w	fp, #3
 8013faa:	e7da      	b.n	8013f62 <_scanf_float+0x182>
 8013fac:	f1bb 0f06 	cmp.w	fp, #6
 8013fb0:	f47f af4e 	bne.w	8013e50 <_scanf_float+0x70>
 8013fb4:	f04f 0b07 	mov.w	fp, #7
 8013fb8:	e7d3      	b.n	8013f62 <_scanf_float+0x182>
 8013fba:	6821      	ldr	r1, [r4, #0]
 8013fbc:	0588      	lsls	r0, r1, #22
 8013fbe:	f57f af47 	bpl.w	8013e50 <_scanf_float+0x70>
 8013fc2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013fc6:	6021      	str	r1, [r4, #0]
 8013fc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8013fcc:	e7c9      	b.n	8013f62 <_scanf_float+0x182>
 8013fce:	6821      	ldr	r1, [r4, #0]
 8013fd0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013fd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013fd8:	d006      	beq.n	8013fe8 <_scanf_float+0x208>
 8013fda:	0548      	lsls	r0, r1, #21
 8013fdc:	f57f af38 	bpl.w	8013e50 <_scanf_float+0x70>
 8013fe0:	f1b9 0f00 	cmp.w	r9, #0
 8013fe4:	f43f af3b 	beq.w	8013e5e <_scanf_float+0x7e>
 8013fe8:	0588      	lsls	r0, r1, #22
 8013fea:	bf58      	it	pl
 8013fec:	9802      	ldrpl	r0, [sp, #8]
 8013fee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013ff2:	bf58      	it	pl
 8013ff4:	eba9 0000 	subpl.w	r0, r9, r0
 8013ff8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013ffc:	bf58      	it	pl
 8013ffe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014002:	6021      	str	r1, [r4, #0]
 8014004:	f04f 0900 	mov.w	r9, #0
 8014008:	e7ab      	b.n	8013f62 <_scanf_float+0x182>
 801400a:	2203      	movs	r2, #3
 801400c:	e7a9      	b.n	8013f62 <_scanf_float+0x182>
 801400e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014012:	9205      	str	r2, [sp, #20]
 8014014:	4631      	mov	r1, r6
 8014016:	4638      	mov	r0, r7
 8014018:	4798      	blx	r3
 801401a:	9a05      	ldr	r2, [sp, #20]
 801401c:	2800      	cmp	r0, #0
 801401e:	f43f af04 	beq.w	8013e2a <_scanf_float+0x4a>
 8014022:	e715      	b.n	8013e50 <_scanf_float+0x70>
 8014024:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014028:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801402c:	4632      	mov	r2, r6
 801402e:	4638      	mov	r0, r7
 8014030:	4798      	blx	r3
 8014032:	6923      	ldr	r3, [r4, #16]
 8014034:	3b01      	subs	r3, #1
 8014036:	6123      	str	r3, [r4, #16]
 8014038:	e715      	b.n	8013e66 <_scanf_float+0x86>
 801403a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801403e:	2b06      	cmp	r3, #6
 8014040:	d80a      	bhi.n	8014058 <_scanf_float+0x278>
 8014042:	f1bb 0f02 	cmp.w	fp, #2
 8014046:	d968      	bls.n	801411a <_scanf_float+0x33a>
 8014048:	f1ab 0b03 	sub.w	fp, fp, #3
 801404c:	fa5f fb8b 	uxtb.w	fp, fp
 8014050:	eba5 0b0b 	sub.w	fp, r5, fp
 8014054:	455d      	cmp	r5, fp
 8014056:	d14b      	bne.n	80140f0 <_scanf_float+0x310>
 8014058:	6823      	ldr	r3, [r4, #0]
 801405a:	05da      	lsls	r2, r3, #23
 801405c:	d51f      	bpl.n	801409e <_scanf_float+0x2be>
 801405e:	055b      	lsls	r3, r3, #21
 8014060:	d468      	bmi.n	8014134 <_scanf_float+0x354>
 8014062:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	2965      	cmp	r1, #101	; 0x65
 801406a:	f103 33ff 	add.w	r3, r3, #4294967295
 801406e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014072:	6123      	str	r3, [r4, #16]
 8014074:	d00d      	beq.n	8014092 <_scanf_float+0x2b2>
 8014076:	2945      	cmp	r1, #69	; 0x45
 8014078:	d00b      	beq.n	8014092 <_scanf_float+0x2b2>
 801407a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801407e:	4632      	mov	r2, r6
 8014080:	4638      	mov	r0, r7
 8014082:	4798      	blx	r3
 8014084:	6923      	ldr	r3, [r4, #16]
 8014086:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801408a:	3b01      	subs	r3, #1
 801408c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014090:	6123      	str	r3, [r4, #16]
 8014092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014096:	4632      	mov	r2, r6
 8014098:	4638      	mov	r0, r7
 801409a:	4798      	blx	r3
 801409c:	465d      	mov	r5, fp
 801409e:	6826      	ldr	r6, [r4, #0]
 80140a0:	f016 0610 	ands.w	r6, r6, #16
 80140a4:	d17a      	bne.n	801419c <_scanf_float+0x3bc>
 80140a6:	702e      	strb	r6, [r5, #0]
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80140ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80140b2:	d142      	bne.n	801413a <_scanf_float+0x35a>
 80140b4:	9b02      	ldr	r3, [sp, #8]
 80140b6:	eba9 0303 	sub.w	r3, r9, r3
 80140ba:	425a      	negs	r2, r3
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d149      	bne.n	8014154 <_scanf_float+0x374>
 80140c0:	2200      	movs	r2, #0
 80140c2:	4641      	mov	r1, r8
 80140c4:	4638      	mov	r0, r7
 80140c6:	f000 ff0b 	bl	8014ee0 <_strtod_r>
 80140ca:	6825      	ldr	r5, [r4, #0]
 80140cc:	f8da 3000 	ldr.w	r3, [sl]
 80140d0:	f015 0f02 	tst.w	r5, #2
 80140d4:	f103 0204 	add.w	r2, r3, #4
 80140d8:	ec59 8b10 	vmov	r8, r9, d0
 80140dc:	f8ca 2000 	str.w	r2, [sl]
 80140e0:	d043      	beq.n	801416a <_scanf_float+0x38a>
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	e9c3 8900 	strd	r8, r9, [r3]
 80140e8:	68e3      	ldr	r3, [r4, #12]
 80140ea:	3301      	adds	r3, #1
 80140ec:	60e3      	str	r3, [r4, #12]
 80140ee:	e6be      	b.n	8013e6e <_scanf_float+0x8e>
 80140f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80140f8:	4632      	mov	r2, r6
 80140fa:	4638      	mov	r0, r7
 80140fc:	4798      	blx	r3
 80140fe:	6923      	ldr	r3, [r4, #16]
 8014100:	3b01      	subs	r3, #1
 8014102:	6123      	str	r3, [r4, #16]
 8014104:	e7a6      	b.n	8014054 <_scanf_float+0x274>
 8014106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801410a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801410e:	4632      	mov	r2, r6
 8014110:	4638      	mov	r0, r7
 8014112:	4798      	blx	r3
 8014114:	6923      	ldr	r3, [r4, #16]
 8014116:	3b01      	subs	r3, #1
 8014118:	6123      	str	r3, [r4, #16]
 801411a:	4545      	cmp	r5, r8
 801411c:	d8f3      	bhi.n	8014106 <_scanf_float+0x326>
 801411e:	e6a5      	b.n	8013e6c <_scanf_float+0x8c>
 8014120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014124:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014128:	4632      	mov	r2, r6
 801412a:	4638      	mov	r0, r7
 801412c:	4798      	blx	r3
 801412e:	6923      	ldr	r3, [r4, #16]
 8014130:	3b01      	subs	r3, #1
 8014132:	6123      	str	r3, [r4, #16]
 8014134:	4545      	cmp	r5, r8
 8014136:	d8f3      	bhi.n	8014120 <_scanf_float+0x340>
 8014138:	e698      	b.n	8013e6c <_scanf_float+0x8c>
 801413a:	9b03      	ldr	r3, [sp, #12]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d0bf      	beq.n	80140c0 <_scanf_float+0x2e0>
 8014140:	9904      	ldr	r1, [sp, #16]
 8014142:	230a      	movs	r3, #10
 8014144:	4632      	mov	r2, r6
 8014146:	3101      	adds	r1, #1
 8014148:	4638      	mov	r0, r7
 801414a:	f000 ff55 	bl	8014ff8 <_strtol_r>
 801414e:	9b03      	ldr	r3, [sp, #12]
 8014150:	9d04      	ldr	r5, [sp, #16]
 8014152:	1ac2      	subs	r2, r0, r3
 8014154:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014158:	429d      	cmp	r5, r3
 801415a:	bf28      	it	cs
 801415c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014160:	490f      	ldr	r1, [pc, #60]	; (80141a0 <_scanf_float+0x3c0>)
 8014162:	4628      	mov	r0, r5
 8014164:	f000 f858 	bl	8014218 <siprintf>
 8014168:	e7aa      	b.n	80140c0 <_scanf_float+0x2e0>
 801416a:	f015 0504 	ands.w	r5, r5, #4
 801416e:	d1b8      	bne.n	80140e2 <_scanf_float+0x302>
 8014170:	681f      	ldr	r7, [r3, #0]
 8014172:	ee10 2a10 	vmov	r2, s0
 8014176:	464b      	mov	r3, r9
 8014178:	ee10 0a10 	vmov	r0, s0
 801417c:	4649      	mov	r1, r9
 801417e:	f7ec fced 	bl	8000b5c <__aeabi_dcmpun>
 8014182:	b128      	cbz	r0, 8014190 <_scanf_float+0x3b0>
 8014184:	4628      	mov	r0, r5
 8014186:	f000 f80d 	bl	80141a4 <nanf>
 801418a:	ed87 0a00 	vstr	s0, [r7]
 801418e:	e7ab      	b.n	80140e8 <_scanf_float+0x308>
 8014190:	4640      	mov	r0, r8
 8014192:	4649      	mov	r1, r9
 8014194:	f7ec fd40 	bl	8000c18 <__aeabi_d2f>
 8014198:	6038      	str	r0, [r7, #0]
 801419a:	e7a5      	b.n	80140e8 <_scanf_float+0x308>
 801419c:	2600      	movs	r6, #0
 801419e:	e666      	b.n	8013e6e <_scanf_float+0x8e>
 80141a0:	080180ba 	.word	0x080180ba

080141a4 <nanf>:
 80141a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141ac <nanf+0x8>
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop
 80141ac:	7fc00000 	.word	0x7fc00000

080141b0 <sniprintf>:
 80141b0:	b40c      	push	{r2, r3}
 80141b2:	b530      	push	{r4, r5, lr}
 80141b4:	4b17      	ldr	r3, [pc, #92]	; (8014214 <sniprintf+0x64>)
 80141b6:	1e0c      	subs	r4, r1, #0
 80141b8:	b09d      	sub	sp, #116	; 0x74
 80141ba:	681d      	ldr	r5, [r3, #0]
 80141bc:	da08      	bge.n	80141d0 <sniprintf+0x20>
 80141be:	238b      	movs	r3, #139	; 0x8b
 80141c0:	602b      	str	r3, [r5, #0]
 80141c2:	f04f 30ff 	mov.w	r0, #4294967295
 80141c6:	b01d      	add	sp, #116	; 0x74
 80141c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141cc:	b002      	add	sp, #8
 80141ce:	4770      	bx	lr
 80141d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80141d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80141d8:	bf14      	ite	ne
 80141da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80141de:	4623      	moveq	r3, r4
 80141e0:	9304      	str	r3, [sp, #16]
 80141e2:	9307      	str	r3, [sp, #28]
 80141e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141e8:	9002      	str	r0, [sp, #8]
 80141ea:	9006      	str	r0, [sp, #24]
 80141ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141f2:	ab21      	add	r3, sp, #132	; 0x84
 80141f4:	a902      	add	r1, sp, #8
 80141f6:	4628      	mov	r0, r5
 80141f8:	9301      	str	r3, [sp, #4]
 80141fa:	f002 fde7 	bl	8016dcc <_svfiprintf_r>
 80141fe:	1c43      	adds	r3, r0, #1
 8014200:	bfbc      	itt	lt
 8014202:	238b      	movlt	r3, #139	; 0x8b
 8014204:	602b      	strlt	r3, [r5, #0]
 8014206:	2c00      	cmp	r4, #0
 8014208:	d0dd      	beq.n	80141c6 <sniprintf+0x16>
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	2200      	movs	r2, #0
 801420e:	701a      	strb	r2, [r3, #0]
 8014210:	e7d9      	b.n	80141c6 <sniprintf+0x16>
 8014212:	bf00      	nop
 8014214:	2000000c 	.word	0x2000000c

08014218 <siprintf>:
 8014218:	b40e      	push	{r1, r2, r3}
 801421a:	b500      	push	{lr}
 801421c:	b09c      	sub	sp, #112	; 0x70
 801421e:	ab1d      	add	r3, sp, #116	; 0x74
 8014220:	9002      	str	r0, [sp, #8]
 8014222:	9006      	str	r0, [sp, #24]
 8014224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014228:	4809      	ldr	r0, [pc, #36]	; (8014250 <siprintf+0x38>)
 801422a:	9107      	str	r1, [sp, #28]
 801422c:	9104      	str	r1, [sp, #16]
 801422e:	4909      	ldr	r1, [pc, #36]	; (8014254 <siprintf+0x3c>)
 8014230:	f853 2b04 	ldr.w	r2, [r3], #4
 8014234:	9105      	str	r1, [sp, #20]
 8014236:	6800      	ldr	r0, [r0, #0]
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	a902      	add	r1, sp, #8
 801423c:	f002 fdc6 	bl	8016dcc <_svfiprintf_r>
 8014240:	9b02      	ldr	r3, [sp, #8]
 8014242:	2200      	movs	r2, #0
 8014244:	701a      	strb	r2, [r3, #0]
 8014246:	b01c      	add	sp, #112	; 0x70
 8014248:	f85d eb04 	ldr.w	lr, [sp], #4
 801424c:	b003      	add	sp, #12
 801424e:	4770      	bx	lr
 8014250:	2000000c 	.word	0x2000000c
 8014254:	ffff0208 	.word	0xffff0208

08014258 <siscanf>:
 8014258:	b40e      	push	{r1, r2, r3}
 801425a:	b530      	push	{r4, r5, lr}
 801425c:	b09c      	sub	sp, #112	; 0x70
 801425e:	ac1f      	add	r4, sp, #124	; 0x7c
 8014260:	f44f 7201 	mov.w	r2, #516	; 0x204
 8014264:	f854 5b04 	ldr.w	r5, [r4], #4
 8014268:	f8ad 2014 	strh.w	r2, [sp, #20]
 801426c:	9002      	str	r0, [sp, #8]
 801426e:	9006      	str	r0, [sp, #24]
 8014270:	f7eb ffc6 	bl	8000200 <strlen>
 8014274:	4b0b      	ldr	r3, [pc, #44]	; (80142a4 <siscanf+0x4c>)
 8014276:	9003      	str	r0, [sp, #12]
 8014278:	9007      	str	r0, [sp, #28]
 801427a:	930b      	str	r3, [sp, #44]	; 0x2c
 801427c:	480a      	ldr	r0, [pc, #40]	; (80142a8 <siscanf+0x50>)
 801427e:	9401      	str	r4, [sp, #4]
 8014280:	2300      	movs	r3, #0
 8014282:	930f      	str	r3, [sp, #60]	; 0x3c
 8014284:	9314      	str	r3, [sp, #80]	; 0x50
 8014286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801428a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801428e:	462a      	mov	r2, r5
 8014290:	4623      	mov	r3, r4
 8014292:	a902      	add	r1, sp, #8
 8014294:	6800      	ldr	r0, [r0, #0]
 8014296:	f002 feeb 	bl	8017070 <__ssvfiscanf_r>
 801429a:	b01c      	add	sp, #112	; 0x70
 801429c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142a0:	b003      	add	sp, #12
 80142a2:	4770      	bx	lr
 80142a4:	080142ad 	.word	0x080142ad
 80142a8:	2000000c 	.word	0x2000000c

080142ac <__seofread>:
 80142ac:	2000      	movs	r0, #0
 80142ae:	4770      	bx	lr

080142b0 <strcpy>:
 80142b0:	4603      	mov	r3, r0
 80142b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142b6:	f803 2b01 	strb.w	r2, [r3], #1
 80142ba:	2a00      	cmp	r2, #0
 80142bc:	d1f9      	bne.n	80142b2 <strcpy+0x2>
 80142be:	4770      	bx	lr

080142c0 <sulp>:
 80142c0:	b570      	push	{r4, r5, r6, lr}
 80142c2:	4604      	mov	r4, r0
 80142c4:	460d      	mov	r5, r1
 80142c6:	ec45 4b10 	vmov	d0, r4, r5
 80142ca:	4616      	mov	r6, r2
 80142cc:	f002 fb3a 	bl	8016944 <__ulp>
 80142d0:	ec51 0b10 	vmov	r0, r1, d0
 80142d4:	b17e      	cbz	r6, 80142f6 <sulp+0x36>
 80142d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80142da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142de:	2b00      	cmp	r3, #0
 80142e0:	dd09      	ble.n	80142f6 <sulp+0x36>
 80142e2:	051b      	lsls	r3, r3, #20
 80142e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80142e8:	2400      	movs	r4, #0
 80142ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80142ee:	4622      	mov	r2, r4
 80142f0:	462b      	mov	r3, r5
 80142f2:	f7ec f999 	bl	8000628 <__aeabi_dmul>
 80142f6:	bd70      	pop	{r4, r5, r6, pc}

080142f8 <_strtod_l>:
 80142f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142fc:	461f      	mov	r7, r3
 80142fe:	b0a1      	sub	sp, #132	; 0x84
 8014300:	2300      	movs	r3, #0
 8014302:	4681      	mov	r9, r0
 8014304:	4638      	mov	r0, r7
 8014306:	460e      	mov	r6, r1
 8014308:	9217      	str	r2, [sp, #92]	; 0x5c
 801430a:	931c      	str	r3, [sp, #112]	; 0x70
 801430c:	f002 f824 	bl	8016358 <__localeconv_l>
 8014310:	4680      	mov	r8, r0
 8014312:	6800      	ldr	r0, [r0, #0]
 8014314:	f7eb ff74 	bl	8000200 <strlen>
 8014318:	f04f 0a00 	mov.w	sl, #0
 801431c:	4604      	mov	r4, r0
 801431e:	f04f 0b00 	mov.w	fp, #0
 8014322:	961b      	str	r6, [sp, #108]	; 0x6c
 8014324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014326:	781a      	ldrb	r2, [r3, #0]
 8014328:	2a0d      	cmp	r2, #13
 801432a:	d832      	bhi.n	8014392 <_strtod_l+0x9a>
 801432c:	2a09      	cmp	r2, #9
 801432e:	d236      	bcs.n	801439e <_strtod_l+0xa6>
 8014330:	2a00      	cmp	r2, #0
 8014332:	d03e      	beq.n	80143b2 <_strtod_l+0xba>
 8014334:	2300      	movs	r3, #0
 8014336:	930d      	str	r3, [sp, #52]	; 0x34
 8014338:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801433a:	782b      	ldrb	r3, [r5, #0]
 801433c:	2b30      	cmp	r3, #48	; 0x30
 801433e:	f040 80ac 	bne.w	801449a <_strtod_l+0x1a2>
 8014342:	786b      	ldrb	r3, [r5, #1]
 8014344:	2b58      	cmp	r3, #88	; 0x58
 8014346:	d001      	beq.n	801434c <_strtod_l+0x54>
 8014348:	2b78      	cmp	r3, #120	; 0x78
 801434a:	d167      	bne.n	801441c <_strtod_l+0x124>
 801434c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801434e:	9301      	str	r3, [sp, #4]
 8014350:	ab1c      	add	r3, sp, #112	; 0x70
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	9702      	str	r7, [sp, #8]
 8014356:	ab1d      	add	r3, sp, #116	; 0x74
 8014358:	4a88      	ldr	r2, [pc, #544]	; (801457c <_strtod_l+0x284>)
 801435a:	a91b      	add	r1, sp, #108	; 0x6c
 801435c:	4648      	mov	r0, r9
 801435e:	f001 fd12 	bl	8015d86 <__gethex>
 8014362:	f010 0407 	ands.w	r4, r0, #7
 8014366:	4606      	mov	r6, r0
 8014368:	d005      	beq.n	8014376 <_strtod_l+0x7e>
 801436a:	2c06      	cmp	r4, #6
 801436c:	d12b      	bne.n	80143c6 <_strtod_l+0xce>
 801436e:	3501      	adds	r5, #1
 8014370:	2300      	movs	r3, #0
 8014372:	951b      	str	r5, [sp, #108]	; 0x6c
 8014374:	930d      	str	r3, [sp, #52]	; 0x34
 8014376:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014378:	2b00      	cmp	r3, #0
 801437a:	f040 859a 	bne.w	8014eb2 <_strtod_l+0xbba>
 801437e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014380:	b1e3      	cbz	r3, 80143bc <_strtod_l+0xc4>
 8014382:	4652      	mov	r2, sl
 8014384:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014388:	ec43 2b10 	vmov	d0, r2, r3
 801438c:	b021      	add	sp, #132	; 0x84
 801438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014392:	2a2b      	cmp	r2, #43	; 0x2b
 8014394:	d015      	beq.n	80143c2 <_strtod_l+0xca>
 8014396:	2a2d      	cmp	r2, #45	; 0x2d
 8014398:	d004      	beq.n	80143a4 <_strtod_l+0xac>
 801439a:	2a20      	cmp	r2, #32
 801439c:	d1ca      	bne.n	8014334 <_strtod_l+0x3c>
 801439e:	3301      	adds	r3, #1
 80143a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80143a2:	e7bf      	b.n	8014324 <_strtod_l+0x2c>
 80143a4:	2201      	movs	r2, #1
 80143a6:	920d      	str	r2, [sp, #52]	; 0x34
 80143a8:	1c5a      	adds	r2, r3, #1
 80143aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80143ac:	785b      	ldrb	r3, [r3, #1]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1c2      	bne.n	8014338 <_strtod_l+0x40>
 80143b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	f040 8579 	bne.w	8014eae <_strtod_l+0xbb6>
 80143bc:	4652      	mov	r2, sl
 80143be:	465b      	mov	r3, fp
 80143c0:	e7e2      	b.n	8014388 <_strtod_l+0x90>
 80143c2:	2200      	movs	r2, #0
 80143c4:	e7ef      	b.n	80143a6 <_strtod_l+0xae>
 80143c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80143c8:	b13a      	cbz	r2, 80143da <_strtod_l+0xe2>
 80143ca:	2135      	movs	r1, #53	; 0x35
 80143cc:	a81e      	add	r0, sp, #120	; 0x78
 80143ce:	f002 fbb1 	bl	8016b34 <__copybits>
 80143d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143d4:	4648      	mov	r0, r9
 80143d6:	f002 f81d 	bl	8016414 <_Bfree>
 80143da:	3c01      	subs	r4, #1
 80143dc:	2c04      	cmp	r4, #4
 80143de:	d806      	bhi.n	80143ee <_strtod_l+0xf6>
 80143e0:	e8df f004 	tbb	[pc, r4]
 80143e4:	1714030a 	.word	0x1714030a
 80143e8:	0a          	.byte	0x0a
 80143e9:	00          	.byte	0x00
 80143ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80143ee:	0730      	lsls	r0, r6, #28
 80143f0:	d5c1      	bpl.n	8014376 <_strtod_l+0x7e>
 80143f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80143f6:	e7be      	b.n	8014376 <_strtod_l+0x7e>
 80143f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80143fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80143fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014402:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014406:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801440a:	e7f0      	b.n	80143ee <_strtod_l+0xf6>
 801440c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014580 <_strtod_l+0x288>
 8014410:	e7ed      	b.n	80143ee <_strtod_l+0xf6>
 8014412:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014416:	f04f 3aff 	mov.w	sl, #4294967295
 801441a:	e7e8      	b.n	80143ee <_strtod_l+0xf6>
 801441c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801441e:	1c5a      	adds	r2, r3, #1
 8014420:	921b      	str	r2, [sp, #108]	; 0x6c
 8014422:	785b      	ldrb	r3, [r3, #1]
 8014424:	2b30      	cmp	r3, #48	; 0x30
 8014426:	d0f9      	beq.n	801441c <_strtod_l+0x124>
 8014428:	2b00      	cmp	r3, #0
 801442a:	d0a4      	beq.n	8014376 <_strtod_l+0x7e>
 801442c:	2301      	movs	r3, #1
 801442e:	2500      	movs	r5, #0
 8014430:	9306      	str	r3, [sp, #24]
 8014432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014434:	9308      	str	r3, [sp, #32]
 8014436:	9507      	str	r5, [sp, #28]
 8014438:	9505      	str	r5, [sp, #20]
 801443a:	220a      	movs	r2, #10
 801443c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801443e:	7807      	ldrb	r7, [r0, #0]
 8014440:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014444:	b2d9      	uxtb	r1, r3
 8014446:	2909      	cmp	r1, #9
 8014448:	d929      	bls.n	801449e <_strtod_l+0x1a6>
 801444a:	4622      	mov	r2, r4
 801444c:	f8d8 1000 	ldr.w	r1, [r8]
 8014450:	f003 f8f8 	bl	8017644 <strncmp>
 8014454:	2800      	cmp	r0, #0
 8014456:	d031      	beq.n	80144bc <_strtod_l+0x1c4>
 8014458:	2000      	movs	r0, #0
 801445a:	9c05      	ldr	r4, [sp, #20]
 801445c:	9004      	str	r0, [sp, #16]
 801445e:	463b      	mov	r3, r7
 8014460:	4602      	mov	r2, r0
 8014462:	2b65      	cmp	r3, #101	; 0x65
 8014464:	d001      	beq.n	801446a <_strtod_l+0x172>
 8014466:	2b45      	cmp	r3, #69	; 0x45
 8014468:	d114      	bne.n	8014494 <_strtod_l+0x19c>
 801446a:	b924      	cbnz	r4, 8014476 <_strtod_l+0x17e>
 801446c:	b910      	cbnz	r0, 8014474 <_strtod_l+0x17c>
 801446e:	9b06      	ldr	r3, [sp, #24]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d09e      	beq.n	80143b2 <_strtod_l+0xba>
 8014474:	2400      	movs	r4, #0
 8014476:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014478:	1c73      	adds	r3, r6, #1
 801447a:	931b      	str	r3, [sp, #108]	; 0x6c
 801447c:	7873      	ldrb	r3, [r6, #1]
 801447e:	2b2b      	cmp	r3, #43	; 0x2b
 8014480:	d078      	beq.n	8014574 <_strtod_l+0x27c>
 8014482:	2b2d      	cmp	r3, #45	; 0x2d
 8014484:	d070      	beq.n	8014568 <_strtod_l+0x270>
 8014486:	f04f 0c00 	mov.w	ip, #0
 801448a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801448e:	2f09      	cmp	r7, #9
 8014490:	d97c      	bls.n	801458c <_strtod_l+0x294>
 8014492:	961b      	str	r6, [sp, #108]	; 0x6c
 8014494:	f04f 0e00 	mov.w	lr, #0
 8014498:	e09a      	b.n	80145d0 <_strtod_l+0x2d8>
 801449a:	2300      	movs	r3, #0
 801449c:	e7c7      	b.n	801442e <_strtod_l+0x136>
 801449e:	9905      	ldr	r1, [sp, #20]
 80144a0:	2908      	cmp	r1, #8
 80144a2:	bfdd      	ittte	le
 80144a4:	9907      	ldrle	r1, [sp, #28]
 80144a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80144aa:	9307      	strle	r3, [sp, #28]
 80144ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80144b0:	9b05      	ldr	r3, [sp, #20]
 80144b2:	3001      	adds	r0, #1
 80144b4:	3301      	adds	r3, #1
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80144ba:	e7bf      	b.n	801443c <_strtod_l+0x144>
 80144bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144be:	191a      	adds	r2, r3, r4
 80144c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80144c2:	9a05      	ldr	r2, [sp, #20]
 80144c4:	5d1b      	ldrb	r3, [r3, r4]
 80144c6:	2a00      	cmp	r2, #0
 80144c8:	d037      	beq.n	801453a <_strtod_l+0x242>
 80144ca:	9c05      	ldr	r4, [sp, #20]
 80144cc:	4602      	mov	r2, r0
 80144ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80144d2:	2909      	cmp	r1, #9
 80144d4:	d913      	bls.n	80144fe <_strtod_l+0x206>
 80144d6:	2101      	movs	r1, #1
 80144d8:	9104      	str	r1, [sp, #16]
 80144da:	e7c2      	b.n	8014462 <_strtod_l+0x16a>
 80144dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144de:	1c5a      	adds	r2, r3, #1
 80144e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80144e2:	785b      	ldrb	r3, [r3, #1]
 80144e4:	3001      	adds	r0, #1
 80144e6:	2b30      	cmp	r3, #48	; 0x30
 80144e8:	d0f8      	beq.n	80144dc <_strtod_l+0x1e4>
 80144ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80144ee:	2a08      	cmp	r2, #8
 80144f0:	f200 84e4 	bhi.w	8014ebc <_strtod_l+0xbc4>
 80144f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80144f6:	9208      	str	r2, [sp, #32]
 80144f8:	4602      	mov	r2, r0
 80144fa:	2000      	movs	r0, #0
 80144fc:	4604      	mov	r4, r0
 80144fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014502:	f100 0101 	add.w	r1, r0, #1
 8014506:	d012      	beq.n	801452e <_strtod_l+0x236>
 8014508:	440a      	add	r2, r1
 801450a:	eb00 0c04 	add.w	ip, r0, r4
 801450e:	4621      	mov	r1, r4
 8014510:	270a      	movs	r7, #10
 8014512:	458c      	cmp	ip, r1
 8014514:	d113      	bne.n	801453e <_strtod_l+0x246>
 8014516:	1821      	adds	r1, r4, r0
 8014518:	2908      	cmp	r1, #8
 801451a:	f104 0401 	add.w	r4, r4, #1
 801451e:	4404      	add	r4, r0
 8014520:	dc19      	bgt.n	8014556 <_strtod_l+0x25e>
 8014522:	9b07      	ldr	r3, [sp, #28]
 8014524:	210a      	movs	r1, #10
 8014526:	fb01 e303 	mla	r3, r1, r3, lr
 801452a:	9307      	str	r3, [sp, #28]
 801452c:	2100      	movs	r1, #0
 801452e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014530:	1c58      	adds	r0, r3, #1
 8014532:	901b      	str	r0, [sp, #108]	; 0x6c
 8014534:	785b      	ldrb	r3, [r3, #1]
 8014536:	4608      	mov	r0, r1
 8014538:	e7c9      	b.n	80144ce <_strtod_l+0x1d6>
 801453a:	9805      	ldr	r0, [sp, #20]
 801453c:	e7d3      	b.n	80144e6 <_strtod_l+0x1ee>
 801453e:	2908      	cmp	r1, #8
 8014540:	f101 0101 	add.w	r1, r1, #1
 8014544:	dc03      	bgt.n	801454e <_strtod_l+0x256>
 8014546:	9b07      	ldr	r3, [sp, #28]
 8014548:	437b      	muls	r3, r7
 801454a:	9307      	str	r3, [sp, #28]
 801454c:	e7e1      	b.n	8014512 <_strtod_l+0x21a>
 801454e:	2910      	cmp	r1, #16
 8014550:	bfd8      	it	le
 8014552:	437d      	mulle	r5, r7
 8014554:	e7dd      	b.n	8014512 <_strtod_l+0x21a>
 8014556:	2c10      	cmp	r4, #16
 8014558:	bfdc      	itt	le
 801455a:	210a      	movle	r1, #10
 801455c:	fb01 e505 	mlale	r5, r1, r5, lr
 8014560:	e7e4      	b.n	801452c <_strtod_l+0x234>
 8014562:	2301      	movs	r3, #1
 8014564:	9304      	str	r3, [sp, #16]
 8014566:	e781      	b.n	801446c <_strtod_l+0x174>
 8014568:	f04f 0c01 	mov.w	ip, #1
 801456c:	1cb3      	adds	r3, r6, #2
 801456e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014570:	78b3      	ldrb	r3, [r6, #2]
 8014572:	e78a      	b.n	801448a <_strtod_l+0x192>
 8014574:	f04f 0c00 	mov.w	ip, #0
 8014578:	e7f8      	b.n	801456c <_strtod_l+0x274>
 801457a:	bf00      	nop
 801457c:	080180c0 	.word	0x080180c0
 8014580:	7ff00000 	.word	0x7ff00000
 8014584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014586:	1c5f      	adds	r7, r3, #1
 8014588:	971b      	str	r7, [sp, #108]	; 0x6c
 801458a:	785b      	ldrb	r3, [r3, #1]
 801458c:	2b30      	cmp	r3, #48	; 0x30
 801458e:	d0f9      	beq.n	8014584 <_strtod_l+0x28c>
 8014590:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014594:	2f08      	cmp	r7, #8
 8014596:	f63f af7d 	bhi.w	8014494 <_strtod_l+0x19c>
 801459a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801459e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145a0:	930a      	str	r3, [sp, #40]	; 0x28
 80145a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145a4:	1c5f      	adds	r7, r3, #1
 80145a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80145a8:	785b      	ldrb	r3, [r3, #1]
 80145aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80145ae:	f1b8 0f09 	cmp.w	r8, #9
 80145b2:	d937      	bls.n	8014624 <_strtod_l+0x32c>
 80145b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80145b6:	1a7f      	subs	r7, r7, r1
 80145b8:	2f08      	cmp	r7, #8
 80145ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80145be:	dc37      	bgt.n	8014630 <_strtod_l+0x338>
 80145c0:	45be      	cmp	lr, r7
 80145c2:	bfa8      	it	ge
 80145c4:	46be      	movge	lr, r7
 80145c6:	f1bc 0f00 	cmp.w	ip, #0
 80145ca:	d001      	beq.n	80145d0 <_strtod_l+0x2d8>
 80145cc:	f1ce 0e00 	rsb	lr, lr, #0
 80145d0:	2c00      	cmp	r4, #0
 80145d2:	d151      	bne.n	8014678 <_strtod_l+0x380>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	f47f aece 	bne.w	8014376 <_strtod_l+0x7e>
 80145da:	9a06      	ldr	r2, [sp, #24]
 80145dc:	2a00      	cmp	r2, #0
 80145de:	f47f aeca 	bne.w	8014376 <_strtod_l+0x7e>
 80145e2:	9a04      	ldr	r2, [sp, #16]
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	f47f aee4 	bne.w	80143b2 <_strtod_l+0xba>
 80145ea:	2b4e      	cmp	r3, #78	; 0x4e
 80145ec:	d027      	beq.n	801463e <_strtod_l+0x346>
 80145ee:	dc21      	bgt.n	8014634 <_strtod_l+0x33c>
 80145f0:	2b49      	cmp	r3, #73	; 0x49
 80145f2:	f47f aede 	bne.w	80143b2 <_strtod_l+0xba>
 80145f6:	49a0      	ldr	r1, [pc, #640]	; (8014878 <_strtod_l+0x580>)
 80145f8:	a81b      	add	r0, sp, #108	; 0x6c
 80145fa:	f001 fdf7 	bl	80161ec <__match>
 80145fe:	2800      	cmp	r0, #0
 8014600:	f43f aed7 	beq.w	80143b2 <_strtod_l+0xba>
 8014604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014606:	499d      	ldr	r1, [pc, #628]	; (801487c <_strtod_l+0x584>)
 8014608:	3b01      	subs	r3, #1
 801460a:	a81b      	add	r0, sp, #108	; 0x6c
 801460c:	931b      	str	r3, [sp, #108]	; 0x6c
 801460e:	f001 fded 	bl	80161ec <__match>
 8014612:	b910      	cbnz	r0, 801461a <_strtod_l+0x322>
 8014614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014616:	3301      	adds	r3, #1
 8014618:	931b      	str	r3, [sp, #108]	; 0x6c
 801461a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014890 <_strtod_l+0x598>
 801461e:	f04f 0a00 	mov.w	sl, #0
 8014622:	e6a8      	b.n	8014376 <_strtod_l+0x7e>
 8014624:	210a      	movs	r1, #10
 8014626:	fb01 3e0e 	mla	lr, r1, lr, r3
 801462a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801462e:	e7b8      	b.n	80145a2 <_strtod_l+0x2aa>
 8014630:	46be      	mov	lr, r7
 8014632:	e7c8      	b.n	80145c6 <_strtod_l+0x2ce>
 8014634:	2b69      	cmp	r3, #105	; 0x69
 8014636:	d0de      	beq.n	80145f6 <_strtod_l+0x2fe>
 8014638:	2b6e      	cmp	r3, #110	; 0x6e
 801463a:	f47f aeba 	bne.w	80143b2 <_strtod_l+0xba>
 801463e:	4990      	ldr	r1, [pc, #576]	; (8014880 <_strtod_l+0x588>)
 8014640:	a81b      	add	r0, sp, #108	; 0x6c
 8014642:	f001 fdd3 	bl	80161ec <__match>
 8014646:	2800      	cmp	r0, #0
 8014648:	f43f aeb3 	beq.w	80143b2 <_strtod_l+0xba>
 801464c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	2b28      	cmp	r3, #40	; 0x28
 8014652:	d10e      	bne.n	8014672 <_strtod_l+0x37a>
 8014654:	aa1e      	add	r2, sp, #120	; 0x78
 8014656:	498b      	ldr	r1, [pc, #556]	; (8014884 <_strtod_l+0x58c>)
 8014658:	a81b      	add	r0, sp, #108	; 0x6c
 801465a:	f001 fddb 	bl	8016214 <__hexnan>
 801465e:	2805      	cmp	r0, #5
 8014660:	d107      	bne.n	8014672 <_strtod_l+0x37a>
 8014662:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014664:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014668:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801466c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014670:	e681      	b.n	8014376 <_strtod_l+0x7e>
 8014672:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014898 <_strtod_l+0x5a0>
 8014676:	e7d2      	b.n	801461e <_strtod_l+0x326>
 8014678:	ebae 0302 	sub.w	r3, lr, r2
 801467c:	9306      	str	r3, [sp, #24]
 801467e:	9b05      	ldr	r3, [sp, #20]
 8014680:	9807      	ldr	r0, [sp, #28]
 8014682:	2b00      	cmp	r3, #0
 8014684:	bf08      	it	eq
 8014686:	4623      	moveq	r3, r4
 8014688:	2c10      	cmp	r4, #16
 801468a:	9305      	str	r3, [sp, #20]
 801468c:	46a0      	mov	r8, r4
 801468e:	bfa8      	it	ge
 8014690:	f04f 0810 	movge.w	r8, #16
 8014694:	f7eb ff4e 	bl	8000534 <__aeabi_ui2d>
 8014698:	2c09      	cmp	r4, #9
 801469a:	4682      	mov	sl, r0
 801469c:	468b      	mov	fp, r1
 801469e:	dc13      	bgt.n	80146c8 <_strtod_l+0x3d0>
 80146a0:	9b06      	ldr	r3, [sp, #24]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f43f ae67 	beq.w	8014376 <_strtod_l+0x7e>
 80146a8:	9b06      	ldr	r3, [sp, #24]
 80146aa:	dd7a      	ble.n	80147a2 <_strtod_l+0x4aa>
 80146ac:	2b16      	cmp	r3, #22
 80146ae:	dc61      	bgt.n	8014774 <_strtod_l+0x47c>
 80146b0:	4a75      	ldr	r2, [pc, #468]	; (8014888 <_strtod_l+0x590>)
 80146b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80146b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80146ba:	4652      	mov	r2, sl
 80146bc:	465b      	mov	r3, fp
 80146be:	f7eb ffb3 	bl	8000628 <__aeabi_dmul>
 80146c2:	4682      	mov	sl, r0
 80146c4:	468b      	mov	fp, r1
 80146c6:	e656      	b.n	8014376 <_strtod_l+0x7e>
 80146c8:	4b6f      	ldr	r3, [pc, #444]	; (8014888 <_strtod_l+0x590>)
 80146ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80146ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80146d2:	f7eb ffa9 	bl	8000628 <__aeabi_dmul>
 80146d6:	4606      	mov	r6, r0
 80146d8:	4628      	mov	r0, r5
 80146da:	460f      	mov	r7, r1
 80146dc:	f7eb ff2a 	bl	8000534 <__aeabi_ui2d>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4630      	mov	r0, r6
 80146e6:	4639      	mov	r1, r7
 80146e8:	f7eb fde8 	bl	80002bc <__adddf3>
 80146ec:	2c0f      	cmp	r4, #15
 80146ee:	4682      	mov	sl, r0
 80146f0:	468b      	mov	fp, r1
 80146f2:	ddd5      	ble.n	80146a0 <_strtod_l+0x3a8>
 80146f4:	9b06      	ldr	r3, [sp, #24]
 80146f6:	eba4 0808 	sub.w	r8, r4, r8
 80146fa:	4498      	add	r8, r3
 80146fc:	f1b8 0f00 	cmp.w	r8, #0
 8014700:	f340 8096 	ble.w	8014830 <_strtod_l+0x538>
 8014704:	f018 030f 	ands.w	r3, r8, #15
 8014708:	d00a      	beq.n	8014720 <_strtod_l+0x428>
 801470a:	495f      	ldr	r1, [pc, #380]	; (8014888 <_strtod_l+0x590>)
 801470c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014710:	4652      	mov	r2, sl
 8014712:	465b      	mov	r3, fp
 8014714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014718:	f7eb ff86 	bl	8000628 <__aeabi_dmul>
 801471c:	4682      	mov	sl, r0
 801471e:	468b      	mov	fp, r1
 8014720:	f038 080f 	bics.w	r8, r8, #15
 8014724:	d073      	beq.n	801480e <_strtod_l+0x516>
 8014726:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801472a:	dd47      	ble.n	80147bc <_strtod_l+0x4c4>
 801472c:	2400      	movs	r4, #0
 801472e:	46a0      	mov	r8, r4
 8014730:	9407      	str	r4, [sp, #28]
 8014732:	9405      	str	r4, [sp, #20]
 8014734:	2322      	movs	r3, #34	; 0x22
 8014736:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014890 <_strtod_l+0x598>
 801473a:	f8c9 3000 	str.w	r3, [r9]
 801473e:	f04f 0a00 	mov.w	sl, #0
 8014742:	9b07      	ldr	r3, [sp, #28]
 8014744:	2b00      	cmp	r3, #0
 8014746:	f43f ae16 	beq.w	8014376 <_strtod_l+0x7e>
 801474a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801474c:	4648      	mov	r0, r9
 801474e:	f001 fe61 	bl	8016414 <_Bfree>
 8014752:	9905      	ldr	r1, [sp, #20]
 8014754:	4648      	mov	r0, r9
 8014756:	f001 fe5d 	bl	8016414 <_Bfree>
 801475a:	4641      	mov	r1, r8
 801475c:	4648      	mov	r0, r9
 801475e:	f001 fe59 	bl	8016414 <_Bfree>
 8014762:	9907      	ldr	r1, [sp, #28]
 8014764:	4648      	mov	r0, r9
 8014766:	f001 fe55 	bl	8016414 <_Bfree>
 801476a:	4621      	mov	r1, r4
 801476c:	4648      	mov	r0, r9
 801476e:	f001 fe51 	bl	8016414 <_Bfree>
 8014772:	e600      	b.n	8014376 <_strtod_l+0x7e>
 8014774:	9a06      	ldr	r2, [sp, #24]
 8014776:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801477a:	4293      	cmp	r3, r2
 801477c:	dbba      	blt.n	80146f4 <_strtod_l+0x3fc>
 801477e:	4d42      	ldr	r5, [pc, #264]	; (8014888 <_strtod_l+0x590>)
 8014780:	f1c4 040f 	rsb	r4, r4, #15
 8014784:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014788:	4652      	mov	r2, sl
 801478a:	465b      	mov	r3, fp
 801478c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014790:	f7eb ff4a 	bl	8000628 <__aeabi_dmul>
 8014794:	9b06      	ldr	r3, [sp, #24]
 8014796:	1b1c      	subs	r4, r3, r4
 8014798:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801479c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147a0:	e78d      	b.n	80146be <_strtod_l+0x3c6>
 80147a2:	f113 0f16 	cmn.w	r3, #22
 80147a6:	dba5      	blt.n	80146f4 <_strtod_l+0x3fc>
 80147a8:	4a37      	ldr	r2, [pc, #220]	; (8014888 <_strtod_l+0x590>)
 80147aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80147ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80147b2:	4650      	mov	r0, sl
 80147b4:	4659      	mov	r1, fp
 80147b6:	f7ec f861 	bl	800087c <__aeabi_ddiv>
 80147ba:	e782      	b.n	80146c2 <_strtod_l+0x3ca>
 80147bc:	2300      	movs	r3, #0
 80147be:	4e33      	ldr	r6, [pc, #204]	; (801488c <_strtod_l+0x594>)
 80147c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80147c4:	4650      	mov	r0, sl
 80147c6:	4659      	mov	r1, fp
 80147c8:	461d      	mov	r5, r3
 80147ca:	f1b8 0f01 	cmp.w	r8, #1
 80147ce:	dc21      	bgt.n	8014814 <_strtod_l+0x51c>
 80147d0:	b10b      	cbz	r3, 80147d6 <_strtod_l+0x4de>
 80147d2:	4682      	mov	sl, r0
 80147d4:	468b      	mov	fp, r1
 80147d6:	4b2d      	ldr	r3, [pc, #180]	; (801488c <_strtod_l+0x594>)
 80147d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80147dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80147e0:	4652      	mov	r2, sl
 80147e2:	465b      	mov	r3, fp
 80147e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80147e8:	f7eb ff1e 	bl	8000628 <__aeabi_dmul>
 80147ec:	4b28      	ldr	r3, [pc, #160]	; (8014890 <_strtod_l+0x598>)
 80147ee:	460a      	mov	r2, r1
 80147f0:	400b      	ands	r3, r1
 80147f2:	4928      	ldr	r1, [pc, #160]	; (8014894 <_strtod_l+0x59c>)
 80147f4:	428b      	cmp	r3, r1
 80147f6:	4682      	mov	sl, r0
 80147f8:	d898      	bhi.n	801472c <_strtod_l+0x434>
 80147fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80147fe:	428b      	cmp	r3, r1
 8014800:	bf86      	itte	hi
 8014802:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801489c <_strtod_l+0x5a4>
 8014806:	f04f 3aff 	movhi.w	sl, #4294967295
 801480a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801480e:	2300      	movs	r3, #0
 8014810:	9304      	str	r3, [sp, #16]
 8014812:	e077      	b.n	8014904 <_strtod_l+0x60c>
 8014814:	f018 0f01 	tst.w	r8, #1
 8014818:	d006      	beq.n	8014828 <_strtod_l+0x530>
 801481a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014822:	f7eb ff01 	bl	8000628 <__aeabi_dmul>
 8014826:	2301      	movs	r3, #1
 8014828:	3501      	adds	r5, #1
 801482a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801482e:	e7cc      	b.n	80147ca <_strtod_l+0x4d2>
 8014830:	d0ed      	beq.n	801480e <_strtod_l+0x516>
 8014832:	f1c8 0800 	rsb	r8, r8, #0
 8014836:	f018 020f 	ands.w	r2, r8, #15
 801483a:	d00a      	beq.n	8014852 <_strtod_l+0x55a>
 801483c:	4b12      	ldr	r3, [pc, #72]	; (8014888 <_strtod_l+0x590>)
 801483e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014842:	4650      	mov	r0, sl
 8014844:	4659      	mov	r1, fp
 8014846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484a:	f7ec f817 	bl	800087c <__aeabi_ddiv>
 801484e:	4682      	mov	sl, r0
 8014850:	468b      	mov	fp, r1
 8014852:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014856:	d0da      	beq.n	801480e <_strtod_l+0x516>
 8014858:	f1b8 0f1f 	cmp.w	r8, #31
 801485c:	dd20      	ble.n	80148a0 <_strtod_l+0x5a8>
 801485e:	2400      	movs	r4, #0
 8014860:	46a0      	mov	r8, r4
 8014862:	9407      	str	r4, [sp, #28]
 8014864:	9405      	str	r4, [sp, #20]
 8014866:	2322      	movs	r3, #34	; 0x22
 8014868:	f04f 0a00 	mov.w	sl, #0
 801486c:	f04f 0b00 	mov.w	fp, #0
 8014870:	f8c9 3000 	str.w	r3, [r9]
 8014874:	e765      	b.n	8014742 <_strtod_l+0x44a>
 8014876:	bf00      	nop
 8014878:	0801808d 	.word	0x0801808d
 801487c:	08018113 	.word	0x08018113
 8014880:	08018095 	.word	0x08018095
 8014884:	080180d4 	.word	0x080180d4
 8014888:	080181b8 	.word	0x080181b8
 801488c:	08018190 	.word	0x08018190
 8014890:	7ff00000 	.word	0x7ff00000
 8014894:	7ca00000 	.word	0x7ca00000
 8014898:	fff80000 	.word	0xfff80000
 801489c:	7fefffff 	.word	0x7fefffff
 80148a0:	f018 0310 	ands.w	r3, r8, #16
 80148a4:	bf18      	it	ne
 80148a6:	236a      	movne	r3, #106	; 0x6a
 80148a8:	4da0      	ldr	r5, [pc, #640]	; (8014b2c <_strtod_l+0x834>)
 80148aa:	9304      	str	r3, [sp, #16]
 80148ac:	4650      	mov	r0, sl
 80148ae:	4659      	mov	r1, fp
 80148b0:	2300      	movs	r3, #0
 80148b2:	f1b8 0f00 	cmp.w	r8, #0
 80148b6:	f300 810a 	bgt.w	8014ace <_strtod_l+0x7d6>
 80148ba:	b10b      	cbz	r3, 80148c0 <_strtod_l+0x5c8>
 80148bc:	4682      	mov	sl, r0
 80148be:	468b      	mov	fp, r1
 80148c0:	9b04      	ldr	r3, [sp, #16]
 80148c2:	b1bb      	cbz	r3, 80148f4 <_strtod_l+0x5fc>
 80148c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80148c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	4659      	mov	r1, fp
 80148d0:	dd10      	ble.n	80148f4 <_strtod_l+0x5fc>
 80148d2:	2b1f      	cmp	r3, #31
 80148d4:	f340 8107 	ble.w	8014ae6 <_strtod_l+0x7ee>
 80148d8:	2b34      	cmp	r3, #52	; 0x34
 80148da:	bfde      	ittt	le
 80148dc:	3b20      	suble	r3, #32
 80148de:	f04f 32ff 	movle.w	r2, #4294967295
 80148e2:	fa02 f303 	lslle.w	r3, r2, r3
 80148e6:	f04f 0a00 	mov.w	sl, #0
 80148ea:	bfcc      	ite	gt
 80148ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80148f0:	ea03 0b01 	andle.w	fp, r3, r1
 80148f4:	2200      	movs	r2, #0
 80148f6:	2300      	movs	r3, #0
 80148f8:	4650      	mov	r0, sl
 80148fa:	4659      	mov	r1, fp
 80148fc:	f7ec f8fc 	bl	8000af8 <__aeabi_dcmpeq>
 8014900:	2800      	cmp	r0, #0
 8014902:	d1ac      	bne.n	801485e <_strtod_l+0x566>
 8014904:	9b07      	ldr	r3, [sp, #28]
 8014906:	9300      	str	r3, [sp, #0]
 8014908:	9a05      	ldr	r2, [sp, #20]
 801490a:	9908      	ldr	r1, [sp, #32]
 801490c:	4623      	mov	r3, r4
 801490e:	4648      	mov	r0, r9
 8014910:	f001 fdd2 	bl	80164b8 <__s2b>
 8014914:	9007      	str	r0, [sp, #28]
 8014916:	2800      	cmp	r0, #0
 8014918:	f43f af08 	beq.w	801472c <_strtod_l+0x434>
 801491c:	9a06      	ldr	r2, [sp, #24]
 801491e:	9b06      	ldr	r3, [sp, #24]
 8014920:	2a00      	cmp	r2, #0
 8014922:	f1c3 0300 	rsb	r3, r3, #0
 8014926:	bfa8      	it	ge
 8014928:	2300      	movge	r3, #0
 801492a:	930e      	str	r3, [sp, #56]	; 0x38
 801492c:	2400      	movs	r4, #0
 801492e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014932:	9316      	str	r3, [sp, #88]	; 0x58
 8014934:	46a0      	mov	r8, r4
 8014936:	9b07      	ldr	r3, [sp, #28]
 8014938:	4648      	mov	r0, r9
 801493a:	6859      	ldr	r1, [r3, #4]
 801493c:	f001 fd36 	bl	80163ac <_Balloc>
 8014940:	9005      	str	r0, [sp, #20]
 8014942:	2800      	cmp	r0, #0
 8014944:	f43f aef6 	beq.w	8014734 <_strtod_l+0x43c>
 8014948:	9b07      	ldr	r3, [sp, #28]
 801494a:	691a      	ldr	r2, [r3, #16]
 801494c:	3202      	adds	r2, #2
 801494e:	f103 010c 	add.w	r1, r3, #12
 8014952:	0092      	lsls	r2, r2, #2
 8014954:	300c      	adds	r0, #12
 8014956:	f7fe fdd3 	bl	8013500 <memcpy>
 801495a:	aa1e      	add	r2, sp, #120	; 0x78
 801495c:	a91d      	add	r1, sp, #116	; 0x74
 801495e:	ec4b ab10 	vmov	d0, sl, fp
 8014962:	4648      	mov	r0, r9
 8014964:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014968:	f002 f862 	bl	8016a30 <__d2b>
 801496c:	901c      	str	r0, [sp, #112]	; 0x70
 801496e:	2800      	cmp	r0, #0
 8014970:	f43f aee0 	beq.w	8014734 <_strtod_l+0x43c>
 8014974:	2101      	movs	r1, #1
 8014976:	4648      	mov	r0, r9
 8014978:	f001 fe2a 	bl	80165d0 <__i2b>
 801497c:	4680      	mov	r8, r0
 801497e:	2800      	cmp	r0, #0
 8014980:	f43f aed8 	beq.w	8014734 <_strtod_l+0x43c>
 8014984:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014986:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014988:	2e00      	cmp	r6, #0
 801498a:	bfab      	itete	ge
 801498c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801498e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014990:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014992:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014994:	bfac      	ite	ge
 8014996:	18f7      	addge	r7, r6, r3
 8014998:	1b9d      	sublt	r5, r3, r6
 801499a:	9b04      	ldr	r3, [sp, #16]
 801499c:	1af6      	subs	r6, r6, r3
 801499e:	4416      	add	r6, r2
 80149a0:	4b63      	ldr	r3, [pc, #396]	; (8014b30 <_strtod_l+0x838>)
 80149a2:	3e01      	subs	r6, #1
 80149a4:	429e      	cmp	r6, r3
 80149a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80149aa:	f280 80af 	bge.w	8014b0c <_strtod_l+0x814>
 80149ae:	1b9b      	subs	r3, r3, r6
 80149b0:	2b1f      	cmp	r3, #31
 80149b2:	eba2 0203 	sub.w	r2, r2, r3
 80149b6:	f04f 0101 	mov.w	r1, #1
 80149ba:	f300 809b 	bgt.w	8014af4 <_strtod_l+0x7fc>
 80149be:	fa01 f303 	lsl.w	r3, r1, r3
 80149c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80149c4:	2300      	movs	r3, #0
 80149c6:	930a      	str	r3, [sp, #40]	; 0x28
 80149c8:	18be      	adds	r6, r7, r2
 80149ca:	9b04      	ldr	r3, [sp, #16]
 80149cc:	42b7      	cmp	r7, r6
 80149ce:	4415      	add	r5, r2
 80149d0:	441d      	add	r5, r3
 80149d2:	463b      	mov	r3, r7
 80149d4:	bfa8      	it	ge
 80149d6:	4633      	movge	r3, r6
 80149d8:	42ab      	cmp	r3, r5
 80149da:	bfa8      	it	ge
 80149dc:	462b      	movge	r3, r5
 80149de:	2b00      	cmp	r3, #0
 80149e0:	bfc2      	ittt	gt
 80149e2:	1af6      	subgt	r6, r6, r3
 80149e4:	1aed      	subgt	r5, r5, r3
 80149e6:	1aff      	subgt	r7, r7, r3
 80149e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149ea:	b1bb      	cbz	r3, 8014a1c <_strtod_l+0x724>
 80149ec:	4641      	mov	r1, r8
 80149ee:	461a      	mov	r2, r3
 80149f0:	4648      	mov	r0, r9
 80149f2:	f001 fe8d 	bl	8016710 <__pow5mult>
 80149f6:	4680      	mov	r8, r0
 80149f8:	2800      	cmp	r0, #0
 80149fa:	f43f ae9b 	beq.w	8014734 <_strtod_l+0x43c>
 80149fe:	4601      	mov	r1, r0
 8014a00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014a02:	4648      	mov	r0, r9
 8014a04:	f001 fded 	bl	80165e2 <__multiply>
 8014a08:	900c      	str	r0, [sp, #48]	; 0x30
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	f43f ae92 	beq.w	8014734 <_strtod_l+0x43c>
 8014a10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a12:	4648      	mov	r0, r9
 8014a14:	f001 fcfe 	bl	8016414 <_Bfree>
 8014a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a1a:	931c      	str	r3, [sp, #112]	; 0x70
 8014a1c:	2e00      	cmp	r6, #0
 8014a1e:	dc7a      	bgt.n	8014b16 <_strtod_l+0x81e>
 8014a20:	9b06      	ldr	r3, [sp, #24]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	dd08      	ble.n	8014a38 <_strtod_l+0x740>
 8014a26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a28:	9905      	ldr	r1, [sp, #20]
 8014a2a:	4648      	mov	r0, r9
 8014a2c:	f001 fe70 	bl	8016710 <__pow5mult>
 8014a30:	9005      	str	r0, [sp, #20]
 8014a32:	2800      	cmp	r0, #0
 8014a34:	f43f ae7e 	beq.w	8014734 <_strtod_l+0x43c>
 8014a38:	2d00      	cmp	r5, #0
 8014a3a:	dd08      	ble.n	8014a4e <_strtod_l+0x756>
 8014a3c:	462a      	mov	r2, r5
 8014a3e:	9905      	ldr	r1, [sp, #20]
 8014a40:	4648      	mov	r0, r9
 8014a42:	f001 feb3 	bl	80167ac <__lshift>
 8014a46:	9005      	str	r0, [sp, #20]
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	f43f ae73 	beq.w	8014734 <_strtod_l+0x43c>
 8014a4e:	2f00      	cmp	r7, #0
 8014a50:	dd08      	ble.n	8014a64 <_strtod_l+0x76c>
 8014a52:	4641      	mov	r1, r8
 8014a54:	463a      	mov	r2, r7
 8014a56:	4648      	mov	r0, r9
 8014a58:	f001 fea8 	bl	80167ac <__lshift>
 8014a5c:	4680      	mov	r8, r0
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	f43f ae68 	beq.w	8014734 <_strtod_l+0x43c>
 8014a64:	9a05      	ldr	r2, [sp, #20]
 8014a66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a68:	4648      	mov	r0, r9
 8014a6a:	f001 ff0d 	bl	8016888 <__mdiff>
 8014a6e:	4604      	mov	r4, r0
 8014a70:	2800      	cmp	r0, #0
 8014a72:	f43f ae5f 	beq.w	8014734 <_strtod_l+0x43c>
 8014a76:	68c3      	ldr	r3, [r0, #12]
 8014a78:	930c      	str	r3, [sp, #48]	; 0x30
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	60c3      	str	r3, [r0, #12]
 8014a7e:	4641      	mov	r1, r8
 8014a80:	f001 fee8 	bl	8016854 <__mcmp>
 8014a84:	2800      	cmp	r0, #0
 8014a86:	da55      	bge.n	8014b34 <_strtod_l+0x83c>
 8014a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a8a:	b9e3      	cbnz	r3, 8014ac6 <_strtod_l+0x7ce>
 8014a8c:	f1ba 0f00 	cmp.w	sl, #0
 8014a90:	d119      	bne.n	8014ac6 <_strtod_l+0x7ce>
 8014a92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a96:	b9b3      	cbnz	r3, 8014ac6 <_strtod_l+0x7ce>
 8014a98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a9c:	0d1b      	lsrs	r3, r3, #20
 8014a9e:	051b      	lsls	r3, r3, #20
 8014aa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014aa4:	d90f      	bls.n	8014ac6 <_strtod_l+0x7ce>
 8014aa6:	6963      	ldr	r3, [r4, #20]
 8014aa8:	b913      	cbnz	r3, 8014ab0 <_strtod_l+0x7b8>
 8014aaa:	6923      	ldr	r3, [r4, #16]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	dd0a      	ble.n	8014ac6 <_strtod_l+0x7ce>
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	4648      	mov	r0, r9
 8014ab6:	f001 fe79 	bl	80167ac <__lshift>
 8014aba:	4641      	mov	r1, r8
 8014abc:	4604      	mov	r4, r0
 8014abe:	f001 fec9 	bl	8016854 <__mcmp>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	dc67      	bgt.n	8014b96 <_strtod_l+0x89e>
 8014ac6:	9b04      	ldr	r3, [sp, #16]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d171      	bne.n	8014bb0 <_strtod_l+0x8b8>
 8014acc:	e63d      	b.n	801474a <_strtod_l+0x452>
 8014ace:	f018 0f01 	tst.w	r8, #1
 8014ad2:	d004      	beq.n	8014ade <_strtod_l+0x7e6>
 8014ad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ad8:	f7eb fda6 	bl	8000628 <__aeabi_dmul>
 8014adc:	2301      	movs	r3, #1
 8014ade:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014ae2:	3508      	adds	r5, #8
 8014ae4:	e6e5      	b.n	80148b2 <_strtod_l+0x5ba>
 8014ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8014aea:	fa02 f303 	lsl.w	r3, r2, r3
 8014aee:	ea03 0a0a 	and.w	sl, r3, sl
 8014af2:	e6ff      	b.n	80148f4 <_strtod_l+0x5fc>
 8014af4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014af8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014afc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014b00:	36e2      	adds	r6, #226	; 0xe2
 8014b02:	fa01 f306 	lsl.w	r3, r1, r6
 8014b06:	930a      	str	r3, [sp, #40]	; 0x28
 8014b08:	910f      	str	r1, [sp, #60]	; 0x3c
 8014b0a:	e75d      	b.n	80149c8 <_strtod_l+0x6d0>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8014b10:	2301      	movs	r3, #1
 8014b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b14:	e758      	b.n	80149c8 <_strtod_l+0x6d0>
 8014b16:	4632      	mov	r2, r6
 8014b18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014b1a:	4648      	mov	r0, r9
 8014b1c:	f001 fe46 	bl	80167ac <__lshift>
 8014b20:	901c      	str	r0, [sp, #112]	; 0x70
 8014b22:	2800      	cmp	r0, #0
 8014b24:	f47f af7c 	bne.w	8014a20 <_strtod_l+0x728>
 8014b28:	e604      	b.n	8014734 <_strtod_l+0x43c>
 8014b2a:	bf00      	nop
 8014b2c:	080180e8 	.word	0x080180e8
 8014b30:	fffffc02 	.word	0xfffffc02
 8014b34:	465d      	mov	r5, fp
 8014b36:	f040 8086 	bne.w	8014c46 <_strtod_l+0x94e>
 8014b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b40:	b32a      	cbz	r2, 8014b8e <_strtod_l+0x896>
 8014b42:	4aaf      	ldr	r2, [pc, #700]	; (8014e00 <_strtod_l+0xb08>)
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d153      	bne.n	8014bf0 <_strtod_l+0x8f8>
 8014b48:	9b04      	ldr	r3, [sp, #16]
 8014b4a:	4650      	mov	r0, sl
 8014b4c:	b1d3      	cbz	r3, 8014b84 <_strtod_l+0x88c>
 8014b4e:	4aad      	ldr	r2, [pc, #692]	; (8014e04 <_strtod_l+0xb0c>)
 8014b50:	402a      	ands	r2, r5
 8014b52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014b56:	f04f 31ff 	mov.w	r1, #4294967295
 8014b5a:	d816      	bhi.n	8014b8a <_strtod_l+0x892>
 8014b5c:	0d12      	lsrs	r2, r2, #20
 8014b5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014b62:	fa01 f303 	lsl.w	r3, r1, r3
 8014b66:	4298      	cmp	r0, r3
 8014b68:	d142      	bne.n	8014bf0 <_strtod_l+0x8f8>
 8014b6a:	4ba7      	ldr	r3, [pc, #668]	; (8014e08 <_strtod_l+0xb10>)
 8014b6c:	429d      	cmp	r5, r3
 8014b6e:	d102      	bne.n	8014b76 <_strtod_l+0x87e>
 8014b70:	3001      	adds	r0, #1
 8014b72:	f43f addf 	beq.w	8014734 <_strtod_l+0x43c>
 8014b76:	4ba3      	ldr	r3, [pc, #652]	; (8014e04 <_strtod_l+0xb0c>)
 8014b78:	402b      	ands	r3, r5
 8014b7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014b7e:	f04f 0a00 	mov.w	sl, #0
 8014b82:	e7a0      	b.n	8014ac6 <_strtod_l+0x7ce>
 8014b84:	f04f 33ff 	mov.w	r3, #4294967295
 8014b88:	e7ed      	b.n	8014b66 <_strtod_l+0x86e>
 8014b8a:	460b      	mov	r3, r1
 8014b8c:	e7eb      	b.n	8014b66 <_strtod_l+0x86e>
 8014b8e:	bb7b      	cbnz	r3, 8014bf0 <_strtod_l+0x8f8>
 8014b90:	f1ba 0f00 	cmp.w	sl, #0
 8014b94:	d12c      	bne.n	8014bf0 <_strtod_l+0x8f8>
 8014b96:	9904      	ldr	r1, [sp, #16]
 8014b98:	4a9a      	ldr	r2, [pc, #616]	; (8014e04 <_strtod_l+0xb0c>)
 8014b9a:	465b      	mov	r3, fp
 8014b9c:	b1f1      	cbz	r1, 8014bdc <_strtod_l+0x8e4>
 8014b9e:	ea02 010b 	and.w	r1, r2, fp
 8014ba2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014ba6:	dc19      	bgt.n	8014bdc <_strtod_l+0x8e4>
 8014ba8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014bac:	f77f ae5b 	ble.w	8014866 <_strtod_l+0x56e>
 8014bb0:	4a96      	ldr	r2, [pc, #600]	; (8014e0c <_strtod_l+0xb14>)
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014bb8:	4650      	mov	r0, sl
 8014bba:	4659      	mov	r1, fp
 8014bbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014bc0:	f7eb fd32 	bl	8000628 <__aeabi_dmul>
 8014bc4:	4682      	mov	sl, r0
 8014bc6:	468b      	mov	fp, r1
 8014bc8:	2900      	cmp	r1, #0
 8014bca:	f47f adbe 	bne.w	801474a <_strtod_l+0x452>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	f47f adbb 	bne.w	801474a <_strtod_l+0x452>
 8014bd4:	2322      	movs	r3, #34	; 0x22
 8014bd6:	f8c9 3000 	str.w	r3, [r9]
 8014bda:	e5b6      	b.n	801474a <_strtod_l+0x452>
 8014bdc:	4013      	ands	r3, r2
 8014bde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014be2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014be6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014bea:	f04f 3aff 	mov.w	sl, #4294967295
 8014bee:	e76a      	b.n	8014ac6 <_strtod_l+0x7ce>
 8014bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bf2:	b193      	cbz	r3, 8014c1a <_strtod_l+0x922>
 8014bf4:	422b      	tst	r3, r5
 8014bf6:	f43f af66 	beq.w	8014ac6 <_strtod_l+0x7ce>
 8014bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bfc:	9a04      	ldr	r2, [sp, #16]
 8014bfe:	4650      	mov	r0, sl
 8014c00:	4659      	mov	r1, fp
 8014c02:	b173      	cbz	r3, 8014c22 <_strtod_l+0x92a>
 8014c04:	f7ff fb5c 	bl	80142c0 <sulp>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c10:	f7eb fb54 	bl	80002bc <__adddf3>
 8014c14:	4682      	mov	sl, r0
 8014c16:	468b      	mov	fp, r1
 8014c18:	e755      	b.n	8014ac6 <_strtod_l+0x7ce>
 8014c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c1c:	ea13 0f0a 	tst.w	r3, sl
 8014c20:	e7e9      	b.n	8014bf6 <_strtod_l+0x8fe>
 8014c22:	f7ff fb4d 	bl	80142c0 <sulp>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c2e:	f7eb fb43 	bl	80002b8 <__aeabi_dsub>
 8014c32:	2200      	movs	r2, #0
 8014c34:	2300      	movs	r3, #0
 8014c36:	4682      	mov	sl, r0
 8014c38:	468b      	mov	fp, r1
 8014c3a:	f7eb ff5d 	bl	8000af8 <__aeabi_dcmpeq>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	f47f ae11 	bne.w	8014866 <_strtod_l+0x56e>
 8014c44:	e73f      	b.n	8014ac6 <_strtod_l+0x7ce>
 8014c46:	4641      	mov	r1, r8
 8014c48:	4620      	mov	r0, r4
 8014c4a:	f001 ff40 	bl	8016ace <__ratio>
 8014c4e:	ec57 6b10 	vmov	r6, r7, d0
 8014c52:	2200      	movs	r2, #0
 8014c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014c58:	ee10 0a10 	vmov	r0, s0
 8014c5c:	4639      	mov	r1, r7
 8014c5e:	f7eb ff5f 	bl	8000b20 <__aeabi_dcmple>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d077      	beq.n	8014d56 <_strtod_l+0xa5e>
 8014c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d04a      	beq.n	8014d02 <_strtod_l+0xa0a>
 8014c6c:	4b68      	ldr	r3, [pc, #416]	; (8014e10 <_strtod_l+0xb18>)
 8014c6e:	2200      	movs	r2, #0
 8014c70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014c74:	4f66      	ldr	r7, [pc, #408]	; (8014e10 <_strtod_l+0xb18>)
 8014c76:	2600      	movs	r6, #0
 8014c78:	4b62      	ldr	r3, [pc, #392]	; (8014e04 <_strtod_l+0xb0c>)
 8014c7a:	402b      	ands	r3, r5
 8014c7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c80:	4b64      	ldr	r3, [pc, #400]	; (8014e14 <_strtod_l+0xb1c>)
 8014c82:	429a      	cmp	r2, r3
 8014c84:	f040 80ce 	bne.w	8014e24 <_strtod_l+0xb2c>
 8014c88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014c8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c90:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014c94:	ec4b ab10 	vmov	d0, sl, fp
 8014c98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014c9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014ca0:	f001 fe50 	bl	8016944 <__ulp>
 8014ca4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ca8:	ec53 2b10 	vmov	r2, r3, d0
 8014cac:	f7eb fcbc 	bl	8000628 <__aeabi_dmul>
 8014cb0:	4652      	mov	r2, sl
 8014cb2:	465b      	mov	r3, fp
 8014cb4:	f7eb fb02 	bl	80002bc <__adddf3>
 8014cb8:	460b      	mov	r3, r1
 8014cba:	4952      	ldr	r1, [pc, #328]	; (8014e04 <_strtod_l+0xb0c>)
 8014cbc:	4a56      	ldr	r2, [pc, #344]	; (8014e18 <_strtod_l+0xb20>)
 8014cbe:	4019      	ands	r1, r3
 8014cc0:	4291      	cmp	r1, r2
 8014cc2:	4682      	mov	sl, r0
 8014cc4:	d95b      	bls.n	8014d7e <_strtod_l+0xa86>
 8014cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cc8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	d103      	bne.n	8014cd8 <_strtod_l+0x9e0>
 8014cd0:	9b08      	ldr	r3, [sp, #32]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	f43f ad2e 	beq.w	8014734 <_strtod_l+0x43c>
 8014cd8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014e08 <_strtod_l+0xb10>
 8014cdc:	f04f 3aff 	mov.w	sl, #4294967295
 8014ce0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014ce2:	4648      	mov	r0, r9
 8014ce4:	f001 fb96 	bl	8016414 <_Bfree>
 8014ce8:	9905      	ldr	r1, [sp, #20]
 8014cea:	4648      	mov	r0, r9
 8014cec:	f001 fb92 	bl	8016414 <_Bfree>
 8014cf0:	4641      	mov	r1, r8
 8014cf2:	4648      	mov	r0, r9
 8014cf4:	f001 fb8e 	bl	8016414 <_Bfree>
 8014cf8:	4621      	mov	r1, r4
 8014cfa:	4648      	mov	r0, r9
 8014cfc:	f001 fb8a 	bl	8016414 <_Bfree>
 8014d00:	e619      	b.n	8014936 <_strtod_l+0x63e>
 8014d02:	f1ba 0f00 	cmp.w	sl, #0
 8014d06:	d11a      	bne.n	8014d3e <_strtod_l+0xa46>
 8014d08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d0c:	b9eb      	cbnz	r3, 8014d4a <_strtod_l+0xa52>
 8014d0e:	2200      	movs	r2, #0
 8014d10:	4b3f      	ldr	r3, [pc, #252]	; (8014e10 <_strtod_l+0xb18>)
 8014d12:	4630      	mov	r0, r6
 8014d14:	4639      	mov	r1, r7
 8014d16:	f7eb fef9 	bl	8000b0c <__aeabi_dcmplt>
 8014d1a:	b9c8      	cbnz	r0, 8014d50 <_strtod_l+0xa58>
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	4639      	mov	r1, r7
 8014d20:	2200      	movs	r2, #0
 8014d22:	4b3e      	ldr	r3, [pc, #248]	; (8014e1c <_strtod_l+0xb24>)
 8014d24:	f7eb fc80 	bl	8000628 <__aeabi_dmul>
 8014d28:	4606      	mov	r6, r0
 8014d2a:	460f      	mov	r7, r1
 8014d2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014d30:	9618      	str	r6, [sp, #96]	; 0x60
 8014d32:	9319      	str	r3, [sp, #100]	; 0x64
 8014d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014d38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014d3c:	e79c      	b.n	8014c78 <_strtod_l+0x980>
 8014d3e:	f1ba 0f01 	cmp.w	sl, #1
 8014d42:	d102      	bne.n	8014d4a <_strtod_l+0xa52>
 8014d44:	2d00      	cmp	r5, #0
 8014d46:	f43f ad8e 	beq.w	8014866 <_strtod_l+0x56e>
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	4b34      	ldr	r3, [pc, #208]	; (8014e20 <_strtod_l+0xb28>)
 8014d4e:	e78f      	b.n	8014c70 <_strtod_l+0x978>
 8014d50:	2600      	movs	r6, #0
 8014d52:	4f32      	ldr	r7, [pc, #200]	; (8014e1c <_strtod_l+0xb24>)
 8014d54:	e7ea      	b.n	8014d2c <_strtod_l+0xa34>
 8014d56:	4b31      	ldr	r3, [pc, #196]	; (8014e1c <_strtod_l+0xb24>)
 8014d58:	4630      	mov	r0, r6
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f7eb fc63 	bl	8000628 <__aeabi_dmul>
 8014d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d64:	4606      	mov	r6, r0
 8014d66:	460f      	mov	r7, r1
 8014d68:	b933      	cbnz	r3, 8014d78 <_strtod_l+0xa80>
 8014d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d6e:	9010      	str	r0, [sp, #64]	; 0x40
 8014d70:	9311      	str	r3, [sp, #68]	; 0x44
 8014d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d76:	e7df      	b.n	8014d38 <_strtod_l+0xa40>
 8014d78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014d7c:	e7f9      	b.n	8014d72 <_strtod_l+0xa7a>
 8014d7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014d82:	9b04      	ldr	r3, [sp, #16]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1ab      	bne.n	8014ce0 <_strtod_l+0x9e8>
 8014d88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014d8c:	0d1b      	lsrs	r3, r3, #20
 8014d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d90:	051b      	lsls	r3, r3, #20
 8014d92:	429a      	cmp	r2, r3
 8014d94:	465d      	mov	r5, fp
 8014d96:	d1a3      	bne.n	8014ce0 <_strtod_l+0x9e8>
 8014d98:	4639      	mov	r1, r7
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f7eb fef4 	bl	8000b88 <__aeabi_d2iz>
 8014da0:	f7eb fbd8 	bl	8000554 <__aeabi_i2d>
 8014da4:	460b      	mov	r3, r1
 8014da6:	4602      	mov	r2, r0
 8014da8:	4639      	mov	r1, r7
 8014daa:	4630      	mov	r0, r6
 8014dac:	f7eb fa84 	bl	80002b8 <__aeabi_dsub>
 8014db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014db2:	4606      	mov	r6, r0
 8014db4:	460f      	mov	r7, r1
 8014db6:	b933      	cbnz	r3, 8014dc6 <_strtod_l+0xace>
 8014db8:	f1ba 0f00 	cmp.w	sl, #0
 8014dbc:	d103      	bne.n	8014dc6 <_strtod_l+0xace>
 8014dbe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014dc2:	2d00      	cmp	r5, #0
 8014dc4:	d06d      	beq.n	8014ea2 <_strtod_l+0xbaa>
 8014dc6:	a30a      	add	r3, pc, #40	; (adr r3, 8014df0 <_strtod_l+0xaf8>)
 8014dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dcc:	4630      	mov	r0, r6
 8014dce:	4639      	mov	r1, r7
 8014dd0:	f7eb fe9c 	bl	8000b0c <__aeabi_dcmplt>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	f47f acb8 	bne.w	801474a <_strtod_l+0x452>
 8014dda:	a307      	add	r3, pc, #28	; (adr r3, 8014df8 <_strtod_l+0xb00>)
 8014ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de0:	4630      	mov	r0, r6
 8014de2:	4639      	mov	r1, r7
 8014de4:	f7eb feb0 	bl	8000b48 <__aeabi_dcmpgt>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	f43f af79 	beq.w	8014ce0 <_strtod_l+0x9e8>
 8014dee:	e4ac      	b.n	801474a <_strtod_l+0x452>
 8014df0:	94a03595 	.word	0x94a03595
 8014df4:	3fdfffff 	.word	0x3fdfffff
 8014df8:	35afe535 	.word	0x35afe535
 8014dfc:	3fe00000 	.word	0x3fe00000
 8014e00:	000fffff 	.word	0x000fffff
 8014e04:	7ff00000 	.word	0x7ff00000
 8014e08:	7fefffff 	.word	0x7fefffff
 8014e0c:	39500000 	.word	0x39500000
 8014e10:	3ff00000 	.word	0x3ff00000
 8014e14:	7fe00000 	.word	0x7fe00000
 8014e18:	7c9fffff 	.word	0x7c9fffff
 8014e1c:	3fe00000 	.word	0x3fe00000
 8014e20:	bff00000 	.word	0xbff00000
 8014e24:	9b04      	ldr	r3, [sp, #16]
 8014e26:	b333      	cbz	r3, 8014e76 <_strtod_l+0xb7e>
 8014e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014e2e:	d822      	bhi.n	8014e76 <_strtod_l+0xb7e>
 8014e30:	a327      	add	r3, pc, #156	; (adr r3, 8014ed0 <_strtod_l+0xbd8>)
 8014e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e36:	4630      	mov	r0, r6
 8014e38:	4639      	mov	r1, r7
 8014e3a:	f7eb fe71 	bl	8000b20 <__aeabi_dcmple>
 8014e3e:	b1a0      	cbz	r0, 8014e6a <_strtod_l+0xb72>
 8014e40:	4639      	mov	r1, r7
 8014e42:	4630      	mov	r0, r6
 8014e44:	f7eb fec8 	bl	8000bd8 <__aeabi_d2uiz>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	bf08      	it	eq
 8014e4c:	2001      	moveq	r0, #1
 8014e4e:	f7eb fb71 	bl	8000534 <__aeabi_ui2d>
 8014e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e54:	4606      	mov	r6, r0
 8014e56:	460f      	mov	r7, r1
 8014e58:	bb03      	cbnz	r3, 8014e9c <_strtod_l+0xba4>
 8014e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e5e:	9012      	str	r0, [sp, #72]	; 0x48
 8014e60:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014e66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e6e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014e72:	1a9b      	subs	r3, r3, r2
 8014e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e76:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014e7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014e7e:	f001 fd61 	bl	8016944 <__ulp>
 8014e82:	4650      	mov	r0, sl
 8014e84:	ec53 2b10 	vmov	r2, r3, d0
 8014e88:	4659      	mov	r1, fp
 8014e8a:	f7eb fbcd 	bl	8000628 <__aeabi_dmul>
 8014e8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e92:	f7eb fa13 	bl	80002bc <__adddf3>
 8014e96:	4682      	mov	sl, r0
 8014e98:	468b      	mov	fp, r1
 8014e9a:	e772      	b.n	8014d82 <_strtod_l+0xa8a>
 8014e9c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014ea0:	e7df      	b.n	8014e62 <_strtod_l+0xb6a>
 8014ea2:	a30d      	add	r3, pc, #52	; (adr r3, 8014ed8 <_strtod_l+0xbe0>)
 8014ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea8:	f7eb fe30 	bl	8000b0c <__aeabi_dcmplt>
 8014eac:	e79c      	b.n	8014de8 <_strtod_l+0xaf0>
 8014eae:	2300      	movs	r3, #0
 8014eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8014eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014eb6:	6013      	str	r3, [r2, #0]
 8014eb8:	f7ff ba61 	b.w	801437e <_strtod_l+0x86>
 8014ebc:	2b65      	cmp	r3, #101	; 0x65
 8014ebe:	f04f 0200 	mov.w	r2, #0
 8014ec2:	f43f ab4e 	beq.w	8014562 <_strtod_l+0x26a>
 8014ec6:	2101      	movs	r1, #1
 8014ec8:	4614      	mov	r4, r2
 8014eca:	9104      	str	r1, [sp, #16]
 8014ecc:	f7ff bacb 	b.w	8014466 <_strtod_l+0x16e>
 8014ed0:	ffc00000 	.word	0xffc00000
 8014ed4:	41dfffff 	.word	0x41dfffff
 8014ed8:	94a03595 	.word	0x94a03595
 8014edc:	3fcfffff 	.word	0x3fcfffff

08014ee0 <_strtod_r>:
 8014ee0:	4b05      	ldr	r3, [pc, #20]	; (8014ef8 <_strtod_r+0x18>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	b410      	push	{r4}
 8014ee6:	6a1b      	ldr	r3, [r3, #32]
 8014ee8:	4c04      	ldr	r4, [pc, #16]	; (8014efc <_strtod_r+0x1c>)
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	bf08      	it	eq
 8014eee:	4623      	moveq	r3, r4
 8014ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ef4:	f7ff ba00 	b.w	80142f8 <_strtod_l>
 8014ef8:	2000000c 	.word	0x2000000c
 8014efc:	20000070 	.word	0x20000070

08014f00 <_strtol_l.isra.0>:
 8014f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f04:	4680      	mov	r8, r0
 8014f06:	4689      	mov	r9, r1
 8014f08:	4692      	mov	sl, r2
 8014f0a:	461e      	mov	r6, r3
 8014f0c:	460f      	mov	r7, r1
 8014f0e:	463d      	mov	r5, r7
 8014f10:	9808      	ldr	r0, [sp, #32]
 8014f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f16:	f001 fa0d 	bl	8016334 <__locale_ctype_ptr_l>
 8014f1a:	4420      	add	r0, r4
 8014f1c:	7843      	ldrb	r3, [r0, #1]
 8014f1e:	f013 0308 	ands.w	r3, r3, #8
 8014f22:	d132      	bne.n	8014f8a <_strtol_l.isra.0+0x8a>
 8014f24:	2c2d      	cmp	r4, #45	; 0x2d
 8014f26:	d132      	bne.n	8014f8e <_strtol_l.isra.0+0x8e>
 8014f28:	787c      	ldrb	r4, [r7, #1]
 8014f2a:	1cbd      	adds	r5, r7, #2
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	2e00      	cmp	r6, #0
 8014f30:	d05d      	beq.n	8014fee <_strtol_l.isra.0+0xee>
 8014f32:	2e10      	cmp	r6, #16
 8014f34:	d109      	bne.n	8014f4a <_strtol_l.isra.0+0x4a>
 8014f36:	2c30      	cmp	r4, #48	; 0x30
 8014f38:	d107      	bne.n	8014f4a <_strtol_l.isra.0+0x4a>
 8014f3a:	782b      	ldrb	r3, [r5, #0]
 8014f3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014f40:	2b58      	cmp	r3, #88	; 0x58
 8014f42:	d14f      	bne.n	8014fe4 <_strtol_l.isra.0+0xe4>
 8014f44:	786c      	ldrb	r4, [r5, #1]
 8014f46:	2610      	movs	r6, #16
 8014f48:	3502      	adds	r5, #2
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	bf14      	ite	ne
 8014f4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014f52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014f56:	2700      	movs	r7, #0
 8014f58:	fbb1 fcf6 	udiv	ip, r1, r6
 8014f5c:	4638      	mov	r0, r7
 8014f5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014f62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014f66:	2b09      	cmp	r3, #9
 8014f68:	d817      	bhi.n	8014f9a <_strtol_l.isra.0+0x9a>
 8014f6a:	461c      	mov	r4, r3
 8014f6c:	42a6      	cmp	r6, r4
 8014f6e:	dd23      	ble.n	8014fb8 <_strtol_l.isra.0+0xb8>
 8014f70:	1c7b      	adds	r3, r7, #1
 8014f72:	d007      	beq.n	8014f84 <_strtol_l.isra.0+0x84>
 8014f74:	4584      	cmp	ip, r0
 8014f76:	d31c      	bcc.n	8014fb2 <_strtol_l.isra.0+0xb2>
 8014f78:	d101      	bne.n	8014f7e <_strtol_l.isra.0+0x7e>
 8014f7a:	45a6      	cmp	lr, r4
 8014f7c:	db19      	blt.n	8014fb2 <_strtol_l.isra.0+0xb2>
 8014f7e:	fb00 4006 	mla	r0, r0, r6, r4
 8014f82:	2701      	movs	r7, #1
 8014f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f88:	e7eb      	b.n	8014f62 <_strtol_l.isra.0+0x62>
 8014f8a:	462f      	mov	r7, r5
 8014f8c:	e7bf      	b.n	8014f0e <_strtol_l.isra.0+0xe>
 8014f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8014f90:	bf04      	itt	eq
 8014f92:	1cbd      	addeq	r5, r7, #2
 8014f94:	787c      	ldrbeq	r4, [r7, #1]
 8014f96:	461a      	mov	r2, r3
 8014f98:	e7c9      	b.n	8014f2e <_strtol_l.isra.0+0x2e>
 8014f9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014f9e:	2b19      	cmp	r3, #25
 8014fa0:	d801      	bhi.n	8014fa6 <_strtol_l.isra.0+0xa6>
 8014fa2:	3c37      	subs	r4, #55	; 0x37
 8014fa4:	e7e2      	b.n	8014f6c <_strtol_l.isra.0+0x6c>
 8014fa6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014faa:	2b19      	cmp	r3, #25
 8014fac:	d804      	bhi.n	8014fb8 <_strtol_l.isra.0+0xb8>
 8014fae:	3c57      	subs	r4, #87	; 0x57
 8014fb0:	e7dc      	b.n	8014f6c <_strtol_l.isra.0+0x6c>
 8014fb2:	f04f 37ff 	mov.w	r7, #4294967295
 8014fb6:	e7e5      	b.n	8014f84 <_strtol_l.isra.0+0x84>
 8014fb8:	1c7b      	adds	r3, r7, #1
 8014fba:	d108      	bne.n	8014fce <_strtol_l.isra.0+0xce>
 8014fbc:	2322      	movs	r3, #34	; 0x22
 8014fbe:	f8c8 3000 	str.w	r3, [r8]
 8014fc2:	4608      	mov	r0, r1
 8014fc4:	f1ba 0f00 	cmp.w	sl, #0
 8014fc8:	d107      	bne.n	8014fda <_strtol_l.isra.0+0xda>
 8014fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fce:	b102      	cbz	r2, 8014fd2 <_strtol_l.isra.0+0xd2>
 8014fd0:	4240      	negs	r0, r0
 8014fd2:	f1ba 0f00 	cmp.w	sl, #0
 8014fd6:	d0f8      	beq.n	8014fca <_strtol_l.isra.0+0xca>
 8014fd8:	b10f      	cbz	r7, 8014fde <_strtol_l.isra.0+0xde>
 8014fda:	f105 39ff 	add.w	r9, r5, #4294967295
 8014fde:	f8ca 9000 	str.w	r9, [sl]
 8014fe2:	e7f2      	b.n	8014fca <_strtol_l.isra.0+0xca>
 8014fe4:	2430      	movs	r4, #48	; 0x30
 8014fe6:	2e00      	cmp	r6, #0
 8014fe8:	d1af      	bne.n	8014f4a <_strtol_l.isra.0+0x4a>
 8014fea:	2608      	movs	r6, #8
 8014fec:	e7ad      	b.n	8014f4a <_strtol_l.isra.0+0x4a>
 8014fee:	2c30      	cmp	r4, #48	; 0x30
 8014ff0:	d0a3      	beq.n	8014f3a <_strtol_l.isra.0+0x3a>
 8014ff2:	260a      	movs	r6, #10
 8014ff4:	e7a9      	b.n	8014f4a <_strtol_l.isra.0+0x4a>
	...

08014ff8 <_strtol_r>:
 8014ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ffa:	4c06      	ldr	r4, [pc, #24]	; (8015014 <_strtol_r+0x1c>)
 8014ffc:	4d06      	ldr	r5, [pc, #24]	; (8015018 <_strtol_r+0x20>)
 8014ffe:	6824      	ldr	r4, [r4, #0]
 8015000:	6a24      	ldr	r4, [r4, #32]
 8015002:	2c00      	cmp	r4, #0
 8015004:	bf08      	it	eq
 8015006:	462c      	moveq	r4, r5
 8015008:	9400      	str	r4, [sp, #0]
 801500a:	f7ff ff79 	bl	8014f00 <_strtol_l.isra.0>
 801500e:	b003      	add	sp, #12
 8015010:	bd30      	pop	{r4, r5, pc}
 8015012:	bf00      	nop
 8015014:	2000000c 	.word	0x2000000c
 8015018:	20000070 	.word	0x20000070

0801501c <_vsiprintf_r>:
 801501c:	b500      	push	{lr}
 801501e:	b09b      	sub	sp, #108	; 0x6c
 8015020:	9100      	str	r1, [sp, #0]
 8015022:	9104      	str	r1, [sp, #16]
 8015024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015028:	9105      	str	r1, [sp, #20]
 801502a:	9102      	str	r1, [sp, #8]
 801502c:	4905      	ldr	r1, [pc, #20]	; (8015044 <_vsiprintf_r+0x28>)
 801502e:	9103      	str	r1, [sp, #12]
 8015030:	4669      	mov	r1, sp
 8015032:	f001 fecb 	bl	8016dcc <_svfiprintf_r>
 8015036:	9b00      	ldr	r3, [sp, #0]
 8015038:	2200      	movs	r2, #0
 801503a:	701a      	strb	r2, [r3, #0]
 801503c:	b01b      	add	sp, #108	; 0x6c
 801503e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015042:	bf00      	nop
 8015044:	ffff0208 	.word	0xffff0208

08015048 <vsiprintf>:
 8015048:	4613      	mov	r3, r2
 801504a:	460a      	mov	r2, r1
 801504c:	4601      	mov	r1, r0
 801504e:	4802      	ldr	r0, [pc, #8]	; (8015058 <vsiprintf+0x10>)
 8015050:	6800      	ldr	r0, [r0, #0]
 8015052:	f7ff bfe3 	b.w	801501c <_vsiprintf_r>
 8015056:	bf00      	nop
 8015058:	2000000c 	.word	0x2000000c

0801505c <quorem>:
 801505c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015060:	6903      	ldr	r3, [r0, #16]
 8015062:	690c      	ldr	r4, [r1, #16]
 8015064:	42a3      	cmp	r3, r4
 8015066:	4680      	mov	r8, r0
 8015068:	f2c0 8082 	blt.w	8015170 <quorem+0x114>
 801506c:	3c01      	subs	r4, #1
 801506e:	f101 0714 	add.w	r7, r1, #20
 8015072:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015076:	f100 0614 	add.w	r6, r0, #20
 801507a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801507e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015082:	eb06 030c 	add.w	r3, r6, ip
 8015086:	3501      	adds	r5, #1
 8015088:	eb07 090c 	add.w	r9, r7, ip
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015092:	b395      	cbz	r5, 80150fa <quorem+0x9e>
 8015094:	f04f 0a00 	mov.w	sl, #0
 8015098:	4638      	mov	r0, r7
 801509a:	46b6      	mov	lr, r6
 801509c:	46d3      	mov	fp, sl
 801509e:	f850 2b04 	ldr.w	r2, [r0], #4
 80150a2:	b293      	uxth	r3, r2
 80150a4:	fb05 a303 	mla	r3, r5, r3, sl
 80150a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	ebab 0303 	sub.w	r3, fp, r3
 80150b2:	0c12      	lsrs	r2, r2, #16
 80150b4:	f8de b000 	ldr.w	fp, [lr]
 80150b8:	fb05 a202 	mla	r2, r5, r2, sl
 80150bc:	fa13 f38b 	uxtah	r3, r3, fp
 80150c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80150c4:	fa1f fb82 	uxth.w	fp, r2
 80150c8:	f8de 2000 	ldr.w	r2, [lr]
 80150cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80150d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150da:	4581      	cmp	r9, r0
 80150dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80150e0:	f84e 3b04 	str.w	r3, [lr], #4
 80150e4:	d2db      	bcs.n	801509e <quorem+0x42>
 80150e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80150ea:	b933      	cbnz	r3, 80150fa <quorem+0x9e>
 80150ec:	9b01      	ldr	r3, [sp, #4]
 80150ee:	3b04      	subs	r3, #4
 80150f0:	429e      	cmp	r6, r3
 80150f2:	461a      	mov	r2, r3
 80150f4:	d330      	bcc.n	8015158 <quorem+0xfc>
 80150f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80150fa:	4640      	mov	r0, r8
 80150fc:	f001 fbaa 	bl	8016854 <__mcmp>
 8015100:	2800      	cmp	r0, #0
 8015102:	db25      	blt.n	8015150 <quorem+0xf4>
 8015104:	3501      	adds	r5, #1
 8015106:	4630      	mov	r0, r6
 8015108:	f04f 0c00 	mov.w	ip, #0
 801510c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015110:	f8d0 e000 	ldr.w	lr, [r0]
 8015114:	b293      	uxth	r3, r2
 8015116:	ebac 0303 	sub.w	r3, ip, r3
 801511a:	0c12      	lsrs	r2, r2, #16
 801511c:	fa13 f38e 	uxtah	r3, r3, lr
 8015120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015128:	b29b      	uxth	r3, r3
 801512a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801512e:	45b9      	cmp	r9, r7
 8015130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015134:	f840 3b04 	str.w	r3, [r0], #4
 8015138:	d2e8      	bcs.n	801510c <quorem+0xb0>
 801513a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801513e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015142:	b92a      	cbnz	r2, 8015150 <quorem+0xf4>
 8015144:	3b04      	subs	r3, #4
 8015146:	429e      	cmp	r6, r3
 8015148:	461a      	mov	r2, r3
 801514a:	d30b      	bcc.n	8015164 <quorem+0x108>
 801514c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015150:	4628      	mov	r0, r5
 8015152:	b003      	add	sp, #12
 8015154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015158:	6812      	ldr	r2, [r2, #0]
 801515a:	3b04      	subs	r3, #4
 801515c:	2a00      	cmp	r2, #0
 801515e:	d1ca      	bne.n	80150f6 <quorem+0x9a>
 8015160:	3c01      	subs	r4, #1
 8015162:	e7c5      	b.n	80150f0 <quorem+0x94>
 8015164:	6812      	ldr	r2, [r2, #0]
 8015166:	3b04      	subs	r3, #4
 8015168:	2a00      	cmp	r2, #0
 801516a:	d1ef      	bne.n	801514c <quorem+0xf0>
 801516c:	3c01      	subs	r4, #1
 801516e:	e7ea      	b.n	8015146 <quorem+0xea>
 8015170:	2000      	movs	r0, #0
 8015172:	e7ee      	b.n	8015152 <quorem+0xf6>
 8015174:	0000      	movs	r0, r0
	...

08015178 <_dtoa_r>:
 8015178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801517c:	ec57 6b10 	vmov	r6, r7, d0
 8015180:	b097      	sub	sp, #92	; 0x5c
 8015182:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015184:	9106      	str	r1, [sp, #24]
 8015186:	4604      	mov	r4, r0
 8015188:	920b      	str	r2, [sp, #44]	; 0x2c
 801518a:	9312      	str	r3, [sp, #72]	; 0x48
 801518c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015190:	e9cd 6700 	strd	r6, r7, [sp]
 8015194:	b93d      	cbnz	r5, 80151a6 <_dtoa_r+0x2e>
 8015196:	2010      	movs	r0, #16
 8015198:	f001 f8ee 	bl	8016378 <malloc>
 801519c:	6260      	str	r0, [r4, #36]	; 0x24
 801519e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80151a2:	6005      	str	r5, [r0, #0]
 80151a4:	60c5      	str	r5, [r0, #12]
 80151a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151a8:	6819      	ldr	r1, [r3, #0]
 80151aa:	b151      	cbz	r1, 80151c2 <_dtoa_r+0x4a>
 80151ac:	685a      	ldr	r2, [r3, #4]
 80151ae:	604a      	str	r2, [r1, #4]
 80151b0:	2301      	movs	r3, #1
 80151b2:	4093      	lsls	r3, r2
 80151b4:	608b      	str	r3, [r1, #8]
 80151b6:	4620      	mov	r0, r4
 80151b8:	f001 f92c 	bl	8016414 <_Bfree>
 80151bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151be:	2200      	movs	r2, #0
 80151c0:	601a      	str	r2, [r3, #0]
 80151c2:	1e3b      	subs	r3, r7, #0
 80151c4:	bfbb      	ittet	lt
 80151c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80151ca:	9301      	strlt	r3, [sp, #4]
 80151cc:	2300      	movge	r3, #0
 80151ce:	2201      	movlt	r2, #1
 80151d0:	bfac      	ite	ge
 80151d2:	f8c8 3000 	strge.w	r3, [r8]
 80151d6:	f8c8 2000 	strlt.w	r2, [r8]
 80151da:	4baf      	ldr	r3, [pc, #700]	; (8015498 <_dtoa_r+0x320>)
 80151dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151e0:	ea33 0308 	bics.w	r3, r3, r8
 80151e4:	d114      	bne.n	8015210 <_dtoa_r+0x98>
 80151e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80151ec:	6013      	str	r3, [r2, #0]
 80151ee:	9b00      	ldr	r3, [sp, #0]
 80151f0:	b923      	cbnz	r3, 80151fc <_dtoa_r+0x84>
 80151f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80151f6:	2800      	cmp	r0, #0
 80151f8:	f000 8542 	beq.w	8015c80 <_dtoa_r+0xb08>
 80151fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80154ac <_dtoa_r+0x334>
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 8544 	beq.w	8015c90 <_dtoa_r+0xb18>
 8015208:	f10b 0303 	add.w	r3, fp, #3
 801520c:	f000 bd3e 	b.w	8015c8c <_dtoa_r+0xb14>
 8015210:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015214:	2200      	movs	r2, #0
 8015216:	2300      	movs	r3, #0
 8015218:	4630      	mov	r0, r6
 801521a:	4639      	mov	r1, r7
 801521c:	f7eb fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 8015220:	4681      	mov	r9, r0
 8015222:	b168      	cbz	r0, 8015240 <_dtoa_r+0xc8>
 8015224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015226:	2301      	movs	r3, #1
 8015228:	6013      	str	r3, [r2, #0]
 801522a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 8524 	beq.w	8015c7a <_dtoa_r+0xb02>
 8015232:	4b9a      	ldr	r3, [pc, #616]	; (801549c <_dtoa_r+0x324>)
 8015234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015236:	f103 3bff 	add.w	fp, r3, #4294967295
 801523a:	6013      	str	r3, [r2, #0]
 801523c:	f000 bd28 	b.w	8015c90 <_dtoa_r+0xb18>
 8015240:	aa14      	add	r2, sp, #80	; 0x50
 8015242:	a915      	add	r1, sp, #84	; 0x54
 8015244:	ec47 6b10 	vmov	d0, r6, r7
 8015248:	4620      	mov	r0, r4
 801524a:	f001 fbf1 	bl	8016a30 <__d2b>
 801524e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015252:	9004      	str	r0, [sp, #16]
 8015254:	2d00      	cmp	r5, #0
 8015256:	d07c      	beq.n	8015352 <_dtoa_r+0x1da>
 8015258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801525c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015260:	46b2      	mov	sl, r6
 8015262:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801526a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801526e:	2200      	movs	r2, #0
 8015270:	4b8b      	ldr	r3, [pc, #556]	; (80154a0 <_dtoa_r+0x328>)
 8015272:	4650      	mov	r0, sl
 8015274:	4659      	mov	r1, fp
 8015276:	f7eb f81f 	bl	80002b8 <__aeabi_dsub>
 801527a:	a381      	add	r3, pc, #516	; (adr r3, 8015480 <_dtoa_r+0x308>)
 801527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015280:	f7eb f9d2 	bl	8000628 <__aeabi_dmul>
 8015284:	a380      	add	r3, pc, #512	; (adr r3, 8015488 <_dtoa_r+0x310>)
 8015286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528a:	f7eb f817 	bl	80002bc <__adddf3>
 801528e:	4606      	mov	r6, r0
 8015290:	4628      	mov	r0, r5
 8015292:	460f      	mov	r7, r1
 8015294:	f7eb f95e 	bl	8000554 <__aeabi_i2d>
 8015298:	a37d      	add	r3, pc, #500	; (adr r3, 8015490 <_dtoa_r+0x318>)
 801529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529e:	f7eb f9c3 	bl	8000628 <__aeabi_dmul>
 80152a2:	4602      	mov	r2, r0
 80152a4:	460b      	mov	r3, r1
 80152a6:	4630      	mov	r0, r6
 80152a8:	4639      	mov	r1, r7
 80152aa:	f7eb f807 	bl	80002bc <__adddf3>
 80152ae:	4606      	mov	r6, r0
 80152b0:	460f      	mov	r7, r1
 80152b2:	f7eb fc69 	bl	8000b88 <__aeabi_d2iz>
 80152b6:	2200      	movs	r2, #0
 80152b8:	4682      	mov	sl, r0
 80152ba:	2300      	movs	r3, #0
 80152bc:	4630      	mov	r0, r6
 80152be:	4639      	mov	r1, r7
 80152c0:	f7eb fc24 	bl	8000b0c <__aeabi_dcmplt>
 80152c4:	b148      	cbz	r0, 80152da <_dtoa_r+0x162>
 80152c6:	4650      	mov	r0, sl
 80152c8:	f7eb f944 	bl	8000554 <__aeabi_i2d>
 80152cc:	4632      	mov	r2, r6
 80152ce:	463b      	mov	r3, r7
 80152d0:	f7eb fc12 	bl	8000af8 <__aeabi_dcmpeq>
 80152d4:	b908      	cbnz	r0, 80152da <_dtoa_r+0x162>
 80152d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152da:	f1ba 0f16 	cmp.w	sl, #22
 80152de:	d859      	bhi.n	8015394 <_dtoa_r+0x21c>
 80152e0:	4970      	ldr	r1, [pc, #448]	; (80154a4 <_dtoa_r+0x32c>)
 80152e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80152e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152ee:	f7eb fc2b 	bl	8000b48 <__aeabi_dcmpgt>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	d050      	beq.n	8015398 <_dtoa_r+0x220>
 80152f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152fa:	2300      	movs	r3, #0
 80152fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80152fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015300:	1b5d      	subs	r5, r3, r5
 8015302:	f1b5 0801 	subs.w	r8, r5, #1
 8015306:	bf49      	itett	mi
 8015308:	f1c5 0301 	rsbmi	r3, r5, #1
 801530c:	2300      	movpl	r3, #0
 801530e:	9305      	strmi	r3, [sp, #20]
 8015310:	f04f 0800 	movmi.w	r8, #0
 8015314:	bf58      	it	pl
 8015316:	9305      	strpl	r3, [sp, #20]
 8015318:	f1ba 0f00 	cmp.w	sl, #0
 801531c:	db3e      	blt.n	801539c <_dtoa_r+0x224>
 801531e:	2300      	movs	r3, #0
 8015320:	44d0      	add	r8, sl
 8015322:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015326:	9307      	str	r3, [sp, #28]
 8015328:	9b06      	ldr	r3, [sp, #24]
 801532a:	2b09      	cmp	r3, #9
 801532c:	f200 8090 	bhi.w	8015450 <_dtoa_r+0x2d8>
 8015330:	2b05      	cmp	r3, #5
 8015332:	bfc4      	itt	gt
 8015334:	3b04      	subgt	r3, #4
 8015336:	9306      	strgt	r3, [sp, #24]
 8015338:	9b06      	ldr	r3, [sp, #24]
 801533a:	f1a3 0302 	sub.w	r3, r3, #2
 801533e:	bfcc      	ite	gt
 8015340:	2500      	movgt	r5, #0
 8015342:	2501      	movle	r5, #1
 8015344:	2b03      	cmp	r3, #3
 8015346:	f200 808f 	bhi.w	8015468 <_dtoa_r+0x2f0>
 801534a:	e8df f003 	tbb	[pc, r3]
 801534e:	7f7d      	.short	0x7f7d
 8015350:	7131      	.short	0x7131
 8015352:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015356:	441d      	add	r5, r3
 8015358:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801535c:	2820      	cmp	r0, #32
 801535e:	dd13      	ble.n	8015388 <_dtoa_r+0x210>
 8015360:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015364:	9b00      	ldr	r3, [sp, #0]
 8015366:	fa08 f800 	lsl.w	r8, r8, r0
 801536a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801536e:	fa23 f000 	lsr.w	r0, r3, r0
 8015372:	ea48 0000 	orr.w	r0, r8, r0
 8015376:	f7eb f8dd 	bl	8000534 <__aeabi_ui2d>
 801537a:	2301      	movs	r3, #1
 801537c:	4682      	mov	sl, r0
 801537e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015382:	3d01      	subs	r5, #1
 8015384:	9313      	str	r3, [sp, #76]	; 0x4c
 8015386:	e772      	b.n	801526e <_dtoa_r+0xf6>
 8015388:	9b00      	ldr	r3, [sp, #0]
 801538a:	f1c0 0020 	rsb	r0, r0, #32
 801538e:	fa03 f000 	lsl.w	r0, r3, r0
 8015392:	e7f0      	b.n	8015376 <_dtoa_r+0x1fe>
 8015394:	2301      	movs	r3, #1
 8015396:	e7b1      	b.n	80152fc <_dtoa_r+0x184>
 8015398:	900f      	str	r0, [sp, #60]	; 0x3c
 801539a:	e7b0      	b.n	80152fe <_dtoa_r+0x186>
 801539c:	9b05      	ldr	r3, [sp, #20]
 801539e:	eba3 030a 	sub.w	r3, r3, sl
 80153a2:	9305      	str	r3, [sp, #20]
 80153a4:	f1ca 0300 	rsb	r3, sl, #0
 80153a8:	9307      	str	r3, [sp, #28]
 80153aa:	2300      	movs	r3, #0
 80153ac:	930e      	str	r3, [sp, #56]	; 0x38
 80153ae:	e7bb      	b.n	8015328 <_dtoa_r+0x1b0>
 80153b0:	2301      	movs	r3, #1
 80153b2:	930a      	str	r3, [sp, #40]	; 0x28
 80153b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	dd59      	ble.n	801546e <_dtoa_r+0x2f6>
 80153ba:	9302      	str	r3, [sp, #8]
 80153bc:	4699      	mov	r9, r3
 80153be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80153c0:	2200      	movs	r2, #0
 80153c2:	6072      	str	r2, [r6, #4]
 80153c4:	2204      	movs	r2, #4
 80153c6:	f102 0014 	add.w	r0, r2, #20
 80153ca:	4298      	cmp	r0, r3
 80153cc:	6871      	ldr	r1, [r6, #4]
 80153ce:	d953      	bls.n	8015478 <_dtoa_r+0x300>
 80153d0:	4620      	mov	r0, r4
 80153d2:	f000 ffeb 	bl	80163ac <_Balloc>
 80153d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153d8:	6030      	str	r0, [r6, #0]
 80153da:	f1b9 0f0e 	cmp.w	r9, #14
 80153de:	f8d3 b000 	ldr.w	fp, [r3]
 80153e2:	f200 80e6 	bhi.w	80155b2 <_dtoa_r+0x43a>
 80153e6:	2d00      	cmp	r5, #0
 80153e8:	f000 80e3 	beq.w	80155b2 <_dtoa_r+0x43a>
 80153ec:	ed9d 7b00 	vldr	d7, [sp]
 80153f0:	f1ba 0f00 	cmp.w	sl, #0
 80153f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80153f8:	dd74      	ble.n	80154e4 <_dtoa_r+0x36c>
 80153fa:	4a2a      	ldr	r2, [pc, #168]	; (80154a4 <_dtoa_r+0x32c>)
 80153fc:	f00a 030f 	and.w	r3, sl, #15
 8015400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015404:	ed93 7b00 	vldr	d7, [r3]
 8015408:	ea4f 162a 	mov.w	r6, sl, asr #4
 801540c:	06f0      	lsls	r0, r6, #27
 801540e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015412:	d565      	bpl.n	80154e0 <_dtoa_r+0x368>
 8015414:	4b24      	ldr	r3, [pc, #144]	; (80154a8 <_dtoa_r+0x330>)
 8015416:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801541a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801541e:	f7eb fa2d 	bl	800087c <__aeabi_ddiv>
 8015422:	e9cd 0100 	strd	r0, r1, [sp]
 8015426:	f006 060f 	and.w	r6, r6, #15
 801542a:	2503      	movs	r5, #3
 801542c:	4f1e      	ldr	r7, [pc, #120]	; (80154a8 <_dtoa_r+0x330>)
 801542e:	e04c      	b.n	80154ca <_dtoa_r+0x352>
 8015430:	2301      	movs	r3, #1
 8015432:	930a      	str	r3, [sp, #40]	; 0x28
 8015434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015436:	4453      	add	r3, sl
 8015438:	f103 0901 	add.w	r9, r3, #1
 801543c:	9302      	str	r3, [sp, #8]
 801543e:	464b      	mov	r3, r9
 8015440:	2b01      	cmp	r3, #1
 8015442:	bfb8      	it	lt
 8015444:	2301      	movlt	r3, #1
 8015446:	e7ba      	b.n	80153be <_dtoa_r+0x246>
 8015448:	2300      	movs	r3, #0
 801544a:	e7b2      	b.n	80153b2 <_dtoa_r+0x23a>
 801544c:	2300      	movs	r3, #0
 801544e:	e7f0      	b.n	8015432 <_dtoa_r+0x2ba>
 8015450:	2501      	movs	r5, #1
 8015452:	2300      	movs	r3, #0
 8015454:	9306      	str	r3, [sp, #24]
 8015456:	950a      	str	r5, [sp, #40]	; 0x28
 8015458:	f04f 33ff 	mov.w	r3, #4294967295
 801545c:	9302      	str	r3, [sp, #8]
 801545e:	4699      	mov	r9, r3
 8015460:	2200      	movs	r2, #0
 8015462:	2312      	movs	r3, #18
 8015464:	920b      	str	r2, [sp, #44]	; 0x2c
 8015466:	e7aa      	b.n	80153be <_dtoa_r+0x246>
 8015468:	2301      	movs	r3, #1
 801546a:	930a      	str	r3, [sp, #40]	; 0x28
 801546c:	e7f4      	b.n	8015458 <_dtoa_r+0x2e0>
 801546e:	2301      	movs	r3, #1
 8015470:	9302      	str	r3, [sp, #8]
 8015472:	4699      	mov	r9, r3
 8015474:	461a      	mov	r2, r3
 8015476:	e7f5      	b.n	8015464 <_dtoa_r+0x2ec>
 8015478:	3101      	adds	r1, #1
 801547a:	6071      	str	r1, [r6, #4]
 801547c:	0052      	lsls	r2, r2, #1
 801547e:	e7a2      	b.n	80153c6 <_dtoa_r+0x24e>
 8015480:	636f4361 	.word	0x636f4361
 8015484:	3fd287a7 	.word	0x3fd287a7
 8015488:	8b60c8b3 	.word	0x8b60c8b3
 801548c:	3fc68a28 	.word	0x3fc68a28
 8015490:	509f79fb 	.word	0x509f79fb
 8015494:	3fd34413 	.word	0x3fd34413
 8015498:	7ff00000 	.word	0x7ff00000
 801549c:	080182b4 	.word	0x080182b4
 80154a0:	3ff80000 	.word	0x3ff80000
 80154a4:	080181b8 	.word	0x080181b8
 80154a8:	08018190 	.word	0x08018190
 80154ac:	08018119 	.word	0x08018119
 80154b0:	07f1      	lsls	r1, r6, #31
 80154b2:	d508      	bpl.n	80154c6 <_dtoa_r+0x34e>
 80154b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80154b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154bc:	f7eb f8b4 	bl	8000628 <__aeabi_dmul>
 80154c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154c4:	3501      	adds	r5, #1
 80154c6:	1076      	asrs	r6, r6, #1
 80154c8:	3708      	adds	r7, #8
 80154ca:	2e00      	cmp	r6, #0
 80154cc:	d1f0      	bne.n	80154b0 <_dtoa_r+0x338>
 80154ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80154d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154d6:	f7eb f9d1 	bl	800087c <__aeabi_ddiv>
 80154da:	e9cd 0100 	strd	r0, r1, [sp]
 80154de:	e01a      	b.n	8015516 <_dtoa_r+0x39e>
 80154e0:	2502      	movs	r5, #2
 80154e2:	e7a3      	b.n	801542c <_dtoa_r+0x2b4>
 80154e4:	f000 80a0 	beq.w	8015628 <_dtoa_r+0x4b0>
 80154e8:	f1ca 0600 	rsb	r6, sl, #0
 80154ec:	4b9f      	ldr	r3, [pc, #636]	; (801576c <_dtoa_r+0x5f4>)
 80154ee:	4fa0      	ldr	r7, [pc, #640]	; (8015770 <_dtoa_r+0x5f8>)
 80154f0:	f006 020f 	and.w	r2, r6, #15
 80154f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015500:	f7eb f892 	bl	8000628 <__aeabi_dmul>
 8015504:	e9cd 0100 	strd	r0, r1, [sp]
 8015508:	1136      	asrs	r6, r6, #4
 801550a:	2300      	movs	r3, #0
 801550c:	2502      	movs	r5, #2
 801550e:	2e00      	cmp	r6, #0
 8015510:	d17f      	bne.n	8015612 <_dtoa_r+0x49a>
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1e1      	bne.n	80154da <_dtoa_r+0x362>
 8015516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 8087 	beq.w	801562c <_dtoa_r+0x4b4>
 801551e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015522:	2200      	movs	r2, #0
 8015524:	4b93      	ldr	r3, [pc, #588]	; (8015774 <_dtoa_r+0x5fc>)
 8015526:	4630      	mov	r0, r6
 8015528:	4639      	mov	r1, r7
 801552a:	f7eb faef 	bl	8000b0c <__aeabi_dcmplt>
 801552e:	2800      	cmp	r0, #0
 8015530:	d07c      	beq.n	801562c <_dtoa_r+0x4b4>
 8015532:	f1b9 0f00 	cmp.w	r9, #0
 8015536:	d079      	beq.n	801562c <_dtoa_r+0x4b4>
 8015538:	9b02      	ldr	r3, [sp, #8]
 801553a:	2b00      	cmp	r3, #0
 801553c:	dd35      	ble.n	80155aa <_dtoa_r+0x432>
 801553e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015542:	9308      	str	r3, [sp, #32]
 8015544:	4639      	mov	r1, r7
 8015546:	2200      	movs	r2, #0
 8015548:	4b8b      	ldr	r3, [pc, #556]	; (8015778 <_dtoa_r+0x600>)
 801554a:	4630      	mov	r0, r6
 801554c:	f7eb f86c 	bl	8000628 <__aeabi_dmul>
 8015550:	e9cd 0100 	strd	r0, r1, [sp]
 8015554:	9f02      	ldr	r7, [sp, #8]
 8015556:	3501      	adds	r5, #1
 8015558:	4628      	mov	r0, r5
 801555a:	f7ea fffb 	bl	8000554 <__aeabi_i2d>
 801555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015562:	f7eb f861 	bl	8000628 <__aeabi_dmul>
 8015566:	2200      	movs	r2, #0
 8015568:	4b84      	ldr	r3, [pc, #528]	; (801577c <_dtoa_r+0x604>)
 801556a:	f7ea fea7 	bl	80002bc <__adddf3>
 801556e:	4605      	mov	r5, r0
 8015570:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015574:	2f00      	cmp	r7, #0
 8015576:	d15d      	bne.n	8015634 <_dtoa_r+0x4bc>
 8015578:	2200      	movs	r2, #0
 801557a:	4b81      	ldr	r3, [pc, #516]	; (8015780 <_dtoa_r+0x608>)
 801557c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015580:	f7ea fe9a 	bl	80002b8 <__aeabi_dsub>
 8015584:	462a      	mov	r2, r5
 8015586:	4633      	mov	r3, r6
 8015588:	e9cd 0100 	strd	r0, r1, [sp]
 801558c:	f7eb fadc 	bl	8000b48 <__aeabi_dcmpgt>
 8015590:	2800      	cmp	r0, #0
 8015592:	f040 8288 	bne.w	8015aa6 <_dtoa_r+0x92e>
 8015596:	462a      	mov	r2, r5
 8015598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801559c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155a0:	f7eb fab4 	bl	8000b0c <__aeabi_dcmplt>
 80155a4:	2800      	cmp	r0, #0
 80155a6:	f040 827c 	bne.w	8015aa2 <_dtoa_r+0x92a>
 80155aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80155ae:	e9cd 2300 	strd	r2, r3, [sp]
 80155b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f2c0 8150 	blt.w	801585a <_dtoa_r+0x6e2>
 80155ba:	f1ba 0f0e 	cmp.w	sl, #14
 80155be:	f300 814c 	bgt.w	801585a <_dtoa_r+0x6e2>
 80155c2:	4b6a      	ldr	r3, [pc, #424]	; (801576c <_dtoa_r+0x5f4>)
 80155c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155c8:	ed93 7b00 	vldr	d7, [r3]
 80155cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155d4:	f280 80d8 	bge.w	8015788 <_dtoa_r+0x610>
 80155d8:	f1b9 0f00 	cmp.w	r9, #0
 80155dc:	f300 80d4 	bgt.w	8015788 <_dtoa_r+0x610>
 80155e0:	f040 825e 	bne.w	8015aa0 <_dtoa_r+0x928>
 80155e4:	2200      	movs	r2, #0
 80155e6:	4b66      	ldr	r3, [pc, #408]	; (8015780 <_dtoa_r+0x608>)
 80155e8:	ec51 0b17 	vmov	r0, r1, d7
 80155ec:	f7eb f81c 	bl	8000628 <__aeabi_dmul>
 80155f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155f4:	f7eb fa9e 	bl	8000b34 <__aeabi_dcmpge>
 80155f8:	464f      	mov	r7, r9
 80155fa:	464e      	mov	r6, r9
 80155fc:	2800      	cmp	r0, #0
 80155fe:	f040 8234 	bne.w	8015a6a <_dtoa_r+0x8f2>
 8015602:	2331      	movs	r3, #49	; 0x31
 8015604:	f10b 0501 	add.w	r5, fp, #1
 8015608:	f88b 3000 	strb.w	r3, [fp]
 801560c:	f10a 0a01 	add.w	sl, sl, #1
 8015610:	e22f      	b.n	8015a72 <_dtoa_r+0x8fa>
 8015612:	07f2      	lsls	r2, r6, #31
 8015614:	d505      	bpl.n	8015622 <_dtoa_r+0x4aa>
 8015616:	e9d7 2300 	ldrd	r2, r3, [r7]
 801561a:	f7eb f805 	bl	8000628 <__aeabi_dmul>
 801561e:	3501      	adds	r5, #1
 8015620:	2301      	movs	r3, #1
 8015622:	1076      	asrs	r6, r6, #1
 8015624:	3708      	adds	r7, #8
 8015626:	e772      	b.n	801550e <_dtoa_r+0x396>
 8015628:	2502      	movs	r5, #2
 801562a:	e774      	b.n	8015516 <_dtoa_r+0x39e>
 801562c:	f8cd a020 	str.w	sl, [sp, #32]
 8015630:	464f      	mov	r7, r9
 8015632:	e791      	b.n	8015558 <_dtoa_r+0x3e0>
 8015634:	4b4d      	ldr	r3, [pc, #308]	; (801576c <_dtoa_r+0x5f4>)
 8015636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801563a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801563e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015640:	2b00      	cmp	r3, #0
 8015642:	d047      	beq.n	80156d4 <_dtoa_r+0x55c>
 8015644:	4602      	mov	r2, r0
 8015646:	460b      	mov	r3, r1
 8015648:	2000      	movs	r0, #0
 801564a:	494e      	ldr	r1, [pc, #312]	; (8015784 <_dtoa_r+0x60c>)
 801564c:	f7eb f916 	bl	800087c <__aeabi_ddiv>
 8015650:	462a      	mov	r2, r5
 8015652:	4633      	mov	r3, r6
 8015654:	f7ea fe30 	bl	80002b8 <__aeabi_dsub>
 8015658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801565c:	465d      	mov	r5, fp
 801565e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015662:	f7eb fa91 	bl	8000b88 <__aeabi_d2iz>
 8015666:	4606      	mov	r6, r0
 8015668:	f7ea ff74 	bl	8000554 <__aeabi_i2d>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015674:	f7ea fe20 	bl	80002b8 <__aeabi_dsub>
 8015678:	3630      	adds	r6, #48	; 0x30
 801567a:	f805 6b01 	strb.w	r6, [r5], #1
 801567e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015682:	e9cd 0100 	strd	r0, r1, [sp]
 8015686:	f7eb fa41 	bl	8000b0c <__aeabi_dcmplt>
 801568a:	2800      	cmp	r0, #0
 801568c:	d163      	bne.n	8015756 <_dtoa_r+0x5de>
 801568e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015692:	2000      	movs	r0, #0
 8015694:	4937      	ldr	r1, [pc, #220]	; (8015774 <_dtoa_r+0x5fc>)
 8015696:	f7ea fe0f 	bl	80002b8 <__aeabi_dsub>
 801569a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801569e:	f7eb fa35 	bl	8000b0c <__aeabi_dcmplt>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	f040 80b7 	bne.w	8015816 <_dtoa_r+0x69e>
 80156a8:	eba5 030b 	sub.w	r3, r5, fp
 80156ac:	429f      	cmp	r7, r3
 80156ae:	f77f af7c 	ble.w	80155aa <_dtoa_r+0x432>
 80156b2:	2200      	movs	r2, #0
 80156b4:	4b30      	ldr	r3, [pc, #192]	; (8015778 <_dtoa_r+0x600>)
 80156b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156ba:	f7ea ffb5 	bl	8000628 <__aeabi_dmul>
 80156be:	2200      	movs	r2, #0
 80156c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156c4:	4b2c      	ldr	r3, [pc, #176]	; (8015778 <_dtoa_r+0x600>)
 80156c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156ca:	f7ea ffad 	bl	8000628 <__aeabi_dmul>
 80156ce:	e9cd 0100 	strd	r0, r1, [sp]
 80156d2:	e7c4      	b.n	801565e <_dtoa_r+0x4e6>
 80156d4:	462a      	mov	r2, r5
 80156d6:	4633      	mov	r3, r6
 80156d8:	f7ea ffa6 	bl	8000628 <__aeabi_dmul>
 80156dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156e0:	eb0b 0507 	add.w	r5, fp, r7
 80156e4:	465e      	mov	r6, fp
 80156e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156ea:	f7eb fa4d 	bl	8000b88 <__aeabi_d2iz>
 80156ee:	4607      	mov	r7, r0
 80156f0:	f7ea ff30 	bl	8000554 <__aeabi_i2d>
 80156f4:	3730      	adds	r7, #48	; 0x30
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156fe:	f7ea fddb 	bl	80002b8 <__aeabi_dsub>
 8015702:	f806 7b01 	strb.w	r7, [r6], #1
 8015706:	42ae      	cmp	r6, r5
 8015708:	e9cd 0100 	strd	r0, r1, [sp]
 801570c:	f04f 0200 	mov.w	r2, #0
 8015710:	d126      	bne.n	8015760 <_dtoa_r+0x5e8>
 8015712:	4b1c      	ldr	r3, [pc, #112]	; (8015784 <_dtoa_r+0x60c>)
 8015714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015718:	f7ea fdd0 	bl	80002bc <__adddf3>
 801571c:	4602      	mov	r2, r0
 801571e:	460b      	mov	r3, r1
 8015720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015724:	f7eb fa10 	bl	8000b48 <__aeabi_dcmpgt>
 8015728:	2800      	cmp	r0, #0
 801572a:	d174      	bne.n	8015816 <_dtoa_r+0x69e>
 801572c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015730:	2000      	movs	r0, #0
 8015732:	4914      	ldr	r1, [pc, #80]	; (8015784 <_dtoa_r+0x60c>)
 8015734:	f7ea fdc0 	bl	80002b8 <__aeabi_dsub>
 8015738:	4602      	mov	r2, r0
 801573a:	460b      	mov	r3, r1
 801573c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015740:	f7eb f9e4 	bl	8000b0c <__aeabi_dcmplt>
 8015744:	2800      	cmp	r0, #0
 8015746:	f43f af30 	beq.w	80155aa <_dtoa_r+0x432>
 801574a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801574e:	2b30      	cmp	r3, #48	; 0x30
 8015750:	f105 32ff 	add.w	r2, r5, #4294967295
 8015754:	d002      	beq.n	801575c <_dtoa_r+0x5e4>
 8015756:	f8dd a020 	ldr.w	sl, [sp, #32]
 801575a:	e04a      	b.n	80157f2 <_dtoa_r+0x67a>
 801575c:	4615      	mov	r5, r2
 801575e:	e7f4      	b.n	801574a <_dtoa_r+0x5d2>
 8015760:	4b05      	ldr	r3, [pc, #20]	; (8015778 <_dtoa_r+0x600>)
 8015762:	f7ea ff61 	bl	8000628 <__aeabi_dmul>
 8015766:	e9cd 0100 	strd	r0, r1, [sp]
 801576a:	e7bc      	b.n	80156e6 <_dtoa_r+0x56e>
 801576c:	080181b8 	.word	0x080181b8
 8015770:	08018190 	.word	0x08018190
 8015774:	3ff00000 	.word	0x3ff00000
 8015778:	40240000 	.word	0x40240000
 801577c:	401c0000 	.word	0x401c0000
 8015780:	40140000 	.word	0x40140000
 8015784:	3fe00000 	.word	0x3fe00000
 8015788:	e9dd 6700 	ldrd	r6, r7, [sp]
 801578c:	465d      	mov	r5, fp
 801578e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015792:	4630      	mov	r0, r6
 8015794:	4639      	mov	r1, r7
 8015796:	f7eb f871 	bl	800087c <__aeabi_ddiv>
 801579a:	f7eb f9f5 	bl	8000b88 <__aeabi_d2iz>
 801579e:	4680      	mov	r8, r0
 80157a0:	f7ea fed8 	bl	8000554 <__aeabi_i2d>
 80157a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157a8:	f7ea ff3e 	bl	8000628 <__aeabi_dmul>
 80157ac:	4602      	mov	r2, r0
 80157ae:	460b      	mov	r3, r1
 80157b0:	4630      	mov	r0, r6
 80157b2:	4639      	mov	r1, r7
 80157b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80157b8:	f7ea fd7e 	bl	80002b8 <__aeabi_dsub>
 80157bc:	f805 6b01 	strb.w	r6, [r5], #1
 80157c0:	eba5 060b 	sub.w	r6, r5, fp
 80157c4:	45b1      	cmp	r9, r6
 80157c6:	4602      	mov	r2, r0
 80157c8:	460b      	mov	r3, r1
 80157ca:	d139      	bne.n	8015840 <_dtoa_r+0x6c8>
 80157cc:	f7ea fd76 	bl	80002bc <__adddf3>
 80157d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157d4:	4606      	mov	r6, r0
 80157d6:	460f      	mov	r7, r1
 80157d8:	f7eb f9b6 	bl	8000b48 <__aeabi_dcmpgt>
 80157dc:	b9c8      	cbnz	r0, 8015812 <_dtoa_r+0x69a>
 80157de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157e2:	4630      	mov	r0, r6
 80157e4:	4639      	mov	r1, r7
 80157e6:	f7eb f987 	bl	8000af8 <__aeabi_dcmpeq>
 80157ea:	b110      	cbz	r0, 80157f2 <_dtoa_r+0x67a>
 80157ec:	f018 0f01 	tst.w	r8, #1
 80157f0:	d10f      	bne.n	8015812 <_dtoa_r+0x69a>
 80157f2:	9904      	ldr	r1, [sp, #16]
 80157f4:	4620      	mov	r0, r4
 80157f6:	f000 fe0d 	bl	8016414 <_Bfree>
 80157fa:	2300      	movs	r3, #0
 80157fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157fe:	702b      	strb	r3, [r5, #0]
 8015800:	f10a 0301 	add.w	r3, sl, #1
 8015804:	6013      	str	r3, [r2, #0]
 8015806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015808:	2b00      	cmp	r3, #0
 801580a:	f000 8241 	beq.w	8015c90 <_dtoa_r+0xb18>
 801580e:	601d      	str	r5, [r3, #0]
 8015810:	e23e      	b.n	8015c90 <_dtoa_r+0xb18>
 8015812:	f8cd a020 	str.w	sl, [sp, #32]
 8015816:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801581a:	2a39      	cmp	r2, #57	; 0x39
 801581c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015820:	d108      	bne.n	8015834 <_dtoa_r+0x6bc>
 8015822:	459b      	cmp	fp, r3
 8015824:	d10a      	bne.n	801583c <_dtoa_r+0x6c4>
 8015826:	9b08      	ldr	r3, [sp, #32]
 8015828:	3301      	adds	r3, #1
 801582a:	9308      	str	r3, [sp, #32]
 801582c:	2330      	movs	r3, #48	; 0x30
 801582e:	f88b 3000 	strb.w	r3, [fp]
 8015832:	465b      	mov	r3, fp
 8015834:	781a      	ldrb	r2, [r3, #0]
 8015836:	3201      	adds	r2, #1
 8015838:	701a      	strb	r2, [r3, #0]
 801583a:	e78c      	b.n	8015756 <_dtoa_r+0x5de>
 801583c:	461d      	mov	r5, r3
 801583e:	e7ea      	b.n	8015816 <_dtoa_r+0x69e>
 8015840:	2200      	movs	r2, #0
 8015842:	4b9b      	ldr	r3, [pc, #620]	; (8015ab0 <_dtoa_r+0x938>)
 8015844:	f7ea fef0 	bl	8000628 <__aeabi_dmul>
 8015848:	2200      	movs	r2, #0
 801584a:	2300      	movs	r3, #0
 801584c:	4606      	mov	r6, r0
 801584e:	460f      	mov	r7, r1
 8015850:	f7eb f952 	bl	8000af8 <__aeabi_dcmpeq>
 8015854:	2800      	cmp	r0, #0
 8015856:	d09a      	beq.n	801578e <_dtoa_r+0x616>
 8015858:	e7cb      	b.n	80157f2 <_dtoa_r+0x67a>
 801585a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801585c:	2a00      	cmp	r2, #0
 801585e:	f000 808b 	beq.w	8015978 <_dtoa_r+0x800>
 8015862:	9a06      	ldr	r2, [sp, #24]
 8015864:	2a01      	cmp	r2, #1
 8015866:	dc6e      	bgt.n	8015946 <_dtoa_r+0x7ce>
 8015868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801586a:	2a00      	cmp	r2, #0
 801586c:	d067      	beq.n	801593e <_dtoa_r+0x7c6>
 801586e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015872:	9f07      	ldr	r7, [sp, #28]
 8015874:	9d05      	ldr	r5, [sp, #20]
 8015876:	9a05      	ldr	r2, [sp, #20]
 8015878:	2101      	movs	r1, #1
 801587a:	441a      	add	r2, r3
 801587c:	4620      	mov	r0, r4
 801587e:	9205      	str	r2, [sp, #20]
 8015880:	4498      	add	r8, r3
 8015882:	f000 fea5 	bl	80165d0 <__i2b>
 8015886:	4606      	mov	r6, r0
 8015888:	2d00      	cmp	r5, #0
 801588a:	dd0c      	ble.n	80158a6 <_dtoa_r+0x72e>
 801588c:	f1b8 0f00 	cmp.w	r8, #0
 8015890:	dd09      	ble.n	80158a6 <_dtoa_r+0x72e>
 8015892:	4545      	cmp	r5, r8
 8015894:	9a05      	ldr	r2, [sp, #20]
 8015896:	462b      	mov	r3, r5
 8015898:	bfa8      	it	ge
 801589a:	4643      	movge	r3, r8
 801589c:	1ad2      	subs	r2, r2, r3
 801589e:	9205      	str	r2, [sp, #20]
 80158a0:	1aed      	subs	r5, r5, r3
 80158a2:	eba8 0803 	sub.w	r8, r8, r3
 80158a6:	9b07      	ldr	r3, [sp, #28]
 80158a8:	b1eb      	cbz	r3, 80158e6 <_dtoa_r+0x76e>
 80158aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d067      	beq.n	8015980 <_dtoa_r+0x808>
 80158b0:	b18f      	cbz	r7, 80158d6 <_dtoa_r+0x75e>
 80158b2:	4631      	mov	r1, r6
 80158b4:	463a      	mov	r2, r7
 80158b6:	4620      	mov	r0, r4
 80158b8:	f000 ff2a 	bl	8016710 <__pow5mult>
 80158bc:	9a04      	ldr	r2, [sp, #16]
 80158be:	4601      	mov	r1, r0
 80158c0:	4606      	mov	r6, r0
 80158c2:	4620      	mov	r0, r4
 80158c4:	f000 fe8d 	bl	80165e2 <__multiply>
 80158c8:	9904      	ldr	r1, [sp, #16]
 80158ca:	9008      	str	r0, [sp, #32]
 80158cc:	4620      	mov	r0, r4
 80158ce:	f000 fda1 	bl	8016414 <_Bfree>
 80158d2:	9b08      	ldr	r3, [sp, #32]
 80158d4:	9304      	str	r3, [sp, #16]
 80158d6:	9b07      	ldr	r3, [sp, #28]
 80158d8:	1bda      	subs	r2, r3, r7
 80158da:	d004      	beq.n	80158e6 <_dtoa_r+0x76e>
 80158dc:	9904      	ldr	r1, [sp, #16]
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 ff16 	bl	8016710 <__pow5mult>
 80158e4:	9004      	str	r0, [sp, #16]
 80158e6:	2101      	movs	r1, #1
 80158e8:	4620      	mov	r0, r4
 80158ea:	f000 fe71 	bl	80165d0 <__i2b>
 80158ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158f0:	4607      	mov	r7, r0
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	f000 81d0 	beq.w	8015c98 <_dtoa_r+0xb20>
 80158f8:	461a      	mov	r2, r3
 80158fa:	4601      	mov	r1, r0
 80158fc:	4620      	mov	r0, r4
 80158fe:	f000 ff07 	bl	8016710 <__pow5mult>
 8015902:	9b06      	ldr	r3, [sp, #24]
 8015904:	2b01      	cmp	r3, #1
 8015906:	4607      	mov	r7, r0
 8015908:	dc40      	bgt.n	801598c <_dtoa_r+0x814>
 801590a:	9b00      	ldr	r3, [sp, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d139      	bne.n	8015984 <_dtoa_r+0x80c>
 8015910:	9b01      	ldr	r3, [sp, #4]
 8015912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015916:	2b00      	cmp	r3, #0
 8015918:	d136      	bne.n	8015988 <_dtoa_r+0x810>
 801591a:	9b01      	ldr	r3, [sp, #4]
 801591c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015920:	0d1b      	lsrs	r3, r3, #20
 8015922:	051b      	lsls	r3, r3, #20
 8015924:	b12b      	cbz	r3, 8015932 <_dtoa_r+0x7ba>
 8015926:	9b05      	ldr	r3, [sp, #20]
 8015928:	3301      	adds	r3, #1
 801592a:	9305      	str	r3, [sp, #20]
 801592c:	f108 0801 	add.w	r8, r8, #1
 8015930:	2301      	movs	r3, #1
 8015932:	9307      	str	r3, [sp, #28]
 8015934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015936:	2b00      	cmp	r3, #0
 8015938:	d12a      	bne.n	8015990 <_dtoa_r+0x818>
 801593a:	2001      	movs	r0, #1
 801593c:	e030      	b.n	80159a0 <_dtoa_r+0x828>
 801593e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015940:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015944:	e795      	b.n	8015872 <_dtoa_r+0x6fa>
 8015946:	9b07      	ldr	r3, [sp, #28]
 8015948:	f109 37ff 	add.w	r7, r9, #4294967295
 801594c:	42bb      	cmp	r3, r7
 801594e:	bfbf      	itttt	lt
 8015950:	9b07      	ldrlt	r3, [sp, #28]
 8015952:	9707      	strlt	r7, [sp, #28]
 8015954:	1afa      	sublt	r2, r7, r3
 8015956:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015958:	bfbb      	ittet	lt
 801595a:	189b      	addlt	r3, r3, r2
 801595c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801595e:	1bdf      	subge	r7, r3, r7
 8015960:	2700      	movlt	r7, #0
 8015962:	f1b9 0f00 	cmp.w	r9, #0
 8015966:	bfb5      	itete	lt
 8015968:	9b05      	ldrlt	r3, [sp, #20]
 801596a:	9d05      	ldrge	r5, [sp, #20]
 801596c:	eba3 0509 	sublt.w	r5, r3, r9
 8015970:	464b      	movge	r3, r9
 8015972:	bfb8      	it	lt
 8015974:	2300      	movlt	r3, #0
 8015976:	e77e      	b.n	8015876 <_dtoa_r+0x6fe>
 8015978:	9f07      	ldr	r7, [sp, #28]
 801597a:	9d05      	ldr	r5, [sp, #20]
 801597c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801597e:	e783      	b.n	8015888 <_dtoa_r+0x710>
 8015980:	9a07      	ldr	r2, [sp, #28]
 8015982:	e7ab      	b.n	80158dc <_dtoa_r+0x764>
 8015984:	2300      	movs	r3, #0
 8015986:	e7d4      	b.n	8015932 <_dtoa_r+0x7ba>
 8015988:	9b00      	ldr	r3, [sp, #0]
 801598a:	e7d2      	b.n	8015932 <_dtoa_r+0x7ba>
 801598c:	2300      	movs	r3, #0
 801598e:	9307      	str	r3, [sp, #28]
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015996:	6918      	ldr	r0, [r3, #16]
 8015998:	f000 fdcc 	bl	8016534 <__hi0bits>
 801599c:	f1c0 0020 	rsb	r0, r0, #32
 80159a0:	4440      	add	r0, r8
 80159a2:	f010 001f 	ands.w	r0, r0, #31
 80159a6:	d047      	beq.n	8015a38 <_dtoa_r+0x8c0>
 80159a8:	f1c0 0320 	rsb	r3, r0, #32
 80159ac:	2b04      	cmp	r3, #4
 80159ae:	dd3b      	ble.n	8015a28 <_dtoa_r+0x8b0>
 80159b0:	9b05      	ldr	r3, [sp, #20]
 80159b2:	f1c0 001c 	rsb	r0, r0, #28
 80159b6:	4403      	add	r3, r0
 80159b8:	9305      	str	r3, [sp, #20]
 80159ba:	4405      	add	r5, r0
 80159bc:	4480      	add	r8, r0
 80159be:	9b05      	ldr	r3, [sp, #20]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	dd05      	ble.n	80159d0 <_dtoa_r+0x858>
 80159c4:	461a      	mov	r2, r3
 80159c6:	9904      	ldr	r1, [sp, #16]
 80159c8:	4620      	mov	r0, r4
 80159ca:	f000 feef 	bl	80167ac <__lshift>
 80159ce:	9004      	str	r0, [sp, #16]
 80159d0:	f1b8 0f00 	cmp.w	r8, #0
 80159d4:	dd05      	ble.n	80159e2 <_dtoa_r+0x86a>
 80159d6:	4639      	mov	r1, r7
 80159d8:	4642      	mov	r2, r8
 80159da:	4620      	mov	r0, r4
 80159dc:	f000 fee6 	bl	80167ac <__lshift>
 80159e0:	4607      	mov	r7, r0
 80159e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159e4:	b353      	cbz	r3, 8015a3c <_dtoa_r+0x8c4>
 80159e6:	4639      	mov	r1, r7
 80159e8:	9804      	ldr	r0, [sp, #16]
 80159ea:	f000 ff33 	bl	8016854 <__mcmp>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	da24      	bge.n	8015a3c <_dtoa_r+0x8c4>
 80159f2:	2300      	movs	r3, #0
 80159f4:	220a      	movs	r2, #10
 80159f6:	9904      	ldr	r1, [sp, #16]
 80159f8:	4620      	mov	r0, r4
 80159fa:	f000 fd22 	bl	8016442 <__multadd>
 80159fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a00:	9004      	str	r0, [sp, #16]
 8015a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	f000 814d 	beq.w	8015ca6 <_dtoa_r+0xb2e>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	4631      	mov	r1, r6
 8015a10:	220a      	movs	r2, #10
 8015a12:	4620      	mov	r0, r4
 8015a14:	f000 fd15 	bl	8016442 <__multadd>
 8015a18:	9b02      	ldr	r3, [sp, #8]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	4606      	mov	r6, r0
 8015a1e:	dc4f      	bgt.n	8015ac0 <_dtoa_r+0x948>
 8015a20:	9b06      	ldr	r3, [sp, #24]
 8015a22:	2b02      	cmp	r3, #2
 8015a24:	dd4c      	ble.n	8015ac0 <_dtoa_r+0x948>
 8015a26:	e011      	b.n	8015a4c <_dtoa_r+0x8d4>
 8015a28:	d0c9      	beq.n	80159be <_dtoa_r+0x846>
 8015a2a:	9a05      	ldr	r2, [sp, #20]
 8015a2c:	331c      	adds	r3, #28
 8015a2e:	441a      	add	r2, r3
 8015a30:	9205      	str	r2, [sp, #20]
 8015a32:	441d      	add	r5, r3
 8015a34:	4498      	add	r8, r3
 8015a36:	e7c2      	b.n	80159be <_dtoa_r+0x846>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	e7f6      	b.n	8015a2a <_dtoa_r+0x8b2>
 8015a3c:	f1b9 0f00 	cmp.w	r9, #0
 8015a40:	dc38      	bgt.n	8015ab4 <_dtoa_r+0x93c>
 8015a42:	9b06      	ldr	r3, [sp, #24]
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	dd35      	ble.n	8015ab4 <_dtoa_r+0x93c>
 8015a48:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a4c:	9b02      	ldr	r3, [sp, #8]
 8015a4e:	b963      	cbnz	r3, 8015a6a <_dtoa_r+0x8f2>
 8015a50:	4639      	mov	r1, r7
 8015a52:	2205      	movs	r2, #5
 8015a54:	4620      	mov	r0, r4
 8015a56:	f000 fcf4 	bl	8016442 <__multadd>
 8015a5a:	4601      	mov	r1, r0
 8015a5c:	4607      	mov	r7, r0
 8015a5e:	9804      	ldr	r0, [sp, #16]
 8015a60:	f000 fef8 	bl	8016854 <__mcmp>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	f73f adcc 	bgt.w	8015602 <_dtoa_r+0x48a>
 8015a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a6c:	465d      	mov	r5, fp
 8015a6e:	ea6f 0a03 	mvn.w	sl, r3
 8015a72:	f04f 0900 	mov.w	r9, #0
 8015a76:	4639      	mov	r1, r7
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f000 fccb 	bl	8016414 <_Bfree>
 8015a7e:	2e00      	cmp	r6, #0
 8015a80:	f43f aeb7 	beq.w	80157f2 <_dtoa_r+0x67a>
 8015a84:	f1b9 0f00 	cmp.w	r9, #0
 8015a88:	d005      	beq.n	8015a96 <_dtoa_r+0x91e>
 8015a8a:	45b1      	cmp	r9, r6
 8015a8c:	d003      	beq.n	8015a96 <_dtoa_r+0x91e>
 8015a8e:	4649      	mov	r1, r9
 8015a90:	4620      	mov	r0, r4
 8015a92:	f000 fcbf 	bl	8016414 <_Bfree>
 8015a96:	4631      	mov	r1, r6
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f000 fcbb 	bl	8016414 <_Bfree>
 8015a9e:	e6a8      	b.n	80157f2 <_dtoa_r+0x67a>
 8015aa0:	2700      	movs	r7, #0
 8015aa2:	463e      	mov	r6, r7
 8015aa4:	e7e1      	b.n	8015a6a <_dtoa_r+0x8f2>
 8015aa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015aaa:	463e      	mov	r6, r7
 8015aac:	e5a9      	b.n	8015602 <_dtoa_r+0x48a>
 8015aae:	bf00      	nop
 8015ab0:	40240000 	.word	0x40240000
 8015ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ab6:	f8cd 9008 	str.w	r9, [sp, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	f000 80fa 	beq.w	8015cb4 <_dtoa_r+0xb3c>
 8015ac0:	2d00      	cmp	r5, #0
 8015ac2:	dd05      	ble.n	8015ad0 <_dtoa_r+0x958>
 8015ac4:	4631      	mov	r1, r6
 8015ac6:	462a      	mov	r2, r5
 8015ac8:	4620      	mov	r0, r4
 8015aca:	f000 fe6f 	bl	80167ac <__lshift>
 8015ace:	4606      	mov	r6, r0
 8015ad0:	9b07      	ldr	r3, [sp, #28]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d04c      	beq.n	8015b70 <_dtoa_r+0x9f8>
 8015ad6:	6871      	ldr	r1, [r6, #4]
 8015ad8:	4620      	mov	r0, r4
 8015ada:	f000 fc67 	bl	80163ac <_Balloc>
 8015ade:	6932      	ldr	r2, [r6, #16]
 8015ae0:	3202      	adds	r2, #2
 8015ae2:	4605      	mov	r5, r0
 8015ae4:	0092      	lsls	r2, r2, #2
 8015ae6:	f106 010c 	add.w	r1, r6, #12
 8015aea:	300c      	adds	r0, #12
 8015aec:	f7fd fd08 	bl	8013500 <memcpy>
 8015af0:	2201      	movs	r2, #1
 8015af2:	4629      	mov	r1, r5
 8015af4:	4620      	mov	r0, r4
 8015af6:	f000 fe59 	bl	80167ac <__lshift>
 8015afa:	9b00      	ldr	r3, [sp, #0]
 8015afc:	f8cd b014 	str.w	fp, [sp, #20]
 8015b00:	f003 0301 	and.w	r3, r3, #1
 8015b04:	46b1      	mov	r9, r6
 8015b06:	9307      	str	r3, [sp, #28]
 8015b08:	4606      	mov	r6, r0
 8015b0a:	4639      	mov	r1, r7
 8015b0c:	9804      	ldr	r0, [sp, #16]
 8015b0e:	f7ff faa5 	bl	801505c <quorem>
 8015b12:	4649      	mov	r1, r9
 8015b14:	4605      	mov	r5, r0
 8015b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015b1a:	9804      	ldr	r0, [sp, #16]
 8015b1c:	f000 fe9a 	bl	8016854 <__mcmp>
 8015b20:	4632      	mov	r2, r6
 8015b22:	9000      	str	r0, [sp, #0]
 8015b24:	4639      	mov	r1, r7
 8015b26:	4620      	mov	r0, r4
 8015b28:	f000 feae 	bl	8016888 <__mdiff>
 8015b2c:	68c3      	ldr	r3, [r0, #12]
 8015b2e:	4602      	mov	r2, r0
 8015b30:	bb03      	cbnz	r3, 8015b74 <_dtoa_r+0x9fc>
 8015b32:	4601      	mov	r1, r0
 8015b34:	9008      	str	r0, [sp, #32]
 8015b36:	9804      	ldr	r0, [sp, #16]
 8015b38:	f000 fe8c 	bl	8016854 <__mcmp>
 8015b3c:	9a08      	ldr	r2, [sp, #32]
 8015b3e:	4603      	mov	r3, r0
 8015b40:	4611      	mov	r1, r2
 8015b42:	4620      	mov	r0, r4
 8015b44:	9308      	str	r3, [sp, #32]
 8015b46:	f000 fc65 	bl	8016414 <_Bfree>
 8015b4a:	9b08      	ldr	r3, [sp, #32]
 8015b4c:	b9a3      	cbnz	r3, 8015b78 <_dtoa_r+0xa00>
 8015b4e:	9a06      	ldr	r2, [sp, #24]
 8015b50:	b992      	cbnz	r2, 8015b78 <_dtoa_r+0xa00>
 8015b52:	9a07      	ldr	r2, [sp, #28]
 8015b54:	b982      	cbnz	r2, 8015b78 <_dtoa_r+0xa00>
 8015b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b5a:	d029      	beq.n	8015bb0 <_dtoa_r+0xa38>
 8015b5c:	9b00      	ldr	r3, [sp, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	dd01      	ble.n	8015b66 <_dtoa_r+0x9ee>
 8015b62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015b66:	9b05      	ldr	r3, [sp, #20]
 8015b68:	1c5d      	adds	r5, r3, #1
 8015b6a:	f883 8000 	strb.w	r8, [r3]
 8015b6e:	e782      	b.n	8015a76 <_dtoa_r+0x8fe>
 8015b70:	4630      	mov	r0, r6
 8015b72:	e7c2      	b.n	8015afa <_dtoa_r+0x982>
 8015b74:	2301      	movs	r3, #1
 8015b76:	e7e3      	b.n	8015b40 <_dtoa_r+0x9c8>
 8015b78:	9a00      	ldr	r2, [sp, #0]
 8015b7a:	2a00      	cmp	r2, #0
 8015b7c:	db04      	blt.n	8015b88 <_dtoa_r+0xa10>
 8015b7e:	d125      	bne.n	8015bcc <_dtoa_r+0xa54>
 8015b80:	9a06      	ldr	r2, [sp, #24]
 8015b82:	bb1a      	cbnz	r2, 8015bcc <_dtoa_r+0xa54>
 8015b84:	9a07      	ldr	r2, [sp, #28]
 8015b86:	bb0a      	cbnz	r2, 8015bcc <_dtoa_r+0xa54>
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	ddec      	ble.n	8015b66 <_dtoa_r+0x9ee>
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	9904      	ldr	r1, [sp, #16]
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 fe0b 	bl	80167ac <__lshift>
 8015b96:	4639      	mov	r1, r7
 8015b98:	9004      	str	r0, [sp, #16]
 8015b9a:	f000 fe5b 	bl	8016854 <__mcmp>
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	dc03      	bgt.n	8015baa <_dtoa_r+0xa32>
 8015ba2:	d1e0      	bne.n	8015b66 <_dtoa_r+0x9ee>
 8015ba4:	f018 0f01 	tst.w	r8, #1
 8015ba8:	d0dd      	beq.n	8015b66 <_dtoa_r+0x9ee>
 8015baa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bae:	d1d8      	bne.n	8015b62 <_dtoa_r+0x9ea>
 8015bb0:	9b05      	ldr	r3, [sp, #20]
 8015bb2:	9a05      	ldr	r2, [sp, #20]
 8015bb4:	1c5d      	adds	r5, r3, #1
 8015bb6:	2339      	movs	r3, #57	; 0x39
 8015bb8:	7013      	strb	r3, [r2, #0]
 8015bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015bbe:	2b39      	cmp	r3, #57	; 0x39
 8015bc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8015bc4:	d04f      	beq.n	8015c66 <_dtoa_r+0xaee>
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	7013      	strb	r3, [r2, #0]
 8015bca:	e754      	b.n	8015a76 <_dtoa_r+0x8fe>
 8015bcc:	9a05      	ldr	r2, [sp, #20]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	f102 0501 	add.w	r5, r2, #1
 8015bd4:	dd06      	ble.n	8015be4 <_dtoa_r+0xa6c>
 8015bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bda:	d0e9      	beq.n	8015bb0 <_dtoa_r+0xa38>
 8015bdc:	f108 0801 	add.w	r8, r8, #1
 8015be0:	9b05      	ldr	r3, [sp, #20]
 8015be2:	e7c2      	b.n	8015b6a <_dtoa_r+0x9f2>
 8015be4:	9a02      	ldr	r2, [sp, #8]
 8015be6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015bea:	eba5 030b 	sub.w	r3, r5, fp
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	d021      	beq.n	8015c36 <_dtoa_r+0xabe>
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	220a      	movs	r2, #10
 8015bf6:	9904      	ldr	r1, [sp, #16]
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f000 fc22 	bl	8016442 <__multadd>
 8015bfe:	45b1      	cmp	r9, r6
 8015c00:	9004      	str	r0, [sp, #16]
 8015c02:	f04f 0300 	mov.w	r3, #0
 8015c06:	f04f 020a 	mov.w	r2, #10
 8015c0a:	4649      	mov	r1, r9
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	d105      	bne.n	8015c1c <_dtoa_r+0xaa4>
 8015c10:	f000 fc17 	bl	8016442 <__multadd>
 8015c14:	4681      	mov	r9, r0
 8015c16:	4606      	mov	r6, r0
 8015c18:	9505      	str	r5, [sp, #20]
 8015c1a:	e776      	b.n	8015b0a <_dtoa_r+0x992>
 8015c1c:	f000 fc11 	bl	8016442 <__multadd>
 8015c20:	4631      	mov	r1, r6
 8015c22:	4681      	mov	r9, r0
 8015c24:	2300      	movs	r3, #0
 8015c26:	220a      	movs	r2, #10
 8015c28:	4620      	mov	r0, r4
 8015c2a:	f000 fc0a 	bl	8016442 <__multadd>
 8015c2e:	4606      	mov	r6, r0
 8015c30:	e7f2      	b.n	8015c18 <_dtoa_r+0xaa0>
 8015c32:	f04f 0900 	mov.w	r9, #0
 8015c36:	2201      	movs	r2, #1
 8015c38:	9904      	ldr	r1, [sp, #16]
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	f000 fdb6 	bl	80167ac <__lshift>
 8015c40:	4639      	mov	r1, r7
 8015c42:	9004      	str	r0, [sp, #16]
 8015c44:	f000 fe06 	bl	8016854 <__mcmp>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	dcb6      	bgt.n	8015bba <_dtoa_r+0xa42>
 8015c4c:	d102      	bne.n	8015c54 <_dtoa_r+0xadc>
 8015c4e:	f018 0f01 	tst.w	r8, #1
 8015c52:	d1b2      	bne.n	8015bba <_dtoa_r+0xa42>
 8015c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c58:	2b30      	cmp	r3, #48	; 0x30
 8015c5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c5e:	f47f af0a 	bne.w	8015a76 <_dtoa_r+0x8fe>
 8015c62:	4615      	mov	r5, r2
 8015c64:	e7f6      	b.n	8015c54 <_dtoa_r+0xadc>
 8015c66:	4593      	cmp	fp, r2
 8015c68:	d105      	bne.n	8015c76 <_dtoa_r+0xafe>
 8015c6a:	2331      	movs	r3, #49	; 0x31
 8015c6c:	f10a 0a01 	add.w	sl, sl, #1
 8015c70:	f88b 3000 	strb.w	r3, [fp]
 8015c74:	e6ff      	b.n	8015a76 <_dtoa_r+0x8fe>
 8015c76:	4615      	mov	r5, r2
 8015c78:	e79f      	b.n	8015bba <_dtoa_r+0xa42>
 8015c7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015ce0 <_dtoa_r+0xb68>
 8015c7e:	e007      	b.n	8015c90 <_dtoa_r+0xb18>
 8015c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015ce4 <_dtoa_r+0xb6c>
 8015c86:	b11b      	cbz	r3, 8015c90 <_dtoa_r+0xb18>
 8015c88:	f10b 0308 	add.w	r3, fp, #8
 8015c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c8e:	6013      	str	r3, [r2, #0]
 8015c90:	4658      	mov	r0, fp
 8015c92:	b017      	add	sp, #92	; 0x5c
 8015c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c98:	9b06      	ldr	r3, [sp, #24]
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	f77f ae35 	ble.w	801590a <_dtoa_r+0x792>
 8015ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ca2:	9307      	str	r3, [sp, #28]
 8015ca4:	e649      	b.n	801593a <_dtoa_r+0x7c2>
 8015ca6:	9b02      	ldr	r3, [sp, #8]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	dc03      	bgt.n	8015cb4 <_dtoa_r+0xb3c>
 8015cac:	9b06      	ldr	r3, [sp, #24]
 8015cae:	2b02      	cmp	r3, #2
 8015cb0:	f73f aecc 	bgt.w	8015a4c <_dtoa_r+0x8d4>
 8015cb4:	465d      	mov	r5, fp
 8015cb6:	4639      	mov	r1, r7
 8015cb8:	9804      	ldr	r0, [sp, #16]
 8015cba:	f7ff f9cf 	bl	801505c <quorem>
 8015cbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015cc2:	f805 8b01 	strb.w	r8, [r5], #1
 8015cc6:	9a02      	ldr	r2, [sp, #8]
 8015cc8:	eba5 030b 	sub.w	r3, r5, fp
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	ddb0      	ble.n	8015c32 <_dtoa_r+0xaba>
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	220a      	movs	r2, #10
 8015cd4:	9904      	ldr	r1, [sp, #16]
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f000 fbb3 	bl	8016442 <__multadd>
 8015cdc:	9004      	str	r0, [sp, #16]
 8015cde:	e7ea      	b.n	8015cb6 <_dtoa_r+0xb3e>
 8015ce0:	080182b3 	.word	0x080182b3
 8015ce4:	08018110 	.word	0x08018110

08015ce8 <rshift>:
 8015ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cea:	6906      	ldr	r6, [r0, #16]
 8015cec:	114b      	asrs	r3, r1, #5
 8015cee:	429e      	cmp	r6, r3
 8015cf0:	f100 0414 	add.w	r4, r0, #20
 8015cf4:	dd30      	ble.n	8015d58 <rshift+0x70>
 8015cf6:	f011 011f 	ands.w	r1, r1, #31
 8015cfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015cfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015d02:	d108      	bne.n	8015d16 <rshift+0x2e>
 8015d04:	4621      	mov	r1, r4
 8015d06:	42b2      	cmp	r2, r6
 8015d08:	460b      	mov	r3, r1
 8015d0a:	d211      	bcs.n	8015d30 <rshift+0x48>
 8015d0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8015d10:	f841 3b04 	str.w	r3, [r1], #4
 8015d14:	e7f7      	b.n	8015d06 <rshift+0x1e>
 8015d16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015d1a:	f1c1 0c20 	rsb	ip, r1, #32
 8015d1e:	40cd      	lsrs	r5, r1
 8015d20:	3204      	adds	r2, #4
 8015d22:	4623      	mov	r3, r4
 8015d24:	42b2      	cmp	r2, r6
 8015d26:	4617      	mov	r7, r2
 8015d28:	d30c      	bcc.n	8015d44 <rshift+0x5c>
 8015d2a:	601d      	str	r5, [r3, #0]
 8015d2c:	b105      	cbz	r5, 8015d30 <rshift+0x48>
 8015d2e:	3304      	adds	r3, #4
 8015d30:	1b1a      	subs	r2, r3, r4
 8015d32:	42a3      	cmp	r3, r4
 8015d34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015d38:	bf08      	it	eq
 8015d3a:	2300      	moveq	r3, #0
 8015d3c:	6102      	str	r2, [r0, #16]
 8015d3e:	bf08      	it	eq
 8015d40:	6143      	streq	r3, [r0, #20]
 8015d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d44:	683f      	ldr	r7, [r7, #0]
 8015d46:	fa07 f70c 	lsl.w	r7, r7, ip
 8015d4a:	433d      	orrs	r5, r7
 8015d4c:	f843 5b04 	str.w	r5, [r3], #4
 8015d50:	f852 5b04 	ldr.w	r5, [r2], #4
 8015d54:	40cd      	lsrs	r5, r1
 8015d56:	e7e5      	b.n	8015d24 <rshift+0x3c>
 8015d58:	4623      	mov	r3, r4
 8015d5a:	e7e9      	b.n	8015d30 <rshift+0x48>

08015d5c <__hexdig_fun>:
 8015d5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015d60:	2b09      	cmp	r3, #9
 8015d62:	d802      	bhi.n	8015d6a <__hexdig_fun+0xe>
 8015d64:	3820      	subs	r0, #32
 8015d66:	b2c0      	uxtb	r0, r0
 8015d68:	4770      	bx	lr
 8015d6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015d6e:	2b05      	cmp	r3, #5
 8015d70:	d801      	bhi.n	8015d76 <__hexdig_fun+0x1a>
 8015d72:	3847      	subs	r0, #71	; 0x47
 8015d74:	e7f7      	b.n	8015d66 <__hexdig_fun+0xa>
 8015d76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015d7a:	2b05      	cmp	r3, #5
 8015d7c:	d801      	bhi.n	8015d82 <__hexdig_fun+0x26>
 8015d7e:	3827      	subs	r0, #39	; 0x27
 8015d80:	e7f1      	b.n	8015d66 <__hexdig_fun+0xa>
 8015d82:	2000      	movs	r0, #0
 8015d84:	4770      	bx	lr

08015d86 <__gethex>:
 8015d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8a:	b08b      	sub	sp, #44	; 0x2c
 8015d8c:	468a      	mov	sl, r1
 8015d8e:	9002      	str	r0, [sp, #8]
 8015d90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015d92:	9306      	str	r3, [sp, #24]
 8015d94:	4690      	mov	r8, r2
 8015d96:	f000 fadf 	bl	8016358 <__localeconv_l>
 8015d9a:	6803      	ldr	r3, [r0, #0]
 8015d9c:	9303      	str	r3, [sp, #12]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7ea fa2e 	bl	8000200 <strlen>
 8015da4:	9b03      	ldr	r3, [sp, #12]
 8015da6:	9001      	str	r0, [sp, #4]
 8015da8:	4403      	add	r3, r0
 8015daa:	f04f 0b00 	mov.w	fp, #0
 8015dae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015db2:	9307      	str	r3, [sp, #28]
 8015db4:	f8da 3000 	ldr.w	r3, [sl]
 8015db8:	3302      	adds	r3, #2
 8015dba:	461f      	mov	r7, r3
 8015dbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015dc0:	2830      	cmp	r0, #48	; 0x30
 8015dc2:	d06c      	beq.n	8015e9e <__gethex+0x118>
 8015dc4:	f7ff ffca 	bl	8015d5c <__hexdig_fun>
 8015dc8:	4604      	mov	r4, r0
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d16a      	bne.n	8015ea4 <__gethex+0x11e>
 8015dce:	9a01      	ldr	r2, [sp, #4]
 8015dd0:	9903      	ldr	r1, [sp, #12]
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	f001 fc36 	bl	8017644 <strncmp>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d166      	bne.n	8015eaa <__gethex+0x124>
 8015ddc:	9b01      	ldr	r3, [sp, #4]
 8015dde:	5cf8      	ldrb	r0, [r7, r3]
 8015de0:	18fe      	adds	r6, r7, r3
 8015de2:	f7ff ffbb 	bl	8015d5c <__hexdig_fun>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d062      	beq.n	8015eb0 <__gethex+0x12a>
 8015dea:	4633      	mov	r3, r6
 8015dec:	7818      	ldrb	r0, [r3, #0]
 8015dee:	2830      	cmp	r0, #48	; 0x30
 8015df0:	461f      	mov	r7, r3
 8015df2:	f103 0301 	add.w	r3, r3, #1
 8015df6:	d0f9      	beq.n	8015dec <__gethex+0x66>
 8015df8:	f7ff ffb0 	bl	8015d5c <__hexdig_fun>
 8015dfc:	fab0 f580 	clz	r5, r0
 8015e00:	096d      	lsrs	r5, r5, #5
 8015e02:	4634      	mov	r4, r6
 8015e04:	f04f 0b01 	mov.w	fp, #1
 8015e08:	463a      	mov	r2, r7
 8015e0a:	4616      	mov	r6, r2
 8015e0c:	3201      	adds	r2, #1
 8015e0e:	7830      	ldrb	r0, [r6, #0]
 8015e10:	f7ff ffa4 	bl	8015d5c <__hexdig_fun>
 8015e14:	2800      	cmp	r0, #0
 8015e16:	d1f8      	bne.n	8015e0a <__gethex+0x84>
 8015e18:	9a01      	ldr	r2, [sp, #4]
 8015e1a:	9903      	ldr	r1, [sp, #12]
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	f001 fc11 	bl	8017644 <strncmp>
 8015e22:	b950      	cbnz	r0, 8015e3a <__gethex+0xb4>
 8015e24:	b954      	cbnz	r4, 8015e3c <__gethex+0xb6>
 8015e26:	9b01      	ldr	r3, [sp, #4]
 8015e28:	18f4      	adds	r4, r6, r3
 8015e2a:	4622      	mov	r2, r4
 8015e2c:	4616      	mov	r6, r2
 8015e2e:	3201      	adds	r2, #1
 8015e30:	7830      	ldrb	r0, [r6, #0]
 8015e32:	f7ff ff93 	bl	8015d5c <__hexdig_fun>
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d1f8      	bne.n	8015e2c <__gethex+0xa6>
 8015e3a:	b10c      	cbz	r4, 8015e40 <__gethex+0xba>
 8015e3c:	1ba4      	subs	r4, r4, r6
 8015e3e:	00a4      	lsls	r4, r4, #2
 8015e40:	7833      	ldrb	r3, [r6, #0]
 8015e42:	2b50      	cmp	r3, #80	; 0x50
 8015e44:	d001      	beq.n	8015e4a <__gethex+0xc4>
 8015e46:	2b70      	cmp	r3, #112	; 0x70
 8015e48:	d140      	bne.n	8015ecc <__gethex+0x146>
 8015e4a:	7873      	ldrb	r3, [r6, #1]
 8015e4c:	2b2b      	cmp	r3, #43	; 0x2b
 8015e4e:	d031      	beq.n	8015eb4 <__gethex+0x12e>
 8015e50:	2b2d      	cmp	r3, #45	; 0x2d
 8015e52:	d033      	beq.n	8015ebc <__gethex+0x136>
 8015e54:	1c71      	adds	r1, r6, #1
 8015e56:	f04f 0900 	mov.w	r9, #0
 8015e5a:	7808      	ldrb	r0, [r1, #0]
 8015e5c:	f7ff ff7e 	bl	8015d5c <__hexdig_fun>
 8015e60:	1e43      	subs	r3, r0, #1
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	2b18      	cmp	r3, #24
 8015e66:	d831      	bhi.n	8015ecc <__gethex+0x146>
 8015e68:	f1a0 0210 	sub.w	r2, r0, #16
 8015e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e70:	f7ff ff74 	bl	8015d5c <__hexdig_fun>
 8015e74:	1e43      	subs	r3, r0, #1
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	2b18      	cmp	r3, #24
 8015e7a:	d922      	bls.n	8015ec2 <__gethex+0x13c>
 8015e7c:	f1b9 0f00 	cmp.w	r9, #0
 8015e80:	d000      	beq.n	8015e84 <__gethex+0xfe>
 8015e82:	4252      	negs	r2, r2
 8015e84:	4414      	add	r4, r2
 8015e86:	f8ca 1000 	str.w	r1, [sl]
 8015e8a:	b30d      	cbz	r5, 8015ed0 <__gethex+0x14a>
 8015e8c:	f1bb 0f00 	cmp.w	fp, #0
 8015e90:	bf0c      	ite	eq
 8015e92:	2706      	moveq	r7, #6
 8015e94:	2700      	movne	r7, #0
 8015e96:	4638      	mov	r0, r7
 8015e98:	b00b      	add	sp, #44	; 0x2c
 8015e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9e:	f10b 0b01 	add.w	fp, fp, #1
 8015ea2:	e78a      	b.n	8015dba <__gethex+0x34>
 8015ea4:	2500      	movs	r5, #0
 8015ea6:	462c      	mov	r4, r5
 8015ea8:	e7ae      	b.n	8015e08 <__gethex+0x82>
 8015eaa:	463e      	mov	r6, r7
 8015eac:	2501      	movs	r5, #1
 8015eae:	e7c7      	b.n	8015e40 <__gethex+0xba>
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	e7fb      	b.n	8015eac <__gethex+0x126>
 8015eb4:	f04f 0900 	mov.w	r9, #0
 8015eb8:	1cb1      	adds	r1, r6, #2
 8015eba:	e7ce      	b.n	8015e5a <__gethex+0xd4>
 8015ebc:	f04f 0901 	mov.w	r9, #1
 8015ec0:	e7fa      	b.n	8015eb8 <__gethex+0x132>
 8015ec2:	230a      	movs	r3, #10
 8015ec4:	fb03 0202 	mla	r2, r3, r2, r0
 8015ec8:	3a10      	subs	r2, #16
 8015eca:	e7cf      	b.n	8015e6c <__gethex+0xe6>
 8015ecc:	4631      	mov	r1, r6
 8015ece:	e7da      	b.n	8015e86 <__gethex+0x100>
 8015ed0:	1bf3      	subs	r3, r6, r7
 8015ed2:	3b01      	subs	r3, #1
 8015ed4:	4629      	mov	r1, r5
 8015ed6:	2b07      	cmp	r3, #7
 8015ed8:	dc49      	bgt.n	8015f6e <__gethex+0x1e8>
 8015eda:	9802      	ldr	r0, [sp, #8]
 8015edc:	f000 fa66 	bl	80163ac <_Balloc>
 8015ee0:	9b01      	ldr	r3, [sp, #4]
 8015ee2:	f100 0914 	add.w	r9, r0, #20
 8015ee6:	f04f 0b00 	mov.w	fp, #0
 8015eea:	f1c3 0301 	rsb	r3, r3, #1
 8015eee:	4605      	mov	r5, r0
 8015ef0:	f8cd 9010 	str.w	r9, [sp, #16]
 8015ef4:	46da      	mov	sl, fp
 8015ef6:	9308      	str	r3, [sp, #32]
 8015ef8:	42b7      	cmp	r7, r6
 8015efa:	d33b      	bcc.n	8015f74 <__gethex+0x1ee>
 8015efc:	9804      	ldr	r0, [sp, #16]
 8015efe:	f840 ab04 	str.w	sl, [r0], #4
 8015f02:	eba0 0009 	sub.w	r0, r0, r9
 8015f06:	1080      	asrs	r0, r0, #2
 8015f08:	6128      	str	r0, [r5, #16]
 8015f0a:	0147      	lsls	r7, r0, #5
 8015f0c:	4650      	mov	r0, sl
 8015f0e:	f000 fb11 	bl	8016534 <__hi0bits>
 8015f12:	f8d8 6000 	ldr.w	r6, [r8]
 8015f16:	1a3f      	subs	r7, r7, r0
 8015f18:	42b7      	cmp	r7, r6
 8015f1a:	dd64      	ble.n	8015fe6 <__gethex+0x260>
 8015f1c:	1bbf      	subs	r7, r7, r6
 8015f1e:	4639      	mov	r1, r7
 8015f20:	4628      	mov	r0, r5
 8015f22:	f000 fe21 	bl	8016b68 <__any_on>
 8015f26:	4682      	mov	sl, r0
 8015f28:	b178      	cbz	r0, 8015f4a <__gethex+0x1c4>
 8015f2a:	1e7b      	subs	r3, r7, #1
 8015f2c:	1159      	asrs	r1, r3, #5
 8015f2e:	f003 021f 	and.w	r2, r3, #31
 8015f32:	f04f 0a01 	mov.w	sl, #1
 8015f36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015f3a:	fa0a f202 	lsl.w	r2, sl, r2
 8015f3e:	420a      	tst	r2, r1
 8015f40:	d003      	beq.n	8015f4a <__gethex+0x1c4>
 8015f42:	4553      	cmp	r3, sl
 8015f44:	dc46      	bgt.n	8015fd4 <__gethex+0x24e>
 8015f46:	f04f 0a02 	mov.w	sl, #2
 8015f4a:	4639      	mov	r1, r7
 8015f4c:	4628      	mov	r0, r5
 8015f4e:	f7ff fecb 	bl	8015ce8 <rshift>
 8015f52:	443c      	add	r4, r7
 8015f54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f58:	42a3      	cmp	r3, r4
 8015f5a:	da52      	bge.n	8016002 <__gethex+0x27c>
 8015f5c:	4629      	mov	r1, r5
 8015f5e:	9802      	ldr	r0, [sp, #8]
 8015f60:	f000 fa58 	bl	8016414 <_Bfree>
 8015f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f66:	2300      	movs	r3, #0
 8015f68:	6013      	str	r3, [r2, #0]
 8015f6a:	27a3      	movs	r7, #163	; 0xa3
 8015f6c:	e793      	b.n	8015e96 <__gethex+0x110>
 8015f6e:	3101      	adds	r1, #1
 8015f70:	105b      	asrs	r3, r3, #1
 8015f72:	e7b0      	b.n	8015ed6 <__gethex+0x150>
 8015f74:	1e73      	subs	r3, r6, #1
 8015f76:	9305      	str	r3, [sp, #20]
 8015f78:	9a07      	ldr	r2, [sp, #28]
 8015f7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	d018      	beq.n	8015fb4 <__gethex+0x22e>
 8015f82:	f1bb 0f20 	cmp.w	fp, #32
 8015f86:	d107      	bne.n	8015f98 <__gethex+0x212>
 8015f88:	9b04      	ldr	r3, [sp, #16]
 8015f8a:	f8c3 a000 	str.w	sl, [r3]
 8015f8e:	3304      	adds	r3, #4
 8015f90:	f04f 0a00 	mov.w	sl, #0
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	46d3      	mov	fp, sl
 8015f98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f9c:	f7ff fede 	bl	8015d5c <__hexdig_fun>
 8015fa0:	f000 000f 	and.w	r0, r0, #15
 8015fa4:	fa00 f00b 	lsl.w	r0, r0, fp
 8015fa8:	ea4a 0a00 	orr.w	sl, sl, r0
 8015fac:	f10b 0b04 	add.w	fp, fp, #4
 8015fb0:	9b05      	ldr	r3, [sp, #20]
 8015fb2:	e00d      	b.n	8015fd0 <__gethex+0x24a>
 8015fb4:	9b05      	ldr	r3, [sp, #20]
 8015fb6:	9a08      	ldr	r2, [sp, #32]
 8015fb8:	4413      	add	r3, r2
 8015fba:	42bb      	cmp	r3, r7
 8015fbc:	d3e1      	bcc.n	8015f82 <__gethex+0x1fc>
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	9a01      	ldr	r2, [sp, #4]
 8015fc2:	9903      	ldr	r1, [sp, #12]
 8015fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc6:	f001 fb3d 	bl	8017644 <strncmp>
 8015fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	d1d8      	bne.n	8015f82 <__gethex+0x1fc>
 8015fd0:	461e      	mov	r6, r3
 8015fd2:	e791      	b.n	8015ef8 <__gethex+0x172>
 8015fd4:	1eb9      	subs	r1, r7, #2
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f000 fdc6 	bl	8016b68 <__any_on>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	d0b2      	beq.n	8015f46 <__gethex+0x1c0>
 8015fe0:	f04f 0a03 	mov.w	sl, #3
 8015fe4:	e7b1      	b.n	8015f4a <__gethex+0x1c4>
 8015fe6:	da09      	bge.n	8015ffc <__gethex+0x276>
 8015fe8:	1bf7      	subs	r7, r6, r7
 8015fea:	4629      	mov	r1, r5
 8015fec:	463a      	mov	r2, r7
 8015fee:	9802      	ldr	r0, [sp, #8]
 8015ff0:	f000 fbdc 	bl	80167ac <__lshift>
 8015ff4:	1be4      	subs	r4, r4, r7
 8015ff6:	4605      	mov	r5, r0
 8015ff8:	f100 0914 	add.w	r9, r0, #20
 8015ffc:	f04f 0a00 	mov.w	sl, #0
 8016000:	e7a8      	b.n	8015f54 <__gethex+0x1ce>
 8016002:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016006:	42a0      	cmp	r0, r4
 8016008:	dd6a      	ble.n	80160e0 <__gethex+0x35a>
 801600a:	1b04      	subs	r4, r0, r4
 801600c:	42a6      	cmp	r6, r4
 801600e:	dc2e      	bgt.n	801606e <__gethex+0x2e8>
 8016010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016014:	2b02      	cmp	r3, #2
 8016016:	d022      	beq.n	801605e <__gethex+0x2d8>
 8016018:	2b03      	cmp	r3, #3
 801601a:	d024      	beq.n	8016066 <__gethex+0x2e0>
 801601c:	2b01      	cmp	r3, #1
 801601e:	d115      	bne.n	801604c <__gethex+0x2c6>
 8016020:	42a6      	cmp	r6, r4
 8016022:	d113      	bne.n	801604c <__gethex+0x2c6>
 8016024:	2e01      	cmp	r6, #1
 8016026:	dc0b      	bgt.n	8016040 <__gethex+0x2ba>
 8016028:	9a06      	ldr	r2, [sp, #24]
 801602a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801602e:	6013      	str	r3, [r2, #0]
 8016030:	2301      	movs	r3, #1
 8016032:	612b      	str	r3, [r5, #16]
 8016034:	f8c9 3000 	str.w	r3, [r9]
 8016038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801603a:	2762      	movs	r7, #98	; 0x62
 801603c:	601d      	str	r5, [r3, #0]
 801603e:	e72a      	b.n	8015e96 <__gethex+0x110>
 8016040:	1e71      	subs	r1, r6, #1
 8016042:	4628      	mov	r0, r5
 8016044:	f000 fd90 	bl	8016b68 <__any_on>
 8016048:	2800      	cmp	r0, #0
 801604a:	d1ed      	bne.n	8016028 <__gethex+0x2a2>
 801604c:	4629      	mov	r1, r5
 801604e:	9802      	ldr	r0, [sp, #8]
 8016050:	f000 f9e0 	bl	8016414 <_Bfree>
 8016054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016056:	2300      	movs	r3, #0
 8016058:	6013      	str	r3, [r2, #0]
 801605a:	2750      	movs	r7, #80	; 0x50
 801605c:	e71b      	b.n	8015e96 <__gethex+0x110>
 801605e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0e1      	beq.n	8016028 <__gethex+0x2a2>
 8016064:	e7f2      	b.n	801604c <__gethex+0x2c6>
 8016066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1dd      	bne.n	8016028 <__gethex+0x2a2>
 801606c:	e7ee      	b.n	801604c <__gethex+0x2c6>
 801606e:	1e67      	subs	r7, r4, #1
 8016070:	f1ba 0f00 	cmp.w	sl, #0
 8016074:	d131      	bne.n	80160da <__gethex+0x354>
 8016076:	b127      	cbz	r7, 8016082 <__gethex+0x2fc>
 8016078:	4639      	mov	r1, r7
 801607a:	4628      	mov	r0, r5
 801607c:	f000 fd74 	bl	8016b68 <__any_on>
 8016080:	4682      	mov	sl, r0
 8016082:	117a      	asrs	r2, r7, #5
 8016084:	2301      	movs	r3, #1
 8016086:	f007 071f 	and.w	r7, r7, #31
 801608a:	fa03 f707 	lsl.w	r7, r3, r7
 801608e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016092:	4621      	mov	r1, r4
 8016094:	421f      	tst	r7, r3
 8016096:	4628      	mov	r0, r5
 8016098:	bf18      	it	ne
 801609a:	f04a 0a02 	orrne.w	sl, sl, #2
 801609e:	1b36      	subs	r6, r6, r4
 80160a0:	f7ff fe22 	bl	8015ce8 <rshift>
 80160a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80160a8:	2702      	movs	r7, #2
 80160aa:	f1ba 0f00 	cmp.w	sl, #0
 80160ae:	d048      	beq.n	8016142 <__gethex+0x3bc>
 80160b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160b4:	2b02      	cmp	r3, #2
 80160b6:	d015      	beq.n	80160e4 <__gethex+0x35e>
 80160b8:	2b03      	cmp	r3, #3
 80160ba:	d017      	beq.n	80160ec <__gethex+0x366>
 80160bc:	2b01      	cmp	r3, #1
 80160be:	d109      	bne.n	80160d4 <__gethex+0x34e>
 80160c0:	f01a 0f02 	tst.w	sl, #2
 80160c4:	d006      	beq.n	80160d4 <__gethex+0x34e>
 80160c6:	f8d9 3000 	ldr.w	r3, [r9]
 80160ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80160ce:	f01a 0f01 	tst.w	sl, #1
 80160d2:	d10e      	bne.n	80160f2 <__gethex+0x36c>
 80160d4:	f047 0710 	orr.w	r7, r7, #16
 80160d8:	e033      	b.n	8016142 <__gethex+0x3bc>
 80160da:	f04f 0a01 	mov.w	sl, #1
 80160de:	e7d0      	b.n	8016082 <__gethex+0x2fc>
 80160e0:	2701      	movs	r7, #1
 80160e2:	e7e2      	b.n	80160aa <__gethex+0x324>
 80160e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160e6:	f1c3 0301 	rsb	r3, r3, #1
 80160ea:	9315      	str	r3, [sp, #84]	; 0x54
 80160ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d0f0      	beq.n	80160d4 <__gethex+0x34e>
 80160f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80160f6:	f105 0314 	add.w	r3, r5, #20
 80160fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80160fe:	eb03 010a 	add.w	r1, r3, sl
 8016102:	f04f 0c00 	mov.w	ip, #0
 8016106:	4618      	mov	r0, r3
 8016108:	f853 2b04 	ldr.w	r2, [r3], #4
 801610c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016110:	d01c      	beq.n	801614c <__gethex+0x3c6>
 8016112:	3201      	adds	r2, #1
 8016114:	6002      	str	r2, [r0, #0]
 8016116:	2f02      	cmp	r7, #2
 8016118:	f105 0314 	add.w	r3, r5, #20
 801611c:	d138      	bne.n	8016190 <__gethex+0x40a>
 801611e:	f8d8 2000 	ldr.w	r2, [r8]
 8016122:	3a01      	subs	r2, #1
 8016124:	42b2      	cmp	r2, r6
 8016126:	d10a      	bne.n	801613e <__gethex+0x3b8>
 8016128:	1171      	asrs	r1, r6, #5
 801612a:	2201      	movs	r2, #1
 801612c:	f006 061f 	and.w	r6, r6, #31
 8016130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016134:	fa02 f606 	lsl.w	r6, r2, r6
 8016138:	421e      	tst	r6, r3
 801613a:	bf18      	it	ne
 801613c:	4617      	movne	r7, r2
 801613e:	f047 0720 	orr.w	r7, r7, #32
 8016142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016144:	601d      	str	r5, [r3, #0]
 8016146:	9b06      	ldr	r3, [sp, #24]
 8016148:	601c      	str	r4, [r3, #0]
 801614a:	e6a4      	b.n	8015e96 <__gethex+0x110>
 801614c:	4299      	cmp	r1, r3
 801614e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016152:	d8d8      	bhi.n	8016106 <__gethex+0x380>
 8016154:	68ab      	ldr	r3, [r5, #8]
 8016156:	4599      	cmp	r9, r3
 8016158:	db12      	blt.n	8016180 <__gethex+0x3fa>
 801615a:	6869      	ldr	r1, [r5, #4]
 801615c:	9802      	ldr	r0, [sp, #8]
 801615e:	3101      	adds	r1, #1
 8016160:	f000 f924 	bl	80163ac <_Balloc>
 8016164:	692a      	ldr	r2, [r5, #16]
 8016166:	3202      	adds	r2, #2
 8016168:	f105 010c 	add.w	r1, r5, #12
 801616c:	4683      	mov	fp, r0
 801616e:	0092      	lsls	r2, r2, #2
 8016170:	300c      	adds	r0, #12
 8016172:	f7fd f9c5 	bl	8013500 <memcpy>
 8016176:	4629      	mov	r1, r5
 8016178:	9802      	ldr	r0, [sp, #8]
 801617a:	f000 f94b 	bl	8016414 <_Bfree>
 801617e:	465d      	mov	r5, fp
 8016180:	692b      	ldr	r3, [r5, #16]
 8016182:	1c5a      	adds	r2, r3, #1
 8016184:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016188:	612a      	str	r2, [r5, #16]
 801618a:	2201      	movs	r2, #1
 801618c:	615a      	str	r2, [r3, #20]
 801618e:	e7c2      	b.n	8016116 <__gethex+0x390>
 8016190:	692a      	ldr	r2, [r5, #16]
 8016192:	454a      	cmp	r2, r9
 8016194:	dd0b      	ble.n	80161ae <__gethex+0x428>
 8016196:	2101      	movs	r1, #1
 8016198:	4628      	mov	r0, r5
 801619a:	f7ff fda5 	bl	8015ce8 <rshift>
 801619e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80161a2:	3401      	adds	r4, #1
 80161a4:	42a3      	cmp	r3, r4
 80161a6:	f6ff aed9 	blt.w	8015f5c <__gethex+0x1d6>
 80161aa:	2701      	movs	r7, #1
 80161ac:	e7c7      	b.n	801613e <__gethex+0x3b8>
 80161ae:	f016 061f 	ands.w	r6, r6, #31
 80161b2:	d0fa      	beq.n	80161aa <__gethex+0x424>
 80161b4:	449a      	add	sl, r3
 80161b6:	f1c6 0620 	rsb	r6, r6, #32
 80161ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80161be:	f000 f9b9 	bl	8016534 <__hi0bits>
 80161c2:	42b0      	cmp	r0, r6
 80161c4:	dbe7      	blt.n	8016196 <__gethex+0x410>
 80161c6:	e7f0      	b.n	80161aa <__gethex+0x424>

080161c8 <L_shift>:
 80161c8:	f1c2 0208 	rsb	r2, r2, #8
 80161cc:	0092      	lsls	r2, r2, #2
 80161ce:	b570      	push	{r4, r5, r6, lr}
 80161d0:	f1c2 0620 	rsb	r6, r2, #32
 80161d4:	6843      	ldr	r3, [r0, #4]
 80161d6:	6804      	ldr	r4, [r0, #0]
 80161d8:	fa03 f506 	lsl.w	r5, r3, r6
 80161dc:	432c      	orrs	r4, r5
 80161de:	40d3      	lsrs	r3, r2
 80161e0:	6004      	str	r4, [r0, #0]
 80161e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80161e6:	4288      	cmp	r0, r1
 80161e8:	d3f4      	bcc.n	80161d4 <L_shift+0xc>
 80161ea:	bd70      	pop	{r4, r5, r6, pc}

080161ec <__match>:
 80161ec:	b530      	push	{r4, r5, lr}
 80161ee:	6803      	ldr	r3, [r0, #0]
 80161f0:	3301      	adds	r3, #1
 80161f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161f6:	b914      	cbnz	r4, 80161fe <__match+0x12>
 80161f8:	6003      	str	r3, [r0, #0]
 80161fa:	2001      	movs	r0, #1
 80161fc:	bd30      	pop	{r4, r5, pc}
 80161fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016206:	2d19      	cmp	r5, #25
 8016208:	bf98      	it	ls
 801620a:	3220      	addls	r2, #32
 801620c:	42a2      	cmp	r2, r4
 801620e:	d0f0      	beq.n	80161f2 <__match+0x6>
 8016210:	2000      	movs	r0, #0
 8016212:	e7f3      	b.n	80161fc <__match+0x10>

08016214 <__hexnan>:
 8016214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016218:	680b      	ldr	r3, [r1, #0]
 801621a:	6801      	ldr	r1, [r0, #0]
 801621c:	115f      	asrs	r7, r3, #5
 801621e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016222:	f013 031f 	ands.w	r3, r3, #31
 8016226:	b087      	sub	sp, #28
 8016228:	bf18      	it	ne
 801622a:	3704      	addne	r7, #4
 801622c:	2500      	movs	r5, #0
 801622e:	1f3e      	subs	r6, r7, #4
 8016230:	4682      	mov	sl, r0
 8016232:	4690      	mov	r8, r2
 8016234:	9301      	str	r3, [sp, #4]
 8016236:	f847 5c04 	str.w	r5, [r7, #-4]
 801623a:	46b1      	mov	r9, r6
 801623c:	4634      	mov	r4, r6
 801623e:	9502      	str	r5, [sp, #8]
 8016240:	46ab      	mov	fp, r5
 8016242:	784a      	ldrb	r2, [r1, #1]
 8016244:	1c4b      	adds	r3, r1, #1
 8016246:	9303      	str	r3, [sp, #12]
 8016248:	b342      	cbz	r2, 801629c <__hexnan+0x88>
 801624a:	4610      	mov	r0, r2
 801624c:	9105      	str	r1, [sp, #20]
 801624e:	9204      	str	r2, [sp, #16]
 8016250:	f7ff fd84 	bl	8015d5c <__hexdig_fun>
 8016254:	2800      	cmp	r0, #0
 8016256:	d143      	bne.n	80162e0 <__hexnan+0xcc>
 8016258:	9a04      	ldr	r2, [sp, #16]
 801625a:	9905      	ldr	r1, [sp, #20]
 801625c:	2a20      	cmp	r2, #32
 801625e:	d818      	bhi.n	8016292 <__hexnan+0x7e>
 8016260:	9b02      	ldr	r3, [sp, #8]
 8016262:	459b      	cmp	fp, r3
 8016264:	dd13      	ble.n	801628e <__hexnan+0x7a>
 8016266:	454c      	cmp	r4, r9
 8016268:	d206      	bcs.n	8016278 <__hexnan+0x64>
 801626a:	2d07      	cmp	r5, #7
 801626c:	dc04      	bgt.n	8016278 <__hexnan+0x64>
 801626e:	462a      	mov	r2, r5
 8016270:	4649      	mov	r1, r9
 8016272:	4620      	mov	r0, r4
 8016274:	f7ff ffa8 	bl	80161c8 <L_shift>
 8016278:	4544      	cmp	r4, r8
 801627a:	d944      	bls.n	8016306 <__hexnan+0xf2>
 801627c:	2300      	movs	r3, #0
 801627e:	f1a4 0904 	sub.w	r9, r4, #4
 8016282:	f844 3c04 	str.w	r3, [r4, #-4]
 8016286:	f8cd b008 	str.w	fp, [sp, #8]
 801628a:	464c      	mov	r4, r9
 801628c:	461d      	mov	r5, r3
 801628e:	9903      	ldr	r1, [sp, #12]
 8016290:	e7d7      	b.n	8016242 <__hexnan+0x2e>
 8016292:	2a29      	cmp	r2, #41	; 0x29
 8016294:	d14a      	bne.n	801632c <__hexnan+0x118>
 8016296:	3102      	adds	r1, #2
 8016298:	f8ca 1000 	str.w	r1, [sl]
 801629c:	f1bb 0f00 	cmp.w	fp, #0
 80162a0:	d044      	beq.n	801632c <__hexnan+0x118>
 80162a2:	454c      	cmp	r4, r9
 80162a4:	d206      	bcs.n	80162b4 <__hexnan+0xa0>
 80162a6:	2d07      	cmp	r5, #7
 80162a8:	dc04      	bgt.n	80162b4 <__hexnan+0xa0>
 80162aa:	462a      	mov	r2, r5
 80162ac:	4649      	mov	r1, r9
 80162ae:	4620      	mov	r0, r4
 80162b0:	f7ff ff8a 	bl	80161c8 <L_shift>
 80162b4:	4544      	cmp	r4, r8
 80162b6:	d928      	bls.n	801630a <__hexnan+0xf6>
 80162b8:	4643      	mov	r3, r8
 80162ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80162be:	f843 2b04 	str.w	r2, [r3], #4
 80162c2:	42a6      	cmp	r6, r4
 80162c4:	d2f9      	bcs.n	80162ba <__hexnan+0xa6>
 80162c6:	2200      	movs	r2, #0
 80162c8:	f843 2b04 	str.w	r2, [r3], #4
 80162cc:	429e      	cmp	r6, r3
 80162ce:	d2fb      	bcs.n	80162c8 <__hexnan+0xb4>
 80162d0:	6833      	ldr	r3, [r6, #0]
 80162d2:	b91b      	cbnz	r3, 80162dc <__hexnan+0xc8>
 80162d4:	4546      	cmp	r6, r8
 80162d6:	d127      	bne.n	8016328 <__hexnan+0x114>
 80162d8:	2301      	movs	r3, #1
 80162da:	6033      	str	r3, [r6, #0]
 80162dc:	2005      	movs	r0, #5
 80162de:	e026      	b.n	801632e <__hexnan+0x11a>
 80162e0:	3501      	adds	r5, #1
 80162e2:	2d08      	cmp	r5, #8
 80162e4:	f10b 0b01 	add.w	fp, fp, #1
 80162e8:	dd06      	ble.n	80162f8 <__hexnan+0xe4>
 80162ea:	4544      	cmp	r4, r8
 80162ec:	d9cf      	bls.n	801628e <__hexnan+0x7a>
 80162ee:	2300      	movs	r3, #0
 80162f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80162f4:	2501      	movs	r5, #1
 80162f6:	3c04      	subs	r4, #4
 80162f8:	6822      	ldr	r2, [r4, #0]
 80162fa:	f000 000f 	and.w	r0, r0, #15
 80162fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016302:	6020      	str	r0, [r4, #0]
 8016304:	e7c3      	b.n	801628e <__hexnan+0x7a>
 8016306:	2508      	movs	r5, #8
 8016308:	e7c1      	b.n	801628e <__hexnan+0x7a>
 801630a:	9b01      	ldr	r3, [sp, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d0df      	beq.n	80162d0 <__hexnan+0xbc>
 8016310:	f04f 32ff 	mov.w	r2, #4294967295
 8016314:	f1c3 0320 	rsb	r3, r3, #32
 8016318:	fa22 f303 	lsr.w	r3, r2, r3
 801631c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016320:	401a      	ands	r2, r3
 8016322:	f847 2c04 	str.w	r2, [r7, #-4]
 8016326:	e7d3      	b.n	80162d0 <__hexnan+0xbc>
 8016328:	3e04      	subs	r6, #4
 801632a:	e7d1      	b.n	80162d0 <__hexnan+0xbc>
 801632c:	2004      	movs	r0, #4
 801632e:	b007      	add	sp, #28
 8016330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016334 <__locale_ctype_ptr_l>:
 8016334:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016338:	4770      	bx	lr
	...

0801633c <__locale_ctype_ptr>:
 801633c:	4b04      	ldr	r3, [pc, #16]	; (8016350 <__locale_ctype_ptr+0x14>)
 801633e:	4a05      	ldr	r2, [pc, #20]	; (8016354 <__locale_ctype_ptr+0x18>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	6a1b      	ldr	r3, [r3, #32]
 8016344:	2b00      	cmp	r3, #0
 8016346:	bf08      	it	eq
 8016348:	4613      	moveq	r3, r2
 801634a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801634e:	4770      	bx	lr
 8016350:	2000000c 	.word	0x2000000c
 8016354:	20000070 	.word	0x20000070

08016358 <__localeconv_l>:
 8016358:	30f0      	adds	r0, #240	; 0xf0
 801635a:	4770      	bx	lr

0801635c <_localeconv_r>:
 801635c:	4b04      	ldr	r3, [pc, #16]	; (8016370 <_localeconv_r+0x14>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	6a18      	ldr	r0, [r3, #32]
 8016362:	4b04      	ldr	r3, [pc, #16]	; (8016374 <_localeconv_r+0x18>)
 8016364:	2800      	cmp	r0, #0
 8016366:	bf08      	it	eq
 8016368:	4618      	moveq	r0, r3
 801636a:	30f0      	adds	r0, #240	; 0xf0
 801636c:	4770      	bx	lr
 801636e:	bf00      	nop
 8016370:	2000000c 	.word	0x2000000c
 8016374:	20000070 	.word	0x20000070

08016378 <malloc>:
 8016378:	4b02      	ldr	r3, [pc, #8]	; (8016384 <malloc+0xc>)
 801637a:	4601      	mov	r1, r0
 801637c:	6818      	ldr	r0, [r3, #0]
 801637e:	f000 bc71 	b.w	8016c64 <_malloc_r>
 8016382:	bf00      	nop
 8016384:	2000000c 	.word	0x2000000c

08016388 <__ascii_mbtowc>:
 8016388:	b082      	sub	sp, #8
 801638a:	b901      	cbnz	r1, 801638e <__ascii_mbtowc+0x6>
 801638c:	a901      	add	r1, sp, #4
 801638e:	b142      	cbz	r2, 80163a2 <__ascii_mbtowc+0x1a>
 8016390:	b14b      	cbz	r3, 80163a6 <__ascii_mbtowc+0x1e>
 8016392:	7813      	ldrb	r3, [r2, #0]
 8016394:	600b      	str	r3, [r1, #0]
 8016396:	7812      	ldrb	r2, [r2, #0]
 8016398:	1c10      	adds	r0, r2, #0
 801639a:	bf18      	it	ne
 801639c:	2001      	movne	r0, #1
 801639e:	b002      	add	sp, #8
 80163a0:	4770      	bx	lr
 80163a2:	4610      	mov	r0, r2
 80163a4:	e7fb      	b.n	801639e <__ascii_mbtowc+0x16>
 80163a6:	f06f 0001 	mvn.w	r0, #1
 80163aa:	e7f8      	b.n	801639e <__ascii_mbtowc+0x16>

080163ac <_Balloc>:
 80163ac:	b570      	push	{r4, r5, r6, lr}
 80163ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80163b0:	4604      	mov	r4, r0
 80163b2:	460e      	mov	r6, r1
 80163b4:	b93d      	cbnz	r5, 80163c6 <_Balloc+0x1a>
 80163b6:	2010      	movs	r0, #16
 80163b8:	f7ff ffde 	bl	8016378 <malloc>
 80163bc:	6260      	str	r0, [r4, #36]	; 0x24
 80163be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80163c2:	6005      	str	r5, [r0, #0]
 80163c4:	60c5      	str	r5, [r0, #12]
 80163c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80163c8:	68eb      	ldr	r3, [r5, #12]
 80163ca:	b183      	cbz	r3, 80163ee <_Balloc+0x42>
 80163cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163ce:	68db      	ldr	r3, [r3, #12]
 80163d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80163d4:	b9b8      	cbnz	r0, 8016406 <_Balloc+0x5a>
 80163d6:	2101      	movs	r1, #1
 80163d8:	fa01 f506 	lsl.w	r5, r1, r6
 80163dc:	1d6a      	adds	r2, r5, #5
 80163de:	0092      	lsls	r2, r2, #2
 80163e0:	4620      	mov	r0, r4
 80163e2:	f000 fbe2 	bl	8016baa <_calloc_r>
 80163e6:	b160      	cbz	r0, 8016402 <_Balloc+0x56>
 80163e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80163ec:	e00e      	b.n	801640c <_Balloc+0x60>
 80163ee:	2221      	movs	r2, #33	; 0x21
 80163f0:	2104      	movs	r1, #4
 80163f2:	4620      	mov	r0, r4
 80163f4:	f000 fbd9 	bl	8016baa <_calloc_r>
 80163f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163fa:	60e8      	str	r0, [r5, #12]
 80163fc:	68db      	ldr	r3, [r3, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d1e4      	bne.n	80163cc <_Balloc+0x20>
 8016402:	2000      	movs	r0, #0
 8016404:	bd70      	pop	{r4, r5, r6, pc}
 8016406:	6802      	ldr	r2, [r0, #0]
 8016408:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801640c:	2300      	movs	r3, #0
 801640e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016412:	e7f7      	b.n	8016404 <_Balloc+0x58>

08016414 <_Bfree>:
 8016414:	b570      	push	{r4, r5, r6, lr}
 8016416:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016418:	4606      	mov	r6, r0
 801641a:	460d      	mov	r5, r1
 801641c:	b93c      	cbnz	r4, 801642e <_Bfree+0x1a>
 801641e:	2010      	movs	r0, #16
 8016420:	f7ff ffaa 	bl	8016378 <malloc>
 8016424:	6270      	str	r0, [r6, #36]	; 0x24
 8016426:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801642a:	6004      	str	r4, [r0, #0]
 801642c:	60c4      	str	r4, [r0, #12]
 801642e:	b13d      	cbz	r5, 8016440 <_Bfree+0x2c>
 8016430:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016432:	686a      	ldr	r2, [r5, #4]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801643a:	6029      	str	r1, [r5, #0]
 801643c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016440:	bd70      	pop	{r4, r5, r6, pc}

08016442 <__multadd>:
 8016442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016446:	690d      	ldr	r5, [r1, #16]
 8016448:	461f      	mov	r7, r3
 801644a:	4606      	mov	r6, r0
 801644c:	460c      	mov	r4, r1
 801644e:	f101 0c14 	add.w	ip, r1, #20
 8016452:	2300      	movs	r3, #0
 8016454:	f8dc 0000 	ldr.w	r0, [ip]
 8016458:	b281      	uxth	r1, r0
 801645a:	fb02 7101 	mla	r1, r2, r1, r7
 801645e:	0c0f      	lsrs	r7, r1, #16
 8016460:	0c00      	lsrs	r0, r0, #16
 8016462:	fb02 7000 	mla	r0, r2, r0, r7
 8016466:	b289      	uxth	r1, r1
 8016468:	3301      	adds	r3, #1
 801646a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801646e:	429d      	cmp	r5, r3
 8016470:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016474:	f84c 1b04 	str.w	r1, [ip], #4
 8016478:	dcec      	bgt.n	8016454 <__multadd+0x12>
 801647a:	b1d7      	cbz	r7, 80164b2 <__multadd+0x70>
 801647c:	68a3      	ldr	r3, [r4, #8]
 801647e:	42ab      	cmp	r3, r5
 8016480:	dc12      	bgt.n	80164a8 <__multadd+0x66>
 8016482:	6861      	ldr	r1, [r4, #4]
 8016484:	4630      	mov	r0, r6
 8016486:	3101      	adds	r1, #1
 8016488:	f7ff ff90 	bl	80163ac <_Balloc>
 801648c:	6922      	ldr	r2, [r4, #16]
 801648e:	3202      	adds	r2, #2
 8016490:	f104 010c 	add.w	r1, r4, #12
 8016494:	4680      	mov	r8, r0
 8016496:	0092      	lsls	r2, r2, #2
 8016498:	300c      	adds	r0, #12
 801649a:	f7fd f831 	bl	8013500 <memcpy>
 801649e:	4621      	mov	r1, r4
 80164a0:	4630      	mov	r0, r6
 80164a2:	f7ff ffb7 	bl	8016414 <_Bfree>
 80164a6:	4644      	mov	r4, r8
 80164a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80164ac:	3501      	adds	r5, #1
 80164ae:	615f      	str	r7, [r3, #20]
 80164b0:	6125      	str	r5, [r4, #16]
 80164b2:	4620      	mov	r0, r4
 80164b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164b8 <__s2b>:
 80164b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164bc:	460c      	mov	r4, r1
 80164be:	4615      	mov	r5, r2
 80164c0:	461f      	mov	r7, r3
 80164c2:	2209      	movs	r2, #9
 80164c4:	3308      	adds	r3, #8
 80164c6:	4606      	mov	r6, r0
 80164c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80164cc:	2100      	movs	r1, #0
 80164ce:	2201      	movs	r2, #1
 80164d0:	429a      	cmp	r2, r3
 80164d2:	db20      	blt.n	8016516 <__s2b+0x5e>
 80164d4:	4630      	mov	r0, r6
 80164d6:	f7ff ff69 	bl	80163ac <_Balloc>
 80164da:	9b08      	ldr	r3, [sp, #32]
 80164dc:	6143      	str	r3, [r0, #20]
 80164de:	2d09      	cmp	r5, #9
 80164e0:	f04f 0301 	mov.w	r3, #1
 80164e4:	6103      	str	r3, [r0, #16]
 80164e6:	dd19      	ble.n	801651c <__s2b+0x64>
 80164e8:	f104 0809 	add.w	r8, r4, #9
 80164ec:	46c1      	mov	r9, r8
 80164ee:	442c      	add	r4, r5
 80164f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80164f4:	4601      	mov	r1, r0
 80164f6:	3b30      	subs	r3, #48	; 0x30
 80164f8:	220a      	movs	r2, #10
 80164fa:	4630      	mov	r0, r6
 80164fc:	f7ff ffa1 	bl	8016442 <__multadd>
 8016500:	45a1      	cmp	r9, r4
 8016502:	d1f5      	bne.n	80164f0 <__s2b+0x38>
 8016504:	eb08 0405 	add.w	r4, r8, r5
 8016508:	3c08      	subs	r4, #8
 801650a:	1b2d      	subs	r5, r5, r4
 801650c:	1963      	adds	r3, r4, r5
 801650e:	42bb      	cmp	r3, r7
 8016510:	db07      	blt.n	8016522 <__s2b+0x6a>
 8016512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016516:	0052      	lsls	r2, r2, #1
 8016518:	3101      	adds	r1, #1
 801651a:	e7d9      	b.n	80164d0 <__s2b+0x18>
 801651c:	340a      	adds	r4, #10
 801651e:	2509      	movs	r5, #9
 8016520:	e7f3      	b.n	801650a <__s2b+0x52>
 8016522:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016526:	4601      	mov	r1, r0
 8016528:	3b30      	subs	r3, #48	; 0x30
 801652a:	220a      	movs	r2, #10
 801652c:	4630      	mov	r0, r6
 801652e:	f7ff ff88 	bl	8016442 <__multadd>
 8016532:	e7eb      	b.n	801650c <__s2b+0x54>

08016534 <__hi0bits>:
 8016534:	0c02      	lsrs	r2, r0, #16
 8016536:	0412      	lsls	r2, r2, #16
 8016538:	4603      	mov	r3, r0
 801653a:	b9b2      	cbnz	r2, 801656a <__hi0bits+0x36>
 801653c:	0403      	lsls	r3, r0, #16
 801653e:	2010      	movs	r0, #16
 8016540:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016544:	bf04      	itt	eq
 8016546:	021b      	lsleq	r3, r3, #8
 8016548:	3008      	addeq	r0, #8
 801654a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801654e:	bf04      	itt	eq
 8016550:	011b      	lsleq	r3, r3, #4
 8016552:	3004      	addeq	r0, #4
 8016554:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016558:	bf04      	itt	eq
 801655a:	009b      	lsleq	r3, r3, #2
 801655c:	3002      	addeq	r0, #2
 801655e:	2b00      	cmp	r3, #0
 8016560:	db06      	blt.n	8016570 <__hi0bits+0x3c>
 8016562:	005b      	lsls	r3, r3, #1
 8016564:	d503      	bpl.n	801656e <__hi0bits+0x3a>
 8016566:	3001      	adds	r0, #1
 8016568:	4770      	bx	lr
 801656a:	2000      	movs	r0, #0
 801656c:	e7e8      	b.n	8016540 <__hi0bits+0xc>
 801656e:	2020      	movs	r0, #32
 8016570:	4770      	bx	lr

08016572 <__lo0bits>:
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	f013 0207 	ands.w	r2, r3, #7
 8016578:	4601      	mov	r1, r0
 801657a:	d00b      	beq.n	8016594 <__lo0bits+0x22>
 801657c:	07da      	lsls	r2, r3, #31
 801657e:	d423      	bmi.n	80165c8 <__lo0bits+0x56>
 8016580:	0798      	lsls	r0, r3, #30
 8016582:	bf49      	itett	mi
 8016584:	085b      	lsrmi	r3, r3, #1
 8016586:	089b      	lsrpl	r3, r3, #2
 8016588:	2001      	movmi	r0, #1
 801658a:	600b      	strmi	r3, [r1, #0]
 801658c:	bf5c      	itt	pl
 801658e:	600b      	strpl	r3, [r1, #0]
 8016590:	2002      	movpl	r0, #2
 8016592:	4770      	bx	lr
 8016594:	b298      	uxth	r0, r3
 8016596:	b9a8      	cbnz	r0, 80165c4 <__lo0bits+0x52>
 8016598:	0c1b      	lsrs	r3, r3, #16
 801659a:	2010      	movs	r0, #16
 801659c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80165a0:	bf04      	itt	eq
 80165a2:	0a1b      	lsreq	r3, r3, #8
 80165a4:	3008      	addeq	r0, #8
 80165a6:	071a      	lsls	r2, r3, #28
 80165a8:	bf04      	itt	eq
 80165aa:	091b      	lsreq	r3, r3, #4
 80165ac:	3004      	addeq	r0, #4
 80165ae:	079a      	lsls	r2, r3, #30
 80165b0:	bf04      	itt	eq
 80165b2:	089b      	lsreq	r3, r3, #2
 80165b4:	3002      	addeq	r0, #2
 80165b6:	07da      	lsls	r2, r3, #31
 80165b8:	d402      	bmi.n	80165c0 <__lo0bits+0x4e>
 80165ba:	085b      	lsrs	r3, r3, #1
 80165bc:	d006      	beq.n	80165cc <__lo0bits+0x5a>
 80165be:	3001      	adds	r0, #1
 80165c0:	600b      	str	r3, [r1, #0]
 80165c2:	4770      	bx	lr
 80165c4:	4610      	mov	r0, r2
 80165c6:	e7e9      	b.n	801659c <__lo0bits+0x2a>
 80165c8:	2000      	movs	r0, #0
 80165ca:	4770      	bx	lr
 80165cc:	2020      	movs	r0, #32
 80165ce:	4770      	bx	lr

080165d0 <__i2b>:
 80165d0:	b510      	push	{r4, lr}
 80165d2:	460c      	mov	r4, r1
 80165d4:	2101      	movs	r1, #1
 80165d6:	f7ff fee9 	bl	80163ac <_Balloc>
 80165da:	2201      	movs	r2, #1
 80165dc:	6144      	str	r4, [r0, #20]
 80165de:	6102      	str	r2, [r0, #16]
 80165e0:	bd10      	pop	{r4, pc}

080165e2 <__multiply>:
 80165e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e6:	4614      	mov	r4, r2
 80165e8:	690a      	ldr	r2, [r1, #16]
 80165ea:	6923      	ldr	r3, [r4, #16]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	bfb8      	it	lt
 80165f0:	460b      	movlt	r3, r1
 80165f2:	4688      	mov	r8, r1
 80165f4:	bfbc      	itt	lt
 80165f6:	46a0      	movlt	r8, r4
 80165f8:	461c      	movlt	r4, r3
 80165fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016606:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801660a:	eb07 0609 	add.w	r6, r7, r9
 801660e:	42b3      	cmp	r3, r6
 8016610:	bfb8      	it	lt
 8016612:	3101      	addlt	r1, #1
 8016614:	f7ff feca 	bl	80163ac <_Balloc>
 8016618:	f100 0514 	add.w	r5, r0, #20
 801661c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016620:	462b      	mov	r3, r5
 8016622:	2200      	movs	r2, #0
 8016624:	4573      	cmp	r3, lr
 8016626:	d316      	bcc.n	8016656 <__multiply+0x74>
 8016628:	f104 0214 	add.w	r2, r4, #20
 801662c:	f108 0114 	add.w	r1, r8, #20
 8016630:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016634:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016638:	9300      	str	r3, [sp, #0]
 801663a:	9b00      	ldr	r3, [sp, #0]
 801663c:	9201      	str	r2, [sp, #4]
 801663e:	4293      	cmp	r3, r2
 8016640:	d80c      	bhi.n	801665c <__multiply+0x7a>
 8016642:	2e00      	cmp	r6, #0
 8016644:	dd03      	ble.n	801664e <__multiply+0x6c>
 8016646:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801664a:	2b00      	cmp	r3, #0
 801664c:	d05d      	beq.n	801670a <__multiply+0x128>
 801664e:	6106      	str	r6, [r0, #16]
 8016650:	b003      	add	sp, #12
 8016652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016656:	f843 2b04 	str.w	r2, [r3], #4
 801665a:	e7e3      	b.n	8016624 <__multiply+0x42>
 801665c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016660:	f1bb 0f00 	cmp.w	fp, #0
 8016664:	d023      	beq.n	80166ae <__multiply+0xcc>
 8016666:	4689      	mov	r9, r1
 8016668:	46ac      	mov	ip, r5
 801666a:	f04f 0800 	mov.w	r8, #0
 801666e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016672:	f8dc a000 	ldr.w	sl, [ip]
 8016676:	b2a3      	uxth	r3, r4
 8016678:	fa1f fa8a 	uxth.w	sl, sl
 801667c:	fb0b a303 	mla	r3, fp, r3, sl
 8016680:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016684:	f8dc 4000 	ldr.w	r4, [ip]
 8016688:	4443      	add	r3, r8
 801668a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801668e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016692:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016696:	46e2      	mov	sl, ip
 8016698:	b29b      	uxth	r3, r3
 801669a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801669e:	454f      	cmp	r7, r9
 80166a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80166a4:	f84a 3b04 	str.w	r3, [sl], #4
 80166a8:	d82b      	bhi.n	8016702 <__multiply+0x120>
 80166aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80166ae:	9b01      	ldr	r3, [sp, #4]
 80166b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80166b4:	3204      	adds	r2, #4
 80166b6:	f1ba 0f00 	cmp.w	sl, #0
 80166ba:	d020      	beq.n	80166fe <__multiply+0x11c>
 80166bc:	682b      	ldr	r3, [r5, #0]
 80166be:	4689      	mov	r9, r1
 80166c0:	46a8      	mov	r8, r5
 80166c2:	f04f 0b00 	mov.w	fp, #0
 80166c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80166ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80166ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80166d2:	445c      	add	r4, fp
 80166d4:	46c4      	mov	ip, r8
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166dc:	f84c 3b04 	str.w	r3, [ip], #4
 80166e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80166e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80166e8:	0c1b      	lsrs	r3, r3, #16
 80166ea:	fb0a b303 	mla	r3, sl, r3, fp
 80166ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80166f2:	454f      	cmp	r7, r9
 80166f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80166f8:	d805      	bhi.n	8016706 <__multiply+0x124>
 80166fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80166fe:	3504      	adds	r5, #4
 8016700:	e79b      	b.n	801663a <__multiply+0x58>
 8016702:	46d4      	mov	ip, sl
 8016704:	e7b3      	b.n	801666e <__multiply+0x8c>
 8016706:	46e0      	mov	r8, ip
 8016708:	e7dd      	b.n	80166c6 <__multiply+0xe4>
 801670a:	3e01      	subs	r6, #1
 801670c:	e799      	b.n	8016642 <__multiply+0x60>
	...

08016710 <__pow5mult>:
 8016710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016714:	4615      	mov	r5, r2
 8016716:	f012 0203 	ands.w	r2, r2, #3
 801671a:	4606      	mov	r6, r0
 801671c:	460f      	mov	r7, r1
 801671e:	d007      	beq.n	8016730 <__pow5mult+0x20>
 8016720:	3a01      	subs	r2, #1
 8016722:	4c21      	ldr	r4, [pc, #132]	; (80167a8 <__pow5mult+0x98>)
 8016724:	2300      	movs	r3, #0
 8016726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801672a:	f7ff fe8a 	bl	8016442 <__multadd>
 801672e:	4607      	mov	r7, r0
 8016730:	10ad      	asrs	r5, r5, #2
 8016732:	d035      	beq.n	80167a0 <__pow5mult+0x90>
 8016734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016736:	b93c      	cbnz	r4, 8016748 <__pow5mult+0x38>
 8016738:	2010      	movs	r0, #16
 801673a:	f7ff fe1d 	bl	8016378 <malloc>
 801673e:	6270      	str	r0, [r6, #36]	; 0x24
 8016740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016744:	6004      	str	r4, [r0, #0]
 8016746:	60c4      	str	r4, [r0, #12]
 8016748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801674c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016750:	b94c      	cbnz	r4, 8016766 <__pow5mult+0x56>
 8016752:	f240 2171 	movw	r1, #625	; 0x271
 8016756:	4630      	mov	r0, r6
 8016758:	f7ff ff3a 	bl	80165d0 <__i2b>
 801675c:	2300      	movs	r3, #0
 801675e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016762:	4604      	mov	r4, r0
 8016764:	6003      	str	r3, [r0, #0]
 8016766:	f04f 0800 	mov.w	r8, #0
 801676a:	07eb      	lsls	r3, r5, #31
 801676c:	d50a      	bpl.n	8016784 <__pow5mult+0x74>
 801676e:	4639      	mov	r1, r7
 8016770:	4622      	mov	r2, r4
 8016772:	4630      	mov	r0, r6
 8016774:	f7ff ff35 	bl	80165e2 <__multiply>
 8016778:	4639      	mov	r1, r7
 801677a:	4681      	mov	r9, r0
 801677c:	4630      	mov	r0, r6
 801677e:	f7ff fe49 	bl	8016414 <_Bfree>
 8016782:	464f      	mov	r7, r9
 8016784:	106d      	asrs	r5, r5, #1
 8016786:	d00b      	beq.n	80167a0 <__pow5mult+0x90>
 8016788:	6820      	ldr	r0, [r4, #0]
 801678a:	b938      	cbnz	r0, 801679c <__pow5mult+0x8c>
 801678c:	4622      	mov	r2, r4
 801678e:	4621      	mov	r1, r4
 8016790:	4630      	mov	r0, r6
 8016792:	f7ff ff26 	bl	80165e2 <__multiply>
 8016796:	6020      	str	r0, [r4, #0]
 8016798:	f8c0 8000 	str.w	r8, [r0]
 801679c:	4604      	mov	r4, r0
 801679e:	e7e4      	b.n	801676a <__pow5mult+0x5a>
 80167a0:	4638      	mov	r0, r7
 80167a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167a6:	bf00      	nop
 80167a8:	08018280 	.word	0x08018280

080167ac <__lshift>:
 80167ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167b0:	460c      	mov	r4, r1
 80167b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	6849      	ldr	r1, [r1, #4]
 80167ba:	eb0a 0903 	add.w	r9, sl, r3
 80167be:	68a3      	ldr	r3, [r4, #8]
 80167c0:	4607      	mov	r7, r0
 80167c2:	4616      	mov	r6, r2
 80167c4:	f109 0501 	add.w	r5, r9, #1
 80167c8:	42ab      	cmp	r3, r5
 80167ca:	db32      	blt.n	8016832 <__lshift+0x86>
 80167cc:	4638      	mov	r0, r7
 80167ce:	f7ff fded 	bl	80163ac <_Balloc>
 80167d2:	2300      	movs	r3, #0
 80167d4:	4680      	mov	r8, r0
 80167d6:	f100 0114 	add.w	r1, r0, #20
 80167da:	461a      	mov	r2, r3
 80167dc:	4553      	cmp	r3, sl
 80167de:	db2b      	blt.n	8016838 <__lshift+0x8c>
 80167e0:	6920      	ldr	r0, [r4, #16]
 80167e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80167e6:	f104 0314 	add.w	r3, r4, #20
 80167ea:	f016 021f 	ands.w	r2, r6, #31
 80167ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80167f6:	d025      	beq.n	8016844 <__lshift+0x98>
 80167f8:	f1c2 0e20 	rsb	lr, r2, #32
 80167fc:	2000      	movs	r0, #0
 80167fe:	681e      	ldr	r6, [r3, #0]
 8016800:	468a      	mov	sl, r1
 8016802:	4096      	lsls	r6, r2
 8016804:	4330      	orrs	r0, r6
 8016806:	f84a 0b04 	str.w	r0, [sl], #4
 801680a:	f853 0b04 	ldr.w	r0, [r3], #4
 801680e:	459c      	cmp	ip, r3
 8016810:	fa20 f00e 	lsr.w	r0, r0, lr
 8016814:	d814      	bhi.n	8016840 <__lshift+0x94>
 8016816:	6048      	str	r0, [r1, #4]
 8016818:	b108      	cbz	r0, 801681e <__lshift+0x72>
 801681a:	f109 0502 	add.w	r5, r9, #2
 801681e:	3d01      	subs	r5, #1
 8016820:	4638      	mov	r0, r7
 8016822:	f8c8 5010 	str.w	r5, [r8, #16]
 8016826:	4621      	mov	r1, r4
 8016828:	f7ff fdf4 	bl	8016414 <_Bfree>
 801682c:	4640      	mov	r0, r8
 801682e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016832:	3101      	adds	r1, #1
 8016834:	005b      	lsls	r3, r3, #1
 8016836:	e7c7      	b.n	80167c8 <__lshift+0x1c>
 8016838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801683c:	3301      	adds	r3, #1
 801683e:	e7cd      	b.n	80167dc <__lshift+0x30>
 8016840:	4651      	mov	r1, sl
 8016842:	e7dc      	b.n	80167fe <__lshift+0x52>
 8016844:	3904      	subs	r1, #4
 8016846:	f853 2b04 	ldr.w	r2, [r3], #4
 801684a:	f841 2f04 	str.w	r2, [r1, #4]!
 801684e:	459c      	cmp	ip, r3
 8016850:	d8f9      	bhi.n	8016846 <__lshift+0x9a>
 8016852:	e7e4      	b.n	801681e <__lshift+0x72>

08016854 <__mcmp>:
 8016854:	6903      	ldr	r3, [r0, #16]
 8016856:	690a      	ldr	r2, [r1, #16]
 8016858:	1a9b      	subs	r3, r3, r2
 801685a:	b530      	push	{r4, r5, lr}
 801685c:	d10c      	bne.n	8016878 <__mcmp+0x24>
 801685e:	0092      	lsls	r2, r2, #2
 8016860:	3014      	adds	r0, #20
 8016862:	3114      	adds	r1, #20
 8016864:	1884      	adds	r4, r0, r2
 8016866:	4411      	add	r1, r2
 8016868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801686c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016870:	4295      	cmp	r5, r2
 8016872:	d003      	beq.n	801687c <__mcmp+0x28>
 8016874:	d305      	bcc.n	8016882 <__mcmp+0x2e>
 8016876:	2301      	movs	r3, #1
 8016878:	4618      	mov	r0, r3
 801687a:	bd30      	pop	{r4, r5, pc}
 801687c:	42a0      	cmp	r0, r4
 801687e:	d3f3      	bcc.n	8016868 <__mcmp+0x14>
 8016880:	e7fa      	b.n	8016878 <__mcmp+0x24>
 8016882:	f04f 33ff 	mov.w	r3, #4294967295
 8016886:	e7f7      	b.n	8016878 <__mcmp+0x24>

08016888 <__mdiff>:
 8016888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801688c:	460d      	mov	r5, r1
 801688e:	4607      	mov	r7, r0
 8016890:	4611      	mov	r1, r2
 8016892:	4628      	mov	r0, r5
 8016894:	4614      	mov	r4, r2
 8016896:	f7ff ffdd 	bl	8016854 <__mcmp>
 801689a:	1e06      	subs	r6, r0, #0
 801689c:	d108      	bne.n	80168b0 <__mdiff+0x28>
 801689e:	4631      	mov	r1, r6
 80168a0:	4638      	mov	r0, r7
 80168a2:	f7ff fd83 	bl	80163ac <_Balloc>
 80168a6:	2301      	movs	r3, #1
 80168a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80168ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168b0:	bfa4      	itt	ge
 80168b2:	4623      	movge	r3, r4
 80168b4:	462c      	movge	r4, r5
 80168b6:	4638      	mov	r0, r7
 80168b8:	6861      	ldr	r1, [r4, #4]
 80168ba:	bfa6      	itte	ge
 80168bc:	461d      	movge	r5, r3
 80168be:	2600      	movge	r6, #0
 80168c0:	2601      	movlt	r6, #1
 80168c2:	f7ff fd73 	bl	80163ac <_Balloc>
 80168c6:	692b      	ldr	r3, [r5, #16]
 80168c8:	60c6      	str	r6, [r0, #12]
 80168ca:	6926      	ldr	r6, [r4, #16]
 80168cc:	f105 0914 	add.w	r9, r5, #20
 80168d0:	f104 0214 	add.w	r2, r4, #20
 80168d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80168d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80168dc:	f100 0514 	add.w	r5, r0, #20
 80168e0:	f04f 0e00 	mov.w	lr, #0
 80168e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80168e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80168ec:	fa1e f18a 	uxtah	r1, lr, sl
 80168f0:	b2a3      	uxth	r3, r4
 80168f2:	1ac9      	subs	r1, r1, r3
 80168f4:	0c23      	lsrs	r3, r4, #16
 80168f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80168fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80168fe:	b289      	uxth	r1, r1
 8016900:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016904:	45c8      	cmp	r8, r9
 8016906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801690a:	4694      	mov	ip, r2
 801690c:	f845 3b04 	str.w	r3, [r5], #4
 8016910:	d8e8      	bhi.n	80168e4 <__mdiff+0x5c>
 8016912:	45bc      	cmp	ip, r7
 8016914:	d304      	bcc.n	8016920 <__mdiff+0x98>
 8016916:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801691a:	b183      	cbz	r3, 801693e <__mdiff+0xb6>
 801691c:	6106      	str	r6, [r0, #16]
 801691e:	e7c5      	b.n	80168ac <__mdiff+0x24>
 8016920:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016924:	fa1e f381 	uxtah	r3, lr, r1
 8016928:	141a      	asrs	r2, r3, #16
 801692a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801692e:	b29b      	uxth	r3, r3
 8016930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016934:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016938:	f845 3b04 	str.w	r3, [r5], #4
 801693c:	e7e9      	b.n	8016912 <__mdiff+0x8a>
 801693e:	3e01      	subs	r6, #1
 8016940:	e7e9      	b.n	8016916 <__mdiff+0x8e>
	...

08016944 <__ulp>:
 8016944:	4b12      	ldr	r3, [pc, #72]	; (8016990 <__ulp+0x4c>)
 8016946:	ee10 2a90 	vmov	r2, s1
 801694a:	401a      	ands	r2, r3
 801694c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016950:	2b00      	cmp	r3, #0
 8016952:	dd04      	ble.n	801695e <__ulp+0x1a>
 8016954:	2000      	movs	r0, #0
 8016956:	4619      	mov	r1, r3
 8016958:	ec41 0b10 	vmov	d0, r0, r1
 801695c:	4770      	bx	lr
 801695e:	425b      	negs	r3, r3
 8016960:	151b      	asrs	r3, r3, #20
 8016962:	2b13      	cmp	r3, #19
 8016964:	f04f 0000 	mov.w	r0, #0
 8016968:	f04f 0100 	mov.w	r1, #0
 801696c:	dc04      	bgt.n	8016978 <__ulp+0x34>
 801696e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016972:	fa42 f103 	asr.w	r1, r2, r3
 8016976:	e7ef      	b.n	8016958 <__ulp+0x14>
 8016978:	3b14      	subs	r3, #20
 801697a:	2b1e      	cmp	r3, #30
 801697c:	f04f 0201 	mov.w	r2, #1
 8016980:	bfda      	itte	le
 8016982:	f1c3 031f 	rsble	r3, r3, #31
 8016986:	fa02 f303 	lslle.w	r3, r2, r3
 801698a:	4613      	movgt	r3, r2
 801698c:	4618      	mov	r0, r3
 801698e:	e7e3      	b.n	8016958 <__ulp+0x14>
 8016990:	7ff00000 	.word	0x7ff00000

08016994 <__b2d>:
 8016994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016996:	6905      	ldr	r5, [r0, #16]
 8016998:	f100 0714 	add.w	r7, r0, #20
 801699c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80169a0:	1f2e      	subs	r6, r5, #4
 80169a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80169a6:	4620      	mov	r0, r4
 80169a8:	f7ff fdc4 	bl	8016534 <__hi0bits>
 80169ac:	f1c0 0320 	rsb	r3, r0, #32
 80169b0:	280a      	cmp	r0, #10
 80169b2:	600b      	str	r3, [r1, #0]
 80169b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016a2c <__b2d+0x98>
 80169b8:	dc14      	bgt.n	80169e4 <__b2d+0x50>
 80169ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80169be:	fa24 f10e 	lsr.w	r1, r4, lr
 80169c2:	42b7      	cmp	r7, r6
 80169c4:	ea41 030c 	orr.w	r3, r1, ip
 80169c8:	bf34      	ite	cc
 80169ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169ce:	2100      	movcs	r1, #0
 80169d0:	3015      	adds	r0, #21
 80169d2:	fa04 f000 	lsl.w	r0, r4, r0
 80169d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80169da:	ea40 0201 	orr.w	r2, r0, r1
 80169de:	ec43 2b10 	vmov	d0, r2, r3
 80169e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e4:	42b7      	cmp	r7, r6
 80169e6:	bf3a      	itte	cc
 80169e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80169ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169f0:	2100      	movcs	r1, #0
 80169f2:	380b      	subs	r0, #11
 80169f4:	d015      	beq.n	8016a22 <__b2d+0x8e>
 80169f6:	4084      	lsls	r4, r0
 80169f8:	f1c0 0520 	rsb	r5, r0, #32
 80169fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016a00:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016a04:	42be      	cmp	r6, r7
 8016a06:	fa21 fc05 	lsr.w	ip, r1, r5
 8016a0a:	ea44 030c 	orr.w	r3, r4, ip
 8016a0e:	bf8c      	ite	hi
 8016a10:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016a14:	2400      	movls	r4, #0
 8016a16:	fa01 f000 	lsl.w	r0, r1, r0
 8016a1a:	40ec      	lsrs	r4, r5
 8016a1c:	ea40 0204 	orr.w	r2, r0, r4
 8016a20:	e7dd      	b.n	80169de <__b2d+0x4a>
 8016a22:	ea44 030c 	orr.w	r3, r4, ip
 8016a26:	460a      	mov	r2, r1
 8016a28:	e7d9      	b.n	80169de <__b2d+0x4a>
 8016a2a:	bf00      	nop
 8016a2c:	3ff00000 	.word	0x3ff00000

08016a30 <__d2b>:
 8016a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a34:	460e      	mov	r6, r1
 8016a36:	2101      	movs	r1, #1
 8016a38:	ec59 8b10 	vmov	r8, r9, d0
 8016a3c:	4615      	mov	r5, r2
 8016a3e:	f7ff fcb5 	bl	80163ac <_Balloc>
 8016a42:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a46:	4607      	mov	r7, r0
 8016a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a4c:	bb34      	cbnz	r4, 8016a9c <__d2b+0x6c>
 8016a4e:	9301      	str	r3, [sp, #4]
 8016a50:	f1b8 0300 	subs.w	r3, r8, #0
 8016a54:	d027      	beq.n	8016aa6 <__d2b+0x76>
 8016a56:	a802      	add	r0, sp, #8
 8016a58:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a5c:	f7ff fd89 	bl	8016572 <__lo0bits>
 8016a60:	9900      	ldr	r1, [sp, #0]
 8016a62:	b1f0      	cbz	r0, 8016aa2 <__d2b+0x72>
 8016a64:	9a01      	ldr	r2, [sp, #4]
 8016a66:	f1c0 0320 	rsb	r3, r0, #32
 8016a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a6e:	430b      	orrs	r3, r1
 8016a70:	40c2      	lsrs	r2, r0
 8016a72:	617b      	str	r3, [r7, #20]
 8016a74:	9201      	str	r2, [sp, #4]
 8016a76:	9b01      	ldr	r3, [sp, #4]
 8016a78:	61bb      	str	r3, [r7, #24]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	bf14      	ite	ne
 8016a7e:	2102      	movne	r1, #2
 8016a80:	2101      	moveq	r1, #1
 8016a82:	6139      	str	r1, [r7, #16]
 8016a84:	b1c4      	cbz	r4, 8016ab8 <__d2b+0x88>
 8016a86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016a8a:	4404      	add	r4, r0
 8016a8c:	6034      	str	r4, [r6, #0]
 8016a8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a92:	6028      	str	r0, [r5, #0]
 8016a94:	4638      	mov	r0, r7
 8016a96:	b003      	add	sp, #12
 8016a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016aa0:	e7d5      	b.n	8016a4e <__d2b+0x1e>
 8016aa2:	6179      	str	r1, [r7, #20]
 8016aa4:	e7e7      	b.n	8016a76 <__d2b+0x46>
 8016aa6:	a801      	add	r0, sp, #4
 8016aa8:	f7ff fd63 	bl	8016572 <__lo0bits>
 8016aac:	9b01      	ldr	r3, [sp, #4]
 8016aae:	617b      	str	r3, [r7, #20]
 8016ab0:	2101      	movs	r1, #1
 8016ab2:	6139      	str	r1, [r7, #16]
 8016ab4:	3020      	adds	r0, #32
 8016ab6:	e7e5      	b.n	8016a84 <__d2b+0x54>
 8016ab8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016abc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ac0:	6030      	str	r0, [r6, #0]
 8016ac2:	6918      	ldr	r0, [r3, #16]
 8016ac4:	f7ff fd36 	bl	8016534 <__hi0bits>
 8016ac8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016acc:	e7e1      	b.n	8016a92 <__d2b+0x62>

08016ace <__ratio>:
 8016ace:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad2:	4688      	mov	r8, r1
 8016ad4:	4669      	mov	r1, sp
 8016ad6:	4681      	mov	r9, r0
 8016ad8:	f7ff ff5c 	bl	8016994 <__b2d>
 8016adc:	a901      	add	r1, sp, #4
 8016ade:	4640      	mov	r0, r8
 8016ae0:	ec57 6b10 	vmov	r6, r7, d0
 8016ae4:	f7ff ff56 	bl	8016994 <__b2d>
 8016ae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016aec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016af0:	eba3 0c02 	sub.w	ip, r3, r2
 8016af4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016af8:	1a9b      	subs	r3, r3, r2
 8016afa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016afe:	ec5b ab10 	vmov	sl, fp, d0
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	bfce      	itee	gt
 8016b06:	463a      	movgt	r2, r7
 8016b08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b0c:	465a      	movle	r2, fp
 8016b0e:	4659      	mov	r1, fp
 8016b10:	463d      	mov	r5, r7
 8016b12:	bfd4      	ite	le
 8016b14:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016b18:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	ee10 2a10 	vmov	r2, s0
 8016b22:	460b      	mov	r3, r1
 8016b24:	4629      	mov	r1, r5
 8016b26:	f7e9 fea9 	bl	800087c <__aeabi_ddiv>
 8016b2a:	ec41 0b10 	vmov	d0, r0, r1
 8016b2e:	b003      	add	sp, #12
 8016b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b34 <__copybits>:
 8016b34:	3901      	subs	r1, #1
 8016b36:	b510      	push	{r4, lr}
 8016b38:	1149      	asrs	r1, r1, #5
 8016b3a:	6914      	ldr	r4, [r2, #16]
 8016b3c:	3101      	adds	r1, #1
 8016b3e:	f102 0314 	add.w	r3, r2, #20
 8016b42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b4a:	42a3      	cmp	r3, r4
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	d303      	bcc.n	8016b58 <__copybits+0x24>
 8016b50:	2300      	movs	r3, #0
 8016b52:	428a      	cmp	r2, r1
 8016b54:	d305      	bcc.n	8016b62 <__copybits+0x2e>
 8016b56:	bd10      	pop	{r4, pc}
 8016b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b5c:	f840 2b04 	str.w	r2, [r0], #4
 8016b60:	e7f3      	b.n	8016b4a <__copybits+0x16>
 8016b62:	f842 3b04 	str.w	r3, [r2], #4
 8016b66:	e7f4      	b.n	8016b52 <__copybits+0x1e>

08016b68 <__any_on>:
 8016b68:	f100 0214 	add.w	r2, r0, #20
 8016b6c:	6900      	ldr	r0, [r0, #16]
 8016b6e:	114b      	asrs	r3, r1, #5
 8016b70:	4298      	cmp	r0, r3
 8016b72:	b510      	push	{r4, lr}
 8016b74:	db11      	blt.n	8016b9a <__any_on+0x32>
 8016b76:	dd0a      	ble.n	8016b8e <__any_on+0x26>
 8016b78:	f011 011f 	ands.w	r1, r1, #31
 8016b7c:	d007      	beq.n	8016b8e <__any_on+0x26>
 8016b7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b82:	fa24 f001 	lsr.w	r0, r4, r1
 8016b86:	fa00 f101 	lsl.w	r1, r0, r1
 8016b8a:	428c      	cmp	r4, r1
 8016b8c:	d10b      	bne.n	8016ba6 <__any_on+0x3e>
 8016b8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b92:	4293      	cmp	r3, r2
 8016b94:	d803      	bhi.n	8016b9e <__any_on+0x36>
 8016b96:	2000      	movs	r0, #0
 8016b98:	bd10      	pop	{r4, pc}
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	e7f7      	b.n	8016b8e <__any_on+0x26>
 8016b9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ba2:	2900      	cmp	r1, #0
 8016ba4:	d0f5      	beq.n	8016b92 <__any_on+0x2a>
 8016ba6:	2001      	movs	r0, #1
 8016ba8:	e7f6      	b.n	8016b98 <__any_on+0x30>

08016baa <_calloc_r>:
 8016baa:	b538      	push	{r3, r4, r5, lr}
 8016bac:	fb02 f401 	mul.w	r4, r2, r1
 8016bb0:	4621      	mov	r1, r4
 8016bb2:	f000 f857 	bl	8016c64 <_malloc_r>
 8016bb6:	4605      	mov	r5, r0
 8016bb8:	b118      	cbz	r0, 8016bc2 <_calloc_r+0x18>
 8016bba:	4622      	mov	r2, r4
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	f7fc fcaa 	bl	8013516 <memset>
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08016bc8 <_free_r>:
 8016bc8:	b538      	push	{r3, r4, r5, lr}
 8016bca:	4605      	mov	r5, r0
 8016bcc:	2900      	cmp	r1, #0
 8016bce:	d045      	beq.n	8016c5c <_free_r+0x94>
 8016bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bd4:	1f0c      	subs	r4, r1, #4
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	bfb8      	it	lt
 8016bda:	18e4      	addlt	r4, r4, r3
 8016bdc:	f000 fe30 	bl	8017840 <__malloc_lock>
 8016be0:	4a1f      	ldr	r2, [pc, #124]	; (8016c60 <_free_r+0x98>)
 8016be2:	6813      	ldr	r3, [r2, #0]
 8016be4:	4610      	mov	r0, r2
 8016be6:	b933      	cbnz	r3, 8016bf6 <_free_r+0x2e>
 8016be8:	6063      	str	r3, [r4, #4]
 8016bea:	6014      	str	r4, [r2, #0]
 8016bec:	4628      	mov	r0, r5
 8016bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bf2:	f000 be26 	b.w	8017842 <__malloc_unlock>
 8016bf6:	42a3      	cmp	r3, r4
 8016bf8:	d90c      	bls.n	8016c14 <_free_r+0x4c>
 8016bfa:	6821      	ldr	r1, [r4, #0]
 8016bfc:	1862      	adds	r2, r4, r1
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	bf04      	itt	eq
 8016c02:	681a      	ldreq	r2, [r3, #0]
 8016c04:	685b      	ldreq	r3, [r3, #4]
 8016c06:	6063      	str	r3, [r4, #4]
 8016c08:	bf04      	itt	eq
 8016c0a:	1852      	addeq	r2, r2, r1
 8016c0c:	6022      	streq	r2, [r4, #0]
 8016c0e:	6004      	str	r4, [r0, #0]
 8016c10:	e7ec      	b.n	8016bec <_free_r+0x24>
 8016c12:	4613      	mov	r3, r2
 8016c14:	685a      	ldr	r2, [r3, #4]
 8016c16:	b10a      	cbz	r2, 8016c1c <_free_r+0x54>
 8016c18:	42a2      	cmp	r2, r4
 8016c1a:	d9fa      	bls.n	8016c12 <_free_r+0x4a>
 8016c1c:	6819      	ldr	r1, [r3, #0]
 8016c1e:	1858      	adds	r0, r3, r1
 8016c20:	42a0      	cmp	r0, r4
 8016c22:	d10b      	bne.n	8016c3c <_free_r+0x74>
 8016c24:	6820      	ldr	r0, [r4, #0]
 8016c26:	4401      	add	r1, r0
 8016c28:	1858      	adds	r0, r3, r1
 8016c2a:	4282      	cmp	r2, r0
 8016c2c:	6019      	str	r1, [r3, #0]
 8016c2e:	d1dd      	bne.n	8016bec <_free_r+0x24>
 8016c30:	6810      	ldr	r0, [r2, #0]
 8016c32:	6852      	ldr	r2, [r2, #4]
 8016c34:	605a      	str	r2, [r3, #4]
 8016c36:	4401      	add	r1, r0
 8016c38:	6019      	str	r1, [r3, #0]
 8016c3a:	e7d7      	b.n	8016bec <_free_r+0x24>
 8016c3c:	d902      	bls.n	8016c44 <_free_r+0x7c>
 8016c3e:	230c      	movs	r3, #12
 8016c40:	602b      	str	r3, [r5, #0]
 8016c42:	e7d3      	b.n	8016bec <_free_r+0x24>
 8016c44:	6820      	ldr	r0, [r4, #0]
 8016c46:	1821      	adds	r1, r4, r0
 8016c48:	428a      	cmp	r2, r1
 8016c4a:	bf04      	itt	eq
 8016c4c:	6811      	ldreq	r1, [r2, #0]
 8016c4e:	6852      	ldreq	r2, [r2, #4]
 8016c50:	6062      	str	r2, [r4, #4]
 8016c52:	bf04      	itt	eq
 8016c54:	1809      	addeq	r1, r1, r0
 8016c56:	6021      	streq	r1, [r4, #0]
 8016c58:	605c      	str	r4, [r3, #4]
 8016c5a:	e7c7      	b.n	8016bec <_free_r+0x24>
 8016c5c:	bd38      	pop	{r3, r4, r5, pc}
 8016c5e:	bf00      	nop
 8016c60:	2003362c 	.word	0x2003362c

08016c64 <_malloc_r>:
 8016c64:	b570      	push	{r4, r5, r6, lr}
 8016c66:	1ccd      	adds	r5, r1, #3
 8016c68:	f025 0503 	bic.w	r5, r5, #3
 8016c6c:	3508      	adds	r5, #8
 8016c6e:	2d0c      	cmp	r5, #12
 8016c70:	bf38      	it	cc
 8016c72:	250c      	movcc	r5, #12
 8016c74:	2d00      	cmp	r5, #0
 8016c76:	4606      	mov	r6, r0
 8016c78:	db01      	blt.n	8016c7e <_malloc_r+0x1a>
 8016c7a:	42a9      	cmp	r1, r5
 8016c7c:	d903      	bls.n	8016c86 <_malloc_r+0x22>
 8016c7e:	230c      	movs	r3, #12
 8016c80:	6033      	str	r3, [r6, #0]
 8016c82:	2000      	movs	r0, #0
 8016c84:	bd70      	pop	{r4, r5, r6, pc}
 8016c86:	f000 fddb 	bl	8017840 <__malloc_lock>
 8016c8a:	4a21      	ldr	r2, [pc, #132]	; (8016d10 <_malloc_r+0xac>)
 8016c8c:	6814      	ldr	r4, [r2, #0]
 8016c8e:	4621      	mov	r1, r4
 8016c90:	b991      	cbnz	r1, 8016cb8 <_malloc_r+0x54>
 8016c92:	4c20      	ldr	r4, [pc, #128]	; (8016d14 <_malloc_r+0xb0>)
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	b91b      	cbnz	r3, 8016ca0 <_malloc_r+0x3c>
 8016c98:	4630      	mov	r0, r6
 8016c9a:	f000 fc91 	bl	80175c0 <_sbrk_r>
 8016c9e:	6020      	str	r0, [r4, #0]
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f000 fc8c 	bl	80175c0 <_sbrk_r>
 8016ca8:	1c43      	adds	r3, r0, #1
 8016caa:	d124      	bne.n	8016cf6 <_malloc_r+0x92>
 8016cac:	230c      	movs	r3, #12
 8016cae:	6033      	str	r3, [r6, #0]
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	f000 fdc6 	bl	8017842 <__malloc_unlock>
 8016cb6:	e7e4      	b.n	8016c82 <_malloc_r+0x1e>
 8016cb8:	680b      	ldr	r3, [r1, #0]
 8016cba:	1b5b      	subs	r3, r3, r5
 8016cbc:	d418      	bmi.n	8016cf0 <_malloc_r+0x8c>
 8016cbe:	2b0b      	cmp	r3, #11
 8016cc0:	d90f      	bls.n	8016ce2 <_malloc_r+0x7e>
 8016cc2:	600b      	str	r3, [r1, #0]
 8016cc4:	50cd      	str	r5, [r1, r3]
 8016cc6:	18cc      	adds	r4, r1, r3
 8016cc8:	4630      	mov	r0, r6
 8016cca:	f000 fdba 	bl	8017842 <__malloc_unlock>
 8016cce:	f104 000b 	add.w	r0, r4, #11
 8016cd2:	1d23      	adds	r3, r4, #4
 8016cd4:	f020 0007 	bic.w	r0, r0, #7
 8016cd8:	1ac3      	subs	r3, r0, r3
 8016cda:	d0d3      	beq.n	8016c84 <_malloc_r+0x20>
 8016cdc:	425a      	negs	r2, r3
 8016cde:	50e2      	str	r2, [r4, r3]
 8016ce0:	e7d0      	b.n	8016c84 <_malloc_r+0x20>
 8016ce2:	428c      	cmp	r4, r1
 8016ce4:	684b      	ldr	r3, [r1, #4]
 8016ce6:	bf16      	itet	ne
 8016ce8:	6063      	strne	r3, [r4, #4]
 8016cea:	6013      	streq	r3, [r2, #0]
 8016cec:	460c      	movne	r4, r1
 8016cee:	e7eb      	b.n	8016cc8 <_malloc_r+0x64>
 8016cf0:	460c      	mov	r4, r1
 8016cf2:	6849      	ldr	r1, [r1, #4]
 8016cf4:	e7cc      	b.n	8016c90 <_malloc_r+0x2c>
 8016cf6:	1cc4      	adds	r4, r0, #3
 8016cf8:	f024 0403 	bic.w	r4, r4, #3
 8016cfc:	42a0      	cmp	r0, r4
 8016cfe:	d005      	beq.n	8016d0c <_malloc_r+0xa8>
 8016d00:	1a21      	subs	r1, r4, r0
 8016d02:	4630      	mov	r0, r6
 8016d04:	f000 fc5c 	bl	80175c0 <_sbrk_r>
 8016d08:	3001      	adds	r0, #1
 8016d0a:	d0cf      	beq.n	8016cac <_malloc_r+0x48>
 8016d0c:	6025      	str	r5, [r4, #0]
 8016d0e:	e7db      	b.n	8016cc8 <_malloc_r+0x64>
 8016d10:	2003362c 	.word	0x2003362c
 8016d14:	20033630 	.word	0x20033630

08016d18 <__ssputs_r>:
 8016d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d1c:	688e      	ldr	r6, [r1, #8]
 8016d1e:	429e      	cmp	r6, r3
 8016d20:	4682      	mov	sl, r0
 8016d22:	460c      	mov	r4, r1
 8016d24:	4690      	mov	r8, r2
 8016d26:	4699      	mov	r9, r3
 8016d28:	d837      	bhi.n	8016d9a <__ssputs_r+0x82>
 8016d2a:	898a      	ldrh	r2, [r1, #12]
 8016d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d30:	d031      	beq.n	8016d96 <__ssputs_r+0x7e>
 8016d32:	6825      	ldr	r5, [r4, #0]
 8016d34:	6909      	ldr	r1, [r1, #16]
 8016d36:	1a6f      	subs	r7, r5, r1
 8016d38:	6965      	ldr	r5, [r4, #20]
 8016d3a:	2302      	movs	r3, #2
 8016d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d44:	f109 0301 	add.w	r3, r9, #1
 8016d48:	443b      	add	r3, r7
 8016d4a:	429d      	cmp	r5, r3
 8016d4c:	bf38      	it	cc
 8016d4e:	461d      	movcc	r5, r3
 8016d50:	0553      	lsls	r3, r2, #21
 8016d52:	d530      	bpl.n	8016db6 <__ssputs_r+0x9e>
 8016d54:	4629      	mov	r1, r5
 8016d56:	f7ff ff85 	bl	8016c64 <_malloc_r>
 8016d5a:	4606      	mov	r6, r0
 8016d5c:	b950      	cbnz	r0, 8016d74 <__ssputs_r+0x5c>
 8016d5e:	230c      	movs	r3, #12
 8016d60:	f8ca 3000 	str.w	r3, [sl]
 8016d64:	89a3      	ldrh	r3, [r4, #12]
 8016d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d6a:	81a3      	strh	r3, [r4, #12]
 8016d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d74:	463a      	mov	r2, r7
 8016d76:	6921      	ldr	r1, [r4, #16]
 8016d78:	f7fc fbc2 	bl	8013500 <memcpy>
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d86:	81a3      	strh	r3, [r4, #12]
 8016d88:	6126      	str	r6, [r4, #16]
 8016d8a:	6165      	str	r5, [r4, #20]
 8016d8c:	443e      	add	r6, r7
 8016d8e:	1bed      	subs	r5, r5, r7
 8016d90:	6026      	str	r6, [r4, #0]
 8016d92:	60a5      	str	r5, [r4, #8]
 8016d94:	464e      	mov	r6, r9
 8016d96:	454e      	cmp	r6, r9
 8016d98:	d900      	bls.n	8016d9c <__ssputs_r+0x84>
 8016d9a:	464e      	mov	r6, r9
 8016d9c:	4632      	mov	r2, r6
 8016d9e:	4641      	mov	r1, r8
 8016da0:	6820      	ldr	r0, [r4, #0]
 8016da2:	f000 fd34 	bl	801780e <memmove>
 8016da6:	68a3      	ldr	r3, [r4, #8]
 8016da8:	1b9b      	subs	r3, r3, r6
 8016daa:	60a3      	str	r3, [r4, #8]
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	441e      	add	r6, r3
 8016db0:	6026      	str	r6, [r4, #0]
 8016db2:	2000      	movs	r0, #0
 8016db4:	e7dc      	b.n	8016d70 <__ssputs_r+0x58>
 8016db6:	462a      	mov	r2, r5
 8016db8:	f000 fd44 	bl	8017844 <_realloc_r>
 8016dbc:	4606      	mov	r6, r0
 8016dbe:	2800      	cmp	r0, #0
 8016dc0:	d1e2      	bne.n	8016d88 <__ssputs_r+0x70>
 8016dc2:	6921      	ldr	r1, [r4, #16]
 8016dc4:	4650      	mov	r0, sl
 8016dc6:	f7ff feff 	bl	8016bc8 <_free_r>
 8016dca:	e7c8      	b.n	8016d5e <__ssputs_r+0x46>

08016dcc <_svfiprintf_r>:
 8016dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd0:	461d      	mov	r5, r3
 8016dd2:	898b      	ldrh	r3, [r1, #12]
 8016dd4:	061f      	lsls	r7, r3, #24
 8016dd6:	b09d      	sub	sp, #116	; 0x74
 8016dd8:	4680      	mov	r8, r0
 8016dda:	460c      	mov	r4, r1
 8016ddc:	4616      	mov	r6, r2
 8016dde:	d50f      	bpl.n	8016e00 <_svfiprintf_r+0x34>
 8016de0:	690b      	ldr	r3, [r1, #16]
 8016de2:	b96b      	cbnz	r3, 8016e00 <_svfiprintf_r+0x34>
 8016de4:	2140      	movs	r1, #64	; 0x40
 8016de6:	f7ff ff3d 	bl	8016c64 <_malloc_r>
 8016dea:	6020      	str	r0, [r4, #0]
 8016dec:	6120      	str	r0, [r4, #16]
 8016dee:	b928      	cbnz	r0, 8016dfc <_svfiprintf_r+0x30>
 8016df0:	230c      	movs	r3, #12
 8016df2:	f8c8 3000 	str.w	r3, [r8]
 8016df6:	f04f 30ff 	mov.w	r0, #4294967295
 8016dfa:	e0c8      	b.n	8016f8e <_svfiprintf_r+0x1c2>
 8016dfc:	2340      	movs	r3, #64	; 0x40
 8016dfe:	6163      	str	r3, [r4, #20]
 8016e00:	2300      	movs	r3, #0
 8016e02:	9309      	str	r3, [sp, #36]	; 0x24
 8016e04:	2320      	movs	r3, #32
 8016e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e0a:	2330      	movs	r3, #48	; 0x30
 8016e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e10:	9503      	str	r5, [sp, #12]
 8016e12:	f04f 0b01 	mov.w	fp, #1
 8016e16:	4637      	mov	r7, r6
 8016e18:	463d      	mov	r5, r7
 8016e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e1e:	b10b      	cbz	r3, 8016e24 <_svfiprintf_r+0x58>
 8016e20:	2b25      	cmp	r3, #37	; 0x25
 8016e22:	d13e      	bne.n	8016ea2 <_svfiprintf_r+0xd6>
 8016e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8016e28:	d00b      	beq.n	8016e42 <_svfiprintf_r+0x76>
 8016e2a:	4653      	mov	r3, sl
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4640      	mov	r0, r8
 8016e32:	f7ff ff71 	bl	8016d18 <__ssputs_r>
 8016e36:	3001      	adds	r0, #1
 8016e38:	f000 80a4 	beq.w	8016f84 <_svfiprintf_r+0x1b8>
 8016e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3e:	4453      	add	r3, sl
 8016e40:	9309      	str	r3, [sp, #36]	; 0x24
 8016e42:	783b      	ldrb	r3, [r7, #0]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	f000 809d 	beq.w	8016f84 <_svfiprintf_r+0x1b8>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e54:	9304      	str	r3, [sp, #16]
 8016e56:	9307      	str	r3, [sp, #28]
 8016e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8016e5e:	462f      	mov	r7, r5
 8016e60:	2205      	movs	r2, #5
 8016e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e66:	4850      	ldr	r0, [pc, #320]	; (8016fa8 <_svfiprintf_r+0x1dc>)
 8016e68:	f7e9 f9d2 	bl	8000210 <memchr>
 8016e6c:	9b04      	ldr	r3, [sp, #16]
 8016e6e:	b9d0      	cbnz	r0, 8016ea6 <_svfiprintf_r+0xda>
 8016e70:	06d9      	lsls	r1, r3, #27
 8016e72:	bf44      	itt	mi
 8016e74:	2220      	movmi	r2, #32
 8016e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e7a:	071a      	lsls	r2, r3, #28
 8016e7c:	bf44      	itt	mi
 8016e7e:	222b      	movmi	r2, #43	; 0x2b
 8016e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e84:	782a      	ldrb	r2, [r5, #0]
 8016e86:	2a2a      	cmp	r2, #42	; 0x2a
 8016e88:	d015      	beq.n	8016eb6 <_svfiprintf_r+0xea>
 8016e8a:	9a07      	ldr	r2, [sp, #28]
 8016e8c:	462f      	mov	r7, r5
 8016e8e:	2000      	movs	r0, #0
 8016e90:	250a      	movs	r5, #10
 8016e92:	4639      	mov	r1, r7
 8016e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e98:	3b30      	subs	r3, #48	; 0x30
 8016e9a:	2b09      	cmp	r3, #9
 8016e9c:	d94d      	bls.n	8016f3a <_svfiprintf_r+0x16e>
 8016e9e:	b1b8      	cbz	r0, 8016ed0 <_svfiprintf_r+0x104>
 8016ea0:	e00f      	b.n	8016ec2 <_svfiprintf_r+0xf6>
 8016ea2:	462f      	mov	r7, r5
 8016ea4:	e7b8      	b.n	8016e18 <_svfiprintf_r+0x4c>
 8016ea6:	4a40      	ldr	r2, [pc, #256]	; (8016fa8 <_svfiprintf_r+0x1dc>)
 8016ea8:	1a80      	subs	r0, r0, r2
 8016eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8016eae:	4318      	orrs	r0, r3
 8016eb0:	9004      	str	r0, [sp, #16]
 8016eb2:	463d      	mov	r5, r7
 8016eb4:	e7d3      	b.n	8016e5e <_svfiprintf_r+0x92>
 8016eb6:	9a03      	ldr	r2, [sp, #12]
 8016eb8:	1d11      	adds	r1, r2, #4
 8016eba:	6812      	ldr	r2, [r2, #0]
 8016ebc:	9103      	str	r1, [sp, #12]
 8016ebe:	2a00      	cmp	r2, #0
 8016ec0:	db01      	blt.n	8016ec6 <_svfiprintf_r+0xfa>
 8016ec2:	9207      	str	r2, [sp, #28]
 8016ec4:	e004      	b.n	8016ed0 <_svfiprintf_r+0x104>
 8016ec6:	4252      	negs	r2, r2
 8016ec8:	f043 0302 	orr.w	r3, r3, #2
 8016ecc:	9207      	str	r2, [sp, #28]
 8016ece:	9304      	str	r3, [sp, #16]
 8016ed0:	783b      	ldrb	r3, [r7, #0]
 8016ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8016ed4:	d10c      	bne.n	8016ef0 <_svfiprintf_r+0x124>
 8016ed6:	787b      	ldrb	r3, [r7, #1]
 8016ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8016eda:	d133      	bne.n	8016f44 <_svfiprintf_r+0x178>
 8016edc:	9b03      	ldr	r3, [sp, #12]
 8016ede:	1d1a      	adds	r2, r3, #4
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	9203      	str	r2, [sp, #12]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	bfb8      	it	lt
 8016ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eec:	3702      	adds	r7, #2
 8016eee:	9305      	str	r3, [sp, #20]
 8016ef0:	4d2e      	ldr	r5, [pc, #184]	; (8016fac <_svfiprintf_r+0x1e0>)
 8016ef2:	7839      	ldrb	r1, [r7, #0]
 8016ef4:	2203      	movs	r2, #3
 8016ef6:	4628      	mov	r0, r5
 8016ef8:	f7e9 f98a 	bl	8000210 <memchr>
 8016efc:	b138      	cbz	r0, 8016f0e <_svfiprintf_r+0x142>
 8016efe:	2340      	movs	r3, #64	; 0x40
 8016f00:	1b40      	subs	r0, r0, r5
 8016f02:	fa03 f000 	lsl.w	r0, r3, r0
 8016f06:	9b04      	ldr	r3, [sp, #16]
 8016f08:	4303      	orrs	r3, r0
 8016f0a:	3701      	adds	r7, #1
 8016f0c:	9304      	str	r3, [sp, #16]
 8016f0e:	7839      	ldrb	r1, [r7, #0]
 8016f10:	4827      	ldr	r0, [pc, #156]	; (8016fb0 <_svfiprintf_r+0x1e4>)
 8016f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f16:	2206      	movs	r2, #6
 8016f18:	1c7e      	adds	r6, r7, #1
 8016f1a:	f7e9 f979 	bl	8000210 <memchr>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	d038      	beq.n	8016f94 <_svfiprintf_r+0x1c8>
 8016f22:	4b24      	ldr	r3, [pc, #144]	; (8016fb4 <_svfiprintf_r+0x1e8>)
 8016f24:	bb13      	cbnz	r3, 8016f6c <_svfiprintf_r+0x1a0>
 8016f26:	9b03      	ldr	r3, [sp, #12]
 8016f28:	3307      	adds	r3, #7
 8016f2a:	f023 0307 	bic.w	r3, r3, #7
 8016f2e:	3308      	adds	r3, #8
 8016f30:	9303      	str	r3, [sp, #12]
 8016f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f34:	444b      	add	r3, r9
 8016f36:	9309      	str	r3, [sp, #36]	; 0x24
 8016f38:	e76d      	b.n	8016e16 <_svfiprintf_r+0x4a>
 8016f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8016f3e:	2001      	movs	r0, #1
 8016f40:	460f      	mov	r7, r1
 8016f42:	e7a6      	b.n	8016e92 <_svfiprintf_r+0xc6>
 8016f44:	2300      	movs	r3, #0
 8016f46:	3701      	adds	r7, #1
 8016f48:	9305      	str	r3, [sp, #20]
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	250a      	movs	r5, #10
 8016f4e:	4638      	mov	r0, r7
 8016f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f54:	3a30      	subs	r2, #48	; 0x30
 8016f56:	2a09      	cmp	r2, #9
 8016f58:	d903      	bls.n	8016f62 <_svfiprintf_r+0x196>
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d0c8      	beq.n	8016ef0 <_svfiprintf_r+0x124>
 8016f5e:	9105      	str	r1, [sp, #20]
 8016f60:	e7c6      	b.n	8016ef0 <_svfiprintf_r+0x124>
 8016f62:	fb05 2101 	mla	r1, r5, r1, r2
 8016f66:	2301      	movs	r3, #1
 8016f68:	4607      	mov	r7, r0
 8016f6a:	e7f0      	b.n	8016f4e <_svfiprintf_r+0x182>
 8016f6c:	ab03      	add	r3, sp, #12
 8016f6e:	9300      	str	r3, [sp, #0]
 8016f70:	4622      	mov	r2, r4
 8016f72:	4b11      	ldr	r3, [pc, #68]	; (8016fb8 <_svfiprintf_r+0x1ec>)
 8016f74:	a904      	add	r1, sp, #16
 8016f76:	4640      	mov	r0, r8
 8016f78:	f7fc fb6a 	bl	8013650 <_printf_float>
 8016f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f80:	4681      	mov	r9, r0
 8016f82:	d1d6      	bne.n	8016f32 <_svfiprintf_r+0x166>
 8016f84:	89a3      	ldrh	r3, [r4, #12]
 8016f86:	065b      	lsls	r3, r3, #25
 8016f88:	f53f af35 	bmi.w	8016df6 <_svfiprintf_r+0x2a>
 8016f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f8e:	b01d      	add	sp, #116	; 0x74
 8016f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f94:	ab03      	add	r3, sp, #12
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	4622      	mov	r2, r4
 8016f9a:	4b07      	ldr	r3, [pc, #28]	; (8016fb8 <_svfiprintf_r+0x1ec>)
 8016f9c:	a904      	add	r1, sp, #16
 8016f9e:	4640      	mov	r0, r8
 8016fa0:	f7fc fe0c 	bl	8013bbc <_printf_i>
 8016fa4:	e7ea      	b.n	8016f7c <_svfiprintf_r+0x1b0>
 8016fa6:	bf00      	nop
 8016fa8:	0801828c 	.word	0x0801828c
 8016fac:	08018292 	.word	0x08018292
 8016fb0:	08018296 	.word	0x08018296
 8016fb4:	08013651 	.word	0x08013651
 8016fb8:	08016d19 	.word	0x08016d19

08016fbc <_sungetc_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	1c4b      	adds	r3, r1, #1
 8016fc0:	4614      	mov	r4, r2
 8016fc2:	d103      	bne.n	8016fcc <_sungetc_r+0x10>
 8016fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8016fc8:	4628      	mov	r0, r5
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	8993      	ldrh	r3, [r2, #12]
 8016fce:	f023 0320 	bic.w	r3, r3, #32
 8016fd2:	8193      	strh	r3, [r2, #12]
 8016fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fd6:	6852      	ldr	r2, [r2, #4]
 8016fd8:	b2cd      	uxtb	r5, r1
 8016fda:	b18b      	cbz	r3, 8017000 <_sungetc_r+0x44>
 8016fdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	dd08      	ble.n	8016ff4 <_sungetc_r+0x38>
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	1e5a      	subs	r2, r3, #1
 8016fe6:	6022      	str	r2, [r4, #0]
 8016fe8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fec:	6863      	ldr	r3, [r4, #4]
 8016fee:	3301      	adds	r3, #1
 8016ff0:	6063      	str	r3, [r4, #4]
 8016ff2:	e7e9      	b.n	8016fc8 <_sungetc_r+0xc>
 8016ff4:	4621      	mov	r1, r4
 8016ff6:	f000 fbc3 	bl	8017780 <__submore>
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0f1      	beq.n	8016fe2 <_sungetc_r+0x26>
 8016ffe:	e7e1      	b.n	8016fc4 <_sungetc_r+0x8>
 8017000:	6921      	ldr	r1, [r4, #16]
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	b151      	cbz	r1, 801701c <_sungetc_r+0x60>
 8017006:	4299      	cmp	r1, r3
 8017008:	d208      	bcs.n	801701c <_sungetc_r+0x60>
 801700a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801700e:	42a9      	cmp	r1, r5
 8017010:	d104      	bne.n	801701c <_sungetc_r+0x60>
 8017012:	3b01      	subs	r3, #1
 8017014:	3201      	adds	r2, #1
 8017016:	6023      	str	r3, [r4, #0]
 8017018:	6062      	str	r2, [r4, #4]
 801701a:	e7d5      	b.n	8016fc8 <_sungetc_r+0xc>
 801701c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017024:	6363      	str	r3, [r4, #52]	; 0x34
 8017026:	2303      	movs	r3, #3
 8017028:	63a3      	str	r3, [r4, #56]	; 0x38
 801702a:	4623      	mov	r3, r4
 801702c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017030:	6023      	str	r3, [r4, #0]
 8017032:	2301      	movs	r3, #1
 8017034:	e7dc      	b.n	8016ff0 <_sungetc_r+0x34>

08017036 <__ssrefill_r>:
 8017036:	b510      	push	{r4, lr}
 8017038:	460c      	mov	r4, r1
 801703a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801703c:	b169      	cbz	r1, 801705a <__ssrefill_r+0x24>
 801703e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017042:	4299      	cmp	r1, r3
 8017044:	d001      	beq.n	801704a <__ssrefill_r+0x14>
 8017046:	f7ff fdbf 	bl	8016bc8 <_free_r>
 801704a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801704c:	6063      	str	r3, [r4, #4]
 801704e:	2000      	movs	r0, #0
 8017050:	6360      	str	r0, [r4, #52]	; 0x34
 8017052:	b113      	cbz	r3, 801705a <__ssrefill_r+0x24>
 8017054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017056:	6023      	str	r3, [r4, #0]
 8017058:	bd10      	pop	{r4, pc}
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	2300      	movs	r3, #0
 8017060:	6063      	str	r3, [r4, #4]
 8017062:	89a3      	ldrh	r3, [r4, #12]
 8017064:	f043 0320 	orr.w	r3, r3, #32
 8017068:	81a3      	strh	r3, [r4, #12]
 801706a:	f04f 30ff 	mov.w	r0, #4294967295
 801706e:	e7f3      	b.n	8017058 <__ssrefill_r+0x22>

08017070 <__ssvfiscanf_r>:
 8017070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017074:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017078:	460c      	mov	r4, r1
 801707a:	2100      	movs	r1, #0
 801707c:	9144      	str	r1, [sp, #272]	; 0x110
 801707e:	9145      	str	r1, [sp, #276]	; 0x114
 8017080:	499f      	ldr	r1, [pc, #636]	; (8017300 <__ssvfiscanf_r+0x290>)
 8017082:	91a0      	str	r1, [sp, #640]	; 0x280
 8017084:	f10d 0804 	add.w	r8, sp, #4
 8017088:	499e      	ldr	r1, [pc, #632]	; (8017304 <__ssvfiscanf_r+0x294>)
 801708a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017308 <__ssvfiscanf_r+0x298>
 801708e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017092:	4606      	mov	r6, r0
 8017094:	4692      	mov	sl, r2
 8017096:	91a1      	str	r1, [sp, #644]	; 0x284
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	270a      	movs	r7, #10
 801709c:	f89a 3000 	ldrb.w	r3, [sl]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	f000 812a 	beq.w	80172fa <__ssvfiscanf_r+0x28a>
 80170a6:	4655      	mov	r5, sl
 80170a8:	f7ff f948 	bl	801633c <__locale_ctype_ptr>
 80170ac:	f815 bb01 	ldrb.w	fp, [r5], #1
 80170b0:	4458      	add	r0, fp
 80170b2:	7843      	ldrb	r3, [r0, #1]
 80170b4:	f013 0308 	ands.w	r3, r3, #8
 80170b8:	d01c      	beq.n	80170f4 <__ssvfiscanf_r+0x84>
 80170ba:	6863      	ldr	r3, [r4, #4]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	dd12      	ble.n	80170e6 <__ssvfiscanf_r+0x76>
 80170c0:	f7ff f93c 	bl	801633c <__locale_ctype_ptr>
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	781a      	ldrb	r2, [r3, #0]
 80170c8:	4410      	add	r0, r2
 80170ca:	7842      	ldrb	r2, [r0, #1]
 80170cc:	0712      	lsls	r2, r2, #28
 80170ce:	d401      	bmi.n	80170d4 <__ssvfiscanf_r+0x64>
 80170d0:	46aa      	mov	sl, r5
 80170d2:	e7e3      	b.n	801709c <__ssvfiscanf_r+0x2c>
 80170d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170d6:	3201      	adds	r2, #1
 80170d8:	9245      	str	r2, [sp, #276]	; 0x114
 80170da:	6862      	ldr	r2, [r4, #4]
 80170dc:	3301      	adds	r3, #1
 80170de:	3a01      	subs	r2, #1
 80170e0:	6062      	str	r2, [r4, #4]
 80170e2:	6023      	str	r3, [r4, #0]
 80170e4:	e7e9      	b.n	80170ba <__ssvfiscanf_r+0x4a>
 80170e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170e8:	4621      	mov	r1, r4
 80170ea:	4630      	mov	r0, r6
 80170ec:	4798      	blx	r3
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d0e6      	beq.n	80170c0 <__ssvfiscanf_r+0x50>
 80170f2:	e7ed      	b.n	80170d0 <__ssvfiscanf_r+0x60>
 80170f4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80170f8:	f040 8082 	bne.w	8017200 <__ssvfiscanf_r+0x190>
 80170fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80170fe:	9341      	str	r3, [sp, #260]	; 0x104
 8017100:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017104:	2b2a      	cmp	r3, #42	; 0x2a
 8017106:	d103      	bne.n	8017110 <__ssvfiscanf_r+0xa0>
 8017108:	2310      	movs	r3, #16
 801710a:	9341      	str	r3, [sp, #260]	; 0x104
 801710c:	f10a 0502 	add.w	r5, sl, #2
 8017110:	46aa      	mov	sl, r5
 8017112:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801711a:	2a09      	cmp	r2, #9
 801711c:	d922      	bls.n	8017164 <__ssvfiscanf_r+0xf4>
 801711e:	2203      	movs	r2, #3
 8017120:	4879      	ldr	r0, [pc, #484]	; (8017308 <__ssvfiscanf_r+0x298>)
 8017122:	f7e9 f875 	bl	8000210 <memchr>
 8017126:	b138      	cbz	r0, 8017138 <__ssvfiscanf_r+0xc8>
 8017128:	eba0 0309 	sub.w	r3, r0, r9
 801712c:	2001      	movs	r0, #1
 801712e:	4098      	lsls	r0, r3
 8017130:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017132:	4318      	orrs	r0, r3
 8017134:	9041      	str	r0, [sp, #260]	; 0x104
 8017136:	46aa      	mov	sl, r5
 8017138:	f89a 3000 	ldrb.w	r3, [sl]
 801713c:	2b67      	cmp	r3, #103	; 0x67
 801713e:	f10a 0501 	add.w	r5, sl, #1
 8017142:	d82b      	bhi.n	801719c <__ssvfiscanf_r+0x12c>
 8017144:	2b65      	cmp	r3, #101	; 0x65
 8017146:	f080 809f 	bcs.w	8017288 <__ssvfiscanf_r+0x218>
 801714a:	2b47      	cmp	r3, #71	; 0x47
 801714c:	d810      	bhi.n	8017170 <__ssvfiscanf_r+0x100>
 801714e:	2b45      	cmp	r3, #69	; 0x45
 8017150:	f080 809a 	bcs.w	8017288 <__ssvfiscanf_r+0x218>
 8017154:	2b00      	cmp	r3, #0
 8017156:	d06c      	beq.n	8017232 <__ssvfiscanf_r+0x1c2>
 8017158:	2b25      	cmp	r3, #37	; 0x25
 801715a:	d051      	beq.n	8017200 <__ssvfiscanf_r+0x190>
 801715c:	2303      	movs	r3, #3
 801715e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017160:	9742      	str	r7, [sp, #264]	; 0x108
 8017162:	e027      	b.n	80171b4 <__ssvfiscanf_r+0x144>
 8017164:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017166:	fb07 1303 	mla	r3, r7, r3, r1
 801716a:	3b30      	subs	r3, #48	; 0x30
 801716c:	9343      	str	r3, [sp, #268]	; 0x10c
 801716e:	e7cf      	b.n	8017110 <__ssvfiscanf_r+0xa0>
 8017170:	2b5b      	cmp	r3, #91	; 0x5b
 8017172:	d06a      	beq.n	801724a <__ssvfiscanf_r+0x1da>
 8017174:	d80c      	bhi.n	8017190 <__ssvfiscanf_r+0x120>
 8017176:	2b58      	cmp	r3, #88	; 0x58
 8017178:	d1f0      	bne.n	801715c <__ssvfiscanf_r+0xec>
 801717a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801717c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017180:	9241      	str	r2, [sp, #260]	; 0x104
 8017182:	2210      	movs	r2, #16
 8017184:	9242      	str	r2, [sp, #264]	; 0x108
 8017186:	2b6e      	cmp	r3, #110	; 0x6e
 8017188:	bf8c      	ite	hi
 801718a:	2304      	movhi	r3, #4
 801718c:	2303      	movls	r3, #3
 801718e:	e010      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 8017190:	2b63      	cmp	r3, #99	; 0x63
 8017192:	d065      	beq.n	8017260 <__ssvfiscanf_r+0x1f0>
 8017194:	2b64      	cmp	r3, #100	; 0x64
 8017196:	d1e1      	bne.n	801715c <__ssvfiscanf_r+0xec>
 8017198:	9742      	str	r7, [sp, #264]	; 0x108
 801719a:	e7f4      	b.n	8017186 <__ssvfiscanf_r+0x116>
 801719c:	2b70      	cmp	r3, #112	; 0x70
 801719e:	d04b      	beq.n	8017238 <__ssvfiscanf_r+0x1c8>
 80171a0:	d826      	bhi.n	80171f0 <__ssvfiscanf_r+0x180>
 80171a2:	2b6e      	cmp	r3, #110	; 0x6e
 80171a4:	d062      	beq.n	801726c <__ssvfiscanf_r+0x1fc>
 80171a6:	d84c      	bhi.n	8017242 <__ssvfiscanf_r+0x1d2>
 80171a8:	2b69      	cmp	r3, #105	; 0x69
 80171aa:	d1d7      	bne.n	801715c <__ssvfiscanf_r+0xec>
 80171ac:	2300      	movs	r3, #0
 80171ae:	9342      	str	r3, [sp, #264]	; 0x108
 80171b0:	2303      	movs	r3, #3
 80171b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80171b4:	6863      	ldr	r3, [r4, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	dd68      	ble.n	801728c <__ssvfiscanf_r+0x21c>
 80171ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171bc:	0659      	lsls	r1, r3, #25
 80171be:	d407      	bmi.n	80171d0 <__ssvfiscanf_r+0x160>
 80171c0:	f7ff f8bc 	bl	801633c <__locale_ctype_ptr>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	781a      	ldrb	r2, [r3, #0]
 80171c8:	4410      	add	r0, r2
 80171ca:	7842      	ldrb	r2, [r0, #1]
 80171cc:	0712      	lsls	r2, r2, #28
 80171ce:	d464      	bmi.n	801729a <__ssvfiscanf_r+0x22a>
 80171d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	dc73      	bgt.n	80172be <__ssvfiscanf_r+0x24e>
 80171d6:	466b      	mov	r3, sp
 80171d8:	4622      	mov	r2, r4
 80171da:	a941      	add	r1, sp, #260	; 0x104
 80171dc:	4630      	mov	r0, r6
 80171de:	f000 f897 	bl	8017310 <_scanf_chars>
 80171e2:	2801      	cmp	r0, #1
 80171e4:	f000 8089 	beq.w	80172fa <__ssvfiscanf_r+0x28a>
 80171e8:	2802      	cmp	r0, #2
 80171ea:	f47f af71 	bne.w	80170d0 <__ssvfiscanf_r+0x60>
 80171ee:	e01d      	b.n	801722c <__ssvfiscanf_r+0x1bc>
 80171f0:	2b75      	cmp	r3, #117	; 0x75
 80171f2:	d0d1      	beq.n	8017198 <__ssvfiscanf_r+0x128>
 80171f4:	2b78      	cmp	r3, #120	; 0x78
 80171f6:	d0c0      	beq.n	801717a <__ssvfiscanf_r+0x10a>
 80171f8:	2b73      	cmp	r3, #115	; 0x73
 80171fa:	d1af      	bne.n	801715c <__ssvfiscanf_r+0xec>
 80171fc:	2302      	movs	r3, #2
 80171fe:	e7d8      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 8017200:	6863      	ldr	r3, [r4, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	dd0c      	ble.n	8017220 <__ssvfiscanf_r+0x1b0>
 8017206:	6823      	ldr	r3, [r4, #0]
 8017208:	781a      	ldrb	r2, [r3, #0]
 801720a:	455a      	cmp	r2, fp
 801720c:	d175      	bne.n	80172fa <__ssvfiscanf_r+0x28a>
 801720e:	3301      	adds	r3, #1
 8017210:	6862      	ldr	r2, [r4, #4]
 8017212:	6023      	str	r3, [r4, #0]
 8017214:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017216:	3a01      	subs	r2, #1
 8017218:	3301      	adds	r3, #1
 801721a:	6062      	str	r2, [r4, #4]
 801721c:	9345      	str	r3, [sp, #276]	; 0x114
 801721e:	e757      	b.n	80170d0 <__ssvfiscanf_r+0x60>
 8017220:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017222:	4621      	mov	r1, r4
 8017224:	4630      	mov	r0, r6
 8017226:	4798      	blx	r3
 8017228:	2800      	cmp	r0, #0
 801722a:	d0ec      	beq.n	8017206 <__ssvfiscanf_r+0x196>
 801722c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801722e:	2800      	cmp	r0, #0
 8017230:	d159      	bne.n	80172e6 <__ssvfiscanf_r+0x276>
 8017232:	f04f 30ff 	mov.w	r0, #4294967295
 8017236:	e05c      	b.n	80172f2 <__ssvfiscanf_r+0x282>
 8017238:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801723a:	f042 0220 	orr.w	r2, r2, #32
 801723e:	9241      	str	r2, [sp, #260]	; 0x104
 8017240:	e79b      	b.n	801717a <__ssvfiscanf_r+0x10a>
 8017242:	2308      	movs	r3, #8
 8017244:	9342      	str	r3, [sp, #264]	; 0x108
 8017246:	2304      	movs	r3, #4
 8017248:	e7b3      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 801724a:	4629      	mov	r1, r5
 801724c:	4640      	mov	r0, r8
 801724e:	f000 f9c7 	bl	80175e0 <__sccl>
 8017252:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017258:	9341      	str	r3, [sp, #260]	; 0x104
 801725a:	4605      	mov	r5, r0
 801725c:	2301      	movs	r3, #1
 801725e:	e7a8      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 8017260:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017266:	9341      	str	r3, [sp, #260]	; 0x104
 8017268:	2300      	movs	r3, #0
 801726a:	e7a2      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 801726c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801726e:	06c3      	lsls	r3, r0, #27
 8017270:	f53f af2e 	bmi.w	80170d0 <__ssvfiscanf_r+0x60>
 8017274:	9b00      	ldr	r3, [sp, #0]
 8017276:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017278:	1d19      	adds	r1, r3, #4
 801727a:	9100      	str	r1, [sp, #0]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	07c0      	lsls	r0, r0, #31
 8017280:	bf4c      	ite	mi
 8017282:	801a      	strhmi	r2, [r3, #0]
 8017284:	601a      	strpl	r2, [r3, #0]
 8017286:	e723      	b.n	80170d0 <__ssvfiscanf_r+0x60>
 8017288:	2305      	movs	r3, #5
 801728a:	e792      	b.n	80171b2 <__ssvfiscanf_r+0x142>
 801728c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801728e:	4621      	mov	r1, r4
 8017290:	4630      	mov	r0, r6
 8017292:	4798      	blx	r3
 8017294:	2800      	cmp	r0, #0
 8017296:	d090      	beq.n	80171ba <__ssvfiscanf_r+0x14a>
 8017298:	e7c8      	b.n	801722c <__ssvfiscanf_r+0x1bc>
 801729a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801729c:	3201      	adds	r2, #1
 801729e:	9245      	str	r2, [sp, #276]	; 0x114
 80172a0:	6862      	ldr	r2, [r4, #4]
 80172a2:	3a01      	subs	r2, #1
 80172a4:	2a00      	cmp	r2, #0
 80172a6:	6062      	str	r2, [r4, #4]
 80172a8:	dd02      	ble.n	80172b0 <__ssvfiscanf_r+0x240>
 80172aa:	3301      	adds	r3, #1
 80172ac:	6023      	str	r3, [r4, #0]
 80172ae:	e787      	b.n	80171c0 <__ssvfiscanf_r+0x150>
 80172b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172b2:	4621      	mov	r1, r4
 80172b4:	4630      	mov	r0, r6
 80172b6:	4798      	blx	r3
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d081      	beq.n	80171c0 <__ssvfiscanf_r+0x150>
 80172bc:	e7b6      	b.n	801722c <__ssvfiscanf_r+0x1bc>
 80172be:	2b04      	cmp	r3, #4
 80172c0:	dc06      	bgt.n	80172d0 <__ssvfiscanf_r+0x260>
 80172c2:	466b      	mov	r3, sp
 80172c4:	4622      	mov	r2, r4
 80172c6:	a941      	add	r1, sp, #260	; 0x104
 80172c8:	4630      	mov	r0, r6
 80172ca:	f000 f885 	bl	80173d8 <_scanf_i>
 80172ce:	e788      	b.n	80171e2 <__ssvfiscanf_r+0x172>
 80172d0:	4b0e      	ldr	r3, [pc, #56]	; (801730c <__ssvfiscanf_r+0x29c>)
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	f43f aefc 	beq.w	80170d0 <__ssvfiscanf_r+0x60>
 80172d8:	466b      	mov	r3, sp
 80172da:	4622      	mov	r2, r4
 80172dc:	a941      	add	r1, sp, #260	; 0x104
 80172de:	4630      	mov	r0, r6
 80172e0:	f7fc fd7e 	bl	8013de0 <_scanf_float>
 80172e4:	e77d      	b.n	80171e2 <__ssvfiscanf_r+0x172>
 80172e6:	89a3      	ldrh	r3, [r4, #12]
 80172e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80172ec:	bf18      	it	ne
 80172ee:	f04f 30ff 	movne.w	r0, #4294967295
 80172f2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80172f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172fc:	e7f9      	b.n	80172f2 <__ssvfiscanf_r+0x282>
 80172fe:	bf00      	nop
 8017300:	08016fbd 	.word	0x08016fbd
 8017304:	08017037 	.word	0x08017037
 8017308:	08018292 	.word	0x08018292
 801730c:	08013de1 	.word	0x08013de1

08017310 <_scanf_chars>:
 8017310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017314:	4615      	mov	r5, r2
 8017316:	688a      	ldr	r2, [r1, #8]
 8017318:	4680      	mov	r8, r0
 801731a:	460c      	mov	r4, r1
 801731c:	b932      	cbnz	r2, 801732c <_scanf_chars+0x1c>
 801731e:	698a      	ldr	r2, [r1, #24]
 8017320:	2a00      	cmp	r2, #0
 8017322:	bf14      	ite	ne
 8017324:	f04f 32ff 	movne.w	r2, #4294967295
 8017328:	2201      	moveq	r2, #1
 801732a:	608a      	str	r2, [r1, #8]
 801732c:	6822      	ldr	r2, [r4, #0]
 801732e:	06d1      	lsls	r1, r2, #27
 8017330:	bf5f      	itttt	pl
 8017332:	681a      	ldrpl	r2, [r3, #0]
 8017334:	1d11      	addpl	r1, r2, #4
 8017336:	6019      	strpl	r1, [r3, #0]
 8017338:	6817      	ldrpl	r7, [r2, #0]
 801733a:	2600      	movs	r6, #0
 801733c:	69a3      	ldr	r3, [r4, #24]
 801733e:	b1db      	cbz	r3, 8017378 <_scanf_chars+0x68>
 8017340:	2b01      	cmp	r3, #1
 8017342:	d107      	bne.n	8017354 <_scanf_chars+0x44>
 8017344:	682b      	ldr	r3, [r5, #0]
 8017346:	6962      	ldr	r2, [r4, #20]
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	5cd3      	ldrb	r3, [r2, r3]
 801734c:	b9a3      	cbnz	r3, 8017378 <_scanf_chars+0x68>
 801734e:	2e00      	cmp	r6, #0
 8017350:	d132      	bne.n	80173b8 <_scanf_chars+0xa8>
 8017352:	e006      	b.n	8017362 <_scanf_chars+0x52>
 8017354:	2b02      	cmp	r3, #2
 8017356:	d007      	beq.n	8017368 <_scanf_chars+0x58>
 8017358:	2e00      	cmp	r6, #0
 801735a:	d12d      	bne.n	80173b8 <_scanf_chars+0xa8>
 801735c:	69a3      	ldr	r3, [r4, #24]
 801735e:	2b01      	cmp	r3, #1
 8017360:	d12a      	bne.n	80173b8 <_scanf_chars+0xa8>
 8017362:	2001      	movs	r0, #1
 8017364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017368:	f7fe ffe8 	bl	801633c <__locale_ctype_ptr>
 801736c:	682b      	ldr	r3, [r5, #0]
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	4418      	add	r0, r3
 8017372:	7843      	ldrb	r3, [r0, #1]
 8017374:	071b      	lsls	r3, r3, #28
 8017376:	d4ef      	bmi.n	8017358 <_scanf_chars+0x48>
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	06da      	lsls	r2, r3, #27
 801737c:	bf5e      	ittt	pl
 801737e:	682b      	ldrpl	r3, [r5, #0]
 8017380:	781b      	ldrbpl	r3, [r3, #0]
 8017382:	703b      	strbpl	r3, [r7, #0]
 8017384:	682a      	ldr	r2, [r5, #0]
 8017386:	686b      	ldr	r3, [r5, #4]
 8017388:	f102 0201 	add.w	r2, r2, #1
 801738c:	602a      	str	r2, [r5, #0]
 801738e:	68a2      	ldr	r2, [r4, #8]
 8017390:	f103 33ff 	add.w	r3, r3, #4294967295
 8017394:	f102 32ff 	add.w	r2, r2, #4294967295
 8017398:	606b      	str	r3, [r5, #4]
 801739a:	f106 0601 	add.w	r6, r6, #1
 801739e:	bf58      	it	pl
 80173a0:	3701      	addpl	r7, #1
 80173a2:	60a2      	str	r2, [r4, #8]
 80173a4:	b142      	cbz	r2, 80173b8 <_scanf_chars+0xa8>
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	dcc8      	bgt.n	801733c <_scanf_chars+0x2c>
 80173aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80173ae:	4629      	mov	r1, r5
 80173b0:	4640      	mov	r0, r8
 80173b2:	4798      	blx	r3
 80173b4:	2800      	cmp	r0, #0
 80173b6:	d0c1      	beq.n	801733c <_scanf_chars+0x2c>
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	f013 0310 	ands.w	r3, r3, #16
 80173be:	d105      	bne.n	80173cc <_scanf_chars+0xbc>
 80173c0:	68e2      	ldr	r2, [r4, #12]
 80173c2:	3201      	adds	r2, #1
 80173c4:	60e2      	str	r2, [r4, #12]
 80173c6:	69a2      	ldr	r2, [r4, #24]
 80173c8:	b102      	cbz	r2, 80173cc <_scanf_chars+0xbc>
 80173ca:	703b      	strb	r3, [r7, #0]
 80173cc:	6923      	ldr	r3, [r4, #16]
 80173ce:	441e      	add	r6, r3
 80173d0:	6126      	str	r6, [r4, #16]
 80173d2:	2000      	movs	r0, #0
 80173d4:	e7c6      	b.n	8017364 <_scanf_chars+0x54>
	...

080173d8 <_scanf_i>:
 80173d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173dc:	469a      	mov	sl, r3
 80173de:	4b74      	ldr	r3, [pc, #464]	; (80175b0 <_scanf_i+0x1d8>)
 80173e0:	460c      	mov	r4, r1
 80173e2:	4683      	mov	fp, r0
 80173e4:	4616      	mov	r6, r2
 80173e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80173ea:	b087      	sub	sp, #28
 80173ec:	ab03      	add	r3, sp, #12
 80173ee:	68a7      	ldr	r7, [r4, #8]
 80173f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80173f4:	4b6f      	ldr	r3, [pc, #444]	; (80175b4 <_scanf_i+0x1dc>)
 80173f6:	69a1      	ldr	r1, [r4, #24]
 80173f8:	4a6f      	ldr	r2, [pc, #444]	; (80175b8 <_scanf_i+0x1e0>)
 80173fa:	2903      	cmp	r1, #3
 80173fc:	bf08      	it	eq
 80173fe:	461a      	moveq	r2, r3
 8017400:	1e7b      	subs	r3, r7, #1
 8017402:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017406:	bf84      	itt	hi
 8017408:	f240 135d 	movwhi	r3, #349	; 0x15d
 801740c:	60a3      	strhi	r3, [r4, #8]
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	9200      	str	r2, [sp, #0]
 8017412:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017416:	bf88      	it	hi
 8017418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801741c:	f104 091c 	add.w	r9, r4, #28
 8017420:	6023      	str	r3, [r4, #0]
 8017422:	bf8c      	ite	hi
 8017424:	197f      	addhi	r7, r7, r5
 8017426:	2700      	movls	r7, #0
 8017428:	464b      	mov	r3, r9
 801742a:	f04f 0800 	mov.w	r8, #0
 801742e:	9301      	str	r3, [sp, #4]
 8017430:	6831      	ldr	r1, [r6, #0]
 8017432:	ab03      	add	r3, sp, #12
 8017434:	2202      	movs	r2, #2
 8017436:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801743a:	7809      	ldrb	r1, [r1, #0]
 801743c:	f7e8 fee8 	bl	8000210 <memchr>
 8017440:	9b01      	ldr	r3, [sp, #4]
 8017442:	b330      	cbz	r0, 8017492 <_scanf_i+0xba>
 8017444:	f1b8 0f01 	cmp.w	r8, #1
 8017448:	d15a      	bne.n	8017500 <_scanf_i+0x128>
 801744a:	6862      	ldr	r2, [r4, #4]
 801744c:	b92a      	cbnz	r2, 801745a <_scanf_i+0x82>
 801744e:	6822      	ldr	r2, [r4, #0]
 8017450:	2108      	movs	r1, #8
 8017452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017456:	6061      	str	r1, [r4, #4]
 8017458:	6022      	str	r2, [r4, #0]
 801745a:	6822      	ldr	r2, [r4, #0]
 801745c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017460:	6022      	str	r2, [r4, #0]
 8017462:	68a2      	ldr	r2, [r4, #8]
 8017464:	1e51      	subs	r1, r2, #1
 8017466:	60a1      	str	r1, [r4, #8]
 8017468:	b19a      	cbz	r2, 8017492 <_scanf_i+0xba>
 801746a:	6832      	ldr	r2, [r6, #0]
 801746c:	1c51      	adds	r1, r2, #1
 801746e:	6031      	str	r1, [r6, #0]
 8017470:	7812      	ldrb	r2, [r2, #0]
 8017472:	701a      	strb	r2, [r3, #0]
 8017474:	1c5d      	adds	r5, r3, #1
 8017476:	6873      	ldr	r3, [r6, #4]
 8017478:	3b01      	subs	r3, #1
 801747a:	2b00      	cmp	r3, #0
 801747c:	6073      	str	r3, [r6, #4]
 801747e:	dc07      	bgt.n	8017490 <_scanf_i+0xb8>
 8017480:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017484:	4631      	mov	r1, r6
 8017486:	4658      	mov	r0, fp
 8017488:	4798      	blx	r3
 801748a:	2800      	cmp	r0, #0
 801748c:	f040 8086 	bne.w	801759c <_scanf_i+0x1c4>
 8017490:	462b      	mov	r3, r5
 8017492:	f108 0801 	add.w	r8, r8, #1
 8017496:	f1b8 0f03 	cmp.w	r8, #3
 801749a:	d1c8      	bne.n	801742e <_scanf_i+0x56>
 801749c:	6862      	ldr	r2, [r4, #4]
 801749e:	b90a      	cbnz	r2, 80174a4 <_scanf_i+0xcc>
 80174a0:	220a      	movs	r2, #10
 80174a2:	6062      	str	r2, [r4, #4]
 80174a4:	6862      	ldr	r2, [r4, #4]
 80174a6:	4945      	ldr	r1, [pc, #276]	; (80175bc <_scanf_i+0x1e4>)
 80174a8:	6960      	ldr	r0, [r4, #20]
 80174aa:	9301      	str	r3, [sp, #4]
 80174ac:	1a89      	subs	r1, r1, r2
 80174ae:	f000 f897 	bl	80175e0 <__sccl>
 80174b2:	9b01      	ldr	r3, [sp, #4]
 80174b4:	f04f 0800 	mov.w	r8, #0
 80174b8:	461d      	mov	r5, r3
 80174ba:	68a3      	ldr	r3, [r4, #8]
 80174bc:	6822      	ldr	r2, [r4, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d03a      	beq.n	8017538 <_scanf_i+0x160>
 80174c2:	6831      	ldr	r1, [r6, #0]
 80174c4:	6960      	ldr	r0, [r4, #20]
 80174c6:	f891 c000 	ldrb.w	ip, [r1]
 80174ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80174ce:	2800      	cmp	r0, #0
 80174d0:	d032      	beq.n	8017538 <_scanf_i+0x160>
 80174d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80174d6:	d121      	bne.n	801751c <_scanf_i+0x144>
 80174d8:	0510      	lsls	r0, r2, #20
 80174da:	d51f      	bpl.n	801751c <_scanf_i+0x144>
 80174dc:	f108 0801 	add.w	r8, r8, #1
 80174e0:	b117      	cbz	r7, 80174e8 <_scanf_i+0x110>
 80174e2:	3301      	adds	r3, #1
 80174e4:	3f01      	subs	r7, #1
 80174e6:	60a3      	str	r3, [r4, #8]
 80174e8:	6873      	ldr	r3, [r6, #4]
 80174ea:	3b01      	subs	r3, #1
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	6073      	str	r3, [r6, #4]
 80174f0:	dd1b      	ble.n	801752a <_scanf_i+0x152>
 80174f2:	6833      	ldr	r3, [r6, #0]
 80174f4:	3301      	adds	r3, #1
 80174f6:	6033      	str	r3, [r6, #0]
 80174f8:	68a3      	ldr	r3, [r4, #8]
 80174fa:	3b01      	subs	r3, #1
 80174fc:	60a3      	str	r3, [r4, #8]
 80174fe:	e7dc      	b.n	80174ba <_scanf_i+0xe2>
 8017500:	f1b8 0f02 	cmp.w	r8, #2
 8017504:	d1ad      	bne.n	8017462 <_scanf_i+0x8a>
 8017506:	6822      	ldr	r2, [r4, #0]
 8017508:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801750c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017510:	d1bf      	bne.n	8017492 <_scanf_i+0xba>
 8017512:	2110      	movs	r1, #16
 8017514:	6061      	str	r1, [r4, #4]
 8017516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801751a:	e7a1      	b.n	8017460 <_scanf_i+0x88>
 801751c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017520:	6022      	str	r2, [r4, #0]
 8017522:	780b      	ldrb	r3, [r1, #0]
 8017524:	702b      	strb	r3, [r5, #0]
 8017526:	3501      	adds	r5, #1
 8017528:	e7de      	b.n	80174e8 <_scanf_i+0x110>
 801752a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801752e:	4631      	mov	r1, r6
 8017530:	4658      	mov	r0, fp
 8017532:	4798      	blx	r3
 8017534:	2800      	cmp	r0, #0
 8017536:	d0df      	beq.n	80174f8 <_scanf_i+0x120>
 8017538:	6823      	ldr	r3, [r4, #0]
 801753a:	05d9      	lsls	r1, r3, #23
 801753c:	d50c      	bpl.n	8017558 <_scanf_i+0x180>
 801753e:	454d      	cmp	r5, r9
 8017540:	d908      	bls.n	8017554 <_scanf_i+0x17c>
 8017542:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017546:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801754a:	4632      	mov	r2, r6
 801754c:	4658      	mov	r0, fp
 801754e:	4798      	blx	r3
 8017550:	1e6f      	subs	r7, r5, #1
 8017552:	463d      	mov	r5, r7
 8017554:	454d      	cmp	r5, r9
 8017556:	d029      	beq.n	80175ac <_scanf_i+0x1d4>
 8017558:	6822      	ldr	r2, [r4, #0]
 801755a:	f012 0210 	ands.w	r2, r2, #16
 801755e:	d113      	bne.n	8017588 <_scanf_i+0x1b0>
 8017560:	702a      	strb	r2, [r5, #0]
 8017562:	6863      	ldr	r3, [r4, #4]
 8017564:	9e00      	ldr	r6, [sp, #0]
 8017566:	4649      	mov	r1, r9
 8017568:	4658      	mov	r0, fp
 801756a:	47b0      	blx	r6
 801756c:	f8da 3000 	ldr.w	r3, [sl]
 8017570:	6821      	ldr	r1, [r4, #0]
 8017572:	1d1a      	adds	r2, r3, #4
 8017574:	f8ca 2000 	str.w	r2, [sl]
 8017578:	f011 0f20 	tst.w	r1, #32
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	d010      	beq.n	80175a2 <_scanf_i+0x1ca>
 8017580:	6018      	str	r0, [r3, #0]
 8017582:	68e3      	ldr	r3, [r4, #12]
 8017584:	3301      	adds	r3, #1
 8017586:	60e3      	str	r3, [r4, #12]
 8017588:	eba5 0509 	sub.w	r5, r5, r9
 801758c:	44a8      	add	r8, r5
 801758e:	6925      	ldr	r5, [r4, #16]
 8017590:	4445      	add	r5, r8
 8017592:	6125      	str	r5, [r4, #16]
 8017594:	2000      	movs	r0, #0
 8017596:	b007      	add	sp, #28
 8017598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759c:	f04f 0800 	mov.w	r8, #0
 80175a0:	e7ca      	b.n	8017538 <_scanf_i+0x160>
 80175a2:	07ca      	lsls	r2, r1, #31
 80175a4:	bf4c      	ite	mi
 80175a6:	8018      	strhmi	r0, [r3, #0]
 80175a8:	6018      	strpl	r0, [r3, #0]
 80175aa:	e7ea      	b.n	8017582 <_scanf_i+0x1aa>
 80175ac:	2001      	movs	r0, #1
 80175ae:	e7f2      	b.n	8017596 <_scanf_i+0x1be>
 80175b0:	08017dec 	.word	0x08017dec
 80175b4:	08014ff9 	.word	0x08014ff9
 80175b8:	0801775d 	.word	0x0801775d
 80175bc:	080182ad 	.word	0x080182ad

080175c0 <_sbrk_r>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4c06      	ldr	r4, [pc, #24]	; (80175dc <_sbrk_r+0x1c>)
 80175c4:	2300      	movs	r3, #0
 80175c6:	4605      	mov	r5, r0
 80175c8:	4608      	mov	r0, r1
 80175ca:	6023      	str	r3, [r4, #0]
 80175cc:	f7ee fe10 	bl	80061f0 <_sbrk>
 80175d0:	1c43      	adds	r3, r0, #1
 80175d2:	d102      	bne.n	80175da <_sbrk_r+0x1a>
 80175d4:	6823      	ldr	r3, [r4, #0]
 80175d6:	b103      	cbz	r3, 80175da <_sbrk_r+0x1a>
 80175d8:	602b      	str	r3, [r5, #0]
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	20037fcc 	.word	0x20037fcc

080175e0 <__sccl>:
 80175e0:	b570      	push	{r4, r5, r6, lr}
 80175e2:	780b      	ldrb	r3, [r1, #0]
 80175e4:	2b5e      	cmp	r3, #94	; 0x5e
 80175e6:	bf13      	iteet	ne
 80175e8:	1c4a      	addne	r2, r1, #1
 80175ea:	1c8a      	addeq	r2, r1, #2
 80175ec:	784b      	ldrbeq	r3, [r1, #1]
 80175ee:	2100      	movne	r1, #0
 80175f0:	bf08      	it	eq
 80175f2:	2101      	moveq	r1, #1
 80175f4:	1e44      	subs	r4, r0, #1
 80175f6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80175fa:	f804 1f01 	strb.w	r1, [r4, #1]!
 80175fe:	42ac      	cmp	r4, r5
 8017600:	d1fb      	bne.n	80175fa <__sccl+0x1a>
 8017602:	b913      	cbnz	r3, 801760a <__sccl+0x2a>
 8017604:	3a01      	subs	r2, #1
 8017606:	4610      	mov	r0, r2
 8017608:	bd70      	pop	{r4, r5, r6, pc}
 801760a:	f081 0401 	eor.w	r4, r1, #1
 801760e:	54c4      	strb	r4, [r0, r3]
 8017610:	1c51      	adds	r1, r2, #1
 8017612:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017616:	2d2d      	cmp	r5, #45	; 0x2d
 8017618:	f101 36ff 	add.w	r6, r1, #4294967295
 801761c:	460a      	mov	r2, r1
 801761e:	d006      	beq.n	801762e <__sccl+0x4e>
 8017620:	2d5d      	cmp	r5, #93	; 0x5d
 8017622:	d0f0      	beq.n	8017606 <__sccl+0x26>
 8017624:	b90d      	cbnz	r5, 801762a <__sccl+0x4a>
 8017626:	4632      	mov	r2, r6
 8017628:	e7ed      	b.n	8017606 <__sccl+0x26>
 801762a:	462b      	mov	r3, r5
 801762c:	e7ef      	b.n	801760e <__sccl+0x2e>
 801762e:	780e      	ldrb	r6, [r1, #0]
 8017630:	2e5d      	cmp	r6, #93	; 0x5d
 8017632:	d0fa      	beq.n	801762a <__sccl+0x4a>
 8017634:	42b3      	cmp	r3, r6
 8017636:	dcf8      	bgt.n	801762a <__sccl+0x4a>
 8017638:	3301      	adds	r3, #1
 801763a:	429e      	cmp	r6, r3
 801763c:	54c4      	strb	r4, [r0, r3]
 801763e:	dcfb      	bgt.n	8017638 <__sccl+0x58>
 8017640:	3102      	adds	r1, #2
 8017642:	e7e6      	b.n	8017612 <__sccl+0x32>

08017644 <strncmp>:
 8017644:	b510      	push	{r4, lr}
 8017646:	b16a      	cbz	r2, 8017664 <strncmp+0x20>
 8017648:	3901      	subs	r1, #1
 801764a:	1884      	adds	r4, r0, r2
 801764c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017650:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017654:	4293      	cmp	r3, r2
 8017656:	d103      	bne.n	8017660 <strncmp+0x1c>
 8017658:	42a0      	cmp	r0, r4
 801765a:	d001      	beq.n	8017660 <strncmp+0x1c>
 801765c:	2b00      	cmp	r3, #0
 801765e:	d1f5      	bne.n	801764c <strncmp+0x8>
 8017660:	1a98      	subs	r0, r3, r2
 8017662:	bd10      	pop	{r4, pc}
 8017664:	4610      	mov	r0, r2
 8017666:	e7fc      	b.n	8017662 <strncmp+0x1e>

08017668 <_strtoul_l.isra.0>:
 8017668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801766c:	4680      	mov	r8, r0
 801766e:	4689      	mov	r9, r1
 8017670:	4692      	mov	sl, r2
 8017672:	461e      	mov	r6, r3
 8017674:	460f      	mov	r7, r1
 8017676:	463d      	mov	r5, r7
 8017678:	9808      	ldr	r0, [sp, #32]
 801767a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801767e:	f7fe fe59 	bl	8016334 <__locale_ctype_ptr_l>
 8017682:	4420      	add	r0, r4
 8017684:	7843      	ldrb	r3, [r0, #1]
 8017686:	f013 0308 	ands.w	r3, r3, #8
 801768a:	d130      	bne.n	80176ee <_strtoul_l.isra.0+0x86>
 801768c:	2c2d      	cmp	r4, #45	; 0x2d
 801768e:	d130      	bne.n	80176f2 <_strtoul_l.isra.0+0x8a>
 8017690:	787c      	ldrb	r4, [r7, #1]
 8017692:	1cbd      	adds	r5, r7, #2
 8017694:	2101      	movs	r1, #1
 8017696:	2e00      	cmp	r6, #0
 8017698:	d05c      	beq.n	8017754 <_strtoul_l.isra.0+0xec>
 801769a:	2e10      	cmp	r6, #16
 801769c:	d109      	bne.n	80176b2 <_strtoul_l.isra.0+0x4a>
 801769e:	2c30      	cmp	r4, #48	; 0x30
 80176a0:	d107      	bne.n	80176b2 <_strtoul_l.isra.0+0x4a>
 80176a2:	782b      	ldrb	r3, [r5, #0]
 80176a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80176a8:	2b58      	cmp	r3, #88	; 0x58
 80176aa:	d14e      	bne.n	801774a <_strtoul_l.isra.0+0xe2>
 80176ac:	786c      	ldrb	r4, [r5, #1]
 80176ae:	2610      	movs	r6, #16
 80176b0:	3502      	adds	r5, #2
 80176b2:	f04f 32ff 	mov.w	r2, #4294967295
 80176b6:	2300      	movs	r3, #0
 80176b8:	fbb2 f2f6 	udiv	r2, r2, r6
 80176bc:	fb06 fc02 	mul.w	ip, r6, r2
 80176c0:	ea6f 0c0c 	mvn.w	ip, ip
 80176c4:	4618      	mov	r0, r3
 80176c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80176ca:	2f09      	cmp	r7, #9
 80176cc:	d817      	bhi.n	80176fe <_strtoul_l.isra.0+0x96>
 80176ce:	463c      	mov	r4, r7
 80176d0:	42a6      	cmp	r6, r4
 80176d2:	dd23      	ble.n	801771c <_strtoul_l.isra.0+0xb4>
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	db1e      	blt.n	8017716 <_strtoul_l.isra.0+0xae>
 80176d8:	4282      	cmp	r2, r0
 80176da:	d31c      	bcc.n	8017716 <_strtoul_l.isra.0+0xae>
 80176dc:	d101      	bne.n	80176e2 <_strtoul_l.isra.0+0x7a>
 80176de:	45a4      	cmp	ip, r4
 80176e0:	db19      	blt.n	8017716 <_strtoul_l.isra.0+0xae>
 80176e2:	fb00 4006 	mla	r0, r0, r6, r4
 80176e6:	2301      	movs	r3, #1
 80176e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176ec:	e7eb      	b.n	80176c6 <_strtoul_l.isra.0+0x5e>
 80176ee:	462f      	mov	r7, r5
 80176f0:	e7c1      	b.n	8017676 <_strtoul_l.isra.0+0xe>
 80176f2:	2c2b      	cmp	r4, #43	; 0x2b
 80176f4:	bf04      	itt	eq
 80176f6:	1cbd      	addeq	r5, r7, #2
 80176f8:	787c      	ldrbeq	r4, [r7, #1]
 80176fa:	4619      	mov	r1, r3
 80176fc:	e7cb      	b.n	8017696 <_strtoul_l.isra.0+0x2e>
 80176fe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017702:	2f19      	cmp	r7, #25
 8017704:	d801      	bhi.n	801770a <_strtoul_l.isra.0+0xa2>
 8017706:	3c37      	subs	r4, #55	; 0x37
 8017708:	e7e2      	b.n	80176d0 <_strtoul_l.isra.0+0x68>
 801770a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801770e:	2f19      	cmp	r7, #25
 8017710:	d804      	bhi.n	801771c <_strtoul_l.isra.0+0xb4>
 8017712:	3c57      	subs	r4, #87	; 0x57
 8017714:	e7dc      	b.n	80176d0 <_strtoul_l.isra.0+0x68>
 8017716:	f04f 33ff 	mov.w	r3, #4294967295
 801771a:	e7e5      	b.n	80176e8 <_strtoul_l.isra.0+0x80>
 801771c:	2b00      	cmp	r3, #0
 801771e:	da09      	bge.n	8017734 <_strtoul_l.isra.0+0xcc>
 8017720:	2322      	movs	r3, #34	; 0x22
 8017722:	f8c8 3000 	str.w	r3, [r8]
 8017726:	f04f 30ff 	mov.w	r0, #4294967295
 801772a:	f1ba 0f00 	cmp.w	sl, #0
 801772e:	d107      	bne.n	8017740 <_strtoul_l.isra.0+0xd8>
 8017730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017734:	b101      	cbz	r1, 8017738 <_strtoul_l.isra.0+0xd0>
 8017736:	4240      	negs	r0, r0
 8017738:	f1ba 0f00 	cmp.w	sl, #0
 801773c:	d0f8      	beq.n	8017730 <_strtoul_l.isra.0+0xc8>
 801773e:	b10b      	cbz	r3, 8017744 <_strtoul_l.isra.0+0xdc>
 8017740:	f105 39ff 	add.w	r9, r5, #4294967295
 8017744:	f8ca 9000 	str.w	r9, [sl]
 8017748:	e7f2      	b.n	8017730 <_strtoul_l.isra.0+0xc8>
 801774a:	2430      	movs	r4, #48	; 0x30
 801774c:	2e00      	cmp	r6, #0
 801774e:	d1b0      	bne.n	80176b2 <_strtoul_l.isra.0+0x4a>
 8017750:	2608      	movs	r6, #8
 8017752:	e7ae      	b.n	80176b2 <_strtoul_l.isra.0+0x4a>
 8017754:	2c30      	cmp	r4, #48	; 0x30
 8017756:	d0a4      	beq.n	80176a2 <_strtoul_l.isra.0+0x3a>
 8017758:	260a      	movs	r6, #10
 801775a:	e7aa      	b.n	80176b2 <_strtoul_l.isra.0+0x4a>

0801775c <_strtoul_r>:
 801775c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801775e:	4c06      	ldr	r4, [pc, #24]	; (8017778 <_strtoul_r+0x1c>)
 8017760:	4d06      	ldr	r5, [pc, #24]	; (801777c <_strtoul_r+0x20>)
 8017762:	6824      	ldr	r4, [r4, #0]
 8017764:	6a24      	ldr	r4, [r4, #32]
 8017766:	2c00      	cmp	r4, #0
 8017768:	bf08      	it	eq
 801776a:	462c      	moveq	r4, r5
 801776c:	9400      	str	r4, [sp, #0]
 801776e:	f7ff ff7b 	bl	8017668 <_strtoul_l.isra.0>
 8017772:	b003      	add	sp, #12
 8017774:	bd30      	pop	{r4, r5, pc}
 8017776:	bf00      	nop
 8017778:	2000000c 	.word	0x2000000c
 801777c:	20000070 	.word	0x20000070

08017780 <__submore>:
 8017780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017784:	460c      	mov	r4, r1
 8017786:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801778c:	4299      	cmp	r1, r3
 801778e:	d11d      	bne.n	80177cc <__submore+0x4c>
 8017790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017794:	f7ff fa66 	bl	8016c64 <_malloc_r>
 8017798:	b918      	cbnz	r0, 80177a2 <__submore+0x22>
 801779a:	f04f 30ff 	mov.w	r0, #4294967295
 801779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80177a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80177ac:	6360      	str	r0, [r4, #52]	; 0x34
 80177ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80177b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80177b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80177ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80177be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80177c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80177c6:	6020      	str	r0, [r4, #0]
 80177c8:	2000      	movs	r0, #0
 80177ca:	e7e8      	b.n	801779e <__submore+0x1e>
 80177cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80177ce:	0077      	lsls	r7, r6, #1
 80177d0:	463a      	mov	r2, r7
 80177d2:	f000 f837 	bl	8017844 <_realloc_r>
 80177d6:	4605      	mov	r5, r0
 80177d8:	2800      	cmp	r0, #0
 80177da:	d0de      	beq.n	801779a <__submore+0x1a>
 80177dc:	eb00 0806 	add.w	r8, r0, r6
 80177e0:	4601      	mov	r1, r0
 80177e2:	4632      	mov	r2, r6
 80177e4:	4640      	mov	r0, r8
 80177e6:	f7fb fe8b 	bl	8013500 <memcpy>
 80177ea:	f8c4 8000 	str.w	r8, [r4]
 80177ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80177f2:	e7e9      	b.n	80177c8 <__submore+0x48>

080177f4 <__ascii_wctomb>:
 80177f4:	b149      	cbz	r1, 801780a <__ascii_wctomb+0x16>
 80177f6:	2aff      	cmp	r2, #255	; 0xff
 80177f8:	bf85      	ittet	hi
 80177fa:	238a      	movhi	r3, #138	; 0x8a
 80177fc:	6003      	strhi	r3, [r0, #0]
 80177fe:	700a      	strbls	r2, [r1, #0]
 8017800:	f04f 30ff 	movhi.w	r0, #4294967295
 8017804:	bf98      	it	ls
 8017806:	2001      	movls	r0, #1
 8017808:	4770      	bx	lr
 801780a:	4608      	mov	r0, r1
 801780c:	4770      	bx	lr

0801780e <memmove>:
 801780e:	4288      	cmp	r0, r1
 8017810:	b510      	push	{r4, lr}
 8017812:	eb01 0302 	add.w	r3, r1, r2
 8017816:	d807      	bhi.n	8017828 <memmove+0x1a>
 8017818:	1e42      	subs	r2, r0, #1
 801781a:	4299      	cmp	r1, r3
 801781c:	d00a      	beq.n	8017834 <memmove+0x26>
 801781e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017822:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017826:	e7f8      	b.n	801781a <memmove+0xc>
 8017828:	4283      	cmp	r3, r0
 801782a:	d9f5      	bls.n	8017818 <memmove+0xa>
 801782c:	1881      	adds	r1, r0, r2
 801782e:	1ad2      	subs	r2, r2, r3
 8017830:	42d3      	cmn	r3, r2
 8017832:	d100      	bne.n	8017836 <memmove+0x28>
 8017834:	bd10      	pop	{r4, pc}
 8017836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801783a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801783e:	e7f7      	b.n	8017830 <memmove+0x22>

08017840 <__malloc_lock>:
 8017840:	4770      	bx	lr

08017842 <__malloc_unlock>:
 8017842:	4770      	bx	lr

08017844 <_realloc_r>:
 8017844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017846:	4607      	mov	r7, r0
 8017848:	4614      	mov	r4, r2
 801784a:	460e      	mov	r6, r1
 801784c:	b921      	cbnz	r1, 8017858 <_realloc_r+0x14>
 801784e:	4611      	mov	r1, r2
 8017850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017854:	f7ff ba06 	b.w	8016c64 <_malloc_r>
 8017858:	b922      	cbnz	r2, 8017864 <_realloc_r+0x20>
 801785a:	f7ff f9b5 	bl	8016bc8 <_free_r>
 801785e:	4625      	mov	r5, r4
 8017860:	4628      	mov	r0, r5
 8017862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017864:	f000 f814 	bl	8017890 <_malloc_usable_size_r>
 8017868:	42a0      	cmp	r0, r4
 801786a:	d20f      	bcs.n	801788c <_realloc_r+0x48>
 801786c:	4621      	mov	r1, r4
 801786e:	4638      	mov	r0, r7
 8017870:	f7ff f9f8 	bl	8016c64 <_malloc_r>
 8017874:	4605      	mov	r5, r0
 8017876:	2800      	cmp	r0, #0
 8017878:	d0f2      	beq.n	8017860 <_realloc_r+0x1c>
 801787a:	4631      	mov	r1, r6
 801787c:	4622      	mov	r2, r4
 801787e:	f7fb fe3f 	bl	8013500 <memcpy>
 8017882:	4631      	mov	r1, r6
 8017884:	4638      	mov	r0, r7
 8017886:	f7ff f99f 	bl	8016bc8 <_free_r>
 801788a:	e7e9      	b.n	8017860 <_realloc_r+0x1c>
 801788c:	4635      	mov	r5, r6
 801788e:	e7e7      	b.n	8017860 <_realloc_r+0x1c>

08017890 <_malloc_usable_size_r>:
 8017890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017894:	1f18      	subs	r0, r3, #4
 8017896:	2b00      	cmp	r3, #0
 8017898:	bfbc      	itt	lt
 801789a:	580b      	ldrlt	r3, [r1, r0]
 801789c:	18c0      	addlt	r0, r0, r3
 801789e:	4770      	bx	lr

080178a0 <_init>:
 80178a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a2:	bf00      	nop
 80178a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178a6:	bc08      	pop	{r3}
 80178a8:	469e      	mov	lr, r3
 80178aa:	4770      	bx	lr

080178ac <_fini>:
 80178ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ae:	bf00      	nop
 80178b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178b2:	bc08      	pop	{r3}
 80178b4:	469e      	mov	lr, r3
 80178b6:	4770      	bx	lr
