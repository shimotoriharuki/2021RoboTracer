
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  080186b8  080186b8  000286b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080191dc  080191dc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080191dc  080191dc  000291dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080191e4  080191e4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080191e4  080191e4  000291e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080191ec  080191ec  000291ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080191f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c70  200001e0  080193cc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e50  080193cc  00030e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038ec9  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  000690d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002290  00000000  00000000  00070a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd0  00000000  00000000  00072ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f85  00000000  00000000  00074c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025a7b  00000000  00000000  000abbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110a54  00000000  00000000  000d1678  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e20cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a464  00000000  00000000  001e2148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080186a0 	.word	0x080186a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080186a0 	.word	0x080186a0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 f804 	bl	8009fe4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e944 	.word	0x2003e944

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 ffec 	bl	8009fe4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e944 	.word	0x2003e944

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 fe8d 	bl	8009d40 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 fbf4 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fbee 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 fbe8 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fbe2 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fbdc 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fbd6 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 fbd0 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 fbca 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fbc4 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fbbe 	bl	8008814 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fbb2 	bl	8008814 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fbac 	bl	8008814 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 fe8d 	bl	8015e48 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0), ignore_linetrace_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <_ZN7Encoder4initEv+0x30>)
 80011c0:	f00c fda8 	bl	800dd14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <_ZN7Encoder4initEv+0x34>)
 80011c8:	f00c fda4 	bl	800dd14 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_ZN7Encoder4initEv+0x38>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <_ZN7Encoder4initEv+0x3c>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2003eb98 	.word	0x2003eb98
 80011e8:	2003e87c 	.word	0x2003e87c
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010400 	.word	0x40010400
 80011f4:	00000000 	.word	0x00000000

080011f8 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001200:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <_ZN7Encoder6updateEv+0x1c8>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013c4 <_ZN7Encoder6updateEv+0x1cc>
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013c8 <_ZN7Encoder6updateEv+0x1d0>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <_ZN7Encoder6updateEv+0x1d4>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013c4 <_ZN7Encoder6updateEv+0x1cc>
 8001230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001234:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013c8 <_ZN7Encoder6updateEv+0x1d0>
 8001238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a63      	ldr	r2, [pc, #396]	; (80013d0 <_ZN7Encoder6updateEv+0x1d8>)
 8001244:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f995 	bl	8000578 <__aeabi_f2d>
 800124e:	a356      	add	r3, pc, #344	; (adr r3, 80013a8 <_ZN7Encoder6updateEv+0x1b0>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9e8 	bl	8000628 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4625      	mov	r5, r4
 800125e:	461c      	mov	r4, r3
 8001260:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <_ZN7Encoder6updateEv+0x1dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f987 	bl	8000578 <__aeabi_f2d>
 800126a:	a351      	add	r3, pc, #324	; (adr r3, 80013b0 <_ZN7Encoder6updateEv+0x1b8>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9da 	bl	8000628 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f81e 	bl	80002bc <__adddf3>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fcc6 	bl	8000c18 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f96f 	bl	8000578 <__aeabi_f2d>
 800129a:	a343      	add	r3, pc, #268	; (adr r3, 80013a8 <_ZN7Encoder6updateEv+0x1b0>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f9c2 	bl	8000628 <__aeabi_dmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4625      	mov	r5, r4
 80012aa:	461c      	mov	r4, r3
 80012ac:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <_ZN7Encoder6updateEv+0x1e0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f961 	bl	8000578 <__aeabi_f2d>
 80012b6:	a33e      	add	r3, pc, #248	; (adr r3, 80013b0 <_ZN7Encoder6updateEv+0x1b8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f9b4 	bl	8000628 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7fe fff8 	bl	80002bc <__adddf3>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fca0 	bl	8000c18 <__aeabi_d2f>
 80012d8:	4602      	mov	r2, r0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a3e      	ldr	r2, [pc, #248]	; (80013dc <_ZN7Encoder6updateEv+0x1e4>)
 80012e4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <_ZN7Encoder6updateEv+0x1dc>)
 80012ec:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <_ZN7Encoder6updateEv+0x1e0>)
 80012f4:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	ee17 0a90 	vmov	r0, s15
 800130a:	f7ff f935 	bl	8000578 <__aeabi_f2d>
 800130e:	a32a      	add	r3, pc, #168	; (adr r3, 80013b8 <_ZN7Encoder6updateEv+0x1c0>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f988 	bl	8000628 <__aeabi_dmul>
 8001318:	4603      	mov	r3, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4618      	mov	r0, r3
 800131e:	4621      	mov	r1, r4
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001328:	f7ff faa8 	bl	800087c <__aeabi_ddiv>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f7ff fc70 	bl	8000c18 <__aeabi_d2f>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	ed93 7a05 	vldr	s14, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a02 	vldr	s15, [r3, #8]
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	ed93 7a06 	vldr	s14, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	edd3 7a02 	vldr	s15, [r3, #8]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edc3 7a07 	vstr	s15, [r3, #28]
	ignore_linetrace_distance_ += distance_;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	ed93 7a08 	vldr	s14, [r3, #32]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a02 	vldr	s15, [r3, #8]
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a08 	vstr	s15, [r3, #32]
	monitor_distance = distance_10mm_;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <_ZN7Encoder6updateEv+0x1e8>)
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3fa99999 	.word	0x3fa99999
 80013b0:	66666666 	.word	0x66666666
 80013b4:	3fee6666 	.word	0x3fee6666
 80013b8:	ce73a049 	.word	0xce73a049
 80013bc:	3f77a3f6 	.word	0x3f77a3f6
 80013c0:	40010000 	.word	0x40010000
 80013c4:	47000000 	.word	0x47000000
 80013c8:	3f912547 	.word	0x3f912547
 80013cc:	40010400 	.word	0x40010400
 80013d0:	20000200 	.word	0x20000200
 80013d4:	20000208 	.word	0x20000208
 80013d8:	2000020c 	.word	0x2000020c
 80013dc:	20000204 	.word	0x20000204
 80013e0:	200001fc 	.word	0x200001fc

080013e4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_ZN7Encoder5clearEv+0x3c>)
 80013fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_ZN7Encoder5clearEv+0x40>)
 8001406:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40010000 	.word	0x40010000
 8001424:	40010400 	.word	0x40010400

08001428 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	return distance_;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	ee07 3a90 	vmov	s15, r3
}
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	ee07 3a90 	vmov	s15, r3
}
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	ee07 3a90 	vmov	s15, r3
}
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	619a      	str	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_ZN7Encoder26getIgnoreLinetraceDistanceEv>:

float Encoder::getIgnoreLinetraceDistance()
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	return ignore_linetrace_distance_;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	ee07 3a90 	vmov	s15, r3
}
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZN7Encoder28clearIgnoreLinetraceDistanceEv>:

void Encoder::clearIgnoreLinetraceDistance()
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	ignore_linetrace_distance_ = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f977 	bl	8001878 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800158a:	f000 f98b 	bl	80018a4 <fopen_folder_and_file>

	return ret;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <user_fclose+0x1c>)
 80015a4:	f011 f910 	bl	80127c8 <f_close>

	return ret;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2003d788 	.word	0x2003d788

080015b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af02      	add	r7, sp, #8
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	80fb      	strh	r3, [r7, #6]
 80015c4:	4613      	mov	r3, r2
 80015c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	81fb      	strh	r3, [r7, #14]
 80015d0:	e030      	b.n	8001634 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffca 	bl	8000578 <__aeabi_f2d>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	e9cd 3400 	strd	r3, r4, [sp]
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <sd_write_float+0x94>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4817      	ldr	r0, [pc, #92]	; (8001650 <sd_write_float+0x98>)
 80015f2:	f013 fcdd 	bl	8014fb0 <sniprintf>

		if(state == ADD_WRITE){
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <sd_write_float+0x9c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <sd_write_float+0x9c>)
 8001604:	f011 f954 	bl	80128b0 <f_lseek>
 8001608:	e003      	b.n	8001612 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800160a:	2100      	movs	r1, #0
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <sd_write_float+0x9c>)
 800160e:	f011 f94f 	bl	80128b0 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <sd_write_float+0x98>)
 8001614:	f7fe fdf4 	bl	8000200 <strlen>
 8001618:	4602      	mov	r2, r0
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <sd_write_float+0xa0>)
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <sd_write_float+0x98>)
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <sd_write_float+0x9c>)
 8001620:	f010 febd 	bl	801239e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001624:	f000 f958 	bl	80018d8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162c:	b29b      	uxth	r3, r3
 800162e:	3301      	adds	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	81fb      	strh	r3, [r7, #14]
 8001634:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbc8      	blt.n	80015d2 <sd_write_float+0x1a>
	}
	return ret;
 8001640:	7b7b      	ldrb	r3, [r7, #13]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	080186b8 	.word	0x080186b8
 8001650:	2003d6f8 	.word	0x2003d6f8
 8001654:	2003d788 	.word	0x2003d788
 8001658:	2003d778 	.word	0x2003d778

0800165c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f900 	bl	8001878 <create_path>

	if(state == OVER_WRITE){
 8001678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <sd_write_array_float+0xb0>)
 8001682:	f011 f8cb 	bl	801281c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <sd_write_array_float+0xb4>)
 8001688:	f011 fb36 	bl	8012cf8 <f_unlink>
		f_chdir("..");
 800168c:	4821      	ldr	r0, [pc, #132]	; (8001714 <sd_write_array_float+0xb8>)
 800168e:	f011 f8c5 	bl	801281c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001692:	f000 f907 	bl	80018a4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	82fb      	strh	r3, [r7, #22]
 800169a:	e028      	b.n	80016ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800169c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff65 	bl	8000578 <__aeabi_f2d>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	e9cd 3400 	strd	r3, r4, [sp]
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <sd_write_array_float+0xbc>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <sd_write_array_float+0xc0>)
 80016bc:	f013 fc78 	bl	8014fb0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <sd_write_array_float+0xc4>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4816      	ldr	r0, [pc, #88]	; (8001720 <sd_write_array_float+0xc4>)
 80016c8:	f011 f8f2 	bl	80128b0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80016cc:	4813      	ldr	r0, [pc, #76]	; (800171c <sd_write_array_float+0xc0>)
 80016ce:	f7fe fd97 	bl	8000200 <strlen>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <sd_write_array_float+0xc8>)
 80016d6:	4911      	ldr	r1, [pc, #68]	; (800171c <sd_write_array_float+0xc0>)
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <sd_write_array_float+0xc4>)
 80016da:	f010 fe60 	bl	801239e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80016de:	f000 f8fb 	bl	80018d8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80016e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	82fb      	strh	r3, [r7, #22]
 80016ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbd0      	blt.n	800169c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <sd_write_array_float+0xc4>)
 80016fc:	f011 f864 	bl	80127c8 <f_close>

	return ret;
 8001700:	7d7b      	ldrb	r3, [r7, #21]
}
 8001702:	4618      	mov	r0, r3
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	2003d5f8 	.word	0x2003d5f8
 8001710:	2003c4b8 	.word	0x2003c4b8
 8001714:	080186d4 	.word	0x080186d4
 8001718:	080186b8 	.word	0x080186b8
 800171c:	2003d6f8 	.word	0x2003d6f8
 8001720:	2003d788 	.word	0x2003d788
 8001724:	2003d778 	.word	0x2003d778

08001728 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f898 	bl	8001878 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001748:	f000 f8ac 	bl	80018a4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800174c:	e019      	b.n	8001782 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800174e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4913      	ldr	r1, [pc, #76]	; (80017a8 <sd_read_array_float+0x80>)
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <sd_read_array_float+0x84>)
 800175e:	f013 fc7b 	bl	8015058 <siscanf>
		i++;
 8001762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001766:	b29b      	uxth	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	b29b      	uxth	r3, r3
 800176c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800176e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	429a      	cmp	r2, r3
 8001778:	db03      	blt.n	8001782 <sd_read_array_float+0x5a>
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	3b01      	subs	r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <sd_read_array_float+0x88>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <sd_read_array_float+0x84>)
 8001788:	f011 fc94 	bl	80130b4 <f_gets>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1dd      	bne.n	800174e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001792:	f000 f8a1 	bl	80018d8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <sd_read_array_float+0x88>)
 8001798:	f011 f816 	bl	80127c8 <f_close>

	return ret;
 800179c:	7d7b      	ldrb	r3, [r7, #21]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	080186c4 	.word	0x080186c4
 80017ac:	2003d6f8 	.word	0x2003d6f8
 80017b0:	2003d788 	.word	0x2003d788

080017b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f852 	bl	8001878 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80017d4:	f000 f866 	bl	80018a4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017d8:	e019      	b.n	800180e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80017da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4913      	ldr	r1, [pc, #76]	; (8001834 <sd_read_array_double+0x80>)
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <sd_read_array_double+0x84>)
 80017ea:	f013 fc35 	bl	8015058 <siscanf>
		i++;
 80017ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	db03      	blt.n	800180e <sd_read_array_double+0x5a>
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	3b01      	subs	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <sd_read_array_double+0x88>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	4809      	ldr	r0, [pc, #36]	; (8001838 <sd_read_array_double+0x84>)
 8001814:	f011 fc4e 	bl	80130b4 <f_gets>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1dd      	bne.n	80017da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800181e:	f000 f85b 	bl	80018d8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <sd_read_array_double+0x88>)
 8001824:	f010 ffd0 	bl	80127c8 <f_close>

	return ret;
 8001828:	7d7b      	ldrb	r3, [r7, #21]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	080186d0 	.word	0x080186d0
 8001838:	2003d6f8 	.word	0x2003d6f8
 800183c:	2003d788 	.word	0x2003d788

08001840 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800184a:	2201      	movs	r2, #1
 800184c:	4908      	ldr	r1, [pc, #32]	; (8001870 <sd_mount+0x30>)
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <sd_mount+0x34>)
 8001850:	f010 fa32 	bl	8011cb8 <f_mount>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <sd_mount+0x20>
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <sd_mount+0x24>
	else ret = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	080186e0 	.word	0x080186e0
 8001874:	2003c5b8 	.word	0x2003c5b8

08001878 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <create_path+0x24>)
 8001886:	f013 fc13 	bl	80150b0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <create_path+0x28>)
 800188e:	f013 fc0f 	bl	80150b0 <strcpy>

}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2003d5f8 	.word	0x2003d5f8
 80018a0:	2003c4b8 	.word	0x2003c4b8

080018a4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018a8:	4807      	ldr	r0, [pc, #28]	; (80018c8 <fopen_folder_and_file+0x24>)
 80018aa:	f011 fae7 	bl	8012e7c <f_mkdir>

	f_chdir(dirpath);
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <fopen_folder_and_file+0x24>)
 80018b0:	f010 ffb4 	bl	801281c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80018b4:	2213      	movs	r2, #19
 80018b6:	4905      	ldr	r1, [pc, #20]	; (80018cc <fopen_folder_and_file+0x28>)
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <fopen_folder_and_file+0x2c>)
 80018ba:	f010 fa43 	bl	8011d44 <f_open>

	f_chdir("..");
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <fopen_folder_and_file+0x30>)
 80018c0:	f010 ffac 	bl	801281c <f_chdir>


}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2003d5f8 	.word	0x2003d5f8
 80018cc:	2003c4b8 	.word	0x2003c4b8
 80018d0:	2003d788 	.word	0x2003d788
 80018d4:	080186d4 	.word	0x080186d4

080018d8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e007      	b.n	80018f4 <bufclear+0x1c>
		buffer[i] = '\0';
 80018e4:	4a08      	ldr	r2, [pc, #32]	; (8001908 <bufclear+0x30>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b7f      	cmp	r3, #127	; 0x7f
 80018f8:	ddf4      	ble.n	80018e4 <bufclear+0xc>
	}
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2003d6f8 	.word	0x2003d6f8

0800190c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800191c:	b2db      	uxtb	r3, r3
 800191e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <read_byte+0x54>)
 8001928:	f008 fa0a 	bl	8009d40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800192c:	f107 010f 	add.w	r1, r7, #15
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	2201      	movs	r2, #1
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <read_byte+0x58>)
 8001936:	f00b fbb3 	bl	800d0a0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800193a:	f107 010e 	add.w	r1, r7, #14
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	2201      	movs	r2, #1
 8001942:	4808      	ldr	r0, [pc, #32]	; (8001964 <read_byte+0x58>)
 8001944:	f00b fce0 	bl	800d308 <HAL_SPI_Receive>
	CS_SET;
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <read_byte+0x54>)
 8001950:	f008 f9f6 	bl	8009d40 <HAL_GPIO_WritePin>

	return val;
 8001954:	7bbb      	ldrb	r3, [r7, #14]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40020400 	.word	0x40020400
 8001964:	2003e824 	.word	0x2003e824

08001968 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	4613      	mov	r3, r2
 8001976:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197e:	b2db      	uxtb	r3, r3
 8001980:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <write_byte+0x54>)
 800198a:	f008 f9d9 	bl	8009d40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800198e:	f107 010f 	add.w	r1, r7, #15
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	480a      	ldr	r0, [pc, #40]	; (80019c0 <write_byte+0x58>)
 8001998:	f00b fb82 	bl	800d0a0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 800199c:	1db9      	adds	r1, r7, #6
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2201      	movs	r2, #1
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <write_byte+0x58>)
 80019a4:	f00b fb7c 	bl	800d0a0 <HAL_SPI_Transmit>
	CS_SET;
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <write_byte+0x54>)
 80019b0:	f008 f9c6 	bl	8009d40 <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40020400 	.word	0x40020400
 80019c0:	2003e824 	.word	0x2003e824

080019c4 <IMU_init>:

uint16_t IMU_init() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff ff9c 	bl	800190c <read_byte>
 80019d4:	4603      	mov	r3, r0
 80019d6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019d8:	797b      	ldrb	r3, [r7, #5]
 80019da:	2be0      	cmp	r3, #224	; 0xe0
 80019dc:	d119      	bne.n	8001a12 <IMU_init+0x4e>
		ret = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019e2:	2101      	movs	r1, #1
 80019e4:	2006      	movs	r0, #6
 80019e6:	f7ff ffbf 	bl	8001968 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019ea:	2110      	movs	r1, #16
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff ffbb 	bl	8001968 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019f2:	2120      	movs	r1, #32
 80019f4:	207f      	movs	r0, #127	; 0x7f
 80019f6:	f7ff ffb7 	bl	8001968 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019fa:	2106      	movs	r1, #6
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff ffb3 	bl	8001968 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a02:	2106      	movs	r1, #6
 8001a04:	2014      	movs	r0, #20
 8001a06:	f7ff ffaf 	bl	8001968 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	207f      	movs	r0, #127	; 0x7f
 8001a0e:	f7ff ffab 	bl	8001968 <write_byte>
	}
	return ret;
 8001a12:	88fb      	ldrh	r3, [r7, #6]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <read_gyro_data>:

void read_gyro_data() {
 8001a1c:	b598      	push	{r3, r4, r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a20:	2033      	movs	r0, #51	; 0x33
 8001a22:	f7ff ff73 	bl	800190c <read_byte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21c      	sxth	r4, r3
 8001a2c:	2034      	movs	r0, #52	; 0x34
 8001a2e:	f7ff ff6d 	bl	800190c <read_byte>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	4323      	orrs	r3, r4
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <read_gyro_data+0x64>)
 8001a3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a3e:	2035      	movs	r0, #53	; 0x35
 8001a40:	f7ff ff64 	bl	800190c <read_byte>
 8001a44:	4603      	mov	r3, r0
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21c      	sxth	r4, r3
 8001a4a:	2036      	movs	r0, #54	; 0x36
 8001a4c:	f7ff ff5e 	bl	800190c <read_byte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4323      	orrs	r3, r4
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <read_gyro_data+0x68>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a5c:	2037      	movs	r0, #55	; 0x37
 8001a5e:	f7ff ff55 	bl	800190c <read_byte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21c      	sxth	r4, r3
 8001a68:	2038      	movs	r0, #56	; 0x38
 8001a6a:	f7ff ff4f 	bl	800190c <read_byte>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4323      	orrs	r3, r4
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <read_gyro_data+0x6c>)
 8001a78:	801a      	strh	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	bd98      	pop	{r3, r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2003e7c0 	.word	0x2003e7c0
 8001a84:	2003e7be 	.word	0x2003e7be
 8001a88:	2003e7b8 	.word	0x2003e7b8

08001a8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	805a      	strh	r2, [r3, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	809a      	strh	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	80da      	strh	r2, [r3, #6]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	811a      	strh	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	815a      	strh	r2, [r3, #10]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
{

}
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ad8:	f7ff ff74 	bl	80019c4 <IMU_init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ae0:	f7ff fade 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff faea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <_ZN3IMU4initEv+0x44>)
 8001aee:	f7ff fb11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001af2:	2101      	movs	r1, #1
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fae3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <_ZN3IMU4initEv+0x48>)
 8001b00:	f7ff fb08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b08:	f006 fe84 	bl	8008814 <HAL_Delay>

}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	080186e4 	.word	0x080186e4
 8001b18:	080186f0 	.word	0x080186f0
 8001b1c:	00000000 	.word	0x00000000

08001b20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b28:	f7ff ff78 	bl	8001a1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcff 	bl	8000554 <__aeabi_i2d>
 8001b56:	a316      	add	r3, pc, #88	; (adr r3, 8001bb0 <_ZN3IMU12updateValuesEv+0x90>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	4625      	mov	r5, r4
 8001b66:	461c      	mov	r4, r3
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <_ZN3IMU12updateValuesEv+0xac>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcf0 	bl	8000554 <__aeabi_i2d>
 8001b74:	a310      	add	r3, pc, #64	; (adr r3, 8001bb8 <_ZN3IMU12updateValuesEv+0x98>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fd55 	bl	8000628 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fb99 	bl	80002bc <__adddf3>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4621      	mov	r1, r4
 8001b92:	f7fe fff9 	bl	8000b88 <__aeabi_d2iz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <_ZN3IMU12updateValuesEv+0xac>)
 8001ba6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	eb851eb8 	.word	0xeb851eb8
 8001bb4:	3f9eb851 	.word	0x3f9eb851
 8001bb8:	70a3d70a 	.word	0x70a3d70a
 8001bbc:	3fef0a3d 	.word	0x3fef0a3d
 8001bc0:	2003e7c0 	.word	0x2003e7c0
 8001bc4:	2003e7be 	.word	0x2003e7be
 8001bc8:	2003e7b8 	.word	0x2003e7b8
 8001bcc:	20000210 	.word	0x20000210

08001bd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7fe fcbf 	bl	8000578 <__aeabi_f2d>
 8001bfa:	a316      	add	r3, pc, #88	; (adr r3, 8001c54 <_ZN3IMU8getOmegaEv+0x84>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fe3c 	bl	800087c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c0e:	a313      	add	r3, pc, #76	; (adr r3, 8001c5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fd06 	bl	8000628 <__aeabi_dmul>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4618      	mov	r0, r3
 8001c22:	4621      	mov	r1, r4
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <_ZN3IMU8getOmegaEv+0x80>)
 8001c2a:	f7fe fe27 	bl	800087c <__aeabi_ddiv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	4618      	mov	r0, r3
 8001c34:	4621      	mov	r1, r4
 8001c36:	f7fe ffef 	bl	8000c18 <__aeabi_d2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	ee07 3a90 	vmov	s15, r3
}
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	40668000 	.word	0x40668000
 8001c54:	66666666 	.word	0x66666666
 8001c58:	40306666 	.word	0x40306666
 8001c5c:	54411744 	.word	0x54411744
 8001c60:	400921fb 	.word	0x400921fb

08001c64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c6c:	466b      	mov	r3, sp
 8001c6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c74:	f006 fdce 	bl	8008814 <HAL_Delay>
	lcd_clear();
 8001c78:	f7ff fa12 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff fa1e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c84:	4840      	ldr	r0, [pc, #256]	; (8001d88 <_ZN3IMU11calibrationEv+0x124>)
 8001c86:	f7ff fa45 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fa17 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c92:	483e      	ldr	r0, [pc, #248]	; (8001d8c <_ZN3IMU11calibrationEv+0x128>)
 8001c94:	f7ff fa3e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca2:	1e5d      	subs	r5, r3, #1
 8001ca4:	61bd      	str	r5, [r7, #24]
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f04f 0400 	mov.w	r4, #0
 8001cb8:	0154      	lsls	r4, r2, #5
 8001cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cbe:	014b      	lsls	r3, r1, #5
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f04f 0400 	mov.w	r4, #0
 8001cd2:	0154      	lsls	r4, r2, #5
 8001cd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd8:	014b      	lsls	r3, r1, #5
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	08db      	lsrs	r3, r3, #3
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	ebad 0d03 	sub.w	sp, sp, r3
 8001cec:	466b      	mov	r3, sp
 8001cee:	3303      	adds	r3, #3
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	da13      	bge.n	8001d2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d0a:	8bfb      	ldrh	r3, [r7, #30]
 8001d0c:	ee07 2a90 	vmov	s15, r2
 8001d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f006 fd78 	bl	8008814 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001d24:	8bfb      	ldrh	r3, [r7, #30]
 8001d26:	3301      	adds	r3, #1
 8001d28:	83fb      	strh	r3, [r7, #30]
 8001d2a:	e7e6      	b.n	8001cfa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	462b      	mov	r3, r5
 8001d34:	3301      	adds	r3, #1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d00e      	beq.n	8001d62 <_ZN3IMU11calibrationEv+0xfe>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e7ec      	b.n	8001d3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d7c:	46b5      	mov	sp, r6
}
 8001d7e:	bf00      	nop
 8001d80:	372c      	adds	r7, #44	; 0x2c
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	080186f4 	.word	0x080186f4
 8001d8c:	08018700 	.word	0x08018700

08001d90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	b299      	uxth	r1, r3
 8001da4:	1dfa      	adds	r2, r7, #7
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2301      	movs	r3, #1
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <INA260_read+0x50>)
 8001dae:	f008 f919 	bl	8009fe4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	b299      	uxth	r1, r3
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	2364      	movs	r3, #100	; 0x64
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <INA260_read+0x50>)
 8001dc2:	f008 fa0d 	bl	800a1e0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001dc6:	7b3b      	ldrb	r3, [r7, #12]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	7b7b      	ldrb	r3, [r7, #13]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2003e9d8 	.word	0x2003e9d8

08001de4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4604      	mov	r4, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	4603      	mov	r3, r0
 8001df8:	71bb      	strb	r3, [r7, #6]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	717b      	strb	r3, [r7, #5]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	733b      	strb	r3, [r7, #12]
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	737b      	strb	r3, [r7, #13]
 8001e0a:	797b      	ldrb	r3, [r7, #5]
 8001e0c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001e0e:	793b      	ldrb	r3, [r7, #4]
 8001e10:	b299      	uxth	r1, r3
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	2364      	movs	r3, #100	; 0x64
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <INA260_write+0x48>)
 8001e1e:	f008 f8e1 	bl	8009fe4 <HAL_I2C_Master_Transmit>
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2003e9d8 	.word	0x2003e9d8

08001e30 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	71bb      	strb	r3, [r7, #6]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e42:	797b      	ldrb	r3, [r7, #5]
 8001e44:	79ba      	ldrb	r2, [r7, #6]
 8001e46:	79f9      	ldrb	r1, [r7, #7]
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ffcb 	bl	8001de4 <INA260_write>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	461a      	mov	r2, r3
 8001e64:	21df      	movs	r1, #223	; 0xdf
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff ffe2 	bl	8001e30 <setConfig>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
{

}
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9c:	482a      	ldr	r0, [pc, #168]	; (8001f48 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e9e:	f007 ff37 	bl	8009d10 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <_ZN8JoyStick8getValueEv+0x2e>
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4823      	ldr	r0, [pc, #140]	; (8001f4c <_ZN8JoyStick8getValueEv+0xc0>)
 8001ebe:	f007 ff27 	bl	8009d10 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <_ZN8JoyStick8getValueEv+0x4e>
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ede:	481a      	ldr	r0, [pc, #104]	; (8001f48 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ee0:	f007 ff16 	bl	8009d10 <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <_ZN8JoyStick8getValueEv+0x70>
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001efc:	2104      	movs	r1, #4
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <_ZN8JoyStick8getValueEv+0xc4>)
 8001f00:	f007 ff06 	bl	8009d10 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <_ZN8JoyStick8getValueEv+0x90>
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <_ZN8JoyStick8getValueEv+0xbc>)
 8001f20:	f007 fef6 	bl	8009d10 <HAL_GPIO_ReadPin>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <_ZN8JoyStick8getValueEv+0xb0>
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40020400 	.word	0x40020400

08001f54 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b52      	cmp	r3, #82	; 0x52
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4856      	ldr	r0, [pc, #344]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f007 fee7 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	4853      	ldr	r0, [pc, #332]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 fee1 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	4850      	ldr	r0, [pc, #320]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 fedb 	bl	8009d40 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f8a:	e098      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b47      	cmp	r3, #71	; 0x47
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	484b      	ldr	r0, [pc, #300]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f007 fed1 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4848      	ldr	r0, [pc, #288]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 fecb 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	4845      	ldr	r0, [pc, #276]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 fec5 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8001fb6:	e082      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b42      	cmp	r3, #66	; 0x42
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	4840      	ldr	r0, [pc, #256]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f007 febb 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	483d      	ldr	r0, [pc, #244]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 feb5 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	483a      	ldr	r0, [pc, #232]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 feaf 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8001fe2:	e06c      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b43      	cmp	r3, #67	; 0x43
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	4835      	ldr	r0, [pc, #212]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f007 fea5 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	4832      	ldr	r0, [pc, #200]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 fe9f 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	482f      	ldr	r0, [pc, #188]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 fe99 	bl	8009d40 <HAL_GPIO_WritePin>
}
 800200e:	e056      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b4d      	cmp	r3, #77	; 0x4d
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	482a      	ldr	r0, [pc, #168]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f007 fe8f 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4827      	ldr	r0, [pc, #156]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 fe89 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	4824      	ldr	r0, [pc, #144]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 fe83 	bl	8009d40 <HAL_GPIO_WritePin>
}
 800203a:	e040      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b59      	cmp	r3, #89	; 0x59
 8002040:	d112      	bne.n	8002068 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	481f      	ldr	r0, [pc, #124]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f007 fe79 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 fe73 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4819      	ldr	r0, [pc, #100]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 fe6d 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8002066:	e02a      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b57      	cmp	r3, #87	; 0x57
 800206c:	d112      	bne.n	8002094 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	4814      	ldr	r0, [pc, #80]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8002076:	f007 fe63 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	4811      	ldr	r0, [pc, #68]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 8002082:	f007 fe5d 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208c:	480e      	ldr	r0, [pc, #56]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 800208e:	f007 fe57 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8002092:	e014      	b.n	80020be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b7e      	cmp	r3, #126	; 0x7e
 8002098:	d111      	bne.n	80020be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 80020a2:	f007 fe4d 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ac:	4806      	ldr	r0, [pc, #24]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 80020ae:	f007 fe47 	bl	8009d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <_ZN3LED9fullColorEc+0x174>)
 80020ba:	f007 fe41 	bl	8009d40 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020000 	.word	0x40020000

080020cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
 80020d8:	4613      	mov	r3, r2
 80020da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <_ZN3LED2LREaa+0x6c>)
 80020ec:	f007 fe28 	bl	8009d40 <HAL_GPIO_WritePin>
 80020f0:	e009      	b.n	8002106 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <_ZN3LED2LREaa+0x6c>)
 8002102:	f007 fe1d 	bl	8009d40 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002106:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <_ZN3LED2LREaa+0x6c>)
 8002116:	f007 fe13 	bl	8009d40 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800211a:	e009      	b.n	8002130 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800211c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <_ZN3LED2LREaa+0x6c>)
 800212c:	f007 fe08 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40020000 	.word	0x40020000

0800213c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800213c:	b580      	push	{r7, lr}
 800213e:	b092      	sub	sp, #72	; 0x48
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fe92 	bl	8001e74 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	331c      	adds	r3, #28
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
 800215e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	429a      	cmp	r2, r3
 8002164:	d008      	beq.n	8002178 <_ZN10LineSensorC1Ev+0x3c>
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002172:	3302      	adds	r3, #2
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
 8002176:	e7f2      	b.n	800215e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	3338      	adds	r3, #56	; 0x38
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	429a      	cmp	r2, r3
 8002190:	d009      	beq.n	80021a6 <_ZN10LineSensorC1Ev+0x6a>
 8002192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002194:	623b      	str	r3, [r7, #32]
		s = 0;
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800219e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a0:	3304      	adds	r3, #4
 80021a2:	643b      	str	r3, [r7, #64]	; 0x40
 80021a4:	e7f1      	b.n	800218a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3338      	adds	r3, #56	; 0x38
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d009      	beq.n	80021d4 <_ZN10LineSensorC1Ev+0x98>
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80021cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ce:	3304      	adds	r3, #4
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d2:	e7f1      	b.n	80021b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3338      	adds	r3, #56	; 0x38
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d009      	beq.n	8002202 <_ZN10LineSensorC1Ev+0xc6>
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	3304      	adds	r3, #4
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002200:	e7f1      	b.n	80021e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	3748      	adds	r7, #72	; 0x48
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	220e      	movs	r2, #14
 8002218:	4619      	mov	r1, r3
 800221a:	4803      	ldr	r0, [pc, #12]	; (8002228 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800221c:	f006 fb60 	bl	80088e0 <HAL_ADC_Start_DMA>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2003e8fc 	.word	0x2003e8fc

0800222c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b0d      	cmp	r3, #13
 800223c:	dc2f      	bgt.n	800229e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3392      	adds	r3, #146	; 0x92
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	33a0      	adds	r3, #160	; 0xa0
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	440b      	add	r3, r1
 800228a:	3306      	adds	r3, #6
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e7cc      	b.n	8002238 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d902      	bls.n	80022b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]


}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	2000021c 	.word	0x2000021c

080022c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b08e      	sub	sp, #56	; 0x38
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022da:	2b0d      	cmp	r3, #13
 80022dc:	f200 80b8 	bhi.w	8002450 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	d81c      	bhi.n	8002328 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4423      	add	r3, r4
 8002306:	3306      	adds	r3, #6
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4403      	add	r3, r0
 800230c:	3304      	adds	r3, #4
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	008b      	lsls	r3, r1, #2
 8002312:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002316:	440b      	add	r3, r1
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800231c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002320:	3301      	adds	r3, #1
 8002322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002326:	e7de      	b.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800232e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002332:	2b09      	cmp	r3, #9
 8002334:	d84d      	bhi.n	80023d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002336:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800233a:	3301      	adds	r3, #1
 800233c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002340:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002344:	2b09      	cmp	r3, #9
 8002346:	d83e      	bhi.n	80023c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002352:	4413      	add	r3, r2
 8002354:	3b30      	subs	r3, #48	; 0x30
 8002356:	ed93 7a00 	vldr	s14, [r3]
 800235a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002364:	4413      	add	r3, r2
 8002366:	3b30      	subs	r3, #48	; 0x30
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d521      	bpl.n	80023ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002376:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002380:	4413      	add	r3, r2
 8002382:	3b30      	subs	r3, #48	; 0x30
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002388:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800238c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002396:	440a      	add	r2, r1
 8002398:	3a30      	subs	r2, #48	; 0x30
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023a2:	440b      	add	r3, r1
 80023a4:	3b30      	subs	r3, #48	; 0x30
 80023a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80023a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b2:	4413      	add	r3, r2
 80023b4:	3b30      	subs	r3, #48	; 0x30
 80023b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80023ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023be:	3301      	adds	r3, #1
 80023c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80023c4:	e7bc      	b.n	8002340 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80023c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023ca:	3301      	adds	r3, #1
 80023cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023d0:	e7ad      	b.n	800232e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f8cf 	bl	8000578 <__aeabi_f2d>
 80023da:	a32a      	add	r3, pc, #168	; (adr r3, 8002484 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fe f922 	bl	8000628 <__aeabi_dmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	4625      	mov	r5, r4
 80023ea:	461c      	mov	r4, r3
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8bd 	bl	8000578 <__aeabi_f2d>
 80023fe:	a31c      	add	r3, pc, #112	; (adr r3, 8002470 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f910 	bl	8000628 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff54 	bl	80002bc <__adddf3>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fbf8 	bl	8000c18 <__aeabi_d2f>
 8002428:	4601      	mov	r1, r0
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002448:	3301      	adds	r3, #1
 800244a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800244e:	e742      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002458:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	3738      	adds	r7, #56	; 0x38
 8002468:	46bd      	mov	sp, r7
 800246a:	bdb0      	pop	{r4, r5, r7, pc}
 800246c:	f3af 8000 	nop.w
 8002470:	66666666 	.word	0x66666666
 8002474:	3fee6666 	.word	0x3fee6666
 8002478:	20000220 	.word	0x20000220
 800247c:	20000214 	.word	0x20000214
 8002480:	20000218 	.word	0x20000218
 8002484:	9999999a 	.word	0x9999999a
 8002488:	3fa99999 	.word	0x3fa99999

0800248c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0a0      	sub	sp, #128	; 0x80
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002494:	2064      	movs	r0, #100	; 0x64
 8002496:	f006 f9bd 	bl	8008814 <HAL_Delay>

	lcd_clear();
 800249a:	f7fe fe01 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fe0d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80024a6:	4886      	ldr	r0, [pc, #536]	; (80026c0 <_ZN10LineSensor11calibrationEv+0x234>)
 80024a8:	f7fe fe34 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80024ac:	2101      	movs	r1, #1
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7fe fe06 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80024b4:	4883      	ldr	r0, [pc, #524]	; (80026c4 <_ZN10LineSensor11calibrationEv+0x238>)
 80024b6:	f7fe fe2d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024c4:	2b0d      	cmp	r3, #13
 80024c6:	d823      	bhi.n	8002510 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80024c8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80024cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	32b0      	adds	r2, #176	; 0xb0
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	440a      	add	r2, r1
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024e0:	440b      	add	r3, r1
 80024e2:	3b40      	subs	r3, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80024e6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80024ea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	32b0      	adds	r2, #176	; 0xb0
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	440a      	add	r2, r1
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024fe:	440b      	add	r3, r1
 8002500:	3b78      	subs	r3, #120	; 0x78
 8002502:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002504:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002508:	3301      	adds	r3, #1
 800250a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800250e:	e7d7      	b.n	80024c0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fcb8 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 800251c:	4603      	mov	r3, r0
 800251e:	2b02      	cmp	r3, #2
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d079      	beq.n	8002620 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800252c:	2300      	movs	r3, #0
 800252e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002532:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002536:	2b0d      	cmp	r3, #13
 8002538:	d850      	bhi.n	80025dc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800253a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002544:	4413      	add	r3, r2
 8002546:	3b40      	subs	r3, #64	; 0x40
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	33b0      	adds	r3, #176	; 0xb0
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d50f      	bpl.n	8002586 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002566:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800256a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	32b0      	adds	r2, #176	; 0xb0
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	440a      	add	r2, r1
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800257e:	440b      	add	r3, r1
 8002580:	3b40      	subs	r3, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e024      	b.n	80025d0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002586:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002590:	4413      	add	r3, r2
 8002592:	3b78      	subs	r3, #120	; 0x78
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	33b0      	adds	r3, #176	; 0xb0
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	dd0e      	ble.n	80025d0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80025b2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80025b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	32b0      	adds	r2, #176	; 0xb0
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	440a      	add	r2, r1
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ca:	440b      	add	r3, r1
 80025cc:	3b78      	subs	r3, #120	; 0x78
 80025ce:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80025da:	e7aa      	b.n	8002532 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fae2 	bl	8004bac <_ZN12RotarySwitch8getValueEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025fe:	2201      	movs	r2, #1
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fd61 	bl	80020cc <_ZN3LED2LREaa>
 800260a:	e781      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd57 	bl	80020cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800261e:	e777      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002626:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800262a:	2b0d      	cmp	r3, #13
 800262c:	d826      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800262e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002638:	4413      	add	r3, r2
 800263a:	3b40      	subs	r3, #64	; 0x40
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800264a:	4413      	add	r3, r2
 800264c:	3b78      	subs	r3, #120	; 0x78
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002656:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800265a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80026c8 <_ZN10LineSensor11calibrationEv+0x23c>
 800265e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	3392      	adds	r3, #146	; 0x92
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800267a:	e7d4      	b.n	8002626 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800267c:	2300      	movs	r3, #0
 800267e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002682:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002686:	2b0d      	cmp	r3, #13
 8002688:	d815      	bhi.n	80026b6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800268a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800268e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002698:	440a      	add	r2, r1
 800269a:	3a78      	subs	r2, #120	; 0x78
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	33a0      	adds	r3, #160	; 0xa0
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3304      	adds	r3, #4
 80026a8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026ae:	3301      	adds	r3, #1
 80026b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80026b4:	e7e5      	b.n	8002682 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80026b6:	bf00      	nop
 80026b8:	3780      	adds	r7, #128	; 0x80
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	0801870c 	.word	0x0801870c
 80026c4:	08018718 	.word	0x08018718
 80026c8:	447a0000 	.word	0x447a0000

080026cc <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d012      	beq.n	8002718 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800276c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	db02      	blt.n	8002710 <_ZN10LineSensor13emergencyStopEv+0x44>
 800270a:	8bfb      	ldrh	r3, [r7, #30]
 800270c:	3301      	adds	r3, #1
 800270e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3304      	adds	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e7e8      	b.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002718:	8bfb      	ldrh	r3, [r7, #30]
 800271a:	2b0d      	cmp	r3, #13
 800271c:	d906      	bls.n	800272c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e002      	b.n	8002732 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	2b31      	cmp	r3, #49	; 0x31
 8002738:	d903      	bls.n	8002742 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e002      	b.n	8002748 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002750:	4293      	cmp	r3, r2
 8002752:	d903      	bls.n	800275c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002756:	f242 7210 	movw	r2, #10000	; 0x2710
 800275a:	801a      	strh	r2, [r3, #0]

	return flag;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800275e:	781b      	ldrb	r3, [r3, #0]

}
 8002760:	4618      	mov	r0, r3
 8002762:	3724      	adds	r7, #36	; 0x24
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	442f0000 	.word	0x442f0000
 8002770:	20000258 	.word	0x20000258
 8002774:	2000025a 	.word	0x2000025a

08002778 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002782:	edd7 7a01 	vldr	s15, [r7, #4]
 8002786:	eef0 7ae7 	vabs.f32	s15, s15
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), ignore_linetrace_flag_(false)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	679a      	str	r2, [r3, #120]	; 0x78
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002816:	3348      	adds	r3, #72	; 0x48
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002824:	330c      	adds	r3, #12
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002830:	330e      	adds	r3, #14
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800283c:	3310      	adds	r3, #16
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002848:	3344      	adds	r3, #68	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002854:	3346      	adds	r3, #70	; 0x46
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800286c:	3349      	adds	r3, #73	; 0x49
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002878:	334a      	adds	r3, #74	; 0x4a
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002884:	334b      	adds	r3, #75	; 0x4b
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
{
	motor_ = motor;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a3a      	ldr	r2, [r7, #32]
 80028a0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ac:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b8:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028ba:	2300      	movs	r3, #0
 80028bc:	82fb      	strh	r3, [r7, #22]
 80028be:	8afb      	ldrh	r3, [r7, #22]
 80028c0:	f241 726f 	movw	r2, #5999	; 0x176f
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x14e>
		velocity_table_[i] = 0;
 80028c8:	8afb      	ldrh	r3, [r7, #22]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028d0:	3312      	adds	r3, #18
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028de:	8afb      	ldrh	r3, [r7, #22]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82fb      	strh	r3, [r7, #22]
 80028e4:	e7eb      	b.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x126>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	82bb      	strh	r3, [r7, #20]
 80028ea:	8abb      	ldrh	r3, [r7, #20]
 80028ec:	2b63      	cmp	r3, #99	; 0x63
 80028ee:	d80e      	bhi.n	800290e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x176>
		crossline_distance_[i] = 0;
 80028f0:	8abb      	ldrh	r3, [r7, #20]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028f8:	3304      	adds	r3, #4
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002906:	8abb      	ldrh	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	82bb      	strh	r3, [r7, #20]
 800290c:	e7ed      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x152>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800290e:	2300      	movs	r3, #0
 8002910:	827b      	strh	r3, [r7, #18]
 8002912:	8a7b      	ldrh	r3, [r7, #18]
 8002914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002918:	d20e      	bcs.n	8002938 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a0>
		sideline_distance_[i] = 0;
 800291a:	8a7b      	ldrh	r3, [r7, #18]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002922:	3328      	adds	r3, #40	; 0x28
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002930:	8a7b      	ldrh	r3, [r7, #18]
 8002932:	3301      	adds	r3, #1
 8002934:	827b      	strh	r3, [r7, #18]
 8002936:	e7ec      	b.n	8002912 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17a>
	}
}
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800296c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80029b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80029bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029f4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029fc:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fdb9 	bl	8000578 <__aeabi_f2d>
 8002a06:	a318      	add	r3, pc, #96	; (adr r3, 8002a68 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fe0c 	bl	8000628 <__aeabi_dmul>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4625      	mov	r5, r4
 8002a16:	461c      	mov	r4, r3
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fdab 	bl	8000578 <__aeabi_f2d>
 8002a22:	a313      	add	r3, pc, #76	; (adr r3, 8002a70 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fdfe 	bl	8000628 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fc42 	bl	80002bc <__adddf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4621      	mov	r1, r4
 8002a40:	f7fe f8ea 	bl	8000c18 <__aeabi_d2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a4c:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a52:	6013      	str	r3, [r2, #0]

	return diff;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	ee07 3a90 	vmov	s15, r3

}
 8002a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	f3af 8000 	nop.w
 8002a68:	47ae147b 	.word	0x47ae147b
 8002a6c:	3fb47ae1 	.word	0x3fb47ae1
 8002a70:	d70a3d71 	.word	0xd70a3d71
 8002a74:	3fed70a3 	.word	0x3fed70a3
 8002a78:	2000025c 	.word	0x2000025c
 8002a7c:	20000280 	.word	0x20000280
 8002a80:	20000260 	.word	0x20000260
 8002a84:	00000000 	.word	0x00000000

08002a88 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff59 	bl	8002948 <_ZN9LineTrace9calcErrorEv>
 8002a96:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002aba:	ed97 7a05 	vldr	s14, [r7, #20]
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ad6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd49 	bl	8000578 <__aeabi_f2d>
 8002ae6:	a32a      	add	r3, pc, #168	; (adr r3, 8002b90 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fec6 	bl	800087c <__aeabi_ddiv>
 8002af0:	4603      	mov	r3, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	4618      	mov	r0, r3
 8002af6:	4621      	mov	r1, r4
 8002af8:	f7fe f88e 	bl	8000c18 <__aeabi_d2f>
 8002afc:	4603      	mov	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd37 	bl	8000578 <__aeabi_f2d>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b14:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	ee17 0a90 	vmov	r0, s15
 8002b20:	f7fd fd2a 	bl	8000578 <__aeabi_f2d>
 8002b24:	a31a      	add	r3, pc, #104	; (adr r3, 8002b90 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fd7d 	bl	8000628 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd fbc1 	bl	80002bc <__adddf3>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4621      	mov	r1, r4
 8002b42:	f7fe f869 	bl	8000c18 <__aeabi_d2f>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b4a:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b70:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f002 fd29 	bl	80055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6013      	str	r3, [r2, #0]

}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8c:	f3af 8000 	nop.w
 8002b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b94:	3f50624d 	.word	0x3f50624d
 8002b98:	20000288 	.word	0x20000288
 8002b9c:	20000284 	.word	0x20000284

08002ba0 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fc8b 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 feba 	bl	8004930 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fbe7 	bl	8004394 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fc4c 	bl	8004480 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 3;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c20:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c28:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11]) / 3;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c54:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c58:	4a3d      	ldr	r2, [pc, #244]	; (8002d50 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c64:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03e      	beq.n	8002cf0 <_ZN9LineTrace11isCrossLineEv+0xf8>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c76:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002d5c <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d50f      	bpl.n	8002ca4 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c88:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d5c <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d506      	bpl.n	8002ca4 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	e002      	b.n	8002caa <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d947      	bls.n	8002d42 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = true;
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002cca:	334a      	adds	r3, #74	; 0x4a
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f001 f839 	bl	8003d58 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002ce6:	e02c      	b.n	8002d42 <_ZN9LineTrace11isCrossLineEv+0x14a>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 f8a5 	bl	8003e38 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
 8002cee:	e028      	b.n	8002d42 <_ZN9LineTrace11isCrossLineEv+0x14a>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d68 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d00:	dd0f      	ble.n	8002d22 <_ZN9LineTrace11isCrossLineEv+0x12a>
 8002d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d06:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d68 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	dd06      	ble.n	8002d22 <_ZN9LineTrace11isCrossLineEv+0x12a>
			cnt++;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e002      	b.n	8002d28 <_ZN9LineTrace11isCrossLineEv+0x130>
		}
		else{
			cnt = 0;
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d908      	bls.n	8002d42 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = false;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000268 	.word	0x20000268
 8002d54:	2000026c 	.word	0x2000026c
 8002d58:	2000028f 	.word	0x2000028f
 8002d5c:	44160000 	.word	0x44160000
 8002d60:	2000028c 	.word	0x2000028c
 8002d64:	2000028e 	.word	0x2000028e
 8002d68:	43fa0000 	.word	0x43fa0000

08002d6c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d7e:	3310      	adds	r3, #16
 8002d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d11b      	bne.n	8002dc0 <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.3;
 8002d88:	edd7 7a00 	vldr	s15, [r7]
 8002d8c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e28 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d502      	bpl.n	8002da0 <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e038      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 2000) velocity = 1.6;
 8002da0:	edd7 7a00 	vldr	s15, [r7]
 8002da4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002e30 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	d502      	bpl.n	8002db8 <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <_ZN9LineTrace15radius2VelocityEf+0xc8>)
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e02c      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity_;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e028      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dc6:	3310      	adds	r3, #16
 8002dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d11e      	bne.n	8002e0e <_ZN9LineTrace15radius2VelocityEf+0xa2>
		if(radius < 130) velocity = 1.5;
 8002dd0:	edd7 7a00 	vldr	s15, [r7]
 8002dd4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e28 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	d503      	bpl.n	8002dea <_ZN9LineTrace15radius2VelocityEf+0x7e>
 8002de2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e013      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 500) velocity = 1.5;
 8002dea:	edd7 7a00 	vldr	s15, [r7]
 8002dee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002e38 <_ZN9LineTrace15radius2VelocityEf+0xcc>
 8002df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	d503      	bpl.n	8002e04 <_ZN9LineTrace15radius2VelocityEf+0x98>
 8002dfc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e006      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity2_;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else velocity = 1.3;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002e10:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	ee07 3a90 	vmov	s15, r3
}
 8002e18:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	43020000 	.word	0x43020000
 8002e2c:	3fa66666 	.word	0x3fa66666
 8002e30:	44fa0000 	.word	0x44fa0000
 8002e34:	3fcccccd 	.word	0x3fcccccd
 8002e38:	43fa0000 	.word	0x43fa0000

08002e3c <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b08b      	sub	sp, #44	; 0x2c
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f9fe 	bl	800424a <_ZN6Logger23getDistanceArrayPointerEv>
 8002e4e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fa04 	bl	8004262 <_ZN6Logger20getThetaArrayPointerEv>
 8002e5a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	837b      	strh	r3, [r7, #26]
 8002e60:	8b7b      	ldrh	r3, [r7, #26]
 8002e62:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d84b      	bhi.n	8002f02 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e6a:	8b7b      	ldrh	r3, [r7, #26]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8e:	d101      	bne.n	8002e94 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <_ZN9LineTrace20createVelocityTabeleEv+0x100>)
 8002e92:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e94:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8002ea4:	f7ff fc68 	bl	8002778 <_ZSt3absf>
 8002ea8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eb0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f40 <_ZN9LineTrace20createVelocityTabeleEv+0x104>
 8002eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	db01      	blt.n	8002ec2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <_ZN9LineTrace20createVelocityTabeleEv+0x108>)
 8002ec0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002ec2:	8b7c      	ldrh	r4, [r7, #26]
 8002ec4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff4f 	bl	8002d6c <_ZN9LineTrace15radius2VelocityEf>
 8002ece:	eef0 7a40 	vmov.f32	s15, s0
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002ed8:	3312      	adds	r3, #18
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ee4:	8b7b      	ldrh	r3, [r7, #26]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	441a      	add	r2, r3
 8002eec:	8b7b      	ldrh	r3, [r7, #26]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	3322      	adds	r3, #34	; 0x22
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002efa:	8b7b      	ldrh	r3, [r7, #26]
 8002efc:	3301      	adds	r3, #1
 8002efe:	837b      	strh	r3, [r7, #26]
 8002f00:	e7ae      	b.n	8002e60 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(MAX_DEC, p_distance);
 8002f02:	6939      	ldr	r1, [r7, #16]
 8002f04:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8cd 	bl	80030a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(MAX_ACC, p_distance);
 8002f0e:	6939      	ldr	r1, [r7, #16]
 8002f10:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f96f 	bl	80031f8 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f20:	334c      	adds	r3, #76	; 0x4c
 8002f22:	2200      	movs	r2, #0
 8002f24:	9200      	str	r2, [sp, #0]
 8002f26:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f2a:	4907      	ldr	r1, [pc, #28]	; (8002f48 <_ZN9LineTrace20createVelocityTabeleEv+0x10c>)
 8002f2c:	4807      	ldr	r0, [pc, #28]	; (8002f4c <_ZN9LineTrace20createVelocityTabeleEv+0x110>)
 8002f2e:	f7fe fb95 	bl	800165c <sd_write_array_float>

}
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	3727c5ac 	.word	0x3727c5ac
 8002f40:	459c4000 	.word	0x459c4000
 8002f44:	459c4000 	.word	0x459c4000
 8002f48:	0801875c 	.word	0x0801875c
 8002f4c:	0801876c 	.word	0x0801876c

08002f50 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b08b      	sub	sp, #44	; 0x2c
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69d8      	ldr	r0, [r3, #28]
 8002f5c:	4b49      	ldr	r3, [pc, #292]	; (8003084 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x134>)
 8002f5e:	4a4a      	ldr	r2, [pc, #296]	; (8003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x138>)
 8002f60:	494a      	ldr	r1, [pc, #296]	; (800308c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x13c>)
 8002f62:	f001 f9fa 	bl	800435a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	2264      	movs	r2, #100	; 0x64
 8002f70:	4947      	ldr	r1, [pc, #284]	; (8003090 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x140>)
 8002f72:	4846      	ldr	r0, [pc, #280]	; (800308c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x13c>)
 8002f74:	f7fe fbd8 	bl	8001728 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f7e:	33a4      	adds	r3, #164	; 0xa4
 8002f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f84:	4943      	ldr	r1, [pc, #268]	; (8003094 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x144>)
 8002f86:	4841      	ldr	r0, [pc, #260]	; (800308c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x13c>)
 8002f88:	f7fe fbce 	bl	8001728 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f95a 	bl	800424a <_ZN6Logger23getDistanceArrayPointerEv>
 8002f96:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f960 	bl	8004262 <_ZN6Logger20getThetaArrayPointerEv>
 8002fa2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	837b      	strh	r3, [r7, #26]
 8002fa8:	8b7b      	ldrh	r3, [r7, #26]
 8002faa:	f241 726f 	movw	r2, #5999	; 0x176f
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d84b      	bhi.n	800304a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 8002fb2:	8b7b      	ldrh	r3, [r7, #26]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002fbe:	8b7b      	ldrh	r3, [r7, #26]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002fca:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	d101      	bne.n	8002fdc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x148>)
 8002fda:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002fdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fe4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe8:	eeb0 0a66 	vmov.f32	s0, s13
 8002fec:	f7ff fbc4 	bl	8002778 <_ZSt3absf>
 8002ff0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800309c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
 8002ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	db01      	blt.n	800300a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x150>)
 8003008:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800300a:	8b7c      	ldrh	r4, [r7, #26]
 800300c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff feab 	bl	8002d6c <_ZN9LineTrace15radius2VelocityEf>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003020:	3312      	adds	r3, #18
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800302c:	8b7b      	ldrh	r3, [r7, #26]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	441a      	add	r2, r3
 8003034:	8b7b      	ldrh	r3, [r7, #26]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	3322      	adds	r3, #34	; 0x22
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003042:	8b7b      	ldrh	r3, [r7, #26]
 8003044:	3301      	adds	r3, #1
 8003046:	837b      	strh	r3, [r7, #26]
 8003048:	e7ae      	b.n	8002fa8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(MAX_DEC, p_distance);
 800304a:	6939      	ldr	r1, [r7, #16]
 800304c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f829 	bl	80030a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(MAX_ACC, p_distance);
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8cb 	bl	80031f8 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003068:	334c      	adds	r3, #76	; 0x4c
 800306a:	2200      	movs	r2, #0
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003072:	490c      	ldr	r1, [pc, #48]	; (80030a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8003074:	4805      	ldr	r0, [pc, #20]	; (800308c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x13c>)
 8003076:	f7fe faf1 	bl	800165c <sd_write_array_float>

}
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	08018778 	.word	0x08018778
 8003088:	08018784 	.word	0x08018784
 800308c:	0801876c 	.word	0x0801876c
 8003090:	08018794 	.word	0x08018794
 8003094:	080187a4 	.word	0x080187a4
 8003098:	3727c5ac 	.word	0x3727c5ac
 800309c:	459c4000 	.word	0x459c4000
 80030a0:	459c4000 	.word	0x459c4000
 80030a4:	0801875c 	.word	0x0801875c

080030a8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80030b4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80030b6:	f241 736f 	movw	r3, #5999	; 0x176f
 80030ba:	83fb      	strh	r3, [r7, #30]
 80030bc:	8bfb      	ldrh	r3, [r7, #30]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8091 	beq.w	80031e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80030c4:	8bfb      	ldrh	r3, [r7, #30]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030ce:	3312      	adds	r3, #18
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	8bfb      	ldrh	r3, [r7, #30]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030e2:	3312      	adds	r3, #18
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f2:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80030f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80030fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dd6c      	ble.n	80031de <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 8003104:	8bfb      	ldrh	r3, [r7, #30]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa32 	bl	8000578 <__aeabi_f2d>
 8003114:	a336      	add	r3, pc, #216	; (adr r3, 80031f0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd fa85 	bl	8000628 <__aeabi_dmul>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	4625      	mov	r5, r4
 8003124:	461c      	mov	r4, r3
 8003126:	69b8      	ldr	r0, [r7, #24]
 8003128:	f7fd fa26 	bl	8000578 <__aeabi_f2d>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd fba2 	bl	800087c <__aeabi_ddiv>
 8003138:	4603      	mov	r3, r0
 800313a:	460c      	mov	r4, r1
 800313c:	4618      	mov	r0, r3
 800313e:	4621      	mov	r1, r4
 8003140:	f7fd fd6a 	bl	8000c18 <__aeabi_d2f>
 8003144:	4603      	mov	r3, r0
 8003146:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003148:	edd7 6a06 	vldr	s13, [r7, #24]
 800314c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003154:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003158:	ed97 7a04 	vldr	s14, [r7, #16]
 800315c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	dd39      	ble.n	80031de <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800316a:	8bfb      	ldrh	r3, [r7, #30]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003172:	3312      	adds	r3, #18
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9fb 	bl	8000578 <__aeabi_f2d>
 8003182:	4604      	mov	r4, r0
 8003184:	460d      	mov	r5, r1
 8003186:	8bfb      	ldrh	r3, [r7, #30]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	edd7 7a02 	vldr	s15, [r7, #8]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	ee17 0a90 	vmov	r0, s15
 800319e:	f7fd f9eb 	bl	8000578 <__aeabi_f2d>
 80031a2:	a313      	add	r3, pc, #76	; (adr r3, 80031f0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f7fd fa3e 	bl	8000628 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f882 	bl	80002bc <__adddf3>
 80031b8:	4603      	mov	r3, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4619      	mov	r1, r3
 80031be:	4622      	mov	r2, r4
 80031c0:	8bfb      	ldrh	r3, [r7, #30]
 80031c2:	1e5c      	subs	r4, r3, #1
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	f7fd fd26 	bl	8000c18 <__aeabi_d2f>
 80031cc:	4601      	mov	r1, r0
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031d4:	3312      	adds	r3, #18
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031de:	8bfb      	ldrh	r3, [r7, #30]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	83fb      	strh	r3, [r7, #30]
 80031e4:	e76a      	b.n	80030bc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80031e6:	bf00      	nop
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bdb0      	pop	{r4, r5, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80031f4:	3f50624d 	.word	0x3f50624d

080031f8 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	ed87 0a02 	vstr	s0, [r7, #8]
 8003204:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003206:	2300      	movs	r3, #0
 8003208:	83fb      	strh	r3, [r7, #30]
 800320a:	8bfb      	ldrh	r3, [r7, #30]
 800320c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003210:	4293      	cmp	r3, r2
 8003212:	f200 8091 	bhi.w	8003338 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003216:	8bfb      	ldrh	r3, [r7, #30]
 8003218:	3301      	adds	r3, #1
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003220:	3312      	adds	r3, #18
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	ed93 7a00 	vldr	s14, [r3]
 800322c:	8bfb      	ldrh	r3, [r7, #30]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003234:	3312      	adds	r3, #18
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003244:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003248:	edd7 7a06 	vldr	s15, [r7, #24]
 800324c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	dd6c      	ble.n	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 8003256:	8bfb      	ldrh	r3, [r7, #30]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f989 	bl	8000578 <__aeabi_f2d>
 8003266:	a336      	add	r3, pc, #216	; (adr r3, 8003340 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fd f9dc 	bl	8000628 <__aeabi_dmul>
 8003270:	4603      	mov	r3, r0
 8003272:	460c      	mov	r4, r1
 8003274:	4625      	mov	r5, r4
 8003276:	461c      	mov	r4, r3
 8003278:	69b8      	ldr	r0, [r7, #24]
 800327a:	f7fd f97d 	bl	8000578 <__aeabi_f2d>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fd faf9 	bl	800087c <__aeabi_ddiv>
 800328a:	4603      	mov	r3, r0
 800328c:	460c      	mov	r4, r1
 800328e:	4618      	mov	r0, r3
 8003290:	4621      	mov	r1, r4
 8003292:	f7fd fcc1 	bl	8000c18 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800329a:	edd7 6a06 	vldr	s13, [r7, #24]
 800329e:	ed97 7a05 	vldr	s14, [r7, #20]
 80032a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a6:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80032aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80032ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ba:	dd39      	ble.n	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032bc:	8bfb      	ldrh	r3, [r7, #30]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032c4:	3312      	adds	r3, #18
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f952 	bl	8000578 <__aeabi_f2d>
 80032d4:	4604      	mov	r4, r0
 80032d6:	460d      	mov	r5, r1
 80032d8:	8bfb      	ldrh	r3, [r7, #30]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ec:	ee17 0a90 	vmov	r0, s15
 80032f0:	f7fd f942 	bl	8000578 <__aeabi_f2d>
 80032f4:	a312      	add	r3, pc, #72	; (adr r3, 8003340 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd f995 	bl	8000628 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4620      	mov	r0, r4
 8003304:	4629      	mov	r1, r5
 8003306:	f7fc ffd9 	bl	80002bc <__adddf3>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	4619      	mov	r1, r3
 8003310:	4622      	mov	r2, r4
 8003312:	8bfb      	ldrh	r3, [r7, #30]
 8003314:	1c5c      	adds	r4, r3, #1
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	f7fd fc7d 	bl	8000c18 <__aeabi_d2f>
 800331e:	4601      	mov	r1, r0
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003326:	3312      	adds	r3, #18
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3304      	adds	r3, #4
 800332e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003330:	8bfb      	ldrh	r3, [r7, #30]
 8003332:	3301      	adds	r3, #1
 8003334:	83fb      	strh	r3, [r7, #30]
 8003336:	e768      	b.n	800320a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003338:	bf00      	nop
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bdb0      	pop	{r4, r5, r7, pc}
 8003340:	d2f1a9fc 	.word	0xd2f1a9fc
 8003344:	3f50624d 	.word	0x3f50624d

08003348 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003356:	330c      	adds	r3, #12
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe f891 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 800336a:	eeb0 7a40 	vmov.f32	s14, s0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003374:	3348      	adds	r3, #72	; 0x48
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	bfac      	ite	ge
 8003384:	2301      	movge	r3, #1
 8003386:	2300      	movlt	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003394:	3348      	adds	r3, #72	; 0x48
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033a0:	330e      	adds	r3, #14
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	3322      	adds	r3, #34	; 0x22
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80033ba:	3348      	adds	r3, #72	; 0x48
 80033bc:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033c6:	330e      	adds	r3, #14
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033d4:	330e      	adds	r3, #14
 80033d6:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80033d8:	e7c2      	b.n	8003360 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033e0:	330e      	adds	r3, #14
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d906      	bls.n	80033fa <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033f2:	330e      	adds	r3, #14
 80033f4:	f241 726f 	movw	r2, #5999	; 0x176f
 80033f8:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003400:	3348      	adds	r3, #72	; 0x48
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003406:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe f83d 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003412:	eef0 7a40 	vmov.f32	s15, s0
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003418:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003422:	330e      	adds	r3, #14
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003428:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003430:	330e      	adds	r3, #14
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800343a:	3312      	adds	r3, #18
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f947 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003456:	330e      	adds	r3, #14
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003460:	3312      	adds	r3, #18
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a06      	ldr	r2, [pc, #24]	; (8003484 <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 800346c:	6013      	str	r3, [r2, #0]

	}
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000270 	.word	0x20000270
 800347c:	20000274 	.word	0x20000274
 8003480:	20000278 	.word	0x20000278
 8003484:	2000027c 	.word	0x2000027c

08003488 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd ffe8 	bl	800146e <_ZN7Encoder15getDistance10mmEv>
 800349e:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fa31 	bl	800490e <_ZN8Odometry8getThetaEv>
 80034ac:	ec54 3b10 	vmov	r3, r4, d0
 80034b0:	4618      	mov	r0, r3
 80034b2:	4621      	mov	r1, r4
 80034b4:	f7fd fbb0 	bl	8000c18 <__aeabi_d2f>
 80034b8:	4603      	mov	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80034bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80034c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	d101      	bne.n	80034ce <_ZN9LineTrace8isStableEv+0x46>
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <_ZN9LineTrace8isStableEv+0xd0>)
 80034cc:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80034ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80034d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80034d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034da:	eeb0 0a66 	vmov.f32	s0, s13
 80034de:	f7ff f94b 	bl	8002778 <_ZSt3absf>
 80034e2:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80034e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800355c <_ZN9LineTrace8isStableEv+0xd4>
 80034ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	db01      	blt.n	80034fc <_ZN9LineTrace8isStableEv+0x74>
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <_ZN9LineTrace8isStableEv+0xd8>)
 80034fa:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003502:	334a      	adds	r3, #74	; 0x4a
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800350a:	4b16      	ldr	r3, [pc, #88]	; (8003564 <_ZN9LineTrace8isStableEv+0xdc>)
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003516:	334a      	adds	r3, #74	; 0x4a
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 800351c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003520:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003568 <_ZN9LineTrace8isStableEv+0xe0>
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	db06      	blt.n	800353c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <_ZN9LineTrace8isStableEv+0xdc>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <_ZN9LineTrace8isStableEv+0xdc>)
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	e002      	b.n	8003542 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <_ZN9LineTrace8isStableEv+0xdc>)
 800353e:	2200      	movs	r2, #0
 8003540:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_ZN9LineTrace8isStableEv+0xdc>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	2b16      	cmp	r3, #22
 8003548:	d901      	bls.n	800354e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003550:	4618      	mov	r0, r3
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	3727c5ac 	.word	0x3727c5ac
 800355c:	459c4000 	.word	0x459c4000
 8003560:	459c4000 	.word	0x459c4000
 8003564:	20000290 	.word	0x20000290
 8003568:	44fa0000 	.word	0x44fa0000

0800356c <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	2201      	movs	r2, #1
 800357a:	4927      	ldr	r1, [pc, #156]	; (8003618 <_ZN9LineTrace4initEv+0xac>)
 800357c:	4827      	ldr	r0, [pc, #156]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 800357e:	f7fe f8d3 	bl	8001728 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003582:	f107 0318 	add.w	r3, r7, #24
 8003586:	2201      	movs	r2, #1
 8003588:	4925      	ldr	r1, [pc, #148]	; (8003620 <_ZN9LineTrace4initEv+0xb4>)
 800358a:	4824      	ldr	r0, [pc, #144]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 800358c:	f7fe f8cc 	bl	8001728 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	2201      	movs	r2, #1
 8003596:	4923      	ldr	r1, [pc, #140]	; (8003624 <_ZN9LineTrace4initEv+0xb8>)
 8003598:	4820      	ldr	r0, [pc, #128]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 800359a:	f7fe f8c5 	bl	8001728 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800359e:	edd7 7a07 	vldr	s15, [r7, #28]
 80035a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80035a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80035aa:	eeb0 1a66 	vmov.f32	s2, s13
 80035ae:	eef0 0a47 	vmov.f32	s1, s14
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f83c 	bl	8003634 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80035bc:	f107 0310 	add.w	r3, r7, #16
 80035c0:	2201      	movs	r2, #1
 80035c2:	4919      	ldr	r1, [pc, #100]	; (8003628 <_ZN9LineTrace4initEv+0xbc>)
 80035c4:	4815      	ldr	r0, [pc, #84]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 80035c6:	f7fe f8af 	bl	8001728 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	2201      	movs	r2, #1
 80035d0:	4916      	ldr	r1, [pc, #88]	; (800362c <_ZN9LineTrace4initEv+0xc0>)
 80035d2:	4812      	ldr	r0, [pc, #72]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 80035d4:	f7fe f8a8 	bl	8001728 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	2201      	movs	r2, #1
 80035de:	4914      	ldr	r1, [pc, #80]	; (8003630 <_ZN9LineTrace4initEv+0xc4>)
 80035e0:	480e      	ldr	r0, [pc, #56]	; (800361c <_ZN9LineTrace4initEv+0xb0>)
 80035e2:	f7fe f8a1 	bl	8001728 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80035e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f875 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80035f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f8:	eeb0 0a67 	vmov.f32	s0, s15
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f87d 	bl	80036fc <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003602:	edd7 7a02 	vldr	s15, [r7, #8]
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f885 	bl	800371a <_ZN9LineTrace15setMaxVelocity2Ef>
}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	080187b0 	.word	0x080187b0
 800361c:	080187b8 	.word	0x080187b8
 8003620:	080187c0 	.word	0x080187c0
 8003624:	080187c8 	.word	0x080187c8
 8003628:	080187d0 	.word	0x080187d0
 800362c:	080187dc 	.word	0x080187dc
 8003630:	080187e8 	.word	0x080187e8

08003634 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003640:	edc7 0a01 	vstr	s1, [r7, #4]
 8003644:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
	return kp_;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	ee07 3a90 	vmov	s15, r3
}
 8003676:	eeb0 0a67 	vmov.f32	s0, s15
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	return ki_;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	ee07 3a90 	vmov	s15, r3
}
 8003694:	eeb0 0a67 	vmov.f32	s0, s15
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
	return kd_;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	ee07 3a90 	vmov	s15, r3
}
 80036b2:	eeb0 0a67 	vmov.f32	s0, s15
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	679a      	str	r2, [r3, #120]	; 0x78
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	ee07 3a90 	vmov	s15, r3
}
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003764:	ee07 3a90 	vmov	s15, r3
}
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003784:	ee07 3a90 	vmov	s15, r3
}
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8107 	beq.w	80039ba <_ZN9LineTrace4flipEv+0x222>
		// ---- line following processing -----//
		if(ignore_linetrace_flag_ == false){
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037b2:	334b      	adds	r3, #75	; 0x4b
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	f083 0301 	eor.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <_ZN9LineTrace4flipEv+0x3c>
			velocity_ctrl_->setMode(LINETRACE_MODE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 ffa5 	bl	8005716 <_ZN12VelocityCtrl7setModeEt>
			pidTrace();
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff f95b 	bl	8002a88 <_ZN9LineTrace8pidTraceEv>
 80037d2:	e011      	b.n	80037f8 <_ZN9LineTrace4flipEv+0x60>
		}
		else{
			velocity_ctrl_->setMode(STRAIGHT_MODE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 ff9b 	bl	8005716 <_ZN12VelocityCtrl7setModeEt>
			velocity_ctrl_->setVelocity(target_velocity_, 0);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80037ea:	eddf 0a76 	vldr	s1, [pc, #472]	; 80039c4 <_ZN9LineTrace4flipEv+0x22c>
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	4610      	mov	r0, r2
 80037f4:	f001 fed8 	bl	80055a8 <_ZN12VelocityCtrl11setVelocityEff>
		}
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 80037f8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa89 	bl	8003d14 <_ZN9LineTrace16isTargetDistanceEf>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d028      	beq.n	800385a <_ZN9LineTrace4flipEv+0xc2>
			// ---- Store Logs ------//
			storeLogs();
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f9e7 	bl	8003bdc <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fe3a 	bl	8003488 <_ZN9LineTrace8isStableEv>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <_ZN9LineTrace4flipEv+0x9c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fb14 	bl	8004e4c <_ZN10SideSensor9getStatusEv>
 8003824:	4603      	mov	r3, r0
 8003826:	43db      	mvns	r3, r3
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d101      	bne.n	8003834 <_ZN9LineTrace4flipEv+0x9c>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <_ZN9LineTrace4flipEv+0x9e>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <_ZN9LineTrace4flipEv+0xae>
				stable_flag_ = true;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003840:	3349      	adds	r3, #73	; 0x49
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fe3c 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	4618      	mov	r0, r3
 8003856:	f001 f86b 	bl	8004930 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fd74 	bl	8003348 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore and line trace ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff f9c9 	bl	8002bf8 <_ZN9LineTrace11isCrossLineEv>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01c      	beq.n	80038a6 <_ZN9LineTrace4flipEv+0x10e>
			side_sensor_->enableIgnore();
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fb13 	bl	8004e9c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fe4f 	bl	800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			ignore_linetrace_flag_ = true;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003886:	334b      	adds	r3, #75	; 0x4b
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
			encoder_->clearIgnoreLinetraceDistance();
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fe61 	bl	8001558 <_ZN7Encoder28clearIgnoreLinetraceDistanceEv>
			led_.LR(-1, 1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	330c      	adds	r3, #12
 800389a:	2201      	movs	r2, #1
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fc13 	bl	80020cc <_ZN3LED2LREaa>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fb10 	bl	8004ed0 <_ZN10SideSensor13getIgnoreFlagEv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00f      	beq.n	80038d6 <_ZN9LineTrace4flipEv+0x13e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fe20 	bl	8001500 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80038c0:	eeb0 7a40 	vmov.f32	s14, s0
 80038c4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80039c8 <_ZN9LineTrace4flipEv+0x230>
 80038c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	db01      	blt.n	80038d6 <_ZN9LineTrace4flipEv+0x13e>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <_ZN9LineTrace4flipEv+0x140>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <_ZN9LineTrace4flipEv+0x14e>
			side_sensor_->disableIgnore();
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fae8 	bl	8004eb6 <_ZN10SideSensor13disableIgnoreEv>

		}

		if(ignore_linetrace_flag_ == true && encoder_->getIgnoreLinetraceDistance() >= 40){
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038ec:	334b      	adds	r3, #75	; 0x4b
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00f      	beq.n	8003914 <_ZN9LineTrace4flipEv+0x17c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fe1e 	bl	800153a <_ZN7Encoder26getIgnoreLinetraceDistanceEv>
 80038fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003902:	eddf 7a32 	vldr	s15, [pc, #200]	; 80039cc <_ZN9LineTrace4flipEv+0x234>
 8003906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	db01      	blt.n	8003914 <_ZN9LineTrace4flipEv+0x17c>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <_ZN9LineTrace4flipEv+0x17e>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <_ZN9LineTrace4flipEv+0x19e>
			ignore_linetrace_flag_ = false;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003920:	334b      	adds	r3, #75	; 0x4b
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
			led_.LR(-1, 0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	330c      	adds	r3, #12
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fbcb 	bl	80020cc <_ZN3LED2LREaa>
		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800393c:	3349      	adds	r3, #73	; 0x49
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <_ZN9LineTrace4flipEv+0x1c4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fa7f 	bl	8004e4c <_ZN10SideSensor9getStatusEv>
 800394e:	4603      	mov	r3, r0
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d101      	bne.n	800395c <_ZN9LineTrace4flipEv+0x1c4>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <_ZN9LineTrace4flipEv+0x1c6>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01a      	beq.n	8003998 <_ZN9LineTrace4flipEv+0x200>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003968:	3310      	adds	r3, #16
 800396a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <_ZN9LineTrace4flipEv+0x1e2>
				storeSideLineDistance();
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa27 	bl	8003dc6 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003978:	e002      	b.n	8003980 <_ZN9LineTrace4flipEv+0x1e8>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa92 	bl	8003ea4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
			}

			stable_flag_ = false;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003986:	3349      	adds	r3, #73	; 0x49
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003992:	334a      	adds	r3, #74	; 0x4a
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
		if(stable_flag_ == true) led_.LR(-1, 1);
		else led_.LR(-1, 0);
		*/

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fe95 	bl	80026cc <_ZN10LineSensor13emergencyStopEv>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <_ZN9LineTrace4flipEv+0x222>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	eddf 0a05 	vldr	s1, [pc, #20]	; 80039c4 <_ZN9LineTrace4flipEv+0x22c>
 80039b0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80039c4 <_ZN9LineTrace4flipEv+0x22c>
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fe0b 	bl	80055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	00000000 	.word	0x00000000
 80039c8:	43480000 	.word	0x43480000
 80039cc:	42200000 	.word	0x42200000

080039d0 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fe54 	bl	800569a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fa40 	bl	8004e7c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a02:	3344      	adds	r3, #68	; 0x44
 8003a04:	2200      	movs	r2, #0
 8003a06:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a0e:	3346      	adds	r3, #70	; 0x46
 8003a10:	2200      	movs	r2, #0
 8003a12:	801a      	strh	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fe45 	bl	80056c0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fb43 	bl	80020cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69d8      	ldr	r0, [r3, #28]
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <_ZN9LineTrace4stopEv+0xb4>)
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <_ZN9LineTrace4stopEv+0xb8>)
 8003a5e:	491e      	ldr	r1, [pc, #120]	; (8003ad8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a60:	f000 fc34 	bl	80042cc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003a64:	e006      	b.n	8003a74 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69d8      	ldr	r0, [r3, #28]
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <_ZN9LineTrace4stopEv+0xc0>)
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <_ZN9LineTrace4stopEv+0xc4>)
 8003a6e:	491a      	ldr	r1, [pc, #104]	; (8003ad8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a70:	f000 fc4f 	bl	8004312 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	9200      	str	r2, [sp, #0]
 8003a80:	2264      	movs	r2, #100	; 0x64
 8003a82:	4918      	ldr	r1, [pc, #96]	; (8003ae4 <_ZN9LineTrace4stopEv+0xc8>)
 8003a84:	4814      	ldr	r0, [pc, #80]	; (8003ad8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a86:	f7fd fde9 	bl	800165c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003a90:	33a4      	adds	r3, #164	; 0xa4
 8003a92:	2200      	movs	r2, #0
 8003a94:	9200      	str	r2, [sp, #0]
 8003a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a9a:	4913      	ldr	r1, [pc, #76]	; (8003ae8 <_ZN9LineTrace4stopEv+0xcc>)
 8003a9c:	480e      	ldr	r0, [pc, #56]	; (8003ad8 <_ZN9LineTrace4stopEv+0xbc>)
 8003a9e:	f7fd fddd 	bl	800165c <sd_write_array_float>

	led_.LR(-1, 0);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fb0d 	bl	80020cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fcb9 	bl	800442e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fc67 	bl	8004394 <_ZN6Logger10resetLogs2Ev>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08018778 	.word	0x08018778
 8003ad4:	08018784 	.word	0x08018784
 8003ad8:	0801876c 	.word	0x0801876c
 8003adc:	080187f4 	.word	0x080187f4
 8003ae0:	08018800 	.word	0x08018800
 8003ae4:	08018794 	.word	0x08018794
 8003ae8:	080187a4 	.word	0x080187a4

08003aec <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003af8:	2300      	movs	r3, #0
 8003afa:	737b      	strb	r3, [r7, #13]
	start();
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff67 	bl	80039d0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003b02:	7b7b      	ldrb	r3, [r7, #13]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d160      	bne.n	8003bca <_ZN9LineTrace7runningEv+0xde>
		switch(stage){
 8003b08:	89fb      	ldrh	r3, [r7, #14]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <_ZN9LineTrace7runningEv+0x28>
 8003b0e:	2b0a      	cmp	r3, #10
 8003b10:	d035      	beq.n	8003b7e <_ZN9LineTrace7runningEv+0x92>
 8003b12:	e059      	b.n	8003bc8 <_ZN9LineTrace7runningEv+0xdc>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f9a3 	bl	8004e64 <_ZN10SideSensor16getWhiteLineCntREv>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d049      	beq.n	8003bc2 <_ZN9LineTrace7runningEv+0xd6>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff f836 	bl	8002ba0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8a3 	bl	8003c90 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fce5 	bl	800151e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd fcc3 	bl	80014e4 <_ZN7Encoder18clearTotalDistanceEv>
				encoder_->clearIgnoreLinetraceDistance();
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fcf8 	bl	8001558 <_ZN7Encoder28clearIgnoreLinetraceDistanceEv>
				led_.LR(0, -1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe faaa 	bl	80020cc <_ZN3LED2LREaa>
				stage = 10;
 8003b78:	230a      	movs	r3, #10
 8003b7a:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003b7c:	e021      	b.n	8003bc2 <_ZN9LineTrace7runningEv+0xd6>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 f96e 	bl	8004e64 <_ZN10SideSensor16getWhiteLineCntREv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <_ZN9LineTrace7runningEv+0xda>
				loggerStop();
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff f81c 	bl	8002bd6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f889 	bl	8003cb6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003ba4:	2064      	movs	r0, #100	; 0x64
 8003ba6:	f004 fe35 	bl	8008814 <HAL_Delay>

				setTargetVelocity(0);
 8003baa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003bd8 <_ZN9LineTrace7runningEv+0xec>
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fd95 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bb8:	f004 fe2c 	bl	8008814 <HAL_Delay>

				goal_flag = true;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003bc0:	e001      	b.n	8003bc6 <_ZN9LineTrace7runningEv+0xda>
			break;
 8003bc2:	bf00      	nop
 8003bc4:	e79d      	b.n	8003b02 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003bc6:	bf00      	nop
	while(goal_flag == false){
 8003bc8:	e79b      	b.n	8003b02 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff26 	bl	8003a1c <_ZN9LineTrace4stopEv>
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00000000 	.word	0x00000000

08003bdc <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	ed2d 8b02 	vpush	{d8}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d046      	beq.n	8003c80 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003bf8:	3310      	adds	r3, #16
 8003bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11c      	bne.n	8003c3c <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69dc      	ldr	r4, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fc2f 	bl	800146e <_ZN7Encoder15getDistance10mmEv>
 8003c10:	eeb0 8a40 	vmov.f32	s16, s0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fe78 	bl	800490e <_ZN8Odometry8getThetaEv>
 8003c1e:	ec53 2b10 	vmov	r2, r3, d0
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	f7fc fff7 	bl	8000c18 <__aeabi_d2f>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	ee00 3a90 	vmov	s1, r3
 8003c30:	eeb0 0a48 	vmov.f32	s0, s16
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 fa78 	bl	800412a <_ZN6Logger21storeDistanceAndThetaEff>
 8003c3a:	e01b      	b.n	8003c74 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69dc      	ldr	r4, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fd57 	bl	80056f8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fe5b 	bl	800490e <_ZN8Odometry8getThetaEv>
 8003c58:	ec53 2b10 	vmov	r2, r3, d0
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7fc ffda 	bl	8000c18 <__aeabi_d2f>
 8003c64:	4603      	mov	r3, r0
 8003c66:	ee00 3a90 	vmov	s1, r3
 8003c6a:	eeb0 0a48 	vmov.f32	s0, s16
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 faa2 	bl	80041b8 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003c7e:	801a      	strh	r2, [r3, #0]
	}
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	ecbd 8b02 	vpop	{d8}
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	20000264 	.word	0x20000264

08003c90 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fd fc21 	bl	80014e4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ca8:	330c      	adds	r3, #12
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cd0:	330e      	adds	r3, #14
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003cdc:	3348      	adds	r3, #72	; 0x48
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d02:	3310      	adds	r3, #16
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	801a      	strh	r2, [r3, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd fba0 	bl	800146e <_ZN7Encoder15getDistance10mmEv>
 8003d2e:	eeb0 7a40 	vmov.f32	s14, s0
 8003d32:	edd7 7a00 	vldr	s15, [r7]
 8003d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d6a:	3344      	adds	r3, #68	; 0x44
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	461c      	mov	r4, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fd fb8b 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003d76:	eef0 7a40 	vmov.f32	s15, s0
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003d80:	3304      	adds	r3, #4
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d92:	3344      	adds	r3, #68	; 0x44
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003da0:	3344      	adds	r3, #68	; 0x44
 8003da2:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003daa:	3344      	adds	r3, #68	; 0x44
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	2b63      	cmp	r3, #99	; 0x63
 8003db0:	d905      	bls.n	8003dbe <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003db8:	3344      	adds	r3, #68	; 0x44
 8003dba:	2263      	movs	r2, #99	; 0x63
 8003dbc:	801a      	strh	r2, [r3, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}

08003dc6 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003dc6:	b590      	push	{r4, r7, lr}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dd8:	3346      	adds	r3, #70	; 0x46
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	461c      	mov	r4, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fd fb54 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003de4:	eef0 7a40 	vmov.f32	s15, s0
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003dee:	3328      	adds	r3, #40	; 0x28
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e00:	3346      	adds	r3, #70	; 0x46
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e0e:	3346      	adds	r3, #70	; 0x46
 8003e10:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e18:	3346      	adds	r3, #70	; 0x46
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e20:	d306      	bcc.n	8003e30 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e28:	3346      	adds	r3, #70	; 0x46
 8003e2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e2e:	801a      	strh	r2, [r3, #0]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6959      	ldr	r1, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e4a:	3344      	adds	r3, #68	; 0x44
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003e54:	3304      	adds	r3, #4
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	eeb0 0a67 	vmov.f32	s0, s15
 8003e64:	4608      	mov	r0, r1
 8003e66:	f7fd fb20 	bl	80014aa <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e70:	3344      	adds	r3, #68	; 0x44
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e7e:	3344      	adds	r3, #68	; 0x44
 8003e80:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e88:	3344      	adds	r3, #68	; 0x44
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	2b63      	cmp	r3, #99	; 0x63
 8003e8e:	d905      	bls.n	8003e9c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e96:	3344      	adds	r3, #68	; 0x44
 8003e98:	2263      	movs	r2, #99	; 0x63
 8003e9a:	801a      	strh	r2, [r3, #0]

}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003eac:	2300      	movs	r3, #0
 8003eae:	82fb      	strh	r3, [r7, #22]
 8003eb0:	8afb      	ldrh	r3, [r7, #22]
 8003eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb6:	d239      	bcs.n	8003f2c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003ec0:	3328      	adds	r3, #40	; 0x28
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fadb 	bl	800148c <_ZN7Encoder16getTotalDistanceEv>
 8003ed6:	eeb0 7a40 	vmov.f32	s14, s0
 8003eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee6:	f7fe fc47 	bl	8002778 <_ZSt3absf>
 8003eea:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003f54 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	d811      	bhi.n	8003f24 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6959      	ldr	r1, [r3, #20]
 8003f04:	8afb      	ldrh	r3, [r7, #22]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003f0c:	3328      	adds	r3, #40	; 0x28
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	3304      	adds	r3, #4
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	f7fd fac4 	bl	80014aa <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003f22:	e003      	b.n	8003f2c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003f24:	8afb      	ldrh	r3, [r7, #22]
 8003f26:	3301      	adds	r3, #1
 8003f28:	82fb      	strh	r3, [r7, #22]
 8003f2a:	e7c1      	b.n	8003eb0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

		//sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f32:	3346      	adds	r3, #70	; 0x46
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3a:	d306      	bcc.n	8003f4a <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f42:	3346      	adds	r3, #70	; 0x46
 8003f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f48:	801a      	strh	r2, [r3, #0]

}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	42a00000 	.word	0x42a00000

08003f58 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f66:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f74:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003f78:	2200      	movs	r2, #0
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f82:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f86:	2200      	movs	r2, #0
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f90:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f94:	2200      	movs	r2, #0
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003fb4:	f7fd fc44 	bl	8001840 <sd_mount>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d016      	beq.n	8003ff6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8003fc8:	f7fd f86a 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7fd f876 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003fd4:	4815      	ldr	r0, [pc, #84]	; (800402c <_ZN6Logger10sdCardInitEv+0x84>)
 8003fd6:	f7fd f89d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f7fd f86f 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003fe2:	4813      	ldr	r0, [pc, #76]	; (8004030 <_ZN6Logger10sdCardInitEv+0x88>)
 8003fe4:	f7fd f896 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003fe8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fec:	f004 fc12 	bl	8008814 <HAL_Delay>

	  ret = true;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	e015      	b.n	8004022 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003ff6:	f7fd f853 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fd f85f 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004002:	480a      	ldr	r0, [pc, #40]	; (800402c <_ZN6Logger10sdCardInitEv+0x84>)
 8004004:	f7fd f886 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004008:	2101      	movs	r1, #1
 800400a:	2000      	movs	r0, #0
 800400c:	f7fd f858 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004010:	4808      	ldr	r0, [pc, #32]	; (8004034 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004012:	f7fd f87f 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401a:	f004 fbfb 	bl	8008814 <HAL_Delay>

	  ret = false;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08018810 	.word	0x08018810
 8004030:	0801881c 	.word	0x0801881c
 8004034:	08018824 	.word	0x08018824

08004038 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800404a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d027      	beq.n	80040a4 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800405a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004070:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004080:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004084:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800408c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <_ZN6Logger8storeLogEf+0x6c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800409c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80040a0:	2200      	movs	r2, #0
 80040a2:	801a      	strh	r2, [r3, #0]
	}
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040c2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d028      	beq.n	800411e <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040d2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040ea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040fa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040fe:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004106:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <_ZN6Logger9storeLog2Ef+0x6e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004116:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
	}
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	ed87 0a02 	vstr	s0, [r7, #8]
 8004136:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004140:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	3302      	adds	r3, #2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004158:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004164:	3312      	adds	r3, #18
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004174:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004184:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004188:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004190:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f241 726f 	movw	r2, #5999	; 0x176f
 800419a:	4293      	cmp	r3, r2
 800419c:	d906      	bls.n	80041ac <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041a4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041a8:	2200      	movs	r2, #0
 80041aa:	801a      	strh	r2, [r3, #0]
	//}
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80041c4:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80041da:	3322      	adds	r3, #34	; 0x22
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ea:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80041f6:	3352      	adds	r3, #82	; 0x52
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004206:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004216:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800421a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004222:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	f241 726f 	movw	r2, #5999	; 0x176f
 800422c:	4293      	cmp	r3, r2
 800422e:	d906      	bls.n	800423e <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004236:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800423a:	2200      	movs	r2, #0
 800423c:	801a      	strh	r2, [r3, #0]
	//}
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3308      	adds	r3, #8
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004270:	3348      	adds	r3, #72	; 0x48
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af02      	add	r7, sp, #8
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	2201      	movs	r2, #1
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	f7fd f9e0 	bl	800165c <sd_write_array_float>
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	2201      	movs	r2, #1
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fd f9cc 	bl	800165c <sd_write_array_float>
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f103 0208 	add.w	r2, r3, #8
 80042e0:	2300      	movs	r3, #0
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	f241 7270 	movw	r2, #6000	; 0x1770
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	68b8      	ldr	r0, [r7, #8]
 80042ee:	f7fd f9b5 	bl	800165c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80042f8:	3348      	adds	r3, #72	; 0x48
 80042fa:	2200      	movs	r2, #0
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	f7fd f9a9 	bl	800165c <sd_write_array_float>
}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af02      	add	r7, sp, #8
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004326:	3388      	adds	r3, #136	; 0x88
 8004328:	2200      	movs	r2, #0
 800432a:	9200      	str	r2, [sp, #0]
 800432c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f7fd f992 	bl	800165c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800433e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004342:	2200      	movs	r2, #0
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	f241 7270 	movw	r2, #6000	; 0x1770
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	68b8      	ldr	r0, [r7, #8]
 800434e:	f7fd f985 	bl	800165c <sd_write_array_float>
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3308      	adds	r3, #8
 800436c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f7fd f9d8 	bl	8001728 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800437e:	3348      	adds	r3, #72	; 0x48
 8004380:	f241 7270 	movw	r2, #6000	; 0x1770
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f7fd f9ce 	bl	8001728 <sd_read_array_float>
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004394:	b480      	push	{r7}
 8004396:	b08b      	sub	sp, #44	; 0x2c
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80043a2:	3388      	adds	r3, #136	; 0x88
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80043b0:	3340      	adds	r3, #64	; 0x40
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d009      	beq.n	80043d0 <_ZN6Logger10resetLogs2Ev+0x3c>
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	617b      	str	r3, [r7, #20]
		log = 0;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	3304      	adds	r3, #4
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e7f1      	b.n	80043b4 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80043d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80043e6:	3340      	adds	r3, #64	; 0x40
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d009      	beq.n	8004406 <_ZN6Logger10resetLogs2Ev+0x72>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	60bb      	str	r3, [r7, #8]
		log = 0;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	3304      	adds	r3, #4
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	e7f1      	b.n	80043ea <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800440c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004410:	2200      	movs	r2, #0
 8004412:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800441a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800441e:	2200      	movs	r2, #0
 8004420:	801a      	strh	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	372c      	adds	r7, #44	; 0x2c
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800443c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004440:	2200      	movs	r2, #0
 8004442:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800444a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800444e:	2200      	movs	r2, #0
 8004450:	801a      	strh	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZN6Logger5startEv>:

void Logger::start()
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800446c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800448e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	805a      	strh	r2, [r3, #2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_ZN5Motor4initEv>:

void Motor::init()
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80044cc:	2108      	movs	r1, #8
 80044ce:	4805      	ldr	r0, [pc, #20]	; (80044e4 <_ZN5Motor4initEv+0x20>)
 80044d0:	f009 fb50 	bl	800db74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80044d4:	210c      	movs	r1, #12
 80044d6:	4803      	ldr	r0, [pc, #12]	; (80044e4 <_ZN5Motor4initEv+0x20>)
 80044d8:	f009 fb4c 	bl	800db74 <HAL_TIM_PWM_Start>

}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	2003e8bc 	.word	0x2003e8bc

080044e8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da0d      	bge.n	8004516 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80044fa:	2200      	movs	r2, #0
 80044fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004500:	481f      	ldr	r0, [pc, #124]	; (8004580 <_ZN5Motor9motorCtrlEv+0x98>)
 8004502:	f005 fc1d 	bl	8009d40 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800450c:	b29b      	uxth	r3, r3
 800450e:	425b      	negs	r3, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	81fb      	strh	r3, [r7, #14]
 8004514:	e00a      	b.n	800452c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004516:	2201      	movs	r2, #1
 8004518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800451c:	4818      	ldr	r0, [pc, #96]	; (8004580 <_ZN5Motor9motorCtrlEv+0x98>)
 800451e:	f005 fc0f 	bl	8009d40 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004528:	b29b      	uxth	r3, r3
 800452a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da0d      	bge.n	8004552 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004536:	2201      	movs	r2, #1
 8004538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800453c:	4810      	ldr	r0, [pc, #64]	; (8004580 <_ZN5Motor9motorCtrlEv+0x98>)
 800453e:	f005 fbff 	bl	8009d40 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004548:	b29b      	uxth	r3, r3
 800454a:	425b      	negs	r3, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	81bb      	strh	r3, [r7, #12]
 8004550:	e00a      	b.n	8004568 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004552:	2200      	movs	r2, #0
 8004554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004558:	4809      	ldr	r0, [pc, #36]	; (8004580 <_ZN5Motor9motorCtrlEv+0x98>)
 800455a:	f005 fbf1 	bl	8009d40 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004568:	89fa      	ldrh	r2, [r7, #14]
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <_ZN5Motor9motorCtrlEv+0x9c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004570:	89ba      	ldrh	r2, [r7, #12]
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40020c00 	.word	0x40020c00
 8004584:	2003e8bc 	.word	0x2003e8bc

08004588 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6178      	str	r0, [r7, #20]
 8004590:	ed87 0b02 	vstr	d0, [r7, #8]
 8004594:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <_ZN5Motor8setRatioEdd+0xd8>)
 800459e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045a2:	f7fc fad1 	bl	8000b48 <__aeabi_dcmpgt>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <_ZN5Motor8setRatioEdd+0x30>
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	4c2b      	ldr	r4, [pc, #172]	; (8004660 <_ZN5Motor8setRatioEdd+0xd8>)
 80045b2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80045b6:	e00e      	b.n	80045d6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	4b29      	ldr	r3, [pc, #164]	; (8004664 <_ZN5Motor8setRatioEdd+0xdc>)
 80045be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045c2:	f7fc faa3 	bl	8000b0c <__aeabi_dcmplt>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <_ZN5Motor8setRatioEdd+0x4e>
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	4c24      	ldr	r4, [pc, #144]	; (8004664 <_ZN5Motor8setRatioEdd+0xdc>)
 80045d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <_ZN5Motor8setRatioEdd+0xd8>)
 80045dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045e0:	f7fc fab2 	bl	8000b48 <__aeabi_dcmpgt>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <_ZN5Motor8setRatioEdd+0x6e>
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	4c1c      	ldr	r4, [pc, #112]	; (8004660 <_ZN5Motor8setRatioEdd+0xd8>)
 80045f0:	e9c7 3400 	strd	r3, r4, [r7]
 80045f4:	e00e      	b.n	8004614 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <_ZN5Motor8setRatioEdd+0xdc>)
 80045fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004600:	f7fc fa84 	bl	8000b0c <__aeabi_dcmplt>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <_ZN5Motor8setRatioEdd+0x8c>
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	4c15      	ldr	r4, [pc, #84]	; (8004664 <_ZN5Motor8setRatioEdd+0xdc>)
 8004610:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <_ZN5Motor8setRatioEdd+0xe0>)
 800461a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800461e:	f7fc f803 	bl	8000628 <__aeabi_dmul>
 8004622:	4603      	mov	r3, r0
 8004624:	460c      	mov	r4, r1
 8004626:	4618      	mov	r0, r3
 8004628:	4621      	mov	r1, r4
 800462a:	f7fc faad 	bl	8000b88 <__aeabi_d2iz>
 800462e:	4603      	mov	r3, r0
 8004630:	b21a      	sxth	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <_ZN5Motor8setRatioEdd+0xe0>)
 800463c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004640:	f7fb fff2 	bl	8000628 <__aeabi_dmul>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	4618      	mov	r0, r3
 800464a:	4621      	mov	r1, r4
 800464c:	f7fc fa9c 	bl	8000b88 <__aeabi_d2iz>
 8004650:	4603      	mov	r3, r0
 8004652:	b21a      	sxth	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	805a      	strh	r2, [r3, #2]

}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	3ff00000 	.word	0x3ff00000
 8004664:	bff00000 	.word	0xbff00000
 8004668:	409c2000 	.word	0x409c2000

0800466c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800466c:	b490      	push	{r4, r7}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc90      	pop	{r4, r7}
 80046dc:	4770      	bx	lr
	...

080046e0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80046e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fa6e 	bl	8001bd0 <_ZN3IMU8getOmegaEv>
 80046f4:	ee10 3a10 	vmov	r3, s0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fb ff3d 	bl	8000578 <__aeabi_f2d>
 80046fe:	4603      	mov	r3, r0
 8004700:	460c      	mov	r4, r1
 8004702:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fea0 	bl	8001450 <_ZN7Encoder11getDistanceEv>
 8004710:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004714:	a376      	add	r3, pc, #472	; (adr r3, 80048f0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800471e:	f7fb ff83 	bl	8000628 <__aeabi_dmul>
 8004722:	4603      	mov	r3, r0
 8004724:	460c      	mov	r4, r1
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7fb ff20 	bl	8000578 <__aeabi_f2d>
 8004738:	4682      	mov	sl, r0
 800473a:	468b      	mov	fp, r1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004750:	f7fc f894 	bl	800087c <__aeabi_ddiv>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb fdae 	bl	80002bc <__adddf3>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	ec43 2b17 	vmov	d7, r2, r3
 8004768:	eeb0 0a47 	vmov.f32	s0, s14
 800476c:	eef0 0a67 	vmov.f32	s1, s15
 8004770:	f00e fd46 	bl	8013200 <cos>
 8004774:	ec53 2b10 	vmov	r2, r3, d0
 8004778:	4650      	mov	r0, sl
 800477a:	4659      	mov	r1, fp
 800477c:	f7fb ff54 	bl	8000628 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb fd98 	bl	80002bc <__adddf3>
 800478c:	4603      	mov	r3, r0
 800478e:	460c      	mov	r4, r1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fb feeb 	bl	8000578 <__aeabi_f2d>
 80047a2:	4682      	mov	sl, r0
 80047a4:	468b      	mov	fp, r1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047ba:	f7fc f85f 	bl	800087c <__aeabi_ddiv>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4640      	mov	r0, r8
 80047c4:	4649      	mov	r1, r9
 80047c6:	f7fb fd79 	bl	80002bc <__adddf3>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	ec43 2b17 	vmov	d7, r2, r3
 80047d2:	eeb0 0a47 	vmov.f32	s0, s14
 80047d6:	eef0 0a67 	vmov.f32	s1, s15
 80047da:	f00e fd55 	bl	8013288 <sin>
 80047de:	ec53 2b10 	vmov	r2, r3, d0
 80047e2:	4650      	mov	r0, sl
 80047e4:	4659      	mov	r1, fp
 80047e6:	f7fb ff1f 	bl	8000628 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fb fd63 	bl	80002bc <__adddf3>
 80047f6:	4603      	mov	r3, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800480c:	461a      	mov	r2, r3
 800480e:	4623      	mov	r3, r4
 8004810:	f7fb fd54 	bl	80002bc <__adddf3>
 8004814:	4603      	mov	r3, r0
 8004816:	460c      	mov	r4, r1
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	ed93 7b08 	vldr	d7, [r3, #32]
 800482a:	eeb0 0a47 	vmov.f32	s0, s14
 800482e:	eef0 0a67 	vmov.f32	s1, s15
 8004832:	f00e fce5 	bl	8013200 <cos>
 8004836:	ec51 0b10 	vmov	r0, r1, d0
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004840:	f7fb fef2 	bl	8000628 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4620      	mov	r0, r4
 800484a:	4629      	mov	r1, r5
 800484c:	f7fb fd36 	bl	80002bc <__adddf3>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	ed93 7b08 	vldr	d7, [r3, #32]
 8004866:	eeb0 0a47 	vmov.f32	s0, s14
 800486a:	eef0 0a67 	vmov.f32	s1, s15
 800486e:	f00e fd0b 	bl	8013288 <sin>
 8004872:	ec51 0b10 	vmov	r0, r1, d0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <_ZN8Odometry12calcPotitionEv+0x200>)
 800487c:	f7fb fed4 	bl	8000628 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fb fd18 	bl	80002bc <__adddf3>
 800488c:	4603      	mov	r3, r0
 800488e:	460c      	mov	r4, r1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800489c:	4618      	mov	r0, r3
 800489e:	4621      	mov	r1, r4
 80048a0:	f7fc f9ba 	bl	8000c18 <__aeabi_d2f>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <_ZN8Odometry12calcPotitionEv+0x204>)
 80048a8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80048b0:	4618      	mov	r0, r3
 80048b2:	4621      	mov	r1, r4
 80048b4:	f7fc f9b0 	bl	8000c18 <__aeabi_d2f>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <_ZN8Odometry12calcPotitionEv+0x208>)
 80048bc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80048c4:	4618      	mov	r0, r3
 80048c6:	4621      	mov	r1, r4
 80048c8:	f7fc f9a6 	bl	8000c18 <__aeabi_d2f>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <_ZN8Odometry12calcPotitionEv+0x20c>)
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048dc:	f3af 8000 	nop.w
 80048e0:	405b8000 	.word	0x405b8000
 80048e4:	20000294 	.word	0x20000294
 80048e8:	20000298 	.word	0x20000298
 80048ec:	2000029c 	.word	0x2000029c
 80048f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80048f4:	3f50624d 	.word	0x3f50624d

080048f8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff feed 	bl	80046e0 <_ZN8Odometry12calcPotitionEv>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800490e:	b490      	push	{r4, r7}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
	return theta_;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800491c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004920:	eeb0 0a47 	vmov.f32	s0, s14
 8004924:	eef0 0a67 	vmov.f32	s1, s15
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bc90      	pop	{r4, r7}
 800492e:	4770      	bx	lr

08004930 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004930:	b490      	push	{r4, r7}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bc90      	pop	{r4, r7}
 800496a:	4770      	bx	lr

0800496c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800496c:	b490      	push	{r4, r7}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	f04f 0400 	mov.w	r4, #0
 8004992:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80049ae:	2200      	movs	r2, #0
 80049b0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <_ZN13PathFollowingC1Ev+0xec>)
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <_ZN13PathFollowingC1Ev+0xec>)
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	f04f 0400 	mov.w	r4, #0
 80049ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <_ZN13PathFollowingC1Ev+0xec>)
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f04f 0400 	mov.w	r4, #0
 80049d8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80049ea:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004a06:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	f04f 0400 	mov.w	r4, #0
 8004a10:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	f04f 0400 	mov.w	r4, #0
 8004a1e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <_ZN13PathFollowingC1Ev+0xf0>)
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <_ZN13PathFollowingC1Ev+0xf4>)
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	f04f 0400 	mov.w	r4, #0
 8004a3a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004a3e:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <_ZN13PathFollowingC1Ev+0xf4>)
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc90      	pop	{r4, r7}
 8004a56:	4770      	bx	lr
 8004a58:	2003edc0 	.word	0x2003edc0
 8004a5c:	2003ed50 	.word	0x2003ed50
 8004a60:	2003edb0 	.word	0x2003edb0

08004a64 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004a6c:	f001 fddc 	bl	8006628 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004a70:	f107 0318 	add.w	r3, r7, #24
 8004a74:	2201      	movs	r2, #1
 8004a76:	4915      	ldr	r1, [pc, #84]	; (8004acc <_ZN13PathFollowing4initEv+0x68>)
 8004a78:	4815      	ldr	r0, [pc, #84]	; (8004ad0 <_ZN13PathFollowing4initEv+0x6c>)
 8004a7a:	f7fc fe9b 	bl	80017b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	2201      	movs	r2, #1
 8004a84:	4913      	ldr	r1, [pc, #76]	; (8004ad4 <_ZN13PathFollowing4initEv+0x70>)
 8004a86:	4812      	ldr	r0, [pc, #72]	; (8004ad0 <_ZN13PathFollowing4initEv+0x6c>)
 8004a88:	f7fc fe94 	bl	80017b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	2201      	movs	r2, #1
 8004a92:	4911      	ldr	r1, [pc, #68]	; (8004ad8 <_ZN13PathFollowing4initEv+0x74>)
 8004a94:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <_ZN13PathFollowing4initEv+0x6c>)
 8004a96:	f7fc fe8d 	bl	80017b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004a9a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a9e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004aa2:	ed97 5b02 	vldr	d5, [r7, #8]
 8004aa6:	eeb0 2a45 	vmov.f32	s4, s10
 8004aaa:	eef0 2a65 	vmov.f32	s5, s11
 8004aae:	eeb0 1a46 	vmov.f32	s2, s12
 8004ab2:	eef0 1a66 	vmov.f32	s3, s13
 8004ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aba:	eef0 0a67 	vmov.f32	s1, s15
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f80c 	bl	8004adc <_ZN13PathFollowing7setGainEddd>
}
 8004ac4:	bf00      	nop
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0801882c 	.word	0x0801882c
 8004ad0:	08018834 	.word	0x08018834
 8004ad4:	0801883c 	.word	0x0801883c
 8004ad8:	08018844 	.word	0x08018844

08004adc <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004adc:	b490      	push	{r4, r7}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	61f8      	str	r0, [r7, #28]
 8004ae4:	ed87 0b04 	vstr	d0, [r7, #16]
 8004ae8:	ed87 1b02 	vstr	d1, [r7, #8]
 8004aec:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004af2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004af6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004afa:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004afc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b00:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004b06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b0a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004b0e:	bf00      	nop
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc90      	pop	{r4, r7}
 8004b16:	4770      	bx	lr
 8004b18:	2003edc0 	.word	0x2003edc0

08004b1c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004b24:	2088      	movs	r0, #136	; 0x88
 8004b26:	f7fd f996 	bl	8001e56 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004b2a:	2080      	movs	r0, #128	; 0x80
 8004b2c:	f7fd f993 	bl	8001e56 <INA260_init>
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004b40:	2188      	movs	r1, #136	; 0x88
 8004b42:	2002      	movs	r0, #2
 8004b44:	f7fd f924 	bl	8001d90 <INA260_read>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fb fd02 	bl	8000554 <__aeabi_i2d>
 8004b50:	a30c      	add	r3, pc, #48	; (adr r3, 8004b84 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fd67 	bl	8000628 <__aeabi_dmul>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7fc f859 	bl	8000c18 <__aeabi_d2f>
 8004b66:	4602      	mov	r2, r0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004b72:	6013      	str	r3, [r2, #0]
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}
 8004b7c:	f3af 8000 	nop.w
 8004b80:	200002a0 	.word	0x200002a0
 8004b84:	47ae147b 	.word	0x47ae147b
 8004b88:	3f547ae1 	.word	0x3f547ae1

08004b8c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	ee07 3a90 	vmov	s15, r3

}
 8004b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4822      	ldr	r0, [pc, #136]	; (8004c44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004bbc:	f005 f8a8 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004bd8:	2108      	movs	r1, #8
 8004bda:	481a      	ldr	r0, [pc, #104]	; (8004c44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004bdc:	f005 f898 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	4812      	ldr	r0, [pc, #72]	; (8004c44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004bfc:	f005 f888 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004c10:	89fb      	ldrh	r3, [r7, #14]
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004c18:	2180      	movs	r1, #128	; 0x80
 8004c1a:	480a      	ldr	r0, [pc, #40]	; (8004c44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004c1c:	f005 f878 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	f043 0308 	orr.w	r3, r3, #8
 8004c36:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004c38:	89fb      	ldrh	r3, [r7, #14]

}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40020c00 	.word	0x40020c00

08004c48 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	805a      	strh	r2, [r3, #2]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	809a      	strh	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	719a      	strb	r2, [r3, #6]
{

}
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	799b      	ldrb	r3, [r3, #6]
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80c7 	beq.w	8004e1e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004c90:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f083 0301 	eor.w	r3, r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d027      	beq.n	8004cee <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	4862      	ldr	r0, [pc, #392]	; (8004e2c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004ca2:	f005 f835 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d006      	beq.n	8004cc4 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004cb6:	4b5e      	ldr	r3, [pc, #376]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004cca:	4b59      	ldr	r3, [pc, #356]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d93f      	bls.n	8004d52 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004ce0:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004ce6:	4b52      	ldr	r3, [pc, #328]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e031      	b.n	8004d52 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004cee:	4b4e      	ldr	r3, [pc, #312]	; (8004e28 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02d      	beq.n	8004d52 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	484c      	ldr	r0, [pc, #304]	; (8004e2c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004cfa:	f005 f809 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004d0e:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004d1c:	4b44      	ldr	r3, [pc, #272]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d913      	bls.n	8004d52 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	f083 0301 	eor.w	r3, r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	889a      	ldrh	r2, [r3, #4]
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004d50:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004d52:	4b39      	ldr	r3, [pc, #228]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d027      	beq.n	8004db0 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d64:	4835      	ldr	r0, [pc, #212]	; (8004e3c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004d66:	f004 ffd3 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d006      	beq.n	8004d88 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	e002      	b.n	8004d8e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004d8e:	4b2c      	ldr	r3, [pc, #176]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d90c      	bls.n	8004db0 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004daa:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d02e      	beq.n	8004e16 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dbc:	481f      	ldr	r0, [pc, #124]	; (8004e3c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004dbe:	f004 ffa7 	bl	8009d10 <HAL_GPIO_ReadPin>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d913      	bls.n	8004e16 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	f083 0302 	eor.w	r3, r3, #2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	885b      	ldrh	r3, [r3, #2]
 8004e06:	3301      	adds	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	885a      	ldrh	r2, [r3, #2]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004e14:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004e1c:	801a      	strh	r2, [r3, #0]
	}

}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200002aa 	.word	0x200002aa
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	200002ae 	.word	0x200002ae
 8004e34:	200002a8 	.word	0x200002a8
 8004e38:	200002ab 	.word	0x200002ab
 8004e3c:	40020c00 	.word	0x40020c00
 8004e40:	200002ac 	.word	0x200002ac
 8004e44:	200002a6 	.word	0x200002a6
 8004e48:	200002a4 	.word	0x200002a4

08004e4c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	return status_;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	881b      	ldrh	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	889b      	ldrh	r3, [r3, #4]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	809a      	strh	r2, [r3, #4]
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	719a      	strb	r2, [r3, #6]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	719a      	strb	r2, [r3, #6]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	799b      	ldrb	r3, [r3, #6]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004ef8:	3308      	adds	r3, #8
 8004efa:	4611      	mov	r1, r2
 8004efc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f00f f9fd 	bl	8014300 <memcpy>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08018868 	.word	0x08018868

08004f3c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	ed97 0a00 	vldr	s0, [r7]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f86c 	bl	8004038 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7ff f89e 	bl	80040b0 <_ZN6Logger9storeLog2Ef>
	}

}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004f8a:	4908      	ldr	r1, [pc, #32]	; (8004fac <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff f976 	bl	800427e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a06      	ldr	r2, [pc, #24]	; (8004fb0 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004f98:	4904      	ldr	r1, [pc, #16]	; (8004fac <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f982 	bl	80042a4 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08018a5c 	.word	0x08018a5c
 8004fac:	08018a68 	.word	0x08018a68
 8004fb0:	08018a74 	.word	0x08018a74

08004fb4 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d046      	beq.n	8005054 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3204      	adds	r2, #4
 8004fd8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005006:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800500e:	2bf9      	cmp	r3, #249	; 0xf9
 8005010:	d903      	bls.n	800501a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	22fa      	movs	r2, #250	; 0xfa
 8005016:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685c      	ldr	r4, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb faa7 	bl	8000578 <__aeabi_f2d>
 800502a:	4605      	mov	r5, r0
 800502c:	460e      	mov	r6, r1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005034:	eef1 7a67 	vneg.f32	s15, s15
 8005038:	ee17 3a90 	vmov	r3, s15
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fa9b 	bl	8000578 <__aeabi_f2d>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	ec43 2b11 	vmov	d1, r2, r3
 800504a:	ec46 5b10 	vmov	d0, r5, r6
 800504e:	4620      	mov	r0, r4
 8005050:	f7ff fa9a 	bl	8004588 <_ZN5Motor8setRatioEdd>

	}

}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800505c:	200002b0 	.word	0x200002b0

08005060 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff f9e6 	bl	800445e <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	0000      	movs	r0, r0
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff f9e3 	bl	8004480 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80050e8 <_ZN20SystemIdentification4stopEv+0x40>
 80050d2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80050e8 <_ZN20SystemIdentification4stopEv+0x40>
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fa56 	bl	8004588 <_ZN5Motor8setRatioEdd>
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f3af 8000 	nop.w
	...

080050f0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0), mode_(LINETRACE_MODE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	615a      	str	r2, [r3, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	619a      	str	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	61da      	str	r2, [r3, #28]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	621a      	str	r2, [r3, #32]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	879a      	strh	r2, [r3, #60]	; 0x3c
{
	motor_ = motor;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

}
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	0000      	movs	r0, r0
	...

08005190 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f107 020c 	add.w	r2, r7, #12
 80051a0:	f107 0110 	add.w	r1, r7, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fc f93f 	bl	8001428 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80051aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80051ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80051ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051be:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7fb f9d8 	bl	8000578 <__aeabi_f2d>
 80051c8:	a30b      	add	r3, pc, #44	; (adr r3, 80051f8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb fa2b 	bl	8000628 <__aeabi_dmul>
 80051d2:	4603      	mov	r3, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	4618      	mov	r0, r3
 80051d8:	4621      	mov	r1, r4
 80051da:	f7fb fd1d 	bl	8000c18 <__aeabi_d2f>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	ee07 3a90 	vmov	s15, r3
}
 80051ec:	eeb0 0a67 	vmov.f32	s0, s15
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	1ab1d998 	.word	0x1ab1d998
 80051fc:	3f7830b5 	.word	0x3f7830b5

08005200 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005202:	ed2d 8b02 	vpush	{d8}
 8005206:	b08d      	sub	sp, #52	; 0x34
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	ed93 7a00 	vldr	s14, [r3]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	edd3 7a02 	vldr	s15, [r3, #8]
 8005218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	ed93 8a01 	vldr	s16, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	4618      	mov	r0, r3
 800522c:	f7fc fcd0 	bl	8001bd0 <_ZN3IMU8getOmegaEv>
 8005230:	eef0 7a40 	vmov.f32	s15, s0
 8005234:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005238:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	if(i_reset_flag_ == true){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <_ZN12VelocityCtrl3pidEv+0x5e>
		v_i = o_i = 0;
 8005246:	4b80      	ldr	r3, [pc, #512]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	4b7e      	ldr	r3, [pc, #504]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7e      	ldr	r2, [pc, #504]	; (800544c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005254:	6013      	str	r3, [r2, #0]
		i_reset_flag_ = false;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	edd3 7a04 	vldr	s15, [r3, #16]
 8005264:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8005270:	4b76      	ldr	r3, [pc, #472]	; (800544c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f97f 	bl	8000578 <__aeabi_f2d>
 800527a:	4604      	mov	r4, r0
 800527c:	460d      	mov	r5, r1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	ed93 7a06 	vldr	s14, [r3, #24]
 8005284:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528c:	ee17 0a90 	vmov	r0, s15
 8005290:	f7fb f972 	bl	8000578 <__aeabi_f2d>
 8005294:	a36a      	add	r3, pc, #424	; (adr r3, 8005440 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb f9c5 	bl	8000628 <__aeabi_dmul>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb f809 	bl	80002bc <__adddf3>
 80052aa:	4603      	mov	r3, r0
 80052ac:	460c      	mov	r4, r1
 80052ae:	4618      	mov	r0, r3
 80052b0:	4621      	mov	r1, r4
 80052b2:	f7fb fcb1 	bl	8000c18 <__aeabi_d2f>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b64      	ldr	r3, [pc, #400]	; (800544c <_ZN12VelocityCtrl3pidEv+0x24c>)
 80052ba:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	ed93 7a05 	vldr	s14, [r3, #20]
 80052c2:	4b63      	ldr	r3, [pc, #396]	; (8005450 <_ZN12VelocityCtrl3pidEv+0x250>)
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80052cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d4:	ee17 0a90 	vmov	r0, s15
 80052d8:	f7fb f94e 	bl	8000578 <__aeabi_f2d>
 80052dc:	a358      	add	r3, pc, #352	; (adr r3, 8005440 <_ZN12VelocityCtrl3pidEv+0x240>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb facb 	bl	800087c <__aeabi_ddiv>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	4618      	mov	r0, r3
 80052ec:	4621      	mov	r1, r4
 80052ee:	f7fb fc93 	bl	8000c18 <__aeabi_d2f>
 80052f2:	4603      	mov	r3, r0
 80052f4:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80052fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005304:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 8005308:	4b4f      	ldr	r3, [pc, #316]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb f933 	bl	8000578 <__aeabi_f2d>
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800531c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005324:	ee17 0a90 	vmov	r0, s15
 8005328:	f7fb f926 	bl	8000578 <__aeabi_f2d>
 800532c:	a344      	add	r3, pc, #272	; (adr r3, 8005440 <_ZN12VelocityCtrl3pidEv+0x240>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f7fb f979 	bl	8000628 <__aeabi_dmul>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fa ffbd 	bl	80002bc <__adddf3>
 8005342:	4603      	mov	r3, r0
 8005344:	460c      	mov	r4, r1
 8005346:	4618      	mov	r0, r3
 8005348:	4621      	mov	r1, r4
 800534a:	f7fb fc65 	bl	8000c18 <__aeabi_d2f>
 800534e:	4602      	mov	r2, r0
 8005350:	4b3d      	ldr	r3, [pc, #244]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005352:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) / DELTA_T;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	ed93 7a08 	vldr	s14, [r3, #32]
 800535a:	4b3e      	ldr	r3, [pc, #248]	; (8005454 <_ZN12VelocityCtrl3pidEv+0x254>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005364:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536c:	ee17 0a90 	vmov	r0, s15
 8005370:	f7fb f902 	bl	8000578 <__aeabi_f2d>
 8005374:	a332      	add	r3, pc, #200	; (adr r3, 8005440 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb fa7f 	bl	800087c <__aeabi_ddiv>
 800537e:	4603      	mov	r3, r0
 8005380:	460c      	mov	r4, r1
 8005382:	4618      	mov	r0, r3
 8005384:	4621      	mov	r1, r4
 8005386:	f7fb fc47 	bl	8000c18 <__aeabi_d2f>
 800538a:	4603      	mov	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 800538e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005392:	edd7 7a08 	vldr	s15, [r7, #32]
 8005396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800539a:	4b2c      	ldr	r3, [pc, #176]	; (800544c <_ZN12VelocityCtrl3pidEv+0x24c>)
 800539c:	edd3 7a00 	vldr	s15, [r3]
 80053a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80053ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80053b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80053b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053b8:	4b23      	ldr	r3, [pc, #140]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c2:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80053c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80053ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80053ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <_ZN12VelocityCtrl3pidEv+0x248>)
 80053d4:	edd3 7a00 	vldr	s15, [r3]
 80053d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053dc:	eef1 7a67 	vneg.f32	s15, s15
 80053e0:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80053e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80053ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f4:	ee17 0a90 	vmov	r0, s15
 80053f8:	f7fb f8be 	bl	8000578 <__aeabi_f2d>
 80053fc:	4605      	mov	r5, r0
 80053fe:	460e      	mov	r6, r1
 8005400:	ed97 7a05 	vldr	s14, [r7, #20]
 8005404:	edd7 7a02 	vldr	s15, [r7, #8]
 8005408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540c:	ee17 0a90 	vmov	r0, s15
 8005410:	f7fb f8b2 	bl	8000578 <__aeabi_f2d>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	ec43 2b11 	vmov	d1, r2, r3
 800541c:	ec46 5b10 	vmov	d0, r5, r6
 8005420:	4620      	mov	r0, r4
 8005422:	f7ff f8b1 	bl	8004588 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <_ZN12VelocityCtrl3pidEv+0x250>)
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <_ZN12VelocityCtrl3pidEv+0x254>)
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	6013      	str	r3, [r2, #0]
}
 8005432:	bf00      	nop
 8005434:	3734      	adds	r7, #52	; 0x34
 8005436:	46bd      	mov	sp, r7
 8005438:	ecbd 8b02 	vpop	{d8}
 800543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543e:	bf00      	nop
 8005440:	d2f1a9fc 	.word	0xd2f1a9fc
 8005444:	3f50624d 	.word	0x3f50624d
 8005448:	200002c0 	.word	0x200002c0
 800544c:	200002bc 	.word	0x200002bc
 8005450:	200002b4 	.word	0x200002b4
 8005454:	200002b8 	.word	0x200002b8

08005458 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:

void VelocityCtrl::pidTranslationOnly()
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	ed93 7a00 	vldr	s14, [r3]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	edd3 7a02 	vldr	s15, [r3, #8]
 800546c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005470:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800547e:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	edd3 7a04 	vldr	s15, [r3, #16]
 8005494:	ed97 7a05 	vldr	s14, [r7, #20]
 8005498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80054a0:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb f867 	bl	8000578 <__aeabi_f2d>
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80054b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	ee17 0a90 	vmov	r0, s15
 80054c0:	f7fb f85a 	bl	8000578 <__aeabi_f2d>
 80054c4:	a334      	add	r3, pc, #208	; (adr r3, 8005598 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fb f8ad 	bl	8000628 <__aeabi_dmul>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fa fef1 	bl	80002bc <__adddf3>
 80054da:	4603      	mov	r3, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	4618      	mov	r0, r3
 80054e0:	4621      	mov	r1, r4
 80054e2:	f7fb fb99 	bl	8000c18 <__aeabi_d2f>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054ea:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80054fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	ee17 0a90 	vmov	r0, s15
 8005508:	f7fb f836 	bl	8000578 <__aeabi_f2d>
 800550c:	a322      	add	r3, pc, #136	; (adr r3, 8005598 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fb f9b3 	bl	800087c <__aeabi_ddiv>
 8005516:	4603      	mov	r3, r0
 8005518:	460c      	mov	r4, r1
 800551a:	4618      	mov	r0, r3
 800551c:	4621      	mov	r1, r4
 800551e:	f7fb fb7b 	bl	8000c18 <__aeabi_d2f>
 8005522:	4603      	mov	r3, r0
 8005524:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005526:	ed97 7a04 	vldr	s14, [r7, #16]
 800552a:	edd7 7a03 	vldr	s15, [r7, #12]
 800552e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800554a:	edd7 7a02 	vldr	s15, [r7, #8]
 800554e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005552:	ee17 0a90 	vmov	r0, s15
 8005556:	f7fb f80f 	bl	8000578 <__aeabi_f2d>
 800555a:	4605      	mov	r5, r0
 800555c:	460e      	mov	r6, r1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005564:	ed97 7a02 	vldr	s14, [r7, #8]
 8005568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556c:	ee17 0a90 	vmov	r0, s15
 8005570:	f7fb f802 	bl	8000578 <__aeabi_f2d>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	ec43 2b11 	vmov	d1, r2, r3
 800557c:	ec46 5b10 	vmov	d0, r5, r6
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff f801 	bl	8004588 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005586:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	f3af 8000 	nop.w
 8005598:	d2f1a9fc 	.word	0xd2f1a9fc
 800559c:	3f50624d 	.word	0x3f50624d
 80055a0:	200002c8 	.word	0x200002c8
 80055a4:	200002c4 	.word	0x200002c4

080055a8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80055b4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	605a      	str	r2, [r3, #4]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80055dc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	ed87 0a02 	vstr	s0, [r7, #8]
 8005604:	edc7 0a01 	vstr	s1, [r7, #4]
 8005608:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	615a      	str	r2, [r3, #20]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	ed87 0a02 	vstr	s0, [r7, #8]
 8005636:	edc7 0a01 	vstr	s1, [r7, #4]
 800563a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fd93 	bl	8005190 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <_ZN12VelocityCtrl4flipEv+0x36>
		if(mode_ == STRAIGHT_MODE){
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d103      	bne.n	8005684 <_ZN12VelocityCtrl4flipEv+0x28>
			pid();
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fdbf 	bl	8005200 <_ZN12VelocityCtrl3pidEv>
			pidTranslationOnly();
		}
	}


}
 8005682:	e006      	b.n	8005692 <_ZN12VelocityCtrl4flipEv+0x36>
		else if(mode_ == LINETRACE_MODE){
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <_ZN12VelocityCtrl4flipEv+0x36>
			pidTranslationOnly();
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fee3 	bl	8005458 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80056f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80056d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80056f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe ff53 	bl	8004588 <_ZN5Motor8setRatioEdd>

}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w
	...

080056f8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	ee07 3a90 	vmov	s15, r3
}
 8005708:	eeb0 0a67 	vmov.f32	s0, s15
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <_ZN12VelocityCtrl7setModeEt>:
	return current_omega_;
}
*/

void VelocityCtrl::setMode(uint16_t mode)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	807b      	strh	r3, [r7, #2]
	mode_ = mode;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005746:	f001 fe27 	bl	8007398 <cppFlip100ns>

		tim7_timer++;
 800574a:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005752:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005754:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d902      	bls.n	8005764 <HAL_TIM_PeriodElapsedCallback+0x30>
 800575e:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10e      	bne.n	800578c <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800576e:	f001 fdc9 	bl	8007304 <cppFlip1ms>

		tim6_timer++;
 8005772:	4b16      	ldr	r3, [pc, #88]	; (80057cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800577a:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d902      	bls.n	800578c <HAL_TIM_PeriodElapsedCallback+0x58>
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0f      	ldr	r2, [pc, #60]	; (80057d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005796:	f001 fe09 	bl	80073ac <cppFlip10ms>

		tim13_timer++;
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057a2:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a06      	ldr	r2, [pc, #24]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d902      	bls.n	80057b4 <HAL_TIM_PeriodElapsedCallback+0x80>
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
	}

}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40001400 	.word	0x40001400
 80057c0:	2003ea70 	.word	0x2003ea70
 80057c4:	0001869f 	.word	0x0001869f
 80057c8:	40001000 	.word	0x40001000
 80057cc:	2003ea2c 	.word	0x2003ea2c
 80057d0:	40001c00 	.word	0x40001c00
 80057d4:	2003ea74 	.word	0x2003ea74

080057d8 <init>:

void init()
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80057dc:	2201      	movs	r2, #1
 80057de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057e2:	4808      	ldr	r0, [pc, #32]	; (8005804 <init+0x2c>)
 80057e4:	f004 faac 	bl	8009d40 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80057e8:	4807      	ldr	r0, [pc, #28]	; (8005808 <init+0x30>)
 80057ea:	f008 f974 	bl	800dad6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80057ee:	4807      	ldr	r0, [pc, #28]	; (800580c <init+0x34>)
 80057f0:	f008 f971 	bl	800dad6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80057f4:	4806      	ldr	r0, [pc, #24]	; (8005810 <init+0x38>)
 80057f6:	f008 f96e 	bl	800dad6 <HAL_TIM_Base_Start_IT>

	cppInit();
 80057fa:	f001 fce3 	bl	80071c4 <cppInit>

	//path_following_initialize();

}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	2003eb58 	.word	0x2003eb58
 800580c:	2003ecfc 	.word	0x2003ecfc
 8005810:	2003ea78 	.word	0x2003ea78

08005814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005818:	f002 ff8a 	bl	8008730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800581c:	f000 f82a 	bl	8005874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005820:	f000 fdbc 	bl	800639c <MX_GPIO_Init>
  MX_DMA_Init();
 8005824:	f000 fd8a 	bl	800633c <MX_DMA_Init>
  MX_I2C2_Init();
 8005828:	f000 f9e8 	bl	8005bfc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800582c:	f000 fa14 	bl	8005c58 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005830:	f000 fa32 	bl	8005c98 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005834:	f000 fa66 	bl	8005d04 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005838:	f000 fb70 	bl	8005f1c <MX_TIM4_Init>
  MX_TIM8_Init();
 800583c:	f000 fc3c 	bl	80060b8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005840:	f000 fd52 	bl	80062e8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005844:	f00a f91a 	bl	800fa7c <MX_FATFS_Init>
  MX_TIM6_Init();
 8005848:	f000 fbcc 	bl	8005fe4 <MX_TIM6_Init>
  MX_I2C1_Init();
 800584c:	f000 f9a8 	bl	8005ba0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005850:	f000 fb00 	bl	8005e54 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005854:	f000 fc88 	bl	8006168 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005858:	f000 fcd4 	bl	8006204 <MX_TIM11_Init>
  MX_ADC2_Init();
 800585c:	f000 f898 	bl	8005990 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005860:	f000 fbf6 	bl	8006050 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005864:	f000 fd1c 	bl	80062a0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005868:	f7ff ffb6 	bl	80057d8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 800586c:	f001 fdbc 	bl	80073e8 <cppLoop>
 8005870:	e7fc      	b.n	800586c <main+0x58>
	...

08005874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b0a4      	sub	sp, #144	; 0x90
 8005878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800587a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800587e:	2234      	movs	r2, #52	; 0x34
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f00e fd47 	bl	8014316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	223c      	movs	r2, #60	; 0x3c
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f00e fd38 	bl	8014316 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b37      	ldr	r3, [pc, #220]	; (8005988 <SystemClock_Config+0x114>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	4a36      	ldr	r2, [pc, #216]	; (8005988 <SystemClock_Config+0x114>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	; 0x40
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <SystemClock_Config+0x114>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	4b31      	ldr	r3, [pc, #196]	; (800598c <SystemClock_Config+0x118>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a30      	ldr	r2, [pc, #192]	; (800598c <SystemClock_Config+0x118>)
 80058cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4b2e      	ldr	r3, [pc, #184]	; (800598c <SystemClock_Config+0x118>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058de:	2301      	movs	r3, #1
 80058e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058e8:	2302      	movs	r3, #2
 80058ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058f0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80058f2:	2308      	movs	r3, #8
 80058f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80058f6:	23b4      	movs	r3, #180	; 0xb4
 80058f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058fc:	2302      	movs	r3, #2
 80058fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005902:	2308      	movs	r3, #8
 8005904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005908:	2302      	movs	r3, #2
 800590a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800590e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005912:	4618      	mov	r0, r3
 8005914:	f005 fe36 	bl	800b584 <HAL_RCC_OscConfig>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800591e:	f000 fe7f 	bl	8006620 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005922:	f005 f9b1 	bl	800ac88 <HAL_PWREx_EnableOverDrive>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800592c:	f000 fe78 	bl	8006620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005930:	230f      	movs	r3, #15
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005934:	2302      	movs	r3, #2
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005938:	2300      	movs	r3, #0
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800593c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005940:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005946:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800594c:	2105      	movs	r1, #5
 800594e:	4618      	mov	r0, r3
 8005950:	f005 f9ea 	bl	800ad28 <HAL_RCC_ClockConfig>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800595a:	f000 fe61 	bl	8006620 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800595e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005962:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005964:	2300      	movs	r3, #0
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005968:	2300      	movs	r3, #0
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4618      	mov	r0, r3
 8005972:	f005 fbc9 	bl	800b108 <HAL_RCCEx_PeriphCLKConfig>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800597c:	f000 fe50 	bl	8006620 <Error_Handler>
  }
}
 8005980:	bf00      	nop
 8005982:	3790      	adds	r7, #144	; 0x90
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40023800 	.word	0x40023800
 800598c:	40007000 	.word	0x40007000

08005990 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005996:	463b      	mov	r3, r7
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80059a2:	4b7c      	ldr	r3, [pc, #496]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059a4:	4a7c      	ldr	r2, [pc, #496]	; (8005b98 <MX_ADC2_Init+0x208>)
 80059a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80059a8:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80059b0:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80059b6:	4b77      	ldr	r3, [pc, #476]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80059bc:	4b75      	ldr	r3, [pc, #468]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059be:	2201      	movs	r2, #1
 80059c0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80059c2:	4b74      	ldr	r3, [pc, #464]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80059ca:	4b72      	ldr	r3, [pc, #456]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80059d0:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059d2:	4a72      	ldr	r2, [pc, #456]	; (8005b9c <MX_ADC2_Init+0x20c>)
 80059d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059d6:	4b6f      	ldr	r3, [pc, #444]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059d8:	2200      	movs	r2, #0
 80059da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80059dc:	4b6d      	ldr	r3, [pc, #436]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059de:	220e      	movs	r2, #14
 80059e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80059ea:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80059f0:	4868      	ldr	r0, [pc, #416]	; (8005b94 <MX_ADC2_Init+0x204>)
 80059f2:	f002 ff31 	bl	8008858 <HAL_ADC_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80059fc:	f000 fe10 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005a00:	230a      	movs	r3, #10
 8005a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005a08:	2306      	movs	r3, #6
 8005a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4860      	ldr	r0, [pc, #384]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a12:	f003 f875 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005a1c:	f000 fe00 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005a20:	230b      	movs	r3, #11
 8005a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005a24:	2302      	movs	r3, #2
 8005a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a28:	463b      	mov	r3, r7
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4859      	ldr	r0, [pc, #356]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a2e:	f003 f867 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005a38:	f000 fdf2 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005a40:	2303      	movs	r3, #3
 8005a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a44:	463b      	mov	r3, r7
 8005a46:	4619      	mov	r1, r3
 8005a48:	4852      	ldr	r0, [pc, #328]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a4a:	f003 f859 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005a54:	f000 fde4 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a58:	230d      	movs	r3, #13
 8005a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a60:	463b      	mov	r3, r7
 8005a62:	4619      	mov	r1, r3
 8005a64:	484b      	ldr	r0, [pc, #300]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a66:	f003 f84b 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005a70:	f000 fdd6 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005a78:	2305      	movs	r3, #5
 8005a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4844      	ldr	r0, [pc, #272]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a82:	f003 f83d 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005a8c:	f000 fdc8 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005a94:	2306      	movs	r3, #6
 8005a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	483d      	ldr	r0, [pc, #244]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005a9e:	f003 f82f 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005aa8:	f000 fdba 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005aac:	2302      	movs	r3, #2
 8005aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005ab0:	2307      	movs	r3, #7
 8005ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4836      	ldr	r0, [pc, #216]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005aba:	f003 f821 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005ac4:	f000 fdac 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005acc:	2308      	movs	r3, #8
 8005ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	482f      	ldr	r0, [pc, #188]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005ad6:	f003 f813 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005ae0:	f000 fd9e 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ae8:	2309      	movs	r3, #9
 8005aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005aec:	463b      	mov	r3, r7
 8005aee:	4619      	mov	r1, r3
 8005af0:	4828      	ldr	r0, [pc, #160]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005af2:	f003 f805 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005afc:	f000 fd90 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005b00:	2305      	movs	r3, #5
 8005b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005b04:	230a      	movs	r3, #10
 8005b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4821      	ldr	r0, [pc, #132]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005b0e:	f002 fff7 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005b18:	f000 fd82 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005b1c:	2306      	movs	r3, #6
 8005b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005b20:	230b      	movs	r3, #11
 8005b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b24:	463b      	mov	r3, r7
 8005b26:	4619      	mov	r1, r3
 8005b28:	481a      	ldr	r0, [pc, #104]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005b2a:	f002 ffe9 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005b34:	f000 fd74 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005b38:	2307      	movs	r3, #7
 8005b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b40:	463b      	mov	r3, r7
 8005b42:	4619      	mov	r1, r3
 8005b44:	4813      	ldr	r0, [pc, #76]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005b46:	f002 ffdb 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005b50:	f000 fd66 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005b54:	2308      	movs	r3, #8
 8005b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005b58:	230d      	movs	r3, #13
 8005b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	4619      	mov	r1, r3
 8005b60:	480c      	ldr	r0, [pc, #48]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005b62:	f002 ffcd 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005b6c:	f000 fd58 	bl	8006620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b70:	2309      	movs	r3, #9
 8005b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005b74:	230e      	movs	r3, #14
 8005b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b78:	463b      	mov	r3, r7
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4805      	ldr	r0, [pc, #20]	; (8005b94 <MX_ADC2_Init+0x204>)
 8005b7e:	f002 ffbf 	bl	8008b00 <HAL_ADC_ConfigChannel>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005b88:	f000 fd4a 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	2003e8fc 	.word	0x2003e8fc
 8005b98:	40012100 	.word	0x40012100
 8005b9c:	0f000001 	.word	0x0f000001

08005ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ba4:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <MX_I2C1_Init+0x54>)
 8005ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bac:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <MX_I2C1_Init+0x58>)
 8005bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bdc:	4804      	ldr	r0, [pc, #16]	; (8005bf0 <MX_I2C1_Init+0x50>)
 8005bde:	f004 f8c9 	bl	8009d74 <HAL_I2C_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005be8:	f000 fd1a 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bec:	bf00      	nop
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2003e944 	.word	0x2003e944
 8005bf4:	40005400 	.word	0x40005400
 8005bf8:	000186a0 	.word	0x000186a0

08005bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c02:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <MX_I2C2_Init+0x54>)
 8005c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c08:	4a12      	ldr	r2, [pc, #72]	; (8005c54 <MX_I2C2_Init+0x58>)
 8005c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005c12:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c18:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c2c:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c38:	4804      	ldr	r0, [pc, #16]	; (8005c4c <MX_I2C2_Init+0x50>)
 8005c3a:	f004 f89b 	bl	8009d74 <HAL_I2C_Init>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c44:	f000 fcec 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c48:	bf00      	nop
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2003e9d8 	.word	0x2003e9d8
 8005c50:	40005800 	.word	0x40005800
 8005c54:	000186a0 	.word	0x000186a0

08005c58 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c5e:	4a0d      	ldr	r2, [pc, #52]	; (8005c94 <MX_SDIO_SD_Init+0x3c>)
 8005c60:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <MX_SDIO_SD_Init+0x38>)
 8005c82:	2202      	movs	r2, #2
 8005c84:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	2003ebd8 	.word	0x2003ebd8
 8005c94:	40012c00 	.word	0x40012c00

08005c98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c9c:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <MX_SPI2_Init+0x68>)
 8005ca0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ca8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cb0:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005cc2:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005ccc:	2228      	movs	r2, #40	; 0x28
 8005cce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cdc:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ce8:	4804      	ldr	r0, [pc, #16]	; (8005cfc <MX_SPI2_Init+0x64>)
 8005cea:	f007 f975 	bl	800cfd8 <HAL_SPI_Init>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005cf4:	f000 fc94 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	2003e824 	.word	0x2003e824
 8005d00:	40003800 	.word	0x40003800

08005d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b09a      	sub	sp, #104	; 0x68
 8005d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d0e:	2224      	movs	r2, #36	; 0x24
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f00e faff 	bl	8014316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d22:	f107 0320 	add.w	r3, r7, #32
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	605a      	str	r2, [r3, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	615a      	str	r2, [r3, #20]
 8005d34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d36:	463b      	mov	r3, r7
 8005d38:	2220      	movs	r2, #32
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f00e faea 	bl	8014316 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d42:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d44:	4a42      	ldr	r2, [pc, #264]	; (8005e50 <MX_TIM1_Init+0x14c>)
 8005d46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d48:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005d54:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d5c:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d62:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d68:	4b38      	ldr	r3, [pc, #224]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d6e:	4837      	ldr	r0, [pc, #220]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005d70:	f007 fed5 	bl	800db1e <HAL_TIM_PWM_Init>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005d7a:	f000 fc51 	bl	8006620 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d82:	2300      	movs	r3, #0
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d86:	2301      	movs	r3, #1
 8005d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d92:	2300      	movs	r3, #0
 8005d94:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d96:	2301      	movs	r3, #1
 8005d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005da2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005da6:	4619      	mov	r1, r3
 8005da8:	4828      	ldr	r0, [pc, #160]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005daa:	f007 ff21 	bl	800dbf0 <HAL_TIM_Encoder_Init>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005db4:	f000 fc34 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4821      	ldr	r0, [pc, #132]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005dc8:	f008 fc48 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005dd2:	f000 fc25 	bl	8006620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dd6:	2360      	movs	r3, #96	; 0x60
 8005dd8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dde:	2300      	movs	r3, #0
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005de2:	2300      	movs	r3, #0
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005df2:	f107 0320 	add.w	r3, r7, #32
 8005df6:	2208      	movs	r2, #8
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4814      	ldr	r0, [pc, #80]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005dfc:	f008 f8ca 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005e06:	f000 fc0b 	bl	8006620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4807      	ldr	r0, [pc, #28]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005e2e:	f008 fc91 	bl	800e754 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005e38:	f000 fbf2 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e3c:	4803      	ldr	r0, [pc, #12]	; (8005e4c <MX_TIM1_Init+0x148>)
 8005e3e:	f000 ffdf 	bl	8006e00 <HAL_TIM_MspPostInit>

}
 8005e42:	bf00      	nop
 8005e44:	3768      	adds	r7, #104	; 0x68
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2003eb98 	.word	0x2003eb98
 8005e50:	40010000 	.word	0x40010000

08005e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e5a:	f107 0320 	add.w	r3, r7, #32
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
 8005e6e:	60da      	str	r2, [r3, #12]
 8005e70:	611a      	str	r2, [r3, #16]
 8005e72:	615a      	str	r2, [r3, #20]
 8005e74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e78:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <MX_TIM3_Init+0xc4>)
 8005e7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005e88:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e9c:	481d      	ldr	r0, [pc, #116]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005e9e:	f007 fe3e 	bl	800db1e <HAL_TIM_PWM_Init>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005ea8:	f000 fbba 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eac:	2300      	movs	r3, #0
 8005eae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005eb4:	f107 0320 	add.w	r3, r7, #32
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4816      	ldr	r0, [pc, #88]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005ebc:	f008 fbce 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005ec6:	f000 fbab 	bl	8006620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005eca:	2360      	movs	r3, #96	; 0x60
 8005ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	2200      	movs	r2, #0
 8005ede:	4619      	mov	r1, r3
 8005ee0:	480c      	ldr	r0, [pc, #48]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005ee2:	f008 f857 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005eec:	f000 fb98 	bl	8006620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ef0:	1d3b      	adds	r3, r7, #4
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4807      	ldr	r0, [pc, #28]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005ef8:	f008 f84c 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005f02:	f000 fb8d 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005f06:	4803      	ldr	r0, [pc, #12]	; (8005f14 <MX_TIM3_Init+0xc0>)
 8005f08:	f000 ff7a 	bl	8006e00 <HAL_TIM_MspPostInit>

}
 8005f0c:	bf00      	nop
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2003ea30 	.word	0x2003ea30
 8005f18:	40000400 	.word	0x40000400

08005f1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f22:	f107 0320 	add.w	r3, r7, #32
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	60da      	str	r2, [r3, #12]
 8005f38:	611a      	str	r2, [r3, #16]
 8005f3a:	615a      	str	r2, [r3, #20]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005f3e:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f40:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <MX_TIM4_Init+0xc4>)
 8005f42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005f44:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f52:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005f56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f58:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f5e:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f64:	481d      	ldr	r0, [pc, #116]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f66:	f007 fdda 	bl	800db1e <HAL_TIM_PWM_Init>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005f70:	f000 fb56 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f74:	2300      	movs	r3, #0
 8005f76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f7c:	f107 0320 	add.w	r3, r7, #32
 8005f80:	4619      	mov	r1, r3
 8005f82:	4816      	ldr	r0, [pc, #88]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005f84:	f008 fb6a 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005f8e:	f000 fb47 	bl	8006620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f92:	2360      	movs	r3, #96	; 0x60
 8005f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005faa:	f007 fff3 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005fb4:	f000 fb34 	bl	8006620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	220c      	movs	r2, #12
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4807      	ldr	r0, [pc, #28]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005fc0:	f007 ffe8 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005fca:	f000 fb29 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005fce:	4803      	ldr	r0, [pc, #12]	; (8005fdc <MX_TIM4_Init+0xc0>)
 8005fd0:	f000 ff16 	bl	8006e00 <HAL_TIM_MspPostInit>

}
 8005fd4:	bf00      	nop
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	2003e8bc 	.word	0x2003e8bc
 8005fe0:	40000800 	.word	0x40000800

08005fe4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fea:	463b      	mov	r3, r7
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <MX_TIM6_Init+0x64>)
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <MX_TIM6_Init+0x68>)
 8005ff6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <MX_TIM6_Init+0x64>)
 8005ffa:	2259      	movs	r2, #89	; 0x59
 8005ffc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <MX_TIM6_Init+0x64>)
 8006000:	2200      	movs	r2, #0
 8006002:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <MX_TIM6_Init+0x64>)
 8006006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800600a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800600c:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <MX_TIM6_Init+0x64>)
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006012:	480d      	ldr	r0, [pc, #52]	; (8006048 <MX_TIM6_Init+0x64>)
 8006014:	f007 fd34 	bl	800da80 <HAL_TIM_Base_Init>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800601e:	f000 faff 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006022:	2300      	movs	r3, #0
 8006024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800602a:	463b      	mov	r3, r7
 800602c:	4619      	mov	r1, r3
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <MX_TIM6_Init+0x64>)
 8006030:	f008 fb14 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800603a:	f000 faf1 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2003eb58 	.word	0x2003eb58
 800604c:	40001000 	.word	0x40001000

08006050 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006056:	463b      	mov	r3, r7
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800605e:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <MX_TIM7_Init+0x60>)
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <MX_TIM7_Init+0x64>)
 8006062:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <MX_TIM7_Init+0x60>)
 8006066:	22b3      	movs	r2, #179	; 0xb3
 8006068:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800606a:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <MX_TIM7_Init+0x60>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <MX_TIM7_Init+0x60>)
 8006072:	2231      	movs	r2, #49	; 0x31
 8006074:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <MX_TIM7_Init+0x60>)
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800607c:	480c      	ldr	r0, [pc, #48]	; (80060b0 <MX_TIM7_Init+0x60>)
 800607e:	f007 fcff 	bl	800da80 <HAL_TIM_Base_Init>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006088:	f000 faca 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800608c:	2300      	movs	r3, #0
 800608e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006090:	2300      	movs	r3, #0
 8006092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	4805      	ldr	r0, [pc, #20]	; (80060b0 <MX_TIM7_Init+0x60>)
 800609a:	f008 fadf 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80060a4:	f000 fabc 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2003ecfc 	.word	0x2003ecfc
 80060b4:	40001400 	.word	0x40001400

080060b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060be:	f107 030c 	add.w	r3, r7, #12
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00e f925 	bl	8014316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80060d4:	4b22      	ldr	r3, [pc, #136]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060d6:	4a23      	ldr	r2, [pc, #140]	; (8006164 <MX_TIM8_Init+0xac>)
 80060d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060dc:	2200      	movs	r2, #0
 80060de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060e2:	2210      	movs	r2, #16
 80060e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80060f4:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060fa:	4b19      	ldr	r3, [pc, #100]	; (8006160 <MX_TIM8_Init+0xa8>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006100:	2303      	movs	r3, #3
 8006102:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006114:	2300      	movs	r3, #0
 8006116:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006118:	2301      	movs	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800611c:	2300      	movs	r3, #0
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	4619      	mov	r1, r3
 800612a:	480d      	ldr	r0, [pc, #52]	; (8006160 <MX_TIM8_Init+0xa8>)
 800612c:	f007 fd60 	bl	800dbf0 <HAL_TIM_Encoder_Init>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006136:	f000 fa73 	bl	8006620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4806      	ldr	r0, [pc, #24]	; (8006160 <MX_TIM8_Init+0xa8>)
 8006148:	f008 fa88 	bl	800e65c <HAL_TIMEx_MasterConfigSynchronization>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006152:	f000 fa65 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006156:	bf00      	nop
 8006158:	3730      	adds	r7, #48	; 0x30
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	2003e87c 	.word	0x2003e87c
 8006164:	40010400 	.word	0x40010400

08006168 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	611a      	str	r2, [r3, #16]
 800617c:	615a      	str	r2, [r3, #20]
 800617e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <MX_TIM10_Init+0x94>)
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <MX_TIM10_Init+0x98>)
 8006184:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <MX_TIM10_Init+0x94>)
 8006188:	2200      	movs	r2, #0
 800618a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <MX_TIM10_Init+0x94>)
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <MX_TIM10_Init+0x94>)
 8006194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006198:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <MX_TIM10_Init+0x94>)
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <MX_TIM10_Init+0x94>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80061a6:	4815      	ldr	r0, [pc, #84]	; (80061fc <MX_TIM10_Init+0x94>)
 80061a8:	f007 fc6a 	bl	800da80 <HAL_TIM_Base_Init>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80061b2:	f000 fa35 	bl	8006620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80061b6:	4811      	ldr	r0, [pc, #68]	; (80061fc <MX_TIM10_Init+0x94>)
 80061b8:	f007 fcb1 	bl	800db1e <HAL_TIM_PWM_Init>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80061c2:	f000 fa2d 	bl	8006620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061c6:	2360      	movs	r3, #96	; 0x60
 80061c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	2200      	movs	r2, #0
 80061da:	4619      	mov	r1, r3
 80061dc:	4807      	ldr	r0, [pc, #28]	; (80061fc <MX_TIM10_Init+0x94>)
 80061de:	f007 fed9 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80061e8:	f000 fa1a 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80061ec:	4803      	ldr	r0, [pc, #12]	; (80061fc <MX_TIM10_Init+0x94>)
 80061ee:	f000 fe07 	bl	8006e00 <HAL_TIM_MspPostInit>

}
 80061f2:	bf00      	nop
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2003e998 	.word	0x2003e998
 8006200:	40014400 	.word	0x40014400

08006204 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	611a      	str	r2, [r3, #16]
 8006218:	615a      	str	r2, [r3, #20]
 800621a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <MX_TIM11_Init+0x94>)
 800621e:	4a1f      	ldr	r2, [pc, #124]	; (800629c <MX_TIM11_Init+0x98>)
 8006220:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <MX_TIM11_Init+0x94>)
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <MX_TIM11_Init+0x94>)
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <MX_TIM11_Init+0x94>)
 8006230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006234:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <MX_TIM11_Init+0x94>)
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <MX_TIM11_Init+0x94>)
 800623e:	2200      	movs	r2, #0
 8006240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006242:	4815      	ldr	r0, [pc, #84]	; (8006298 <MX_TIM11_Init+0x94>)
 8006244:	f007 fc1c 	bl	800da80 <HAL_TIM_Base_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800624e:	f000 f9e7 	bl	8006620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006252:	4811      	ldr	r0, [pc, #68]	; (8006298 <MX_TIM11_Init+0x94>)
 8006254:	f007 fc63 	bl	800db1e <HAL_TIM_PWM_Init>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800625e:	f000 f9df 	bl	8006620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006262:	2360      	movs	r3, #96	; 0x60
 8006264:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	2200      	movs	r2, #0
 8006276:	4619      	mov	r1, r3
 8006278:	4807      	ldr	r0, [pc, #28]	; (8006298 <MX_TIM11_Init+0x94>)
 800627a:	f007 fe8b 	bl	800df94 <HAL_TIM_PWM_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006284:	f000 f9cc 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <MX_TIM11_Init+0x94>)
 800628a:	f000 fdb9 	bl	8006e00 <HAL_TIM_MspPostInit>

}
 800628e:	bf00      	nop
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2003eab8 	.word	0x2003eab8
 800629c:	40014800 	.word	0x40014800

080062a0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062a6:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <MX_TIM13_Init+0x44>)
 80062a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062ac:	2259      	movs	r2, #89	; 0x59
 80062ae:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80062bc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062c6:	2280      	movs	r2, #128	; 0x80
 80062c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80062ca:	4805      	ldr	r0, [pc, #20]	; (80062e0 <MX_TIM13_Init+0x40>)
 80062cc:	f007 fbd8 	bl	800da80 <HAL_TIM_Base_Init>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80062d6:	f000 f9a3 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	2003ea78 	.word	0x2003ea78
 80062e4:	40001c00 	.word	0x40001c00

080062e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 80062ee:	4a12      	ldr	r2, [pc, #72]	; (8006338 <MX_USART2_UART_Init+0x50>)
 80062f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 80062f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 800630e:	220c      	movs	r2, #12
 8006310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 8006314:	2200      	movs	r2, #0
 8006316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 800631a:	2200      	movs	r2, #0
 800631c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800631e:	4805      	ldr	r0, [pc, #20]	; (8006334 <MX_USART2_UART_Init+0x4c>)
 8006320:	f008 fa7e 	bl	800e820 <HAL_UART_Init>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800632a:	f000 f979 	bl	8006620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2003ec5c 	.word	0x2003ec5c
 8006338:	40004400 	.word	0x40004400

0800633c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	607b      	str	r3, [r7, #4]
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <MX_DMA_Init+0x5c>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	4a13      	ldr	r2, [pc, #76]	; (8006398 <MX_DMA_Init+0x5c>)
 800634c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006350:	6313      	str	r3, [r2, #48]	; 0x30
 8006352:	4b11      	ldr	r3, [pc, #68]	; (8006398 <MX_DMA_Init+0x5c>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	607b      	str	r3, [r7, #4]
 800635c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	203a      	movs	r0, #58	; 0x3a
 8006364:	f002 ff57 	bl	8009216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006368:	203a      	movs	r0, #58	; 0x3a
 800636a:	f002 ff70 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800636e:	2200      	movs	r2, #0
 8006370:	2100      	movs	r1, #0
 8006372:	203b      	movs	r0, #59	; 0x3b
 8006374:	f002 ff4f 	bl	8009216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006378:	203b      	movs	r0, #59	; 0x3b
 800637a:	f002 ff68 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800637e:	2200      	movs	r2, #0
 8006380:	2100      	movs	r1, #0
 8006382:	2045      	movs	r0, #69	; 0x45
 8006384:	f002 ff47 	bl	8009216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006388:	2045      	movs	r0, #69	; 0x45
 800638a:	f002 ff60 	bl	800924e <HAL_NVIC_EnableIRQ>

}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023800 	.word	0x40023800

0800639c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a2:	f107 031c 	add.w	r3, r7, #28
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	4b94      	ldr	r3, [pc, #592]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	4a93      	ldr	r2, [pc, #588]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063bc:	f043 0310 	orr.w	r3, r3, #16
 80063c0:	6313      	str	r3, [r2, #48]	; 0x30
 80063c2:	4b91      	ldr	r3, [pc, #580]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	4b8d      	ldr	r3, [pc, #564]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4a8c      	ldr	r2, [pc, #560]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	6313      	str	r3, [r2, #48]	; 0x30
 80063de:	4b8a      	ldr	r3, [pc, #552]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	4b86      	ldr	r3, [pc, #536]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	4a85      	ldr	r2, [pc, #532]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063f4:	f043 0304 	orr.w	r3, r3, #4
 80063f8:	6313      	str	r3, [r2, #48]	; 0x30
 80063fa:	4b83      	ldr	r3, [pc, #524]	; (8006608 <MX_GPIO_Init+0x26c>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <MX_GPIO_Init+0x26c>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4a7e      	ldr	r2, [pc, #504]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6313      	str	r3, [r2, #48]	; 0x30
 8006416:	4b7c      	ldr	r3, [pc, #496]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	4b78      	ldr	r3, [pc, #480]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	4a77      	ldr	r2, [pc, #476]	; (8006608 <MX_GPIO_Init+0x26c>)
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	6313      	str	r3, [r2, #48]	; 0x30
 8006432:	4b75      	ldr	r3, [pc, #468]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	4b71      	ldr	r3, [pc, #452]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	4a70      	ldr	r2, [pc, #448]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006448:	f043 0308 	orr.w	r3, r3, #8
 800644c:	6313      	str	r3, [r2, #48]	; 0x30
 800644e:	4b6e      	ldr	r3, [pc, #440]	; (8006608 <MX_GPIO_Init+0x26c>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800645a:	2200      	movs	r2, #0
 800645c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006460:	486a      	ldr	r0, [pc, #424]	; (800660c <MX_GPIO_Init+0x270>)
 8006462:	f003 fc6d 	bl	8009d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006466:	2200      	movs	r2, #0
 8006468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800646c:	4868      	ldr	r0, [pc, #416]	; (8006610 <MX_GPIO_Init+0x274>)
 800646e:	f003 fc67 	bl	8009d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006472:	2200      	movs	r2, #0
 8006474:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006478:	4866      	ldr	r0, [pc, #408]	; (8006614 <MX_GPIO_Init+0x278>)
 800647a:	f003 fc61 	bl	8009d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800647e:	2200      	movs	r2, #0
 8006480:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006484:	4864      	ldr	r0, [pc, #400]	; (8006618 <MX_GPIO_Init+0x27c>)
 8006486:	f003 fc5b 	bl	8009d40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800648a:	2304      	movs	r3, #4
 800648c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	2300      	movs	r3, #0
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006496:	f107 031c 	add.w	r3, r7, #28
 800649a:	4619      	mov	r1, r3
 800649c:	485b      	ldr	r0, [pc, #364]	; (800660c <MX_GPIO_Init+0x270>)
 800649e:	f003 fa8d 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80064a2:	230f      	movs	r3, #15
 80064a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064a6:	2303      	movs	r3, #3
 80064a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ae:	f107 031c 	add.w	r3, r7, #28
 80064b2:	4619      	mov	r1, r3
 80064b4:	4859      	ldr	r0, [pc, #356]	; (800661c <MX_GPIO_Init+0x280>)
 80064b6:	f003 fa81 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80064ba:	23e1      	movs	r3, #225	; 0xe1
 80064bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064be:	2303      	movs	r3, #3
 80064c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064c6:	f107 031c 	add.w	r3, r7, #28
 80064ca:	4619      	mov	r1, r3
 80064cc:	4852      	ldr	r0, [pc, #328]	; (8006618 <MX_GPIO_Init+0x27c>)
 80064ce:	f003 fa75 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064d2:	2303      	movs	r3, #3
 80064d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064d6:	2303      	movs	r3, #3
 80064d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064de:	f107 031c 	add.w	r3, r7, #28
 80064e2:	4619      	mov	r1, r3
 80064e4:	484a      	ldr	r0, [pc, #296]	; (8006610 <MX_GPIO_Init+0x274>)
 80064e6:	f003 fa69 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064ea:	2304      	movs	r3, #4
 80064ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064ee:	2300      	movs	r3, #0
 80064f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f6:	f107 031c 	add.w	r3, r7, #28
 80064fa:	4619      	mov	r1, r3
 80064fc:	4844      	ldr	r0, [pc, #272]	; (8006610 <MX_GPIO_Init+0x274>)
 80064fe:	f003 fa5d 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006502:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800650c:	2301      	movs	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006510:	f107 031c 	add.w	r3, r7, #28
 8006514:	4619      	mov	r1, r3
 8006516:	483d      	ldr	r0, [pc, #244]	; (800660c <MX_GPIO_Init+0x270>)
 8006518:	f003 fa50 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800651c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006522:	2301      	movs	r3, #1
 8006524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	2300      	movs	r3, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800652e:	f107 031c 	add.w	r3, r7, #28
 8006532:	4619      	mov	r1, r3
 8006534:	4835      	ldr	r0, [pc, #212]	; (800660c <MX_GPIO_Init+0x270>)
 8006536:	f003 fa41 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800653a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006540:	2301      	movs	r3, #1
 8006542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006544:	2300      	movs	r3, #0
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006548:	2300      	movs	r3, #0
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800654c:	f107 031c 	add.w	r3, r7, #28
 8006550:	4619      	mov	r1, r3
 8006552:	482f      	ldr	r0, [pc, #188]	; (8006610 <MX_GPIO_Init+0x274>)
 8006554:	f003 fa32 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800655c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800655e:	2300      	movs	r3, #0
 8006560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006562:	2300      	movs	r3, #0
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006566:	f107 031c 	add.w	r3, r7, #28
 800656a:	4619      	mov	r1, r3
 800656c:	4829      	ldr	r0, [pc, #164]	; (8006614 <MX_GPIO_Init+0x278>)
 800656e:	f003 fa25 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006578:	2301      	movs	r3, #1
 800657a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657c:	2300      	movs	r3, #0
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006580:	2300      	movs	r3, #0
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006584:	f107 031c 	add.w	r3, r7, #28
 8006588:	4619      	mov	r1, r3
 800658a:	4822      	ldr	r0, [pc, #136]	; (8006614 <MX_GPIO_Init+0x278>)
 800658c:	f003 fa16 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006596:	2301      	movs	r3, #1
 8006598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800659a:	2301      	movs	r3, #1
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659e:	2300      	movs	r3, #0
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	4619      	mov	r1, r3
 80065a8:	481a      	ldr	r0, [pc, #104]	; (8006614 <MX_GPIO_Init+0x278>)
 80065aa:	f003 fa07 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80065ae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80065b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065b4:	2301      	movs	r3, #1
 80065b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065bc:	2300      	movs	r3, #0
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c0:	f107 031c 	add.w	r3, r7, #28
 80065c4:	4619      	mov	r1, r3
 80065c6:	4814      	ldr	r0, [pc, #80]	; (8006618 <MX_GPIO_Init+0x27c>)
 80065c8:	f003 f9f8 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80065cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065da:	f107 031c 	add.w	r3, r7, #28
 80065de:	4619      	mov	r1, r3
 80065e0:	480d      	ldr	r0, [pc, #52]	; (8006618 <MX_GPIO_Init+0x27c>)
 80065e2:	f003 f9eb 	bl	80099bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80065e6:	239b      	movs	r3, #155	; 0x9b
 80065e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065ea:	2300      	movs	r3, #0
 80065ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ee:	2301      	movs	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065f2:	f107 031c 	add.w	r3, r7, #28
 80065f6:	4619      	mov	r1, r3
 80065f8:	4806      	ldr	r0, [pc, #24]	; (8006614 <MX_GPIO_Init+0x278>)
 80065fa:	f003 f9df 	bl	80099bc <HAL_GPIO_Init>

}
 80065fe:	bf00      	nop
 8006600:	3730      	adds	r7, #48	; 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800
 800660c:	40021000 	.word	0x40021000
 8006610:	40020400 	.word	0x40020400
 8006614:	40020c00 	.word	0x40020c00
 8006618:	40020000 	.word	0x40020000
 800661c:	40020800 	.word	0x40020800

08006620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006624:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006626:	e7fe      	b.n	8006626 <Error_Handler+0x6>

08006628 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <HAL_MspInit+0x4c>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	4a0f      	ldr	r2, [pc, #60]	; (8006684 <HAL_MspInit+0x4c>)
 8006648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800664c:	6453      	str	r3, [r2, #68]	; 0x44
 800664e:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <HAL_MspInit+0x4c>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_MspInit+0x4c>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <HAL_MspInit+0x4c>)
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006668:	6413      	str	r3, [r2, #64]	; 0x40
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_MspInit+0x4c>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40023800 	.word	0x40023800

08006688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08c      	sub	sp, #48	; 0x30
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	f107 031c 	add.w	r3, r7, #28
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a4a      	ldr	r2, [pc, #296]	; (80067d0 <HAL_ADC_MspInit+0x148>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	f040 808e 	bne.w	80067c8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	4b48      	ldr	r3, [pc, #288]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	4a47      	ldr	r2, [pc, #284]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ba:	6453      	str	r3, [r2, #68]	; 0x44
 80066bc:	4b45      	ldr	r3, [pc, #276]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	4b41      	ldr	r3, [pc, #260]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	4a40      	ldr	r2, [pc, #256]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6313      	str	r3, [r2, #48]	; 0x30
 80066d8:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	4b3a      	ldr	r3, [pc, #232]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	4a39      	ldr	r2, [pc, #228]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	6313      	str	r3, [r2, #48]	; 0x30
 80066f4:	4b37      	ldr	r3, [pc, #220]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	4a32      	ldr	r2, [pc, #200]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	6313      	str	r3, [r2, #48]	; 0x30
 8006710:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_ADC_MspInit+0x14c>)
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800671c:	230f      	movs	r3, #15
 800671e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006720:	2303      	movs	r3, #3
 8006722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006728:	f107 031c 	add.w	r3, r7, #28
 800672c:	4619      	mov	r1, r3
 800672e:	482a      	ldr	r0, [pc, #168]	; (80067d8 <HAL_ADC_MspInit+0x150>)
 8006730:	f003 f944 	bl	80099bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006734:	23ff      	movs	r3, #255	; 0xff
 8006736:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006738:	2303      	movs	r3, #3
 800673a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006740:	f107 031c 	add.w	r3, r7, #28
 8006744:	4619      	mov	r1, r3
 8006746:	4825      	ldr	r0, [pc, #148]	; (80067dc <HAL_ADC_MspInit+0x154>)
 8006748:	f003 f938 	bl	80099bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800674c:	2303      	movs	r3, #3
 800674e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006750:	2303      	movs	r3, #3
 8006752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006758:	f107 031c 	add.w	r3, r7, #28
 800675c:	4619      	mov	r1, r3
 800675e:	4820      	ldr	r0, [pc, #128]	; (80067e0 <HAL_ADC_MspInit+0x158>)
 8006760:	f003 f92c 	bl	80099bc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006764:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006766:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <HAL_ADC_MspInit+0x160>)
 8006768:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800676a:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 800676c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006770:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006778:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 800677a:	2200      	movs	r2, #0
 800677c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800677e:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006784:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006786:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800678c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006794:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 8006798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800679e:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 80067a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067a4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80067ac:	480d      	ldr	r0, [pc, #52]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 80067ae:	f002 fd69 	bl	8009284 <HAL_DMA_Init>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80067b8:	f7ff ff32 	bl	8006620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
 80067c2:	4a08      	ldr	r2, [pc, #32]	; (80067e4 <HAL_ADC_MspInit+0x15c>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80067c8:	bf00      	nop
 80067ca:	3730      	adds	r7, #48	; 0x30
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40012100 	.word	0x40012100
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020000 	.word	0x40020000
 80067e0:	40020400 	.word	0x40020400
 80067e4:	2003ec9c 	.word	0x2003ec9c
 80067e8:	40026440 	.word	0x40026440

080067ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 031c 	add.w	r3, r7, #28
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a32      	ldr	r2, [pc, #200]	; (80068d4 <HAL_I2C_MspInit+0xe8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d12c      	bne.n	8006868 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4a30      	ldr	r2, [pc, #192]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006818:	f043 0302 	orr.w	r3, r3, #2
 800681c:	6313      	str	r3, [r2, #48]	; 0x30
 800681e:	4b2e      	ldr	r3, [pc, #184]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800682a:	23c0      	movs	r3, #192	; 0xc0
 800682c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800682e:	2312      	movs	r3, #18
 8006830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006832:	2301      	movs	r3, #1
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800683a:	2304      	movs	r3, #4
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683e:	f107 031c 	add.w	r3, r7, #28
 8006842:	4619      	mov	r1, r3
 8006844:	4825      	ldr	r0, [pc, #148]	; (80068dc <HAL_I2C_MspInit+0xf0>)
 8006846:	f003 f8b9 	bl	80099bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006858:	6413      	str	r3, [r2, #64]	; 0x40
 800685a:	4b1f      	ldr	r3, [pc, #124]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006866:	e031      	b.n	80068cc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <HAL_I2C_MspInit+0xf4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d12c      	bne.n	80068cc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 800687c:	f043 0302 	orr.w	r3, r3, #2
 8006880:	6313      	str	r3, [r2, #48]	; 0x30
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800688e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006894:	2312      	movs	r3, #18
 8006896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006898:	2301      	movs	r3, #1
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800689c:	2303      	movs	r3, #3
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80068a0:	2304      	movs	r3, #4
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068a4:	f107 031c 	add.w	r3, r7, #28
 80068a8:	4619      	mov	r1, r3
 80068aa:	480c      	ldr	r0, [pc, #48]	; (80068dc <HAL_I2C_MspInit+0xf0>)
 80068ac:	f003 f886 	bl	80099bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 80068ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068be:	6413      	str	r3, [r2, #64]	; 0x40
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <HAL_I2C_MspInit+0xec>)
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
}
 80068cc:	bf00      	nop
 80068ce:	3730      	adds	r7, #48	; 0x30
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40005400 	.word	0x40005400
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020400 	.word	0x40020400
 80068e0:	40005800 	.word	0x40005800

080068e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	; 0x28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a69      	ldr	r2, [pc, #420]	; (8006aa8 <HAL_SD_MspInit+0x1c4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	f040 80cb 	bne.w	8006a9e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	4b67      	ldr	r3, [pc, #412]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 800690e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006910:	4a66      	ldr	r2, [pc, #408]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 8006912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006916:	6453      	str	r3, [r2, #68]	; 0x44
 8006918:	4b64      	ldr	r3, [pc, #400]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	4b60      	ldr	r3, [pc, #384]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	4a5f      	ldr	r2, [pc, #380]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 800692e:	f043 0304 	orr.w	r3, r3, #4
 8006932:	6313      	str	r3, [r2, #48]	; 0x30
 8006934:	4b5d      	ldr	r3, [pc, #372]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	4b59      	ldr	r3, [pc, #356]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	4a58      	ldr	r2, [pc, #352]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 800694a:	f043 0308 	orr.w	r3, r3, #8
 800694e:	6313      	str	r3, [r2, #48]	; 0x30
 8006950:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_SD_MspInit+0x1c8>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800695c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006960:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006962:	2302      	movs	r3, #2
 8006964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800696a:	2303      	movs	r3, #3
 800696c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800696e:	230c      	movs	r3, #12
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006972:	f107 0314 	add.w	r3, r7, #20
 8006976:	4619      	mov	r1, r3
 8006978:	484d      	ldr	r0, [pc, #308]	; (8006ab0 <HAL_SD_MspInit+0x1cc>)
 800697a:	f003 f81f 	bl	80099bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800697e:	2304      	movs	r3, #4
 8006980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006982:	2302      	movs	r3, #2
 8006984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800698a:	2303      	movs	r3, #3
 800698c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800698e:	230c      	movs	r3, #12
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006992:	f107 0314 	add.w	r3, r7, #20
 8006996:	4619      	mov	r1, r3
 8006998:	4846      	ldr	r0, [pc, #280]	; (8006ab4 <HAL_SD_MspInit+0x1d0>)
 800699a:	f003 f80f 	bl	80099bc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800699e:	4b46      	ldr	r3, [pc, #280]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069a0:	4a46      	ldr	r2, [pc, #280]	; (8006abc <HAL_SD_MspInit+0x1d8>)
 80069a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80069a4:	4b44      	ldr	r3, [pc, #272]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069ac:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069b2:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069b8:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069be:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069c0:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069c8:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80069d0:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069d2:	2220      	movs	r2, #32
 80069d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069d6:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069dc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069de:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069e0:	2204      	movs	r2, #4
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069e4:	4b34      	ldr	r3, [pc, #208]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069e6:	2203      	movs	r2, #3
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80069ea:	4b33      	ldr	r3, [pc, #204]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069f2:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80069fa:	482f      	ldr	r0, [pc, #188]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 80069fc:	f002 fc42 	bl	8009284 <HAL_DMA_Init>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006a06:	f7ff fe0b 	bl	8006620 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8006a10:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <HAL_SD_MspInit+0x1d4>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006a16:	4b2a      	ldr	r3, [pc, #168]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a18:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <HAL_SD_MspInit+0x1e0>)
 8006a1a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006a1c:	4b28      	ldr	r3, [pc, #160]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a22:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a24:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a2a:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a30:	4b23      	ldr	r3, [pc, #140]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a36:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a38:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a3e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a40:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a46:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006a48:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a54:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a58:	2204      	movs	r2, #4
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a5c:	4b18      	ldr	r3, [pc, #96]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a5e:	2203      	movs	r2, #3
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a68:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006a72:	4813      	ldr	r0, [pc, #76]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a74:	f002 fc06 	bl	8009284 <HAL_DMA_Init>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006a7e:	f7ff fdcf 	bl	8006620 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a0e      	ldr	r2, [pc, #56]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <HAL_SD_MspInit+0x1dc>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2100      	movs	r1, #0
 8006a92:	2031      	movs	r0, #49	; 0x31
 8006a94:	f002 fbbf 	bl	8009216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a98:	2031      	movs	r0, #49	; 0x31
 8006a9a:	f002 fbd8 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a9e:	bf00      	nop
 8006aa0:	3728      	adds	r7, #40	; 0x28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	40020c00 	.word	0x40020c00
 8006ab8:	2003e7c4 	.word	0x2003e7c4
 8006abc:	40026458 	.word	0x40026458
 8006ac0:	2003eaf8 	.word	0x2003eaf8
 8006ac4:	400264a0 	.word	0x400264a0

08006ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	; 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad0:	f107 0314 	add.w	r3, r7, #20
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <HAL_SPI_MspInit+0x84>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d12c      	bne.n	8006b44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006af8:	6413      	str	r3, [r2, #64]	; 0x40
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	6313      	str	r3, [r2, #48]	; 0x30
 8006b16:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <HAL_SPI_MspInit+0x88>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006b22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b30:	2303      	movs	r3, #3
 8006b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b34:	2305      	movs	r3, #5
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b38:	f107 0314 	add.w	r3, r7, #20
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4805      	ldr	r0, [pc, #20]	; (8006b54 <HAL_SPI_MspInit+0x8c>)
 8006b40:	f002 ff3c 	bl	80099bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b44:	bf00      	nop
 8006b46:	3728      	adds	r7, #40	; 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40003800 	.word	0x40003800
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40020400 	.word	0x40020400

08006b58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	; 0x30
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b60:	f107 031c 	add.w	r3, r7, #28
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	60da      	str	r2, [r3, #12]
 8006b6e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <HAL_TIM_PWM_MspInit+0xd4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d12d      	bne.n	8006bd6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ba0:	f043 0310 	orr.w	r3, r3, #16
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006bb2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bc8:	f107 031c 	add.w	r3, r7, #28
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4819      	ldr	r0, [pc, #100]	; (8006c34 <HAL_TIM_PWM_MspInit+0xdc>)
 8006bd0:	f002 fef4 	bl	80099bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006bd4:	e026      	b.n	8006c24 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_TIM_PWM_MspInit+0xe0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10e      	bne.n	8006bfe <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	4a11      	ldr	r2, [pc, #68]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006bea:	f043 0302 	orr.w	r3, r3, #2
 8006bee:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	693b      	ldr	r3, [r7, #16]
}
 8006bfc:	e012      	b.n	8006c24 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <HAL_TIM_PWM_MspInit+0xe4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10d      	bne.n	8006c24 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006c12:	f043 0304 	orr.w	r3, r3, #4
 8006c16:	6413      	str	r3, [r2, #64]	; 0x40
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_TIM_PWM_MspInit+0xd8>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
}
 8006c24:	bf00      	nop
 8006c26:	3730      	adds	r7, #48	; 0x30
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40023800 	.word	0x40023800
 8006c34:	40021000 	.word	0x40021000
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800

08006c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3e      	ldr	r2, [pc, #248]	; (8006d48 <HAL_TIM_Base_MspInit+0x108>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d116      	bne.n	8006c80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	4a3c      	ldr	r2, [pc, #240]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c5c:	f043 0310 	orr.w	r3, r3, #16
 8006c60:	6413      	str	r3, [r2, #64]	; 0x40
 8006c62:	4b3a      	ldr	r3, [pc, #232]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2101      	movs	r1, #1
 8006c72:	2036      	movs	r0, #54	; 0x36
 8006c74:	f002 facf 	bl	8009216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c78:	2036      	movs	r0, #54	; 0x36
 8006c7a:	f002 fae8 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006c7e:	e05e      	b.n	8006d3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a32      	ldr	r2, [pc, #200]	; (8006d50 <HAL_TIM_Base_MspInit+0x110>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d116      	bne.n	8006cb8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	4a2e      	ldr	r2, [pc, #184]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c94:	f043 0320 	orr.w	r3, r3, #32
 8006c98:	6413      	str	r3, [r2, #64]	; 0x40
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2100      	movs	r1, #0
 8006caa:	2037      	movs	r0, #55	; 0x37
 8006cac:	f002 fab3 	bl	8009216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006cb0:	2037      	movs	r0, #55	; 0x37
 8006cb2:	f002 facc 	bl	800924e <HAL_NVIC_EnableIRQ>
}
 8006cb6:	e042      	b.n	8006d3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a25      	ldr	r2, [pc, #148]	; (8006d54 <HAL_TIM_Base_MspInit+0x114>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	4a20      	ldr	r2, [pc, #128]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8006cd2:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]
}
 8006cde:	e02e      	b.n	8006d3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <HAL_TIM_Base_MspInit+0x118>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d10e      	bne.n	8006d08 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	4a16      	ldr	r2, [pc, #88]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]
}
 8006d06:	e01a      	b.n	8006d3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <HAL_TIM_Base_MspInit+0x11c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d115      	bne.n	8006d3e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d20:	6413      	str	r3, [r2, #64]	; 0x40
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_TIM_Base_MspInit+0x10c>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2100      	movs	r1, #0
 8006d32:	202c      	movs	r0, #44	; 0x2c
 8006d34:	f002 fa6f 	bl	8009216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006d38:	202c      	movs	r0, #44	; 0x2c
 8006d3a:	f002 fa88 	bl	800924e <HAL_NVIC_EnableIRQ>
}
 8006d3e:	bf00      	nop
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40001000 	.word	0x40001000
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40001400 	.word	0x40001400
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800
 8006d5c:	40001c00 	.word	0x40001c00

08006d60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d68:	f107 0314 	add.w	r3, r7, #20
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <HAL_TIM_Encoder_MspInit+0x94>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d133      	bne.n	8006dea <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6453      	str	r3, [r2, #68]	; 0x44
 8006d92:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006da8:	f043 0304 	orr.w	r3, r3, #4
 8006dac:	6313      	str	r3, [r2, #48]	; 0x30
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <HAL_TIM_Encoder_MspInit+0x98>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006dba:	23c0      	movs	r3, #192	; 0xc0
 8006dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4809      	ldr	r0, [pc, #36]	; (8006dfc <HAL_TIM_Encoder_MspInit+0x9c>)
 8006dd6:	f002 fdf1 	bl	80099bc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	202c      	movs	r0, #44	; 0x2c
 8006de0:	f002 fa19 	bl	8009216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006de4:	202c      	movs	r0, #44	; 0x2c
 8006de6:	f002 fa32 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006dea:	bf00      	nop
 8006dec:	3728      	adds	r7, #40	; 0x28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40020800 	.word	0x40020800

08006e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e08:	f107 031c 	add.w	r3, r7, #28
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a5c      	ldr	r2, [pc, #368]	; (8006f90 <HAL_TIM_MspPostInit+0x190>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d11f      	bne.n	8006e62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	4b5b      	ldr	r3, [pc, #364]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4a5a      	ldr	r2, [pc, #360]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e2c:	f043 0310 	orr.w	r3, r3, #16
 8006e30:	6313      	str	r3, [r2, #48]	; 0x30
 8006e32:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e50:	2301      	movs	r3, #1
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e54:	f107 031c 	add.w	r3, r7, #28
 8006e58:	4619      	mov	r1, r3
 8006e5a:	484f      	ldr	r0, [pc, #316]	; (8006f98 <HAL_TIM_MspPostInit+0x198>)
 8006e5c:	f002 fdae 	bl	80099bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006e60:	e091      	b.n	8006f86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4d      	ldr	r2, [pc, #308]	; (8006f9c <HAL_TIM_MspPostInit+0x19c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d11e      	bne.n	8006eaa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	4b48      	ldr	r3, [pc, #288]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	4a47      	ldr	r2, [pc, #284]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e76:	f043 0302 	orr.w	r3, r3, #2
 8006e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e88:	2330      	movs	r3, #48	; 0x30
 8006e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e94:	2300      	movs	r3, #0
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e9c:	f107 031c 	add.w	r3, r7, #28
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	483f      	ldr	r0, [pc, #252]	; (8006fa0 <HAL_TIM_MspPostInit+0x1a0>)
 8006ea4:	f002 fd8a 	bl	80099bc <HAL_GPIO_Init>
}
 8006ea8:	e06d      	b.n	8006f86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3d      	ldr	r2, [pc, #244]	; (8006fa4 <HAL_TIM_MspPostInit+0x1a4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d11f      	bne.n	8006ef4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	4a35      	ldr	r2, [pc, #212]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006ebe:	f043 0308 	orr.w	r3, r3, #8
 8006ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec4:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006ed0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ee6:	f107 031c 	add.w	r3, r7, #28
 8006eea:	4619      	mov	r1, r3
 8006eec:	482e      	ldr	r0, [pc, #184]	; (8006fa8 <HAL_TIM_MspPostInit+0x1a8>)
 8006eee:	f002 fd65 	bl	80099bc <HAL_GPIO_Init>
}
 8006ef2:	e048      	b.n	8006f86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <HAL_TIM_MspPostInit+0x1ac>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d11f      	bne.n	8006f3e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f20:	2302      	movs	r3, #2
 8006f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f30:	f107 031c 	add.w	r3, r7, #28
 8006f34:	4619      	mov	r1, r3
 8006f36:	481a      	ldr	r0, [pc, #104]	; (8006fa0 <HAL_TIM_MspPostInit+0x1a0>)
 8006f38:	f002 fd40 	bl	80099bc <HAL_GPIO_Init>
}
 8006f3c:	e023      	b.n	8006f86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <HAL_TIM_MspPostInit+0x1b0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d11e      	bne.n	8006f86 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f52:	f043 0302 	orr.w	r3, r3, #2
 8006f56:	6313      	str	r3, [r2, #48]	; 0x30
 8006f58:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <HAL_TIM_MspPostInit+0x194>)
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f72:	2300      	movs	r3, #0
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006f76:	2303      	movs	r3, #3
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f7a:	f107 031c 	add.w	r3, r7, #28
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4807      	ldr	r0, [pc, #28]	; (8006fa0 <HAL_TIM_MspPostInit+0x1a0>)
 8006f82:	f002 fd1b 	bl	80099bc <HAL_GPIO_Init>
}
 8006f86:	bf00      	nop
 8006f88:	3730      	adds	r7, #48	; 0x30
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40020400 	.word	0x40020400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40020c00 	.word	0x40020c00
 8006fac:	40014400 	.word	0x40014400
 8006fb0:	40014800 	.word	0x40014800

08006fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	605a      	str	r2, [r3, #4]
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a19      	ldr	r2, [pc, #100]	; (8007038 <HAL_UART_MspInit+0x84>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d12b      	bne.n	800702e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	4b18      	ldr	r3, [pc, #96]	; (800703c <HAL_UART_MspInit+0x88>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	4a17      	ldr	r2, [pc, #92]	; (800703c <HAL_UART_MspInit+0x88>)
 8006fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe6:	4b15      	ldr	r3, [pc, #84]	; (800703c <HAL_UART_MspInit+0x88>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	4b11      	ldr	r3, [pc, #68]	; (800703c <HAL_UART_MspInit+0x88>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	4a10      	ldr	r2, [pc, #64]	; (800703c <HAL_UART_MspInit+0x88>)
 8006ffc:	f043 0308 	orr.w	r3, r3, #8
 8007000:	6313      	str	r3, [r2, #48]	; 0x30
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <HAL_UART_MspInit+0x88>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800700e:	2360      	movs	r3, #96	; 0x60
 8007010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007012:	2302      	movs	r3, #2
 8007014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800701a:	2303      	movs	r3, #3
 800701c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800701e:	2307      	movs	r3, #7
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	4619      	mov	r1, r3
 8007028:	4805      	ldr	r0, [pc, #20]	; (8007040 <HAL_UART_MspInit+0x8c>)
 800702a:	f002 fcc7 	bl	80099bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800702e:	bf00      	nop
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40004400 	.word	0x40004400
 800703c:	40023800 	.word	0x40023800
 8007040:	40020c00 	.word	0x40020c00

08007044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007048:	e7fe      	b.n	8007048 <NMI_Handler+0x4>

0800704a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800704a:	b480      	push	{r7}
 800704c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800704e:	e7fe      	b.n	800704e <HardFault_Handler+0x4>

08007050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007054:	e7fe      	b.n	8007054 <MemManage_Handler+0x4>

08007056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007056:	b480      	push	{r7}
 8007058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800705a:	e7fe      	b.n	800705a <BusFault_Handler+0x4>

0800705c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007060:	e7fe      	b.n	8007060 <UsageFault_Handler+0x4>

08007062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007062:	b480      	push	{r7}
 8007064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007066:	bf00      	nop
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007074:	bf00      	nop
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007082:	bf00      	nop
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007090:	f001 fba0 	bl	80087d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007094:	bf00      	nop
 8007096:	bd80      	pop	{r7, pc}

08007098 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800709c:	4803      	ldr	r0, [pc, #12]	; (80070ac <TIM8_UP_TIM13_IRQHandler+0x14>)
 800709e:	f006 fe70 	bl	800dd82 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80070a2:	4803      	ldr	r0, [pc, #12]	; (80070b0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80070a4:	f006 fe6d 	bl	800dd82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80070a8:	bf00      	nop
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2003e87c 	.word	0x2003e87c
 80070b0:	2003ea78 	.word	0x2003ea78

080070b4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80070b8:	4802      	ldr	r0, [pc, #8]	; (80070c4 <SDIO_IRQHandler+0x10>)
 80070ba:	f004 ff09 	bl	800bed0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	2003ebd8 	.word	0x2003ebd8

080070c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80070cc:	4802      	ldr	r0, [pc, #8]	; (80070d8 <TIM6_DAC_IRQHandler+0x10>)
 80070ce:	f006 fe58 	bl	800dd82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2003eb58 	.word	0x2003eb58

080070dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80070e0:	4802      	ldr	r0, [pc, #8]	; (80070ec <TIM7_IRQHandler+0x10>)
 80070e2:	f006 fe4e 	bl	800dd82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80070e6:	bf00      	nop
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2003ecfc 	.word	0x2003ecfc

080070f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80070f4:	4802      	ldr	r0, [pc, #8]	; (8007100 <DMA2_Stream2_IRQHandler+0x10>)
 80070f6:	f002 f9ed 	bl	80094d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2003ec9c 	.word	0x2003ec9c

08007104 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007108:	4802      	ldr	r0, [pc, #8]	; (8007114 <DMA2_Stream3_IRQHandler+0x10>)
 800710a:	f002 f9e3 	bl	80094d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800710e:	bf00      	nop
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2003e7c4 	.word	0x2003e7c4

08007118 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800711c:	4802      	ldr	r0, [pc, #8]	; (8007128 <DMA2_Stream6_IRQHandler+0x10>)
 800711e:	f002 f9d9 	bl	80094d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	2003eaf8 	.word	0x2003eaf8

0800712c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <_sbrk+0x5c>)
 8007136:	4b15      	ldr	r3, [pc, #84]	; (800718c <_sbrk+0x60>)
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007140:	4b13      	ldr	r3, [pc, #76]	; (8007190 <_sbrk+0x64>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <_sbrk+0x64>)
 800714a:	4a12      	ldr	r2, [pc, #72]	; (8007194 <_sbrk+0x68>)
 800714c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <_sbrk+0x64>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d207      	bcs.n	800716c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800715c:	f00d f8a6 	bl	80142ac <__errno>
 8007160:	4602      	mov	r2, r0
 8007162:	230c      	movs	r3, #12
 8007164:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	e009      	b.n	8007180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800716c:	4b08      	ldr	r3, [pc, #32]	; (8007190 <_sbrk+0x64>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <_sbrk+0x64>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	4a05      	ldr	r2, [pc, #20]	; (8007190 <_sbrk+0x64>)
 800717c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20050000 	.word	0x20050000
 800718c:	00000800 	.word	0x00000800
 8007190:	200002cc 	.word	0x200002cc
 8007194:	20040e50 	.word	0x20040e50

08007198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800719c:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <SystemInit+0x28>)
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <SystemInit+0x28>)
 80071a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80071ac:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <SystemInit+0x28>)
 80071ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071b2:	609a      	str	r2, [r3, #8]
#endif
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000ed00 	.word	0xe000ed00

080071c4 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80071c4:	b598      	push	{r3, r4, r7, lr}
 80071c6:	af00      	add	r7, sp, #0
	lcd_init();
 80071c8:	f7f9 ff26 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80071cc:	483a      	ldr	r0, [pc, #232]	; (80072b8 <cppInit+0xf4>)
 80071ce:	f7fd fca5 	bl	8004b1c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80071d2:	2064      	movs	r0, #100	; 0x64
 80071d4:	f001 fb1e 	bl	8008814 <HAL_Delay>
	power_sensor.updateValues();
 80071d8:	4837      	ldr	r0, [pc, #220]	; (80072b8 <cppInit+0xf4>)
 80071da:	f7fd fcad 	bl	8004b38 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80071de:	f7f9 ff5f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80071e2:	2100      	movs	r1, #0
 80071e4:	2000      	movs	r0, #0
 80071e6:	f7f9 ff6b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80071ea:	4834      	ldr	r0, [pc, #208]	; (80072bc <cppInit+0xf8>)
 80071ec:	f7f9 ff92 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80071f0:	2101      	movs	r1, #1
 80071f2:	2000      	movs	r0, #0
 80071f4:	f7f9 ff64 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80071f8:	482f      	ldr	r0, [pc, #188]	; (80072b8 <cppInit+0xf4>)
 80071fa:	f7fd fcc7 	bl	8004b8c <_ZN11PowerSensor17getButteryVoltageEv>
 80071fe:	ee10 3a10 	vmov	r3, s0
 8007202:	4618      	mov	r0, r3
 8007204:	f7f9 f9b8 	bl	8000578 <__aeabi_f2d>
 8007208:	4603      	mov	r3, r0
 800720a:	460c      	mov	r4, r1
 800720c:	461a      	mov	r2, r3
 800720e:	4623      	mov	r3, r4
 8007210:	482b      	ldr	r0, [pc, #172]	; (80072c0 <cppInit+0xfc>)
 8007212:	f7f9 ff7f 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800721a:	f001 fafb 	bl	8008814 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800721e:	4829      	ldr	r0, [pc, #164]	; (80072c4 <cppInit+0x100>)
 8007220:	f7fc fec2 	bl	8003fa8 <_ZN6Logger10sdCardInitEv>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <cppInit+0x76>
		led.fullColor('G');
 800722a:	2147      	movs	r1, #71	; 0x47
 800722c:	4826      	ldr	r0, [pc, #152]	; (80072c8 <cppInit+0x104>)
 800722e:	f7fa fe91 	bl	8001f54 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007232:	2064      	movs	r0, #100	; 0x64
 8007234:	f001 faee 	bl	8008814 <HAL_Delay>
 8007238:	e006      	b.n	8007248 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800723a:	2152      	movs	r1, #82	; 0x52
 800723c:	4822      	ldr	r0, [pc, #136]	; (80072c8 <cppInit+0x104>)
 800723e:	f7fa fe89 	bl	8001f54 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007242:	2064      	movs	r0, #100	; 0x64
 8007244:	f001 fae6 	bl	8008814 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007248:	4820      	ldr	r0, [pc, #128]	; (80072cc <cppInit+0x108>)
 800724a:	f7fa ffdf 	bl	800220c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800724e:	4820      	ldr	r0, [pc, #128]	; (80072d0 <cppInit+0x10c>)
 8007250:	f7fd f938 	bl	80044c4 <_ZN5Motor4initEv>
	encoder.init();
 8007254:	481f      	ldr	r0, [pc, #124]	; (80072d4 <cppInit+0x110>)
 8007256:	f7f9 ffad 	bl	80011b4 <_ZN7Encoder4initEv>
	imu.init();
 800725a:	481f      	ldr	r0, [pc, #124]	; (80072d8 <cppInit+0x114>)
 800725c:	f7fa fc38 	bl	8001ad0 <_ZN3IMU4initEv>
	line_trace.init();
 8007260:	481e      	ldr	r0, [pc, #120]	; (80072dc <cppInit+0x118>)
 8007262:	f7fc f983 	bl	800356c <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007266:	4819      	ldr	r0, [pc, #100]	; (80072cc <cppInit+0x108>)
 8007268:	f7fb f910 	bl	800248c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800726c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007270:	f001 fad0 	bl	8008814 <HAL_Delay>

	led.fullColor('M');
 8007274:	214d      	movs	r1, #77	; 0x4d
 8007276:	4814      	ldr	r0, [pc, #80]	; (80072c8 <cppInit+0x104>)
 8007278:	f7fa fe6c 	bl	8001f54 <_ZN3LED9fullColorEc>
	imu.calibration();
 800727c:	4816      	ldr	r0, [pc, #88]	; (80072d8 <cppInit+0x114>)
 800727e:	f7fa fcf1 	bl	8001c64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8007282:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80072e0 <cppInit+0x11c>
 8007286:	eddf 0a17 	vldr	s1, [pc, #92]	; 80072e4 <cppInit+0x120>
 800728a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80072e8 <cppInit+0x124>
 800728e:	4817      	ldr	r0, [pc, #92]	; (80072ec <cppInit+0x128>)
 8007290:	f7fe f9b2 	bl	80055f8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007294:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80072f0 <cppInit+0x12c>
 8007298:	eddf 0a16 	vldr	s1, [pc, #88]	; 80072f4 <cppInit+0x130>
 800729c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80072f8 <cppInit+0x134>
 80072a0:	4812      	ldr	r0, [pc, #72]	; (80072ec <cppInit+0x128>)
 80072a2:	f7fe f9c2 	bl	800562a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80072a6:	4815      	ldr	r0, [pc, #84]	; (80072fc <cppInit+0x138>)
 80072a8:	f7fd fb42 	bl	8004930 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80072ac:	4814      	ldr	r0, [pc, #80]	; (8007300 <cppInit+0x13c>)
 80072ae:	f7fd fbd9 	bl	8004a64 <_ZN13PathFollowing4initEv>

}
 80072b2:	bf00      	nop
 80072b4:	bd98      	pop	{r3, r4, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200005e0 	.word	0x200005e0
 80072bc:	08018a8c 	.word	0x08018a8c
 80072c0:	08018a94 	.word	0x08018a94
 80072c4:	20000600 	.word	0x20000600
 80072c8:	200005dc 	.word	0x200005dc
 80072cc:	200002d0 	.word	0x200002d0
 80072d0:	200005d8 	.word	0x200005d8
 80072d4:	20017d10 	.word	0x20017d10
 80072d8:	200005ec 	.word	0x200005ec
 80072dc:	20017db8 	.word	0x20017db8
 80072e0:	3cceca68 	.word	0x3cceca68
 80072e4:	4180f06f 	.word	0x4180f06f
 80072e8:	3fea2d0e 	.word	0x3fea2d0e
 80072ec:	20017d34 	.word	0x20017d34
 80072f0:	3ab7dacd 	.word	0x3ab7dacd
 80072f4:	3f5e3fbc 	.word	0x3f5e3fbc
 80072f8:	3d8eefa2 	.word	0x3d8eefa2
 80072fc:	20017d78 	.word	0x20017d78
 8007300:	20024d10 	.word	0x20024d10

08007304 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007308:	4819      	ldr	r0, [pc, #100]	; (8007370 <cppFlip1ms+0x6c>)
 800730a:	f7fa ffdd 	bl	80022c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800730e:	4819      	ldr	r0, [pc, #100]	; (8007374 <cppFlip1ms+0x70>)
 8007310:	f7fa fc06 	bl	8001b20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007314:	4818      	ldr	r0, [pc, #96]	; (8007378 <cppFlip1ms+0x74>)
 8007316:	f7f9 ff6f 	bl	80011f8 <_ZN7Encoder6updateEv>

	line_trace.flip();
 800731a:	4818      	ldr	r0, [pc, #96]	; (800737c <cppFlip1ms+0x78>)
 800731c:	f7fc fa3c 	bl	8003798 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007320:	4817      	ldr	r0, [pc, #92]	; (8007380 <cppFlip1ms+0x7c>)
 8007322:	f7fe f99b 	bl	800565c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007326:	4817      	ldr	r0, [pc, #92]	; (8007384 <cppFlip1ms+0x80>)
 8007328:	f7fd fae6 	bl	80048f8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 800732c:	4816      	ldr	r0, [pc, #88]	; (8007388 <cppFlip1ms+0x84>)
 800732e:	f7fd fca3 	bl	8004c78 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007332:	4816      	ldr	r0, [pc, #88]	; (800738c <cppFlip1ms+0x88>)
 8007334:	f7fd f8d8 	bl	80044e8 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <cppFlip1ms+0x8c>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <cppFlip1ms+0x8c>)
 8007342:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007344:	4b12      	ldr	r3, [pc, #72]	; (8007390 <cppFlip1ms+0x8c>)
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d90c      	bls.n	8007366 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 800734c:	4809      	ldr	r0, [pc, #36]	; (8007374 <cppFlip1ms+0x70>)
 800734e:	f7fa fc3f 	bl	8001bd0 <_ZN3IMU8getOmegaEv>
 8007352:	eef0 7a40 	vmov.f32	s15, s0
 8007356:	eeb0 0a67 	vmov.f32	s0, s15
 800735a:	480e      	ldr	r0, [pc, #56]	; (8007394 <cppFlip1ms+0x90>)
 800735c:	f7fd fdee 	bl	8004f3c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <cppFlip1ms+0x8c>)
 8007362:	2200      	movs	r2, #0
 8007364:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007366:	4804      	ldr	r0, [pc, #16]	; (8007378 <cppFlip1ms+0x74>)
 8007368:	f7fa f83c 	bl	80013e4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 800736c:	bf00      	nop
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200002d0 	.word	0x200002d0
 8007374:	200005ec 	.word	0x200005ec
 8007378:	20017d10 	.word	0x20017d10
 800737c:	20017db8 	.word	0x20017db8
 8007380:	20017d34 	.word	0x20017d34
 8007384:	20017d78 	.word	0x20017d78
 8007388:	200005c8 	.word	0x200005c8
 800738c:	200005d8 	.word	0x200005d8
 8007390:	2003c43a 	.word	0x2003c43a
 8007394:	20024b04 	.word	0x20024b04

08007398 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800739c:	4802      	ldr	r0, [pc, #8]	; (80073a8 <cppFlip100ns+0x10>)
 800739e:	f7fa ff45 	bl	800222c <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80073a2:	bf00      	nop
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200002d0 	.word	0x200002d0

080073ac <cppFlip10ms>:

void cppFlip10ms(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <cppFlip10ms+0x30>)
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	4b08      	ldr	r3, [pc, #32]	; (80073dc <cppFlip10ms+0x30>)
 80073ba:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <cppFlip10ms+0x30>)
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d905      	bls.n	80073d0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80073c4:	4806      	ldr	r0, [pc, #24]	; (80073e0 <cppFlip10ms+0x34>)
 80073c6:	f7fd fdf5 	bl	8004fb4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <cppFlip10ms+0x30>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <cppFlip10ms+0x30>)
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <cppFlip10ms+0x38>)
 80073d6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80073d8:	bf00      	nop
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	2003c43c 	.word	0x2003c43c
 80073e0:	20024b04 	.word	0x20024b04
 80073e4:	2003c438 	.word	0x2003c438

080073e8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80073e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af02      	add	r7, sp, #8
	static int16_t selector;

	static float adj_kp = line_trace.getKp();
 80073ee:	4bbc      	ldr	r3, [pc, #752]	; (80076e0 <cppLoop+0x2f8>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f3bf 8f5b 	dmb	ish
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d015      	beq.n	8007436 <cppLoop+0x4e>
 800740a:	48b5      	ldr	r0, [pc, #724]	; (80076e0 <cppLoop+0x2f8>)
 800740c:	f00b fee7 	bl	80131de <__cxa_guard_acquire>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <cppLoop+0x4e>
 8007420:	48b0      	ldr	r0, [pc, #704]	; (80076e4 <cppLoop+0x2fc>)
 8007422:	f7fc f920 	bl	8003666 <_ZN9LineTrace5getKpEv>
 8007426:	eef0 7a40 	vmov.f32	s15, s0
 800742a:	4baf      	ldr	r3, [pc, #700]	; (80076e8 <cppLoop+0x300>)
 800742c:	edc3 7a00 	vstr	s15, [r3]
 8007430:	48ab      	ldr	r0, [pc, #684]	; (80076e0 <cppLoop+0x2f8>)
 8007432:	f00b fee0 	bl	80131f6 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007436:	4bad      	ldr	r3, [pc, #692]	; (80076ec <cppLoop+0x304>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f3bf 8f5b 	dmb	ish
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <cppLoop+0x96>
 8007452:	48a6      	ldr	r0, [pc, #664]	; (80076ec <cppLoop+0x304>)
 8007454:	f00b fec3 	bl	80131de <__cxa_guard_acquire>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	bf14      	ite	ne
 800745e:	2301      	movne	r3, #1
 8007460:	2300      	moveq	r3, #0
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <cppLoop+0x96>
 8007468:	489e      	ldr	r0, [pc, #632]	; (80076e4 <cppLoop+0x2fc>)
 800746a:	f7fc f90b 	bl	8003684 <_ZN9LineTrace5getKiEv>
 800746e:	eef0 7a40 	vmov.f32	s15, s0
 8007472:	4b9f      	ldr	r3, [pc, #636]	; (80076f0 <cppLoop+0x308>)
 8007474:	edc3 7a00 	vstr	s15, [r3]
 8007478:	489c      	ldr	r0, [pc, #624]	; (80076ec <cppLoop+0x304>)
 800747a:	f00b febc 	bl	80131f6 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800747e:	4b9d      	ldr	r3, [pc, #628]	; (80076f4 <cppLoop+0x30c>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f3bf 8f5b 	dmb	ish
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d015      	beq.n	80074c6 <cppLoop+0xde>
 800749a:	4896      	ldr	r0, [pc, #600]	; (80076f4 <cppLoop+0x30c>)
 800749c:	f00b fe9f 	bl	80131de <__cxa_guard_acquire>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf14      	ite	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	2300      	moveq	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <cppLoop+0xde>
 80074b0:	488c      	ldr	r0, [pc, #560]	; (80076e4 <cppLoop+0x2fc>)
 80074b2:	f7fc f8f6 	bl	80036a2 <_ZN9LineTrace5getKdEv>
 80074b6:	eef0 7a40 	vmov.f32	s15, s0
 80074ba:	4b8f      	ldr	r3, [pc, #572]	; (80076f8 <cppLoop+0x310>)
 80074bc:	edc3 7a00 	vstr	s15, [r3]
 80074c0:	488c      	ldr	r0, [pc, #560]	; (80076f4 <cppLoop+0x30c>)
 80074c2:	f00b fe98 	bl	80131f6 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80074c6:	4b8d      	ldr	r3, [pc, #564]	; (80076fc <cppLoop+0x314>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	f3bf 8f5b 	dmb	ish
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <cppLoop+0x126>
 80074e2:	4886      	ldr	r0, [pc, #536]	; (80076fc <cppLoop+0x314>)
 80074e4:	f00b fe7b 	bl	80131de <__cxa_guard_acquire>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <cppLoop+0x126>
 80074f8:	487a      	ldr	r0, [pc, #488]	; (80076e4 <cppLoop+0x2fc>)
 80074fa:	f7fc f91e 	bl	800373a <_ZN9LineTrace17getTargetVelocityEv>
 80074fe:	eef0 7a40 	vmov.f32	s15, s0
 8007502:	4b7f      	ldr	r3, [pc, #508]	; (8007700 <cppLoop+0x318>)
 8007504:	edc3 7a00 	vstr	s15, [r3]
 8007508:	487c      	ldr	r0, [pc, #496]	; (80076fc <cppLoop+0x314>)
 800750a:	f00b fe74 	bl	80131f6 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800750e:	4b7d      	ldr	r3, [pc, #500]	; (8007704 <cppLoop+0x31c>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f3bf 8f5b 	dmb	ish
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf0c      	ite	eq
 8007520:	2301      	moveq	r3, #1
 8007522:	2300      	movne	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d015      	beq.n	8007556 <cppLoop+0x16e>
 800752a:	4876      	ldr	r0, [pc, #472]	; (8007704 <cppLoop+0x31c>)
 800752c:	f00b fe57 	bl	80131de <__cxa_guard_acquire>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <cppLoop+0x16e>
 8007540:	4868      	ldr	r0, [pc, #416]	; (80076e4 <cppLoop+0x2fc>)
 8007542:	f7fc f909 	bl	8003758 <_ZN9LineTrace14getMaxVelocityEv>
 8007546:	eef0 7a40 	vmov.f32	s15, s0
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <cppLoop+0x320>)
 800754c:	edc3 7a00 	vstr	s15, [r3]
 8007550:	486c      	ldr	r0, [pc, #432]	; (8007704 <cppLoop+0x31c>)
 8007552:	f00b fe50 	bl	80131f6 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007556:	4b6d      	ldr	r3, [pc, #436]	; (800770c <cppLoop+0x324>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f3bf 8f5b 	dmb	ish
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d015      	beq.n	800759e <cppLoop+0x1b6>
 8007572:	4866      	ldr	r0, [pc, #408]	; (800770c <cppLoop+0x324>)
 8007574:	f00b fe33 	bl	80131de <__cxa_guard_acquire>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf14      	ite	ne
 800757e:	2301      	movne	r3, #1
 8007580:	2300      	moveq	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <cppLoop+0x1b6>
 8007588:	4856      	ldr	r0, [pc, #344]	; (80076e4 <cppLoop+0x2fc>)
 800758a:	f7fc f8f4 	bl	8003776 <_ZN9LineTrace15getMaxVelocity2Ev>
 800758e:	eef0 7a40 	vmov.f32	s15, s0
 8007592:	4b5f      	ldr	r3, [pc, #380]	; (8007710 <cppLoop+0x328>)
 8007594:	edc3 7a00 	vstr	s15, [r3]
 8007598:	485c      	ldr	r0, [pc, #368]	; (800770c <cppLoop+0x324>)
 800759a:	f00b fe2c 	bl	80131f6 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800759e:	485d      	ldr	r0, [pc, #372]	; (8007714 <cppLoop+0x32c>)
 80075a0:	f7fd fb04 	bl	8004bac <_ZN12RotarySwitch8getValueEv>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b0f      	cmp	r3, #15
 80075a8:	f200 87f2 	bhi.w	8008590 <cppLoop+0x11a8>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <cppLoop+0x1cc>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	08007a35 	.word	0x08007a35
 80075bc:	08007ac9 	.word	0x08007ac9
 80075c0:	08007c1b 	.word	0x08007c1b
 80075c4:	08007cfd 	.word	0x08007cfd
 80075c8:	08007e51 	.word	0x08007e51
 80075cc:	08007ef9 	.word	0x08007ef9
 80075d0:	0800807f 	.word	0x0800807f
 80075d4:	080080a9 	.word	0x080080a9
 80075d8:	080080d3 	.word	0x080080d3
 80075dc:	0800818f 	.word	0x0800818f
 80075e0:	080081ff 	.word	0x080081ff
 80075e4:	0800829b 	.word	0x0800829b
 80075e8:	080083bd 	.word	0x080083bd
 80075ec:	08008443 	.word	0x08008443
 80075f0:	080084eb 	.word	0x080084eb
	case 0:
		led.fullColor('W');
 80075f4:	2157      	movs	r1, #87	; 0x57
 80075f6:	4848      	ldr	r0, [pc, #288]	; (8007718 <cppLoop+0x330>)
 80075f8:	f7fa fcac 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80075fc:	f7f9 fd50 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007600:	2100      	movs	r1, #0
 8007602:	2000      	movs	r0, #0
 8007604:	f7f9 fd5c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007608:	4836      	ldr	r0, [pc, #216]	; (80076e4 <cppLoop+0x2fc>)
 800760a:	f7fc f82c 	bl	8003666 <_ZN9LineTrace5getKpEv>
 800760e:	eeb0 7a40 	vmov.f32	s14, s0
 8007612:	eddf 7a42 	vldr	s15, [pc, #264]	; 800771c <cppLoop+0x334>
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	ee17 0a90 	vmov	r0, s15
 800761e:	f7f8 ffab 	bl	8000578 <__aeabi_f2d>
 8007622:	4603      	mov	r3, r0
 8007624:	460c      	mov	r4, r1
 8007626:	461a      	mov	r2, r3
 8007628:	4623      	mov	r3, r4
 800762a:	483d      	ldr	r0, [pc, #244]	; (8007720 <cppLoop+0x338>)
 800762c:	f7f9 fd72 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007630:	2101      	movs	r1, #1
 8007632:	2000      	movs	r0, #0
 8007634:	f7f9 fd44 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007638:	482a      	ldr	r0, [pc, #168]	; (80076e4 <cppLoop+0x2fc>)
 800763a:	f7fc f823 	bl	8003684 <_ZN9LineTrace5getKiEv>
 800763e:	eeb0 7a40 	vmov.f32	s14, s0
 8007642:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007724 <cppLoop+0x33c>
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	ee17 0a90 	vmov	r0, s15
 800764e:	f7f8 ff93 	bl	8000578 <__aeabi_f2d>
 8007652:	4605      	mov	r5, r0
 8007654:	460e      	mov	r6, r1
 8007656:	4823      	ldr	r0, [pc, #140]	; (80076e4 <cppLoop+0x2fc>)
 8007658:	f7fc f823 	bl	80036a2 <_ZN9LineTrace5getKdEv>
 800765c:	eeb0 7a40 	vmov.f32	s14, s0
 8007660:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007728 <cppLoop+0x340>
 8007664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007668:	ee17 0a90 	vmov	r0, s15
 800766c:	f7f8 ff84 	bl	8000578 <__aeabi_f2d>
 8007670:	4603      	mov	r3, r0
 8007672:	460c      	mov	r4, r1
 8007674:	e9cd 3400 	strd	r3, r4, [sp]
 8007678:	462a      	mov	r2, r5
 800767a:	4633      	mov	r3, r6
 800767c:	482b      	ldr	r0, [pc, #172]	; (800772c <cppLoop+0x344>)
 800767e:	f7f9 fd49 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007682:	482b      	ldr	r0, [pc, #172]	; (8007730 <cppLoop+0x348>)
 8007684:	f7fa fc02 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007688:	4603      	mov	r3, r0
 800768a:	2b08      	cmp	r3, #8
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d04f      	beq.n	8007738 <cppLoop+0x350>
			led.LR(-1, 1);
 8007698:	2201      	movs	r2, #1
 800769a:	f04f 31ff 	mov.w	r1, #4294967295
 800769e:	481e      	ldr	r0, [pc, #120]	; (8007718 <cppLoop+0x330>)
 80076a0:	f7fa fd14 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80076a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076a8:	f001 f8b4 	bl	8008814 <HAL_Delay>

			selector++;
 80076ac:	4b21      	ldr	r3, [pc, #132]	; (8007734 <cppLoop+0x34c>)
 80076ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3301      	adds	r3, #1
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b21a      	sxth	r2, r3
 80076ba:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <cppLoop+0x34c>)
 80076bc:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <cppLoop+0x34c>)
 80076c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	dd02      	ble.n	80076ce <cppLoop+0x2e6>
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <cppLoop+0x34c>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	f04f 31ff 	mov.w	r1, #4294967295
 80076d4:	4810      	ldr	r0, [pc, #64]	; (8007718 <cppLoop+0x330>)
 80076d6:	f7fa fcf9 	bl	80020cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80076da:	f000 bf5b 	b.w	8008594 <cppLoop+0x11ac>
 80076de:	bf00      	nop
 80076e0:	2003c444 	.word	0x2003c444
 80076e4:	20017db8 	.word	0x20017db8
 80076e8:	2003c440 	.word	0x2003c440
 80076ec:	2003c44c 	.word	0x2003c44c
 80076f0:	2003c448 	.word	0x2003c448
 80076f4:	2003c454 	.word	0x2003c454
 80076f8:	2003c450 	.word	0x2003c450
 80076fc:	2003c45c 	.word	0x2003c45c
 8007700:	2003c458 	.word	0x2003c458
 8007704:	2003c464 	.word	0x2003c464
 8007708:	2003c460 	.word	0x2003c460
 800770c:	2003c46c 	.word	0x2003c46c
 8007710:	2003c468 	.word	0x2003c468
 8007714:	200005d4 	.word	0x200005d4
 8007718:	200005dc 	.word	0x200005dc
 800771c:	447a0000 	.word	0x447a0000
 8007720:	08018a98 	.word	0x08018a98
 8007724:	42c80000 	.word	0x42c80000
 8007728:	461c4000 	.word	0x461c4000
 800772c:	08018aa4 	.word	0x08018aa4
 8007730:	200005d0 	.word	0x200005d0
 8007734:	2003c43e 	.word	0x2003c43e
		else if(joy_stick.getValue() == JOY_R){
 8007738:	48b3      	ldr	r0, [pc, #716]	; (8007a08 <cppLoop+0x620>)
 800773a:	f7fa fba7 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 800773e:	4603      	mov	r3, r0
 8007740:	2b10      	cmp	r3, #16
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d059      	beq.n	8007802 <cppLoop+0x41a>
			led.LR(-1, 1);
 800774e:	2201      	movs	r2, #1
 8007750:	f04f 31ff 	mov.w	r1, #4294967295
 8007754:	48ad      	ldr	r0, [pc, #692]	; (8007a0c <cppLoop+0x624>)
 8007756:	f7fa fcb9 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800775a:	2064      	movs	r0, #100	; 0x64
 800775c:	f001 f85a 	bl	8008814 <HAL_Delay>
			if(selector == 0){
 8007760:	4bab      	ldr	r3, [pc, #684]	; (8007a10 <cppLoop+0x628>)
 8007762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d113      	bne.n	8007792 <cppLoop+0x3aa>
				adj_kp = adj_kp + 0.00001;
 800776a:	4baa      	ldr	r3, [pc, #680]	; (8007a14 <cppLoop+0x62c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f7f8 ff02 	bl	8000578 <__aeabi_f2d>
 8007774:	a39e      	add	r3, pc, #632	; (adr r3, 80079f0 <cppLoop+0x608>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f7f8 fd9f 	bl	80002bc <__adddf3>
 800777e:	4603      	mov	r3, r0
 8007780:	460c      	mov	r4, r1
 8007782:	4618      	mov	r0, r3
 8007784:	4621      	mov	r1, r4
 8007786:	f7f9 fa47 	bl	8000c18 <__aeabi_d2f>
 800778a:	4602      	mov	r2, r0
 800778c:	4ba1      	ldr	r3, [pc, #644]	; (8007a14 <cppLoop+0x62c>)
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e02b      	b.n	80077ea <cppLoop+0x402>
			else if(selector == 1){
 8007792:	4b9f      	ldr	r3, [pc, #636]	; (8007a10 <cppLoop+0x628>)
 8007794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d113      	bne.n	80077c4 <cppLoop+0x3dc>
				adj_ki = adj_ki + 0.0001;
 800779c:	4b9e      	ldr	r3, [pc, #632]	; (8007a18 <cppLoop+0x630>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f8 fee9 	bl	8000578 <__aeabi_f2d>
 80077a6:	a394      	add	r3, pc, #592	; (adr r3, 80079f8 <cppLoop+0x610>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fd86 	bl	80002bc <__adddf3>
 80077b0:	4603      	mov	r3, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	4618      	mov	r0, r3
 80077b6:	4621      	mov	r1, r4
 80077b8:	f7f9 fa2e 	bl	8000c18 <__aeabi_d2f>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b96      	ldr	r3, [pc, #600]	; (8007a18 <cppLoop+0x630>)
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e012      	b.n	80077ea <cppLoop+0x402>
				adj_kd = adj_kd + 0.000001;
 80077c4:	4b95      	ldr	r3, [pc, #596]	; (8007a1c <cppLoop+0x634>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7f8 fed5 	bl	8000578 <__aeabi_f2d>
 80077ce:	a38c      	add	r3, pc, #560	; (adr r3, 8007a00 <cppLoop+0x618>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f8 fd72 	bl	80002bc <__adddf3>
 80077d8:	4603      	mov	r3, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4618      	mov	r0, r3
 80077de:	4621      	mov	r1, r4
 80077e0:	f7f9 fa1a 	bl	8000c18 <__aeabi_d2f>
 80077e4:	4602      	mov	r2, r0
 80077e6:	4b8d      	ldr	r3, [pc, #564]	; (8007a1c <cppLoop+0x634>)
 80077e8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80077ea:	2152      	movs	r1, #82	; 0x52
 80077ec:	4887      	ldr	r0, [pc, #540]	; (8007a0c <cppLoop+0x624>)
 80077ee:	f7fa fbb1 	bl	8001f54 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80077f2:	2200      	movs	r2, #0
 80077f4:	f04f 31ff 	mov.w	r1, #4294967295
 80077f8:	4884      	ldr	r0, [pc, #528]	; (8007a0c <cppLoop+0x624>)
 80077fa:	f7fa fc67 	bl	80020cc <_ZN3LED2LREaa>
		break;
 80077fe:	f000 bec9 	b.w	8008594 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_L){
 8007802:	4881      	ldr	r0, [pc, #516]	; (8007a08 <cppLoop+0x620>)
 8007804:	f7fa fb42 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d059      	beq.n	80078cc <cppLoop+0x4e4>
			led.LR(-1, 1);
 8007818:	2201      	movs	r2, #1
 800781a:	f04f 31ff 	mov.w	r1, #4294967295
 800781e:	487b      	ldr	r0, [pc, #492]	; (8007a0c <cppLoop+0x624>)
 8007820:	f7fa fc54 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007824:	2064      	movs	r0, #100	; 0x64
 8007826:	f000 fff5 	bl	8008814 <HAL_Delay>
			if(selector == 0){
 800782a:	4b79      	ldr	r3, [pc, #484]	; (8007a10 <cppLoop+0x628>)
 800782c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d113      	bne.n	800785c <cppLoop+0x474>
				adj_kp = adj_kp - 0.00001;
 8007834:	4b77      	ldr	r3, [pc, #476]	; (8007a14 <cppLoop+0x62c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f7f8 fe9d 	bl	8000578 <__aeabi_f2d>
 800783e:	a36c      	add	r3, pc, #432	; (adr r3, 80079f0 <cppLoop+0x608>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fd38 	bl	80002b8 <__aeabi_dsub>
 8007848:	4603      	mov	r3, r0
 800784a:	460c      	mov	r4, r1
 800784c:	4618      	mov	r0, r3
 800784e:	4621      	mov	r1, r4
 8007850:	f7f9 f9e2 	bl	8000c18 <__aeabi_d2f>
 8007854:	4602      	mov	r2, r0
 8007856:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <cppLoop+0x62c>)
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e02b      	b.n	80078b4 <cppLoop+0x4cc>
			else if(selector == 1){
 800785c:	4b6c      	ldr	r3, [pc, #432]	; (8007a10 <cppLoop+0x628>)
 800785e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d113      	bne.n	800788e <cppLoop+0x4a6>
				adj_ki = adj_ki - 0.0001;
 8007866:	4b6c      	ldr	r3, [pc, #432]	; (8007a18 <cppLoop+0x630>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f7f8 fe84 	bl	8000578 <__aeabi_f2d>
 8007870:	a361      	add	r3, pc, #388	; (adr r3, 80079f8 <cppLoop+0x610>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fd1f 	bl	80002b8 <__aeabi_dsub>
 800787a:	4603      	mov	r3, r0
 800787c:	460c      	mov	r4, r1
 800787e:	4618      	mov	r0, r3
 8007880:	4621      	mov	r1, r4
 8007882:	f7f9 f9c9 	bl	8000c18 <__aeabi_d2f>
 8007886:	4602      	mov	r2, r0
 8007888:	4b63      	ldr	r3, [pc, #396]	; (8007a18 <cppLoop+0x630>)
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	e012      	b.n	80078b4 <cppLoop+0x4cc>
				adj_kd = adj_kd - 0.000001;
 800788e:	4b63      	ldr	r3, [pc, #396]	; (8007a1c <cppLoop+0x634>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f7f8 fe70 	bl	8000578 <__aeabi_f2d>
 8007898:	a359      	add	r3, pc, #356	; (adr r3, 8007a00 <cppLoop+0x618>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fd0b 	bl	80002b8 <__aeabi_dsub>
 80078a2:	4603      	mov	r3, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	4618      	mov	r0, r3
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7f9 f9b5 	bl	8000c18 <__aeabi_d2f>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b5a      	ldr	r3, [pc, #360]	; (8007a1c <cppLoop+0x634>)
 80078b2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80078b4:	2152      	movs	r1, #82	; 0x52
 80078b6:	4855      	ldr	r0, [pc, #340]	; (8007a0c <cppLoop+0x624>)
 80078b8:	f7fa fb4c 	bl	8001f54 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80078bc:	2200      	movs	r2, #0
 80078be:	f04f 31ff 	mov.w	r1, #4294967295
 80078c2:	4852      	ldr	r0, [pc, #328]	; (8007a0c <cppLoop+0x624>)
 80078c4:	f7fa fc02 	bl	80020cc <_ZN3LED2LREaa>
		break;
 80078c8:	f000 be64 	b.w	8008594 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_D){
 80078cc:	484e      	ldr	r0, [pc, #312]	; (8007a08 <cppLoop+0x620>)
 80078ce:	f7fa fadd 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d03d      	beq.n	800795e <cppLoop+0x576>
			led.LR(-1, 1);
 80078e2:	2201      	movs	r2, #1
 80078e4:	f04f 31ff 	mov.w	r1, #4294967295
 80078e8:	4848      	ldr	r0, [pc, #288]	; (8007a0c <cppLoop+0x624>)
 80078ea:	f7fa fbef 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80078ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80078f2:	f000 ff8f 	bl	8008814 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80078f6:	f107 030c 	add.w	r3, r7, #12
 80078fa:	2201      	movs	r2, #1
 80078fc:	4948      	ldr	r1, [pc, #288]	; (8007a20 <cppLoop+0x638>)
 80078fe:	4849      	ldr	r0, [pc, #292]	; (8007a24 <cppLoop+0x63c>)
 8007900:	f7f9 ff12 	bl	8001728 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007904:	f107 0308 	add.w	r3, r7, #8
 8007908:	2201      	movs	r2, #1
 800790a:	4947      	ldr	r1, [pc, #284]	; (8007a28 <cppLoop+0x640>)
 800790c:	4845      	ldr	r0, [pc, #276]	; (8007a24 <cppLoop+0x63c>)
 800790e:	f7f9 ff0b 	bl	8001728 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007912:	1d3b      	adds	r3, r7, #4
 8007914:	2201      	movs	r2, #1
 8007916:	4945      	ldr	r1, [pc, #276]	; (8007a2c <cppLoop+0x644>)
 8007918:	4842      	ldr	r0, [pc, #264]	; (8007a24 <cppLoop+0x63c>)
 800791a:	f7f9 ff05 	bl	8001728 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800791e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007922:	ed97 7a02 	vldr	s14, [r7, #8]
 8007926:	edd7 6a01 	vldr	s13, [r7, #4]
 800792a:	eeb0 1a66 	vmov.f32	s2, s13
 800792e:	eef0 0a47 	vmov.f32	s1, s14
 8007932:	eeb0 0a67 	vmov.f32	s0, s15
 8007936:	483e      	ldr	r0, [pc, #248]	; (8007a30 <cppLoop+0x648>)
 8007938:	f7fb fe7c 	bl	8003634 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a35      	ldr	r2, [pc, #212]	; (8007a14 <cppLoop+0x62c>)
 8007940:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a34      	ldr	r2, [pc, #208]	; (8007a18 <cppLoop+0x630>)
 8007946:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4a34      	ldr	r2, [pc, #208]	; (8007a1c <cppLoop+0x634>)
 800794c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800794e:	2200      	movs	r2, #0
 8007950:	f04f 31ff 	mov.w	r1, #4294967295
 8007954:	482d      	ldr	r0, [pc, #180]	; (8007a0c <cppLoop+0x624>)
 8007956:	f7fa fbb9 	bl	80020cc <_ZN3LED2LREaa>
		break;
 800795a:	f000 be1b 	b.w	8008594 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_C){
 800795e:	482a      	ldr	r0, [pc, #168]	; (8007a08 <cppLoop+0x620>)
 8007960:	f7fa fa94 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007964:	4603      	mov	r3, r0
 8007966:	2b02      	cmp	r3, #2
 8007968:	bf0c      	ite	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	2300      	movne	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 860f 	beq.w	8008594 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8007976:	2201      	movs	r2, #1
 8007978:	f04f 31ff 	mov.w	r1, #4294967295
 800797c:	4823      	ldr	r0, [pc, #140]	; (8007a0c <cppLoop+0x624>)
 800797e:	f7fa fba5 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007982:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007986:	f000 ff45 	bl	8008814 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800798a:	2300      	movs	r3, #0
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <cppLoop+0x62c>)
 8007990:	2201      	movs	r2, #1
 8007992:	4923      	ldr	r1, [pc, #140]	; (8007a20 <cppLoop+0x638>)
 8007994:	4823      	ldr	r0, [pc, #140]	; (8007a24 <cppLoop+0x63c>)
 8007996:	f7f9 fe61 	bl	800165c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800799a:	2300      	movs	r3, #0
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <cppLoop+0x630>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	4921      	ldr	r1, [pc, #132]	; (8007a28 <cppLoop+0x640>)
 80079a4:	481f      	ldr	r0, [pc, #124]	; (8007a24 <cppLoop+0x63c>)
 80079a6:	f7f9 fe59 	bl	800165c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80079aa:	2300      	movs	r3, #0
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <cppLoop+0x634>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	491e      	ldr	r1, [pc, #120]	; (8007a2c <cppLoop+0x644>)
 80079b4:	481b      	ldr	r0, [pc, #108]	; (8007a24 <cppLoop+0x63c>)
 80079b6:	f7f9 fe51 	bl	800165c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <cppLoop+0x62c>)
 80079bc:	edd3 7a00 	vldr	s15, [r3]
 80079c0:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <cppLoop+0x630>)
 80079c2:	ed93 7a00 	vldr	s14, [r3]
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <cppLoop+0x634>)
 80079c8:	edd3 6a00 	vldr	s13, [r3]
 80079cc:	eeb0 1a66 	vmov.f32	s2, s13
 80079d0:	eef0 0a47 	vmov.f32	s1, s14
 80079d4:	eeb0 0a67 	vmov.f32	s0, s15
 80079d8:	4815      	ldr	r0, [pc, #84]	; (8007a30 <cppLoop+0x648>)
 80079da:	f7fb fe2b 	bl	8003634 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80079de:	2200      	movs	r2, #0
 80079e0:	f04f 31ff 	mov.w	r1, #4294967295
 80079e4:	4809      	ldr	r0, [pc, #36]	; (8007a0c <cppLoop+0x624>)
 80079e6:	f7fa fb71 	bl	80020cc <_ZN3LED2LREaa>
		break;
 80079ea:	f000 bdd3 	b.w	8008594 <cppLoop+0x11ac>
 80079ee:	bf00      	nop
 80079f0:	88e368f1 	.word	0x88e368f1
 80079f4:	3ee4f8b5 	.word	0x3ee4f8b5
 80079f8:	eb1c432d 	.word	0xeb1c432d
 80079fc:	3f1a36e2 	.word	0x3f1a36e2
 8007a00:	a0b5ed8d 	.word	0xa0b5ed8d
 8007a04:	3eb0c6f7 	.word	0x3eb0c6f7
 8007a08:	200005d0 	.word	0x200005d0
 8007a0c:	200005dc 	.word	0x200005dc
 8007a10:	2003c43e 	.word	0x2003c43e
 8007a14:	2003c440 	.word	0x2003c440
 8007a18:	2003c448 	.word	0x2003c448
 8007a1c:	2003c450 	.word	0x2003c450
 8007a20:	08018ab4 	.word	0x08018ab4
 8007a24:	08018abc 	.word	0x08018abc
 8007a28:	08018ac4 	.word	0x08018ac4
 8007a2c:	08018acc 	.word	0x08018acc
 8007a30:	20017db8 	.word	0x20017db8

	case 1:
		led.fullColor('C');
 8007a34:	2143      	movs	r1, #67	; 0x43
 8007a36:	48a6      	ldr	r0, [pc, #664]	; (8007cd0 <cppLoop+0x8e8>)
 8007a38:	f7fa fa8c 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007a3c:	f7f9 fb30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007a40:	2100      	movs	r1, #0
 8007a42:	2000      	movs	r0, #0
 8007a44:	f7f9 fb3c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007a48:	48a2      	ldr	r0, [pc, #648]	; (8007cd4 <cppLoop+0x8ec>)
 8007a4a:	f7f9 fb63 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a4e:	2101      	movs	r1, #1
 8007a50:	2000      	movs	r0, #0
 8007a52:	f7f9 fb35 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007a56:	4ba0      	ldr	r3, [pc, #640]	; (8007cd8 <cppLoop+0x8f0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f8 fd8c 	bl	8000578 <__aeabi_f2d>
 8007a60:	4603      	mov	r3, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	461a      	mov	r2, r3
 8007a66:	4623      	mov	r3, r4
 8007a68:	489c      	ldr	r0, [pc, #624]	; (8007cdc <cppLoop+0x8f4>)
 8007a6a:	f7f9 fb53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007a6e:	489c      	ldr	r0, [pc, #624]	; (8007ce0 <cppLoop+0x8f8>)
 8007a70:	f7fa fa0c 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8589 	beq.w	8008598 <cppLoop+0x11b0>
			HAL_Delay(500);
 8007a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a8a:	f000 fec3 	bl	8008814 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007a8e:	4b92      	ldr	r3, [pc, #584]	; (8007cd8 <cppLoop+0x8f0>)
 8007a90:	edd3 7a00 	vldr	s15, [r3]
 8007a94:	eeb0 0a67 	vmov.f32	s0, s15
 8007a98:	4892      	ldr	r0, [pc, #584]	; (8007ce4 <cppLoop+0x8fc>)
 8007a9a:	f7fb fe20 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	488a      	ldr	r0, [pc, #552]	; (8007cd0 <cppLoop+0x8e8>)
 8007aa6:	f7fa fb11 	bl	80020cc <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007aaa:	2100      	movs	r1, #0
 8007aac:	488d      	ldr	r0, [pc, #564]	; (8007ce4 <cppLoop+0x8fc>)
 8007aae:	f7fc f91f 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007ab2:	488c      	ldr	r0, [pc, #560]	; (8007ce4 <cppLoop+0x8fc>)
 8007ab4:	f7fc f81a 	bl	8003aec <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	2100      	movs	r1, #0
 8007abe:	4884      	ldr	r0, [pc, #528]	; (8007cd0 <cppLoop+0x8e8>)
 8007ac0:	f7fa fb04 	bl	80020cc <_ZN3LED2LREaa>
		}

		break;
 8007ac4:	f000 bd68 	b.w	8008598 <cppLoop+0x11b0>

	case 2:
		led.fullColor('B');
 8007ac8:	2142      	movs	r1, #66	; 0x42
 8007aca:	4881      	ldr	r0, [pc, #516]	; (8007cd0 <cppLoop+0x8e8>)
 8007acc:	f7fa fa42 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007ad0:	f7f9 fae6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f7f9 faf2 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007adc:	487d      	ldr	r0, [pc, #500]	; (8007cd4 <cppLoop+0x8ec>)
 8007ade:	f7f9 fb19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	f7f9 faeb 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007aea:	4b7b      	ldr	r3, [pc, #492]	; (8007cd8 <cppLoop+0x8f0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7f8 fd42 	bl	8000578 <__aeabi_f2d>
 8007af4:	4603      	mov	r3, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	461a      	mov	r2, r3
 8007afa:	4623      	mov	r3, r4
 8007afc:	487a      	ldr	r0, [pc, #488]	; (8007ce8 <cppLoop+0x900>)
 8007afe:	f7f9 fb09 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007b02:	4877      	ldr	r0, [pc, #476]	; (8007ce0 <cppLoop+0x8f8>)
 8007b04:	f7fa f9c2 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	bf0c      	ite	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	2300      	movne	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d023      	beq.n	8007b60 <cppLoop+0x778>
			led.LR(-1, 1);
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8007b1e:	486c      	ldr	r0, [pc, #432]	; (8007cd0 <cppLoop+0x8e8>)
 8007b20:	f7fa fad4 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b24:	2064      	movs	r0, #100	; 0x64
 8007b26:	f000 fe75 	bl	8008814 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007b2a:	4b6b      	ldr	r3, [pc, #428]	; (8007cd8 <cppLoop+0x8f0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7f8 fd22 	bl	8000578 <__aeabi_f2d>
 8007b34:	a364      	add	r3, pc, #400	; (adr r3, 8007cc8 <cppLoop+0x8e0>)
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f7f8 fbbf 	bl	80002bc <__adddf3>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	4618      	mov	r0, r3
 8007b44:	4621      	mov	r1, r4
 8007b46:	f7f9 f867 	bl	8000c18 <__aeabi_d2f>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	4b62      	ldr	r3, [pc, #392]	; (8007cd8 <cppLoop+0x8f0>)
 8007b4e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007b50:	2200      	movs	r2, #0
 8007b52:	f04f 31ff 	mov.w	r1, #4294967295
 8007b56:	485e      	ldr	r0, [pc, #376]	; (8007cd0 <cppLoop+0x8e8>)
 8007b58:	f7fa fab8 	bl	80020cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007b5c:	f000 bd1e 	b.w	800859c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_L){
 8007b60:	485f      	ldr	r0, [pc, #380]	; (8007ce0 <cppLoop+0x8f8>)
 8007b62:	f7fa f993 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2301      	moveq	r3, #1
 8007b6e:	2300      	movne	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d023      	beq.n	8007bbe <cppLoop+0x7d6>
			led.LR(-1, 1);
 8007b76:	2201      	movs	r2, #1
 8007b78:	f04f 31ff 	mov.w	r1, #4294967295
 8007b7c:	4854      	ldr	r0, [pc, #336]	; (8007cd0 <cppLoop+0x8e8>)
 8007b7e:	f7fa faa5 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b82:	2064      	movs	r0, #100	; 0x64
 8007b84:	f000 fe46 	bl	8008814 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007b88:	4b53      	ldr	r3, [pc, #332]	; (8007cd8 <cppLoop+0x8f0>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fcf3 	bl	8000578 <__aeabi_f2d>
 8007b92:	a34d      	add	r3, pc, #308	; (adr r3, 8007cc8 <cppLoop+0x8e0>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fb8e 	bl	80002b8 <__aeabi_dsub>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	f7f9 f838 	bl	8000c18 <__aeabi_d2f>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b4b      	ldr	r3, [pc, #300]	; (8007cd8 <cppLoop+0x8f0>)
 8007bac:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb4:	4846      	ldr	r0, [pc, #280]	; (8007cd0 <cppLoop+0x8e8>)
 8007bb6:	f7fa fa89 	bl	80020cc <_ZN3LED2LREaa>
		break;
 8007bba:	f000 bcef 	b.w	800859c <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_C){
 8007bbe:	4848      	ldr	r0, [pc, #288]	; (8007ce0 <cppLoop+0x8f8>)
 8007bc0:	f7fa f964 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	bf0c      	ite	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	2300      	movne	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 84e3 	beq.w	800859c <cppLoop+0x11b4>
			led.LR(-1, 1);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007bdc:	483c      	ldr	r0, [pc, #240]	; (8007cd0 <cppLoop+0x8e8>)
 8007bde:	f7fa fa75 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007be2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007be6:	f000 fe15 	bl	8008814 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <cppLoop+0x8f0>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	493e      	ldr	r1, [pc, #248]	; (8007cec <cppLoop+0x904>)
 8007bf4:	483e      	ldr	r0, [pc, #248]	; (8007cf0 <cppLoop+0x908>)
 8007bf6:	f7f9 fd31 	bl	800165c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007bfa:	4b37      	ldr	r3, [pc, #220]	; (8007cd8 <cppLoop+0x8f0>)
 8007bfc:	edd3 7a00 	vldr	s15, [r3]
 8007c00:	eeb0 0a67 	vmov.f32	s0, s15
 8007c04:	4837      	ldr	r0, [pc, #220]	; (8007ce4 <cppLoop+0x8fc>)
 8007c06:	f7fb fd6a 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c10:	482f      	ldr	r0, [pc, #188]	; (8007cd0 <cppLoop+0x8e8>)
 8007c12:	f7fa fa5b 	bl	80020cc <_ZN3LED2LREaa>
		break;
 8007c16:	f000 bcc1 	b.w	800859c <cppLoop+0x11b4>

	case 3:
		led.fullColor('Y');
 8007c1a:	2159      	movs	r1, #89	; 0x59
 8007c1c:	482c      	ldr	r0, [pc, #176]	; (8007cd0 <cppLoop+0x8e8>)
 8007c1e:	f7fa f999 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c22:	f7f9 fa3d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c26:	2100      	movs	r1, #0
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f7f9 fa49 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007c2e:	4831      	ldr	r0, [pc, #196]	; (8007cf4 <cppLoop+0x90c>)
 8007c30:	f7f9 fa70 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c34:	2101      	movs	r1, #1
 8007c36:	2000      	movs	r0, #0
 8007c38:	f7f9 fa42 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8007c3c:	4b2e      	ldr	r3, [pc, #184]	; (8007cf8 <cppLoop+0x910>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f8 fc99 	bl	8000578 <__aeabi_f2d>
 8007c46:	4603      	mov	r3, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	4823      	ldr	r0, [pc, #140]	; (8007cdc <cppLoop+0x8f4>)
 8007c50:	f7f9 fa60 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007c54:	4822      	ldr	r0, [pc, #136]	; (8007ce0 <cppLoop+0x8f8>)
 8007c56:	f7fa f919 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 849a 	beq.w	80085a0 <cppLoop+0x11b8>
			HAL_Delay(500);
 8007c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c70:	f000 fdd0 	bl	8008814 <HAL_Delay>

			led.LR(1, -1);
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4815      	ldr	r0, [pc, #84]	; (8007cd0 <cppLoop+0x8e8>)
 8007c7c:	f7fa fa26 	bl	80020cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007c80:	2101      	movs	r1, #1
 8007c82:	4818      	ldr	r0, [pc, #96]	; (8007ce4 <cppLoop+0x8fc>)
 8007c84:	f7fc f834 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <cppLoop+0x910>)
 8007c8a:	edd3 7a00 	vldr	s15, [r3]
 8007c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c92:	4814      	ldr	r0, [pc, #80]	; (8007ce4 <cppLoop+0x8fc>)
 8007c94:	f7fb fd23 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007c98:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <cppLoop+0x910>)
 8007c9a:	edd3 7a00 	vldr	s15, [r3]
 8007c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca2:	4810      	ldr	r0, [pc, #64]	; (8007ce4 <cppLoop+0x8fc>)
 8007ca4:	f7fb fd2a 	bl	80036fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 8007ca8:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <cppLoop+0x8fc>)
 8007caa:	f7fb f8c7 	bl	8002e3c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007cae:	480d      	ldr	r0, [pc, #52]	; (8007ce4 <cppLoop+0x8fc>)
 8007cb0:	f7fb ff1c 	bl	8003aec <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4805      	ldr	r0, [pc, #20]	; (8007cd0 <cppLoop+0x8e8>)
 8007cbc:	f7fa fa06 	bl	80020cc <_ZN3LED2LREaa>
		}

		break;
 8007cc0:	f000 bc6e 	b.w	80085a0 <cppLoop+0x11b8>
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	9999999a 	.word	0x9999999a
 8007ccc:	3fb99999 	.word	0x3fb99999
 8007cd0:	200005dc 	.word	0x200005dc
 8007cd4:	08018ad4 	.word	0x08018ad4
 8007cd8:	2003c458 	.word	0x2003c458
 8007cdc:	08018ae0 	.word	0x08018ae0
 8007ce0:	200005d0 	.word	0x200005d0
 8007ce4:	20017db8 	.word	0x20017db8
 8007ce8:	08018aec 	.word	0x08018aec
 8007cec:	08018af8 	.word	0x08018af8
 8007cf0:	08018abc 	.word	0x08018abc
 8007cf4:	08018b04 	.word	0x08018b04
 8007cf8:	2003c460 	.word	0x2003c460

	case 4:
		led.fullColor('G');
 8007cfc:	2147      	movs	r1, #71	; 0x47
 8007cfe:	48be      	ldr	r0, [pc, #760]	; (8007ff8 <cppLoop+0xc10>)
 8007d00:	f7fa f928 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d04:	f7f9 f9cc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f9 f9d8 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007d10:	48ba      	ldr	r0, [pc, #744]	; (8007ffc <cppLoop+0xc14>)
 8007d12:	f7f9 f9ff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d16:	2101      	movs	r1, #1
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f7f9 f9d1 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 8007d1e:	48b8      	ldr	r0, [pc, #736]	; (8008000 <cppLoop+0xc18>)
 8007d20:	f7fb fd1a 	bl	8003758 <_ZN9LineTrace14getMaxVelocityEv>
 8007d24:	ee10 3a10 	vmov	r3, s0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7f8 fc25 	bl	8000578 <__aeabi_f2d>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4623      	mov	r3, r4
 8007d36:	48b3      	ldr	r0, [pc, #716]	; (8008004 <cppLoop+0xc1c>)
 8007d38:	f7f9 f9ec 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007d3c:	48b2      	ldr	r0, [pc, #712]	; (8008008 <cppLoop+0xc20>)
 8007d3e:	f7fa f8a5 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d023      	beq.n	8007d9a <cppLoop+0x9b2>
			led.LR(-1, 1);
 8007d52:	2201      	movs	r2, #1
 8007d54:	f04f 31ff 	mov.w	r1, #4294967295
 8007d58:	48a7      	ldr	r0, [pc, #668]	; (8007ff8 <cppLoop+0xc10>)
 8007d5a:	f7fa f9b7 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d5e:	2064      	movs	r0, #100	; 0x64
 8007d60:	f000 fd58 	bl	8008814 <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 8007d64:	4ba9      	ldr	r3, [pc, #676]	; (800800c <cppLoop+0xc24>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7f8 fc05 	bl	8000578 <__aeabi_f2d>
 8007d6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ff0 <cppLoop+0xc08>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f7f8 faa2 	bl	80002bc <__adddf3>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f7f8 ff4a 	bl	8000c18 <__aeabi_d2f>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4ba1      	ldr	r3, [pc, #644]	; (800800c <cppLoop+0xc24>)
 8007d88:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d90:	4899      	ldr	r0, [pc, #612]	; (8007ff8 <cppLoop+0xc10>)
 8007d92:	f7fa f99b 	bl	80020cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 8007d96:	f000 bc05 	b.w	80085a4 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_L){
 8007d9a:	489b      	ldr	r0, [pc, #620]	; (8008008 <cppLoop+0xc20>)
 8007d9c:	f7fa f876 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	bf0c      	ite	eq
 8007da6:	2301      	moveq	r3, #1
 8007da8:	2300      	movne	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d022      	beq.n	8007df6 <cppLoop+0xa0e>
			led.LR(-1, 1);
 8007db0:	2201      	movs	r2, #1
 8007db2:	f04f 31ff 	mov.w	r1, #4294967295
 8007db6:	4890      	ldr	r0, [pc, #576]	; (8007ff8 <cppLoop+0xc10>)
 8007db8:	f7fa f988 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007dbc:	2064      	movs	r0, #100	; 0x64
 8007dbe:	f000 fd29 	bl	8008814 <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 8007dc2:	4b92      	ldr	r3, [pc, #584]	; (800800c <cppLoop+0xc24>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7f8 fbd6 	bl	8000578 <__aeabi_f2d>
 8007dcc:	a388      	add	r3, pc, #544	; (adr r3, 8007ff0 <cppLoop+0xc08>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fa71 	bl	80002b8 <__aeabi_dsub>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	460c      	mov	r4, r1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7f8 ff1b 	bl	8000c18 <__aeabi_d2f>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b89      	ldr	r3, [pc, #548]	; (800800c <cppLoop+0xc24>)
 8007de6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007de8:	2200      	movs	r2, #0
 8007dea:	f04f 31ff 	mov.w	r1, #4294967295
 8007dee:	4882      	ldr	r0, [pc, #520]	; (8007ff8 <cppLoop+0xc10>)
 8007df0:	f7fa f96c 	bl	80020cc <_ZN3LED2LREaa>
		break;
 8007df4:	e3d6      	b.n	80085a4 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_C){
 8007df6:	4884      	ldr	r0, [pc, #528]	; (8008008 <cppLoop+0xc20>)
 8007df8:	f7fa f848 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	bf0c      	ite	eq
 8007e02:	2301      	moveq	r3, #1
 8007e04:	2300      	movne	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 83cb 	beq.w	80085a4 <cppLoop+0x11bc>
			led.LR(-1, 1);
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f04f 31ff 	mov.w	r1, #4294967295
 8007e14:	4878      	ldr	r0, [pc, #480]	; (8007ff8 <cppLoop+0xc10>)
 8007e16:	f7fa f959 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e1e:	f000 fcf9 	bl	8008814 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007e22:	2300      	movs	r3, #0
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4b79      	ldr	r3, [pc, #484]	; (800800c <cppLoop+0xc24>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4979      	ldr	r1, [pc, #484]	; (8008010 <cppLoop+0xc28>)
 8007e2c:	4879      	ldr	r0, [pc, #484]	; (8008014 <cppLoop+0xc2c>)
 8007e2e:	f7f9 fc15 	bl	800165c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007e32:	4b76      	ldr	r3, [pc, #472]	; (800800c <cppLoop+0xc24>)
 8007e34:	edd3 7a00 	vldr	s15, [r3]
 8007e38:	eeb0 0a67 	vmov.f32	s0, s15
 8007e3c:	4870      	ldr	r0, [pc, #448]	; (8008000 <cppLoop+0xc18>)
 8007e3e:	f7fb fc5d 	bl	80036fc <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	f04f 31ff 	mov.w	r1, #4294967295
 8007e48:	486b      	ldr	r0, [pc, #428]	; (8007ff8 <cppLoop+0xc10>)
 8007e4a:	f7fa f93f 	bl	80020cc <_ZN3LED2LREaa>
		break;
 8007e4e:	e3a9      	b.n	80085a4 <cppLoop+0x11bc>

	case 5:
		led.fullColor('M');
 8007e50:	214d      	movs	r1, #77	; 0x4d
 8007e52:	4869      	ldr	r0, [pc, #420]	; (8007ff8 <cppLoop+0xc10>)
 8007e54:	f7fa f87e 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e58:	f7f9 f922 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f7f9 f92e 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007e64:	486c      	ldr	r0, [pc, #432]	; (8008018 <cppLoop+0xc30>)
 8007e66:	f7f9 f955 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7f9 f927 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007e72:	4b6a      	ldr	r3, [pc, #424]	; (800801c <cppLoop+0xc34>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7f8 fb7e 	bl	8000578 <__aeabi_f2d>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	461a      	mov	r2, r3
 8007e82:	4623      	mov	r3, r4
 8007e84:	4866      	ldr	r0, [pc, #408]	; (8008020 <cppLoop+0xc38>)
 8007e86:	f7f9 f945 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007e8a:	485f      	ldr	r0, [pc, #380]	; (8008008 <cppLoop+0xc20>)
 8007e8c:	f7f9 fffe 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	bf0c      	ite	eq
 8007e96:	2301      	moveq	r3, #1
 8007e98:	2300      	movne	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8383 	beq.w	80085a8 <cppLoop+0x11c0>
			HAL_Delay(500);
 8007ea2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ea6:	f000 fcb5 	bl	8008814 <HAL_Delay>

			led.LR(1, -1);
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4851      	ldr	r0, [pc, #324]	; (8007ff8 <cppLoop+0xc10>)
 8007eb2:	f7fa f90b 	bl	80020cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4851      	ldr	r0, [pc, #324]	; (8008000 <cppLoop+0xc18>)
 8007eba:	f7fb ff19 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007ebe:	4b57      	ldr	r3, [pc, #348]	; (800801c <cppLoop+0xc34>)
 8007ec0:	edd3 7a00 	vldr	s15, [r3]
 8007ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ec8:	484d      	ldr	r0, [pc, #308]	; (8008000 <cppLoop+0xc18>)
 8007eca:	f7fb fc08 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007ece:	4b53      	ldr	r3, [pc, #332]	; (800801c <cppLoop+0xc34>)
 8007ed0:	edd3 7a00 	vldr	s15, [r3]
 8007ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ed8:	4849      	ldr	r0, [pc, #292]	; (8008000 <cppLoop+0xc18>)
 8007eda:	f7fb fc1e 	bl	800371a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 8007ede:	4848      	ldr	r0, [pc, #288]	; (8008000 <cppLoop+0xc18>)
 8007ee0:	f7fa ffac 	bl	8002e3c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007ee4:	4846      	ldr	r0, [pc, #280]	; (8008000 <cppLoop+0xc18>)
 8007ee6:	f7fb fe01 	bl	8003aec <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4841      	ldr	r0, [pc, #260]	; (8007ff8 <cppLoop+0xc10>)
 8007ef2:	f7fa f8eb 	bl	80020cc <_ZN3LED2LREaa>
		}

		break;
 8007ef6:	e357      	b.n	80085a8 <cppLoop+0x11c0>

	case 6:
		led.fullColor('R');
 8007ef8:	2152      	movs	r1, #82	; 0x52
 8007efa:	483f      	ldr	r0, [pc, #252]	; (8007ff8 <cppLoop+0xc10>)
 8007efc:	f7fa f82a 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f00:	f7f9 f8ce 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f04:	2100      	movs	r1, #0
 8007f06:	2000      	movs	r0, #0
 8007f08:	f7f9 f8da 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007f0c:	4842      	ldr	r0, [pc, #264]	; (8008018 <cppLoop+0xc30>)
 8007f0e:	f7f9 f901 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f12:	2101      	movs	r1, #1
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7f9 f8d3 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 8007f1a:	4839      	ldr	r0, [pc, #228]	; (8008000 <cppLoop+0xc18>)
 8007f1c:	f7fb fc2b 	bl	8003776 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007f20:	ee10 3a10 	vmov	r3, s0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f8 fb27 	bl	8000578 <__aeabi_f2d>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4623      	mov	r3, r4
 8007f32:	4834      	ldr	r0, [pc, #208]	; (8008004 <cppLoop+0xc1c>)
 8007f34:	f7f9 f8ee 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007f38:	4833      	ldr	r0, [pc, #204]	; (8008008 <cppLoop+0xc20>)
 8007f3a:	f7f9 ffa7 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d022      	beq.n	8007f94 <cppLoop+0xbac>
			led.LR(-1, 1);
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f04f 31ff 	mov.w	r1, #4294967295
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <cppLoop+0xc10>)
 8007f56:	f7fa f8b9 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f5a:	2064      	movs	r0, #100	; 0x64
 8007f5c:	f000 fc5a 	bl	8008814 <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8007f60:	4b2e      	ldr	r3, [pc, #184]	; (800801c <cppLoop+0xc34>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7f8 fb07 	bl	8000578 <__aeabi_f2d>
 8007f6a:	a321      	add	r3, pc, #132	; (adr r3, 8007ff0 <cppLoop+0xc08>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f9a4 	bl	80002bc <__adddf3>
 8007f74:	4603      	mov	r3, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	4618      	mov	r0, r3
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	f7f8 fe4c 	bl	8000c18 <__aeabi_d2f>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b26      	ldr	r3, [pc, #152]	; (800801c <cppLoop+0xc34>)
 8007f84:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	f04f 31ff 	mov.w	r1, #4294967295
 8007f8c:	481a      	ldr	r0, [pc, #104]	; (8007ff8 <cppLoop+0xc10>)
 8007f8e:	f7fa f89d 	bl	80020cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 8007f92:	e30b      	b.n	80085ac <cppLoop+0x11c4>
		else if(joy_stick.getValue() == JOY_L){
 8007f94:	481c      	ldr	r0, [pc, #112]	; (8008008 <cppLoop+0xc20>)
 8007f96:	f7f9 ff79 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d03c      	beq.n	8008024 <cppLoop+0xc3c>
			led.LR(-1, 1);
 8007faa:	2201      	movs	r2, #1
 8007fac:	f04f 31ff 	mov.w	r1, #4294967295
 8007fb0:	4811      	ldr	r0, [pc, #68]	; (8007ff8 <cppLoop+0xc10>)
 8007fb2:	f7fa f88b 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fb6:	2064      	movs	r0, #100	; 0x64
 8007fb8:	f000 fc2c 	bl	8008814 <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8007fbc:	4b17      	ldr	r3, [pc, #92]	; (800801c <cppLoop+0xc34>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f8 fad9 	bl	8000578 <__aeabi_f2d>
 8007fc6:	a30a      	add	r3, pc, #40	; (adr r3, 8007ff0 <cppLoop+0xc08>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f974 	bl	80002b8 <__aeabi_dsub>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f7f8 fe1e 	bl	8000c18 <__aeabi_d2f>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <cppLoop+0xc34>)
 8007fe0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe8:	4803      	ldr	r0, [pc, #12]	; (8007ff8 <cppLoop+0xc10>)
 8007fea:	f7fa f86f 	bl	80020cc <_ZN3LED2LREaa>
		break;
 8007fee:	e2dd      	b.n	80085ac <cppLoop+0x11c4>
 8007ff0:	9999999a 	.word	0x9999999a
 8007ff4:	3fb99999 	.word	0x3fb99999
 8007ff8:	200005dc 	.word	0x200005dc
 8007ffc:	08018b04 	.word	0x08018b04
 8008000:	20017db8 	.word	0x20017db8
 8008004:	08018aec 	.word	0x08018aec
 8008008:	200005d0 	.word	0x200005d0
 800800c:	2003c460 	.word	0x2003c460
 8008010:	08018b10 	.word	0x08018b10
 8008014:	08018abc 	.word	0x08018abc
 8008018:	08018b1c 	.word	0x08018b1c
 800801c:	2003c468 	.word	0x2003c468
 8008020:	08018ae0 	.word	0x08018ae0
		else if(joy_stick.getValue() == JOY_C){
 8008024:	48ca      	ldr	r0, [pc, #808]	; (8008350 <cppLoop+0xf68>)
 8008026:	f7f9 ff31 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 800802a:	4603      	mov	r3, r0
 800802c:	2b02      	cmp	r3, #2
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 82b8 	beq.w	80085ac <cppLoop+0x11c4>
			led.LR(-1, 1);
 800803c:	2201      	movs	r2, #1
 800803e:	f04f 31ff 	mov.w	r1, #4294967295
 8008042:	48c4      	ldr	r0, [pc, #784]	; (8008354 <cppLoop+0xf6c>)
 8008044:	f7fa f842 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008048:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800804c:	f000 fbe2 	bl	8008814 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008050:	2300      	movs	r3, #0
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	4bc0      	ldr	r3, [pc, #768]	; (8008358 <cppLoop+0xf70>)
 8008056:	2201      	movs	r2, #1
 8008058:	49c0      	ldr	r1, [pc, #768]	; (800835c <cppLoop+0xf74>)
 800805a:	48c1      	ldr	r0, [pc, #772]	; (8008360 <cppLoop+0xf78>)
 800805c:	f7f9 fafe 	bl	800165c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008060:	4bbd      	ldr	r3, [pc, #756]	; (8008358 <cppLoop+0xf70>)
 8008062:	edd3 7a00 	vldr	s15, [r3]
 8008066:	eeb0 0a67 	vmov.f32	s0, s15
 800806a:	48be      	ldr	r0, [pc, #760]	; (8008364 <cppLoop+0xf7c>)
 800806c:	f7fb fb55 	bl	800371a <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 8008070:	2200      	movs	r2, #0
 8008072:	f04f 31ff 	mov.w	r1, #4294967295
 8008076:	48b7      	ldr	r0, [pc, #732]	; (8008354 <cppLoop+0xf6c>)
 8008078:	f7fa f828 	bl	80020cc <_ZN3LED2LREaa>
		break;
 800807c:	e296      	b.n	80085ac <cppLoop+0x11c4>

	case 7:
		led.fullColor('~');
 800807e:	217e      	movs	r1, #126	; 0x7e
 8008080:	48b4      	ldr	r0, [pc, #720]	; (8008354 <cppLoop+0xf6c>)
 8008082:	f7f9 ff67 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008086:	f7f9 f80b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800808a:	2100      	movs	r1, #0
 800808c:	2000      	movs	r0, #0
 800808e:	f7f9 f817 	bl	80010c0 <lcd_locate>
		lcd_printf("07      ");
 8008092:	48b5      	ldr	r0, [pc, #724]	; (8008368 <cppLoop+0xf80>)
 8008094:	f7f9 f83e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008098:	2101      	movs	r1, #1
 800809a:	2000      	movs	r0, #0
 800809c:	f7f9 f810 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80080a0:	48b2      	ldr	r0, [pc, #712]	; (800836c <cppLoop+0xf84>)
 80080a2:	f7f9 f837 	bl	8001114 <lcd_printf>
		break;
 80080a6:	e290      	b.n	80085ca <cppLoop+0x11e2>

	case 8:
		led.fullColor('~');
 80080a8:	217e      	movs	r1, #126	; 0x7e
 80080aa:	48aa      	ldr	r0, [pc, #680]	; (8008354 <cppLoop+0xf6c>)
 80080ac:	f7f9 ff52 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080b0:	f7f8 fff6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080b4:	2100      	movs	r1, #0
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7f9 f802 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 80080bc:	48ac      	ldr	r0, [pc, #688]	; (8008370 <cppLoop+0xf88>)
 80080be:	f7f9 f829 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080c2:	2101      	movs	r1, #1
 80080c4:	2000      	movs	r0, #0
 80080c6:	f7f8 fffb 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80080ca:	48a8      	ldr	r0, [pc, #672]	; (800836c <cppLoop+0xf84>)
 80080cc:	f7f9 f822 	bl	8001114 <lcd_printf>

		break;
 80080d0:	e27b      	b.n	80085ca <cppLoop+0x11e2>

	case 9:
		led.fullColor('~');
 80080d2:	217e      	movs	r1, #126	; 0x7e
 80080d4:	489f      	ldr	r0, [pc, #636]	; (8008354 <cppLoop+0xf6c>)
 80080d6:	f7f9 ff3d 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080da:	f7f8 ffe1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080de:	2100      	movs	r1, #0
 80080e0:	2000      	movs	r0, #0
 80080e2:	f7f8 ffed 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80080e6:	48a3      	ldr	r0, [pc, #652]	; (8008374 <cppLoop+0xf8c>)
 80080e8:	f7f9 f814 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080ec:	2101      	movs	r1, #1
 80080ee:	2000      	movs	r0, #0
 80080f0:	f7f8 ffe6 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80080f4:	48a0      	ldr	r0, [pc, #640]	; (8008378 <cppLoop+0xf90>)
 80080f6:	f7f9 f80d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80080fa:	4895      	ldr	r0, [pc, #596]	; (8008350 <cppLoop+0xf68>)
 80080fc:	f7f9 fec6 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8008100:	4603      	mov	r3, r0
 8008102:	2b02      	cmp	r3, #2
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 824f 	beq.w	80085b0 <cppLoop+0x11c8>
			led.LR(-1, 1);
 8008112:	2201      	movs	r2, #1
 8008114:	f04f 31ff 	mov.w	r1, #4294967295
 8008118:	488e      	ldr	r0, [pc, #568]	; (8008354 <cppLoop+0xf6c>)
 800811a:	f7f9 ffd7 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800811e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008122:	f000 fb77 	bl	8008814 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008126:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800837c <cppLoop+0xf94>
 800812a:	488e      	ldr	r0, [pc, #568]	; (8008364 <cppLoop+0xf7c>)
 800812c:	f7fb fac8 	bl	80036c0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008130:	488c      	ldr	r0, [pc, #560]	; (8008364 <cppLoop+0xf7c>)
 8008132:	f7fb fc4d 	bl	80039d0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800813a:	f000 fb6b 	bl	8008814 <HAL_Delay>

			led.fullColor('R');
 800813e:	2152      	movs	r1, #82	; 0x52
 8008140:	4884      	ldr	r0, [pc, #528]	; (8008354 <cppLoop+0xf6c>)
 8008142:	f7f9 ff07 	bl	8001f54 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008146:	488e      	ldr	r0, [pc, #568]	; (8008380 <cppLoop+0xf98>)
 8008148:	f7f9 f9be 	bl	80014c8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800814c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008150:	f000 fb60 	bl	8008814 <HAL_Delay>

			line_trace.stop();
 8008154:	4883      	ldr	r0, [pc, #524]	; (8008364 <cppLoop+0xf7c>)
 8008156:	f7fb fc61 	bl	8003a1c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800815a:	498a      	ldr	r1, [pc, #552]	; (8008384 <cppLoop+0xf9c>)
 800815c:	488a      	ldr	r0, [pc, #552]	; (8008388 <cppLoop+0xfa0>)
 800815e:	f7f9 fa09 	bl	8001574 <user_fopen>
			float d = encoder.getDistance();
 8008162:	4887      	ldr	r0, [pc, #540]	; (8008380 <cppLoop+0xf98>)
 8008164:	f7f9 f974 	bl	8001450 <_ZN7Encoder11getDistanceEv>
 8008168:	eef0 7a40 	vmov.f32	s15, s0
 800816c:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8008170:	463b      	mov	r3, r7
 8008172:	2201      	movs	r2, #1
 8008174:	4619      	mov	r1, r3
 8008176:	2001      	movs	r0, #1
 8008178:	f7f9 fa1e 	bl	80015b8 <sd_write_float>
			user_fclose();
 800817c:	f7f9 fa0c 	bl	8001598 <user_fclose>

			led.LR(-1, 0);
 8008180:	2200      	movs	r2, #0
 8008182:	f04f 31ff 	mov.w	r1, #4294967295
 8008186:	4873      	ldr	r0, [pc, #460]	; (8008354 <cppLoop+0xf6c>)
 8008188:	f7f9 ffa0 	bl	80020cc <_ZN3LED2LREaa>
		}
		break;
 800818c:	e210      	b.n	80085b0 <cppLoop+0x11c8>

	case 10:
		led.fullColor('~');
 800818e:	217e      	movs	r1, #126	; 0x7e
 8008190:	4870      	ldr	r0, [pc, #448]	; (8008354 <cppLoop+0xf6c>)
 8008192:	f7f9 fedf 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008196:	f7f8 ff83 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800819a:	2100      	movs	r1, #0
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 ff8f 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80081a2:	487a      	ldr	r0, [pc, #488]	; (800838c <cppLoop+0xfa4>)
 80081a4:	f7f8 ffb6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081a8:	2101      	movs	r1, #1
 80081aa:	2000      	movs	r0, #0
 80081ac:	f7f8 ff88 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80081b0:	4877      	ldr	r0, [pc, #476]	; (8008390 <cppLoop+0xfa8>)
 80081b2:	f7f8 ffaf 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80081b6:	4866      	ldr	r0, [pc, #408]	; (8008350 <cppLoop+0xf68>)
 80081b8:	f7f9 fe68 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b02      	cmp	r3, #2
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 81f3 	beq.w	80085b4 <cppLoop+0x11cc>
			HAL_Delay(500);
 80081ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081d2:	f000 fb1f 	bl	8008814 <HAL_Delay>
			led.LR(-1, 1);
 80081d6:	2201      	movs	r2, #1
 80081d8:	f04f 31ff 	mov.w	r1, #4294967295
 80081dc:	485d      	ldr	r0, [pc, #372]	; (8008354 <cppLoop+0xf6c>)
 80081de:	f7f9 ff75 	bl	80020cc <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80081e2:	2101      	movs	r1, #1
 80081e4:	485f      	ldr	r0, [pc, #380]	; (8008364 <cppLoop+0xf7c>)
 80081e6:	f7fb fd83 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80081ea:	485e      	ldr	r0, [pc, #376]	; (8008364 <cppLoop+0xf7c>)
 80081ec:	f7fa feb0 	bl	8002f50 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80081f0:	2200      	movs	r2, #0
 80081f2:	f04f 31ff 	mov.w	r1, #4294967295
 80081f6:	4857      	ldr	r0, [pc, #348]	; (8008354 <cppLoop+0xf6c>)
 80081f8:	f7f9 ff68 	bl	80020cc <_ZN3LED2LREaa>
		}

		break;
 80081fc:	e1da      	b.n	80085b4 <cppLoop+0x11cc>

	case 11:
		led.fullColor('~');
 80081fe:	217e      	movs	r1, #126	; 0x7e
 8008200:	4854      	ldr	r0, [pc, #336]	; (8008354 <cppLoop+0xf6c>)
 8008202:	f7f9 fea7 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008206:	f7f8 ff4b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800820a:	2100      	movs	r1, #0
 800820c:	2000      	movs	r0, #0
 800820e:	f7f8 ff57 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8008212:	4860      	ldr	r0, [pc, #384]	; (8008394 <cppLoop+0xfac>)
 8008214:	f7f8 ff7e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008218:	2101      	movs	r1, #1
 800821a:	2000      	movs	r0, #0
 800821c:	f7f8 ff50 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008220:	485d      	ldr	r0, [pc, #372]	; (8008398 <cppLoop+0xfb0>)
 8008222:	f7f8 ff77 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008226:	484a      	ldr	r0, [pc, #296]	; (8008350 <cppLoop+0xf68>)
 8008228:	f7f9 fe30 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 800822c:	4603      	mov	r3, r0
 800822e:	2b02      	cmp	r3, #2
 8008230:	bf0c      	ite	eq
 8008232:	2301      	moveq	r3, #1
 8008234:	2300      	movne	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 81bd 	beq.w	80085b8 <cppLoop+0x11d0>
			HAL_Delay(1500);
 800823e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008242:	f000 fae7 	bl	8008814 <HAL_Delay>
			led.LR(-1, 1);
 8008246:	2201      	movs	r2, #1
 8008248:	f04f 31ff 	mov.w	r1, #4294967295
 800824c:	4841      	ldr	r0, [pc, #260]	; (8008354 <cppLoop+0xf6c>)
 800824e:	f7f9 ff3d 	bl	80020cc <_ZN3LED2LREaa>

			logger.start();
 8008252:	4852      	ldr	r0, [pc, #328]	; (800839c <cppLoop+0xfb4>)
 8008254:	f7fc f903 	bl	800445e <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8008258:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8008338 <cppLoop+0xf50>
 800825c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8008340 <cppLoop+0xf58>
 8008260:	484f      	ldr	r0, [pc, #316]	; (80083a0 <cppLoop+0xfb8>)
 8008262:	f7fc f991 	bl	8004588 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8008266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800826a:	f000 fad3 	bl	8008814 <HAL_Delay>

			logger.stop();
 800826e:	484b      	ldr	r0, [pc, #300]	; (800839c <cppLoop+0xfb4>)
 8008270:	f7fc f906 	bl	8004480 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8008274:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8008348 <cppLoop+0xf60>
 8008278:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8008348 <cppLoop+0xf60>
 800827c:	4848      	ldr	r0, [pc, #288]	; (80083a0 <cppLoop+0xfb8>)
 800827e:	f7fc f983 	bl	8004588 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008282:	4a48      	ldr	r2, [pc, #288]	; (80083a4 <cppLoop+0xfbc>)
 8008284:	4948      	ldr	r1, [pc, #288]	; (80083a8 <cppLoop+0xfc0>)
 8008286:	4845      	ldr	r0, [pc, #276]	; (800839c <cppLoop+0xfb4>)
 8008288:	f7fb fff9 	bl	800427e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800828c:	2200      	movs	r2, #0
 800828e:	f04f 31ff 	mov.w	r1, #4294967295
 8008292:	4830      	ldr	r0, [pc, #192]	; (8008354 <cppLoop+0xf6c>)
 8008294:	f7f9 ff1a 	bl	80020cc <_ZN3LED2LREaa>
		}
		break;
 8008298:	e18e      	b.n	80085b8 <cppLoop+0x11d0>

	case 12:
		led.fullColor('~');
 800829a:	217e      	movs	r1, #126	; 0x7e
 800829c:	482d      	ldr	r0, [pc, #180]	; (8008354 <cppLoop+0xf6c>)
 800829e:	f7f9 fe59 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80082a2:	f7f8 fefd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082a6:	2100      	movs	r1, #0
 80082a8:	2000      	movs	r0, #0
 80082aa:	f7f8 ff09 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80082ae:	483f      	ldr	r0, [pc, #252]	; (80083ac <cppLoop+0xfc4>)
 80082b0:	f7f8 ff30 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082b4:	2101      	movs	r1, #1
 80082b6:	2000      	movs	r0, #0
 80082b8:	f7f8 ff02 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80082bc:	483c      	ldr	r0, [pc, #240]	; (80083b0 <cppLoop+0xfc8>)
 80082be:	f7f8 ff29 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80082c2:	4823      	ldr	r0, [pc, #140]	; (8008350 <cppLoop+0xf68>)
 80082c4:	f7f9 fde2 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	bf0c      	ite	eq
 80082ce:	2301      	moveq	r3, #1
 80082d0:	2300      	movne	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8171 	beq.w	80085bc <cppLoop+0x11d4>
			HAL_Delay(1500);
 80082da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80082de:	f000 fa99 	bl	8008814 <HAL_Delay>
			led.LR(-1, 1);
 80082e2:	2201      	movs	r2, #1
 80082e4:	f04f 31ff 	mov.w	r1, #4294967295
 80082e8:	481a      	ldr	r0, [pc, #104]	; (8008354 <cppLoop+0xf6c>)
 80082ea:	f7f9 feef 	bl	80020cc <_ZN3LED2LREaa>

			logger.start();
 80082ee:	482b      	ldr	r0, [pc, #172]	; (800839c <cppLoop+0xfb4>)
 80082f0:	f7fc f8b5 	bl	800445e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80082f4:	482f      	ldr	r0, [pc, #188]	; (80083b4 <cppLoop+0xfcc>)
 80082f6:	f7fd f9d0 	bl	800569a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80082fa:	eddf 0a20 	vldr	s1, [pc, #128]	; 800837c <cppLoop+0xf94>
 80082fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008302:	482c      	ldr	r0, [pc, #176]	; (80083b4 <cppLoop+0xfcc>)
 8008304:	f7fd f950 	bl	80055a8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8008308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800830c:	f000 fa82 	bl	8008814 <HAL_Delay>

			logger.stop();
 8008310:	4822      	ldr	r0, [pc, #136]	; (800839c <cppLoop+0xfb4>)
 8008312:	f7fc f8b5 	bl	8004480 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8008316:	4827      	ldr	r0, [pc, #156]	; (80083b4 <cppLoop+0xfcc>)
 8008318:	f7fd f9d2 	bl	80056c0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <cppLoop+0xfd0>)
 800831e:	4922      	ldr	r1, [pc, #136]	; (80083a8 <cppLoop+0xfc0>)
 8008320:	481e      	ldr	r0, [pc, #120]	; (800839c <cppLoop+0xfb4>)
 8008322:	f7fb ffac 	bl	800427e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	f04f 31ff 	mov.w	r1, #4294967295
 800832c:	4809      	ldr	r0, [pc, #36]	; (8008354 <cppLoop+0xf6c>)
 800832e:	f7f9 fecd 	bl	80020cc <_ZN3LED2LREaa>
		}
		break;
 8008332:	e143      	b.n	80085bc <cppLoop+0x11d4>
 8008334:	f3af 8000 	nop.w
 8008338:	33333333 	.word	0x33333333
 800833c:	bfd33333 	.word	0xbfd33333
 8008340:	33333333 	.word	0x33333333
 8008344:	3fd33333 	.word	0x3fd33333
	...
 8008350:	200005d0 	.word	0x200005d0
 8008354:	200005dc 	.word	0x200005dc
 8008358:	2003c468 	.word	0x2003c468
 800835c:	08018b28 	.word	0x08018b28
 8008360:	08018abc 	.word	0x08018abc
 8008364:	20017db8 	.word	0x20017db8
 8008368:	08018b34 	.word	0x08018b34
 800836c:	08018b40 	.word	0x08018b40
 8008370:	08018b4c 	.word	0x08018b4c
 8008374:	08018b58 	.word	0x08018b58
 8008378:	08018b60 	.word	0x08018b60
 800837c:	00000000 	.word	0x00000000
 8008380:	20017d10 	.word	0x20017d10
 8008384:	08018b6c 	.word	0x08018b6c
 8008388:	08018b74 	.word	0x08018b74
 800838c:	08018b80 	.word	0x08018b80
 8008390:	08018b8c 	.word	0x08018b8c
 8008394:	08018b98 	.word	0x08018b98
 8008398:	08018ba0 	.word	0x08018ba0
 800839c:	20000600 	.word	0x20000600
 80083a0:	200005d8 	.word	0x200005d8
 80083a4:	08018ba8 	.word	0x08018ba8
 80083a8:	08018bb4 	.word	0x08018bb4
 80083ac:	08018bc0 	.word	0x08018bc0
 80083b0:	08018bc4 	.word	0x08018bc4
 80083b4:	20017d34 	.word	0x20017d34
 80083b8:	08018bd0 	.word	0x08018bd0

	case 13:
		led.fullColor('~');
 80083bc:	217e      	movs	r1, #126	; 0x7e
 80083be:	4886      	ldr	r0, [pc, #536]	; (80085d8 <cppLoop+0x11f0>)
 80083c0:	f7f9 fdc8 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80083c4:	f7f8 fe6c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083c8:	2100      	movs	r1, #0
 80083ca:	2000      	movs	r0, #0
 80083cc:	f7f8 fe78 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80083d0:	4882      	ldr	r0, [pc, #520]	; (80085dc <cppLoop+0x11f4>)
 80083d2:	f7f8 fe9f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80083d6:	2101      	movs	r1, #1
 80083d8:	2000      	movs	r0, #0
 80083da:	f7f8 fe71 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80083de:	4880      	ldr	r0, [pc, #512]	; (80085e0 <cppLoop+0x11f8>)
 80083e0:	f7f8 fe98 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083e4:	487f      	ldr	r0, [pc, #508]	; (80085e4 <cppLoop+0x11fc>)
 80083e6:	f7f9 fd51 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80e2 	beq.w	80085c0 <cppLoop+0x11d8>
			led.LR(-1, 1);
 80083fc:	2201      	movs	r2, #1
 80083fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008402:	4875      	ldr	r0, [pc, #468]	; (80085d8 <cppLoop+0x11f0>)
 8008404:	f7f9 fe62 	bl	80020cc <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008408:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800840c:	f000 fa02 	bl	8008814 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8008410:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80085e8 <cppLoop+0x1200>
 8008414:	4875      	ldr	r0, [pc, #468]	; (80085ec <cppLoop+0x1204>)
 8008416:	f7fc fe23 	bl	8005060 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 800841a:	4874      	ldr	r0, [pc, #464]	; (80085ec <cppLoop+0x1204>)
 800841c:	f7fc fe30 	bl	8005080 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8008420:	f244 405c 	movw	r0, #17500	; 0x445c
 8008424:	f000 f9f6 	bl	8008814 <HAL_Delay>
			sys_ident.stop();
 8008428:	4870      	ldr	r0, [pc, #448]	; (80085ec <cppLoop+0x1204>)
 800842a:	f7fc fe3d 	bl	80050a8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800842e:	486f      	ldr	r0, [pc, #444]	; (80085ec <cppLoop+0x1204>)
 8008430:	f7fc fda4 	bl	8004f7c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8008434:	2200      	movs	r2, #0
 8008436:	f04f 31ff 	mov.w	r1, #4294967295
 800843a:	4867      	ldr	r0, [pc, #412]	; (80085d8 <cppLoop+0x11f0>)
 800843c:	f7f9 fe46 	bl	80020cc <_ZN3LED2LREaa>
		}
		break;
 8008440:	e0be      	b.n	80085c0 <cppLoop+0x11d8>

	case 14:
		led.fullColor('W');
 8008442:	2157      	movs	r1, #87	; 0x57
 8008444:	4864      	ldr	r0, [pc, #400]	; (80085d8 <cppLoop+0x11f0>)
 8008446:	f7f9 fd85 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 800844a:	f7f8 fe29 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800844e:	2100      	movs	r1, #0
 8008450:	2000      	movs	r0, #0
 8008452:	f7f8 fe35 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008456:	4866      	ldr	r0, [pc, #408]	; (80085f0 <cppLoop+0x1208>)
 8008458:	f7f8 fe5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800845c:	2101      	movs	r1, #1
 800845e:	2000      	movs	r0, #0
 8008460:	f7f8 fe2e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008464:	4b63      	ldr	r3, [pc, #396]	; (80085f4 <cppLoop+0x120c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f7f8 f885 	bl	8000578 <__aeabi_f2d>
 800846e:	4603      	mov	r3, r0
 8008470:	460c      	mov	r4, r1
 8008472:	461a      	mov	r2, r3
 8008474:	4623      	mov	r3, r4
 8008476:	4860      	ldr	r0, [pc, #384]	; (80085f8 <cppLoop+0x1210>)
 8008478:	f7f8 fe4c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800847c:	4859      	ldr	r0, [pc, #356]	; (80085e4 <cppLoop+0x11fc>)
 800847e:	f7f9 fd05 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 8008482:	4603      	mov	r3, r0
 8008484:	2b02      	cmp	r3, #2
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8098 	beq.w	80085c4 <cppLoop+0x11dc>
			HAL_Delay(500);
 8008494:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008498:	f000 f9bc 	bl	8008814 <HAL_Delay>

			led.LR(1, -1);
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	2101      	movs	r1, #1
 80084a2:	484d      	ldr	r0, [pc, #308]	; (80085d8 <cppLoop+0x11f0>)
 80084a4:	f7f9 fe12 	bl	80020cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80084a8:	2102      	movs	r1, #2
 80084aa:	4854      	ldr	r0, [pc, #336]	; (80085fc <cppLoop+0x1214>)
 80084ac:	f7fb fc20 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80084b0:	4b50      	ldr	r3, [pc, #320]	; (80085f4 <cppLoop+0x120c>)
 80084b2:	edd3 7a00 	vldr	s15, [r3]
 80084b6:	eeb0 0a67 	vmov.f32	s0, s15
 80084ba:	4850      	ldr	r0, [pc, #320]	; (80085fc <cppLoop+0x1214>)
 80084bc:	f7fb f90f 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80084c0:	4b4c      	ldr	r3, [pc, #304]	; (80085f4 <cppLoop+0x120c>)
 80084c2:	edd3 7a00 	vldr	s15, [r3]
 80084c6:	eeb0 0a67 	vmov.f32	s0, s15
 80084ca:	484c      	ldr	r0, [pc, #304]	; (80085fc <cppLoop+0x1214>)
 80084cc:	f7fb f916 	bl	80036fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80084d0:	484a      	ldr	r0, [pc, #296]	; (80085fc <cppLoop+0x1214>)
 80084d2:	f7fa fd3d 	bl	8002f50 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80084d6:	4849      	ldr	r0, [pc, #292]	; (80085fc <cppLoop+0x1214>)
 80084d8:	f7fb fb08 	bl	8003aec <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	2100      	movs	r1, #0
 80084e2:	483d      	ldr	r0, [pc, #244]	; (80085d8 <cppLoop+0x11f0>)
 80084e4:	f7f9 fdf2 	bl	80020cc <_ZN3LED2LREaa>
		}

		break;
 80084e8:	e06c      	b.n	80085c4 <cppLoop+0x11dc>

	case 15:
		led.fullColor('W');
 80084ea:	2157      	movs	r1, #87	; 0x57
 80084ec:	483a      	ldr	r0, [pc, #232]	; (80085d8 <cppLoop+0x11f0>)
 80084ee:	f7f9 fd31 	bl	8001f54 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084f2:	f7f8 fdd5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084f6:	2100      	movs	r1, #0
 80084f8:	2000      	movs	r0, #0
 80084fa:	f7f8 fde1 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80084fe:	4840      	ldr	r0, [pc, #256]	; (8008600 <cppLoop+0x1218>)
 8008500:	f7f8 fe08 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008504:	2101      	movs	r1, #1
 8008506:	2000      	movs	r0, #0
 8008508:	f7f8 fdda 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800850c:	4b3d      	ldr	r3, [pc, #244]	; (8008604 <cppLoop+0x121c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f7f8 f831 	bl	8000578 <__aeabi_f2d>
 8008516:	4603      	mov	r3, r0
 8008518:	460c      	mov	r4, r1
 800851a:	461a      	mov	r2, r3
 800851c:	4623      	mov	r3, r4
 800851e:	4836      	ldr	r0, [pc, #216]	; (80085f8 <cppLoop+0x1210>)
 8008520:	f7f8 fdf8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008524:	482f      	ldr	r0, [pc, #188]	; (80085e4 <cppLoop+0x11fc>)
 8008526:	f7f9 fcb1 	bl	8001e8c <_ZN8JoyStick8getValueEv>
 800852a:	4603      	mov	r3, r0
 800852c:	2b02      	cmp	r3, #2
 800852e:	bf0c      	ite	eq
 8008530:	2301      	moveq	r3, #1
 8008532:	2300      	movne	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d046      	beq.n	80085c8 <cppLoop+0x11e0>
			HAL_Delay(500);
 800853a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800853e:	f000 f969 	bl	8008814 <HAL_Delay>

			led.LR(1, -1);
 8008542:	f04f 32ff 	mov.w	r2, #4294967295
 8008546:	2101      	movs	r1, #1
 8008548:	4823      	ldr	r0, [pc, #140]	; (80085d8 <cppLoop+0x11f0>)
 800854a:	f7f9 fdbf 	bl	80020cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800854e:	2101      	movs	r1, #1
 8008550:	482a      	ldr	r0, [pc, #168]	; (80085fc <cppLoop+0x1214>)
 8008552:	f7fb fbcd 	bl	8003cf0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008556:	4b2b      	ldr	r3, [pc, #172]	; (8008604 <cppLoop+0x121c>)
 8008558:	edd3 7a00 	vldr	s15, [r3]
 800855c:	eeb0 0a67 	vmov.f32	s0, s15
 8008560:	4826      	ldr	r0, [pc, #152]	; (80085fc <cppLoop+0x1214>)
 8008562:	f7fb f8bc 	bl	80036de <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008566:	4b27      	ldr	r3, [pc, #156]	; (8008604 <cppLoop+0x121c>)
 8008568:	edd3 7a00 	vldr	s15, [r3]
 800856c:	eeb0 0a67 	vmov.f32	s0, s15
 8008570:	4822      	ldr	r0, [pc, #136]	; (80085fc <cppLoop+0x1214>)
 8008572:	f7fb f8c3 	bl	80036fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008576:	4821      	ldr	r0, [pc, #132]	; (80085fc <cppLoop+0x1214>)
 8008578:	f7fa fcea 	bl	8002f50 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800857c:	481f      	ldr	r0, [pc, #124]	; (80085fc <cppLoop+0x1214>)
 800857e:	f7fb fab5 	bl	8003aec <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	2100      	movs	r1, #0
 8008588:	4813      	ldr	r0, [pc, #76]	; (80085d8 <cppLoop+0x11f0>)
 800858a:	f7f9 fd9f 	bl	80020cc <_ZN3LED2LREaa>
		}
		break;
 800858e:	e01b      	b.n	80085c8 <cppLoop+0x11e0>

	default:
		break;
 8008590:	bf00      	nop
 8008592:	e01a      	b.n	80085ca <cppLoop+0x11e2>
		break;
 8008594:	bf00      	nop
 8008596:	e018      	b.n	80085ca <cppLoop+0x11e2>
		break;
 8008598:	bf00      	nop
 800859a:	e016      	b.n	80085ca <cppLoop+0x11e2>
		break;
 800859c:	bf00      	nop
 800859e:	e014      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085a0:	bf00      	nop
 80085a2:	e012      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085a4:	bf00      	nop
 80085a6:	e010      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085a8:	bf00      	nop
 80085aa:	e00e      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085ac:	bf00      	nop
 80085ae:	e00c      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085b0:	bf00      	nop
 80085b2:	e00a      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085b4:	bf00      	nop
 80085b6:	e008      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085b8:	bf00      	nop
 80085ba:	e006      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <cppLoop+0x11e2>
		break;
 80085c8:	bf00      	nop

	}

	HAL_Delay(30);
 80085ca:	201e      	movs	r0, #30
 80085cc:	f000 f922 	bl	8008814 <HAL_Delay>

}
 80085d0:	bf00      	nop
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d8:	200005dc 	.word	0x200005dc
 80085dc:	08018bdc 	.word	0x08018bdc
 80085e0:	08018ba0 	.word	0x08018ba0
 80085e4:	200005d0 	.word	0x200005d0
 80085e8:	3e99999a 	.word	0x3e99999a
 80085ec:	20024b04 	.word	0x20024b04
 80085f0:	08018be4 	.word	0x08018be4
 80085f4:	2003c468 	.word	0x2003c468
 80085f8:	08018ae0 	.word	0x08018ae0
 80085fc:	20017db8 	.word	0x20017db8
 8008600:	08018bf0 	.word	0x08018bf0
 8008604:	2003c460 	.word	0x2003c460

08008608 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af06      	add	r7, sp, #24
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d13d      	bne.n	8008694 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800861e:	4293      	cmp	r3, r2
 8008620:	d138      	bne.n	8008694 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008622:	481e      	ldr	r0, [pc, #120]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008624:	f7f9 fd8a 	bl	800213c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008628:	481d      	ldr	r0, [pc, #116]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800862a:	f7fc fb0d 	bl	8004c48 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800862e:	481d      	ldr	r0, [pc, #116]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008630:	f7f9 fc20 	bl	8001e74 <_ZN8JoyStickC1Ev>
Motor motor;
 8008634:	481c      	ldr	r0, [pc, #112]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008636:	f7fb ff34 	bl	80044a2 <_ZN5MotorC1Ev>
IMU imu;
 800863a:	481c      	ldr	r0, [pc, #112]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800863c:	f7f9 fa26 	bl	8001a8c <_ZN3IMUC1Ev>
Logger logger;
 8008640:	481b      	ldr	r0, [pc, #108]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008642:	f7fb fc89 	bl	8003f58 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008646:	481b      	ldr	r0, [pc, #108]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008648:	f7f8 fd84 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800864c:	4b17      	ldr	r3, [pc, #92]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800864e:	4a19      	ldr	r2, [pc, #100]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008650:	4915      	ldr	r1, [pc, #84]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008652:	4819      	ldr	r0, [pc, #100]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008654:	f7fc fd4c 	bl	80050f0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800865a:	4a14      	ldr	r2, [pc, #80]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800865c:	4915      	ldr	r1, [pc, #84]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800865e:	4817      	ldr	r0, [pc, #92]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008660:	f7fc f804 	bl	800466c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008664:	4b11      	ldr	r3, [pc, #68]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800867a:	4a08      	ldr	r2, [pc, #32]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800867c:	490a      	ldr	r1, [pc, #40]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800867e:	4810      	ldr	r0, [pc, #64]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008680:	f7fa f88a 	bl	8002798 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008684:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008686:	490a      	ldr	r1, [pc, #40]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008688:	480e      	ldr	r0, [pc, #56]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800868a:	f7fc fc2d 	bl	8004ee8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800868e:	480e      	ldr	r0, [pc, #56]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008690:	f7fc f96c 	bl	800496c <_ZN13PathFollowingC1Ev>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	200002d0 	.word	0x200002d0
 80086a0:	200005c8 	.word	0x200005c8
 80086a4:	200005d0 	.word	0x200005d0
 80086a8:	200005d8 	.word	0x200005d8
 80086ac:	200005ec 	.word	0x200005ec
 80086b0:	20000600 	.word	0x20000600
 80086b4:	20017d10 	.word	0x20017d10
 80086b8:	20017d34 	.word	0x20017d34
 80086bc:	20017d78 	.word	0x20017d78
 80086c0:	20017db8 	.word	0x20017db8
 80086c4:	20024b04 	.word	0x20024b04
 80086c8:	20024d10 	.word	0x20024d10

080086cc <_GLOBAL__sub_I_line_sensor>:
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086d4:	2001      	movs	r0, #1
 80086d6:	f7ff ff97 	bl	8008608 <_Z41__static_initialization_and_destruction_0ii>
 80086da:	bd80      	pop	{r7, pc}

080086dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80086dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086e2:	e003      	b.n	80086ec <LoopCopyDataInit>

080086e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086ea:	3104      	adds	r1, #4

080086ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80086ec:	480b      	ldr	r0, [pc, #44]	; (800871c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80086f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80086f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086f4:	d3f6      	bcc.n	80086e4 <CopyDataInit>
  ldr  r2, =_sbss
 80086f6:	4a0b      	ldr	r2, [pc, #44]	; (8008724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80086f8:	e002      	b.n	8008700 <LoopFillZerobss>

080086fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80086fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80086fc:	f842 3b04 	str.w	r3, [r2], #4

08008700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008700:	4b09      	ldr	r3, [pc, #36]	; (8008728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008704:	d3f9      	bcc.n	80086fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008706:	f7fe fd47 	bl	8007198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800870a:	f00b fdd5 	bl	80142b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800870e:	f7fd f881 	bl	8005814 <main>
  bx  lr    
 8008712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008714:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008718:	080191f0 	.word	0x080191f0
  ldr  r0, =_sdata
 800871c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008720:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008724:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008728:	20040e50 	.word	0x20040e50

0800872c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800872c:	e7fe      	b.n	800872c <ADC_IRQHandler>
	...

08008730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008734:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <HAL_Init+0x40>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a0d      	ldr	r2, [pc, #52]	; (8008770 <HAL_Init+0x40>)
 800873a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800873e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <HAL_Init+0x40>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a0a      	ldr	r2, [pc, #40]	; (8008770 <HAL_Init+0x40>)
 8008746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800874a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800874c:	4b08      	ldr	r3, [pc, #32]	; (8008770 <HAL_Init+0x40>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a07      	ldr	r2, [pc, #28]	; (8008770 <HAL_Init+0x40>)
 8008752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008758:	2003      	movs	r0, #3
 800875a:	f000 fd51 	bl	8009200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800875e:	2000      	movs	r0, #0
 8008760:	f000 f808 	bl	8008774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008764:	f7fd ff68 	bl	8006638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40023c00 	.word	0x40023c00

08008774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800877c:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_InitTick+0x54>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b12      	ldr	r3, [pc, #72]	; (80087cc <HAL_InitTick+0x58>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	4619      	mov	r1, r3
 8008786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800878a:	fbb3 f3f1 	udiv	r3, r3, r1
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fd69 	bl	800926a <HAL_SYSTICK_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e00e      	b.n	80087c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b0f      	cmp	r3, #15
 80087a6:	d80a      	bhi.n	80087be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087a8:	2200      	movs	r2, #0
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	f000 fd31 	bl	8009216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087b4:	4a06      	ldr	r2, [pc, #24]	; (80087d0 <HAL_InitTick+0x5c>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000000 	.word	0x20000000
 80087cc:	20000008 	.word	0x20000008
 80087d0:	20000004 	.word	0x20000004

080087d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087d8:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <HAL_IncTick+0x20>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <HAL_IncTick+0x24>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4413      	add	r3, r2
 80087e4:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <HAL_IncTick+0x24>)
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	bf00      	nop
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000008 	.word	0x20000008
 80087f8:	2003edd8 	.word	0x2003edd8

080087fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return uwTick;
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <HAL_GetTick+0x14>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	2003edd8 	.word	0x2003edd8

08008814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800881c:	f7ff ffee 	bl	80087fc <HAL_GetTick>
 8008820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d005      	beq.n	800883a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800882e:	4b09      	ldr	r3, [pc, #36]	; (8008854 <HAL_Delay+0x40>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800883a:	bf00      	nop
 800883c:	f7ff ffde 	bl	80087fc <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	429a      	cmp	r2, r3
 800884a:	d8f7      	bhi.n	800883c <HAL_Delay+0x28>
  {
  }
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20000008 	.word	0x20000008

08008858 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e033      	b.n	80088d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fd ff06 	bl	8006688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b00      	cmp	r3, #0
 8008894:	d118      	bne.n	80088c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800889e:	f023 0302 	bic.w	r3, r3, #2
 80088a2:	f043 0202 	orr.w	r2, r3, #2
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa5a 	bl	8008d64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f023 0303 	bic.w	r3, r3, #3
 80088be:	f043 0201 	orr.w	r2, r3, #1
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	641a      	str	r2, [r3, #64]	; 0x40
 80088c6:	e001      	b.n	80088cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_ADC_Start_DMA+0x1e>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e0cc      	b.n	8008a98 <HAL_ADC_Start_DMA+0x1b8>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b01      	cmp	r3, #1
 8008912:	d018      	beq.n	8008946 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008924:	4b5e      	ldr	r3, [pc, #376]	; (8008aa0 <HAL_ADC_Start_DMA+0x1c0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a5e      	ldr	r2, [pc, #376]	; (8008aa4 <HAL_ADC_Start_DMA+0x1c4>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	0c9a      	lsrs	r2, r3, #18
 8008930:	4613      	mov	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4413      	add	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008938:	e002      	b.n	8008940 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f9      	bne.n	800893a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b01      	cmp	r3, #1
 8008952:	f040 80a0 	bne.w	8008a96 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008980:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	d106      	bne.n	80089a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	f023 0206 	bic.w	r2, r3, #6
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	645a      	str	r2, [r3, #68]	; 0x44
 80089a2:	e002      	b.n	80089aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80089b2:	4b3d      	ldr	r3, [pc, #244]	; (8008aa8 <HAL_ADC_Start_DMA+0x1c8>)
 80089b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	4a3c      	ldr	r2, [pc, #240]	; (8008aac <HAL_ADC_Start_DMA+0x1cc>)
 80089bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	4a3b      	ldr	r2, [pc, #236]	; (8008ab0 <HAL_ADC_Start_DMA+0x1d0>)
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	4a3a      	ldr	r2, [pc, #232]	; (8008ab4 <HAL_ADC_Start_DMA+0x1d4>)
 80089cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80089d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80089e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	334c      	adds	r3, #76	; 0x4c
 8008a02:	4619      	mov	r1, r3
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f000 fcea 	bl	80093e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d12a      	bne.n	8008a6e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a26      	ldr	r2, [pc, #152]	; (8008ab8 <HAL_ADC_Start_DMA+0x1d8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d015      	beq.n	8008a4e <HAL_ADC_Start_DMA+0x16e>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a25      	ldr	r2, [pc, #148]	; (8008abc <HAL_ADC_Start_DMA+0x1dc>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d105      	bne.n	8008a38 <HAL_ADC_Start_DMA+0x158>
 8008a2c:	4b1e      	ldr	r3, [pc, #120]	; (8008aa8 <HAL_ADC_Start_DMA+0x1c8>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a20      	ldr	r2, [pc, #128]	; (8008ac0 <HAL_ADC_Start_DMA+0x1e0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d129      	bne.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <HAL_ADC_Start_DMA+0x1c8>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	2b0f      	cmp	r3, #15
 8008a4c:	d823      	bhi.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d11c      	bne.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a6a:	609a      	str	r2, [r3, #8]
 8008a6c:	e013      	b.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <HAL_ADC_Start_DMA+0x1d8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d10e      	bne.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d107      	bne.n	8008a96 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a94:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000000 	.word	0x20000000
 8008aa4:	431bde83 	.word	0x431bde83
 8008aa8:	40012300 	.word	0x40012300
 8008aac:	08008f5d 	.word	0x08008f5d
 8008ab0:	08009017 	.word	0x08009017
 8008ab4:	08009033 	.word	0x08009033
 8008ab8:	40012000 	.word	0x40012000
 8008abc:	40012100 	.word	0x40012100
 8008ac0:	40012200 	.word	0x40012200

08008ac4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_ADC_ConfigChannel+0x1c>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e113      	b.n	8008d44 <HAL_ADC_ConfigChannel+0x244>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b09      	cmp	r3, #9
 8008b2a:	d925      	bls.n	8008b78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68d9      	ldr	r1, [r3, #12]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	4413      	add	r3, r2
 8008b40:	3b1e      	subs	r3, #30
 8008b42:	2207      	movs	r2, #7
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	43da      	mvns	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	400a      	ands	r2, r1
 8008b50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68d9      	ldr	r1, [r3, #12]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4618      	mov	r0, r3
 8008b64:	4603      	mov	r3, r0
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	4403      	add	r3, r0
 8008b6a:	3b1e      	subs	r3, #30
 8008b6c:	409a      	lsls	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	e022      	b.n	8008bbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6919      	ldr	r1, [r3, #16]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	4613      	mov	r3, r2
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	4413      	add	r3, r2
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	43da      	mvns	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	400a      	ands	r2, r1
 8008b9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6919      	ldr	r1, [r3, #16]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4618      	mov	r0, r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4403      	add	r3, r0
 8008bb4:	409a      	lsls	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b06      	cmp	r3, #6
 8008bc4:	d824      	bhi.n	8008c10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3b05      	subs	r3, #5
 8008bd8:	221f      	movs	r2, #31
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43da      	mvns	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	400a      	ands	r2, r1
 8008be6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	3b05      	subs	r3, #5
 8008c02:	fa00 f203 	lsl.w	r2, r0, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8008c0e:	e04c      	b.n	8008caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b0c      	cmp	r3, #12
 8008c16:	d824      	bhi.n	8008c62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	3b23      	subs	r3, #35	; 0x23
 8008c2a:	221f      	movs	r2, #31
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	43da      	mvns	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	400a      	ands	r2, r1
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	4618      	mov	r0, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	3b23      	subs	r3, #35	; 0x23
 8008c54:	fa00 f203 	lsl.w	r2, r0, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c60:	e023      	b.n	8008caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	3b41      	subs	r3, #65	; 0x41
 8008c74:	221f      	movs	r2, #31
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43da      	mvns	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	400a      	ands	r2, r1
 8008c82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4618      	mov	r0, r3
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3b41      	subs	r3, #65	; 0x41
 8008c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008caa:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <HAL_ADC_ConfigChannel+0x250>)
 8008cac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a28      	ldr	r2, [pc, #160]	; (8008d54 <HAL_ADC_ConfigChannel+0x254>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d10f      	bne.n	8008cd8 <HAL_ADC_ConfigChannel+0x1d8>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b12      	cmp	r3, #18
 8008cbe:	d10b      	bne.n	8008cd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <HAL_ADC_ConfigChannel+0x254>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d12b      	bne.n	8008d3a <HAL_ADC_ConfigChannel+0x23a>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a1c      	ldr	r2, [pc, #112]	; (8008d58 <HAL_ADC_ConfigChannel+0x258>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <HAL_ADC_ConfigChannel+0x1f4>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b11      	cmp	r3, #17
 8008cf2:	d122      	bne.n	8008d3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <HAL_ADC_ConfigChannel+0x258>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d111      	bne.n	8008d3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_ADC_ConfigChannel+0x25c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <HAL_ADC_ConfigChannel+0x260>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	0c9a      	lsrs	r2, r3, #18
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008d2c:	e002      	b.n	8008d34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f9      	bne.n	8008d2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	40012300 	.word	0x40012300
 8008d54:	40012000 	.word	0x40012000
 8008d58:	10000012 	.word	0x10000012
 8008d5c:	20000000 	.word	0x20000000
 8008d60:	431bde83 	.word	0x431bde83

08008d64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d6c:	4b79      	ldr	r3, [pc, #484]	; (8008f54 <ADC_Init+0x1f0>)
 8008d6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	431a      	orrs	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6859      	ldr	r1, [r3, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	021a      	lsls	r2, r3, #8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6859      	ldr	r1, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6899      	ldr	r1, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	4a58      	ldr	r2, [pc, #352]	; (8008f58 <ADC_Init+0x1f4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d022      	beq.n	8008e42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6899      	ldr	r1, [r3, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	609a      	str	r2, [r3, #8]
 8008e40:	e00f      	b.n	8008e62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008e60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0202 	bic.w	r2, r2, #2
 8008e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6899      	ldr	r1, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7e1b      	ldrb	r3, [r3, #24]
 8008e7c:	005a      	lsls	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008eae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6859      	ldr	r1, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	035a      	lsls	r2, r3, #13
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]
 8008ec6:	e007      	b.n	8008ed8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	051a      	lsls	r2, r3, #20
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6899      	ldr	r1, [r3, #8]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f1a:	025a      	lsls	r2, r3, #9
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6899      	ldr	r1, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	029a      	lsls	r2, r3, #10
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]
}
 8008f48:	bf00      	nop
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	40012300 	.word	0x40012300
 8008f58:	0f000001 	.word	0x0f000001

08008f5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d13c      	bne.n	8008ff0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d12b      	bne.n	8008fe8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d127      	bne.n	8008fe8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d119      	bne.n	8008fe8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0220 	bic.w	r2, r2, #32
 8008fc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	f043 0201 	orr.w	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7ff fd6b 	bl	8008ac4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008fee:	e00e      	b.n	800900e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fd75 	bl	8008aec <HAL_ADC_ErrorCallback>
}
 8009002:	e004      	b.n	800900e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	4798      	blx	r3
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fd57 	bl	8008ad8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2240      	movs	r2, #64	; 0x40
 8009044:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904a:	f043 0204 	orr.w	r2, r3, #4
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7ff fd4a 	bl	8008aec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800907c:	4013      	ands	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800908c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009092:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	60d3      	str	r3, [r2, #12]
}
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	e000ed00 	.word	0xe000ed00

080090a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <__NVIC_GetPriorityGrouping+0x18>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	f003 0307 	and.w	r3, r3, #7
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	e000ed00 	.word	0xe000ed00

080090c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	db0b      	blt.n	80090ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	f003 021f 	and.w	r2, r3, #31
 80090dc:	4907      	ldr	r1, [pc, #28]	; (80090fc <__NVIC_EnableIRQ+0x38>)
 80090de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	2001      	movs	r0, #1
 80090e6:	fa00 f202 	lsl.w	r2, r0, r2
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	e000e100 	.word	0xe000e100

08009100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009110:	2b00      	cmp	r3, #0
 8009112:	db0a      	blt.n	800912a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	490c      	ldr	r1, [pc, #48]	; (800914c <__NVIC_SetPriority+0x4c>)
 800911a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911e:	0112      	lsls	r2, r2, #4
 8009120:	b2d2      	uxtb	r2, r2
 8009122:	440b      	add	r3, r1
 8009124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009128:	e00a      	b.n	8009140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	4908      	ldr	r1, [pc, #32]	; (8009150 <__NVIC_SetPriority+0x50>)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	3b04      	subs	r3, #4
 8009138:	0112      	lsls	r2, r2, #4
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	440b      	add	r3, r1
 800913e:	761a      	strb	r2, [r3, #24]
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	e000e100 	.word	0xe000e100
 8009150:	e000ed00 	.word	0xe000ed00

08009154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	bf28      	it	cs
 8009172:	2304      	movcs	r3, #4
 8009174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3304      	adds	r3, #4
 800917a:	2b06      	cmp	r3, #6
 800917c:	d902      	bls.n	8009184 <NVIC_EncodePriority+0x30>
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3b03      	subs	r3, #3
 8009182:	e000      	b.n	8009186 <NVIC_EncodePriority+0x32>
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	43da      	mvns	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	401a      	ands	r2, r3
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800919c:	f04f 31ff 	mov.w	r1, #4294967295
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	fa01 f303 	lsl.w	r3, r1, r3
 80091a6:	43d9      	mvns	r1, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091ac:	4313      	orrs	r3, r2
         );
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3724      	adds	r7, #36	; 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091cc:	d301      	bcc.n	80091d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091ce:	2301      	movs	r3, #1
 80091d0:	e00f      	b.n	80091f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091d2:	4a0a      	ldr	r2, [pc, #40]	; (80091fc <SysTick_Config+0x40>)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091da:	210f      	movs	r1, #15
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	f7ff ff8e 	bl	8009100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091e4:	4b05      	ldr	r3, [pc, #20]	; (80091fc <SysTick_Config+0x40>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <SysTick_Config+0x40>)
 80091ec:	2207      	movs	r2, #7
 80091ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	e000e010 	.word	0xe000e010

08009200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff29 	bl	8009060 <__NVIC_SetPriorityGrouping>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	4603      	mov	r3, r0
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009228:	f7ff ff3e 	bl	80090a8 <__NVIC_GetPriorityGrouping>
 800922c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f7ff ff8e 	bl	8009154 <NVIC_EncodePriority>
 8009238:	4602      	mov	r2, r0
 800923a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff ff5d 	bl	8009100 <__NVIC_SetPriority>
}
 8009246:	bf00      	nop
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	4603      	mov	r3, r0
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff ff31 	bl	80090c4 <__NVIC_EnableIRQ>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ffa2 	bl	80091bc <SysTick_Config>
 8009278:	4603      	mov	r3, r0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009290:	f7ff fab4 	bl	80087fc <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e099      	b.n	80093d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092c0:	e00f      	b.n	80092e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092c2:	f7ff fa9b 	bl	80087fc <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	d908      	bls.n	80092e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2220      	movs	r2, #32
 80092d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2203      	movs	r2, #3
 80092da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e078      	b.n	80093d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e8      	bne.n	80092c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4b38      	ldr	r3, [pc, #224]	; (80093dc <HAL_DMA_Init+0x158>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800930e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800931a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b04      	cmp	r3, #4
 800933a:	d107      	bne.n	800934c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	4313      	orrs	r3, r2
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f023 0307 	bic.w	r3, r3, #7
 8009362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b04      	cmp	r3, #4
 8009374:	d117      	bne.n	80093a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa9d 	bl	80098c8 <DMA_CheckFifoParam>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d008      	beq.n	80093a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2240      	movs	r2, #64	; 0x40
 8009398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80093a2:	2301      	movs	r3, #1
 80093a4:	e016      	b.n	80093d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa54 	bl	800985c <DMA_CalcBaseAndBitshift>
 80093b4:	4603      	mov	r3, r0
 80093b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093bc:	223f      	movs	r2, #63	; 0x3f
 80093be:	409a      	lsls	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	f010803f 	.word	0xf010803f

080093e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_DMA_Start_IT+0x26>
 8009402:	2302      	movs	r3, #2
 8009404:	e040      	b.n	8009488 <HAL_DMA_Start_IT+0xa8>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d12f      	bne.n	800947a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2202      	movs	r2, #2
 800941e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 f9e6 	bl	8009800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009438:	223f      	movs	r2, #63	; 0x3f
 800943a:	409a      	lsls	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0216 	orr.w	r2, r2, #22
 800944e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0208 	orr.w	r2, r2, #8
 8009466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e005      	b.n	8009486 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009482:	2302      	movs	r3, #2
 8009484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d004      	beq.n	80094ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2280      	movs	r2, #128	; 0x80
 80094a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00c      	b.n	80094c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2205      	movs	r2, #5
 80094b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80094e0:	4b92      	ldr	r3, [pc, #584]	; (800972c <HAL_DMA_IRQHandler+0x258>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a92      	ldr	r2, [pc, #584]	; (8009730 <HAL_DMA_IRQHandler+0x25c>)
 80094e6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ea:	0a9b      	lsrs	r3, r3, #10
 80094ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fe:	2208      	movs	r2, #8
 8009500:	409a      	lsls	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4013      	ands	r3, r2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01a      	beq.n	8009540 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d013      	beq.n	8009540 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0204 	bic.w	r2, r2, #4
 8009526:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952c:	2208      	movs	r2, #8
 800952e:	409a      	lsls	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009538:	f043 0201 	orr.w	r2, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009544:	2201      	movs	r2, #1
 8009546:	409a      	lsls	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4013      	ands	r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009562:	2201      	movs	r2, #1
 8009564:	409a      	lsls	r2, r3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956e:	f043 0202 	orr.w	r2, r3, #2
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800957a:	2204      	movs	r2, #4
 800957c:	409a      	lsls	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4013      	ands	r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d012      	beq.n	80095ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009598:	2204      	movs	r2, #4
 800959a:	409a      	lsls	r2, r3
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a4:	f043 0204 	orr.w	r2, r3, #4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b0:	2210      	movs	r2, #16
 80095b2:	409a      	lsls	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4013      	ands	r3, r2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d043      	beq.n	8009644 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d03c      	beq.n	8009644 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ce:	2210      	movs	r2, #16
 80095d0:	409a      	lsls	r2, r3
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d018      	beq.n	8009616 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d108      	bne.n	8009604 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d024      	beq.n	8009644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
 8009602:	e01f      	b.n	8009644 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01b      	beq.n	8009644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	4798      	blx	r3
 8009614:	e016      	b.n	8009644 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009620:	2b00      	cmp	r3, #0
 8009622:	d107      	bne.n	8009634 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0208 	bic.w	r2, r2, #8
 8009632:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009648:	2220      	movs	r2, #32
 800964a:	409a      	lsls	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4013      	ands	r3, r2
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 808e 	beq.w	8009772 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0310 	and.w	r3, r3, #16
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8086 	beq.w	8009772 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966a:	2220      	movs	r2, #32
 800966c:	409a      	lsls	r2, r3
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b05      	cmp	r3, #5
 800967c:	d136      	bne.n	80096ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0216 	bic.w	r2, r2, #22
 800968c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695a      	ldr	r2, [r3, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800969c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d103      	bne.n	80096ae <HAL_DMA_IRQHandler+0x1da>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f022 0208 	bic.w	r2, r2, #8
 80096bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c2:	223f      	movs	r2, #63	; 0x3f
 80096c4:	409a      	lsls	r2, r3
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d07d      	beq.n	80097de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
        }
        return;
 80096ea:	e078      	b.n	80097de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01c      	beq.n	8009734 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	2b00      	cmp	r3, #0
 800970e:	d030      	beq.n	8009772 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
 8009718:	e02b      	b.n	8009772 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d027      	beq.n	8009772 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
 800972a:	e022      	b.n	8009772 <HAL_DMA_IRQHandler+0x29e>
 800972c:	20000000 	.word	0x20000000
 8009730:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10f      	bne.n	8009762 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0210 	bic.w	r2, r2, #16
 8009750:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009776:	2b00      	cmp	r3, #0
 8009778:	d032      	beq.n	80097e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d022      	beq.n	80097cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2205      	movs	r2, #5
 800978a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0201 	bic.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3301      	adds	r3, #1
 80097a2:	60bb      	str	r3, [r7, #8]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d307      	bcc.n	80097ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1f2      	bne.n	800979e <HAL_DMA_IRQHandler+0x2ca>
 80097b8:	e000      	b.n	80097bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80097ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
 80097dc:	e000      	b.n	80097e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80097de:	bf00      	nop
    }
  }
}
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800981c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	d108      	bne.n	8009840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800983e:	e007      	b.n	8009850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	60da      	str	r2, [r3, #12]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	3b10      	subs	r3, #16
 800986c:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <DMA_CalcBaseAndBitshift+0x64>)
 800986e:	fba2 2303 	umull	r2, r3, r2, r3
 8009872:	091b      	lsrs	r3, r3, #4
 8009874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009876:	4a13      	ldr	r2, [pc, #76]	; (80098c4 <DMA_CalcBaseAndBitshift+0x68>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b03      	cmp	r3, #3
 8009888:	d909      	bls.n	800989e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	659a      	str	r2, [r3, #88]	; 0x58
 800989c:	e007      	b.n	80098ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	aaaaaaab 	.word	0xaaaaaaab
 80098c4:	08018c30 	.word	0x08018c30

080098c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d11f      	bne.n	8009922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d855      	bhi.n	8009994 <DMA_CheckFifoParam+0xcc>
 80098e8:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <DMA_CheckFifoParam+0x28>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009901 	.word	0x08009901
 80098f4:	08009913 	.word	0x08009913
 80098f8:	08009901 	.word	0x08009901
 80098fc:	08009995 	.word	0x08009995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d045      	beq.n	8009998 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009910:	e042      	b.n	8009998 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800991a:	d13f      	bne.n	800999c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009920:	e03c      	b.n	800999c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992a:	d121      	bne.n	8009970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b03      	cmp	r3, #3
 8009930:	d836      	bhi.n	80099a0 <DMA_CheckFifoParam+0xd8>
 8009932:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <DMA_CheckFifoParam+0x70>)
 8009934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009938:	08009949 	.word	0x08009949
 800993c:	0800994f 	.word	0x0800994f
 8009940:	08009949 	.word	0x08009949
 8009944:	08009961 	.word	0x08009961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]
      break;
 800994c:	e02f      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d024      	beq.n	80099a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800995e:	e021      	b.n	80099a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009968:	d11e      	bne.n	80099a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800996e:	e01b      	b.n	80099a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d902      	bls.n	800997c <DMA_CheckFifoParam+0xb4>
 8009976:	2b03      	cmp	r3, #3
 8009978:	d003      	beq.n	8009982 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800997a:	e018      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]
      break;
 8009980:	e015      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00e      	beq.n	80099ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]
      break;
 8009992:	e00b      	b.n	80099ac <DMA_CheckFifoParam+0xe4>
      break;
 8009994:	bf00      	nop
 8009996:	e00a      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;
 8009998:	bf00      	nop
 800999a:	e008      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;
 800999c:	bf00      	nop
 800999e:	e006      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;
 80099a0:	bf00      	nop
 80099a2:	e004      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;
 80099a4:	bf00      	nop
 80099a6:	e002      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;   
 80099a8:	bf00      	nop
 80099aa:	e000      	b.n	80099ae <DMA_CheckFifoParam+0xe6>
      break;
 80099ac:	bf00      	nop
    }
  } 
  
  return status; 
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099bc:	b480      	push	{r7}
 80099be:	b089      	sub	sp, #36	; 0x24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	e177      	b.n	8009cc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099d8:	2201      	movs	r2, #1
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4013      	ands	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	f040 8166 	bne.w	8009cc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d00b      	beq.n	8009a16 <HAL_GPIO_Init+0x5a>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d007      	beq.n	8009a16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a0a:	2b11      	cmp	r3, #17
 8009a0c:	d003      	beq.n	8009a16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2b12      	cmp	r3, #18
 8009a14:	d130      	bne.n	8009a78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	2203      	movs	r2, #3
 8009a22:	fa02 f303 	lsl.w	r3, r2, r3
 8009a26:	43db      	mvns	r3, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	43db      	mvns	r3, r3
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	091b      	lsrs	r3, r3, #4
 8009a62:	f003 0201 	and.w	r2, r3, #1
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	2203      	movs	r2, #3
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d003      	beq.n	8009ab8 <HAL_GPIO_Init+0xfc>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b12      	cmp	r3, #18
 8009ab6:	d123      	bne.n	8009b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	08da      	lsrs	r2, r3, #3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3208      	adds	r2, #8
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	220f      	movs	r2, #15
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	691a      	ldr	r2, [r3, #16]
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	08da      	lsrs	r2, r3, #3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3208      	adds	r2, #8
 8009afa:	69b9      	ldr	r1, [r7, #24]
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b10:	43db      	mvns	r3, r3
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	4013      	ands	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f003 0203 	and.w	r2, r3, #3
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80c0 	beq.w	8009cc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	4b65      	ldr	r3, [pc, #404]	; (8009cdc <HAL_GPIO_Init+0x320>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	4a64      	ldr	r2, [pc, #400]	; (8009cdc <HAL_GPIO_Init+0x320>)
 8009b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b50:	6453      	str	r3, [r2, #68]	; 0x44
 8009b52:	4b62      	ldr	r3, [pc, #392]	; (8009cdc <HAL_GPIO_Init+0x320>)
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b5e:	4a60      	ldr	r2, [pc, #384]	; (8009ce0 <HAL_GPIO_Init+0x324>)
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	089b      	lsrs	r3, r3, #2
 8009b64:	3302      	adds	r3, #2
 8009b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	220f      	movs	r2, #15
 8009b76:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <HAL_GPIO_Init+0x328>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d037      	beq.n	8009bfa <HAL_GPIO_Init+0x23e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a56      	ldr	r2, [pc, #344]	; (8009ce8 <HAL_GPIO_Init+0x32c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d031      	beq.n	8009bf6 <HAL_GPIO_Init+0x23a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a55      	ldr	r2, [pc, #340]	; (8009cec <HAL_GPIO_Init+0x330>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d02b      	beq.n	8009bf2 <HAL_GPIO_Init+0x236>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a54      	ldr	r2, [pc, #336]	; (8009cf0 <HAL_GPIO_Init+0x334>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d025      	beq.n	8009bee <HAL_GPIO_Init+0x232>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a53      	ldr	r2, [pc, #332]	; (8009cf4 <HAL_GPIO_Init+0x338>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01f      	beq.n	8009bea <HAL_GPIO_Init+0x22e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a52      	ldr	r2, [pc, #328]	; (8009cf8 <HAL_GPIO_Init+0x33c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d019      	beq.n	8009be6 <HAL_GPIO_Init+0x22a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a51      	ldr	r2, [pc, #324]	; (8009cfc <HAL_GPIO_Init+0x340>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <HAL_GPIO_Init+0x226>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a50      	ldr	r2, [pc, #320]	; (8009d00 <HAL_GPIO_Init+0x344>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00d      	beq.n	8009bde <HAL_GPIO_Init+0x222>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a4f      	ldr	r2, [pc, #316]	; (8009d04 <HAL_GPIO_Init+0x348>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d007      	beq.n	8009bda <HAL_GPIO_Init+0x21e>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a4e      	ldr	r2, [pc, #312]	; (8009d08 <HAL_GPIO_Init+0x34c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d101      	bne.n	8009bd6 <HAL_GPIO_Init+0x21a>
 8009bd2:	2309      	movs	r3, #9
 8009bd4:	e012      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bd6:	230a      	movs	r3, #10
 8009bd8:	e010      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bda:	2308      	movs	r3, #8
 8009bdc:	e00e      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bde:	2307      	movs	r3, #7
 8009be0:	e00c      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009be2:	2306      	movs	r3, #6
 8009be4:	e00a      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009be6:	2305      	movs	r3, #5
 8009be8:	e008      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bea:	2304      	movs	r3, #4
 8009bec:	e006      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e004      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e002      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <HAL_GPIO_Init+0x240>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	f002 0203 	and.w	r2, r2, #3
 8009c02:	0092      	lsls	r2, r2, #2
 8009c04:	4093      	lsls	r3, r2
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c0c:	4934      	ldr	r1, [pc, #208]	; (8009ce0 <HAL_GPIO_Init+0x324>)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	089b      	lsrs	r3, r3, #2
 8009c12:	3302      	adds	r3, #2
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c1a:	4b3c      	ldr	r3, [pc, #240]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	43db      	mvns	r3, r3
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	4013      	ands	r3, r2
 8009c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c3e:	4a33      	ldr	r2, [pc, #204]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009c44:	4b31      	ldr	r3, [pc, #196]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	4013      	ands	r3, r2
 8009c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c68:	4a28      	ldr	r2, [pc, #160]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c6e:	4b27      	ldr	r3, [pc, #156]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	43db      	mvns	r3, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c92:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c98:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009cbc:	4a13      	ldr	r2, [pc, #76]	; (8009d0c <HAL_GPIO_Init+0x350>)
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	f67f ae84 	bls.w	80099d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	3724      	adds	r7, #36	; 0x24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	40023800 	.word	0x40023800
 8009ce0:	40013800 	.word	0x40013800
 8009ce4:	40020000 	.word	0x40020000
 8009ce8:	40020400 	.word	0x40020400
 8009cec:	40020800 	.word	0x40020800
 8009cf0:	40020c00 	.word	0x40020c00
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	40021400 	.word	0x40021400
 8009cfc:	40021800 	.word	0x40021800
 8009d00:	40021c00 	.word	0x40021c00
 8009d04:	40022000 	.word	0x40022000
 8009d08:	40022400 	.word	0x40022400
 8009d0c:	40013c00 	.word	0x40013c00

08009d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	887b      	ldrh	r3, [r7, #2]
 8009d22:	4013      	ands	r3, r2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
 8009d2c:	e001      	b.n	8009d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d50:	787b      	ldrb	r3, [r7, #1]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d56:	887a      	ldrh	r2, [r7, #2]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d5c:	e003      	b.n	8009d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	041a      	lsls	r2, r3, #16
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	619a      	str	r2, [r3, #24]
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
	...

08009d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e11f      	b.n	8009fc6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fc fd26 	bl	80067ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2224      	movs	r2, #36	; 0x24
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0201 	bic.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009dd8:	f001 f96e 	bl	800b0b8 <HAL_RCC_GetPCLK1Freq>
 8009ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	4a7b      	ldr	r2, [pc, #492]	; (8009fd0 <HAL_I2C_Init+0x25c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d807      	bhi.n	8009df8 <HAL_I2C_Init+0x84>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4a7a      	ldr	r2, [pc, #488]	; (8009fd4 <HAL_I2C_Init+0x260>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	bf94      	ite	ls
 8009df0:	2301      	movls	r3, #1
 8009df2:	2300      	movhi	r3, #0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	e006      	b.n	8009e06 <HAL_I2C_Init+0x92>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4a77      	ldr	r2, [pc, #476]	; (8009fd8 <HAL_I2C_Init+0x264>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	bf94      	ite	ls
 8009e00:	2301      	movls	r3, #1
 8009e02:	2300      	movhi	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e0db      	b.n	8009fc6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4a72      	ldr	r2, [pc, #456]	; (8009fdc <HAL_I2C_Init+0x268>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	0c9b      	lsrs	r3, r3, #18
 8009e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4a64      	ldr	r2, [pc, #400]	; (8009fd0 <HAL_I2C_Init+0x25c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d802      	bhi.n	8009e48 <HAL_I2C_Init+0xd4>
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	3301      	adds	r3, #1
 8009e46:	e009      	b.n	8009e5c <HAL_I2C_Init+0xe8>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	4a63      	ldr	r2, [pc, #396]	; (8009fe0 <HAL_I2C_Init+0x26c>)
 8009e54:	fba2 2303 	umull	r2, r3, r2, r3
 8009e58:	099b      	lsrs	r3, r3, #6
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	430b      	orrs	r3, r1
 8009e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	4956      	ldr	r1, [pc, #344]	; (8009fd0 <HAL_I2C_Init+0x25c>)
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	d80d      	bhi.n	8009e98 <HAL_I2C_Init+0x124>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	1e59      	subs	r1, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	bf38      	it	cc
 8009e94:	2304      	movcc	r3, #4
 8009e96:	e04f      	b.n	8009f38 <HAL_I2C_Init+0x1c4>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d111      	bne.n	8009ec4 <HAL_I2C_Init+0x150>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	1e58      	subs	r0, r3, #1
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6859      	ldr	r1, [r3, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	440b      	add	r3, r1
 8009eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	e012      	b.n	8009eea <HAL_I2C_Init+0x176>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	1e58      	subs	r0, r3, #1
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6859      	ldr	r1, [r3, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	0099      	lsls	r1, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bf0c      	ite	eq
 8009ee4:	2301      	moveq	r3, #1
 8009ee6:	2300      	movne	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <HAL_I2C_Init+0x17e>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e022      	b.n	8009f38 <HAL_I2C_Init+0x1c4>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10e      	bne.n	8009f18 <HAL_I2C_Init+0x1a4>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1e58      	subs	r0, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	440b      	add	r3, r1
 8009f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f16:	e00f      	b.n	8009f38 <HAL_I2C_Init+0x1c4>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	1e58      	subs	r0, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	0099      	lsls	r1, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	6809      	ldr	r1, [r1, #0]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69da      	ldr	r2, [r3, #28]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6911      	ldr	r1, [r2, #16]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	68d2      	ldr	r2, [r2, #12]
 8009f72:	4311      	orrs	r1, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	695a      	ldr	r2, [r3, #20]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	000186a0 	.word	0x000186a0
 8009fd4:	001e847f 	.word	0x001e847f
 8009fd8:	003d08ff 	.word	0x003d08ff
 8009fdc:	431bde83 	.word	0x431bde83
 8009fe0:	10624dd3 	.word	0x10624dd3

08009fe4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	817b      	strh	r3, [r7, #10]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ff8:	f7fe fc00 	bl	80087fc <HAL_GetTick>
 8009ffc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b20      	cmp	r3, #32
 800a008:	f040 80e0 	bne.w	800a1cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2319      	movs	r3, #25
 800a012:	2201      	movs	r2, #1
 800a014:	4970      	ldr	r1, [pc, #448]	; (800a1d8 <HAL_I2C_Master_Transmit+0x1f4>)
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fc58 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a022:	2302      	movs	r3, #2
 800a024:	e0d3      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_I2C_Master_Transmit+0x50>
 800a030:	2302      	movs	r3, #2
 800a032:	e0cc      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b01      	cmp	r3, #1
 800a048:	d007      	beq.n	800a05a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f042 0201 	orr.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a068:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2221      	movs	r2, #33	; 0x21
 800a06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2210      	movs	r2, #16
 800a076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	893a      	ldrh	r2, [r7, #8]
 800a08a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a090:	b29a      	uxth	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4a50      	ldr	r2, [pc, #320]	; (800a1dc <HAL_I2C_Master_Transmit+0x1f8>)
 800a09a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a09c:	8979      	ldrh	r1, [r7, #10]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6a3a      	ldr	r2, [r7, #32]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fac2 	bl	800a62c <I2C_MasterRequestWrite>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e08d      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	613b      	str	r3, [r7, #16]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	613b      	str	r3, [r7, #16]
 800a0c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0c8:	e066      	b.n	800a198 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	6a39      	ldr	r1, [r7, #32]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 fcd2 	bl	800aa78 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00d      	beq.n	800a0f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d107      	bne.n	800a0f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e06b      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a110:	b29b      	uxth	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a11e:	3b01      	subs	r3, #1
 800a120:	b29a      	uxth	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b04      	cmp	r3, #4
 800a132:	d11b      	bne.n	800a16c <HAL_I2C_Master_Transmit+0x188>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d017      	beq.n	800a16c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a156:	b29b      	uxth	r3, r3
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a164:	3b01      	subs	r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	6a39      	ldr	r1, [r7, #32]
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 fcc2 	bl	800aafa <I2C_WaitOnBTFFlagUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	2b04      	cmp	r3, #4
 800a182:	d107      	bne.n	800a194 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a192:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e01a      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d194      	bne.n	800a0ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	00100002 	.word	0x00100002
 800a1dc:	ffff0000 	.word	0xffff0000

0800a1e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	817b      	strh	r3, [r7, #10]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1f4:	f7fe fb02 	bl	80087fc <HAL_GetTick>
 800a1f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b20      	cmp	r3, #32
 800a204:	f040 820b 	bne.w	800a61e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2319      	movs	r3, #25
 800a20e:	2201      	movs	r2, #1
 800a210:	497c      	ldr	r1, [pc, #496]	; (800a404 <HAL_I2C_Master_Receive+0x224>)
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 fb5a 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a21e:	2302      	movs	r3, #2
 800a220:	e1fe      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_I2C_Master_Receive+0x50>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e1f7      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	d007      	beq.n	800a256 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f042 0201 	orr.w	r2, r2, #1
 800a254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2222      	movs	r2, #34	; 0x22
 800a26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2210      	movs	r2, #16
 800a272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	893a      	ldrh	r2, [r7, #8]
 800a286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4a5c      	ldr	r2, [pc, #368]	; (800a408 <HAL_I2C_Master_Receive+0x228>)
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a298:	8979      	ldrh	r1, [r7, #10]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 fa46 	bl	800a730 <I2C_MasterRequestRead>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e1b8      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d113      	bne.n	800a2de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	623b      	str	r3, [r7, #32]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	623b      	str	r3, [r7, #32]
 800a2ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	e18c      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d11b      	bne.n	800a31e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61fb      	str	r3, [r7, #28]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	61fb      	str	r3, [r7, #28]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	61fb      	str	r3, [r7, #28]
 800a30a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	e16c      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a322:	2b02      	cmp	r3, #2
 800a324:	d11b      	bne.n	800a35e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a334:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	e14c      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a36c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a36e:	2300      	movs	r3, #0
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a384:	e138      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	f200 80f1 	bhi.w	800a572 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a394:	2b01      	cmp	r3, #1
 800a396:	d123      	bne.n	800a3e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fbed 	bl	800ab7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e139      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691a      	ldr	r2, [r3, #16]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	b2d2      	uxtb	r2, r2
 800a3b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3de:	e10b      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d14e      	bne.n	800a486 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <HAL_I2C_Master_Receive+0x22c>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fa6a 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d008      	beq.n	800a410 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e10e      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
 800a402:	bf00      	nop
 800a404:	00100002 	.word	0x00100002
 800a408:	ffff0000 	.word	0xffff0000
 800a40c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a41e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691a      	ldr	r2, [r3, #16]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46e:	3b01      	subs	r3, #1
 800a470:	b29a      	uxth	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a484:	e0b8      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	2200      	movs	r2, #0
 800a48e:	4966      	ldr	r1, [pc, #408]	; (800a628 <HAL_I2C_Master_Receive+0x448>)
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 fa1b 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e0bf      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691a      	ldr	r2, [r3, #16]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	494f      	ldr	r1, [pc, #316]	; (800a628 <HAL_I2C_Master_Receive+0x448>)
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f9ed 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e091      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a50a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691a      	ldr	r2, [r3, #16]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	b2d2      	uxtb	r2, r2
 800a54a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a566:	b29b      	uxth	r3, r3
 800a568:	3b01      	subs	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a570:	e042      	b.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fb00 	bl	800ab7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e04c      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	b2d2      	uxtb	r2, r2
 800a592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d118      	bne.n	800a5f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	691a      	ldr	r2, [r3, #16]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f aec2 	bne.w	800a386 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e000      	b.n	800a620 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a61e:	2302      	movs	r3, #2
  }
}
 800a620:	4618      	mov	r0, r3
 800a622:	3728      	adds	r7, #40	; 0x28
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	00010004 	.word	0x00010004

0800a62c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	460b      	mov	r3, r1
 800a63a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b08      	cmp	r3, #8
 800a646:	d006      	beq.n	800a656 <I2C_MasterRequestWrite+0x2a>
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d003      	beq.n	800a656 <I2C_MasterRequestWrite+0x2a>
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a654:	d108      	bne.n	800a668 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e00b      	b.n	800a680 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66c:	2b12      	cmp	r3, #18
 800a66e:	d107      	bne.n	800a680 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a67e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f91d 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00d      	beq.n	800a6b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a6:	d103      	bne.n	800a6b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e035      	b.n	800a720 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6bc:	d108      	bne.n	800a6d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6be:	897b      	ldrh	r3, [r7, #10]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6cc:	611a      	str	r2, [r3, #16]
 800a6ce:	e01b      	b.n	800a708 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6d0:	897b      	ldrh	r3, [r7, #10]
 800a6d2:	11db      	asrs	r3, r3, #7
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 0306 	and.w	r3, r3, #6
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f063 030f 	orn	r3, r3, #15
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	490e      	ldr	r1, [pc, #56]	; (800a728 <I2C_MasterRequestWrite+0xfc>)
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f943 	bl	800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e010      	b.n	800a720 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a6fe:	897b      	ldrh	r3, [r7, #10]
 800a700:	b2da      	uxtb	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	4907      	ldr	r1, [pc, #28]	; (800a72c <I2C_MasterRequestWrite+0x100>)
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 f933 	bl	800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	00010008 	.word	0x00010008
 800a72c:	00010002 	.word	0x00010002

0800a730 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af02      	add	r7, sp, #8
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	607a      	str	r2, [r7, #4]
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	460b      	mov	r3, r1
 800a73e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a754:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d006      	beq.n	800a76a <I2C_MasterRequestRead+0x3a>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d003      	beq.n	800a76a <I2C_MasterRequestRead+0x3a>
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a768:	d108      	bne.n	800a77c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e00b      	b.n	800a794 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a780:	2b11      	cmp	r3, #17
 800a782:	d107      	bne.n	800a794 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f893 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00d      	beq.n	800a7c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ba:	d103      	bne.n	800a7c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e079      	b.n	800a8bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7d0:	d108      	bne.n	800a7e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a7d2:	897b      	ldrh	r3, [r7, #10]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f043 0301 	orr.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	611a      	str	r2, [r3, #16]
 800a7e2:	e05f      	b.n	800a8a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a7e4:	897b      	ldrh	r3, [r7, #10]
 800a7e6:	11db      	asrs	r3, r3, #7
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0306 	and.w	r3, r3, #6
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f063 030f 	orn	r3, r3, #15
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4930      	ldr	r1, [pc, #192]	; (800a8c4 <I2C_MasterRequestRead+0x194>)
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 f8b9 	bl	800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e054      	b.n	800a8bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a812:	897b      	ldrh	r3, [r7, #10]
 800a814:	b2da      	uxtb	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	4929      	ldr	r1, [pc, #164]	; (800a8c8 <I2C_MasterRequestRead+0x198>)
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f8a9 	bl	800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e044      	b.n	800a8bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a832:	2300      	movs	r3, #0
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	613b      	str	r3, [r7, #16]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	613b      	str	r3, [r7, #16]
 800a846:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a856:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f831 	bl	800a8cc <I2C_WaitOnFlagUntilTimeout>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00d      	beq.n	800a88c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87e:	d103      	bne.n	800a888 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a886:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e017      	b.n	800a8bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a88c:	897b      	ldrh	r3, [r7, #10]
 800a88e:	11db      	asrs	r3, r3, #7
 800a890:	b2db      	uxtb	r3, r3
 800a892:	f003 0306 	and.w	r3, r3, #6
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f063 030e 	orn	r3, r3, #14
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4907      	ldr	r1, [pc, #28]	; (800a8c8 <I2C_MasterRequestRead+0x198>)
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 f865 	bl	800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e000      	b.n	800a8bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	00010008 	.word	0x00010008
 800a8c8:	00010002 	.word	0x00010002

0800a8cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8dc:	e025      	b.n	800a92a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e4:	d021      	beq.n	800a92a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e6:	f7fd ff89 	bl	80087fc <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d302      	bcc.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d116      	bne.n	800a92a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2220      	movs	r2, #32
 800a906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	f043 0220 	orr.w	r2, r3, #32
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e023      	b.n	800a972 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	0c1b      	lsrs	r3, r3, #16
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10d      	bne.n	800a950 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	43da      	mvns	r2, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	4013      	ands	r3, r2
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	bf0c      	ite	eq
 800a946:	2301      	moveq	r3, #1
 800a948:	2300      	movne	r3, #0
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	e00c      	b.n	800a96a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	43da      	mvns	r2, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4013      	ands	r3, r2
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bf0c      	ite	eq
 800a962:	2301      	moveq	r3, #1
 800a964:	2300      	movne	r3, #0
 800a966:	b2db      	uxtb	r3, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d0b6      	beq.n	800a8de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a988:	e051      	b.n	800aa2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a998:	d123      	bne.n	800a9e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	f043 0204 	orr.w	r2, r3, #4
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e046      	b.n	800aa70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d021      	beq.n	800aa2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ea:	f7fd ff07 	bl	80087fc <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d302      	bcc.n	800aa00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d116      	bne.n	800aa2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f043 0220 	orr.w	r2, r3, #32
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e020      	b.n	800aa70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	0c1b      	lsrs	r3, r3, #16
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d10c      	bne.n	800aa52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	43da      	mvns	r2, r3
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	4013      	ands	r3, r2
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	2300      	moveq	r3, #0
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	e00b      	b.n	800aa6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	43da      	mvns	r2, r3
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	bf14      	ite	ne
 800aa64:	2301      	movne	r3, #1
 800aa66:	2300      	moveq	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d18d      	bne.n	800a98a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa84:	e02d      	b.n	800aae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f8ce 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e02d      	b.n	800aaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d021      	beq.n	800aae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9e:	f7fd fead 	bl	80087fc <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d116      	bne.n	800aae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	f043 0220 	orr.w	r2, r3, #32
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e007      	b.n	800aaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaec:	2b80      	cmp	r3, #128	; 0x80
 800aaee:	d1ca      	bne.n	800aa86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab06:	e02d      	b.n	800ab64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f88d 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e02d      	b.n	800ab74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d021      	beq.n	800ab64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab20:	f7fd fe6c 	bl	80087fc <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d302      	bcc.n	800ab36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d116      	bne.n	800ab64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab50:	f043 0220 	orr.w	r2, r3, #32
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e007      	b.n	800ab74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f003 0304 	and.w	r3, r3, #4
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d1ca      	bne.n	800ab08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab88:	e042      	b.n	800ac10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	f003 0310 	and.w	r3, r3, #16
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	d119      	bne.n	800abcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f06f 0210 	mvn.w	r2, #16
 800aba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2220      	movs	r2, #32
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e029      	b.n	800ac20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abcc:	f7fd fe16 	bl	80087fc <HAL_GetTick>
 800abd0:	4602      	mov	r2, r0
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d302      	bcc.n	800abe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d116      	bne.n	800ac10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	f043 0220 	orr.w	r2, r3, #32
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e007      	b.n	800ac20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	2b40      	cmp	r3, #64	; 0x40
 800ac1c:	d1b5      	bne.n	800ab8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac3e:	d11b      	bne.n	800ac78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	f043 0204 	orr.w	r2, r3, #4
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac92:	2300      	movs	r3, #0
 800ac94:	603b      	str	r3, [r7, #0]
 800ac96:	4b20      	ldr	r3, [pc, #128]	; (800ad18 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca0:	6413      	str	r3, [r2, #64]	; 0x40
 800aca2:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <HAL_PWREx_EnableOverDrive+0x90>)
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acaa:	603b      	str	r3, [r7, #0]
 800acac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800acae:	4b1b      	ldr	r3, [pc, #108]	; (800ad1c <HAL_PWREx_EnableOverDrive+0x94>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acb4:	f7fd fda2 	bl	80087fc <HAL_GetTick>
 800acb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acba:	e009      	b.n	800acd0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acbc:	f7fd fd9e 	bl	80087fc <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acca:	d901      	bls.n	800acd0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e01f      	b.n	800ad10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acd0:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <HAL_PWREx_EnableOverDrive+0x98>)
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acdc:	d1ee      	bne.n	800acbc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acde:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ace0:	2201      	movs	r2, #1
 800ace2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ace4:	f7fd fd8a 	bl	80087fc <HAL_GetTick>
 800ace8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acea:	e009      	b.n	800ad00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acec:	f7fd fd86 	bl	80087fc <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acfa:	d901      	bls.n	800ad00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e007      	b.n	800ad10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <HAL_PWREx_EnableOverDrive+0x98>)
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad0c:	d1ee      	bne.n	800acec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	40023800 	.word	0x40023800
 800ad1c:	420e0040 	.word	0x420e0040
 800ad20:	40007000 	.word	0x40007000
 800ad24:	420e0044 	.word	0x420e0044

0800ad28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e0cc      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad3c:	4b68      	ldr	r3, [pc, #416]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 030f 	and.w	r3, r3, #15
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d90c      	bls.n	800ad64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad4a:	4b65      	ldr	r3, [pc, #404]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad52:	4b63      	ldr	r3, [pc, #396]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 030f 	and.w	r3, r3, #15
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d001      	beq.n	800ad64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e0b8      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0302 	and.w	r3, r3, #2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d020      	beq.n	800adb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad7c:	4b59      	ldr	r3, [pc, #356]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	4a58      	ldr	r2, [pc, #352]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad94:	4b53      	ldr	r3, [pc, #332]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	4a52      	ldr	r2, [pc, #328]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ada0:	4b50      	ldr	r3, [pc, #320]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	494d      	ldr	r1, [pc, #308]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d044      	beq.n	800ae48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d107      	bne.n	800add6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adc6:	4b47      	ldr	r3, [pc, #284]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d119      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e07f      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b02      	cmp	r3, #2
 800addc:	d003      	beq.n	800ade6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d107      	bne.n	800adf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ade6:	4b3f      	ldr	r3, [pc, #252]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e06f      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adf6:	4b3b      	ldr	r3, [pc, #236]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e067      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae06:	4b37      	ldr	r3, [pc, #220]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f023 0203 	bic.w	r2, r3, #3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	4934      	ldr	r1, [pc, #208]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae18:	f7fd fcf0 	bl	80087fc <HAL_GetTick>
 800ae1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae1e:	e00a      	b.n	800ae36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae20:	f7fd fcec 	bl	80087fc <HAL_GetTick>
 800ae24:	4602      	mov	r2, r0
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d901      	bls.n	800ae36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e04f      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae36:	4b2b      	ldr	r3, [pc, #172]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f003 020c 	and.w	r2, r3, #12
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d1eb      	bne.n	800ae20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae48:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d20c      	bcs.n	800ae70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae56:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	b2d2      	uxtb	r2, r2
 800ae5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae5e:	4b20      	ldr	r3, [pc, #128]	; (800aee0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d001      	beq.n	800ae70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e032      	b.n	800aed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d008      	beq.n	800ae8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae7c:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	4916      	ldr	r1, [pc, #88]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae9a:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	490e      	ldr	r1, [pc, #56]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aeae:	f000 f821 	bl	800aef4 <HAL_RCC_GetSysClockFreq>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <HAL_RCC_ClockConfig+0x1bc>)
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	091b      	lsrs	r3, r3, #4
 800aeba:	f003 030f 	and.w	r3, r3, #15
 800aebe:	4a0a      	ldr	r2, [pc, #40]	; (800aee8 <HAL_RCC_ClockConfig+0x1c0>)
 800aec0:	5cd3      	ldrb	r3, [r2, r3]
 800aec2:	fa21 f303 	lsr.w	r3, r1, r3
 800aec6:	4a09      	ldr	r2, [pc, #36]	; (800aeec <HAL_RCC_ClockConfig+0x1c4>)
 800aec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aeca:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <HAL_RCC_ClockConfig+0x1c8>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd fc50 	bl	8008774 <HAL_InitTick>

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40023c00 	.word	0x40023c00
 800aee4:	40023800 	.word	0x40023800
 800aee8:	08018c18 	.word	0x08018c18
 800aeec:	20000000 	.word	0x20000000
 800aef0:	20000004 	.word	0x20000004

0800aef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	607b      	str	r3, [r7, #4]
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	2300      	movs	r3, #0
 800af04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af0a:	4b63      	ldr	r3, [pc, #396]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f003 030c 	and.w	r3, r3, #12
 800af12:	2b04      	cmp	r3, #4
 800af14:	d007      	beq.n	800af26 <HAL_RCC_GetSysClockFreq+0x32>
 800af16:	2b08      	cmp	r3, #8
 800af18:	d008      	beq.n	800af2c <HAL_RCC_GetSysClockFreq+0x38>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 80b4 	bne.w	800b088 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af20:	4b5e      	ldr	r3, [pc, #376]	; (800b09c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800af22:	60bb      	str	r3, [r7, #8]
       break;
 800af24:	e0b3      	b.n	800b08e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af26:	4b5d      	ldr	r3, [pc, #372]	; (800b09c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800af28:	60bb      	str	r3, [r7, #8]
      break;
 800af2a:	e0b0      	b.n	800b08e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af2c:	4b5a      	ldr	r3, [pc, #360]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af36:	4b58      	ldr	r3, [pc, #352]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d04a      	beq.n	800afd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af42:	4b55      	ldr	r3, [pc, #340]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	099b      	lsrs	r3, r3, #6
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800af50:	f04f 0200 	mov.w	r2, #0
 800af54:	ea03 0501 	and.w	r5, r3, r1
 800af58:	ea04 0602 	and.w	r6, r4, r2
 800af5c:	4629      	mov	r1, r5
 800af5e:	4632      	mov	r2, r6
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	f04f 0400 	mov.w	r4, #0
 800af68:	0154      	lsls	r4, r2, #5
 800af6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800af6e:	014b      	lsls	r3, r1, #5
 800af70:	4619      	mov	r1, r3
 800af72:	4622      	mov	r2, r4
 800af74:	1b49      	subs	r1, r1, r5
 800af76:	eb62 0206 	sbc.w	r2, r2, r6
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	f04f 0400 	mov.w	r4, #0
 800af82:	0194      	lsls	r4, r2, #6
 800af84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800af88:	018b      	lsls	r3, r1, #6
 800af8a:	1a5b      	subs	r3, r3, r1
 800af8c:	eb64 0402 	sbc.w	r4, r4, r2
 800af90:	f04f 0100 	mov.w	r1, #0
 800af94:	f04f 0200 	mov.w	r2, #0
 800af98:	00e2      	lsls	r2, r4, #3
 800af9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800af9e:	00d9      	lsls	r1, r3, #3
 800afa0:	460b      	mov	r3, r1
 800afa2:	4614      	mov	r4, r2
 800afa4:	195b      	adds	r3, r3, r5
 800afa6:	eb44 0406 	adc.w	r4, r4, r6
 800afaa:	f04f 0100 	mov.w	r1, #0
 800afae:	f04f 0200 	mov.w	r2, #0
 800afb2:	02a2      	lsls	r2, r4, #10
 800afb4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800afb8:	0299      	lsls	r1, r3, #10
 800afba:	460b      	mov	r3, r1
 800afbc:	4614      	mov	r4, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	4621      	mov	r1, r4
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f04f 0400 	mov.w	r4, #0
 800afc8:	461a      	mov	r2, r3
 800afca:	4623      	mov	r3, r4
 800afcc:	f7f5 fe74 	bl	8000cb8 <__aeabi_uldivmod>
 800afd0:	4603      	mov	r3, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e049      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afd8:	4b2f      	ldr	r3, [pc, #188]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	099b      	lsrs	r3, r3, #6
 800afde:	f04f 0400 	mov.w	r4, #0
 800afe2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	ea03 0501 	and.w	r5, r3, r1
 800afee:	ea04 0602 	and.w	r6, r4, r2
 800aff2:	4629      	mov	r1, r5
 800aff4:	4632      	mov	r2, r6
 800aff6:	f04f 0300 	mov.w	r3, #0
 800affa:	f04f 0400 	mov.w	r4, #0
 800affe:	0154      	lsls	r4, r2, #5
 800b000:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b004:	014b      	lsls	r3, r1, #5
 800b006:	4619      	mov	r1, r3
 800b008:	4622      	mov	r2, r4
 800b00a:	1b49      	subs	r1, r1, r5
 800b00c:	eb62 0206 	sbc.w	r2, r2, r6
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	0194      	lsls	r4, r2, #6
 800b01a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b01e:	018b      	lsls	r3, r1, #6
 800b020:	1a5b      	subs	r3, r3, r1
 800b022:	eb64 0402 	sbc.w	r4, r4, r2
 800b026:	f04f 0100 	mov.w	r1, #0
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	00e2      	lsls	r2, r4, #3
 800b030:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b034:	00d9      	lsls	r1, r3, #3
 800b036:	460b      	mov	r3, r1
 800b038:	4614      	mov	r4, r2
 800b03a:	195b      	adds	r3, r3, r5
 800b03c:	eb44 0406 	adc.w	r4, r4, r6
 800b040:	f04f 0100 	mov.w	r1, #0
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	02a2      	lsls	r2, r4, #10
 800b04a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b04e:	0299      	lsls	r1, r3, #10
 800b050:	460b      	mov	r3, r1
 800b052:	4614      	mov	r4, r2
 800b054:	4618      	mov	r0, r3
 800b056:	4621      	mov	r1, r4
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f04f 0400 	mov.w	r4, #0
 800b05e:	461a      	mov	r2, r3
 800b060:	4623      	mov	r3, r4
 800b062:	f7f5 fe29 	bl	8000cb8 <__aeabi_uldivmod>
 800b066:	4603      	mov	r3, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	0c1b      	lsrs	r3, r3, #16
 800b072:	f003 0303 	and.w	r3, r3, #3
 800b076:	3301      	adds	r3, #1
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	fbb2 f3f3 	udiv	r3, r2, r3
 800b084:	60bb      	str	r3, [r7, #8]
      break;
 800b086:	e002      	b.n	800b08e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b08a:	60bb      	str	r3, [r7, #8]
      break;
 800b08c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b08e:	68bb      	ldr	r3, [r7, #8]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b098:	40023800 	.word	0x40023800
 800b09c:	00f42400 	.word	0x00f42400

0800b0a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0a4:	4b03      	ldr	r3, [pc, #12]	; (800b0b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20000000 	.word	0x20000000

0800b0b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b0bc:	f7ff fff0 	bl	800b0a0 <HAL_RCC_GetHCLKFreq>
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	0a9b      	lsrs	r3, r3, #10
 800b0c8:	f003 0307 	and.w	r3, r3, #7
 800b0cc:	4a03      	ldr	r2, [pc, #12]	; (800b0dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0ce:	5cd3      	ldrb	r3, [r2, r3]
 800b0d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	40023800 	.word	0x40023800
 800b0dc:	08018c28 	.word	0x08018c28

0800b0e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b0e4:	f7ff ffdc 	bl	800b0a0 <HAL_RCC_GetHCLKFreq>
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	4b05      	ldr	r3, [pc, #20]	; (800b100 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	0b5b      	lsrs	r3, r3, #13
 800b0f0:	f003 0307 	and.w	r3, r3, #7
 800b0f4:	4a03      	ldr	r2, [pc, #12]	; (800b104 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0f6:	5cd3      	ldrb	r3, [r2, r3]
 800b0f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	40023800 	.word	0x40023800
 800b104:	08018c28 	.word	0x08018c28

0800b108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b130:	4b66      	ldr	r3, [pc, #408]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b136:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13e:	4963      	ldr	r1, [pc, #396]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b140:	4313      	orrs	r3, r2
 800b142:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b152:	4b5e      	ldr	r3, [pc, #376]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b158:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	495a      	ldr	r1, [pc, #360]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b162:	4313      	orrs	r3, r2
 800b164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d105      	bne.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d075      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b18c:	4b50      	ldr	r3, [pc, #320]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b192:	f7fd fb33 	bl	80087fc <HAL_GetTick>
 800b196:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b198:	e008      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b19a:	f7fd fb2f 	bl	80087fc <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e1dc      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b1ac:	4b47      	ldr	r3, [pc, #284]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1f0      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d009      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	019a      	lsls	r2, r3, #6
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	071b      	lsls	r3, r3, #28
 800b1d0:	493e      	ldr	r1, [pc, #248]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01f      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1e4:	4b39      	ldr	r3, [pc, #228]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1ea:	0f1b      	lsrs	r3, r3, #28
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	019a      	lsls	r2, r3, #6
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	061b      	lsls	r3, r3, #24
 800b1fe:	431a      	orrs	r2, r3
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	071b      	lsls	r3, r3, #28
 800b204:	4931      	ldr	r1, [pc, #196]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b206:	4313      	orrs	r3, r2
 800b208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b20c:	4b2f      	ldr	r3, [pc, #188]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b212:	f023 021f 	bic.w	r2, r3, #31
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	492b      	ldr	r1, [pc, #172]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00d      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	019a      	lsls	r2, r3, #6
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	061b      	lsls	r3, r3, #24
 800b23c:	431a      	orrs	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	071b      	lsls	r3, r3, #28
 800b244:	4921      	ldr	r1, [pc, #132]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b246:	4313      	orrs	r3, r2
 800b248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b24c:	4b20      	ldr	r3, [pc, #128]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b24e:	2201      	movs	r2, #1
 800b250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b252:	f7fd fad3 	bl	80087fc <HAL_GetTick>
 800b256:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b258:	e008      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b25a:	f7fd facf 	bl	80087fc <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e17c      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b26c:	4b17      	ldr	r3, [pc, #92]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0f0      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d112      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10c      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80ce 	beq.w	800b43a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b2a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2a6:	f040 80c8 	bne.w	800b43a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b2b0:	f7fd faa4 	bl	80087fc <HAL_GetTick>
 800b2b4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2b6:	e00f      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b2b8:	f7fd faa0 	bl	80087fc <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d908      	bls.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e14d      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b2ca:	bf00      	nop
 800b2cc:	40023800 	.word	0x40023800
 800b2d0:	42470068 	.word	0x42470068
 800b2d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2d8:	4ba5      	ldr	r3, [pc, #660]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d0e8      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0304 	and.w	r3, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d02e      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b2f2:	4b9f      	ldr	r3, [pc, #636]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2f8:	0c1b      	lsrs	r3, r3, #16
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	3301      	adds	r3, #1
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b304:	4b9a      	ldr	r3, [pc, #616]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30a:	0f1b      	lsrs	r3, r3, #28
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	019a      	lsls	r2, r3, #6
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	3b01      	subs	r3, #1
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	431a      	orrs	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	061b      	lsls	r3, r3, #24
 800b328:	431a      	orrs	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	071b      	lsls	r3, r3, #28
 800b32e:	4990      	ldr	r1, [pc, #576]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b330:	4313      	orrs	r3, r2
 800b332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b336:	4b8e      	ldr	r3, [pc, #568]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	3b01      	subs	r3, #1
 800b346:	021b      	lsls	r3, r3, #8
 800b348:	4989      	ldr	r1, [pc, #548]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d02c      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b35c:	4b84      	ldr	r3, [pc, #528]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	f003 0303 	and.w	r3, r3, #3
 800b368:	3301      	adds	r3, #1
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b36e:	4b80      	ldr	r3, [pc, #512]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	0e1b      	lsrs	r3, r3, #24
 800b376:	f003 030f 	and.w	r3, r3, #15
 800b37a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	019a      	lsls	r2, r3, #6
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	085b      	lsrs	r3, r3, #1
 800b386:	3b01      	subs	r3, #1
 800b388:	041b      	lsls	r3, r3, #16
 800b38a:	431a      	orrs	r2, r3
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	061b      	lsls	r3, r3, #24
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	071b      	lsls	r3, r3, #28
 800b398:	4975      	ldr	r1, [pc, #468]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b3a0:	4b73      	ldr	r3, [pc, #460]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	4970      	ldr	r1, [pc, #448]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d024      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3ca:	d11f      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b3cc:	4b68      	ldr	r3, [pc, #416]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d2:	0e1b      	lsrs	r3, r3, #24
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3da:	4b65      	ldr	r3, [pc, #404]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e0:	0f1b      	lsrs	r3, r3, #28
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	019a      	lsls	r2, r3, #6
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	061b      	lsls	r3, r3, #24
 800b3fe:	431a      	orrs	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	071b      	lsls	r3, r3, #28
 800b404:	495a      	ldr	r1, [pc, #360]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b406:	4313      	orrs	r3, r2
 800b408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b40c:	4b59      	ldr	r3, [pc, #356]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b40e:	2201      	movs	r2, #1
 800b410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b412:	f7fd f9f3 	bl	80087fc <HAL_GetTick>
 800b416:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b418:	e008      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b41a:	f7fd f9ef 	bl	80087fc <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	2b02      	cmp	r3, #2
 800b426:	d901      	bls.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e09c      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b42c:	4b50      	ldr	r3, [pc, #320]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b438:	d1ef      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 8083 	beq.w	800b54e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b448:	2300      	movs	r3, #0
 800b44a:	60bb      	str	r3, [r7, #8]
 800b44c:	4b48      	ldr	r3, [pc, #288]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	4a47      	ldr	r2, [pc, #284]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b456:	6413      	str	r3, [r2, #64]	; 0x40
 800b458:	4b45      	ldr	r3, [pc, #276]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b464:	4b44      	ldr	r3, [pc, #272]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a43      	ldr	r2, [pc, #268]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b46a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b470:	f7fd f9c4 	bl	80087fc <HAL_GetTick>
 800b474:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b478:	f7fd f9c0 	bl	80087fc <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b02      	cmp	r3, #2
 800b484:	d901      	bls.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e06d      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b48a:	4b3b      	ldr	r3, [pc, #236]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0f0      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b496:	4b36      	ldr	r3, [pc, #216]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d02f      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d028      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4b4:	4b2e      	ldr	r3, [pc, #184]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4bc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b4be:	4b2f      	ldr	r3, [pc, #188]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b4c4:	4b2d      	ldr	r3, [pc, #180]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b4ca:	4a29      	ldr	r2, [pc, #164]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b4d0:	4b27      	ldr	r3, [pc, #156]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d4:	f003 0301 	and.w	r3, r3, #1
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d114      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b4dc:	f7fd f98e 	bl	80087fc <HAL_GetTick>
 800b4e0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4e2:	e00a      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4e4:	f7fd f98a 	bl	80087fc <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d901      	bls.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e035      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4fa:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0ee      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b50e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b512:	d10d      	bne.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b514:	4b16      	ldr	r3, [pc, #88]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b528:	4911      	ldr	r1, [pc, #68]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	608b      	str	r3, [r1, #8]
 800b52e:	e005      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800b530:	4b0f      	ldr	r3, [pc, #60]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	4a0e      	ldr	r2, [pc, #56]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b536:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b53a:	6093      	str	r3, [r2, #8]
 800b53c:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b53e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b548:	4909      	ldr	r1, [pc, #36]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800b562:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3720      	adds	r7, #32
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	40023800 	.word	0x40023800
 800b574:	42470070 	.word	0x42470070
 800b578:	40007000 	.word	0x40007000
 800b57c:	42470e40 	.word	0x42470e40
 800b580:	424711e0 	.word	0x424711e0

0800b584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d075      	beq.n	800b688 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b59c:	4ba2      	ldr	r3, [pc, #648]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f003 030c 	and.w	r3, r3, #12
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	d00c      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5a8:	4b9f      	ldr	r3, [pc, #636]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	d112      	bne.n	800b5da <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5b4:	4b9c      	ldr	r3, [pc, #624]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5c0:	d10b      	bne.n	800b5da <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c2:	4b99      	ldr	r3, [pc, #612]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d05b      	beq.n	800b686 <HAL_RCC_OscConfig+0x102>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d157      	bne.n	800b686 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e20b      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e2:	d106      	bne.n	800b5f2 <HAL_RCC_OscConfig+0x6e>
 800b5e4:	4b90      	ldr	r3, [pc, #576]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a8f      	ldr	r2, [pc, #572]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	e01d      	b.n	800b62e <HAL_RCC_OscConfig+0xaa>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5fa:	d10c      	bne.n	800b616 <HAL_RCC_OscConfig+0x92>
 800b5fc:	4b8a      	ldr	r3, [pc, #552]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a89      	ldr	r2, [pc, #548]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	4b87      	ldr	r3, [pc, #540]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a86      	ldr	r2, [pc, #536]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b60e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	e00b      	b.n	800b62e <HAL_RCC_OscConfig+0xaa>
 800b616:	4b84      	ldr	r3, [pc, #528]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a83      	ldr	r2, [pc, #524]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b61c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	4b81      	ldr	r3, [pc, #516]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a80      	ldr	r2, [pc, #512]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b62c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d013      	beq.n	800b65e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b636:	f7fd f8e1 	bl	80087fc <HAL_GetTick>
 800b63a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b63c:	e008      	b.n	800b650 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b63e:	f7fd f8dd 	bl	80087fc <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2b64      	cmp	r3, #100	; 0x64
 800b64a:	d901      	bls.n	800b650 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e1d0      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b650:	4b75      	ldr	r3, [pc, #468]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0f0      	beq.n	800b63e <HAL_RCC_OscConfig+0xba>
 800b65c:	e014      	b.n	800b688 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b65e:	f7fd f8cd 	bl	80087fc <HAL_GetTick>
 800b662:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b664:	e008      	b.n	800b678 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b666:	f7fd f8c9 	bl	80087fc <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	2b64      	cmp	r3, #100	; 0x64
 800b672:	d901      	bls.n	800b678 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e1bc      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b678:	4b6b      	ldr	r3, [pc, #428]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f0      	bne.n	800b666 <HAL_RCC_OscConfig+0xe2>
 800b684:	e000      	b.n	800b688 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b686:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d063      	beq.n	800b75c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b694:	4b64      	ldr	r3, [pc, #400]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f003 030c 	and.w	r3, r3, #12
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6a0:	4b61      	ldr	r3, [pc, #388]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d11c      	bne.n	800b6e6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6ac:	4b5e      	ldr	r3, [pc, #376]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d116      	bne.n	800b6e6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6b8:	4b5b      	ldr	r3, [pc, #364]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d005      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x14c>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d001      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e190      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6d0:	4b55      	ldr	r3, [pc, #340]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	4952      	ldr	r1, [pc, #328]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6e4:	e03a      	b.n	800b75c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d020      	beq.n	800b730 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6ee:	4b4f      	ldr	r3, [pc, #316]	; (800b82c <HAL_RCC_OscConfig+0x2a8>)
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f4:	f7fd f882 	bl	80087fc <HAL_GetTick>
 800b6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6fc:	f7fd f87e 	bl	80087fc <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e171      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b70e:	4b46      	ldr	r3, [pc, #280]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f0      	beq.n	800b6fc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b71a:	4b43      	ldr	r3, [pc, #268]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	493f      	ldr	r1, [pc, #252]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	600b      	str	r3, [r1, #0]
 800b72e:	e015      	b.n	800b75c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b730:	4b3e      	ldr	r3, [pc, #248]	; (800b82c <HAL_RCC_OscConfig+0x2a8>)
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b736:	f7fd f861 	bl	80087fc <HAL_GetTick>
 800b73a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b73c:	e008      	b.n	800b750 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b73e:	f7fd f85d 	bl	80087fc <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d901      	bls.n	800b750 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e150      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b750:	4b35      	ldr	r3, [pc, #212]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f0      	bne.n	800b73e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 0308 	and.w	r3, r3, #8
 800b764:	2b00      	cmp	r3, #0
 800b766:	d030      	beq.n	800b7ca <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d016      	beq.n	800b79e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b770:	4b2f      	ldr	r3, [pc, #188]	; (800b830 <HAL_RCC_OscConfig+0x2ac>)
 800b772:	2201      	movs	r2, #1
 800b774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b776:	f7fd f841 	bl	80087fc <HAL_GetTick>
 800b77a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b77c:	e008      	b.n	800b790 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b77e:	f7fd f83d 	bl	80087fc <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d901      	bls.n	800b790 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e130      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b790:	4b25      	ldr	r3, [pc, #148]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0f0      	beq.n	800b77e <HAL_RCC_OscConfig+0x1fa>
 800b79c:	e015      	b.n	800b7ca <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b79e:	4b24      	ldr	r3, [pc, #144]	; (800b830 <HAL_RCC_OscConfig+0x2ac>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7a4:	f7fd f82a 	bl	80087fc <HAL_GetTick>
 800b7a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7aa:	e008      	b.n	800b7be <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b7ac:	f7fd f826 	bl	80087fc <HAL_GetTick>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d901      	bls.n	800b7be <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e119      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7be:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c2:	f003 0302 	and.w	r3, r3, #2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1f0      	bne.n	800b7ac <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0304 	and.w	r3, r3, #4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 809f 	beq.w	800b916 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7dc:	4b12      	ldr	r3, [pc, #72]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10f      	bne.n	800b808 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f0:	4a0d      	ldr	r2, [pc, #52]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b7f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7f6:	6413      	str	r3, [r2, #64]	; 0x40
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <HAL_RCC_OscConfig+0x2a4>)
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b804:	2301      	movs	r3, #1
 800b806:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <HAL_RCC_OscConfig+0x2b0>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b810:	2b00      	cmp	r3, #0
 800b812:	d120      	bne.n	800b856 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b814:	4b07      	ldr	r3, [pc, #28]	; (800b834 <HAL_RCC_OscConfig+0x2b0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a06      	ldr	r2, [pc, #24]	; (800b834 <HAL_RCC_OscConfig+0x2b0>)
 800b81a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b81e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b820:	f7fc ffec 	bl	80087fc <HAL_GetTick>
 800b824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b826:	e010      	b.n	800b84a <HAL_RCC_OscConfig+0x2c6>
 800b828:	40023800 	.word	0x40023800
 800b82c:	42470000 	.word	0x42470000
 800b830:	42470e80 	.word	0x42470e80
 800b834:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b838:	f7fc ffe0 	bl	80087fc <HAL_GetTick>
 800b83c:	4602      	mov	r2, r0
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	2b02      	cmp	r3, #2
 800b844:	d901      	bls.n	800b84a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e0d3      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b84a:	4b6c      	ldr	r3, [pc, #432]	; (800b9fc <HAL_RCC_OscConfig+0x478>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0f0      	beq.n	800b838 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d106      	bne.n	800b86c <HAL_RCC_OscConfig+0x2e8>
 800b85e:	4b68      	ldr	r3, [pc, #416]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b862:	4a67      	ldr	r2, [pc, #412]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b864:	f043 0301 	orr.w	r3, r3, #1
 800b868:	6713      	str	r3, [r2, #112]	; 0x70
 800b86a:	e01c      	b.n	800b8a6 <HAL_RCC_OscConfig+0x322>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b05      	cmp	r3, #5
 800b872:	d10c      	bne.n	800b88e <HAL_RCC_OscConfig+0x30a>
 800b874:	4b62      	ldr	r3, [pc, #392]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b878:	4a61      	ldr	r2, [pc, #388]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b87a:	f043 0304 	orr.w	r3, r3, #4
 800b87e:	6713      	str	r3, [r2, #112]	; 0x70
 800b880:	4b5f      	ldr	r3, [pc, #380]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b884:	4a5e      	ldr	r2, [pc, #376]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	6713      	str	r3, [r2, #112]	; 0x70
 800b88c:	e00b      	b.n	800b8a6 <HAL_RCC_OscConfig+0x322>
 800b88e:	4b5c      	ldr	r3, [pc, #368]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b892:	4a5b      	ldr	r2, [pc, #364]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b894:	f023 0301 	bic.w	r3, r3, #1
 800b898:	6713      	str	r3, [r2, #112]	; 0x70
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	4a58      	ldr	r2, [pc, #352]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b8a0:	f023 0304 	bic.w	r3, r3, #4
 800b8a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d015      	beq.n	800b8da <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ae:	f7fc ffa5 	bl	80087fc <HAL_GetTick>
 800b8b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8b4:	e00a      	b.n	800b8cc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8b6:	f7fc ffa1 	bl	80087fc <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d901      	bls.n	800b8cc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e092      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8cc:	4b4c      	ldr	r3, [pc, #304]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d0:	f003 0302 	and.w	r3, r3, #2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0ee      	beq.n	800b8b6 <HAL_RCC_OscConfig+0x332>
 800b8d8:	e014      	b.n	800b904 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8da:	f7fc ff8f 	bl	80087fc <HAL_GetTick>
 800b8de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8e0:	e00a      	b.n	800b8f8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8e2:	f7fc ff8b 	bl	80087fc <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d901      	bls.n	800b8f8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e07c      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8f8:	4b41      	ldr	r3, [pc, #260]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1ee      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d105      	bne.n	800b916 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b90a:	4b3d      	ldr	r3, [pc, #244]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	4a3c      	ldr	r2, [pc, #240]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d068      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b91e:	4b38      	ldr	r3, [pc, #224]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f003 030c 	and.w	r3, r3, #12
 800b926:	2b08      	cmp	r3, #8
 800b928:	d060      	beq.n	800b9ec <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d145      	bne.n	800b9be <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b932:	4b34      	ldr	r3, [pc, #208]	; (800ba04 <HAL_RCC_OscConfig+0x480>)
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7fc ff60 	bl	80087fc <HAL_GetTick>
 800b93c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b93e:	e008      	b.n	800b952 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b940:	f7fc ff5c 	bl	80087fc <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e04f      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b952:	4b2b      	ldr	r3, [pc, #172]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f0      	bne.n	800b940 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69da      	ldr	r2, [r3, #28]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	019b      	lsls	r3, r3, #6
 800b96e:	431a      	orrs	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	3b01      	subs	r3, #1
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	431a      	orrs	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	061b      	lsls	r3, r3, #24
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b988:	071b      	lsls	r3, r3, #28
 800b98a:	491d      	ldr	r1, [pc, #116]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b990:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <HAL_RCC_OscConfig+0x480>)
 800b992:	2201      	movs	r2, #1
 800b994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b996:	f7fc ff31 	bl	80087fc <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b99c:	e008      	b.n	800b9b0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b99e:	f7fc ff2d 	bl	80087fc <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d901      	bls.n	800b9b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e020      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9b0:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0f0      	beq.n	800b99e <HAL_RCC_OscConfig+0x41a>
 800b9bc:	e018      	b.n	800b9f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9be:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <HAL_RCC_OscConfig+0x480>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c4:	f7fc ff1a 	bl	80087fc <HAL_GetTick>
 800b9c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9ca:	e008      	b.n	800b9de <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9cc:	f7fc ff16 	bl	80087fc <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e009      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9de:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <HAL_RCC_OscConfig+0x47c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1f0      	bne.n	800b9cc <HAL_RCC_OscConfig+0x448>
 800b9ea:	e001      	b.n	800b9f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e000      	b.n	800b9f2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	40007000 	.word	0x40007000
 800ba00:	40023800 	.word	0x40023800
 800ba04:	42470060 	.word	0x42470060

0800ba08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e022      	b.n	800ba60 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d105      	bne.n	800ba32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7fa ff59 	bl	80068e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2203      	movs	r2, #3
 800ba36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f814 	bl	800ba68 <HAL_SD_InitCard>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e00a      	b.n	800ba60 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba68:	b5b0      	push	{r4, r5, r7, lr}
 800ba6a:	b08e      	sub	sp, #56	; 0x38
 800ba6c:	af04      	add	r7, sp, #16
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ba84:	2376      	movs	r3, #118	; 0x76
 800ba86:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681d      	ldr	r5, [r3, #0]
 800ba8c:	466c      	mov	r4, sp
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba9a:	f107 0308 	add.w	r3, r7, #8
 800ba9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800baa0:	4628      	mov	r0, r5
 800baa2:	f003 fa87 	bl	800efb4 <SDIO_Init>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800baac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e031      	b.n	800bb1c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bab8:	4b1a      	ldr	r3, [pc, #104]	; (800bb24 <HAL_SD_InitCard+0xbc>)
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f003 fabf 	bl	800f046 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bac8:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <HAL_SD_InitCard+0xbc>)
 800baca:	2201      	movs	r2, #1
 800bacc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 ffc6 	bl	800ca60 <SD_PowerON>
 800bad4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00b      	beq.n	800baf4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	431a      	orrs	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e013      	b.n	800bb1c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fee5 	bl	800c8c4 <SD_InitCard>
 800bafa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bafc:	6a3b      	ldr	r3, [r7, #32]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3728      	adds	r7, #40	; 0x28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bdb0      	pop	{r4, r5, r7, pc}
 800bb24:	422580a0 	.word	0x422580a0

0800bb28 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08c      	sub	sp, #48	; 0x30
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d107      	bne.n	800bb50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e0c7      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	f040 80c0 	bne.w	800bcde <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	441a      	add	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d907      	bls.n	800bb82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e0ae      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2203      	movs	r2, #3
 800bb86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bba0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	4a50      	ldr	r2, [pc, #320]	; (800bce8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800bba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbae:	4a4f      	ldr	r2, [pc, #316]	; (800bcec <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800bbb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3380      	adds	r3, #128	; 0x80
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	025b      	lsls	r3, r3, #9
 800bbcc:	089b      	lsrs	r3, r3, #2
 800bbce:	f7fd fc07 	bl	80093e0 <HAL_DMA_Start_IT>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800bbe6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a40      	ldr	r2, [pc, #256]	; (800bcf0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bbee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e06b      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800bc08:	4b3a      	ldr	r3, [pc, #232]	; (800bcf4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d002      	beq.n	800bc1c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	025b      	lsls	r3, r3, #9
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc24:	4618      	mov	r0, r3
 800bc26:	f003 faa1 	bl	800f16c <SDMMC_CmdBlockLength>
 800bc2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00f      	beq.n	800bc52 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a2e      	ldr	r2, [pc, #184]	; (800bcf0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	431a      	orrs	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e046      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc52:	f04f 33ff 	mov.w	r3, #4294967295
 800bc56:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	025b      	lsls	r3, r3, #9
 800bc5c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bc5e:	2390      	movs	r3, #144	; 0x90
 800bc60:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bc62:	2302      	movs	r3, #2
 800bc64:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f107 0210 	add.w	r2, r7, #16
 800bc76:	4611      	mov	r1, r2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f003 fa4b 	bl	800f114 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d90a      	bls.n	800bc9a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2282      	movs	r2, #130	; 0x82
 800bc88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc90:	4618      	mov	r0, r3
 800bc92:	f003 faaf 	bl	800f1f4 <SDMMC_CmdReadMultiBlock>
 800bc96:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bc98:	e009      	b.n	800bcae <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2281      	movs	r2, #129	; 0x81
 800bc9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bca6:	4618      	mov	r0, r3
 800bca8:	f003 fa82 	bl	800f1b0 <SDMMC_CmdReadSingleBlock>
 800bcac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d012      	beq.n	800bcda <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a0d      	ldr	r2, [pc, #52]	; (800bcf0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800bcba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	431a      	orrs	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e002      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e000      	b.n	800bce0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800bcde:	2302      	movs	r3, #2
  }
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3730      	adds	r7, #48	; 0x30
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	0800c6d3 	.word	0x0800c6d3
 800bcec:	0800c745 	.word	0x0800c745
 800bcf0:	004005ff 	.word	0x004005ff
 800bcf4:	4225858c 	.word	0x4225858c

0800bcf8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08c      	sub	sp, #48	; 0x30
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d107      	bne.n	800bd20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e0ca      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	f040 80c3 	bne.w	800beb4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	441a      	add	r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d907      	bls.n	800bd52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e0b1      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2203      	movs	r2, #3
 800bd56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 021a 	orr.w	r2, r2, #26
 800bd70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	4a52      	ldr	r2, [pc, #328]	; (800bec0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800bd78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	4a51      	ldr	r2, [pc, #324]	; (800bec4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800bd80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd86:	2200      	movs	r2, #0
 800bd88:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d002      	beq.n	800bd98 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	025b      	lsls	r3, r3, #9
 800bd96:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bda0:	4618      	mov	r0, r3
 800bda2:	f003 f9e3 	bl	800f16c <SDMMC_CmdBlockLength>
 800bda6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00f      	beq.n	800bdce <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a45      	ldr	r2, [pc, #276]	; (800bec8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800bdb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e073      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d90a      	bls.n	800bdea <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	22a0      	movs	r2, #160	; 0xa0
 800bdd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bde0:	4618      	mov	r0, r3
 800bde2:	f003 fa4b 	bl	800f27c <SDMMC_CmdWriteMultiBlock>
 800bde6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bde8:	e009      	b.n	800bdfe <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2290      	movs	r2, #144	; 0x90
 800bdee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f003 fa1e 	bl	800f238 <SDMMC_CmdWriteSingleBlock>
 800bdfc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d012      	beq.n	800be2a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a2f      	ldr	r2, [pc, #188]	; (800bec8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	431a      	orrs	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e045      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800be2a:	4b28      	ldr	r3, [pc, #160]	; (800becc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3380      	adds	r3, #128	; 0x80
 800be3c:	461a      	mov	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	025b      	lsls	r3, r3, #9
 800be42:	089b      	lsrs	r3, r3, #2
 800be44:	f7fd facc 	bl	80093e0 <HAL_DMA_Start_IT>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d01a      	beq.n	800be84 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 021a 	bic.w	r2, r2, #26
 800be5c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a19      	ldr	r2, [pc, #100]	; (800bec8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800be64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e018      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be84:	f04f 33ff 	mov.w	r3, #4294967295
 800be88:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	025b      	lsls	r3, r3, #9
 800be8e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800be90:	2390      	movs	r3, #144	; 0x90
 800be92:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800be94:	2300      	movs	r3, #0
 800be96:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800be98:	2300      	movs	r3, #0
 800be9a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800be9c:	2301      	movs	r3, #1
 800be9e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f107 0210 	add.w	r2, r7, #16
 800bea8:	4611      	mov	r1, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f003 f932 	bl	800f114 <SDIO_ConfigData>

      return HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e000      	b.n	800beb6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800beb4:	2302      	movs	r3, #2
  }
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3730      	adds	r7, #48	; 0x30
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0800c6a9 	.word	0x0800c6a9
 800bec4:	0800c745 	.word	0x0800c745
 800bec8:	004005ff 	.word	0x004005ff
 800becc:	4225858c 	.word	0x4225858c

0800bed0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <HAL_SD_IRQHandler+0x2e>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f003 0308 	and.w	r3, r3, #8
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 ffc8 	bl	800ce8c <SD_Read_IT>
 800befc:	e155      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 808f 	beq.w	800c02c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	6812      	ldr	r2, [r2, #0]
 800bf22:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800bf26:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800bf2a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f022 0201 	bic.w	r2, r2, #1
 800bf3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f003 0308 	and.w	r3, r3, #8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d039      	beq.n	800bfba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <HAL_SD_IRQHandler+0x8a>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d011      	beq.n	800bf7e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f003 f9ae 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800bf64:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d008      	beq.n	800bf7e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f91f 	bl	800c1bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <HAL_SD_IRQHandler+0xda>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f003 fe04 	bl	800fbb8 <HAL_SD_RxCpltCallback>
 800bfb0:	e0fb      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f003 fdf6 	bl	800fba4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bfb8:	e0f7      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 80f2 	beq.w	800c1aa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f003 0320 	and.w	r3, r3, #32
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d011      	beq.n	800bff4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f003 f973 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800bfda:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f8e4 	bl	800c1bc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f040 80d5 	bne.w	800c1aa <HAL_SD_IRQHandler+0x2da>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b00      	cmp	r3, #0
 800c008:	f040 80cf 	bne.w	800c1aa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f022 0208 	bic.w	r2, r2, #8
 800c01a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f003 fdbd 	bl	800fba4 <HAL_SD_TxCpltCallback>
}
 800c02a:	e0be      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d008      	beq.n	800c04c <HAL_SD_IRQHandler+0x17c>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f003 0308 	and.w	r3, r3, #8
 800c040:	2b00      	cmp	r3, #0
 800c042:	d003      	beq.n	800c04c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 ff72 	bl	800cf2e <SD_Write_IT>
 800c04a:	e0ae      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c052:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 80a7 	beq.w	800c1aa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06e:	f043 0202 	orr.w	r2, r3, #2
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	f043 0208 	orr.w	r2, r3, #8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d005      	beq.n	800c0aa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	f043 0220 	orr.w	r2, r3, #32
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	f043 0210 	orr.w	r2, r3, #16
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800c0cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c0dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f003 f8ec 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	431a      	orrs	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f003 0308 	and.w	r3, r3, #8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00a      	beq.n	800c114 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f855 	bl	800c1bc <HAL_SD_ErrorCallback>
}
 800c112:	e04a      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d045      	beq.n	800c1aa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f003 0310 	and.w	r3, r3, #16
 800c124:	2b00      	cmp	r3, #0
 800c126:	d104      	bne.n	800c132 <HAL_SD_IRQHandler+0x262>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d011      	beq.n	800c156 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c136:	4a1f      	ldr	r2, [pc, #124]	; (800c1b4 <HAL_SD_IRQHandler+0x2e4>)
 800c138:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fd f9a6 	bl	8009490 <HAL_DMA_Abort_IT>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d02f      	beq.n	800c1aa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fb4a 	bl	800c7e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c154:	e029      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d104      	bne.n	800c16a <HAL_SD_IRQHandler+0x29a>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f003 0302 	and.w	r3, r3, #2
 800c166:	2b00      	cmp	r3, #0
 800c168:	d011      	beq.n	800c18e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16e:	4a12      	ldr	r2, [pc, #72]	; (800c1b8 <HAL_SD_IRQHandler+0x2e8>)
 800c170:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	4618      	mov	r0, r3
 800c178:	f7fd f98a 	bl	8009490 <HAL_DMA_Abort_IT>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c186:	4618      	mov	r0, r3
 800c188:	f000 fb65 	bl	800c856 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c18c:	e00d      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f003 fcf4 	bl	800fb90 <HAL_SD_AbortCallback>
}
 800c1a8:	e7ff      	b.n	800c1aa <HAL_SD_IRQHandler+0x2da>
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0800c7e9 	.word	0x0800c7e9
 800c1b8:	0800c857 	.word	0x0800c857

0800c1bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1de:	0f9b      	lsrs	r3, r3, #30
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ea:	0e9b      	lsrs	r3, r3, #26
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 030f 	and.w	r3, r3, #15
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1fc:	0e1b      	lsrs	r3, r3, #24
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 0303 	and.w	r3, r3, #3
 800c204:	b2da      	uxtb	r2, r3
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c20e:	0c1b      	lsrs	r3, r3, #16
 800c210:	b2da      	uxtb	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c21a:	0a1b      	lsrs	r3, r3, #8
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c226:	b2da      	uxtb	r2, r3
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c230:	0d1b      	lsrs	r3, r3, #20
 800c232:	b29a      	uxth	r2, r3
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c23c:	0c1b      	lsrs	r3, r3, #16
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	f003 030f 	and.w	r3, r3, #15
 800c244:	b2da      	uxtb	r2, r3
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c24e:	0bdb      	lsrs	r3, r3, #15
 800c250:	b2db      	uxtb	r3, r3
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c260:	0b9b      	lsrs	r3, r3, #14
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c272:	0b5b      	lsrs	r3, r3, #13
 800c274:	b2db      	uxtb	r3, r3
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c284:	0b1b      	lsrs	r3, r3, #12
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2200      	movs	r2, #0
 800c296:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d163      	bne.n	800c368 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a4:	009a      	lsls	r2, r3, #2
 800c2a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c2b0:	0f92      	lsrs	r2, r2, #30
 800c2b2:	431a      	orrs	r2, r3
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2bc:	0edb      	lsrs	r3, r3, #27
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	f003 0307 	and.w	r3, r3, #7
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ce:	0e1b      	lsrs	r3, r3, #24
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e0:	0d5b      	lsrs	r3, r3, #21
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	f003 0307 	and.w	r3, r3, #7
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f2:	0c9b      	lsrs	r3, r3, #18
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c304:	0bdb      	lsrs	r3, r3, #15
 800c306:	b2db      	uxtb	r3, r3
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	7e1b      	ldrb	r3, [r3, #24]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	3302      	adds	r3, #2
 800c328:	2201      	movs	r2, #1
 800c32a:	fa02 f303 	lsl.w	r3, r2, r3
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c332:	fb02 f203 	mul.w	r2, r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	7a1b      	ldrb	r3, [r3, #8]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	f003 030f 	and.w	r3, r3, #15
 800c344:	2201      	movs	r2, #1
 800c346:	409a      	lsls	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c354:	0a52      	lsrs	r2, r2, #9
 800c356:	fb02 f203 	mul.w	r2, r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c364:	661a      	str	r2, [r3, #96]	; 0x60
 800c366:	e031      	b.n	800c3cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d11d      	bne.n	800c3ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	431a      	orrs	r2, r3
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	3301      	adds	r3, #1
 800c38c:	029a      	lsls	r2, r3, #10
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	661a      	str	r2, [r3, #96]	; 0x60
 800c3aa:	e00f      	b.n	800c3cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a58      	ldr	r2, [pc, #352]	; (800c514 <HAL_SD_GetCardCSD+0x344>)
 800c3b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e09d      	b.n	800c508 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d0:	0b9b      	lsrs	r3, r3, #14
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e2:	09db      	lsrs	r3, r3, #7
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c404:	0fdb      	lsrs	r3, r3, #31
 800c406:	b2da      	uxtb	r2, r3
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c410:	0f5b      	lsrs	r3, r3, #29
 800c412:	b2db      	uxtb	r3, r3
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c422:	0e9b      	lsrs	r3, r3, #26
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c434:	0d9b      	lsrs	r3, r3, #22
 800c436:	b2db      	uxtb	r3, r3
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c446:	0d5b      	lsrs	r3, r3, #21
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c462:	0c1b      	lsrs	r3, r3, #16
 800c464:	b2db      	uxtb	r3, r3
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c476:	0bdb      	lsrs	r3, r3, #15
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48a:	0b9b      	lsrs	r3, r3, #14
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	0b5b      	lsrs	r3, r3, #13
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b2:	0b1b      	lsrs	r3, r3, #12
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	0a9b      	lsrs	r3, r3, #10
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0303 	and.w	r3, r3, #3
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	004005ff 	.word	0x004005ff

0800c518 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c570:	b5b0      	push	{r4, r5, r7, lr}
 800c572:	b08e      	sub	sp, #56	; 0x38
 800c574:	af04      	add	r7, sp, #16
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2203      	movs	r2, #3
 800c57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c586:	2b03      	cmp	r3, #3
 800c588:	d02e      	beq.n	800c5e8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c590:	d106      	bne.n	800c5a0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c596:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	639a      	str	r2, [r3, #56]	; 0x38
 800c59e:	e029      	b.n	800c5f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5a6:	d10a      	bne.n	800c5be <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fb0f 	bl	800cbcc <SD_WideBus_Enable>
 800c5ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38
 800c5bc:	e01a      	b.n	800c5f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fb4c 	bl	800cc62 <SD_WideBus_Disable>
 800c5ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	639a      	str	r2, [r3, #56]	; 0x38
 800c5d8:	e00c      	b.n	800c5f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	639a      	str	r2, [r3, #56]	; 0x38
 800c5e6:	e005      	b.n	800c5f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d009      	beq.n	800c610 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a18      	ldr	r2, [pc, #96]	; (800c664 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e024      	b.n	800c65a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681d      	ldr	r5, [r3, #0]
 800c636:	466c      	mov	r4, sp
 800c638:	f107 0318 	add.w	r3, r7, #24
 800c63c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c644:	f107 030c 	add.w	r3, r7, #12
 800c648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c64a:	4628      	mov	r0, r5
 800c64c:	f002 fcb2 	bl	800efb4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3728      	adds	r7, #40	; 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bdb0      	pop	{r4, r5, r7, pc}
 800c662:	bf00      	nop
 800c664:	004005ff 	.word	0x004005ff

0800c668 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c674:	f107 030c 	add.w	r3, r7, #12
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fa7e 	bl	800cb7c <SD_SendStatus>
 800c680:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	0a5b      	lsrs	r3, r3, #9
 800c698:	f003 030f 	and.w	r3, r3, #15
 800c69c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c69e:	693b      	ldr	r3, [r7, #16]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c6c6:	bf00      	nop
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	2b82      	cmp	r3, #130	; 0x82
 800c6e6:	d111      	bne.n	800c70c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f002 fde7 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800c6f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d008      	beq.n	800c70c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	431a      	orrs	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff fd58 	bl	800c1bc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0208 	bic.w	r2, r2, #8
 800c71a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f240 523a 	movw	r2, #1338	; 0x53a
 800c724:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f003 fa3f 	bl	800fbb8 <HAL_SD_RxCpltCallback>
#endif
}
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7fd f848 	bl	80097e8 <HAL_DMA_GetError>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d03e      	beq.n	800c7dc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c764:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d002      	beq.n	800c77a <SD_DMAError+0x36>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d12d      	bne.n	800c7d6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a19      	ldr	r2, [pc, #100]	; (800c7e4 <SD_DMAError+0xa0>)
 800c780:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c790:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c796:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c79e:	6978      	ldr	r0, [r7, #20]
 800c7a0:	f7ff ff62 	bl	800c668 <HAL_SD_GetCardState>
 800c7a4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b06      	cmp	r3, #6
 800c7aa:	d002      	beq.n	800c7b2 <SD_DMAError+0x6e>
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b05      	cmp	r3, #5
 800c7b0:	d10a      	bne.n	800c7c8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f002 fd82 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c7d6:	6978      	ldr	r0, [r7, #20]
 800c7d8:	f7ff fcf0 	bl	800c1bc <HAL_SD_ErrorCallback>
#endif
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	004005ff 	.word	0x004005ff

0800c7e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f240 523a 	movw	r2, #1338	; 0x53a
 800c7fe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff ff31 	bl	800c668 <HAL_SD_GetCardState>
 800c806:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b06      	cmp	r3, #6
 800c81a:	d002      	beq.n	800c822 <SD_DMATxAbort+0x3a>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b05      	cmp	r3, #5
 800c820:	d10a      	bne.n	800c838 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4618      	mov	r0, r3
 800c828:	f002 fd4a 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800c82c:	4602      	mov	r2, r0
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c832:	431a      	orrs	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d103      	bne.n	800c848 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f003 f9a5 	bl	800fb90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c846:	e002      	b.n	800c84e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f7ff fcb7 	bl	800c1bc <HAL_SD_ErrorCallback>
}
 800c84e:	bf00      	nop
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b084      	sub	sp, #16
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f240 523a 	movw	r2, #1338	; 0x53a
 800c86c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f7ff fefa 	bl	800c668 <HAL_SD_GetCardState>
 800c874:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2b06      	cmp	r3, #6
 800c888:	d002      	beq.n	800c890 <SD_DMARxAbort+0x3a>
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2b05      	cmp	r3, #5
 800c88e:	d10a      	bne.n	800c8a6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f002 fd13 	bl	800f2c0 <SDMMC_CmdStopTransfer>
 800c89a:	4602      	mov	r2, r0
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d103      	bne.n	800c8b6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f003 f96e 	bl	800fb90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c8b4:	e002      	b.n	800c8bc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff fc80 	bl	800c1bc <HAL_SD_ErrorCallback>
}
 800c8bc:	bf00      	nop
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c8c4:	b5b0      	push	{r4, r5, r7, lr}
 800c8c6:	b094      	sub	sp, #80	; 0x50
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f002 fbc5 	bl	800f064 <SDIO_GetPowerState>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d102      	bne.n	800c8e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c8e4:	e0b7      	b.n	800ca56 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d02f      	beq.n	800c94e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f002 fdee 	bl	800f4d4 <SDMMC_CmdSendCID>
 800c8f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <SD_InitCard+0x40>
    {
      return errorstate;
 800c900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c902:	e0a8      	b.n	800ca56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2100      	movs	r1, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f002 fbef 	bl	800f0ee <SDIO_GetResponse>
 800c910:	4602      	mov	r2, r0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2104      	movs	r1, #4
 800c91c:	4618      	mov	r0, r3
 800c91e:	f002 fbe6 	bl	800f0ee <SDIO_GetResponse>
 800c922:	4602      	mov	r2, r0
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2108      	movs	r1, #8
 800c92e:	4618      	mov	r0, r3
 800c930:	f002 fbdd 	bl	800f0ee <SDIO_GetResponse>
 800c934:	4602      	mov	r2, r0
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	210c      	movs	r1, #12
 800c940:	4618      	mov	r0, r3
 800c942:	f002 fbd4 	bl	800f0ee <SDIO_GetResponse>
 800c946:	4602      	mov	r2, r0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c952:	2b03      	cmp	r3, #3
 800c954:	d00d      	beq.n	800c972 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f107 020e 	add.w	r2, r7, #14
 800c95e:	4611      	mov	r1, r2
 800c960:	4618      	mov	r0, r3
 800c962:	f002 fdf4 	bl	800f54e <SDMMC_CmdSetRelAdd>
 800c966:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <SD_InitCard+0xae>
    {
      return errorstate;
 800c96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c970:	e071      	b.n	800ca56 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c976:	2b03      	cmp	r3, #3
 800c978:	d036      	beq.n	800c9e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	461a      	mov	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c98a:	041b      	lsls	r3, r3, #16
 800c98c:	4619      	mov	r1, r3
 800c98e:	4610      	mov	r0, r2
 800c990:	f002 fdbe 	bl	800f510 <SDMMC_CmdSendCSD>
 800c994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99e:	e05a      	b.n	800ca56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f002 fba1 	bl	800f0ee <SDIO_GetResponse>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2104      	movs	r1, #4
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f002 fb98 	bl	800f0ee <SDIO_GetResponse>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2108      	movs	r1, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f002 fb8f 	bl	800f0ee <SDIO_GetResponse>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	210c      	movs	r1, #12
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f002 fb86 	bl	800f0ee <SDIO_GetResponse>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f002 fb7d 	bl	800f0ee <SDIO_GetResponse>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	0d1a      	lsrs	r2, r3, #20
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c9fc:	f107 0310 	add.w	r3, r7, #16
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff fbe4 	bl	800c1d0 <HAL_SD_GetCardCSD>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca12:	e020      	b.n	800ca56 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6819      	ldr	r1, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1c:	041b      	lsls	r3, r3, #16
 800ca1e:	f04f 0400 	mov.w	r4, #0
 800ca22:	461a      	mov	r2, r3
 800ca24:	4623      	mov	r3, r4
 800ca26:	4608      	mov	r0, r1
 800ca28:	f002 fc6c 	bl	800f304 <SDMMC_CmdSelDesel>
 800ca2c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <SD_InitCard+0x174>
  {
    return errorstate;
 800ca34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca36:	e00e      	b.n	800ca56 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681d      	ldr	r5, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	466c      	mov	r4, sp
 800ca40:	f103 0210 	add.w	r2, r3, #16
 800ca44:	ca07      	ldmia	r2, {r0, r1, r2}
 800ca46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f002 fab0 	bl	800efb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3740      	adds	r7, #64	; 0x40
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	2300      	movs	r3, #0
 800ca72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f002 fc66 	bl	800f34a <SDMMC_CmdGoIdleState>
 800ca7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	e072      	b.n	800cb70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f002 fc79 	bl	800f386 <SDMMC_CmdOperCond>
 800ca94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00d      	beq.n	800cab8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f002 fc4f 	bl	800f34a <SDMMC_CmdGoIdleState>
 800caac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <SD_PowerON+0x5e>
    {
      return errorstate;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	e05b      	b.n	800cb70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d137      	bne.n	800cb36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f002 fc79 	bl	800f3c4 <SDMMC_CmdAppCommand>
 800cad2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d02d      	beq.n	800cb36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cade:	e047      	b.n	800cb70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f002 fc6c 	bl	800f3c4 <SDMMC_CmdAppCommand>
 800caec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <SD_PowerON+0x98>
    {
      return errorstate;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	e03b      	b.n	800cb70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	491e      	ldr	r1, [pc, #120]	; (800cb78 <SD_PowerON+0x118>)
 800cafe:	4618      	mov	r0, r3
 800cb00:	f002 fc82 	bl	800f408 <SDMMC_CmdAppOperCommand>
 800cb04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb10:	e02e      	b.n	800cb70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2100      	movs	r1, #0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f002 fae8 	bl	800f0ee <SDIO_GetResponse>
 800cb1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	0fdb      	lsrs	r3, r3, #31
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d101      	bne.n	800cb2c <SD_PowerON+0xcc>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e000      	b.n	800cb2e <SD_PowerON+0xce>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	613b      	str	r3, [r7, #16]

    count++;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	3301      	adds	r3, #1
 800cb34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d802      	bhi.n	800cb46 <SD_PowerON+0xe6>
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0cc      	beq.n	800cae0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d902      	bls.n	800cb56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cb50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb54:	e00c      	b.n	800cb70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	645a      	str	r2, [r3, #68]	; 0x44
 800cb66:	e002      	b.n	800cb6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	c1100000 	.word	0xc1100000

0800cb7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cb8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb90:	e018      	b.n	800cbc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9a:	041b      	lsls	r3, r3, #16
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4610      	mov	r0, r2
 800cba0:	f002 fcf6 	bl	800f590 <SDMMC_CmdSendStatus>
 800cba4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	e009      	b.n	800cbc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f002 fa99 	bl	800f0ee <SDIO_GetResponse>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	2300      	movs	r3, #0
 800cbda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f002 fa83 	bl	800f0ee <SDIO_GetResponse>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbf2:	d102      	bne.n	800cbfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cbf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbf8:	e02f      	b.n	800cc5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cbfa:	f107 030c 	add.w	r3, r7, #12
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f879 	bl	800ccf8 <SD_FindSCR>
 800cc06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	e023      	b.n	800cc5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d01c      	beq.n	800cc56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc24:	041b      	lsls	r3, r3, #16
 800cc26:	4619      	mov	r1, r3
 800cc28:	4610      	mov	r0, r2
 800cc2a:	f002 fbcb 	bl	800f3c4 <SDMMC_CmdAppCommand>
 800cc2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	e00f      	b.n	800cc5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2102      	movs	r1, #2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f002 fc04 	bl	800f44e <SDMMC_CmdBusWidth>
 800cc46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	e003      	b.n	800cc5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e001      	b.n	800cc5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b086      	sub	sp, #24
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2100      	movs	r1, #0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f002 fa38 	bl	800f0ee <SDIO_GetResponse>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc88:	d102      	bne.n	800cc90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc8e:	e02f      	b.n	800ccf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cc90:	f107 030c 	add.w	r3, r7, #12
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f82e 	bl	800ccf8 <SD_FindSCR>
 800cc9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	e023      	b.n	800ccf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01c      	beq.n	800ccec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccba:	041b      	lsls	r3, r3, #16
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f002 fb80 	bl	800f3c4 <SDMMC_CmdAppCommand>
 800ccc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	e00f      	b.n	800ccf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f002 fbb9 	bl	800f44e <SDMMC_CmdBusWidth>
 800ccdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	e003      	b.n	800ccf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	e001      	b.n	800ccf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ccec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b08f      	sub	sp, #60	; 0x3c
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cd02:	f7fb fd7b 	bl	80087fc <HAL_GetTick>
 800cd06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60bb      	str	r3, [r7, #8]
 800cd10:	2300      	movs	r3, #0
 800cd12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2108      	movs	r1, #8
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f002 fa24 	bl	800f16c <SDMMC_CmdBlockLength>
 800cd24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	e0a9      	b.n	800ce84 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd38:	041b      	lsls	r3, r3, #16
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f002 fb41 	bl	800f3c4 <SDMMC_CmdAppCommand>
 800cd42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <SD_FindSCR+0x56>
  {
    return errorstate;
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	e09a      	b.n	800ce84 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cd54:	2308      	movs	r3, #8
 800cd56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800cd58:	2330      	movs	r3, #48	; 0x30
 800cd5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800cd64:	2301      	movs	r3, #1
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f107 0210 	add.w	r2, r7, #16
 800cd70:	4611      	mov	r1, r2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f002 f9ce 	bl	800f114 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f002 fb88 	bl	800f492 <SDMMC_CmdSendSCR>
 800cd82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d022      	beq.n	800cdd0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800cd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8c:	e07a      	b.n	800ce84 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00e      	beq.n	800cdba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6819      	ldr	r1, [r3, #0]
 800cda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	f107 0208 	add.w	r2, r7, #8
 800cda8:	18d4      	adds	r4, r2, r3
 800cdaa:	4608      	mov	r0, r1
 800cdac:	f002 f92d 	bl	800f00a <SDIO_ReadFIFO>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	6023      	str	r3, [r4, #0]
      index++;
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cdba:	f7fb fd1f 	bl	80087fc <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc8:	d102      	bne.n	800cdd0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cdca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdce:	e059      	b.n	800ce84 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdd6:	f240 432a 	movw	r3, #1066	; 0x42a
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0d6      	beq.n	800cd8e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde6:	f003 0308 	and.w	r3, r3, #8
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d005      	beq.n	800cdfa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2208      	movs	r2, #8
 800cdf4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	e044      	b.n	800ce84 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce10:	2302      	movs	r3, #2
 800ce12:	e037      	b.n	800ce84 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d005      	beq.n	800ce2e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2220      	movs	r2, #32
 800ce28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ce2a:	2320      	movs	r3, #32
 800ce2c:	e02a      	b.n	800ce84 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	061a      	lsls	r2, r3, #24
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	0a1b      	lsrs	r3, r3, #8
 800ce4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ce4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	0e1b      	lsrs	r3, r3, #24
 800ce54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	601a      	str	r2, [r3, #0]
    scr++;
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	061a      	lsls	r2, r3, #24
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	0a1b      	lsrs	r3, r3, #8
 800ce72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ce76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	0e1b      	lsrs	r3, r3, #24
 800ce7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	373c      	adds	r7, #60	; 0x3c
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}

0800ce8c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce98:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d03f      	beq.n	800cf26 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cea6:	2300      	movs	r3, #0
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e033      	b.n	800cf14 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f002 f8aa 	bl	800f00a <SDIO_ReadFIFO>
 800ceb6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3301      	adds	r3, #1
 800cec4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	0a1b      	lsrs	r3, r3, #8
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3301      	adds	r3, #1
 800ceda:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	3b01      	subs	r3, #1
 800cee0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	0c1b      	lsrs	r3, r3, #16
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3301      	adds	r3, #1
 800cef0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	0e1b      	lsrs	r3, r3, #24
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3301      	adds	r3, #1
 800cf06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	3301      	adds	r3, #1
 800cf12:	617b      	str	r3, [r7, #20]
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b07      	cmp	r3, #7
 800cf18:	d9c8      	bls.n	800ceac <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800cf26:	bf00      	nop
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b086      	sub	sp, #24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d043      	beq.n	800cfd0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	e037      	b.n	800cfbe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	021a      	lsls	r2, r3, #8
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	041a      	lsls	r2, r3, #16
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3301      	adds	r3, #1
 800cf88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	061a      	lsls	r2, r3, #24
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f107 0208 	add.w	r2, r7, #8
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f002 f836 	bl	800f024 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b07      	cmp	r3, #7
 800cfc2:	d9c4      	bls.n	800cf4e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e056      	b.n	800d098 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d106      	bne.n	800d00a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f9 fd5f 	bl	8006ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2202      	movs	r2, #2
 800d00e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d020:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	431a      	orrs	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	431a      	orrs	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	431a      	orrs	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	431a      	orrs	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	ea42 0103 	orr.w	r1, r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	0c1b      	lsrs	r3, r3, #16
 800d068:	f003 0104 	and.w	r1, r3, #4
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	430a      	orrs	r2, r1
 800d076:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	69da      	ldr	r2, [r3, #28]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d086:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <HAL_SPI_Transmit+0x22>
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e11e      	b.n	800d300 <HAL_SPI_Transmit+0x260>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0ca:	f7fb fb97 	bl	80087fc <HAL_GetTick>
 800d0ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d0d0:	88fb      	ldrh	r3, [r7, #6]
 800d0d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d002      	beq.n	800d0e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0e4:	e103      	b.n	800d2ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <HAL_SPI_Transmit+0x52>
 800d0ec:	88fb      	ldrh	r3, [r7, #6]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0f6:	e0fa      	b.n	800d2ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	88fa      	ldrh	r2, [r7, #6]
 800d110:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	88fa      	ldrh	r2, [r7, #6]
 800d116:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2200      	movs	r2, #0
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2200      	movs	r2, #0
 800d122:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d13e:	d107      	bne.n	800d150 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d14e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d15a:	2b40      	cmp	r3, #64	; 0x40
 800d15c:	d007      	beq.n	800d16e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d16c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d176:	d14b      	bne.n	800d210 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <HAL_SPI_Transmit+0xe6>
 800d180:	8afb      	ldrh	r3, [r7, #22]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d13e      	bne.n	800d204 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18a:	881a      	ldrh	r2, [r3, #0]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d196:	1c9a      	adds	r2, r3, #2
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1aa:	e02b      	b.n	800d204 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d112      	bne.n	800d1e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1be:	881a      	ldrh	r2, [r3, #0]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ca:	1c9a      	adds	r2, r3, #2
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1de:	e011      	b.n	800d204 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1e0:	f7fb fb0c 	bl	80087fc <HAL_GetTick>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d803      	bhi.n	800d1f8 <HAL_SPI_Transmit+0x158>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f6:	d102      	bne.n	800d1fe <HAL_SPI_Transmit+0x15e>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d102      	bne.n	800d204 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d1fe:	2303      	movs	r3, #3
 800d200:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d202:	e074      	b.n	800d2ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d208:	b29b      	uxth	r3, r3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1ce      	bne.n	800d1ac <HAL_SPI_Transmit+0x10c>
 800d20e:	e04c      	b.n	800d2aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <HAL_SPI_Transmit+0x17e>
 800d218:	8afb      	ldrh	r3, [r7, #22]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d140      	bne.n	800d2a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	330c      	adds	r3, #12
 800d228:	7812      	ldrb	r2, [r2, #0]
 800d22a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	3b01      	subs	r3, #1
 800d23e:	b29a      	uxth	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d244:	e02c      	b.n	800d2a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b02      	cmp	r3, #2
 800d252:	d113      	bne.n	800d27c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	330c      	adds	r3, #12
 800d25e:	7812      	ldrb	r2, [r2, #0]
 800d260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d270:	b29b      	uxth	r3, r3
 800d272:	3b01      	subs	r3, #1
 800d274:	b29a      	uxth	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	86da      	strh	r2, [r3, #54]	; 0x36
 800d27a:	e011      	b.n	800d2a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d27c:	f7fb fabe 	bl	80087fc <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d803      	bhi.n	800d294 <HAL_SPI_Transmit+0x1f4>
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d102      	bne.n	800d29a <HAL_SPI_Transmit+0x1fa>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d29a:	2303      	movs	r3, #3
 800d29c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d29e:	e026      	b.n	800d2ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1cd      	bne.n	800d246 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2aa:	69ba      	ldr	r2, [r7, #24]
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fba4 	bl	800d9fc <SPI_EndRxTxTransaction>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10a      	bne.n	800d2de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	613b      	str	r3, [r7, #16]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	613b      	str	r3, [r7, #16]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	613b      	str	r3, [r7, #16]
 800d2dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	77fb      	strb	r3, [r7, #31]
 800d2ea:	e000      	b.n	800d2ee <HAL_SPI_Transmit+0x24e>
  }

error:
 800d2ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d2fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af02      	add	r7, sp, #8
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	603b      	str	r3, [r7, #0]
 800d314:	4613      	mov	r3, r2
 800d316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d324:	d112      	bne.n	800d34c <HAL_SPI_Receive+0x44>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10e      	bne.n	800d34c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2204      	movs	r2, #4
 800d332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d336:	88fa      	ldrh	r2, [r7, #6]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	4613      	mov	r3, r2
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 f8e9 	bl	800d51a <HAL_SPI_TransmitReceive>
 800d348:	4603      	mov	r3, r0
 800d34a:	e0e2      	b.n	800d512 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <HAL_SPI_Receive+0x52>
 800d356:	2302      	movs	r3, #2
 800d358:	e0db      	b.n	800d512 <HAL_SPI_Receive+0x20a>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d362:	f7fb fa4b 	bl	80087fc <HAL_GetTick>
 800d366:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b01      	cmp	r3, #1
 800d372:	d002      	beq.n	800d37a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d374:	2302      	movs	r3, #2
 800d376:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d378:	e0c2      	b.n	800d500 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <HAL_SPI_Receive+0x7e>
 800d380:	88fb      	ldrh	r3, [r7, #6]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d102      	bne.n	800d38c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d38a:	e0b9      	b.n	800d500 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2204      	movs	r2, #4
 800d390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	88fa      	ldrh	r2, [r7, #6]
 800d3a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	88fa      	ldrh	r2, [r7, #6]
 800d3aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3d2:	d107      	bne.n	800d3e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ee:	2b40      	cmp	r3, #64	; 0x40
 800d3f0:	d007      	beq.n	800d402 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d400:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d162      	bne.n	800d4d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d40a:	e02e      	b.n	800d46a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	2b01      	cmp	r3, #1
 800d418:	d115      	bne.n	800d446 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f103 020c 	add.w	r2, r3, #12
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	7812      	ldrb	r2, [r2, #0]
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	3b01      	subs	r3, #1
 800d43e:	b29a      	uxth	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d444:	e011      	b.n	800d46a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d446:	f7fb f9d9 	bl	80087fc <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	429a      	cmp	r2, r3
 800d454:	d803      	bhi.n	800d45e <HAL_SPI_Receive+0x156>
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45c:	d102      	bne.n	800d464 <HAL_SPI_Receive+0x15c>
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d468:	e04a      	b.n	800d500 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d46e:	b29b      	uxth	r3, r3
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1cb      	bne.n	800d40c <HAL_SPI_Receive+0x104>
 800d474:	e031      	b.n	800d4da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	2b01      	cmp	r3, #1
 800d482:	d113      	bne.n	800d4ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	68da      	ldr	r2, [r3, #12]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48e:	b292      	uxth	r2, r2
 800d490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	1c9a      	adds	r2, r3, #2
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4aa:	e011      	b.n	800d4d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4ac:	f7fb f9a6 	bl	80087fc <HAL_GetTick>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d803      	bhi.n	800d4c4 <HAL_SPI_Receive+0x1bc>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	d102      	bne.n	800d4ca <HAL_SPI_Receive+0x1c2>
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d4ce:	e017      	b.n	800d500 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1cd      	bne.n	800d476 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 fa27 	bl	800d932 <SPI_EndRxTransaction>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	75fb      	strb	r3, [r7, #23]
 800d4fc:	e000      	b.n	800d500 <HAL_SPI_Receive+0x1f8>
  }

error :
 800d4fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d510:	7dfb      	ldrb	r3, [r7, #23]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b08c      	sub	sp, #48	; 0x30
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	607a      	str	r2, [r7, #4]
 800d526:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d528:	2301      	movs	r3, #1
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d101      	bne.n	800d540 <HAL_SPI_TransmitReceive+0x26>
 800d53c:	2302      	movs	r3, #2
 800d53e:	e18a      	b.n	800d856 <HAL_SPI_TransmitReceive+0x33c>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d548:	f7fb f958 	bl	80087fc <HAL_GetTick>
 800d54c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d55e:	887b      	ldrh	r3, [r7, #2]
 800d560:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d566:	2b01      	cmp	r3, #1
 800d568:	d00f      	beq.n	800d58a <HAL_SPI_TransmitReceive+0x70>
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d570:	d107      	bne.n	800d582 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <HAL_SPI_TransmitReceive+0x68>
 800d57a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d003      	beq.n	800d58a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d582:	2302      	movs	r3, #2
 800d584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d588:	e15b      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d005      	beq.n	800d59c <HAL_SPI_TransmitReceive+0x82>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <HAL_SPI_TransmitReceive+0x82>
 800d596:	887b      	ldrh	r3, [r7, #2]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5a2:	e14e      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d003      	beq.n	800d5b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2205      	movs	r2, #5
 800d5b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	887a      	ldrh	r2, [r7, #2]
 800d5c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	887a      	ldrh	r2, [r7, #2]
 800d5ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	887a      	ldrh	r2, [r7, #2]
 800d5da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	887a      	ldrh	r2, [r7, #2]
 800d5e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f8:	2b40      	cmp	r3, #64	; 0x40
 800d5fa:	d007      	beq.n	800d60c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d60a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d614:	d178      	bne.n	800d708 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <HAL_SPI_TransmitReceive+0x10a>
 800d61e:	8b7b      	ldrh	r3, [r7, #26]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d166      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d628:	881a      	ldrh	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d634:	1c9a      	adds	r2, r3, #2
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d63e:	b29b      	uxth	r3, r3
 800d640:	3b01      	subs	r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d648:	e053      	b.n	800d6f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b02      	cmp	r3, #2
 800d656:	d11b      	bne.n	800d690 <HAL_SPI_TransmitReceive+0x176>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d016      	beq.n	800d690 <HAL_SPI_TransmitReceive+0x176>
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	2b01      	cmp	r3, #1
 800d666:	d113      	bne.n	800d690 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66c:	881a      	ldrh	r2, [r3, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d678:	1c9a      	adds	r2, r3, #2
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d682:	b29b      	uxth	r3, r3
 800d684:	3b01      	subs	r3, #1
 800d686:	b29a      	uxth	r2, r3
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d119      	bne.n	800d6d2 <HAL_SPI_TransmitReceive+0x1b8>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d014      	beq.n	800d6d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b2:	b292      	uxth	r2, r2
 800d6b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ba:	1c9a      	adds	r2, r3, #2
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d6d2:	f7fb f893 	bl	80087fc <HAL_GetTick>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d807      	bhi.n	800d6f2 <HAL_SPI_TransmitReceive+0x1d8>
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e8:	d003      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d6f0:	e0a7      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1a6      	bne.n	800d64a <HAL_SPI_TransmitReceive+0x130>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d700:	b29b      	uxth	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1a1      	bne.n	800d64a <HAL_SPI_TransmitReceive+0x130>
 800d706:	e07c      	b.n	800d802 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <HAL_SPI_TransmitReceive+0x1fc>
 800d710:	8b7b      	ldrh	r3, [r7, #26]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d16b      	bne.n	800d7ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	330c      	adds	r3, #12
 800d720:	7812      	ldrb	r2, [r2, #0]
 800d722:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d732:	b29b      	uxth	r3, r3
 800d734:	3b01      	subs	r3, #1
 800d736:	b29a      	uxth	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d73c:	e057      	b.n	800d7ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d11c      	bne.n	800d786 <HAL_SPI_TransmitReceive+0x26c>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d750:	b29b      	uxth	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d017      	beq.n	800d786 <HAL_SPI_TransmitReceive+0x26c>
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d114      	bne.n	800d786 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	330c      	adds	r3, #12
 800d766:	7812      	ldrb	r2, [r2, #0]
 800d768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d778:	b29b      	uxth	r3, r3
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d782:	2300      	movs	r3, #0
 800d784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b01      	cmp	r3, #1
 800d792:	d119      	bne.n	800d7c8 <HAL_SPI_TransmitReceive+0x2ae>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d798:	b29b      	uxth	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d014      	beq.n	800d7c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d7c8:	f7fb f818 	bl	80087fc <HAL_GetTick>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d803      	bhi.n	800d7e0 <HAL_SPI_TransmitReceive+0x2c6>
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d102      	bne.n	800d7e6 <HAL_SPI_TransmitReceive+0x2cc>
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d103      	bne.n	800d7ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d7ec:	e029      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1a2      	bne.n	800d73e <HAL_SPI_TransmitReceive+0x224>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d19d      	bne.n	800d73e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f8f8 	bl	800d9fc <SPI_EndRxTxTransaction>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d006      	beq.n	800d820 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2220      	movs	r2, #32
 800d81c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d81e:	e010      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10b      	bne.n	800d840 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d828:	2300      	movs	r3, #0
 800d82a:	617b      	str	r3, [r7, #20]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	617b      	str	r3, [r7, #20]
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	e000      	b.n	800d842 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d856:	4618      	mov	r0, r3
 800d858:	3730      	adds	r7, #48	; 0x30
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	603b      	str	r3, [r7, #0]
 800d86a:	4613      	mov	r3, r2
 800d86c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d86e:	e04c      	b.n	800d90a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d876:	d048      	beq.n	800d90a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d878:	f7fa ffc0 	bl	80087fc <HAL_GetTick>
 800d87c:	4602      	mov	r2, r0
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	d902      	bls.n	800d88e <SPI_WaitFlagStateUntilTimeout+0x30>
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d13d      	bne.n	800d90a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d89c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8a6:	d111      	bne.n	800d8cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8b0:	d004      	beq.n	800d8bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ba:	d107      	bne.n	800d8cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8d4:	d10f      	bne.n	800d8f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e00f      	b.n	800d92a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	689a      	ldr	r2, [r3, #8]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	4013      	ands	r3, r2
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	429a      	cmp	r2, r3
 800d918:	bf0c      	ite	eq
 800d91a:	2301      	moveq	r3, #1
 800d91c:	2300      	movne	r3, #0
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	461a      	mov	r2, r3
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	429a      	cmp	r2, r3
 800d926:	d1a3      	bne.n	800d870 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b086      	sub	sp, #24
 800d936:	af02      	add	r7, sp, #8
 800d938:	60f8      	str	r0, [r7, #12]
 800d93a:	60b9      	str	r1, [r7, #8]
 800d93c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d946:	d111      	bne.n	800d96c <SPI_EndRxTransaction+0x3a>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d950:	d004      	beq.n	800d95c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d95a:	d107      	bne.n	800d96c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d96a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d974:	d12a      	bne.n	800d9cc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d97e:	d012      	beq.n	800d9a6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	2200      	movs	r2, #0
 800d988:	2180      	movs	r1, #128	; 0x80
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff ff67 	bl	800d85e <SPI_WaitFlagStateUntilTimeout>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d02d      	beq.n	800d9f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d99a:	f043 0220 	orr.w	r2, r3, #32
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e026      	b.n	800d9f4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7ff ff54 	bl	800d85e <SPI_WaitFlagStateUntilTimeout>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d01a      	beq.n	800d9f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c0:	f043 0220 	orr.w	r2, r3, #32
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e013      	b.n	800d9f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f7ff ff41 	bl	800d85e <SPI_WaitFlagStateUntilTimeout>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d007      	beq.n	800d9f2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9e6:	f043 0220 	orr.w	r2, r3, #32
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	e000      	b.n	800d9f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af02      	add	r7, sp, #8
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da08:	4b1b      	ldr	r3, [pc, #108]	; (800da78 <SPI_EndRxTxTransaction+0x7c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a1b      	ldr	r2, [pc, #108]	; (800da7c <SPI_EndRxTxTransaction+0x80>)
 800da0e:	fba2 2303 	umull	r2, r3, r2, r3
 800da12:	0d5b      	lsrs	r3, r3, #21
 800da14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da18:	fb02 f303 	mul.w	r3, r2, r3
 800da1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da26:	d112      	bne.n	800da4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2200      	movs	r2, #0
 800da30:	2180      	movs	r1, #128	; 0x80
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7ff ff13 	bl	800d85e <SPI_WaitFlagStateUntilTimeout>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d016      	beq.n	800da6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da42:	f043 0220 	orr.w	r2, r3, #32
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800da4a:	2303      	movs	r3, #3
 800da4c:	e00f      	b.n	800da6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00a      	beq.n	800da6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	3b01      	subs	r3, #1
 800da58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da64:	2b80      	cmp	r3, #128	; 0x80
 800da66:	d0f2      	beq.n	800da4e <SPI_EndRxTxTransaction+0x52>
 800da68:	e000      	b.n	800da6c <SPI_EndRxTxTransaction+0x70>
        break;
 800da6a:	bf00      	nop
  }

  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3718      	adds	r7, #24
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	20000000 	.word	0x20000000
 800da7c:	165e9f81 	.word	0x165e9f81

0800da80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	e01d      	b.n	800dace <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7f9 f8ca 	bl	8006c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2202      	movs	r2, #2
 800dab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3304      	adds	r3, #4
 800dabc:	4619      	mov	r1, r3
 800dabe:	4610      	mov	r0, r2
 800dac0:	f000 fb56 	bl	800e170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b085      	sub	sp, #20
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68da      	ldr	r2, [r3, #12]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f042 0201 	orr.w	r2, r2, #1
 800daec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	f003 0307 	and.w	r3, r3, #7
 800daf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b06      	cmp	r3, #6
 800dafe:	d007      	beq.n	800db10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f042 0201 	orr.w	r2, r2, #1
 800db0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	e01d      	b.n	800db6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d106      	bne.n	800db4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7f9 f807 	bl	8006b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3304      	adds	r3, #4
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f000 fb07 	bl	800e170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2201      	movs	r2, #1
 800db84:	6839      	ldr	r1, [r7, #0]
 800db86:	4618      	mov	r0, r3
 800db88:	f000 fd42 	bl	800e610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a15      	ldr	r2, [pc, #84]	; (800dbe8 <HAL_TIM_PWM_Start+0x74>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d004      	beq.n	800dba0 <HAL_TIM_PWM_Start+0x2c>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a14      	ldr	r2, [pc, #80]	; (800dbec <HAL_TIM_PWM_Start+0x78>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d101      	bne.n	800dba4 <HAL_TIM_PWM_Start+0x30>
 800dba0:	2301      	movs	r3, #1
 800dba2:	e000      	b.n	800dba6 <HAL_TIM_PWM_Start+0x32>
 800dba4:	2300      	movs	r3, #0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d007      	beq.n	800dbba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	f003 0307 	and.w	r3, r3, #7
 800dbc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b06      	cmp	r3, #6
 800dbca:	d007      	beq.n	800dbdc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f042 0201 	orr.w	r2, r2, #1
 800dbda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	40010000 	.word	0x40010000
 800dbec:	40010400 	.word	0x40010400

0800dbf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e083      	b.n	800dd0c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d106      	bne.n	800dc1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7f9 f8a1 	bl	8006d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2202      	movs	r2, #2
 800dc22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	6812      	ldr	r2, [r2, #0]
 800dc30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc34:	f023 0307 	bic.w	r3, r3, #7
 800dc38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	3304      	adds	r3, #4
 800dc42:	4619      	mov	r1, r3
 800dc44:	4610      	mov	r0, r2
 800dc46:	f000 fa93 	bl	800e170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	021b      	lsls	r3, r3, #8
 800dc82:	4313      	orrs	r3, r2
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800dc90:	f023 030c 	bic.w	r3, r3, #12
 800dc94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	021b      	lsls	r3, r3, #8
 800dcac:	4313      	orrs	r3, r2
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	011a      	lsls	r2, r3, #4
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	031b      	lsls	r3, r3, #12
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800dcce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800dcd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	011b      	lsls	r3, r3, #4
 800dce2:	4313      	orrs	r3, r2
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	693a      	ldr	r2, [r7, #16]
 800dcf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd0a:	2300      	movs	r3, #0
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <HAL_TIM_Encoder_Start+0x16>
 800dd24:	2b04      	cmp	r3, #4
 800dd26:	d008      	beq.n	800dd3a <HAL_TIM_Encoder_Start+0x26>
 800dd28:	e00f      	b.n	800dd4a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	2100      	movs	r1, #0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 fc6c 	bl	800e610 <TIM_CCxChannelCmd>
      break;
 800dd38:	e016      	b.n	800dd68 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	2104      	movs	r1, #4
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fc64 	bl	800e610 <TIM_CCxChannelCmd>
      break;
 800dd48:	e00e      	b.n	800dd68 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	2100      	movs	r1, #0
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 fc5c 	bl	800e610 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	2104      	movs	r1, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fc55 	bl	800e610 <TIM_CCxChannelCmd>
      break;
 800dd66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f042 0201 	orr.w	r2, r2, #1
 800dd76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	f003 0302 	and.w	r3, r3, #2
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d122      	bne.n	800ddde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d11b      	bne.n	800ddde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f06f 0202 	mvn.w	r2, #2
 800ddae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f9b5 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800ddca:	e005      	b.n	800ddd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9a7 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f9b8 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b04      	cmp	r3, #4
 800ddea:	d122      	bne.n	800de32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	f003 0304 	and.w	r3, r3, #4
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	d11b      	bne.n	800de32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f06f 0204 	mvn.w	r2, #4
 800de02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de14:	2b00      	cmp	r3, #0
 800de16:	d003      	beq.n	800de20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f98b 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800de1e:	e005      	b.n	800de2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 f97d 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f98e 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	f003 0308 	and.w	r3, r3, #8
 800de3c:	2b08      	cmp	r3, #8
 800de3e:	d122      	bne.n	800de86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f003 0308 	and.w	r3, r3, #8
 800de4a:	2b08      	cmp	r3, #8
 800de4c:	d11b      	bne.n	800de86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f06f 0208 	mvn.w	r2, #8
 800de56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2204      	movs	r2, #4
 800de5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	69db      	ldr	r3, [r3, #28]
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 f961 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800de72:	e005      	b.n	800de80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f953 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f964 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	f003 0310 	and.w	r3, r3, #16
 800de90:	2b10      	cmp	r3, #16
 800de92:	d122      	bne.n	800deda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	f003 0310 	and.w	r3, r3, #16
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d11b      	bne.n	800deda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f06f 0210 	mvn.w	r2, #16
 800deaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2208      	movs	r2, #8
 800deb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	69db      	ldr	r3, [r3, #28]
 800deb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800debc:	2b00      	cmp	r3, #0
 800debe:	d003      	beq.n	800dec8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f937 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800dec6:	e005      	b.n	800ded4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f929 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f93a 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d10e      	bne.n	800df06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b01      	cmp	r3, #1
 800def4:	d107      	bne.n	800df06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f06f 0201 	mvn.w	r2, #1
 800defe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7f7 fc17 	bl	8005734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df10:	2b80      	cmp	r3, #128	; 0x80
 800df12:	d10e      	bne.n	800df32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1e:	2b80      	cmp	r3, #128	; 0x80
 800df20:	d107      	bne.n	800df32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fc6d 	bl	800e80c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df3c:	2b40      	cmp	r3, #64	; 0x40
 800df3e:	d10e      	bne.n	800df5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4a:	2b40      	cmp	r3, #64	; 0x40
 800df4c:	d107      	bne.n	800df5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f8ff 	bl	800e15c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	f003 0320 	and.w	r3, r3, #32
 800df68:	2b20      	cmp	r3, #32
 800df6a:	d10e      	bne.n	800df8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b20      	cmp	r3, #32
 800df78:	d107      	bne.n	800df8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f06f 0220 	mvn.w	r2, #32
 800df82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fc37 	bl	800e7f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d101      	bne.n	800dfae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dfaa:	2302      	movs	r3, #2
 800dfac:	e0b4      	b.n	800e118 <HAL_TIM_PWM_ConfigChannel+0x184>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b0c      	cmp	r3, #12
 800dfc2:	f200 809f 	bhi.w	800e104 <HAL_TIM_PWM_ConfigChannel+0x170>
 800dfc6:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800e001 	.word	0x0800e001
 800dfd0:	0800e105 	.word	0x0800e105
 800dfd4:	0800e105 	.word	0x0800e105
 800dfd8:	0800e105 	.word	0x0800e105
 800dfdc:	0800e041 	.word	0x0800e041
 800dfe0:	0800e105 	.word	0x0800e105
 800dfe4:	0800e105 	.word	0x0800e105
 800dfe8:	0800e105 	.word	0x0800e105
 800dfec:	0800e083 	.word	0x0800e083
 800dff0:	0800e105 	.word	0x0800e105
 800dff4:	0800e105 	.word	0x0800e105
 800dff8:	0800e105 	.word	0x0800e105
 800dffc:	0800e0c3 	.word	0x0800e0c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 f952 	bl	800e2b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	699a      	ldr	r2, [r3, #24]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f042 0208 	orr.w	r2, r2, #8
 800e01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 0204 	bic.w	r2, r2, #4
 800e02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6999      	ldr	r1, [r3, #24]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	691a      	ldr	r2, [r3, #16]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	430a      	orrs	r2, r1
 800e03c:	619a      	str	r2, [r3, #24]
      break;
 800e03e:	e062      	b.n	800e106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f000 f9a2 	bl	800e390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699a      	ldr	r2, [r3, #24]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e05a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	699a      	ldr	r2, [r3, #24]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e06a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6999      	ldr	r1, [r3, #24]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	021a      	lsls	r2, r3, #8
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	619a      	str	r2, [r3, #24]
      break;
 800e080:	e041      	b.n	800e106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 f9f7 	bl	800e47c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69da      	ldr	r2, [r3, #28]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f042 0208 	orr.w	r2, r2, #8
 800e09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	69da      	ldr	r2, [r3, #28]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 0204 	bic.w	r2, r2, #4
 800e0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69d9      	ldr	r1, [r3, #28]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	61da      	str	r2, [r3, #28]
      break;
 800e0c0:	e021      	b.n	800e106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 fa4b 	bl	800e564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69da      	ldr	r2, [r3, #28]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	69da      	ldr	r2, [r3, #28]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	69d9      	ldr	r1, [r3, #28]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	021a      	lsls	r2, r3, #8
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	61da      	str	r2, [r3, #28]
      break;
 800e102:	e000      	b.n	800e106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e104:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a40      	ldr	r2, [pc, #256]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d013      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e18e:	d00f      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a3d      	ldr	r2, [pc, #244]	; (800e288 <TIM_Base_SetConfig+0x118>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00b      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a3c      	ldr	r2, [pc, #240]	; (800e28c <TIM_Base_SetConfig+0x11c>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d007      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a3b      	ldr	r2, [pc, #236]	; (800e290 <TIM_Base_SetConfig+0x120>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d003      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a3a      	ldr	r2, [pc, #232]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d108      	bne.n	800e1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a2f      	ldr	r2, [pc, #188]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d02b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1d0:	d027      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a2c      	ldr	r2, [pc, #176]	; (800e288 <TIM_Base_SetConfig+0x118>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d023      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a2b      	ldr	r2, [pc, #172]	; (800e28c <TIM_Base_SetConfig+0x11c>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d01f      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a2a      	ldr	r2, [pc, #168]	; (800e290 <TIM_Base_SetConfig+0x120>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d01b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a29      	ldr	r2, [pc, #164]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d017      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a28      	ldr	r2, [pc, #160]	; (800e298 <TIM_Base_SetConfig+0x128>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d013      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4a27      	ldr	r2, [pc, #156]	; (800e29c <TIM_Base_SetConfig+0x12c>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d00f      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a26      	ldr	r2, [pc, #152]	; (800e2a0 <TIM_Base_SetConfig+0x130>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d00b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4a25      	ldr	r2, [pc, #148]	; (800e2a4 <TIM_Base_SetConfig+0x134>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d007      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a24      	ldr	r2, [pc, #144]	; (800e2a8 <TIM_Base_SetConfig+0x138>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d003      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a23      	ldr	r2, [pc, #140]	; (800e2ac <TIM_Base_SetConfig+0x13c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d108      	bne.n	800e234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a0a      	ldr	r2, [pc, #40]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d003      	beq.n	800e268 <TIM_Base_SetConfig+0xf8>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a0c      	ldr	r2, [pc, #48]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d103      	bne.n	800e270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	691a      	ldr	r2, [r3, #16]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	615a      	str	r2, [r3, #20]
}
 800e276:	bf00      	nop
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	40010000 	.word	0x40010000
 800e288:	40000400 	.word	0x40000400
 800e28c:	40000800 	.word	0x40000800
 800e290:	40000c00 	.word	0x40000c00
 800e294:	40010400 	.word	0x40010400
 800e298:	40014000 	.word	0x40014000
 800e29c:	40014400 	.word	0x40014400
 800e2a0:	40014800 	.word	0x40014800
 800e2a4:	40001800 	.word	0x40001800
 800e2a8:	40001c00 	.word	0x40001c00
 800e2ac:	40002000 	.word	0x40002000

0800e2b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	f023 0201 	bic.w	r2, r3, #1
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f023 0302 	bic.w	r3, r3, #2
 800e2f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	4313      	orrs	r3, r2
 800e302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a20      	ldr	r2, [pc, #128]	; (800e388 <TIM_OC1_SetConfig+0xd8>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d003      	beq.n	800e314 <TIM_OC1_SetConfig+0x64>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a1f      	ldr	r2, [pc, #124]	; (800e38c <TIM_OC1_SetConfig+0xdc>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d10c      	bne.n	800e32e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f023 0308 	bic.w	r3, r3, #8
 800e31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	4313      	orrs	r3, r2
 800e324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f023 0304 	bic.w	r3, r3, #4
 800e32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a15      	ldr	r2, [pc, #84]	; (800e388 <TIM_OC1_SetConfig+0xd8>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d003      	beq.n	800e33e <TIM_OC1_SetConfig+0x8e>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a14      	ldr	r2, [pc, #80]	; (800e38c <TIM_OC1_SetConfig+0xdc>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d111      	bne.n	800e362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e34c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	4313      	orrs	r3, r2
 800e356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	4313      	orrs	r3, r2
 800e360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	621a      	str	r2, [r3, #32]
}
 800e37c:	bf00      	nop
 800e37e:	371c      	adds	r7, #28
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	40010000 	.word	0x40010000
 800e38c:	40010400 	.word	0x40010400

0800e390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a1b      	ldr	r3, [r3, #32]
 800e39e:	f023 0210 	bic.w	r2, r3, #16
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	021b      	lsls	r3, r3, #8
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	f023 0320 	bic.w	r3, r3, #32
 800e3da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a22      	ldr	r2, [pc, #136]	; (800e474 <TIM_OC2_SetConfig+0xe4>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d003      	beq.n	800e3f8 <TIM_OC2_SetConfig+0x68>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a21      	ldr	r2, [pc, #132]	; (800e478 <TIM_OC2_SetConfig+0xe8>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d10d      	bne.n	800e414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	011b      	lsls	r3, r3, #4
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	4313      	orrs	r3, r2
 800e40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4a17      	ldr	r2, [pc, #92]	; (800e474 <TIM_OC2_SetConfig+0xe4>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d003      	beq.n	800e424 <TIM_OC2_SetConfig+0x94>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a16      	ldr	r2, [pc, #88]	; (800e478 <TIM_OC2_SetConfig+0xe8>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d113      	bne.n	800e44c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e42a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	693a      	ldr	r2, [r7, #16]
 800e43c:	4313      	orrs	r3, r2
 800e43e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	4313      	orrs	r3, r2
 800e44a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	621a      	str	r2, [r3, #32]
}
 800e466:	bf00      	nop
 800e468:	371c      	adds	r7, #28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	40010000 	.word	0x40010000
 800e478:	40010400 	.word	0x40010400

0800e47c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a1b      	ldr	r3, [r3, #32]
 800e496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f023 0303 	bic.w	r3, r3, #3
 800e4b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	021b      	lsls	r3, r3, #8
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a21      	ldr	r2, [pc, #132]	; (800e55c <TIM_OC3_SetConfig+0xe0>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d003      	beq.n	800e4e2 <TIM_OC3_SetConfig+0x66>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a20      	ldr	r2, [pc, #128]	; (800e560 <TIM_OC3_SetConfig+0xe4>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d10d      	bne.n	800e4fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	021b      	lsls	r3, r3, #8
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a16      	ldr	r2, [pc, #88]	; (800e55c <TIM_OC3_SetConfig+0xe0>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d003      	beq.n	800e50e <TIM_OC3_SetConfig+0x92>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a15      	ldr	r2, [pc, #84]	; (800e560 <TIM_OC3_SetConfig+0xe4>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d113      	bne.n	800e536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e51c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	011b      	lsls	r3, r3, #4
 800e524:	693a      	ldr	r2, [r7, #16]
 800e526:	4313      	orrs	r3, r2
 800e528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	011b      	lsls	r3, r3, #4
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	4313      	orrs	r3, r2
 800e534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	685a      	ldr	r2, [r3, #4]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	621a      	str	r2, [r3, #32]
}
 800e550:	bf00      	nop
 800e552:	371c      	adds	r7, #28
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	40010000 	.word	0x40010000
 800e560:	40010400 	.word	0x40010400

0800e564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e564:	b480      	push	{r7}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	69db      	ldr	r3, [r3, #28]
 800e58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	021b      	lsls	r3, r3, #8
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	031b      	lsls	r3, r3, #12
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a12      	ldr	r2, [pc, #72]	; (800e608 <TIM_OC4_SetConfig+0xa4>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d003      	beq.n	800e5cc <TIM_OC4_SetConfig+0x68>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a11      	ldr	r2, [pc, #68]	; (800e60c <TIM_OC4_SetConfig+0xa8>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d109      	bne.n	800e5e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	019b      	lsls	r3, r3, #6
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	685a      	ldr	r2, [r3, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	621a      	str	r2, [r3, #32]
}
 800e5fa:	bf00      	nop
 800e5fc:	371c      	adds	r7, #28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	40010000 	.word	0x40010000
 800e60c:	40010400 	.word	0x40010400

0800e610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f003 031f 	and.w	r3, r3, #31
 800e622:	2201      	movs	r2, #1
 800e624:	fa02 f303 	lsl.w	r3, r2, r3
 800e628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6a1a      	ldr	r2, [r3, #32]
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	43db      	mvns	r3, r3
 800e632:	401a      	ands	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6a1a      	ldr	r2, [r3, #32]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	f003 031f 	and.w	r3, r3, #31
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	fa01 f303 	lsl.w	r3, r1, r3
 800e648:	431a      	orrs	r2, r3
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	621a      	str	r2, [r3, #32]
}
 800e64e:	bf00      	nop
 800e650:	371c      	adds	r7, #28
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr
	...

0800e65c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d101      	bne.n	800e674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e670:	2302      	movs	r3, #2
 800e672:	e05a      	b.n	800e72a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a21      	ldr	r2, [pc, #132]	; (800e738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d022      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6c0:	d01d      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a1d      	ldr	r2, [pc, #116]	; (800e73c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d018      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a1b      	ldr	r2, [pc, #108]	; (800e740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d013      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a1a      	ldr	r2, [pc, #104]	; (800e744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d00e      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a18      	ldr	r2, [pc, #96]	; (800e748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d009      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a17      	ldr	r2, [pc, #92]	; (800e74c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d004      	beq.n	800e6fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a15      	ldr	r2, [pc, #84]	; (800e750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d10c      	bne.n	800e718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	40010000 	.word	0x40010000
 800e73c:	40000400 	.word	0x40000400
 800e740:	40000800 	.word	0x40000800
 800e744:	40000c00 	.word	0x40000c00
 800e748:	40010400 	.word	0x40010400
 800e74c:	40014000 	.word	0x40014000
 800e750:	40001800 	.word	0x40001800

0800e754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d101      	bne.n	800e770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e76c:	2302      	movs	r3, #2
 800e76e:	e03d      	b.n	800e7ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	4313      	orrs	r3, r2
 800e784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	4313      	orrs	r3, r2
 800e792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	695b      	ldr	r3, [r3, #20]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	69db      	ldr	r3, [r3, #28]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d101      	bne.n	800e832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e82e:	2301      	movs	r3, #1
 800e830:	e03f      	b.n	800e8b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d106      	bne.n	800e84c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7f8 fbb4 	bl	8006fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2224      	movs	r2, #36	; 0x24
 800e850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68da      	ldr	r2, [r3, #12]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f829 	bl	800e8bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	691a      	ldr	r2, [r3, #16]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	695a      	ldr	r2, [r3, #20]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68da      	ldr	r2, [r3, #12]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2220      	movs	r2, #32
 800e8a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c0:	b085      	sub	sp, #20
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	430a      	orrs	r2, r1
 800e8da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	689a      	ldr	r2, [r3, #8]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	431a      	orrs	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	69db      	ldr	r3, [r3, #28]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e8fe:	f023 030c 	bic.w	r3, r3, #12
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	6812      	ldr	r2, [r2, #0]
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	430b      	orrs	r3, r1
 800e90a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	699a      	ldr	r2, [r3, #24]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	69db      	ldr	r3, [r3, #28]
 800e926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e92a:	f040 818b 	bne.w	800ec44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4ac1      	ldr	r2, [pc, #772]	; (800ec38 <UART_SetConfig+0x37c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d005      	beq.n	800e944 <UART_SetConfig+0x88>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4abf      	ldr	r2, [pc, #764]	; (800ec3c <UART_SetConfig+0x380>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	f040 80bd 	bne.w	800eabe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e944:	f7fc fbcc 	bl	800b0e0 <HAL_RCC_GetPCLK2Freq>
 800e948:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	461d      	mov	r5, r3
 800e94e:	f04f 0600 	mov.w	r6, #0
 800e952:	46a8      	mov	r8, r5
 800e954:	46b1      	mov	r9, r6
 800e956:	eb18 0308 	adds.w	r3, r8, r8
 800e95a:	eb49 0409 	adc.w	r4, r9, r9
 800e95e:	4698      	mov	r8, r3
 800e960:	46a1      	mov	r9, r4
 800e962:	eb18 0805 	adds.w	r8, r8, r5
 800e966:	eb49 0906 	adc.w	r9, r9, r6
 800e96a:	f04f 0100 	mov.w	r1, #0
 800e96e:	f04f 0200 	mov.w	r2, #0
 800e972:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e976:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e97a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e97e:	4688      	mov	r8, r1
 800e980:	4691      	mov	r9, r2
 800e982:	eb18 0005 	adds.w	r0, r8, r5
 800e986:	eb49 0106 	adc.w	r1, r9, r6
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	461d      	mov	r5, r3
 800e990:	f04f 0600 	mov.w	r6, #0
 800e994:	196b      	adds	r3, r5, r5
 800e996:	eb46 0406 	adc.w	r4, r6, r6
 800e99a:	461a      	mov	r2, r3
 800e99c:	4623      	mov	r3, r4
 800e99e:	f7f2 f98b 	bl	8000cb8 <__aeabi_uldivmod>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4ba5      	ldr	r3, [pc, #660]	; (800ec40 <UART_SetConfig+0x384>)
 800e9aa:	fba3 2302 	umull	r2, r3, r3, r2
 800e9ae:	095b      	lsrs	r3, r3, #5
 800e9b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	461d      	mov	r5, r3
 800e9b8:	f04f 0600 	mov.w	r6, #0
 800e9bc:	46a9      	mov	r9, r5
 800e9be:	46b2      	mov	sl, r6
 800e9c0:	eb19 0309 	adds.w	r3, r9, r9
 800e9c4:	eb4a 040a 	adc.w	r4, sl, sl
 800e9c8:	4699      	mov	r9, r3
 800e9ca:	46a2      	mov	sl, r4
 800e9cc:	eb19 0905 	adds.w	r9, r9, r5
 800e9d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800e9d4:	f04f 0100 	mov.w	r1, #0
 800e9d8:	f04f 0200 	mov.w	r2, #0
 800e9dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e9e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e9e8:	4689      	mov	r9, r1
 800e9ea:	4692      	mov	sl, r2
 800e9ec:	eb19 0005 	adds.w	r0, r9, r5
 800e9f0:	eb4a 0106 	adc.w	r1, sl, r6
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	461d      	mov	r5, r3
 800e9fa:	f04f 0600 	mov.w	r6, #0
 800e9fe:	196b      	adds	r3, r5, r5
 800ea00:	eb46 0406 	adc.w	r4, r6, r6
 800ea04:	461a      	mov	r2, r3
 800ea06:	4623      	mov	r3, r4
 800ea08:	f7f2 f956 	bl	8000cb8 <__aeabi_uldivmod>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	461a      	mov	r2, r3
 800ea12:	4b8b      	ldr	r3, [pc, #556]	; (800ec40 <UART_SetConfig+0x384>)
 800ea14:	fba3 1302 	umull	r1, r3, r3, r2
 800ea18:	095b      	lsrs	r3, r3, #5
 800ea1a:	2164      	movs	r1, #100	; 0x64
 800ea1c:	fb01 f303 	mul.w	r3, r1, r3
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	3332      	adds	r3, #50	; 0x32
 800ea26:	4a86      	ldr	r2, [pc, #536]	; (800ec40 <UART_SetConfig+0x384>)
 800ea28:	fba2 2303 	umull	r2, r3, r2, r3
 800ea2c:	095b      	lsrs	r3, r3, #5
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ea34:	4498      	add	r8, r3
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	461d      	mov	r5, r3
 800ea3a:	f04f 0600 	mov.w	r6, #0
 800ea3e:	46a9      	mov	r9, r5
 800ea40:	46b2      	mov	sl, r6
 800ea42:	eb19 0309 	adds.w	r3, r9, r9
 800ea46:	eb4a 040a 	adc.w	r4, sl, sl
 800ea4a:	4699      	mov	r9, r3
 800ea4c:	46a2      	mov	sl, r4
 800ea4e:	eb19 0905 	adds.w	r9, r9, r5
 800ea52:	eb4a 0a06 	adc.w	sl, sl, r6
 800ea56:	f04f 0100 	mov.w	r1, #0
 800ea5a:	f04f 0200 	mov.w	r2, #0
 800ea5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea6a:	4689      	mov	r9, r1
 800ea6c:	4692      	mov	sl, r2
 800ea6e:	eb19 0005 	adds.w	r0, r9, r5
 800ea72:	eb4a 0106 	adc.w	r1, sl, r6
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	461d      	mov	r5, r3
 800ea7c:	f04f 0600 	mov.w	r6, #0
 800ea80:	196b      	adds	r3, r5, r5
 800ea82:	eb46 0406 	adc.w	r4, r6, r6
 800ea86:	461a      	mov	r2, r3
 800ea88:	4623      	mov	r3, r4
 800ea8a:	f7f2 f915 	bl	8000cb8 <__aeabi_uldivmod>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	460c      	mov	r4, r1
 800ea92:	461a      	mov	r2, r3
 800ea94:	4b6a      	ldr	r3, [pc, #424]	; (800ec40 <UART_SetConfig+0x384>)
 800ea96:	fba3 1302 	umull	r1, r3, r3, r2
 800ea9a:	095b      	lsrs	r3, r3, #5
 800ea9c:	2164      	movs	r1, #100	; 0x64
 800ea9e:	fb01 f303 	mul.w	r3, r1, r3
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	3332      	adds	r3, #50	; 0x32
 800eaa8:	4a65      	ldr	r2, [pc, #404]	; (800ec40 <UART_SetConfig+0x384>)
 800eaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eaae:	095b      	lsrs	r3, r3, #5
 800eab0:	f003 0207 	and.w	r2, r3, #7
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4442      	add	r2, r8
 800eaba:	609a      	str	r2, [r3, #8]
 800eabc:	e26f      	b.n	800ef9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eabe:	f7fc fafb 	bl	800b0b8 <HAL_RCC_GetPCLK1Freq>
 800eac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	461d      	mov	r5, r3
 800eac8:	f04f 0600 	mov.w	r6, #0
 800eacc:	46a8      	mov	r8, r5
 800eace:	46b1      	mov	r9, r6
 800ead0:	eb18 0308 	adds.w	r3, r8, r8
 800ead4:	eb49 0409 	adc.w	r4, r9, r9
 800ead8:	4698      	mov	r8, r3
 800eada:	46a1      	mov	r9, r4
 800eadc:	eb18 0805 	adds.w	r8, r8, r5
 800eae0:	eb49 0906 	adc.w	r9, r9, r6
 800eae4:	f04f 0100 	mov.w	r1, #0
 800eae8:	f04f 0200 	mov.w	r2, #0
 800eaec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eaf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eaf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eaf8:	4688      	mov	r8, r1
 800eafa:	4691      	mov	r9, r2
 800eafc:	eb18 0005 	adds.w	r0, r8, r5
 800eb00:	eb49 0106 	adc.w	r1, r9, r6
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	461d      	mov	r5, r3
 800eb0a:	f04f 0600 	mov.w	r6, #0
 800eb0e:	196b      	adds	r3, r5, r5
 800eb10:	eb46 0406 	adc.w	r4, r6, r6
 800eb14:	461a      	mov	r2, r3
 800eb16:	4623      	mov	r3, r4
 800eb18:	f7f2 f8ce 	bl	8000cb8 <__aeabi_uldivmod>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	460c      	mov	r4, r1
 800eb20:	461a      	mov	r2, r3
 800eb22:	4b47      	ldr	r3, [pc, #284]	; (800ec40 <UART_SetConfig+0x384>)
 800eb24:	fba3 2302 	umull	r2, r3, r3, r2
 800eb28:	095b      	lsrs	r3, r3, #5
 800eb2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	461d      	mov	r5, r3
 800eb32:	f04f 0600 	mov.w	r6, #0
 800eb36:	46a9      	mov	r9, r5
 800eb38:	46b2      	mov	sl, r6
 800eb3a:	eb19 0309 	adds.w	r3, r9, r9
 800eb3e:	eb4a 040a 	adc.w	r4, sl, sl
 800eb42:	4699      	mov	r9, r3
 800eb44:	46a2      	mov	sl, r4
 800eb46:	eb19 0905 	adds.w	r9, r9, r5
 800eb4a:	eb4a 0a06 	adc.w	sl, sl, r6
 800eb4e:	f04f 0100 	mov.w	r1, #0
 800eb52:	f04f 0200 	mov.w	r2, #0
 800eb56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eb5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eb62:	4689      	mov	r9, r1
 800eb64:	4692      	mov	sl, r2
 800eb66:	eb19 0005 	adds.w	r0, r9, r5
 800eb6a:	eb4a 0106 	adc.w	r1, sl, r6
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	461d      	mov	r5, r3
 800eb74:	f04f 0600 	mov.w	r6, #0
 800eb78:	196b      	adds	r3, r5, r5
 800eb7a:	eb46 0406 	adc.w	r4, r6, r6
 800eb7e:	461a      	mov	r2, r3
 800eb80:	4623      	mov	r3, r4
 800eb82:	f7f2 f899 	bl	8000cb8 <__aeabi_uldivmod>
 800eb86:	4603      	mov	r3, r0
 800eb88:	460c      	mov	r4, r1
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	4b2c      	ldr	r3, [pc, #176]	; (800ec40 <UART_SetConfig+0x384>)
 800eb8e:	fba3 1302 	umull	r1, r3, r3, r2
 800eb92:	095b      	lsrs	r3, r3, #5
 800eb94:	2164      	movs	r1, #100	; 0x64
 800eb96:	fb01 f303 	mul.w	r3, r1, r3
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	3332      	adds	r3, #50	; 0x32
 800eba0:	4a27      	ldr	r2, [pc, #156]	; (800ec40 <UART_SetConfig+0x384>)
 800eba2:	fba2 2303 	umull	r2, r3, r2, r3
 800eba6:	095b      	lsrs	r3, r3, #5
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ebae:	4498      	add	r8, r3
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	461d      	mov	r5, r3
 800ebb4:	f04f 0600 	mov.w	r6, #0
 800ebb8:	46a9      	mov	r9, r5
 800ebba:	46b2      	mov	sl, r6
 800ebbc:	eb19 0309 	adds.w	r3, r9, r9
 800ebc0:	eb4a 040a 	adc.w	r4, sl, sl
 800ebc4:	4699      	mov	r9, r3
 800ebc6:	46a2      	mov	sl, r4
 800ebc8:	eb19 0905 	adds.w	r9, r9, r5
 800ebcc:	eb4a 0a06 	adc.w	sl, sl, r6
 800ebd0:	f04f 0100 	mov.w	r1, #0
 800ebd4:	f04f 0200 	mov.w	r2, #0
 800ebd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ebdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ebe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ebe4:	4689      	mov	r9, r1
 800ebe6:	4692      	mov	sl, r2
 800ebe8:	eb19 0005 	adds.w	r0, r9, r5
 800ebec:	eb4a 0106 	adc.w	r1, sl, r6
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	461d      	mov	r5, r3
 800ebf6:	f04f 0600 	mov.w	r6, #0
 800ebfa:	196b      	adds	r3, r5, r5
 800ebfc:	eb46 0406 	adc.w	r4, r6, r6
 800ec00:	461a      	mov	r2, r3
 800ec02:	4623      	mov	r3, r4
 800ec04:	f7f2 f858 	bl	8000cb8 <__aeabi_uldivmod>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <UART_SetConfig+0x384>)
 800ec10:	fba3 1302 	umull	r1, r3, r3, r2
 800ec14:	095b      	lsrs	r3, r3, #5
 800ec16:	2164      	movs	r1, #100	; 0x64
 800ec18:	fb01 f303 	mul.w	r3, r1, r3
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	00db      	lsls	r3, r3, #3
 800ec20:	3332      	adds	r3, #50	; 0x32
 800ec22:	4a07      	ldr	r2, [pc, #28]	; (800ec40 <UART_SetConfig+0x384>)
 800ec24:	fba2 2303 	umull	r2, r3, r2, r3
 800ec28:	095b      	lsrs	r3, r3, #5
 800ec2a:	f003 0207 	and.w	r2, r3, #7
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4442      	add	r2, r8
 800ec34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ec36:	e1b2      	b.n	800ef9e <UART_SetConfig+0x6e2>
 800ec38:	40011000 	.word	0x40011000
 800ec3c:	40011400 	.word	0x40011400
 800ec40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4ad7      	ldr	r2, [pc, #860]	; (800efa8 <UART_SetConfig+0x6ec>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d005      	beq.n	800ec5a <UART_SetConfig+0x39e>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4ad6      	ldr	r2, [pc, #856]	; (800efac <UART_SetConfig+0x6f0>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	f040 80d1 	bne.w	800edfc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ec5a:	f7fc fa41 	bl	800b0e0 <HAL_RCC_GetPCLK2Freq>
 800ec5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	469a      	mov	sl, r3
 800ec64:	f04f 0b00 	mov.w	fp, #0
 800ec68:	46d0      	mov	r8, sl
 800ec6a:	46d9      	mov	r9, fp
 800ec6c:	eb18 0308 	adds.w	r3, r8, r8
 800ec70:	eb49 0409 	adc.w	r4, r9, r9
 800ec74:	4698      	mov	r8, r3
 800ec76:	46a1      	mov	r9, r4
 800ec78:	eb18 080a 	adds.w	r8, r8, sl
 800ec7c:	eb49 090b 	adc.w	r9, r9, fp
 800ec80:	f04f 0100 	mov.w	r1, #0
 800ec84:	f04f 0200 	mov.w	r2, #0
 800ec88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ec8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ec90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ec94:	4688      	mov	r8, r1
 800ec96:	4691      	mov	r9, r2
 800ec98:	eb1a 0508 	adds.w	r5, sl, r8
 800ec9c:	eb4b 0609 	adc.w	r6, fp, r9
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4619      	mov	r1, r3
 800eca6:	f04f 0200 	mov.w	r2, #0
 800ecaa:	f04f 0300 	mov.w	r3, #0
 800ecae:	f04f 0400 	mov.w	r4, #0
 800ecb2:	0094      	lsls	r4, r2, #2
 800ecb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ecb8:	008b      	lsls	r3, r1, #2
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	f7f1 fff9 	bl	8000cb8 <__aeabi_uldivmod>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	461a      	mov	r2, r3
 800eccc:	4bb8      	ldr	r3, [pc, #736]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ecce:	fba3 2302 	umull	r2, r3, r3, r2
 800ecd2:	095b      	lsrs	r3, r3, #5
 800ecd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	469b      	mov	fp, r3
 800ecdc:	f04f 0c00 	mov.w	ip, #0
 800ece0:	46d9      	mov	r9, fp
 800ece2:	46e2      	mov	sl, ip
 800ece4:	eb19 0309 	adds.w	r3, r9, r9
 800ece8:	eb4a 040a 	adc.w	r4, sl, sl
 800ecec:	4699      	mov	r9, r3
 800ecee:	46a2      	mov	sl, r4
 800ecf0:	eb19 090b 	adds.w	r9, r9, fp
 800ecf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ecf8:	f04f 0100 	mov.w	r1, #0
 800ecfc:	f04f 0200 	mov.w	r2, #0
 800ed00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed0c:	4689      	mov	r9, r1
 800ed0e:	4692      	mov	sl, r2
 800ed10:	eb1b 0509 	adds.w	r5, fp, r9
 800ed14:	eb4c 060a 	adc.w	r6, ip, sl
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f04f 0200 	mov.w	r2, #0
 800ed22:	f04f 0300 	mov.w	r3, #0
 800ed26:	f04f 0400 	mov.w	r4, #0
 800ed2a:	0094      	lsls	r4, r2, #2
 800ed2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ed30:	008b      	lsls	r3, r1, #2
 800ed32:	461a      	mov	r2, r3
 800ed34:	4623      	mov	r3, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	4631      	mov	r1, r6
 800ed3a:	f7f1 ffbd 	bl	8000cb8 <__aeabi_uldivmod>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	460c      	mov	r4, r1
 800ed42:	461a      	mov	r2, r3
 800ed44:	4b9a      	ldr	r3, [pc, #616]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ed46:	fba3 1302 	umull	r1, r3, r3, r2
 800ed4a:	095b      	lsrs	r3, r3, #5
 800ed4c:	2164      	movs	r1, #100	; 0x64
 800ed4e:	fb01 f303 	mul.w	r3, r1, r3
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	011b      	lsls	r3, r3, #4
 800ed56:	3332      	adds	r3, #50	; 0x32
 800ed58:	4a95      	ldr	r2, [pc, #596]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ed5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed5e:	095b      	lsrs	r3, r3, #5
 800ed60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed64:	4498      	add	r8, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	469b      	mov	fp, r3
 800ed6a:	f04f 0c00 	mov.w	ip, #0
 800ed6e:	46d9      	mov	r9, fp
 800ed70:	46e2      	mov	sl, ip
 800ed72:	eb19 0309 	adds.w	r3, r9, r9
 800ed76:	eb4a 040a 	adc.w	r4, sl, sl
 800ed7a:	4699      	mov	r9, r3
 800ed7c:	46a2      	mov	sl, r4
 800ed7e:	eb19 090b 	adds.w	r9, r9, fp
 800ed82:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ed86:	f04f 0100 	mov.w	r1, #0
 800ed8a:	f04f 0200 	mov.w	r2, #0
 800ed8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed9a:	4689      	mov	r9, r1
 800ed9c:	4692      	mov	sl, r2
 800ed9e:	eb1b 0509 	adds.w	r5, fp, r9
 800eda2:	eb4c 060a 	adc.w	r6, ip, sl
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	4619      	mov	r1, r3
 800edac:	f04f 0200 	mov.w	r2, #0
 800edb0:	f04f 0300 	mov.w	r3, #0
 800edb4:	f04f 0400 	mov.w	r4, #0
 800edb8:	0094      	lsls	r4, r2, #2
 800edba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800edbe:	008b      	lsls	r3, r1, #2
 800edc0:	461a      	mov	r2, r3
 800edc2:	4623      	mov	r3, r4
 800edc4:	4628      	mov	r0, r5
 800edc6:	4631      	mov	r1, r6
 800edc8:	f7f1 ff76 	bl	8000cb8 <__aeabi_uldivmod>
 800edcc:	4603      	mov	r3, r0
 800edce:	460c      	mov	r4, r1
 800edd0:	461a      	mov	r2, r3
 800edd2:	4b77      	ldr	r3, [pc, #476]	; (800efb0 <UART_SetConfig+0x6f4>)
 800edd4:	fba3 1302 	umull	r1, r3, r3, r2
 800edd8:	095b      	lsrs	r3, r3, #5
 800edda:	2164      	movs	r1, #100	; 0x64
 800eddc:	fb01 f303 	mul.w	r3, r1, r3
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	011b      	lsls	r3, r3, #4
 800ede4:	3332      	adds	r3, #50	; 0x32
 800ede6:	4a72      	ldr	r2, [pc, #456]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ede8:	fba2 2303 	umull	r2, r3, r2, r3
 800edec:	095b      	lsrs	r3, r3, #5
 800edee:	f003 020f 	and.w	r2, r3, #15
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4442      	add	r2, r8
 800edf8:	609a      	str	r2, [r3, #8]
 800edfa:	e0d0      	b.n	800ef9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800edfc:	f7fc f95c 	bl	800b0b8 <HAL_RCC_GetPCLK1Freq>
 800ee00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	469a      	mov	sl, r3
 800ee06:	f04f 0b00 	mov.w	fp, #0
 800ee0a:	46d0      	mov	r8, sl
 800ee0c:	46d9      	mov	r9, fp
 800ee0e:	eb18 0308 	adds.w	r3, r8, r8
 800ee12:	eb49 0409 	adc.w	r4, r9, r9
 800ee16:	4698      	mov	r8, r3
 800ee18:	46a1      	mov	r9, r4
 800ee1a:	eb18 080a 	adds.w	r8, r8, sl
 800ee1e:	eb49 090b 	adc.w	r9, r9, fp
 800ee22:	f04f 0100 	mov.w	r1, #0
 800ee26:	f04f 0200 	mov.w	r2, #0
 800ee2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee36:	4688      	mov	r8, r1
 800ee38:	4691      	mov	r9, r2
 800ee3a:	eb1a 0508 	adds.w	r5, sl, r8
 800ee3e:	eb4b 0609 	adc.w	r6, fp, r9
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	4619      	mov	r1, r3
 800ee48:	f04f 0200 	mov.w	r2, #0
 800ee4c:	f04f 0300 	mov.w	r3, #0
 800ee50:	f04f 0400 	mov.w	r4, #0
 800ee54:	0094      	lsls	r4, r2, #2
 800ee56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ee5a:	008b      	lsls	r3, r1, #2
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4623      	mov	r3, r4
 800ee60:	4628      	mov	r0, r5
 800ee62:	4631      	mov	r1, r6
 800ee64:	f7f1 ff28 	bl	8000cb8 <__aeabi_uldivmod>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4b50      	ldr	r3, [pc, #320]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ee70:	fba3 2302 	umull	r2, r3, r3, r2
 800ee74:	095b      	lsrs	r3, r3, #5
 800ee76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	469b      	mov	fp, r3
 800ee7e:	f04f 0c00 	mov.w	ip, #0
 800ee82:	46d9      	mov	r9, fp
 800ee84:	46e2      	mov	sl, ip
 800ee86:	eb19 0309 	adds.w	r3, r9, r9
 800ee8a:	eb4a 040a 	adc.w	r4, sl, sl
 800ee8e:	4699      	mov	r9, r3
 800ee90:	46a2      	mov	sl, r4
 800ee92:	eb19 090b 	adds.w	r9, r9, fp
 800ee96:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ee9a:	f04f 0100 	mov.w	r1, #0
 800ee9e:	f04f 0200 	mov.w	r2, #0
 800eea2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eea6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eeaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eeae:	4689      	mov	r9, r1
 800eeb0:	4692      	mov	sl, r2
 800eeb2:	eb1b 0509 	adds.w	r5, fp, r9
 800eeb6:	eb4c 060a 	adc.w	r6, ip, sl
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	4619      	mov	r1, r3
 800eec0:	f04f 0200 	mov.w	r2, #0
 800eec4:	f04f 0300 	mov.w	r3, #0
 800eec8:	f04f 0400 	mov.w	r4, #0
 800eecc:	0094      	lsls	r4, r2, #2
 800eece:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eed2:	008b      	lsls	r3, r1, #2
 800eed4:	461a      	mov	r2, r3
 800eed6:	4623      	mov	r3, r4
 800eed8:	4628      	mov	r0, r5
 800eeda:	4631      	mov	r1, r6
 800eedc:	f7f1 feec 	bl	8000cb8 <__aeabi_uldivmod>
 800eee0:	4603      	mov	r3, r0
 800eee2:	460c      	mov	r4, r1
 800eee4:	461a      	mov	r2, r3
 800eee6:	4b32      	ldr	r3, [pc, #200]	; (800efb0 <UART_SetConfig+0x6f4>)
 800eee8:	fba3 1302 	umull	r1, r3, r3, r2
 800eeec:	095b      	lsrs	r3, r3, #5
 800eeee:	2164      	movs	r1, #100	; 0x64
 800eef0:	fb01 f303 	mul.w	r3, r1, r3
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	3332      	adds	r3, #50	; 0x32
 800eefa:	4a2d      	ldr	r2, [pc, #180]	; (800efb0 <UART_SetConfig+0x6f4>)
 800eefc:	fba2 2303 	umull	r2, r3, r2, r3
 800ef00:	095b      	lsrs	r3, r3, #5
 800ef02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef06:	4498      	add	r8, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	469b      	mov	fp, r3
 800ef0c:	f04f 0c00 	mov.w	ip, #0
 800ef10:	46d9      	mov	r9, fp
 800ef12:	46e2      	mov	sl, ip
 800ef14:	eb19 0309 	adds.w	r3, r9, r9
 800ef18:	eb4a 040a 	adc.w	r4, sl, sl
 800ef1c:	4699      	mov	r9, r3
 800ef1e:	46a2      	mov	sl, r4
 800ef20:	eb19 090b 	adds.w	r9, r9, fp
 800ef24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ef28:	f04f 0100 	mov.w	r1, #0
 800ef2c:	f04f 0200 	mov.w	r2, #0
 800ef30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef3c:	4689      	mov	r9, r1
 800ef3e:	4692      	mov	sl, r2
 800ef40:	eb1b 0509 	adds.w	r5, fp, r9
 800ef44:	eb4c 060a 	adc.w	r6, ip, sl
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	f04f 0200 	mov.w	r2, #0
 800ef52:	f04f 0300 	mov.w	r3, #0
 800ef56:	f04f 0400 	mov.w	r4, #0
 800ef5a:	0094      	lsls	r4, r2, #2
 800ef5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ef60:	008b      	lsls	r3, r1, #2
 800ef62:	461a      	mov	r2, r3
 800ef64:	4623      	mov	r3, r4
 800ef66:	4628      	mov	r0, r5
 800ef68:	4631      	mov	r1, r6
 800ef6a:	f7f1 fea5 	bl	8000cb8 <__aeabi_uldivmod>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	460c      	mov	r4, r1
 800ef72:	461a      	mov	r2, r3
 800ef74:	4b0e      	ldr	r3, [pc, #56]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ef76:	fba3 1302 	umull	r1, r3, r3, r2
 800ef7a:	095b      	lsrs	r3, r3, #5
 800ef7c:	2164      	movs	r1, #100	; 0x64
 800ef7e:	fb01 f303 	mul.w	r3, r1, r3
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	011b      	lsls	r3, r3, #4
 800ef86:	3332      	adds	r3, #50	; 0x32
 800ef88:	4a09      	ldr	r2, [pc, #36]	; (800efb0 <UART_SetConfig+0x6f4>)
 800ef8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef8e:	095b      	lsrs	r3, r3, #5
 800ef90:	f003 020f 	and.w	r2, r3, #15
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4442      	add	r2, r8
 800ef9a:	609a      	str	r2, [r3, #8]
}
 800ef9c:	e7ff      	b.n	800ef9e <UART_SetConfig+0x6e2>
 800ef9e:	bf00      	nop
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	40011000 	.word	0x40011000
 800efac:	40011400 	.word	0x40011400
 800efb0:	51eb851f 	.word	0x51eb851f

0800efb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800efb4:	b084      	sub	sp, #16
 800efb6:	b480      	push	{r7}
 800efb8:	b085      	sub	sp, #20
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	f107 001c 	add.w	r0, r7, #28
 800efc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800efc6:	2300      	movs	r3, #0
 800efc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800efca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800efcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800efce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800efd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800efd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800efda:	431a      	orrs	r2, r3
             Init.ClockDiv
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800efde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800efee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	431a      	orrs	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	b004      	add	sp, #16
 800f008:	4770      	bx	lr

0800f00a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f018:	4618      	mov	r0, r3
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2203      	movs	r2, #3
 800f052:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f054:	2002      	movs	r0, #2
 800f056:	f7f9 fbdd 	bl	8008814 <HAL_Delay>
  
  return HAL_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f003 0303 	and.w	r3, r3, #3
}
 800f074:	4618      	mov	r0, r3
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f09e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f0a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f0aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f0ba:	f023 030f 	bic.w	r3, r3, #15
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	431a      	orrs	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	b2db      	uxtb	r3, r3
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f0ee:	b480      	push	{r7}
 800f0f0:	b085      	sub	sp, #20
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3314      	adds	r3, #20
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	4413      	add	r3, r2
 800f102:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
}  
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f13a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f140:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f146:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f152:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	431a      	orrs	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f15e:	2300      	movs	r3, #0

}
 800f160:	4618      	mov	r0, r3
 800f162:	3714      	adds	r7, #20
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b088      	sub	sp, #32
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f17a:	2310      	movs	r3, #16
 800f17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f17e:	2340      	movs	r3, #64	; 0x40
 800f180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f182:	2300      	movs	r3, #0
 800f184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f18a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f18c:	f107 0308 	add.w	r3, r7, #8
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff ff74 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f198:	f241 3288 	movw	r2, #5000	; 0x1388
 800f19c:	2110      	movs	r1, #16
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa40 	bl	800f624 <SDMMC_GetCmdResp1>
 800f1a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1a6:	69fb      	ldr	r3, [r7, #28]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3720      	adds	r7, #32
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f1be:	2311      	movs	r3, #17
 800f1c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f1c2:	2340      	movs	r3, #64	; 0x40
 800f1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f1d0:	f107 0308 	add.w	r3, r7, #8
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff ff52 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1e0:	2111      	movs	r1, #17
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fa1e 	bl	800f624 <SDMMC_GetCmdResp1>
 800f1e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1ea:	69fb      	ldr	r3, [r7, #28]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3720      	adds	r7, #32
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b088      	sub	sp, #32
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f202:	2312      	movs	r3, #18
 800f204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f206:	2340      	movs	r3, #64	; 0x40
 800f208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f20a:	2300      	movs	r3, #0
 800f20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f20e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f214:	f107 0308 	add.w	r3, r7, #8
 800f218:	4619      	mov	r1, r3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff ff30 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f220:	f241 3288 	movw	r2, #5000	; 0x1388
 800f224:	2112      	movs	r1, #18
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f9fc 	bl	800f624 <SDMMC_GetCmdResp1>
 800f22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f22e:	69fb      	ldr	r3, [r7, #28]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3720      	adds	r7, #32
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f246:	2318      	movs	r3, #24
 800f248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f24a:	2340      	movs	r3, #64	; 0x40
 800f24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f24e:	2300      	movs	r3, #0
 800f250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f258:	f107 0308 	add.w	r3, r7, #8
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7ff ff0e 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f264:	f241 3288 	movw	r2, #5000	; 0x1388
 800f268:	2118      	movs	r1, #24
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 f9da 	bl	800f624 <SDMMC_GetCmdResp1>
 800f270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f272:	69fb      	ldr	r3, [r7, #28]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3720      	adds	r7, #32
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f28a:	2319      	movs	r3, #25
 800f28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f28e:	2340      	movs	r3, #64	; 0x40
 800f290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f292:	2300      	movs	r3, #0
 800f294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f29a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f29c:	f107 0308 	add.w	r3, r7, #8
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff feec 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f2a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2ac:	2119      	movs	r1, #25
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f9b8 	bl	800f624 <SDMMC_GetCmdResp1>
 800f2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2b6:	69fb      	ldr	r3, [r7, #28]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3720      	adds	r7, #32
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f2cc:	230c      	movs	r3, #12
 800f2ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f2d0:	2340      	movs	r3, #64	; 0x40
 800f2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f2de:	f107 0308 	add.w	r3, r7, #8
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff fecb 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f2ea:	4a05      	ldr	r2, [pc, #20]	; (800f300 <SDMMC_CmdStopTransfer+0x40>)
 800f2ec:	210c      	movs	r1, #12
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f998 	bl	800f624 <SDMMC_GetCmdResp1>
 800f2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3720      	adds	r7, #32
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	05f5e100 	.word	0x05f5e100

0800f304 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b08a      	sub	sp, #40	; 0x28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f314:	2307      	movs	r3, #7
 800f316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f318:	2340      	movs	r3, #64	; 0x40
 800f31a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f31c:	2300      	movs	r3, #0
 800f31e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f324:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f326:	f107 0310 	add.w	r3, r7, #16
 800f32a:	4619      	mov	r1, r3
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fea7 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f332:	f241 3288 	movw	r2, #5000	; 0x1388
 800f336:	2107      	movs	r1, #7
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f973 	bl	800f624 <SDMMC_GetCmdResp1>
 800f33e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f342:	4618      	mov	r0, r3
 800f344:	3728      	adds	r7, #40	; 0x28
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b088      	sub	sp, #32
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f352:	2300      	movs	r3, #0
 800f354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f356:	2300      	movs	r3, #0
 800f358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f35a:	2300      	movs	r3, #0
 800f35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f368:	f107 0308 	add.w	r3, r7, #8
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fe86 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f92d 	bl	800f5d4 <SDMMC_GetCmdError>
 800f37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f37c:	69fb      	ldr	r3, [r7, #28]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b088      	sub	sp, #32
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f38e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f394:	2308      	movs	r3, #8
 800f396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f398:	2340      	movs	r3, #64	; 0x40
 800f39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3a6:	f107 0308 	add.w	r3, r7, #8
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7ff fe67 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 fb16 	bl	800f9e4 <SDMMC_GetCmdResp7>
 800f3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3720      	adds	r7, #32
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f3d2:	2337      	movs	r3, #55	; 0x37
 800f3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f3d6:	2340      	movs	r3, #64	; 0x40
 800f3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3e4:	f107 0308 	add.w	r3, r7, #8
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fe48 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3f4:	2137      	movs	r1, #55	; 0x37
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f914 	bl	800f624 <SDMMC_GetCmdResp1>
 800f3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3fe:	69fb      	ldr	r3, [r7, #28]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3720      	adds	r7, #32
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f41e:	2329      	movs	r3, #41	; 0x29
 800f420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f422:	2340      	movs	r3, #64	; 0x40
 800f424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fe22 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fa23 	bl	800f888 <SDMMC_GetCmdResp3>
 800f442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f444:	69fb      	ldr	r3, [r7, #28]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3720      	adds	r7, #32
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b088      	sub	sp, #32
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f45c:	2306      	movs	r3, #6
 800f45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f460:	2340      	movs	r3, #64	; 0x40
 800f462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f464:	2300      	movs	r3, #0
 800f466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f46c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f46e:	f107 0308 	add.w	r3, r7, #8
 800f472:	4619      	mov	r1, r3
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff fe03 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f47a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f47e:	2106      	movs	r1, #6
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 f8cf 	bl	800f624 <SDMMC_GetCmdResp1>
 800f486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f488:	69fb      	ldr	r3, [r7, #28]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3720      	adds	r7, #32
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b088      	sub	sp, #32
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f49a:	2300      	movs	r3, #0
 800f49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f49e:	2333      	movs	r3, #51	; 0x33
 800f4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4a2:	2340      	movs	r3, #64	; 0x40
 800f4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4b0:	f107 0308 	add.w	r3, r7, #8
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff fde2 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4c0:	2133      	movs	r1, #51	; 0x33
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 f8ae 	bl	800f624 <SDMMC_GetCmdResp1>
 800f4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3720      	adds	r7, #32
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b088      	sub	sp, #32
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f4e4:	23c0      	movs	r3, #192	; 0xc0
 800f4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4f2:	f107 0308 	add.w	r3, r7, #8
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fdc1 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f97c 	bl	800f7fc <SDMMC_GetCmdResp2>
 800f504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f506:	69fb      	ldr	r3, [r7, #28]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3720      	adds	r7, #32
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b088      	sub	sp, #32
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f51e:	2309      	movs	r3, #9
 800f520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f522:	23c0      	movs	r3, #192	; 0xc0
 800f524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f526:	2300      	movs	r3, #0
 800f528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f52e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f530:	f107 0308 	add.w	r3, r7, #8
 800f534:	4619      	mov	r1, r3
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fda2 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f95d 	bl	800f7fc <SDMMC_GetCmdResp2>
 800f542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f544:	69fb      	ldr	r3, [r7, #28]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3720      	adds	r7, #32
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b088      	sub	sp, #32
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f558:	2300      	movs	r3, #0
 800f55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f55c:	2303      	movs	r3, #3
 800f55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f560:	2340      	movs	r3, #64	; 0x40
 800f562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f564:	2300      	movs	r3, #0
 800f566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f56c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f56e:	f107 0308 	add.w	r3, r7, #8
 800f572:	4619      	mov	r1, r3
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7ff fd83 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	2103      	movs	r1, #3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 f9bc 	bl	800f8fc <SDMMC_GetCmdResp6>
 800f584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f586:	69fb      	ldr	r3, [r7, #28]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3720      	adds	r7, #32
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f59e:	230d      	movs	r3, #13
 800f5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f5a2:	2340      	movs	r3, #64	; 0x40
 800f5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5b0:	f107 0308 	add.w	r3, r7, #8
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7ff fd62 	bl	800f080 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5c0:	210d      	movs	r1, #13
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 f82e 	bl	800f624 <SDMMC_GetCmdResp1>
 800f5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3720      	adds	r7, #32
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f5d4:	b490      	push	{r4, r7}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f5dc:	4b0f      	ldr	r3, [pc, #60]	; (800f61c <SDMMC_GetCmdError+0x48>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a0f      	ldr	r2, [pc, #60]	; (800f620 <SDMMC_GetCmdError+0x4c>)
 800f5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5e6:	0a5b      	lsrs	r3, r3, #9
 800f5e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f5f0:	4623      	mov	r3, r4
 800f5f2:	1e5c      	subs	r4, r3, #1
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d102      	bne.n	800f5fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5fc:	e009      	b.n	800f612 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0f2      	beq.n	800f5f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	22c5      	movs	r2, #197	; 0xc5
 800f60e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bc90      	pop	{r4, r7}
 800f61a:	4770      	bx	lr
 800f61c:	20000000 	.word	0x20000000
 800f620:	10624dd3 	.word	0x10624dd3

0800f624 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	460b      	mov	r3, r1
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f632:	4b6f      	ldr	r3, [pc, #444]	; (800f7f0 <SDMMC_GetCmdResp1+0x1cc>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a6f      	ldr	r2, [pc, #444]	; (800f7f4 <SDMMC_GetCmdResp1+0x1d0>)
 800f638:	fba2 2303 	umull	r2, r3, r2, r3
 800f63c:	0a5b      	lsrs	r3, r3, #9
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f644:	4623      	mov	r3, r4
 800f646:	1e5c      	subs	r4, r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d102      	bne.n	800f652 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f64c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f650:	e0c9      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f656:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d0f0      	beq.n	800f644 <SDMMC_GetCmdResp1+0x20>
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1eb      	bne.n	800f644 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f670:	f003 0304 	and.w	r3, r3, #4
 800f674:	2b00      	cmp	r3, #0
 800f676:	d004      	beq.n	800f682 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2204      	movs	r2, #4
 800f67c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f67e:	2304      	movs	r3, #4
 800f680:	e0b1      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d004      	beq.n	800f698 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2201      	movs	r2, #1
 800f692:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f694:	2301      	movs	r3, #1
 800f696:	e0a6      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	22c5      	movs	r2, #197	; 0xc5
 800f69c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f7ff fd18 	bl	800f0d4 <SDIO_GetCommandResponse>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	7afb      	ldrb	r3, [r7, #11]
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d001      	beq.n	800f6b2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e099      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff fd1a 	bl	800f0ee <SDIO_GetResponse>
 800f6ba:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	4b4e      	ldr	r3, [pc, #312]	; (800f7f8 <SDMMC_GetCmdResp1+0x1d4>)
 800f6c0:	4013      	ands	r3, r2
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d101      	bne.n	800f6ca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e08d      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	da02      	bge.n	800f6d6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f6d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6d4:	e087      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f6e0:	2340      	movs	r3, #64	; 0x40
 800f6e2:	e080      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d001      	beq.n	800f6f2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f6ee:	2380      	movs	r3, #128	; 0x80
 800f6f0:	e079      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f6fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f700:	e071      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f70c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f710:	e069      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f71c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f720:	e061      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f72c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f730:	e059      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d002      	beq.n	800f742 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f73c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f740:	e051      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d002      	beq.n	800f752 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f74c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f750:	e049      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f75c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f760:	e041      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f76c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f770:	e039      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f77c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f780:	e031      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f78c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f790:	e029      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d002      	beq.n	800f7a2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f79c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f7a0:	e021      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f7ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f7b0:	e019      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d002      	beq.n	800f7c2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f7bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f7c0:	e011      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f7cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f7d0:	e009      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	f003 0308 	and.w	r3, r3, #8
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f7dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f7e0:	e001      	b.n	800f7e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f7e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	371c      	adds	r7, #28
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd90      	pop	{r4, r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	20000000 	.word	0x20000000
 800f7f4:	10624dd3 	.word	0x10624dd3
 800f7f8:	fdffe008 	.word	0xfdffe008

0800f7fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f7fc:	b490      	push	{r4, r7}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f804:	4b1e      	ldr	r3, [pc, #120]	; (800f880 <SDMMC_GetCmdResp2+0x84>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a1e      	ldr	r2, [pc, #120]	; (800f884 <SDMMC_GetCmdResp2+0x88>)
 800f80a:	fba2 2303 	umull	r2, r3, r2, r3
 800f80e:	0a5b      	lsrs	r3, r3, #9
 800f810:	f241 3288 	movw	r2, #5000	; 0x1388
 800f814:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f818:	4623      	mov	r3, r4
 800f81a:	1e5c      	subs	r4, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f824:	e026      	b.n	800f874 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f82a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f832:	2b00      	cmp	r3, #0
 800f834:	d0f0      	beq.n	800f818 <SDMMC_GetCmdResp2+0x1c>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1eb      	bne.n	800f818 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f844:	f003 0304 	and.w	r3, r3, #4
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d004      	beq.n	800f856 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2204      	movs	r2, #4
 800f850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f852:	2304      	movs	r3, #4
 800f854:	e00e      	b.n	800f874 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f85a:	f003 0301 	and.w	r3, r3, #1
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d004      	beq.n	800f86c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2201      	movs	r2, #1
 800f866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f868:	2301      	movs	r3, #1
 800f86a:	e003      	b.n	800f874 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	22c5      	movs	r2, #197	; 0xc5
 800f870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bc90      	pop	{r4, r7}
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	20000000 	.word	0x20000000
 800f884:	10624dd3 	.word	0x10624dd3

0800f888 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f888:	b490      	push	{r4, r7}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f890:	4b18      	ldr	r3, [pc, #96]	; (800f8f4 <SDMMC_GetCmdResp3+0x6c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a18      	ldr	r2, [pc, #96]	; (800f8f8 <SDMMC_GetCmdResp3+0x70>)
 800f896:	fba2 2303 	umull	r2, r3, r2, r3
 800f89a:	0a5b      	lsrs	r3, r3, #9
 800f89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f8a4:	4623      	mov	r3, r4
 800f8a6:	1e5c      	subs	r4, r3, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d102      	bne.n	800f8b2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8b0:	e01b      	b.n	800f8ea <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0f0      	beq.n	800f8a4 <SDMMC_GetCmdResp3+0x1c>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1eb      	bne.n	800f8a4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8d0:	f003 0304 	and.w	r3, r3, #4
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d004      	beq.n	800f8e2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2204      	movs	r2, #4
 800f8dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8de:	2304      	movs	r3, #4
 800f8e0:	e003      	b.n	800f8ea <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	22c5      	movs	r2, #197	; 0xc5
 800f8e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bc90      	pop	{r4, r7}
 800f8f2:	4770      	bx	lr
 800f8f4:	20000000 	.word	0x20000000
 800f8f8:	10624dd3 	.word	0x10624dd3

0800f8fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f8fc:	b590      	push	{r4, r7, lr}
 800f8fe:	b087      	sub	sp, #28
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	460b      	mov	r3, r1
 800f906:	607a      	str	r2, [r7, #4]
 800f908:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f90a:	4b34      	ldr	r3, [pc, #208]	; (800f9dc <SDMMC_GetCmdResp6+0xe0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a34      	ldr	r2, [pc, #208]	; (800f9e0 <SDMMC_GetCmdResp6+0xe4>)
 800f910:	fba2 2303 	umull	r2, r3, r2, r3
 800f914:	0a5b      	lsrs	r3, r3, #9
 800f916:	f241 3288 	movw	r2, #5000	; 0x1388
 800f91a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f91e:	4623      	mov	r3, r4
 800f920:	1e5c      	subs	r4, r3, #1
 800f922:	2b00      	cmp	r3, #0
 800f924:	d102      	bne.n	800f92c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f92a:	e052      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f930:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d0f0      	beq.n	800f91e <SDMMC_GetCmdResp6+0x22>
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1eb      	bne.n	800f91e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f94a:	f003 0304 	and.w	r3, r3, #4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d004      	beq.n	800f95c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2204      	movs	r2, #4
 800f956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f958:	2304      	movs	r3, #4
 800f95a:	e03a      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f960:	f003 0301 	and.w	r3, r3, #1
 800f964:	2b00      	cmp	r3, #0
 800f966:	d004      	beq.n	800f972 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2201      	movs	r2, #1
 800f96c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f96e:	2301      	movs	r3, #1
 800f970:	e02f      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7ff fbae 	bl	800f0d4 <SDIO_GetCommandResponse>
 800f978:	4603      	mov	r3, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	7afb      	ldrb	r3, [r7, #11]
 800f97e:	4293      	cmp	r3, r2
 800f980:	d001      	beq.n	800f986 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f982:	2301      	movs	r3, #1
 800f984:	e025      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	22c5      	movs	r2, #197	; 0xc5
 800f98a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f98c:	2100      	movs	r1, #0
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7ff fbad 	bl	800f0ee <SDIO_GetResponse>
 800f994:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d106      	bne.n	800f9ae <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	0c1b      	lsrs	r3, r3, #16
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	e011      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f9b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9bc:	e009      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9cc:	e001      	b.n	800f9d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f9ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	371c      	adds	r7, #28
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd90      	pop	{r4, r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20000000 	.word	0x20000000
 800f9e0:	10624dd3 	.word	0x10624dd3

0800f9e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f9e4:	b490      	push	{r4, r7}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9ec:	4b21      	ldr	r3, [pc, #132]	; (800fa74 <SDMMC_GetCmdResp7+0x90>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a21      	ldr	r2, [pc, #132]	; (800fa78 <SDMMC_GetCmdResp7+0x94>)
 800f9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f6:	0a5b      	lsrs	r3, r3, #9
 800f9f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fa00:	4623      	mov	r3, r4
 800fa02:	1e5c      	subs	r4, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d102      	bne.n	800fa0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa0c:	e02c      	b.n	800fa68 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d0f0      	beq.n	800fa00 <SDMMC_GetCmdResp7+0x1c>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1eb      	bne.n	800fa00 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa2c:	f003 0304 	and.w	r3, r3, #4
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d004      	beq.n	800fa3e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2204      	movs	r2, #4
 800fa38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa3a:	2304      	movs	r3, #4
 800fa3c:	e014      	b.n	800fa68 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d004      	beq.n	800fa54 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e009      	b.n	800fa68 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d002      	beq.n	800fa66 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2240      	movs	r2, #64	; 0x40
 800fa64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fa66:	2300      	movs	r3, #0
  
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bc90      	pop	{r4, r7}
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	20000000 	.word	0x20000000
 800fa78:	10624dd3 	.word	0x10624dd3

0800fa7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa80:	4904      	ldr	r1, [pc, #16]	; (800fa94 <MX_FATFS_Init+0x18>)
 800fa82:	4805      	ldr	r0, [pc, #20]	; (800fa98 <MX_FATFS_Init+0x1c>)
 800fa84:	f003 fb9c 	bl	80131c0 <FATFS_LinkDriver>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	4b03      	ldr	r3, [pc, #12]	; (800fa9c <MX_FATFS_Init+0x20>)
 800fa8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa90:	bf00      	nop
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	2003ede0 	.word	0x2003ede0
 800fa98:	08018c38 	.word	0x08018c38
 800fa9c:	2003eddc 	.word	0x2003eddc

0800faa0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800faaa:	f000 f896 	bl	800fbda <BSP_SD_IsDetected>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d001      	beq.n	800fab8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e012      	b.n	800fade <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800fab8:	480b      	ldr	r0, [pc, #44]	; (800fae8 <BSP_SD_Init+0x48>)
 800faba:	f7fb ffa5 	bl	800ba08 <HAL_SD_Init>
 800fabe:	4603      	mov	r3, r0
 800fac0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fac2:	79fb      	ldrb	r3, [r7, #7]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d109      	bne.n	800fadc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800fac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800facc:	4806      	ldr	r0, [pc, #24]	; (800fae8 <BSP_SD_Init+0x48>)
 800face:	f7fc fd4f 	bl	800c570 <HAL_SD_ConfigWideBusOperation>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d001      	beq.n	800fadc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fad8:	2301      	movs	r3, #1
 800fada:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fadc:	79fb      	ldrb	r3, [r7, #7]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	2003ebd8 	.word	0x2003ebd8

0800faec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	68f9      	ldr	r1, [r7, #12]
 800fb02:	4806      	ldr	r0, [pc, #24]	; (800fb1c <BSP_SD_ReadBlocks_DMA+0x30>)
 800fb04:	f7fc f810 	bl	800bb28 <HAL_SD_ReadBlocks_DMA>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	2003ebd8 	.word	0x2003ebd8

0800fb20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	68f9      	ldr	r1, [r7, #12]
 800fb36:	4806      	ldr	r0, [pc, #24]	; (800fb50 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fb38:	f7fc f8de 	bl	800bcf8 <HAL_SD_WriteBlocks_DMA>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb42:	2301      	movs	r3, #1
 800fb44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	2003ebd8 	.word	0x2003ebd8

0800fb54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb58:	4805      	ldr	r0, [pc, #20]	; (800fb70 <BSP_SD_GetCardState+0x1c>)
 800fb5a:	f7fc fd85 	bl	800c668 <HAL_SD_GetCardState>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b04      	cmp	r3, #4
 800fb62:	bf14      	ite	ne
 800fb64:	2301      	movne	r3, #1
 800fb66:	2300      	moveq	r3, #0
 800fb68:	b2db      	uxtb	r3, r3
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	2003ebd8 	.word	0x2003ebd8

0800fb74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	4803      	ldr	r0, [pc, #12]	; (800fb8c <BSP_SD_GetCardInfo+0x18>)
 800fb80:	f7fc fcca 	bl	800c518 <HAL_SD_GetCardInfo>
}
 800fb84:	bf00      	nop
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	2003ebd8 	.word	0x2003ebd8

0800fb90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fb98:	f000 f818 	bl	800fbcc <BSP_SD_AbortCallback>
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fbac:	f000 f9a8 	bl	800ff00 <BSP_SD_WriteCpltCallback>
}
 800fbb0:	bf00      	nop
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fbc0:	f000 f9aa 	bl	800ff18 <BSP_SD_ReadCpltCallback>
}
 800fbc4:	bf00      	nop
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	af00      	add	r7, sp, #0

}
 800fbd0:	bf00      	nop
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fbe4:	f000 f80c 	bl	800fc00 <BSP_PlatformIsDetected>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	b2db      	uxtb	r3, r3
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fc06:	2301      	movs	r3, #1
 800fc08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fc0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc0e:	4806      	ldr	r0, [pc, #24]	; (800fc28 <BSP_PlatformIsDetected+0x28>)
 800fc10:	f7fa f87e 	bl	8009d10 <HAL_GPIO_ReadPin>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	40020000 	.word	0x40020000

0800fc2c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fc34:	f7f8 fde2 	bl	80087fc <HAL_GetTick>
 800fc38:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fc3a:	e006      	b.n	800fc4a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc3c:	f7ff ff8a 	bl	800fb54 <BSP_SD_GetCardState>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d101      	bne.n	800fc4a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	e009      	b.n	800fc5e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fc4a:	f7f8 fdd7 	bl	80087fc <HAL_GetTick>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d8f0      	bhi.n	800fc3c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fc5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
	...

0800fc68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc72:	4b0b      	ldr	r3, [pc, #44]	; (800fca0 <SD_CheckStatus+0x38>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc78:	f7ff ff6c 	bl	800fb54 <BSP_SD_GetCardState>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d107      	bne.n	800fc92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc82:	4b07      	ldr	r3, [pc, #28]	; (800fca0 <SD_CheckStatus+0x38>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	f023 0301 	bic.w	r3, r3, #1
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <SD_CheckStatus+0x38>)
 800fc90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc92:	4b03      	ldr	r3, [pc, #12]	; (800fca0 <SD_CheckStatus+0x38>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	b2db      	uxtb	r3, r3
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	20000009 	.word	0x20000009

0800fca4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	4603      	mov	r3, r0
 800fcac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fcae:	f7ff fef7 	bl	800faa0 <BSP_SD_Init>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d107      	bne.n	800fcc8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fcb8:	79fb      	ldrb	r3, [r7, #7]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff ffd4 	bl	800fc68 <SD_CheckStatus>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4b04      	ldr	r3, [pc, #16]	; (800fcd8 <SD_initialize+0x34>)
 800fcc6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fcc8:	4b03      	ldr	r3, [pc, #12]	; (800fcd8 <SD_initialize+0x34>)
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	b2db      	uxtb	r3, r3
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000009 	.word	0x20000009

0800fcdc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	4603      	mov	r3, r0
 800fce4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fce6:	79fb      	ldrb	r3, [r7, #7]
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7ff ffbd 	bl	800fc68 <SD_CheckStatus>
 800fcee:	4603      	mov	r3, r0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
 800fd02:	603b      	str	r3, [r7, #0]
 800fd04:	4603      	mov	r3, r0
 800fd06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd0c:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd10:	f7ff ff8c 	bl	800fc2c <SD_CheckStatusWithTimeout>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da01      	bge.n	800fd1e <SD_read+0x26>
  {
    return res;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	e03b      	b.n	800fd96 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	68b8      	ldr	r0, [r7, #8]
 800fd24:	f7ff fee2 	bl	800faec <BSP_SD_ReadBlocks_DMA>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d132      	bne.n	800fd94 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fd2e:	4b1c      	ldr	r3, [pc, #112]	; (800fda0 <SD_read+0xa8>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fd34:	f7f8 fd62 	bl	80087fc <HAL_GetTick>
 800fd38:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd3a:	bf00      	nop
 800fd3c:	4b18      	ldr	r3, [pc, #96]	; (800fda0 <SD_read+0xa8>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d108      	bne.n	800fd56 <SD_read+0x5e>
 800fd44:	f7f8 fd5a 	bl	80087fc <HAL_GetTick>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d9f2      	bls.n	800fd3c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fd56:	4b12      	ldr	r3, [pc, #72]	; (800fda0 <SD_read+0xa8>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d102      	bne.n	800fd64 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	75fb      	strb	r3, [r7, #23]
 800fd62:	e017      	b.n	800fd94 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fd64:	4b0e      	ldr	r3, [pc, #56]	; (800fda0 <SD_read+0xa8>)
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd6a:	f7f8 fd47 	bl	80087fc <HAL_GetTick>
 800fd6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd70:	e007      	b.n	800fd82 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd72:	f7ff feef 	bl	800fb54 <BSP_SD_GetCardState>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d102      	bne.n	800fd82 <SD_read+0x8a>
          {
            res = RES_OK;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fd80:	e008      	b.n	800fd94 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd82:	f7f8 fd3b 	bl	80087fc <HAL_GetTick>
 800fd86:	4602      	mov	r2, r0
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d9ee      	bls.n	800fd72 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3718      	adds	r7, #24
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	2003c474 	.word	0x2003c474

0800fda4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60b9      	str	r1, [r7, #8]
 800fdac:	607a      	str	r2, [r7, #4]
 800fdae:	603b      	str	r3, [r7, #0]
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fdb8:	4b24      	ldr	r3, [pc, #144]	; (800fe4c <SD_write+0xa8>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fdbe:	f247 5030 	movw	r0, #30000	; 0x7530
 800fdc2:	f7ff ff33 	bl	800fc2c <SD_CheckStatusWithTimeout>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	da01      	bge.n	800fdd0 <SD_write+0x2c>
  {
    return res;
 800fdcc:	7dfb      	ldrb	r3, [r7, #23]
 800fdce:	e038      	b.n	800fe42 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	68b8      	ldr	r0, [r7, #8]
 800fdd6:	f7ff fea3 	bl	800fb20 <BSP_SD_WriteBlocks_DMA>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d12f      	bne.n	800fe40 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fde0:	f7f8 fd0c 	bl	80087fc <HAL_GetTick>
 800fde4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fde6:	bf00      	nop
 800fde8:	4b18      	ldr	r3, [pc, #96]	; (800fe4c <SD_write+0xa8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d108      	bne.n	800fe02 <SD_write+0x5e>
 800fdf0:	f7f8 fd04 	bl	80087fc <HAL_GetTick>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d9f2      	bls.n	800fde8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fe02:	4b12      	ldr	r3, [pc, #72]	; (800fe4c <SD_write+0xa8>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d102      	bne.n	800fe10 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	75fb      	strb	r3, [r7, #23]
 800fe0e:	e017      	b.n	800fe40 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fe10:	4b0e      	ldr	r3, [pc, #56]	; (800fe4c <SD_write+0xa8>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fe16:	f7f8 fcf1 	bl	80087fc <HAL_GetTick>
 800fe1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe1c:	e007      	b.n	800fe2e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe1e:	f7ff fe99 	bl	800fb54 <BSP_SD_GetCardState>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d102      	bne.n	800fe2e <SD_write+0x8a>
          {
            res = RES_OK;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	75fb      	strb	r3, [r7, #23]
            break;
 800fe2c:	e008      	b.n	800fe40 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe2e:	f7f8 fce5 	bl	80087fc <HAL_GetTick>
 800fe32:	4602      	mov	r2, r0
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	1ad3      	subs	r3, r2, r3
 800fe38:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d9ee      	bls.n	800fe1e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fe40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	2003c470 	.word	0x2003c470

0800fe50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b08c      	sub	sp, #48	; 0x30
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	4603      	mov	r3, r0
 800fe58:	603a      	str	r2, [r7, #0]
 800fe5a:	71fb      	strb	r3, [r7, #7]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fe60:	2301      	movs	r3, #1
 800fe62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe66:	4b25      	ldr	r3, [pc, #148]	; (800fefc <SD_ioctl+0xac>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d001      	beq.n	800fe78 <SD_ioctl+0x28>
 800fe74:	2303      	movs	r3, #3
 800fe76:	e03c      	b.n	800fef2 <SD_ioctl+0xa2>

  switch (cmd)
 800fe78:	79bb      	ldrb	r3, [r7, #6]
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d834      	bhi.n	800fee8 <SD_ioctl+0x98>
 800fe7e:	a201      	add	r2, pc, #4	; (adr r2, 800fe84 <SD_ioctl+0x34>)
 800fe80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe84:	0800fe95 	.word	0x0800fe95
 800fe88:	0800fe9d 	.word	0x0800fe9d
 800fe8c:	0800feb5 	.word	0x0800feb5
 800fe90:	0800fecf 	.word	0x0800fecf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe9a:	e028      	b.n	800feee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe9c:	f107 030c 	add.w	r3, r7, #12
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff fe67 	bl	800fb74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800feb2:	e01c      	b.n	800feee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800feb4:	f107 030c 	add.w	r3, r7, #12
 800feb8:	4618      	mov	r0, r3
 800feba:	f7ff fe5b 	bl	800fb74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fecc:	e00f      	b.n	800feee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fece:	f107 030c 	add.w	r3, r7, #12
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7ff fe4e 	bl	800fb74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	0a5a      	lsrs	r2, r3, #9
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fee0:	2300      	movs	r3, #0
 800fee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fee6:	e002      	b.n	800feee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fee8:	2304      	movs	r3, #4
 800feea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800feee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3730      	adds	r7, #48	; 0x30
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20000009 	.word	0x20000009

0800ff00 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ff00:	b480      	push	{r7}
 800ff02:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ff04:	4b03      	ldr	r3, [pc, #12]	; (800ff14 <BSP_SD_WriteCpltCallback+0x14>)
 800ff06:	2201      	movs	r2, #1
 800ff08:	601a      	str	r2, [r3, #0]
}
 800ff0a:	bf00      	nop
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	2003c470 	.word	0x2003c470

0800ff18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ff1c:	4b03      	ldr	r3, [pc, #12]	; (800ff2c <BSP_SD_ReadCpltCallback+0x14>)
 800ff1e:	2201      	movs	r2, #1
 800ff20:	601a      	str	r2, [r3, #0]
}
 800ff22:	bf00      	nop
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	2003c474 	.word	0x2003c474

0800ff30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ff3a:	79fb      	ldrb	r3, [r7, #7]
 800ff3c:	4a08      	ldr	r2, [pc, #32]	; (800ff60 <disk_status+0x30>)
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	4413      	add	r3, r2
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	79fa      	ldrb	r2, [r7, #7]
 800ff48:	4905      	ldr	r1, [pc, #20]	; (800ff60 <disk_status+0x30>)
 800ff4a:	440a      	add	r2, r1
 800ff4c:	7a12      	ldrb	r2, [r2, #8]
 800ff4e:	4610      	mov	r0, r2
 800ff50:	4798      	blx	r3
 800ff52:	4603      	mov	r3, r0
 800ff54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	2003c4a0 	.word	0x2003c4a0

0800ff64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	4a0d      	ldr	r2, [pc, #52]	; (800ffac <disk_initialize+0x48>)
 800ff76:	5cd3      	ldrb	r3, [r2, r3]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d111      	bne.n	800ffa0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	4a0b      	ldr	r2, [pc, #44]	; (800ffac <disk_initialize+0x48>)
 800ff80:	2101      	movs	r1, #1
 800ff82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	4a09      	ldr	r2, [pc, #36]	; (800ffac <disk_initialize+0x48>)
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	79fa      	ldrb	r2, [r7, #7]
 800ff92:	4906      	ldr	r1, [pc, #24]	; (800ffac <disk_initialize+0x48>)
 800ff94:	440a      	add	r2, r1
 800ff96:	7a12      	ldrb	r2, [r2, #8]
 800ff98:	4610      	mov	r0, r2
 800ff9a:	4798      	blx	r3
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	2003c4a0 	.word	0x2003c4a0

0800ffb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60b9      	str	r1, [r7, #8]
 800ffb8:	607a      	str	r2, [r7, #4]
 800ffba:	603b      	str	r3, [r7, #0]
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ffc0:	7bfb      	ldrb	r3, [r7, #15]
 800ffc2:	4a0a      	ldr	r2, [pc, #40]	; (800ffec <disk_read+0x3c>)
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	4413      	add	r3, r2
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	689c      	ldr	r4, [r3, #8]
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	4a07      	ldr	r2, [pc, #28]	; (800ffec <disk_read+0x3c>)
 800ffd0:	4413      	add	r3, r2
 800ffd2:	7a18      	ldrb	r0, [r3, #8]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	68b9      	ldr	r1, [r7, #8]
 800ffda:	47a0      	blx	r4
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
  return res;
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	371c      	adds	r7, #28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd90      	pop	{r4, r7, pc}
 800ffea:	bf00      	nop
 800ffec:	2003c4a0 	.word	0x2003c4a0

0800fff0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fff0:	b590      	push	{r4, r7, lr}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60b9      	str	r1, [r7, #8]
 800fff8:	607a      	str	r2, [r7, #4]
 800fffa:	603b      	str	r3, [r7, #0]
 800fffc:	4603      	mov	r3, r0
 800fffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010000:	7bfb      	ldrb	r3, [r7, #15]
 8010002:	4a0a      	ldr	r2, [pc, #40]	; (801002c <disk_write+0x3c>)
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	4413      	add	r3, r2
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	68dc      	ldr	r4, [r3, #12]
 801000c:	7bfb      	ldrb	r3, [r7, #15]
 801000e:	4a07      	ldr	r2, [pc, #28]	; (801002c <disk_write+0x3c>)
 8010010:	4413      	add	r3, r2
 8010012:	7a18      	ldrb	r0, [r3, #8]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	68b9      	ldr	r1, [r7, #8]
 801001a:	47a0      	blx	r4
 801001c:	4603      	mov	r3, r0
 801001e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010020:	7dfb      	ldrb	r3, [r7, #23]
}
 8010022:	4618      	mov	r0, r3
 8010024:	371c      	adds	r7, #28
 8010026:	46bd      	mov	sp, r7
 8010028:	bd90      	pop	{r4, r7, pc}
 801002a:	bf00      	nop
 801002c:	2003c4a0 	.word	0x2003c4a0

08010030 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	603a      	str	r2, [r7, #0]
 801003a:	71fb      	strb	r3, [r7, #7]
 801003c:	460b      	mov	r3, r1
 801003e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	4a09      	ldr	r2, [pc, #36]	; (8010068 <disk_ioctl+0x38>)
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	79fa      	ldrb	r2, [r7, #7]
 801004e:	4906      	ldr	r1, [pc, #24]	; (8010068 <disk_ioctl+0x38>)
 8010050:	440a      	add	r2, r1
 8010052:	7a10      	ldrb	r0, [r2, #8]
 8010054:	79b9      	ldrb	r1, [r7, #6]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	4798      	blx	r3
 801005a:	4603      	mov	r3, r0
 801005c:	73fb      	strb	r3, [r7, #15]
  return res;
 801005e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	2003c4a0 	.word	0x2003c4a0

0801006c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	3301      	adds	r3, #1
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801007c:	89fb      	ldrh	r3, [r7, #14]
 801007e:	021b      	lsls	r3, r3, #8
 8010080:	b21a      	sxth	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	b21b      	sxth	r3, r3
 8010088:	4313      	orrs	r3, r2
 801008a:	b21b      	sxth	r3, r3
 801008c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801008e:	89fb      	ldrh	r3, [r7, #14]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3303      	adds	r3, #3
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	021b      	lsls	r3, r3, #8
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	3202      	adds	r2, #2
 80100b4:	7812      	ldrb	r2, [r2, #0]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	021b      	lsls	r3, r3, #8
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	3201      	adds	r2, #1
 80100c2:	7812      	ldrb	r2, [r2, #0]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	7812      	ldrb	r2, [r2, #0]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80100d4:	68fb      	ldr	r3, [r7, #12]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3714      	adds	r7, #20
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr

080100e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80100e2:	b480      	push	{r7}
 80100e4:	b083      	sub	sp, #12
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	460b      	mov	r3, r1
 80100ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	887a      	ldrh	r2, [r7, #2]
 80100f6:	b2d2      	uxtb	r2, r2
 80100f8:	701a      	strb	r2, [r3, #0]
 80100fa:	887b      	ldrh	r3, [r7, #2]
 80100fc:	0a1b      	lsrs	r3, r3, #8
 80100fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	607a      	str	r2, [r7, #4]
 8010106:	887a      	ldrh	r2, [r7, #2]
 8010108:	b2d2      	uxtb	r2, r2
 801010a:	701a      	strb	r2, [r3, #0]
}
 801010c:	bf00      	nop
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	701a      	strb	r2, [r3, #0]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	0a1b      	lsrs	r3, r3, #8
 8010132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	1c5a      	adds	r2, r3, #1
 8010138:	607a      	str	r2, [r7, #4]
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	b2d2      	uxtb	r2, r2
 801013e:	701a      	strb	r2, [r3, #0]
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	0a1b      	lsrs	r3, r3, #8
 8010144:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	b2d2      	uxtb	r2, r2
 8010150:	701a      	strb	r2, [r3, #0]
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	0a1b      	lsrs	r3, r3, #8
 8010156:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	607a      	str	r2, [r7, #4]
 801015e:	683a      	ldr	r2, [r7, #0]
 8010160:	b2d2      	uxtb	r2, r2
 8010162:	701a      	strb	r2, [r3, #0]
}
 8010164:	bf00      	nop
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010170:	b480      	push	{r7}
 8010172:	b087      	sub	sp, #28
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00d      	beq.n	80101a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801018a:	693a      	ldr	r2, [r7, #16]
 801018c:	1c53      	adds	r3, r2, #1
 801018e:	613b      	str	r3, [r7, #16]
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	1c59      	adds	r1, r3, #1
 8010194:	6179      	str	r1, [r7, #20]
 8010196:	7812      	ldrb	r2, [r2, #0]
 8010198:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	3b01      	subs	r3, #1
 801019e:	607b      	str	r3, [r7, #4]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d1f1      	bne.n	801018a <mem_cpy+0x1a>
	}
}
 80101a6:	bf00      	nop
 80101a8:	371c      	adds	r7, #28
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80101b2:	b480      	push	{r7}
 80101b4:	b087      	sub	sp, #28
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	60b9      	str	r1, [r7, #8]
 80101bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	617a      	str	r2, [r7, #20]
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	b2d2      	uxtb	r2, r2
 80101cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	3b01      	subs	r3, #1
 80101d2:	607b      	str	r3, [r7, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1f3      	bne.n	80101c2 <mem_set+0x10>
}
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80101e6:	b480      	push	{r7}
 80101e8:	b089      	sub	sp, #36	; 0x24
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	60f8      	str	r0, [r7, #12]
 80101ee:	60b9      	str	r1, [r7, #8]
 80101f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	61fb      	str	r3, [r7, #28]
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	1c5a      	adds	r2, r3, #1
 8010202:	61fa      	str	r2, [r7, #28]
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	4619      	mov	r1, r3
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	1c5a      	adds	r2, r3, #1
 801020c:	61ba      	str	r2, [r7, #24]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	1acb      	subs	r3, r1, r3
 8010212:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	3b01      	subs	r3, #1
 8010218:	607b      	str	r3, [r7, #4]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d002      	beq.n	8010226 <mem_cmp+0x40>
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d0eb      	beq.n	80101fe <mem_cmp+0x18>

	return r;
 8010226:	697b      	ldr	r3, [r7, #20]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3724      	adds	r7, #36	; 0x24
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801023e:	e002      	b.n	8010246 <chk_chr+0x12>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3301      	adds	r3, #1
 8010244:	607b      	str	r3, [r7, #4]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <chk_chr+0x26>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	4293      	cmp	r3, r2
 8010258:	d1f2      	bne.n	8010240 <chk_chr+0xc>
	return *str;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	781b      	ldrb	r3, [r3, #0]
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
	...

0801026c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010276:	2300      	movs	r3, #0
 8010278:	60bb      	str	r3, [r7, #8]
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	e029      	b.n	80102d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010280:	4a27      	ldr	r2, [pc, #156]	; (8010320 <chk_lock+0xb4>)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	011b      	lsls	r3, r3, #4
 8010286:	4413      	add	r3, r2
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d01d      	beq.n	80102ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801028e:	4a24      	ldr	r2, [pc, #144]	; (8010320 <chk_lock+0xb4>)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	011b      	lsls	r3, r3, #4
 8010294:	4413      	add	r3, r2
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	429a      	cmp	r2, r3
 801029e:	d116      	bne.n	80102ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80102a0:	4a1f      	ldr	r2, [pc, #124]	; (8010320 <chk_lock+0xb4>)
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	011b      	lsls	r3, r3, #4
 80102a6:	4413      	add	r3, r2
 80102a8:	3304      	adds	r3, #4
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d10c      	bne.n	80102ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80102b4:	4a1a      	ldr	r2, [pc, #104]	; (8010320 <chk_lock+0xb4>)
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	4413      	add	r3, r2
 80102bc:	3308      	adds	r3, #8
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d102      	bne.n	80102ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80102c8:	e007      	b.n	80102da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80102ca:	2301      	movs	r3, #1
 80102cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	3301      	adds	r3, #1
 80102d2:	60fb      	str	r3, [r7, #12]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d9d2      	bls.n	8010280 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d109      	bne.n	80102f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <chk_lock+0x80>
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d101      	bne.n	80102f0 <chk_lock+0x84>
 80102ec:	2300      	movs	r3, #0
 80102ee:	e010      	b.n	8010312 <chk_lock+0xa6>
 80102f0:	2312      	movs	r3, #18
 80102f2:	e00e      	b.n	8010312 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d108      	bne.n	801030c <chk_lock+0xa0>
 80102fa:	4a09      	ldr	r2, [pc, #36]	; (8010320 <chk_lock+0xb4>)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	011b      	lsls	r3, r3, #4
 8010300:	4413      	add	r3, r2
 8010302:	330c      	adds	r3, #12
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801030a:	d101      	bne.n	8010310 <chk_lock+0xa4>
 801030c:	2310      	movs	r3, #16
 801030e:	e000      	b.n	8010312 <chk_lock+0xa6>
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	2003c480 	.word	0x2003c480

08010324 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801032a:	2300      	movs	r3, #0
 801032c:	607b      	str	r3, [r7, #4]
 801032e:	e002      	b.n	8010336 <enq_lock+0x12>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	3301      	adds	r3, #1
 8010334:	607b      	str	r3, [r7, #4]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d806      	bhi.n	801034a <enq_lock+0x26>
 801033c:	4a09      	ldr	r2, [pc, #36]	; (8010364 <enq_lock+0x40>)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	011b      	lsls	r3, r3, #4
 8010342:	4413      	add	r3, r2
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1f2      	bne.n	8010330 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2b02      	cmp	r3, #2
 801034e:	bf14      	ite	ne
 8010350:	2301      	movne	r3, #1
 8010352:	2300      	moveq	r3, #0
 8010354:	b2db      	uxtb	r3, r3
}
 8010356:	4618      	mov	r0, r3
 8010358:	370c      	adds	r7, #12
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	2003c480 	.word	0x2003c480

08010368 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010372:	2300      	movs	r3, #0
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	e01f      	b.n	80103b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010378:	4a41      	ldr	r2, [pc, #260]	; (8010480 <inc_lock+0x118>)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	011b      	lsls	r3, r3, #4
 801037e:	4413      	add	r3, r2
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	429a      	cmp	r2, r3
 8010388:	d113      	bne.n	80103b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801038a:	4a3d      	ldr	r2, [pc, #244]	; (8010480 <inc_lock+0x118>)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	4413      	add	r3, r2
 8010392:	3304      	adds	r3, #4
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801039a:	429a      	cmp	r2, r3
 801039c:	d109      	bne.n	80103b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801039e:	4a38      	ldr	r2, [pc, #224]	; (8010480 <inc_lock+0x118>)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	4413      	add	r3, r2
 80103a6:	3308      	adds	r3, #8
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d006      	beq.n	80103c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3301      	adds	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d9dc      	bls.n	8010378 <inc_lock+0x10>
 80103be:	e000      	b.n	80103c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80103c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d132      	bne.n	801042e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80103c8:	2300      	movs	r3, #0
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	e002      	b.n	80103d4 <inc_lock+0x6c>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	3301      	adds	r3, #1
 80103d2:	60fb      	str	r3, [r7, #12]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d806      	bhi.n	80103e8 <inc_lock+0x80>
 80103da:	4a29      	ldr	r2, [pc, #164]	; (8010480 <inc_lock+0x118>)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	4413      	add	r3, r2
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1f2      	bne.n	80103ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d101      	bne.n	80103f2 <inc_lock+0x8a>
 80103ee:	2300      	movs	r3, #0
 80103f0:	e040      	b.n	8010474 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	4922      	ldr	r1, [pc, #136]	; (8010480 <inc_lock+0x118>)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	011b      	lsls	r3, r3, #4
 80103fc:	440b      	add	r3, r1
 80103fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	689a      	ldr	r2, [r3, #8]
 8010404:	491e      	ldr	r1, [pc, #120]	; (8010480 <inc_lock+0x118>)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	011b      	lsls	r3, r3, #4
 801040a:	440b      	add	r3, r1
 801040c:	3304      	adds	r3, #4
 801040e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	695a      	ldr	r2, [r3, #20]
 8010414:	491a      	ldr	r1, [pc, #104]	; (8010480 <inc_lock+0x118>)
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	011b      	lsls	r3, r3, #4
 801041a:	440b      	add	r3, r1
 801041c:	3308      	adds	r3, #8
 801041e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010420:	4a17      	ldr	r2, [pc, #92]	; (8010480 <inc_lock+0x118>)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	011b      	lsls	r3, r3, #4
 8010426:	4413      	add	r3, r2
 8010428:	330c      	adds	r3, #12
 801042a:	2200      	movs	r2, #0
 801042c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d009      	beq.n	8010448 <inc_lock+0xe0>
 8010434:	4a12      	ldr	r2, [pc, #72]	; (8010480 <inc_lock+0x118>)
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	011b      	lsls	r3, r3, #4
 801043a:	4413      	add	r3, r2
 801043c:	330c      	adds	r3, #12
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d001      	beq.n	8010448 <inc_lock+0xe0>
 8010444:	2300      	movs	r3, #0
 8010446:	e015      	b.n	8010474 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d108      	bne.n	8010460 <inc_lock+0xf8>
 801044e:	4a0c      	ldr	r2, [pc, #48]	; (8010480 <inc_lock+0x118>)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	011b      	lsls	r3, r3, #4
 8010454:	4413      	add	r3, r2
 8010456:	330c      	adds	r3, #12
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	3301      	adds	r3, #1
 801045c:	b29a      	uxth	r2, r3
 801045e:	e001      	b.n	8010464 <inc_lock+0xfc>
 8010460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010464:	4906      	ldr	r1, [pc, #24]	; (8010480 <inc_lock+0x118>)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	011b      	lsls	r3, r3, #4
 801046a:	440b      	add	r3, r1
 801046c:	330c      	adds	r3, #12
 801046e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	3301      	adds	r3, #1
}
 8010474:	4618      	mov	r0, r3
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	2003c480 	.word	0x2003c480

08010484 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3b01      	subs	r3, #1
 8010490:	607b      	str	r3, [r7, #4]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d825      	bhi.n	80104e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8010498:	4a17      	ldr	r2, [pc, #92]	; (80104f8 <dec_lock+0x74>)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	4413      	add	r3, r2
 80104a0:	330c      	adds	r3, #12
 80104a2:	881b      	ldrh	r3, [r3, #0]
 80104a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80104a6:	89fb      	ldrh	r3, [r7, #14]
 80104a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104ac:	d101      	bne.n	80104b2 <dec_lock+0x2e>
 80104ae:	2300      	movs	r3, #0
 80104b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80104b2:	89fb      	ldrh	r3, [r7, #14]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <dec_lock+0x3a>
 80104b8:	89fb      	ldrh	r3, [r7, #14]
 80104ba:	3b01      	subs	r3, #1
 80104bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80104be:	4a0e      	ldr	r2, [pc, #56]	; (80104f8 <dec_lock+0x74>)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	011b      	lsls	r3, r3, #4
 80104c4:	4413      	add	r3, r2
 80104c6:	330c      	adds	r3, #12
 80104c8:	89fa      	ldrh	r2, [r7, #14]
 80104ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80104cc:	89fb      	ldrh	r3, [r7, #14]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d105      	bne.n	80104de <dec_lock+0x5a>
 80104d2:	4a09      	ldr	r2, [pc, #36]	; (80104f8 <dec_lock+0x74>)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	011b      	lsls	r3, r3, #4
 80104d8:	4413      	add	r3, r2
 80104da:	2200      	movs	r2, #0
 80104dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	737b      	strb	r3, [r7, #13]
 80104e2:	e001      	b.n	80104e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80104e4:	2302      	movs	r3, #2
 80104e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80104e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr
 80104f6:	bf00      	nop
 80104f8:	2003c480 	.word	0x2003c480

080104fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010504:	2300      	movs	r3, #0
 8010506:	60fb      	str	r3, [r7, #12]
 8010508:	e010      	b.n	801052c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801050a:	4a0d      	ldr	r2, [pc, #52]	; (8010540 <clear_lock+0x44>)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	011b      	lsls	r3, r3, #4
 8010510:	4413      	add	r3, r2
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	d105      	bne.n	8010526 <clear_lock+0x2a>
 801051a:	4a09      	ldr	r2, [pc, #36]	; (8010540 <clear_lock+0x44>)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	011b      	lsls	r3, r3, #4
 8010520:	4413      	add	r3, r2
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	3301      	adds	r3, #1
 801052a:	60fb      	str	r3, [r7, #12]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2b01      	cmp	r3, #1
 8010530:	d9eb      	bls.n	801050a <clear_lock+0xe>
	}
}
 8010532:	bf00      	nop
 8010534:	3714      	adds	r7, #20
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	2003c480 	.word	0x2003c480

08010544 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801054c:	2300      	movs	r3, #0
 801054e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	78db      	ldrb	r3, [r3, #3]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d034      	beq.n	80105c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801055c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	7858      	ldrb	r0, [r3, #1]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010568:	2301      	movs	r3, #1
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	f7ff fd40 	bl	800fff0 <disk_write>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d002      	beq.n	801057c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010576:	2301      	movs	r3, #1
 8010578:	73fb      	strb	r3, [r7, #15]
 801057a:	e022      	b.n	80105c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	1ad2      	subs	r2, r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a1b      	ldr	r3, [r3, #32]
 801058e:	429a      	cmp	r2, r3
 8010590:	d217      	bcs.n	80105c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	789b      	ldrb	r3, [r3, #2]
 8010596:	613b      	str	r3, [r7, #16]
 8010598:	e010      	b.n	80105bc <sync_window+0x78>
					wsect += fs->fsize;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	4413      	add	r3, r2
 80105a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7858      	ldrb	r0, [r3, #1]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105ae:	2301      	movs	r3, #1
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	f7ff fd1d 	bl	800fff0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	3b01      	subs	r3, #1
 80105ba:	613b      	str	r3, [r7, #16]
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d8eb      	bhi.n	801059a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3718      	adds	r7, #24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80105d6:	2300      	movs	r3, #0
 80105d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d01b      	beq.n	801061c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff ffad 	bl	8010544 <sync_window>
 80105ea:	4603      	mov	r3, r0
 80105ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d113      	bne.n	801061c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	7858      	ldrb	r0, [r3, #1]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105fe:	2301      	movs	r3, #1
 8010600:	683a      	ldr	r2, [r7, #0]
 8010602:	f7ff fcd5 	bl	800ffb0 <disk_read>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801060c:	f04f 33ff 	mov.w	r3, #4294967295
 8010610:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010612:	2301      	movs	r3, #1
 8010614:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	683a      	ldr	r2, [r7, #0]
 801061a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801061c:	7bfb      	ldrb	r3, [r7, #15]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff ff87 	bl	8010544 <sync_window>
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d159      	bne.n	80106f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2b03      	cmp	r3, #3
 8010646:	d149      	bne.n	80106dc <sync_fs+0xb4>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	791b      	ldrb	r3, [r3, #4]
 801064c:	2b01      	cmp	r3, #1
 801064e:	d145      	bne.n	80106dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	899b      	ldrh	r3, [r3, #12]
 801065a:	461a      	mov	r2, r3
 801065c:	2100      	movs	r1, #0
 801065e:	f7ff fda8 	bl	80101b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	3338      	adds	r3, #56	; 0x38
 8010666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801066a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff fd37 	bl	80100e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	3338      	adds	r3, #56	; 0x38
 8010678:	4921      	ldr	r1, [pc, #132]	; (8010700 <sync_fs+0xd8>)
 801067a:	4618      	mov	r0, r3
 801067c:	f7ff fd4c 	bl	8010118 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3338      	adds	r3, #56	; 0x38
 8010684:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010688:	491e      	ldr	r1, [pc, #120]	; (8010704 <sync_fs+0xdc>)
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fd44 	bl	8010118 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	3338      	adds	r3, #56	; 0x38
 8010694:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	695b      	ldr	r3, [r3, #20]
 801069c:	4619      	mov	r1, r3
 801069e:	4610      	mov	r0, r2
 80106a0:	f7ff fd3a 	bl	8010118 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	3338      	adds	r3, #56	; 0x38
 80106a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	691b      	ldr	r3, [r3, #16]
 80106b0:	4619      	mov	r1, r3
 80106b2:	4610      	mov	r0, r2
 80106b4:	f7ff fd30 	bl	8010118 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	7858      	ldrb	r0, [r3, #1]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106d0:	2301      	movs	r3, #1
 80106d2:	f7ff fc8d 	bl	800fff0 <disk_write>
			fs->fsi_flag = 0;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	785b      	ldrb	r3, [r3, #1]
 80106e0:	2200      	movs	r2, #0
 80106e2:	2100      	movs	r1, #0
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fca3 	bl	8010030 <disk_ioctl>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d001      	beq.n	80106f4 <sync_fs+0xcc>
 80106f0:	2301      	movs	r3, #1
 80106f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	41615252 	.word	0x41615252
 8010704:	61417272 	.word	0x61417272

08010708 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	3b02      	subs	r3, #2
 8010716:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	69db      	ldr	r3, [r3, #28]
 801071c:	3b02      	subs	r3, #2
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	429a      	cmp	r2, r3
 8010722:	d301      	bcc.n	8010728 <clust2sect+0x20>
 8010724:	2300      	movs	r3, #0
 8010726:	e008      	b.n	801073a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	895b      	ldrh	r3, [r3, #10]
 801072c:	461a      	mov	r2, r3
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	fb03 f202 	mul.w	r2, r3, r2
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010738:	4413      	add	r3, r2
}
 801073a:	4618      	mov	r0, r3
 801073c:	370c      	adds	r7, #12
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr

08010746 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b086      	sub	sp, #24
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d904      	bls.n	8010766 <get_fat+0x20>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	429a      	cmp	r2, r3
 8010764:	d302      	bcc.n	801076c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010766:	2301      	movs	r3, #1
 8010768:	617b      	str	r3, [r7, #20]
 801076a:	e0b7      	b.n	80108dc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801076c:	f04f 33ff 	mov.w	r3, #4294967295
 8010770:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	2b02      	cmp	r3, #2
 8010778:	d05a      	beq.n	8010830 <get_fat+0xea>
 801077a:	2b03      	cmp	r3, #3
 801077c:	d07d      	beq.n	801087a <get_fat+0x134>
 801077e:	2b01      	cmp	r3, #1
 8010780:	f040 80a2 	bne.w	80108c8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	085b      	lsrs	r3, r3, #1
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	4413      	add	r3, r2
 8010790:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	899b      	ldrh	r3, [r3, #12]
 801079a:	4619      	mov	r1, r3
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80107a2:	4413      	add	r3, r2
 80107a4:	4619      	mov	r1, r3
 80107a6:	6938      	ldr	r0, [r7, #16]
 80107a8:	f7ff ff10 	bl	80105cc <move_window>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f040 808d 	bne.w	80108ce <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	60fa      	str	r2, [r7, #12]
 80107ba:	693a      	ldr	r2, [r7, #16]
 80107bc:	8992      	ldrh	r2, [r2, #12]
 80107be:	fbb3 f1f2 	udiv	r1, r3, r2
 80107c2:	fb02 f201 	mul.w	r2, r2, r1
 80107c6:	1a9b      	subs	r3, r3, r2
 80107c8:	693a      	ldr	r2, [r7, #16]
 80107ca:	4413      	add	r3, r2
 80107cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80107d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	899b      	ldrh	r3, [r3, #12]
 80107da:	4619      	mov	r1, r3
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	fbb3 f3f1 	udiv	r3, r3, r1
 80107e2:	4413      	add	r3, r2
 80107e4:	4619      	mov	r1, r3
 80107e6:	6938      	ldr	r0, [r7, #16]
 80107e8:	f7ff fef0 	bl	80105cc <move_window>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d16f      	bne.n	80108d2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	899b      	ldrh	r3, [r3, #12]
 80107f6:	461a      	mov	r2, r3
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80107fe:	fb02 f201 	mul.w	r2, r2, r1
 8010802:	1a9b      	subs	r3, r3, r2
 8010804:	693a      	ldr	r2, [r7, #16]
 8010806:	4413      	add	r3, r2
 8010808:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801080c:	021b      	lsls	r3, r3, #8
 801080e:	461a      	mov	r2, r3
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	4313      	orrs	r3, r2
 8010814:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <get_fat+0xe0>
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	091b      	lsrs	r3, r3, #4
 8010824:	e002      	b.n	801082c <get_fat+0xe6>
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801082c:	617b      	str	r3, [r7, #20]
			break;
 801082e:	e055      	b.n	80108dc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	899b      	ldrh	r3, [r3, #12]
 8010838:	085b      	lsrs	r3, r3, #1
 801083a:	b29b      	uxth	r3, r3
 801083c:	4619      	mov	r1, r3
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	fbb3 f3f1 	udiv	r3, r3, r1
 8010844:	4413      	add	r3, r2
 8010846:	4619      	mov	r1, r3
 8010848:	6938      	ldr	r0, [r7, #16]
 801084a:	f7ff febf 	bl	80105cc <move_window>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d140      	bne.n	80108d6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	693a      	ldr	r2, [r7, #16]
 8010860:	8992      	ldrh	r2, [r2, #12]
 8010862:	fbb3 f0f2 	udiv	r0, r3, r2
 8010866:	fb02 f200 	mul.w	r2, r2, r0
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	440b      	add	r3, r1
 801086e:	4618      	mov	r0, r3
 8010870:	f7ff fbfc 	bl	801006c <ld_word>
 8010874:	4603      	mov	r3, r0
 8010876:	617b      	str	r3, [r7, #20]
			break;
 8010878:	e030      	b.n	80108dc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	899b      	ldrh	r3, [r3, #12]
 8010882:	089b      	lsrs	r3, r3, #2
 8010884:	b29b      	uxth	r3, r3
 8010886:	4619      	mov	r1, r3
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	fbb3 f3f1 	udiv	r3, r3, r1
 801088e:	4413      	add	r3, r2
 8010890:	4619      	mov	r1, r3
 8010892:	6938      	ldr	r0, [r7, #16]
 8010894:	f7ff fe9a 	bl	80105cc <move_window>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d11d      	bne.n	80108da <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	693a      	ldr	r2, [r7, #16]
 80108aa:	8992      	ldrh	r2, [r2, #12]
 80108ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80108b0:	fb02 f200 	mul.w	r2, r2, r0
 80108b4:	1a9b      	subs	r3, r3, r2
 80108b6:	440b      	add	r3, r1
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7ff fbef 	bl	801009c <ld_dword>
 80108be:	4603      	mov	r3, r0
 80108c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80108c4:	617b      	str	r3, [r7, #20]
			break;
 80108c6:	e009      	b.n	80108dc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80108c8:	2301      	movs	r3, #1
 80108ca:	617b      	str	r3, [r7, #20]
 80108cc:	e006      	b.n	80108dc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108ce:	bf00      	nop
 80108d0:	e004      	b.n	80108dc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108d2:	bf00      	nop
 80108d4:	e002      	b.n	80108dc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80108d6:	bf00      	nop
 80108d8:	e000      	b.n	80108dc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80108da:	bf00      	nop
		}
	}

	return val;
 80108dc:	697b      	ldr	r3, [r7, #20]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80108e6:	b590      	push	{r4, r7, lr}
 80108e8:	b089      	sub	sp, #36	; 0x24
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	60f8      	str	r0, [r7, #12]
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80108f2:	2302      	movs	r3, #2
 80108f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	f240 8106 	bls.w	8010b0a <put_fat+0x224>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	429a      	cmp	r2, r3
 8010906:	f080 8100 	bcs.w	8010b0a <put_fat+0x224>
		switch (fs->fs_type) {
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	2b02      	cmp	r3, #2
 8010910:	f000 8088 	beq.w	8010a24 <put_fat+0x13e>
 8010914:	2b03      	cmp	r3, #3
 8010916:	f000 80b0 	beq.w	8010a7a <put_fat+0x194>
 801091a:	2b01      	cmp	r3, #1
 801091c:	f040 80f5 	bne.w	8010b0a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	61bb      	str	r3, [r7, #24]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	085b      	lsrs	r3, r3, #1
 8010928:	69ba      	ldr	r2, [r7, #24]
 801092a:	4413      	add	r3, r2
 801092c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	899b      	ldrh	r3, [r3, #12]
 8010936:	4619      	mov	r1, r3
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	fbb3 f3f1 	udiv	r3, r3, r1
 801093e:	4413      	add	r3, r2
 8010940:	4619      	mov	r1, r3
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f7ff fe42 	bl	80105cc <move_window>
 8010948:	4603      	mov	r3, r0
 801094a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801094c:	7ffb      	ldrb	r3, [r7, #31]
 801094e:	2b00      	cmp	r3, #0
 8010950:	f040 80d4 	bne.w	8010afc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	1c5a      	adds	r2, r3, #1
 801095e:	61ba      	str	r2, [r7, #24]
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	8992      	ldrh	r2, [r2, #12]
 8010964:	fbb3 f0f2 	udiv	r0, r3, r2
 8010968:	fb02 f200 	mul.w	r2, r2, r0
 801096c:	1a9b      	subs	r3, r3, r2
 801096e:	440b      	add	r3, r1
 8010970:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00d      	beq.n	8010998 <put_fat+0xb2>
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	b25b      	sxtb	r3, r3
 8010982:	f003 030f 	and.w	r3, r3, #15
 8010986:	b25a      	sxtb	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	b2db      	uxtb	r3, r3
 801098c:	011b      	lsls	r3, r3, #4
 801098e:	b25b      	sxtb	r3, r3
 8010990:	4313      	orrs	r3, r2
 8010992:	b25b      	sxtb	r3, r3
 8010994:	b2db      	uxtb	r3, r3
 8010996:	e001      	b.n	801099c <put_fat+0xb6>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	b2db      	uxtb	r3, r3
 801099c:	697a      	ldr	r2, [r7, #20]
 801099e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2201      	movs	r2, #1
 80109a4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	899b      	ldrh	r3, [r3, #12]
 80109ae:	4619      	mov	r1, r3
 80109b0:	69bb      	ldr	r3, [r7, #24]
 80109b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80109b6:	4413      	add	r3, r2
 80109b8:	4619      	mov	r1, r3
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7ff fe06 	bl	80105cc <move_window>
 80109c0:	4603      	mov	r3, r0
 80109c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109c4:	7ffb      	ldrb	r3, [r7, #31]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f040 809a 	bne.w	8010b00 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	899b      	ldrh	r3, [r3, #12]
 80109d6:	461a      	mov	r2, r3
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	fbb3 f0f2 	udiv	r0, r3, r2
 80109de:	fb02 f200 	mul.w	r2, r2, r0
 80109e2:	1a9b      	subs	r3, r3, r2
 80109e4:	440b      	add	r3, r1
 80109e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <put_fat+0x114>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	091b      	lsrs	r3, r3, #4
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	e00e      	b.n	8010a18 <put_fat+0x132>
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	b25b      	sxtb	r3, r3
 8010a00:	f023 030f 	bic.w	r3, r3, #15
 8010a04:	b25a      	sxtb	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	0a1b      	lsrs	r3, r3, #8
 8010a0a:	b25b      	sxtb	r3, r3
 8010a0c:	f003 030f 	and.w	r3, r3, #15
 8010a10:	b25b      	sxtb	r3, r3
 8010a12:	4313      	orrs	r3, r2
 8010a14:	b25b      	sxtb	r3, r3
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	697a      	ldr	r2, [r7, #20]
 8010a1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	70da      	strb	r2, [r3, #3]
			break;
 8010a22:	e072      	b.n	8010b0a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	899b      	ldrh	r3, [r3, #12]
 8010a2c:	085b      	lsrs	r3, r3, #1
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	4619      	mov	r1, r3
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a38:	4413      	add	r3, r2
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff fdc5 	bl	80105cc <move_window>
 8010a42:	4603      	mov	r3, r0
 8010a44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a46:	7ffb      	ldrb	r3, [r7, #31]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d15b      	bne.n	8010b04 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	8992      	ldrh	r2, [r2, #12]
 8010a5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a5e:	fb02 f200 	mul.w	r2, r2, r0
 8010a62:	1a9b      	subs	r3, r3, r2
 8010a64:	440b      	add	r3, r1
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	b292      	uxth	r2, r2
 8010a6a:	4611      	mov	r1, r2
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7ff fb38 	bl	80100e2 <st_word>
			fs->wflag = 1;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2201      	movs	r2, #1
 8010a76:	70da      	strb	r2, [r3, #3]
			break;
 8010a78:	e047      	b.n	8010b0a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	089b      	lsrs	r3, r3, #2
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4619      	mov	r1, r3
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a8e:	4413      	add	r3, r2
 8010a90:	4619      	mov	r1, r3
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f7ff fd9a 	bl	80105cc <move_window>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a9c:	7ffb      	ldrb	r3, [r7, #31]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d132      	bne.n	8010b08 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	8992      	ldrh	r2, [r2, #12]
 8010ab6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aba:	fb02 f200 	mul.w	r2, r2, r0
 8010abe:	1a9b      	subs	r3, r3, r2
 8010ac0:	440b      	add	r3, r1
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff faea 	bl	801009c <ld_dword>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010ace:	4323      	orrs	r3, r4
 8010ad0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	68fa      	ldr	r2, [r7, #12]
 8010ade:	8992      	ldrh	r2, [r2, #12]
 8010ae0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ae4:	fb02 f200 	mul.w	r2, r2, r0
 8010ae8:	1a9b      	subs	r3, r3, r2
 8010aea:	440b      	add	r3, r1
 8010aec:	6879      	ldr	r1, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff fb12 	bl	8010118 <st_dword>
			fs->wflag = 1;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2201      	movs	r2, #1
 8010af8:	70da      	strb	r2, [r3, #3]
			break;
 8010afa:	e006      	b.n	8010b0a <put_fat+0x224>
			if (res != FR_OK) break;
 8010afc:	bf00      	nop
 8010afe:	e004      	b.n	8010b0a <put_fat+0x224>
			if (res != FR_OK) break;
 8010b00:	bf00      	nop
 8010b02:	e002      	b.n	8010b0a <put_fat+0x224>
			if (res != FR_OK) break;
 8010b04:	bf00      	nop
 8010b06:	e000      	b.n	8010b0a <put_fat+0x224>
			if (res != FR_OK) break;
 8010b08:	bf00      	nop
		}
	}
	return res;
 8010b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3724      	adds	r7, #36	; 0x24
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}

08010b14 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d904      	bls.n	8010b3a <remove_chain+0x26>
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	69db      	ldr	r3, [r3, #28]
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d301      	bcc.n	8010b3e <remove_chain+0x2a>
 8010b3a:	2302      	movs	r3, #2
 8010b3c:	e04b      	b.n	8010bd6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00c      	beq.n	8010b5e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010b44:	f04f 32ff 	mov.w	r2, #4294967295
 8010b48:	6879      	ldr	r1, [r7, #4]
 8010b4a:	69b8      	ldr	r0, [r7, #24]
 8010b4c:	f7ff fecb 	bl	80108e6 <put_fat>
 8010b50:	4603      	mov	r3, r0
 8010b52:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010b54:	7ffb      	ldrb	r3, [r7, #31]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <remove_chain+0x4a>
 8010b5a:	7ffb      	ldrb	r3, [r7, #31]
 8010b5c:	e03b      	b.n	8010bd6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010b5e:	68b9      	ldr	r1, [r7, #8]
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f7ff fdf0 	bl	8010746 <get_fat>
 8010b66:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d031      	beq.n	8010bd2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d101      	bne.n	8010b78 <remove_chain+0x64>
 8010b74:	2302      	movs	r3, #2
 8010b76:	e02e      	b.n	8010bd6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b7e:	d101      	bne.n	8010b84 <remove_chain+0x70>
 8010b80:	2301      	movs	r3, #1
 8010b82:	e028      	b.n	8010bd6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010b84:	2200      	movs	r2, #0
 8010b86:	68b9      	ldr	r1, [r7, #8]
 8010b88:	69b8      	ldr	r0, [r7, #24]
 8010b8a:	f7ff feac 	bl	80108e6 <put_fat>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010b92:	7ffb      	ldrb	r3, [r7, #31]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <remove_chain+0x88>
 8010b98:	7ffb      	ldrb	r3, [r7, #31]
 8010b9a:	e01c      	b.n	8010bd6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	695a      	ldr	r2, [r3, #20]
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	69db      	ldr	r3, [r3, #28]
 8010ba4:	3b02      	subs	r3, #2
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d20b      	bcs.n	8010bc2 <remove_chain+0xae>
			fs->free_clst++;
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	791b      	ldrb	r3, [r3, #4]
 8010bb8:	f043 0301 	orr.w	r3, r3, #1
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	69db      	ldr	r3, [r3, #28]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d3c6      	bcc.n	8010b5e <remove_chain+0x4a>
 8010bd0:	e000      	b.n	8010bd4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010bd2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b088      	sub	sp, #32
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10d      	bne.n	8010c10 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	691b      	ldr	r3, [r3, #16]
 8010bf8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d004      	beq.n	8010c0a <create_chain+0x2c>
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	69db      	ldr	r3, [r3, #28]
 8010c04:	69ba      	ldr	r2, [r7, #24]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d31b      	bcc.n	8010c42 <create_chain+0x64>
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	61bb      	str	r3, [r7, #24]
 8010c0e:	e018      	b.n	8010c42 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fd97 	bl	8010746 <get_fat>
 8010c18:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d801      	bhi.n	8010c24 <create_chain+0x46>
 8010c20:	2301      	movs	r3, #1
 8010c22:	e070      	b.n	8010d06 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2a:	d101      	bne.n	8010c30 <create_chain+0x52>
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	e06a      	b.n	8010d06 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d201      	bcs.n	8010c3e <create_chain+0x60>
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	e063      	b.n	8010d06 <create_chain+0x128>
		scl = clst;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010c42:	69bb      	ldr	r3, [r7, #24]
 8010c44:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	69db      	ldr	r3, [r3, #28]
 8010c50:	69fa      	ldr	r2, [r7, #28]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d307      	bcc.n	8010c66 <create_chain+0x88>
				ncl = 2;
 8010c56:	2302      	movs	r3, #2
 8010c58:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010c5a:	69fa      	ldr	r2, [r7, #28]
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d901      	bls.n	8010c66 <create_chain+0x88>
 8010c62:	2300      	movs	r3, #0
 8010c64:	e04f      	b.n	8010d06 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010c66:	69f9      	ldr	r1, [r7, #28]
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff fd6c 	bl	8010746 <get_fat>
 8010c6e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00e      	beq.n	8010c94 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d003      	beq.n	8010c84 <create_chain+0xa6>
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c82:	d101      	bne.n	8010c88 <create_chain+0xaa>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	e03e      	b.n	8010d06 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010c88:	69fa      	ldr	r2, [r7, #28]
 8010c8a:	69bb      	ldr	r3, [r7, #24]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d1da      	bne.n	8010c46 <create_chain+0x68>
 8010c90:	2300      	movs	r3, #0
 8010c92:	e038      	b.n	8010d06 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010c94:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010c96:	f04f 32ff 	mov.w	r2, #4294967295
 8010c9a:	69f9      	ldr	r1, [r7, #28]
 8010c9c:	6938      	ldr	r0, [r7, #16]
 8010c9e:	f7ff fe22 	bl	80108e6 <put_fat>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010ca6:	7dfb      	ldrb	r3, [r7, #23]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d109      	bne.n	8010cc0 <create_chain+0xe2>
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d006      	beq.n	8010cc0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	6938      	ldr	r0, [r7, #16]
 8010cb8:	f7ff fe15 	bl	80108e6 <put_fat>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010cc0:	7dfb      	ldrb	r3, [r7, #23]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d116      	bne.n	8010cf4 <create_chain+0x116>
		fs->last_clst = ncl;
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	69fa      	ldr	r2, [r7, #28]
 8010cca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	695a      	ldr	r2, [r3, #20]
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	69db      	ldr	r3, [r3, #28]
 8010cd4:	3b02      	subs	r3, #2
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d804      	bhi.n	8010ce4 <create_chain+0x106>
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	1e5a      	subs	r2, r3, #1
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	791b      	ldrb	r3, [r3, #4]
 8010ce8:	f043 0301 	orr.w	r3, r3, #1
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	711a      	strb	r2, [r3, #4]
 8010cf2:	e007      	b.n	8010d04 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010cf4:	7dfb      	ldrb	r3, [r7, #23]
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d102      	bne.n	8010d00 <create_chain+0x122>
 8010cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8010cfe:	e000      	b.n	8010d02 <create_chain+0x124>
 8010d00:	2301      	movs	r3, #1
 8010d02:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010d04:	69fb      	ldr	r3, [r7, #28]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3720      	adds	r7, #32
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b087      	sub	sp, #28
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d22:	3304      	adds	r3, #4
 8010d24:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	899b      	ldrh	r3, [r3, #12]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	8952      	ldrh	r2, [r2, #10]
 8010d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	1d1a      	adds	r2, r3, #4
 8010d40:	613a      	str	r2, [r7, #16]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <clmt_clust+0x42>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	e010      	b.n	8010d72 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d307      	bcc.n	8010d68 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010d58:	697a      	ldr	r2, [r7, #20]
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	617b      	str	r3, [r7, #20]
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	3304      	adds	r3, #4
 8010d64:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d66:	e7e9      	b.n	8010d3c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010d68:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	4413      	add	r3, r2
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	371c      	adds	r7, #28
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b086      	sub	sp, #24
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
 8010d86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d94:	d204      	bcs.n	8010da0 <dir_sdi+0x22>
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	f003 031f 	and.w	r3, r3, #31
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d001      	beq.n	8010da4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010da0:	2302      	movs	r3, #2
 8010da2:	e071      	b.n	8010e88 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d106      	bne.n	8010dc4 <dir_sdi+0x46>
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d902      	bls.n	8010dc4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10c      	bne.n	8010de4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	095b      	lsrs	r3, r3, #5
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	8912      	ldrh	r2, [r2, #8]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d301      	bcc.n	8010dda <dir_sdi+0x5c>
 8010dd6:	2302      	movs	r3, #2
 8010dd8:	e056      	b.n	8010e88 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	61da      	str	r2, [r3, #28]
 8010de2:	e02d      	b.n	8010e40 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	895b      	ldrh	r3, [r3, #10]
 8010de8:	461a      	mov	r2, r3
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	899b      	ldrh	r3, [r3, #12]
 8010dee:	fb03 f302 	mul.w	r3, r3, r2
 8010df2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010df4:	e019      	b.n	8010e2a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6979      	ldr	r1, [r7, #20]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7ff fca3 	bl	8010746 <get_fat>
 8010e00:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e08:	d101      	bne.n	8010e0e <dir_sdi+0x90>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e03c      	b.n	8010e88 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d904      	bls.n	8010e1e <dir_sdi+0xa0>
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	69db      	ldr	r3, [r3, #28]
 8010e18:	697a      	ldr	r2, [r7, #20]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d301      	bcc.n	8010e22 <dir_sdi+0xa4>
 8010e1e:	2302      	movs	r3, #2
 8010e20:	e032      	b.n	8010e88 <dir_sdi+0x10a>
			ofs -= csz;
 8010e22:	683a      	ldr	r2, [r7, #0]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	1ad3      	subs	r3, r2, r3
 8010e28:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d2e1      	bcs.n	8010df6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010e32:	6979      	ldr	r1, [r7, #20]
 8010e34:	6938      	ldr	r0, [r7, #16]
 8010e36:	f7ff fc67 	bl	8010708 <clust2sect>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	697a      	ldr	r2, [r7, #20]
 8010e44:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	69db      	ldr	r3, [r3, #28]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <dir_sdi+0xd4>
 8010e4e:	2302      	movs	r3, #2
 8010e50:	e01a      	b.n	8010e88 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69da      	ldr	r2, [r3, #28]
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	899b      	ldrh	r3, [r3, #12]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e62:	441a      	add	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	899b      	ldrh	r3, [r3, #12]
 8010e72:	461a      	mov	r2, r3
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e7a:	fb02 f200 	mul.w	r2, r2, r0
 8010e7e:	1a9b      	subs	r3, r3, r2
 8010e80:	18ca      	adds	r2, r1, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3718      	adds	r7, #24
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	695b      	ldr	r3, [r3, #20]
 8010ea4:	3320      	adds	r3, #32
 8010ea6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	69db      	ldr	r3, [r3, #28]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d003      	beq.n	8010eb8 <dir_next+0x28>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010eb6:	d301      	bcc.n	8010ebc <dir_next+0x2c>
 8010eb8:	2304      	movs	r3, #4
 8010eba:	e0bb      	b.n	8011034 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	899b      	ldrh	r3, [r3, #12]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ec8:	fb02 f201 	mul.w	r2, r2, r1
 8010ecc:	1a9b      	subs	r3, r3, r2
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f040 809d 	bne.w	801100e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	69db      	ldr	r3, [r3, #28]
 8010ed8:	1c5a      	adds	r2, r3, #1
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10b      	bne.n	8010efe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	095b      	lsrs	r3, r3, #5
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	8912      	ldrh	r2, [r2, #8]
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	f0c0 808d 	bcc.w	801100e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	61da      	str	r2, [r3, #28]
 8010efa:	2304      	movs	r3, #4
 8010efc:	e09a      	b.n	8011034 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	899b      	ldrh	r3, [r3, #12]
 8010f02:	461a      	mov	r2, r3
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f0a:	68fa      	ldr	r2, [r7, #12]
 8010f0c:	8952      	ldrh	r2, [r2, #10]
 8010f0e:	3a01      	subs	r2, #1
 8010f10:	4013      	ands	r3, r2
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d17b      	bne.n	801100e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	699b      	ldr	r3, [r3, #24]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f7ff fc11 	bl	8010746 <get_fat>
 8010f24:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d801      	bhi.n	8010f30 <dir_next+0xa0>
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	e081      	b.n	8011034 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f36:	d101      	bne.n	8010f3c <dir_next+0xac>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	e07b      	b.n	8011034 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	69db      	ldr	r3, [r3, #28]
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d359      	bcc.n	8010ffa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d104      	bne.n	8010f56 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	61da      	str	r2, [r3, #28]
 8010f52:	2304      	movs	r3, #4
 8010f54:	e06e      	b.n	8011034 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	699b      	ldr	r3, [r3, #24]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4610      	mov	r0, r2
 8010f60:	f7ff fe3d 	bl	8010bde <create_chain>
 8010f64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d101      	bne.n	8010f70 <dir_next+0xe0>
 8010f6c:	2307      	movs	r3, #7
 8010f6e:	e061      	b.n	8011034 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d101      	bne.n	8010f7a <dir_next+0xea>
 8010f76:	2302      	movs	r3, #2
 8010f78:	e05c      	b.n	8011034 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f80:	d101      	bne.n	8010f86 <dir_next+0xf6>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e056      	b.n	8011034 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7ff fadc 	bl	8010544 <sync_window>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d001      	beq.n	8010f96 <dir_next+0x106>
 8010f92:	2301      	movs	r3, #1
 8010f94:	e04e      	b.n	8011034 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	f7ff f905 	bl	80101b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010fa8:	2300      	movs	r3, #0
 8010faa:	613b      	str	r3, [r7, #16]
 8010fac:	6979      	ldr	r1, [r7, #20]
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f7ff fbaa 	bl	8010708 <clust2sect>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8010fba:	e012      	b.n	8010fe2 <dir_next+0x152>
						fs->wflag = 1;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f7ff fabe 	bl	8010544 <sync_window>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <dir_next+0x142>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e030      	b.n	8011034 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	613b      	str	r3, [r7, #16]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fdc:	1c5a      	adds	r2, r3, #1
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d3e6      	bcc.n	8010fbc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	1ad2      	subs	r2, r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	697a      	ldr	r2, [r7, #20]
 8010ffe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011000:	6979      	ldr	r1, [r7, #20]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7ff fb80 	bl	8010708 <clust2sect>
 8011008:	4602      	mov	r2, r0
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	899b      	ldrh	r3, [r3, #12]
 801101e:	461a      	mov	r2, r3
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	fbb3 f0f2 	udiv	r0, r3, r2
 8011026:	fb02 f200 	mul.w	r2, r2, r0
 801102a:	1a9b      	subs	r3, r3, r2
 801102c:	18ca      	adds	r2, r1, r3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801104c:	2100      	movs	r1, #0
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff fe95 	bl	8010d7e <dir_sdi>
 8011054:	4603      	mov	r3, r0
 8011056:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011058:	7dfb      	ldrb	r3, [r7, #23]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d12b      	bne.n	80110b6 <dir_alloc+0x7a>
		n = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	69db      	ldr	r3, [r3, #28]
 8011066:	4619      	mov	r1, r3
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f7ff faaf 	bl	80105cc <move_window>
 801106e:	4603      	mov	r3, r0
 8011070:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011072:	7dfb      	ldrb	r3, [r7, #23]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d11d      	bne.n	80110b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6a1b      	ldr	r3, [r3, #32]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	2be5      	cmp	r3, #229	; 0xe5
 8011080:	d004      	beq.n	801108c <dir_alloc+0x50>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a1b      	ldr	r3, [r3, #32]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d107      	bne.n	801109c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	3301      	adds	r3, #1
 8011090:	613b      	str	r3, [r7, #16]
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	429a      	cmp	r2, r3
 8011098:	d102      	bne.n	80110a0 <dir_alloc+0x64>
 801109a:	e00c      	b.n	80110b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801109c:	2300      	movs	r3, #0
 801109e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80110a0:	2101      	movs	r1, #1
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff fef4 	bl	8010e90 <dir_next>
 80110a8:	4603      	mov	r3, r0
 80110aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80110ac:	7dfb      	ldrb	r3, [r7, #23]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d0d7      	beq.n	8011062 <dir_alloc+0x26>
 80110b2:	e000      	b.n	80110b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80110b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	2b04      	cmp	r3, #4
 80110ba:	d101      	bne.n	80110c0 <dir_alloc+0x84>
 80110bc:	2307      	movs	r3, #7
 80110be:	75fb      	strb	r3, [r7, #23]
	return res;
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3718      	adds	r7, #24
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b084      	sub	sp, #16
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	331a      	adds	r3, #26
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fe ffc7 	bl	801006c <ld_word>
 80110de:	4603      	mov	r3, r0
 80110e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	2b03      	cmp	r3, #3
 80110e8:	d109      	bne.n	80110fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	3314      	adds	r3, #20
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fe ffbc 	bl	801006c <ld_word>
 80110f4:	4603      	mov	r3, r0
 80110f6:	041b      	lsls	r3, r3, #16
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	4313      	orrs	r3, r2
 80110fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80110fe:	68fb      	ldr	r3, [r7, #12]
}
 8011100:	4618      	mov	r0, r3
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	331a      	adds	r3, #26
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	b292      	uxth	r2, r2
 801111c:	4611      	mov	r1, r2
 801111e:	4618      	mov	r0, r3
 8011120:	f7fe ffdf 	bl	80100e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	2b03      	cmp	r3, #3
 801112a:	d109      	bne.n	8011140 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	f103 0214 	add.w	r2, r3, #20
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	0c1b      	lsrs	r3, r3, #16
 8011136:	b29b      	uxth	r3, r3
 8011138:	4619      	mov	r1, r3
 801113a:	4610      	mov	r0, r2
 801113c:	f7fe ffd1 	bl	80100e2 <st_word>
	}
}
 8011140:	bf00      	nop
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011152:	2304      	movs	r3, #4
 8011154:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801115c:	e03c      	b.n	80111d8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	69db      	ldr	r3, [r3, #28]
 8011162:	4619      	mov	r1, r3
 8011164:	6938      	ldr	r0, [r7, #16]
 8011166:	f7ff fa31 	bl	80105cc <move_window>
 801116a:	4603      	mov	r3, r0
 801116c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801116e:	7dfb      	ldrb	r3, [r7, #23]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d136      	bne.n	80111e2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011182:	2304      	movs	r3, #4
 8011184:	75fb      	strb	r3, [r7, #23]
 8011186:	e031      	b.n	80111ec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a1b      	ldr	r3, [r3, #32]
 801118c:	330b      	adds	r3, #11
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011194:	73bb      	strb	r3, [r7, #14]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	7bba      	ldrb	r2, [r7, #14]
 801119a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801119c:	7bfb      	ldrb	r3, [r7, #15]
 801119e:	2be5      	cmp	r3, #229	; 0xe5
 80111a0:	d011      	beq.n	80111c6 <dir_read+0x7e>
 80111a2:	7bfb      	ldrb	r3, [r7, #15]
 80111a4:	2b2e      	cmp	r3, #46	; 0x2e
 80111a6:	d00e      	beq.n	80111c6 <dir_read+0x7e>
 80111a8:	7bbb      	ldrb	r3, [r7, #14]
 80111aa:	2b0f      	cmp	r3, #15
 80111ac:	d00b      	beq.n	80111c6 <dir_read+0x7e>
 80111ae:	7bbb      	ldrb	r3, [r7, #14]
 80111b0:	f023 0320 	bic.w	r3, r3, #32
 80111b4:	2b08      	cmp	r3, #8
 80111b6:	bf0c      	ite	eq
 80111b8:	2301      	moveq	r3, #1
 80111ba:	2300      	movne	r3, #0
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	461a      	mov	r2, r3
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d00f      	beq.n	80111e6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80111c6:	2100      	movs	r1, #0
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7ff fe61 	bl	8010e90 <dir_next>
 80111ce:	4603      	mov	r3, r0
 80111d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80111d2:	7dfb      	ldrb	r3, [r7, #23]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d108      	bne.n	80111ea <dir_read+0xa2>
	while (dp->sect) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	69db      	ldr	r3, [r3, #28]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1be      	bne.n	801115e <dir_read+0x16>
 80111e0:	e004      	b.n	80111ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80111e2:	bf00      	nop
 80111e4:	e002      	b.n	80111ec <dir_read+0xa4>
				break;
 80111e6:	bf00      	nop
 80111e8:	e000      	b.n	80111ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80111ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80111ec:	7dfb      	ldrb	r3, [r7, #23]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d002      	beq.n	80111f8 <dir_read+0xb0>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	61da      	str	r2, [r3, #28]
	return res;
 80111f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3718      	adds	r7, #24
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b086      	sub	sp, #24
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011210:	2100      	movs	r1, #0
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff fdb3 	bl	8010d7e <dir_sdi>
 8011218:	4603      	mov	r3, r0
 801121a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801121c:	7dfb      	ldrb	r3, [r7, #23]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <dir_find+0x24>
 8011222:	7dfb      	ldrb	r3, [r7, #23]
 8011224:	e03e      	b.n	80112a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	69db      	ldr	r3, [r3, #28]
 801122a:	4619      	mov	r1, r3
 801122c:	6938      	ldr	r0, [r7, #16]
 801122e:	f7ff f9cd 	bl	80105cc <move_window>
 8011232:	4603      	mov	r3, r0
 8011234:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011236:	7dfb      	ldrb	r3, [r7, #23]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d12f      	bne.n	801129c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a1b      	ldr	r3, [r3, #32]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <dir_find+0x4e>
 801124a:	2304      	movs	r3, #4
 801124c:	75fb      	strb	r3, [r7, #23]
 801124e:	e028      	b.n	80112a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a1b      	ldr	r3, [r3, #32]
 8011254:	330b      	adds	r3, #11
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801125c:	b2da      	uxtb	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a1b      	ldr	r3, [r3, #32]
 8011266:	330b      	adds	r3, #11
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	f003 0308 	and.w	r3, r3, #8
 801126e:	2b00      	cmp	r3, #0
 8011270:	d10a      	bne.n	8011288 <dir_find+0x86>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6a18      	ldr	r0, [r3, #32]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	3324      	adds	r3, #36	; 0x24
 801127a:	220b      	movs	r2, #11
 801127c:	4619      	mov	r1, r3
 801127e:	f7fe ffb2 	bl	80101e6 <mem_cmp>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00b      	beq.n	80112a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011288:	2100      	movs	r1, #0
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff fe00 	bl	8010e90 <dir_next>
 8011290:	4603      	mov	r3, r0
 8011292:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011294:	7dfb      	ldrb	r3, [r7, #23]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0c5      	beq.n	8011226 <dir_find+0x24>
 801129a:	e002      	b.n	80112a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 801129c:	bf00      	nop
 801129e:	e000      	b.n	80112a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80112a0:	bf00      	nop

	return res;
 80112a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3718      	adds	r7, #24
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80112ba:	2101      	movs	r1, #1
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff febd 	bl	801103c <dir_alloc>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80112c6:	7bfb      	ldrb	r3, [r7, #15]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d11c      	bne.n	8011306 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	69db      	ldr	r3, [r3, #28]
 80112d0:	4619      	mov	r1, r3
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	f7ff f97a 	bl	80105cc <move_window>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d111      	bne.n	8011306 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	2220      	movs	r2, #32
 80112e8:	2100      	movs	r1, #0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fe ff61 	bl	80101b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6a18      	ldr	r0, [r3, #32]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	3324      	adds	r3, #36	; 0x24
 80112f8:	220b      	movs	r2, #11
 80112fa:	4619      	mov	r1, r3
 80112fc:	f7fe ff38 	bl	8010170 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2201      	movs	r2, #1
 8011304:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011306:	7bfb      	ldrb	r3, [r7, #15]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	69db      	ldr	r3, [r3, #28]
 8011322:	4619      	mov	r1, r3
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f7ff f951 	bl	80105cc <move_window>
 801132a:	4603      	mov	r3, r0
 801132c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801132e:	7afb      	ldrb	r3, [r7, #11]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d106      	bne.n	8011342 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a1b      	ldr	r3, [r3, #32]
 8011338:	22e5      	movs	r2, #229	; 0xe5
 801133a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2201      	movs	r2, #1
 8011340:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011342:	7afb      	ldrb	r3, [r7, #11]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3710      	adds	r7, #16
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b088      	sub	sp, #32
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	60fb      	str	r3, [r7, #12]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3324      	adds	r3, #36	; 0x24
 8011360:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011362:	220b      	movs	r2, #11
 8011364:	2120      	movs	r1, #32
 8011366:	68b8      	ldr	r0, [r7, #8]
 8011368:	f7fe ff23 	bl	80101b2 <mem_set>
	si = i = 0; ni = 8;
 801136c:	2300      	movs	r3, #0
 801136e:	613b      	str	r3, [r7, #16]
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	617b      	str	r3, [r7, #20]
 8011374:	2308      	movs	r3, #8
 8011376:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	4413      	add	r3, r2
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	2b2e      	cmp	r3, #46	; 0x2e
 8011382:	d12f      	bne.n	80113e4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	617a      	str	r2, [r7, #20]
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	4413      	add	r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011392:	7ffb      	ldrb	r3, [r7, #31]
 8011394:	2b2e      	cmp	r3, #46	; 0x2e
 8011396:	d10a      	bne.n	80113ae <create_name+0x62>
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	2b02      	cmp	r3, #2
 801139c:	d807      	bhi.n	80113ae <create_name+0x62>
			sfn[i++] = c;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	1c5a      	adds	r2, r3, #1
 80113a2:	613a      	str	r2, [r7, #16]
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	4413      	add	r3, r2
 80113a8:	7ffa      	ldrb	r2, [r7, #31]
 80113aa:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80113ac:	e7ea      	b.n	8011384 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80113ae:	7ffb      	ldrb	r3, [r7, #31]
 80113b0:	2b2f      	cmp	r3, #47	; 0x2f
 80113b2:	d007      	beq.n	80113c4 <create_name+0x78>
 80113b4:	7ffb      	ldrb	r3, [r7, #31]
 80113b6:	2b5c      	cmp	r3, #92	; 0x5c
 80113b8:	d004      	beq.n	80113c4 <create_name+0x78>
 80113ba:	7ffb      	ldrb	r3, [r7, #31]
 80113bc:	2b20      	cmp	r3, #32
 80113be:	d901      	bls.n	80113c4 <create_name+0x78>
 80113c0:	2306      	movs	r3, #6
 80113c2:	e084      	b.n	80114ce <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	441a      	add	r2, r3
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80113ce:	7ffb      	ldrb	r3, [r7, #31]
 80113d0:	2b20      	cmp	r3, #32
 80113d2:	d801      	bhi.n	80113d8 <create_name+0x8c>
 80113d4:	2224      	movs	r2, #36	; 0x24
 80113d6:	e000      	b.n	80113da <create_name+0x8e>
 80113d8:	2220      	movs	r2, #32
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	330b      	adds	r3, #11
 80113de:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80113e0:	2300      	movs	r3, #0
 80113e2:	e074      	b.n	80114ce <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	1c5a      	adds	r2, r3, #1
 80113e8:	617a      	str	r2, [r7, #20]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	4413      	add	r3, r2
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80113f2:	7ffb      	ldrb	r3, [r7, #31]
 80113f4:	2b20      	cmp	r3, #32
 80113f6:	d94e      	bls.n	8011496 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80113f8:	7ffb      	ldrb	r3, [r7, #31]
 80113fa:	2b2f      	cmp	r3, #47	; 0x2f
 80113fc:	d006      	beq.n	801140c <create_name+0xc0>
 80113fe:	7ffb      	ldrb	r3, [r7, #31]
 8011400:	2b5c      	cmp	r3, #92	; 0x5c
 8011402:	d110      	bne.n	8011426 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011404:	e002      	b.n	801140c <create_name+0xc0>
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	3301      	adds	r3, #1
 801140a:	617b      	str	r3, [r7, #20]
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	4413      	add	r3, r2
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b2f      	cmp	r3, #47	; 0x2f
 8011416:	d0f6      	beq.n	8011406 <create_name+0xba>
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	4413      	add	r3, r2
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b5c      	cmp	r3, #92	; 0x5c
 8011422:	d0f0      	beq.n	8011406 <create_name+0xba>
			break;
 8011424:	e038      	b.n	8011498 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011426:	7ffb      	ldrb	r3, [r7, #31]
 8011428:	2b2e      	cmp	r3, #46	; 0x2e
 801142a:	d003      	beq.n	8011434 <create_name+0xe8>
 801142c:	693a      	ldr	r2, [r7, #16]
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	429a      	cmp	r2, r3
 8011432:	d30c      	bcc.n	801144e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	2b0b      	cmp	r3, #11
 8011438:	d002      	beq.n	8011440 <create_name+0xf4>
 801143a:	7ffb      	ldrb	r3, [r7, #31]
 801143c:	2b2e      	cmp	r3, #46	; 0x2e
 801143e:	d001      	beq.n	8011444 <create_name+0xf8>
 8011440:	2306      	movs	r3, #6
 8011442:	e044      	b.n	80114ce <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011444:	2308      	movs	r3, #8
 8011446:	613b      	str	r3, [r7, #16]
 8011448:	230b      	movs	r3, #11
 801144a:	61bb      	str	r3, [r7, #24]
			continue;
 801144c:	e022      	b.n	8011494 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801144e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011452:	2b00      	cmp	r3, #0
 8011454:	da04      	bge.n	8011460 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011456:	7ffb      	ldrb	r3, [r7, #31]
 8011458:	3b80      	subs	r3, #128	; 0x80
 801145a:	4a1f      	ldr	r2, [pc, #124]	; (80114d8 <create_name+0x18c>)
 801145c:	5cd3      	ldrb	r3, [r2, r3]
 801145e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011460:	7ffb      	ldrb	r3, [r7, #31]
 8011462:	4619      	mov	r1, r3
 8011464:	481d      	ldr	r0, [pc, #116]	; (80114dc <create_name+0x190>)
 8011466:	f7fe fee5 	bl	8010234 <chk_chr>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d001      	beq.n	8011474 <create_name+0x128>
 8011470:	2306      	movs	r3, #6
 8011472:	e02c      	b.n	80114ce <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011474:	7ffb      	ldrb	r3, [r7, #31]
 8011476:	2b60      	cmp	r3, #96	; 0x60
 8011478:	d905      	bls.n	8011486 <create_name+0x13a>
 801147a:	7ffb      	ldrb	r3, [r7, #31]
 801147c:	2b7a      	cmp	r3, #122	; 0x7a
 801147e:	d802      	bhi.n	8011486 <create_name+0x13a>
 8011480:	7ffb      	ldrb	r3, [r7, #31]
 8011482:	3b20      	subs	r3, #32
 8011484:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	1c5a      	adds	r2, r3, #1
 801148a:	613a      	str	r2, [r7, #16]
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	4413      	add	r3, r2
 8011490:	7ffa      	ldrb	r2, [r7, #31]
 8011492:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011494:	e7a6      	b.n	80113e4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011496:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	441a      	add	r2, r3
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d101      	bne.n	80114ac <create_name+0x160>
 80114a8:	2306      	movs	r3, #6
 80114aa:	e010      	b.n	80114ce <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2be5      	cmp	r3, #229	; 0xe5
 80114b2:	d102      	bne.n	80114ba <create_name+0x16e>
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2205      	movs	r2, #5
 80114b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80114ba:	7ffb      	ldrb	r3, [r7, #31]
 80114bc:	2b20      	cmp	r3, #32
 80114be:	d801      	bhi.n	80114c4 <create_name+0x178>
 80114c0:	2204      	movs	r2, #4
 80114c2:	e000      	b.n	80114c6 <create_name+0x17a>
 80114c4:	2200      	movs	r2, #0
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	330b      	adds	r3, #11
 80114ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80114cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3720      	adds	r7, #32
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	08018c4c 	.word	0x08018c4c
 80114dc:	08018bfc 	.word	0x08018bfc

080114e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	2b2f      	cmp	r3, #47	; 0x2f
 80114fa:	d00b      	beq.n	8011514 <follow_path+0x34>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2b5c      	cmp	r3, #92	; 0x5c
 8011502:	d007      	beq.n	8011514 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	699a      	ldr	r2, [r3, #24]
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	609a      	str	r2, [r3, #8]
 801150c:	e00d      	b.n	801152a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	3301      	adds	r3, #1
 8011512:	603b      	str	r3, [r7, #0]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b2f      	cmp	r3, #47	; 0x2f
 801151a:	d0f8      	beq.n	801150e <follow_path+0x2e>
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	2b5c      	cmp	r3, #92	; 0x5c
 8011522:	d0f4      	beq.n	801150e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	2200      	movs	r2, #0
 8011528:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	2b1f      	cmp	r3, #31
 8011530:	d80a      	bhi.n	8011548 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2280      	movs	r2, #128	; 0x80
 8011536:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801153a:	2100      	movs	r1, #0
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7ff fc1e 	bl	8010d7e <dir_sdi>
 8011542:	4603      	mov	r3, r0
 8011544:	75fb      	strb	r3, [r7, #23]
 8011546:	e05b      	b.n	8011600 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011548:	463b      	mov	r3, r7
 801154a:	4619      	mov	r1, r3
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff fefd 	bl	801134c <create_name>
 8011552:	4603      	mov	r3, r0
 8011554:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011556:	7dfb      	ldrb	r3, [r7, #23]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d14c      	bne.n	80115f6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7ff fe50 	bl	8011202 <dir_find>
 8011562:	4603      	mov	r3, r0
 8011564:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801156c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d01b      	beq.n	80115ac <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	2b04      	cmp	r3, #4
 8011578:	d13f      	bne.n	80115fa <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801157a:	7afb      	ldrb	r3, [r7, #11]
 801157c:	f003 0320 	and.w	r3, r3, #32
 8011580:	2b00      	cmp	r3, #0
 8011582:	d00b      	beq.n	801159c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011584:	7afb      	ldrb	r3, [r7, #11]
 8011586:	f003 0304 	and.w	r3, r3, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d031      	beq.n	80115f2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2280      	movs	r2, #128	; 0x80
 8011592:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011596:	2300      	movs	r3, #0
 8011598:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801159a:	e02e      	b.n	80115fa <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801159c:	7afb      	ldrb	r3, [r7, #11]
 801159e:	f003 0304 	and.w	r3, r3, #4
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d129      	bne.n	80115fa <follow_path+0x11a>
 80115a6:	2305      	movs	r3, #5
 80115a8:	75fb      	strb	r3, [r7, #23]
				break;
 80115aa:	e026      	b.n	80115fa <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80115ac:	7afb      	ldrb	r3, [r7, #11]
 80115ae:	f003 0304 	and.w	r3, r3, #4
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d123      	bne.n	80115fe <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	799b      	ldrb	r3, [r3, #6]
 80115ba:	f003 0310 	and.w	r3, r3, #16
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d102      	bne.n	80115c8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80115c2:	2305      	movs	r3, #5
 80115c4:	75fb      	strb	r3, [r7, #23]
 80115c6:	e01b      	b.n	8011600 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	68fa      	ldr	r2, [r7, #12]
 80115d4:	8992      	ldrh	r2, [r2, #12]
 80115d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80115da:	fb02 f200 	mul.w	r2, r2, r0
 80115de:	1a9b      	subs	r3, r3, r2
 80115e0:	440b      	add	r3, r1
 80115e2:	4619      	mov	r1, r3
 80115e4:	68f8      	ldr	r0, [r7, #12]
 80115e6:	f7ff fd70 	bl	80110ca <ld_clust>
 80115ea:	4602      	mov	r2, r0
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	609a      	str	r2, [r3, #8]
 80115f0:	e7aa      	b.n	8011548 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80115f2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80115f4:	e7a8      	b.n	8011548 <follow_path+0x68>
			if (res != FR_OK) break;
 80115f6:	bf00      	nop
 80115f8:	e002      	b.n	8011600 <follow_path+0x120>
				break;
 80115fa:	bf00      	nop
 80115fc:	e000      	b.n	8011600 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80115fe:	bf00      	nop
			}
		}
	}

	return res;
 8011600:	7dfb      	ldrb	r3, [r7, #23]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3718      	adds	r7, #24
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801160a:	b480      	push	{r7}
 801160c:	b087      	sub	sp, #28
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011612:	f04f 33ff 	mov.w	r3, #4294967295
 8011616:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d031      	beq.n	8011684 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	e002      	b.n	801162e <get_ldnumber+0x24>
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	3301      	adds	r3, #1
 801162c:	617b      	str	r3, [r7, #20]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	2b20      	cmp	r3, #32
 8011634:	d903      	bls.n	801163e <get_ldnumber+0x34>
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	2b3a      	cmp	r3, #58	; 0x3a
 801163c:	d1f4      	bne.n	8011628 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2b3a      	cmp	r3, #58	; 0x3a
 8011644:	d11c      	bne.n	8011680 <get_ldnumber+0x76>
			tp = *path;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	60fa      	str	r2, [r7, #12]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	3b30      	subs	r3, #48	; 0x30
 8011656:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b09      	cmp	r3, #9
 801165c:	d80e      	bhi.n	801167c <get_ldnumber+0x72>
 801165e:	68fa      	ldr	r2, [r7, #12]
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	429a      	cmp	r2, r3
 8011664:	d10a      	bne.n	801167c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d107      	bne.n	801167c <get_ldnumber+0x72>
					vol = (int)i;
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	3301      	adds	r3, #1
 8011674:	617b      	str	r3, [r7, #20]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	e002      	b.n	8011686 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011680:	2300      	movs	r3, #0
 8011682:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011684:	693b      	ldr	r3, [r7, #16]
}
 8011686:	4618      	mov	r0, r3
 8011688:	371c      	adds	r7, #28
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr
	...

08011694 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	70da      	strb	r2, [r3, #3]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f04f 32ff 	mov.w	r2, #4294967295
 80116aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80116ac:	6839      	ldr	r1, [r7, #0]
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7fe ff8c 	bl	80105cc <move_window>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d001      	beq.n	80116be <check_fs+0x2a>
 80116ba:	2304      	movs	r3, #4
 80116bc:	e038      	b.n	8011730 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	3338      	adds	r3, #56	; 0x38
 80116c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe fcd0 	bl	801006c <ld_word>
 80116cc:	4603      	mov	r3, r0
 80116ce:	461a      	mov	r2, r3
 80116d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d001      	beq.n	80116dc <check_fs+0x48>
 80116d8:	2303      	movs	r3, #3
 80116da:	e029      	b.n	8011730 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80116e2:	2be9      	cmp	r3, #233	; 0xe9
 80116e4:	d009      	beq.n	80116fa <check_fs+0x66>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80116ec:	2beb      	cmp	r3, #235	; 0xeb
 80116ee:	d11e      	bne.n	801172e <check_fs+0x9a>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80116f6:	2b90      	cmp	r3, #144	; 0x90
 80116f8:	d119      	bne.n	801172e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	3338      	adds	r3, #56	; 0x38
 80116fe:	3336      	adds	r3, #54	; 0x36
 8011700:	4618      	mov	r0, r3
 8011702:	f7fe fccb 	bl	801009c <ld_dword>
 8011706:	4603      	mov	r3, r0
 8011708:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801170c:	4a0a      	ldr	r2, [pc, #40]	; (8011738 <check_fs+0xa4>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d101      	bne.n	8011716 <check_fs+0x82>
 8011712:	2300      	movs	r3, #0
 8011714:	e00c      	b.n	8011730 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	3338      	adds	r3, #56	; 0x38
 801171a:	3352      	adds	r3, #82	; 0x52
 801171c:	4618      	mov	r0, r3
 801171e:	f7fe fcbd 	bl	801009c <ld_dword>
 8011722:	4602      	mov	r2, r0
 8011724:	4b05      	ldr	r3, [pc, #20]	; (801173c <check_fs+0xa8>)
 8011726:	429a      	cmp	r2, r3
 8011728:	d101      	bne.n	801172e <check_fs+0x9a>
 801172a:	2300      	movs	r3, #0
 801172c:	e000      	b.n	8011730 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801172e:	2302      	movs	r3, #2
}
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	00544146 	.word	0x00544146
 801173c:	33544146 	.word	0x33544146

08011740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b096      	sub	sp, #88	; 0x58
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4613      	mov	r3, r2
 801174c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2200      	movs	r2, #0
 8011752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7ff ff58 	bl	801160a <get_ldnumber>
 801175a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801175c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175e:	2b00      	cmp	r3, #0
 8011760:	da01      	bge.n	8011766 <find_volume+0x26>
 8011762:	230b      	movs	r3, #11
 8011764:	e268      	b.n	8011c38 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011766:	4ab0      	ldr	r2, [pc, #704]	; (8011a28 <find_volume+0x2e8>)
 8011768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801176e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <find_volume+0x3a>
 8011776:	230c      	movs	r3, #12
 8011778:	e25e      	b.n	8011c38 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801177e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011780:	79fb      	ldrb	r3, [r7, #7]
 8011782:	f023 0301 	bic.w	r3, r3, #1
 8011786:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d01a      	beq.n	80117c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011792:	785b      	ldrb	r3, [r3, #1]
 8011794:	4618      	mov	r0, r3
 8011796:	f7fe fbcb 	bl	800ff30 <disk_status>
 801179a:	4603      	mov	r3, r0
 801179c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80117a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10c      	bne.n	80117c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80117ac:	79fb      	ldrb	r3, [r7, #7]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d007      	beq.n	80117c2 <find_volume+0x82>
 80117b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117b6:	f003 0304 	and.w	r3, r3, #4
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80117be:	230a      	movs	r3, #10
 80117c0:	e23a      	b.n	8011c38 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80117c2:	2300      	movs	r3, #0
 80117c4:	e238      	b.n	8011c38 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80117c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c8:	2200      	movs	r2, #0
 80117ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80117cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80117d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d6:	785b      	ldrb	r3, [r3, #1]
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fe fbc3 	bl	800ff64 <disk_initialize>
 80117de:	4603      	mov	r3, r0
 80117e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80117e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117e8:	f003 0301 	and.w	r3, r3, #1
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80117f0:	2303      	movs	r3, #3
 80117f2:	e221      	b.n	8011c38 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d007      	beq.n	801180a <find_volume+0xca>
 80117fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117fe:	f003 0304 	and.w	r3, r3, #4
 8011802:	2b00      	cmp	r3, #0
 8011804:	d001      	beq.n	801180a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011806:	230a      	movs	r3, #10
 8011808:	e216      	b.n	8011c38 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	7858      	ldrb	r0, [r3, #1]
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	330c      	adds	r3, #12
 8011812:	461a      	mov	r2, r3
 8011814:	2102      	movs	r1, #2
 8011816:	f7fe fc0b 	bl	8010030 <disk_ioctl>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d001      	beq.n	8011824 <find_volume+0xe4>
 8011820:	2301      	movs	r3, #1
 8011822:	e209      	b.n	8011c38 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011826:	899b      	ldrh	r3, [r3, #12]
 8011828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801182c:	d80d      	bhi.n	801184a <find_volume+0x10a>
 801182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011830:	899b      	ldrh	r3, [r3, #12]
 8011832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011836:	d308      	bcc.n	801184a <find_volume+0x10a>
 8011838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183a:	899b      	ldrh	r3, [r3, #12]
 801183c:	461a      	mov	r2, r3
 801183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	3b01      	subs	r3, #1
 8011844:	4013      	ands	r3, r2
 8011846:	2b00      	cmp	r3, #0
 8011848:	d001      	beq.n	801184e <find_volume+0x10e>
 801184a:	2301      	movs	r3, #1
 801184c:	e1f4      	b.n	8011c38 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011856:	f7ff ff1d 	bl	8011694 <check_fs>
 801185a:	4603      	mov	r3, r0
 801185c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011864:	2b02      	cmp	r3, #2
 8011866:	d14b      	bne.n	8011900 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011868:	2300      	movs	r3, #0
 801186a:	643b      	str	r3, [r7, #64]	; 0x40
 801186c:	e01f      	b.n	80118ae <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011870:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011876:	011b      	lsls	r3, r3, #4
 8011878:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801187c:	4413      	add	r3, r2
 801187e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011882:	3304      	adds	r3, #4
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d006      	beq.n	8011898 <find_volume+0x158>
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	3308      	adds	r3, #8
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe fc04 	bl	801009c <ld_dword>
 8011894:	4602      	mov	r2, r0
 8011896:	e000      	b.n	801189a <find_volume+0x15a>
 8011898:	2200      	movs	r2, #0
 801189a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80118a2:	440b      	add	r3, r1
 80118a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80118a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118aa:	3301      	adds	r3, #1
 80118ac:	643b      	str	r3, [r7, #64]	; 0x40
 80118ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118b0:	2b03      	cmp	r3, #3
 80118b2:	d9dc      	bls.n	801186e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80118b4:	2300      	movs	r3, #0
 80118b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80118b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <find_volume+0x184>
 80118be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118c0:	3b01      	subs	r3, #1
 80118c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80118c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80118cc:	4413      	add	r3, r2
 80118ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80118d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80118d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d005      	beq.n	80118e6 <find_volume+0x1a6>
 80118da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80118dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80118de:	f7ff fed9 	bl	8011694 <check_fs>
 80118e2:	4603      	mov	r3, r0
 80118e4:	e000      	b.n	80118e8 <find_volume+0x1a8>
 80118e6:	2303      	movs	r3, #3
 80118e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80118ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d905      	bls.n	8011900 <find_volume+0x1c0>
 80118f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f6:	3301      	adds	r3, #1
 80118f8:	643b      	str	r3, [r7, #64]	; 0x40
 80118fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118fc:	2b03      	cmp	r3, #3
 80118fe:	d9e1      	bls.n	80118c4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011904:	2b04      	cmp	r3, #4
 8011906:	d101      	bne.n	801190c <find_volume+0x1cc>
 8011908:	2301      	movs	r3, #1
 801190a:	e195      	b.n	8011c38 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801190c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011910:	2b01      	cmp	r3, #1
 8011912:	d901      	bls.n	8011918 <find_volume+0x1d8>
 8011914:	230d      	movs	r3, #13
 8011916:	e18f      	b.n	8011c38 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	3338      	adds	r3, #56	; 0x38
 801191c:	330b      	adds	r3, #11
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe fba4 	bl	801006c <ld_word>
 8011924:	4603      	mov	r3, r0
 8011926:	461a      	mov	r2, r3
 8011928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192a:	899b      	ldrh	r3, [r3, #12]
 801192c:	429a      	cmp	r2, r3
 801192e:	d001      	beq.n	8011934 <find_volume+0x1f4>
 8011930:	230d      	movs	r3, #13
 8011932:	e181      	b.n	8011c38 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	3338      	adds	r3, #56	; 0x38
 8011938:	3316      	adds	r3, #22
 801193a:	4618      	mov	r0, r3
 801193c:	f7fe fb96 	bl	801006c <ld_word>
 8011940:	4603      	mov	r3, r0
 8011942:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011946:	2b00      	cmp	r3, #0
 8011948:	d106      	bne.n	8011958 <find_volume+0x218>
 801194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194c:	3338      	adds	r3, #56	; 0x38
 801194e:	3324      	adds	r3, #36	; 0x24
 8011950:	4618      	mov	r0, r3
 8011952:	f7fe fba3 	bl	801009c <ld_dword>
 8011956:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801195c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011960:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011966:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196a:	789b      	ldrb	r3, [r3, #2]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d005      	beq.n	801197c <find_volume+0x23c>
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	789b      	ldrb	r3, [r3, #2]
 8011974:	2b02      	cmp	r3, #2
 8011976:	d001      	beq.n	801197c <find_volume+0x23c>
 8011978:	230d      	movs	r3, #13
 801197a:	e15d      	b.n	8011c38 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	789b      	ldrb	r3, [r3, #2]
 8011980:	461a      	mov	r2, r3
 8011982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011984:	fb02 f303 	mul.w	r3, r2, r3
 8011988:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011990:	b29a      	uxth	r2, r3
 8011992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011994:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011998:	895b      	ldrh	r3, [r3, #10]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d008      	beq.n	80119b0 <find_volume+0x270>
 801199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a0:	895b      	ldrh	r3, [r3, #10]
 80119a2:	461a      	mov	r2, r3
 80119a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a6:	895b      	ldrh	r3, [r3, #10]
 80119a8:	3b01      	subs	r3, #1
 80119aa:	4013      	ands	r3, r2
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <find_volume+0x274>
 80119b0:	230d      	movs	r3, #13
 80119b2:	e141      	b.n	8011c38 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80119b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b6:	3338      	adds	r3, #56	; 0x38
 80119b8:	3311      	adds	r3, #17
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fe fb56 	bl	801006c <ld_word>
 80119c0:	4603      	mov	r3, r0
 80119c2:	461a      	mov	r2, r3
 80119c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80119c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ca:	891b      	ldrh	r3, [r3, #8]
 80119cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119ce:	8992      	ldrh	r2, [r2, #12]
 80119d0:	0952      	lsrs	r2, r2, #5
 80119d2:	b292      	uxth	r2, r2
 80119d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80119d8:	fb02 f201 	mul.w	r2, r2, r1
 80119dc:	1a9b      	subs	r3, r3, r2
 80119de:	b29b      	uxth	r3, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <find_volume+0x2a8>
 80119e4:	230d      	movs	r3, #13
 80119e6:	e127      	b.n	8011c38 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80119e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ea:	3338      	adds	r3, #56	; 0x38
 80119ec:	3313      	adds	r3, #19
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7fe fb3c 	bl	801006c <ld_word>
 80119f4:	4603      	mov	r3, r0
 80119f6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80119f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <find_volume+0x2cc>
 80119fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a00:	3338      	adds	r3, #56	; 0x38
 8011a02:	3320      	adds	r3, #32
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe fb49 	bl	801009c <ld_dword>
 8011a0a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	3338      	adds	r3, #56	; 0x38
 8011a10:	330e      	adds	r3, #14
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fe fb2a 	bl	801006c <ld_word>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d104      	bne.n	8011a2c <find_volume+0x2ec>
 8011a22:	230d      	movs	r3, #13
 8011a24:	e108      	b.n	8011c38 <find_volume+0x4f8>
 8011a26:	bf00      	nop
 8011a28:	2003c478 	.word	0x2003c478

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011a2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a30:	4413      	add	r3, r2
 8011a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a34:	8911      	ldrh	r1, [r2, #8]
 8011a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a38:	8992      	ldrh	r2, [r2, #12]
 8011a3a:	0952      	lsrs	r2, r2, #5
 8011a3c:	b292      	uxth	r2, r2
 8011a3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8011a42:	b292      	uxth	r2, r2
 8011a44:	4413      	add	r3, r2
 8011a46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d201      	bcs.n	8011a54 <find_volume+0x314>
 8011a50:	230d      	movs	r3, #13
 8011a52:	e0f1      	b.n	8011c38 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a5c:	8952      	ldrh	r2, [r2, #10]
 8011a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a62:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <find_volume+0x32e>
 8011a6a:	230d      	movs	r3, #13
 8011a6c:	e0e4      	b.n	8011c38 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011a6e:	2303      	movs	r3, #3
 8011a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d802      	bhi.n	8011a84 <find_volume+0x344>
 8011a7e:	2302      	movs	r3, #2
 8011a80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d802      	bhi.n	8011a94 <find_volume+0x354>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	1c9a      	adds	r2, r3, #2
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011aa0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011aa2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa6:	441a      	add	r2, r3
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aaa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab0:	441a      	add	r2, r3
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011ab6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011aba:	2b03      	cmp	r3, #3
 8011abc:	d11e      	bne.n	8011afc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac0:	3338      	adds	r3, #56	; 0x38
 8011ac2:	332a      	adds	r3, #42	; 0x2a
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fe fad1 	bl	801006c <ld_word>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d001      	beq.n	8011ad4 <find_volume+0x394>
 8011ad0:	230d      	movs	r3, #13
 8011ad2:	e0b1      	b.n	8011c38 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	891b      	ldrh	r3, [r3, #8]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d001      	beq.n	8011ae0 <find_volume+0x3a0>
 8011adc:	230d      	movs	r3, #13
 8011ade:	e0ab      	b.n	8011c38 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae2:	3338      	adds	r3, #56	; 0x38
 8011ae4:	332c      	adds	r3, #44	; 0x2c
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fe fad8 	bl	801009c <ld_dword>
 8011aec:	4602      	mov	r2, r0
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af4:	69db      	ldr	r3, [r3, #28]
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	647b      	str	r3, [r7, #68]	; 0x44
 8011afa:	e01f      	b.n	8011b3c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	891b      	ldrh	r3, [r3, #8]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <find_volume+0x3c8>
 8011b04:	230d      	movs	r3, #13
 8011b06:	e097      	b.n	8011c38 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0e:	441a      	add	r2, r3
 8011b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b12:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d103      	bne.n	8011b24 <find_volume+0x3e4>
 8011b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1e:	69db      	ldr	r3, [r3, #28]
 8011b20:	005b      	lsls	r3, r3, #1
 8011b22:	e00a      	b.n	8011b3a <find_volume+0x3fa>
 8011b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b26:	69da      	ldr	r2, [r3, #28]
 8011b28:	4613      	mov	r3, r2
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	4413      	add	r3, r2
 8011b2e:	085a      	lsrs	r2, r3, #1
 8011b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b32:	69db      	ldr	r3, [r3, #28]
 8011b34:	f003 0301 	and.w	r3, r3, #1
 8011b38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011b3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3e:	6a1a      	ldr	r2, [r3, #32]
 8011b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b42:	899b      	ldrh	r3, [r3, #12]
 8011b44:	4619      	mov	r1, r3
 8011b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b48:	440b      	add	r3, r1
 8011b4a:	3b01      	subs	r3, #1
 8011b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b4e:	8989      	ldrh	r1, [r1, #12]
 8011b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d201      	bcs.n	8011b5c <find_volume+0x41c>
 8011b58:	230d      	movs	r3, #13
 8011b5a:	e06d      	b.n	8011c38 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b62:	615a      	str	r2, [r3, #20]
 8011b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b66:	695a      	ldr	r2, [r3, #20]
 8011b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6e:	2280      	movs	r2, #128	; 0x80
 8011b70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	d149      	bne.n	8011c0e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7c:	3338      	adds	r3, #56	; 0x38
 8011b7e:	3330      	adds	r3, #48	; 0x30
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe fa73 	bl	801006c <ld_word>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d140      	bne.n	8011c0e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b8e:	3301      	adds	r3, #1
 8011b90:	4619      	mov	r1, r3
 8011b92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b94:	f7fe fd1a 	bl	80105cc <move_window>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d137      	bne.n	8011c0e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba6:	3338      	adds	r3, #56	; 0x38
 8011ba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fe fa5d 	bl	801006c <ld_word>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d127      	bne.n	8011c0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc0:	3338      	adds	r3, #56	; 0x38
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fe fa6a 	bl	801009c <ld_dword>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	4b1d      	ldr	r3, [pc, #116]	; (8011c40 <find_volume+0x500>)
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d11e      	bne.n	8011c0e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd2:	3338      	adds	r3, #56	; 0x38
 8011bd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7fe fa5f 	bl	801009c <ld_dword>
 8011bde:	4602      	mov	r2, r0
 8011be0:	4b18      	ldr	r3, [pc, #96]	; (8011c44 <find_volume+0x504>)
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d113      	bne.n	8011c0e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be8:	3338      	adds	r3, #56	; 0x38
 8011bea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fa54 	bl	801009c <ld_dword>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfc:	3338      	adds	r3, #56	; 0x38
 8011bfe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fe fa4a 	bl	801009c <ld_dword>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011c14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011c16:	4b0c      	ldr	r3, [pc, #48]	; (8011c48 <find_volume+0x508>)
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	4b0a      	ldr	r3, [pc, #40]	; (8011c48 <find_volume+0x508>)
 8011c20:	801a      	strh	r2, [r3, #0]
 8011c22:	4b09      	ldr	r3, [pc, #36]	; (8011c48 <find_volume+0x508>)
 8011c24:	881a      	ldrh	r2, [r3, #0]
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c32:	f7fe fc63 	bl	80104fc <clear_lock>
#endif
	return FR_OK;
 8011c36:	2300      	movs	r3, #0
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3758      	adds	r7, #88	; 0x58
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	41615252 	.word	0x41615252
 8011c44:	61417272 	.word	0x61417272
 8011c48:	2003c47c 	.word	0x2003c47c

08011c4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011c56:	2309      	movs	r3, #9
 8011c58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01c      	beq.n	8011c9a <validate+0x4e>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d018      	beq.n	8011c9a <validate+0x4e>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d013      	beq.n	8011c9a <validate+0x4e>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	889a      	ldrh	r2, [r3, #4]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	88db      	ldrh	r3, [r3, #6]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d10c      	bne.n	8011c9a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	785b      	ldrb	r3, [r3, #1]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fe f952 	bl	800ff30 <disk_status>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	f003 0301 	and.w	r3, r3, #1
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <validate+0x4e>
			res = FR_OK;
 8011c96:	2300      	movs	r3, #0
 8011c98:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <validate+0x5a>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	e000      	b.n	8011ca8 <validate+0x5c>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	6013      	str	r3, [r2, #0]
	return res;
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
	...

08011cb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b088      	sub	sp, #32
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011cca:	f107 0310 	add.w	r3, r7, #16
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7ff fc9b 	bl	801160a <get_ldnumber>
 8011cd4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	da01      	bge.n	8011ce0 <f_mount+0x28>
 8011cdc:	230b      	movs	r3, #11
 8011cde:	e02b      	b.n	8011d38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011ce0:	4a17      	ldr	r2, [pc, #92]	; (8011d40 <f_mount+0x88>)
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ce8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d005      	beq.n	8011cfc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011cf0:	69b8      	ldr	r0, [r7, #24]
 8011cf2:	f7fe fc03 	bl	80104fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d002      	beq.n	8011d08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2200      	movs	r2, #0
 8011d06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011d08:	68fa      	ldr	r2, [r7, #12]
 8011d0a:	490d      	ldr	r1, [pc, #52]	; (8011d40 <f_mount+0x88>)
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d002      	beq.n	8011d1e <f_mount+0x66>
 8011d18:	79fb      	ldrb	r3, [r7, #7]
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d001      	beq.n	8011d22 <f_mount+0x6a>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e00a      	b.n	8011d38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011d22:	f107 010c 	add.w	r1, r7, #12
 8011d26:	f107 0308 	add.w	r3, r7, #8
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ff fd07 	bl	8011740 <find_volume>
 8011d32:	4603      	mov	r3, r0
 8011d34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3720      	adds	r7, #32
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	2003c478 	.word	0x2003c478

08011d44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b098      	sub	sp, #96	; 0x60
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d101      	bne.n	8011d5c <f_open+0x18>
 8011d58:	2309      	movs	r3, #9
 8011d5a:	e1ba      	b.n	80120d2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011d5c:	79fb      	ldrb	r3, [r7, #7]
 8011d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011d64:	79fa      	ldrb	r2, [r7, #7]
 8011d66:	f107 0110 	add.w	r1, r7, #16
 8011d6a:	f107 0308 	add.w	r3, r7, #8
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7ff fce6 	bl	8011740 <find_volume>
 8011d74:	4603      	mov	r3, r0
 8011d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f040 819e 	bne.w	80120c0 <f_open+0x37c>
		dj.obj.fs = fs;
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	f107 0314 	add.w	r3, r7, #20
 8011d8e:	4611      	mov	r1, r2
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7ff fba5 	bl	80114e0 <follow_path>
 8011d96:	4603      	mov	r3, r0
 8011d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d11a      	bne.n	8011dda <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011da4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011da8:	b25b      	sxtb	r3, r3
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	da03      	bge.n	8011db6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011dae:	2306      	movs	r3, #6
 8011db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011db4:	e011      	b.n	8011dda <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011db6:	79fb      	ldrb	r3, [r7, #7]
 8011db8:	f023 0301 	bic.w	r3, r3, #1
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	bf14      	ite	ne
 8011dc0:	2301      	movne	r3, #1
 8011dc2:	2300      	moveq	r3, #0
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f107 0314 	add.w	r3, r7, #20
 8011dcc:	4611      	mov	r1, r2
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe fa4c 	bl	801026c <chk_lock>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011dda:	79fb      	ldrb	r3, [r7, #7]
 8011ddc:	f003 031c 	and.w	r3, r3, #28
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d07e      	beq.n	8011ee2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8011de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d017      	beq.n	8011e1c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011df0:	2b04      	cmp	r3, #4
 8011df2:	d10e      	bne.n	8011e12 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011df4:	f7fe fa96 	bl	8010324 <enq_lock>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d006      	beq.n	8011e0c <f_open+0xc8>
 8011dfe:	f107 0314 	add.w	r3, r7, #20
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7ff fa52 	bl	80112ac <dir_register>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	e000      	b.n	8011e0e <f_open+0xca>
 8011e0c:	2312      	movs	r3, #18
 8011e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011e12:	79fb      	ldrb	r3, [r7, #7]
 8011e14:	f043 0308 	orr.w	r3, r3, #8
 8011e18:	71fb      	strb	r3, [r7, #7]
 8011e1a:	e010      	b.n	8011e3e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011e1c:	7ebb      	ldrb	r3, [r7, #26]
 8011e1e:	f003 0311 	and.w	r3, r3, #17
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <f_open+0xea>
					res = FR_DENIED;
 8011e26:	2307      	movs	r3, #7
 8011e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011e2c:	e007      	b.n	8011e3e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011e2e:	79fb      	ldrb	r3, [r7, #7]
 8011e30:	f003 0304 	and.w	r3, r3, #4
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <f_open+0xfa>
 8011e38:	2308      	movs	r3, #8
 8011e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d167      	bne.n	8011f16 <f_open+0x1d2>
 8011e46:	79fb      	ldrb	r3, [r7, #7]
 8011e48:	f003 0308 	and.w	r3, r3, #8
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d062      	beq.n	8011f16 <f_open+0x1d2>
				dw = GET_FATTIME();
 8011e50:	4ba2      	ldr	r3, [pc, #648]	; (80120dc <f_open+0x398>)
 8011e52:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e56:	330e      	adds	r3, #14
 8011e58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fe f95c 	bl	8010118 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e62:	3316      	adds	r3, #22
 8011e64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe f956 	bl	8010118 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6e:	330b      	adds	r3, #11
 8011e70:	2220      	movs	r2, #32
 8011e72:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7ff f925 	bl	80110ca <ld_clust>
 8011e80:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011e86:	2200      	movs	r2, #0
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7ff f93d 	bl	8011108 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e90:	331c      	adds	r3, #28
 8011e92:	2100      	movs	r1, #0
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fe f93f 	bl	8010118 <st_dword>
					fs->wflag = 1;
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d037      	beq.n	8011f16 <f_open+0x1d2>
						dw = fs->winsect;
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eaa:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011eac:	f107 0314 	add.w	r3, r7, #20
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7fe fe2d 	bl	8010b14 <remove_chain>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d126      	bne.n	8011f16 <f_open+0x1d2>
							res = move_window(fs, dw);
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fe fb7d 	bl	80105cc <move_window>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011edc:	3a01      	subs	r2, #1
 8011ede:	611a      	str	r2, [r3, #16]
 8011ee0:	e019      	b.n	8011f16 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d115      	bne.n	8011f16 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011eea:	7ebb      	ldrb	r3, [r7, #26]
 8011eec:	f003 0310 	and.w	r3, r3, #16
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d003      	beq.n	8011efc <f_open+0x1b8>
					res = FR_NO_FILE;
 8011ef4:	2304      	movs	r3, #4
 8011ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011efa:	e00c      	b.n	8011f16 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	f003 0302 	and.w	r3, r3, #2
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d007      	beq.n	8011f16 <f_open+0x1d2>
 8011f06:	7ebb      	ldrb	r3, [r7, #26]
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <f_open+0x1d2>
						res = FR_DENIED;
 8011f10:	2307      	movs	r3, #7
 8011f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d128      	bne.n	8011f70 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	f003 0308 	and.w	r3, r3, #8
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d003      	beq.n	8011f30 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011f28:	79fb      	ldrb	r3, [r7, #7]
 8011f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f2e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	f023 0301 	bic.w	r3, r3, #1
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	bf14      	ite	ne
 8011f48:	2301      	movne	r3, #1
 8011f4a:	2300      	moveq	r3, #0
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	461a      	mov	r2, r3
 8011f50:	f107 0314 	add.w	r3, r7, #20
 8011f54:	4611      	mov	r1, r2
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe fa06 	bl	8010368 <inc_lock>
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	691b      	ldr	r3, [r3, #16]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d102      	bne.n	8011f70 <f_open+0x22c>
 8011f6a:	2302      	movs	r3, #2
 8011f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f040 80a3 	bne.w	80120c0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f7e:	4611      	mov	r1, r2
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff f8a2 	bl	80110ca <ld_clust>
 8011f86:	4602      	mov	r2, r0
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8e:	331c      	adds	r3, #28
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe f883 	bl	801009c <ld_dword>
 8011f96:	4602      	mov	r2, r0
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011fa2:	693a      	ldr	r2, [r7, #16]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	88da      	ldrh	r2, [r3, #6]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	79fa      	ldrb	r2, [r7, #7]
 8011fb4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	3330      	adds	r3, #48	; 0x30
 8011fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe f8ed 	bl	80101b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011fd8:	79fb      	ldrb	r3, [r7, #7]
 8011fda:	f003 0320 	and.w	r3, r3, #32
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d06e      	beq.n	80120c0 <f_open+0x37c>
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d06a      	beq.n	80120c0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	68da      	ldr	r2, [r3, #12]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	895b      	ldrh	r3, [r3, #10]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	899b      	ldrh	r3, [r3, #12]
 8011ffc:	fb03 f302 	mul.w	r3, r3, r2
 8012000:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	657b      	str	r3, [r7, #84]	; 0x54
 801200e:	e016      	b.n	801203e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012014:	4618      	mov	r0, r3
 8012016:	f7fe fb96 	bl	8010746 <get_fat>
 801201a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801201e:	2b01      	cmp	r3, #1
 8012020:	d802      	bhi.n	8012028 <f_open+0x2e4>
 8012022:	2302      	movs	r3, #2
 8012024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202e:	d102      	bne.n	8012036 <f_open+0x2f2>
 8012030:	2301      	movs	r3, #1
 8012032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	657b      	str	r3, [r7, #84]	; 0x54
 801203e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012042:	2b00      	cmp	r3, #0
 8012044:	d103      	bne.n	801204e <f_open+0x30a>
 8012046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801204a:	429a      	cmp	r2, r3
 801204c:	d8e0      	bhi.n	8012010 <f_open+0x2cc>
				}
				fp->clust = clst;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012052:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012058:	2b00      	cmp	r3, #0
 801205a:	d131      	bne.n	80120c0 <f_open+0x37c>
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	899b      	ldrh	r3, [r3, #12]
 8012060:	461a      	mov	r2, r3
 8012062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012064:	fbb3 f1f2 	udiv	r1, r3, r2
 8012068:	fb02 f201 	mul.w	r2, r2, r1
 801206c:	1a9b      	subs	r3, r3, r2
 801206e:	2b00      	cmp	r3, #0
 8012070:	d026      	beq.n	80120c0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012076:	4618      	mov	r0, r3
 8012078:	f7fe fb46 	bl	8010708 <clust2sect>
 801207c:	6478      	str	r0, [r7, #68]	; 0x44
 801207e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012080:	2b00      	cmp	r3, #0
 8012082:	d103      	bne.n	801208c <f_open+0x348>
						res = FR_INT_ERR;
 8012084:	2302      	movs	r3, #2
 8012086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801208a:	e019      	b.n	80120c0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	461a      	mov	r2, r3
 8012092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012094:	fbb3 f2f2 	udiv	r2, r3, r2
 8012098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801209a:	441a      	add	r2, r3
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	7858      	ldrb	r0, [r3, #1]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	6a1a      	ldr	r2, [r3, #32]
 80120ae:	2301      	movs	r3, #1
 80120b0:	f7fd ff7e 	bl	800ffb0 <disk_read>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d002      	beq.n	80120c0 <f_open+0x37c>
 80120ba:	2301      	movs	r3, #1
 80120bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80120c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d002      	beq.n	80120ce <f_open+0x38a>
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2200      	movs	r2, #0
 80120cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80120ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3760      	adds	r7, #96	; 0x60
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	274a0000 	.word	0x274a0000

080120e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08e      	sub	sp, #56	; 0x38
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	2200      	movs	r2, #0
 80120f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f107 0214 	add.w	r2, r7, #20
 80120fe:	4611      	mov	r1, r2
 8012100:	4618      	mov	r0, r3
 8012102:	f7ff fda3 	bl	8011c4c <validate>
 8012106:	4603      	mov	r3, r0
 8012108:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801210c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012110:	2b00      	cmp	r3, #0
 8012112:	d107      	bne.n	8012124 <f_read+0x44>
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	7d5b      	ldrb	r3, [r3, #21]
 8012118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801211c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012120:	2b00      	cmp	r3, #0
 8012122:	d002      	beq.n	801212a <f_read+0x4a>
 8012124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012128:	e135      	b.n	8012396 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	7d1b      	ldrb	r3, [r3, #20]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d101      	bne.n	801213a <f_read+0x5a>
 8012136:	2307      	movs	r3, #7
 8012138:	e12d      	b.n	8012396 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	68da      	ldr	r2, [r3, #12]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	699b      	ldr	r3, [r3, #24]
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	429a      	cmp	r2, r3
 801214c:	f240 811e 	bls.w	801238c <f_read+0x2ac>
 8012150:	6a3b      	ldr	r3, [r7, #32]
 8012152:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012154:	e11a      	b.n	801238c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	699b      	ldr	r3, [r3, #24]
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	8992      	ldrh	r2, [r2, #12]
 801215e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012162:	fb02 f201 	mul.w	r2, r2, r1
 8012166:	1a9b      	subs	r3, r3, r2
 8012168:	2b00      	cmp	r3, #0
 801216a:	f040 80d5 	bne.w	8012318 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	699b      	ldr	r3, [r3, #24]
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	8992      	ldrh	r2, [r2, #12]
 8012176:	fbb3 f3f2 	udiv	r3, r3, r2
 801217a:	697a      	ldr	r2, [r7, #20]
 801217c:	8952      	ldrh	r2, [r2, #10]
 801217e:	3a01      	subs	r2, #1
 8012180:	4013      	ands	r3, r2
 8012182:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d12f      	bne.n	80121ea <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	699b      	ldr	r3, [r3, #24]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d103      	bne.n	801219a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	633b      	str	r3, [r7, #48]	; 0x30
 8012198:	e013      	b.n	80121c2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d007      	beq.n	80121b2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	699b      	ldr	r3, [r3, #24]
 80121a6:	4619      	mov	r1, r3
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f7fe fdb0 	bl	8010d0e <clmt_clust>
 80121ae:	6338      	str	r0, [r7, #48]	; 0x30
 80121b0:	e007      	b.n	80121c2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	69db      	ldr	r3, [r3, #28]
 80121b8:	4619      	mov	r1, r3
 80121ba:	4610      	mov	r0, r2
 80121bc:	f7fe fac3 	bl	8010746 <get_fat>
 80121c0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80121c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d804      	bhi.n	80121d2 <f_read+0xf2>
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2202      	movs	r2, #2
 80121cc:	755a      	strb	r2, [r3, #21]
 80121ce:	2302      	movs	r3, #2
 80121d0:	e0e1      	b.n	8012396 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80121d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d8:	d104      	bne.n	80121e4 <f_read+0x104>
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2201      	movs	r2, #1
 80121de:	755a      	strb	r2, [r3, #21]
 80121e0:	2301      	movs	r3, #1
 80121e2:	e0d8      	b.n	8012396 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80121ea:	697a      	ldr	r2, [r7, #20]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	69db      	ldr	r3, [r3, #28]
 80121f0:	4619      	mov	r1, r3
 80121f2:	4610      	mov	r0, r2
 80121f4:	f7fe fa88 	bl	8010708 <clust2sect>
 80121f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d104      	bne.n	801220a <f_read+0x12a>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2202      	movs	r2, #2
 8012204:	755a      	strb	r2, [r3, #21]
 8012206:	2302      	movs	r3, #2
 8012208:	e0c5      	b.n	8012396 <f_read+0x2b6>
			sect += csect;
 801220a:	69ba      	ldr	r2, [r7, #24]
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	4413      	add	r3, r2
 8012210:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	899b      	ldrh	r3, [r3, #12]
 8012216:	461a      	mov	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	fbb3 f3f2 	udiv	r3, r3, r2
 801221e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012222:	2b00      	cmp	r3, #0
 8012224:	d041      	beq.n	80122aa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	4413      	add	r3, r2
 801222c:	697a      	ldr	r2, [r7, #20]
 801222e:	8952      	ldrh	r2, [r2, #10]
 8012230:	4293      	cmp	r3, r2
 8012232:	d905      	bls.n	8012240 <f_read+0x160>
					cc = fs->csize - csect;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	895b      	ldrh	r3, [r3, #10]
 8012238:	461a      	mov	r2, r3
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	7858      	ldrb	r0, [r3, #1]
 8012244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012246:	69ba      	ldr	r2, [r7, #24]
 8012248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801224a:	f7fd feb1 	bl	800ffb0 <disk_read>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d004      	beq.n	801225e <f_read+0x17e>
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2201      	movs	r2, #1
 8012258:	755a      	strb	r2, [r3, #21]
 801225a:	2301      	movs	r3, #1
 801225c:	e09b      	b.n	8012396 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	7d1b      	ldrb	r3, [r3, #20]
 8012262:	b25b      	sxtb	r3, r3
 8012264:	2b00      	cmp	r3, #0
 8012266:	da18      	bge.n	801229a <f_read+0x1ba>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	6a1a      	ldr	r2, [r3, #32]
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012272:	429a      	cmp	r2, r3
 8012274:	d911      	bls.n	801229a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6a1a      	ldr	r2, [r3, #32]
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	697a      	ldr	r2, [r7, #20]
 8012280:	8992      	ldrh	r2, [r2, #12]
 8012282:	fb02 f303 	mul.w	r3, r2, r3
 8012286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012288:	18d0      	adds	r0, r2, r3
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	899b      	ldrh	r3, [r3, #12]
 8012294:	461a      	mov	r2, r3
 8012296:	f7fd ff6b 	bl	8010170 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	899b      	ldrh	r3, [r3, #12]
 801229e:	461a      	mov	r2, r3
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	fb02 f303 	mul.w	r3, r2, r3
 80122a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80122a8:	e05c      	b.n	8012364 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6a1b      	ldr	r3, [r3, #32]
 80122ae:	69ba      	ldr	r2, [r7, #24]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d02e      	beq.n	8012312 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	7d1b      	ldrb	r3, [r3, #20]
 80122b8:	b25b      	sxtb	r3, r3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	da18      	bge.n	80122f0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	7858      	ldrb	r0, [r3, #1]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6a1a      	ldr	r2, [r3, #32]
 80122cc:	2301      	movs	r3, #1
 80122ce:	f7fd fe8f 	bl	800fff0 <disk_write>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d004      	beq.n	80122e2 <f_read+0x202>
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2201      	movs	r2, #1
 80122dc:	755a      	strb	r2, [r3, #21]
 80122de:	2301      	movs	r3, #1
 80122e0:	e059      	b.n	8012396 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	7d1b      	ldrb	r3, [r3, #20]
 80122e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	7858      	ldrb	r0, [r3, #1]
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80122fa:	2301      	movs	r3, #1
 80122fc:	69ba      	ldr	r2, [r7, #24]
 80122fe:	f7fd fe57 	bl	800ffb0 <disk_read>
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d004      	beq.n	8012312 <f_read+0x232>
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2201      	movs	r2, #1
 801230c:	755a      	strb	r2, [r3, #21]
 801230e:	2301      	movs	r3, #1
 8012310:	e041      	b.n	8012396 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	69ba      	ldr	r2, [r7, #24]
 8012316:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	899b      	ldrh	r3, [r3, #12]
 801231c:	4618      	mov	r0, r3
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	699b      	ldr	r3, [r3, #24]
 8012322:	697a      	ldr	r2, [r7, #20]
 8012324:	8992      	ldrh	r2, [r2, #12]
 8012326:	fbb3 f1f2 	udiv	r1, r3, r2
 801232a:	fb02 f201 	mul.w	r2, r2, r1
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	1ac3      	subs	r3, r0, r3
 8012332:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	429a      	cmp	r2, r3
 801233a:	d901      	bls.n	8012340 <f_read+0x260>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	699b      	ldr	r3, [r3, #24]
 801234a:	697a      	ldr	r2, [r7, #20]
 801234c:	8992      	ldrh	r2, [r2, #12]
 801234e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012352:	fb02 f200 	mul.w	r2, r2, r0
 8012356:	1a9b      	subs	r3, r3, r2
 8012358:	440b      	add	r3, r1
 801235a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801235c:	4619      	mov	r1, r3
 801235e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012360:	f7fd ff06 	bl	8010170 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	4413      	add	r3, r2
 801236a:	627b      	str	r3, [r7, #36]	; 0x24
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	699a      	ldr	r2, [r3, #24]
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	441a      	add	r2, r3
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	619a      	str	r2, [r3, #24]
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	441a      	add	r2, r3
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	601a      	str	r2, [r3, #0]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	f47f aee1 	bne.w	8012156 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3738      	adds	r7, #56	; 0x38
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801239e:	b580      	push	{r7, lr}
 80123a0:	b08c      	sub	sp, #48	; 0x30
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	60f8      	str	r0, [r7, #12]
 80123a6:	60b9      	str	r1, [r7, #8]
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2200      	movs	r2, #0
 80123b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f107 0210 	add.w	r2, r7, #16
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ff fc44 	bl	8011c4c <validate>
 80123c4:	4603      	mov	r3, r0
 80123c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80123ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d107      	bne.n	80123e2 <f_write+0x44>
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	7d5b      	ldrb	r3, [r3, #21]
 80123d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80123da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d002      	beq.n	80123e8 <f_write+0x4a>
 80123e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123e6:	e16a      	b.n	80126be <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	7d1b      	ldrb	r3, [r3, #20]
 80123ec:	f003 0302 	and.w	r3, r3, #2
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d101      	bne.n	80123f8 <f_write+0x5a>
 80123f4:	2307      	movs	r3, #7
 80123f6:	e162      	b.n	80126be <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	699a      	ldr	r2, [r3, #24]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	441a      	add	r2, r3
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	699b      	ldr	r3, [r3, #24]
 8012404:	429a      	cmp	r2, r3
 8012406:	f080 814c 	bcs.w	80126a2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	699b      	ldr	r3, [r3, #24]
 801240e:	43db      	mvns	r3, r3
 8012410:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012412:	e146      	b.n	80126a2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	699b      	ldr	r3, [r3, #24]
 8012418:	693a      	ldr	r2, [r7, #16]
 801241a:	8992      	ldrh	r2, [r2, #12]
 801241c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012420:	fb02 f201 	mul.w	r2, r2, r1
 8012424:	1a9b      	subs	r3, r3, r2
 8012426:	2b00      	cmp	r3, #0
 8012428:	f040 80f1 	bne.w	801260e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	699b      	ldr	r3, [r3, #24]
 8012430:	693a      	ldr	r2, [r7, #16]
 8012432:	8992      	ldrh	r2, [r2, #12]
 8012434:	fbb3 f3f2 	udiv	r3, r3, r2
 8012438:	693a      	ldr	r2, [r7, #16]
 801243a:	8952      	ldrh	r2, [r2, #10]
 801243c:	3a01      	subs	r2, #1
 801243e:	4013      	ands	r3, r2
 8012440:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d143      	bne.n	80124d0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10c      	bne.n	801246a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012458:	2b00      	cmp	r3, #0
 801245a:	d11a      	bne.n	8012492 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2100      	movs	r1, #0
 8012460:	4618      	mov	r0, r3
 8012462:	f7fe fbbc 	bl	8010bde <create_chain>
 8012466:	62b8      	str	r0, [r7, #40]	; 0x28
 8012468:	e013      	b.n	8012492 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246e:	2b00      	cmp	r3, #0
 8012470:	d007      	beq.n	8012482 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	699b      	ldr	r3, [r3, #24]
 8012476:	4619      	mov	r1, r3
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f7fe fc48 	bl	8010d0e <clmt_clust>
 801247e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012480:	e007      	b.n	8012492 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	69db      	ldr	r3, [r3, #28]
 8012488:	4619      	mov	r1, r3
 801248a:	4610      	mov	r0, r2
 801248c:	f7fe fba7 	bl	8010bde <create_chain>
 8012490:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012494:	2b00      	cmp	r3, #0
 8012496:	f000 8109 	beq.w	80126ac <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249c:	2b01      	cmp	r3, #1
 801249e:	d104      	bne.n	80124aa <f_write+0x10c>
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2202      	movs	r2, #2
 80124a4:	755a      	strb	r2, [r3, #21]
 80124a6:	2302      	movs	r3, #2
 80124a8:	e109      	b.n	80126be <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b0:	d104      	bne.n	80124bc <f_write+0x11e>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2201      	movs	r2, #1
 80124b6:	755a      	strb	r2, [r3, #21]
 80124b8:	2301      	movs	r3, #1
 80124ba:	e100      	b.n	80126be <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d102      	bne.n	80124d0 <f_write+0x132>
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	7d1b      	ldrb	r3, [r3, #20]
 80124d4:	b25b      	sxtb	r3, r3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	da18      	bge.n	801250c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	7858      	ldrb	r0, [r3, #1]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6a1a      	ldr	r2, [r3, #32]
 80124e8:	2301      	movs	r3, #1
 80124ea:	f7fd fd81 	bl	800fff0 <disk_write>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d004      	beq.n	80124fe <f_write+0x160>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	2201      	movs	r2, #1
 80124f8:	755a      	strb	r2, [r3, #21]
 80124fa:	2301      	movs	r3, #1
 80124fc:	e0df      	b.n	80126be <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	7d1b      	ldrb	r3, [r3, #20]
 8012502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012506:	b2da      	uxtb	r2, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801250c:	693a      	ldr	r2, [r7, #16]
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	69db      	ldr	r3, [r3, #28]
 8012512:	4619      	mov	r1, r3
 8012514:	4610      	mov	r0, r2
 8012516:	f7fe f8f7 	bl	8010708 <clust2sect>
 801251a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d104      	bne.n	801252c <f_write+0x18e>
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2202      	movs	r2, #2
 8012526:	755a      	strb	r2, [r3, #21]
 8012528:	2302      	movs	r3, #2
 801252a:	e0c8      	b.n	80126be <f_write+0x320>
			sect += csect;
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	4413      	add	r3, r2
 8012532:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	899b      	ldrh	r3, [r3, #12]
 8012538:	461a      	mov	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012540:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d043      	beq.n	80125d0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012548:	69ba      	ldr	r2, [r7, #24]
 801254a:	6a3b      	ldr	r3, [r7, #32]
 801254c:	4413      	add	r3, r2
 801254e:	693a      	ldr	r2, [r7, #16]
 8012550:	8952      	ldrh	r2, [r2, #10]
 8012552:	4293      	cmp	r3, r2
 8012554:	d905      	bls.n	8012562 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	895b      	ldrh	r3, [r3, #10]
 801255a:	461a      	mov	r2, r3
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	7858      	ldrb	r0, [r3, #1]
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	69f9      	ldr	r1, [r7, #28]
 801256c:	f7fd fd40 	bl	800fff0 <disk_write>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d004      	beq.n	8012580 <f_write+0x1e2>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2201      	movs	r2, #1
 801257a:	755a      	strb	r2, [r3, #21]
 801257c:	2301      	movs	r3, #1
 801257e:	e09e      	b.n	80126be <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6a1a      	ldr	r2, [r3, #32]
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	6a3a      	ldr	r2, [r7, #32]
 801258a:	429a      	cmp	r2, r3
 801258c:	d918      	bls.n	80125c0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	6a1a      	ldr	r2, [r3, #32]
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	8992      	ldrh	r2, [r2, #12]
 80125a0:	fb02 f303 	mul.w	r3, r2, r3
 80125a4:	69fa      	ldr	r2, [r7, #28]
 80125a6:	18d1      	adds	r1, r2, r3
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	461a      	mov	r2, r3
 80125ae:	f7fd fddf 	bl	8010170 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	7d1b      	ldrb	r3, [r3, #20]
 80125b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	899b      	ldrh	r3, [r3, #12]
 80125c4:	461a      	mov	r2, r3
 80125c6:	6a3b      	ldr	r3, [r7, #32]
 80125c8:	fb02 f303 	mul.w	r3, r2, r3
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80125ce:	e04b      	b.n	8012668 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6a1b      	ldr	r3, [r3, #32]
 80125d4:	697a      	ldr	r2, [r7, #20]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d016      	beq.n	8012608 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	699a      	ldr	r2, [r3, #24]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d210      	bcs.n	8012608 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	7858      	ldrb	r0, [r3, #1]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80125f0:	2301      	movs	r3, #1
 80125f2:	697a      	ldr	r2, [r7, #20]
 80125f4:	f7fd fcdc 	bl	800ffb0 <disk_read>
 80125f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d004      	beq.n	8012608 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2201      	movs	r2, #1
 8012602:	755a      	strb	r2, [r3, #21]
 8012604:	2301      	movs	r3, #1
 8012606:	e05a      	b.n	80126be <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	697a      	ldr	r2, [r7, #20]
 801260c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	4618      	mov	r0, r3
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	693a      	ldr	r2, [r7, #16]
 801261a:	8992      	ldrh	r2, [r2, #12]
 801261c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012620:	fb02 f201 	mul.w	r2, r2, r1
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	1ac3      	subs	r3, r0, r3
 8012628:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	429a      	cmp	r2, r3
 8012630:	d901      	bls.n	8012636 <f_write+0x298>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	699b      	ldr	r3, [r3, #24]
 8012640:	693a      	ldr	r2, [r7, #16]
 8012642:	8992      	ldrh	r2, [r2, #12]
 8012644:	fbb3 f0f2 	udiv	r0, r3, r2
 8012648:	fb02 f200 	mul.w	r2, r2, r0
 801264c:	1a9b      	subs	r3, r3, r2
 801264e:	440b      	add	r3, r1
 8012650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012652:	69f9      	ldr	r1, [r7, #28]
 8012654:	4618      	mov	r0, r3
 8012656:	f7fd fd8b 	bl	8010170 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	7d1b      	ldrb	r3, [r3, #20]
 801265e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012662:	b2da      	uxtb	r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012668:	69fa      	ldr	r2, [r7, #28]
 801266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266c:	4413      	add	r3, r2
 801266e:	61fb      	str	r3, [r7, #28]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	699a      	ldr	r2, [r3, #24]
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012676:	441a      	add	r2, r3
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	619a      	str	r2, [r3, #24]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	68da      	ldr	r2, [r3, #12]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	699b      	ldr	r3, [r3, #24]
 8012684:	429a      	cmp	r2, r3
 8012686:	bf38      	it	cc
 8012688:	461a      	movcc	r2, r3
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	60da      	str	r2, [r3, #12]
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012694:	441a      	add	r2, r3
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269e:	1ad3      	subs	r3, r2, r3
 80126a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f47f aeb5 	bne.w	8012414 <f_write+0x76>
 80126aa:	e000      	b.n	80126ae <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80126ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	7d1b      	ldrb	r3, [r3, #20]
 80126b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126b6:	b2da      	uxtb	r2, r3
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3730      	adds	r7, #48	; 0x30
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f107 0208 	add.w	r2, r7, #8
 80126d6:	4611      	mov	r1, r2
 80126d8:	4618      	mov	r0, r3
 80126da:	f7ff fab7 	bl	8011c4c <validate>
 80126de:	4603      	mov	r3, r0
 80126e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80126e2:	7dfb      	ldrb	r3, [r7, #23]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d167      	bne.n	80127b8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	7d1b      	ldrb	r3, [r3, #20]
 80126ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d061      	beq.n	80127b8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	7d1b      	ldrb	r3, [r3, #20]
 80126f8:	b25b      	sxtb	r3, r3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	da15      	bge.n	801272a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	7858      	ldrb	r0, [r3, #1]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6a1a      	ldr	r2, [r3, #32]
 801270c:	2301      	movs	r3, #1
 801270e:	f7fd fc6f 	bl	800fff0 <disk_write>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <f_sync+0x54>
 8012718:	2301      	movs	r3, #1
 801271a:	e04e      	b.n	80127ba <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	7d1b      	ldrb	r3, [r3, #20]
 8012720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012724:	b2da      	uxtb	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801272a:	4b26      	ldr	r3, [pc, #152]	; (80127c4 <f_sync+0xfc>)
 801272c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012734:	4619      	mov	r1, r3
 8012736:	4610      	mov	r0, r2
 8012738:	f7fd ff48 	bl	80105cc <move_window>
 801273c:	4603      	mov	r3, r0
 801273e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012740:	7dfb      	ldrb	r3, [r7, #23]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d138      	bne.n	80127b8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801274a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	330b      	adds	r3, #11
 8012750:	781a      	ldrb	r2, [r3, #0]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	330b      	adds	r3, #11
 8012756:	f042 0220 	orr.w	r2, r2, #32
 801275a:	b2d2      	uxtb	r2, r2
 801275c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6818      	ldr	r0, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	461a      	mov	r2, r3
 8012768:	68f9      	ldr	r1, [r7, #12]
 801276a:	f7fe fccd 	bl	8011108 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f103 021c 	add.w	r2, r3, #28
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	4619      	mov	r1, r3
 801277a:	4610      	mov	r0, r2
 801277c:	f7fd fccc 	bl	8010118 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	3316      	adds	r3, #22
 8012784:	6939      	ldr	r1, [r7, #16]
 8012786:	4618      	mov	r0, r3
 8012788:	f7fd fcc6 	bl	8010118 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	3312      	adds	r3, #18
 8012790:	2100      	movs	r1, #0
 8012792:	4618      	mov	r0, r3
 8012794:	f7fd fca5 	bl	80100e2 <st_word>
					fs->wflag = 1;
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	2201      	movs	r2, #1
 801279c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fd ff41 	bl	8010628 <sync_fs>
 80127a6:	4603      	mov	r3, r0
 80127a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	7d1b      	ldrb	r3, [r3, #20]
 80127ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80127b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3718      	adds	r7, #24
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	274a0000 	.word	0x274a0000

080127c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7ff ff79 	bl	80126c8 <f_sync>
 80127d6:	4603      	mov	r3, r0
 80127d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80127da:	7bfb      	ldrb	r3, [r7, #15]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d118      	bne.n	8012812 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f107 0208 	add.w	r2, r7, #8
 80127e6:	4611      	mov	r1, r2
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff fa2f 	bl	8011c4c <validate>
 80127ee:	4603      	mov	r3, r0
 80127f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80127f2:	7bfb      	ldrb	r3, [r7, #15]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d10c      	bne.n	8012812 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fd fe41 	bl	8010484 <dec_lock>
 8012802:	4603      	mov	r3, r0
 8012804:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012806:	7bfb      	ldrb	r3, [r7, #15]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d102      	bne.n	8012812 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012812:	7bfb      	ldrb	r3, [r7, #15]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801281c:	b590      	push	{r4, r7, lr}
 801281e:	b091      	sub	sp, #68	; 0x44
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012824:	f107 0108 	add.w	r1, r7, #8
 8012828:	1d3b      	adds	r3, r7, #4
 801282a:	2200      	movs	r2, #0
 801282c:	4618      	mov	r0, r3
 801282e:	f7fe ff87 	bl	8011740 <find_volume>
 8012832:	4603      	mov	r3, r0
 8012834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801283c:	2b00      	cmp	r3, #0
 801283e:	d131      	bne.n	80128a4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	f107 030c 	add.w	r3, r7, #12
 801284a:	4611      	mov	r1, r2
 801284c:	4618      	mov	r0, r3
 801284e:	f7fe fe47 	bl	80114e0 <follow_path>
 8012852:	4603      	mov	r3, r0
 8012854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801285c:	2b00      	cmp	r3, #0
 801285e:	d11a      	bne.n	8012896 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012860:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012864:	b25b      	sxtb	r3, r3
 8012866:	2b00      	cmp	r3, #0
 8012868:	da03      	bge.n	8012872 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	697a      	ldr	r2, [r7, #20]
 801286e:	619a      	str	r2, [r3, #24]
 8012870:	e011      	b.n	8012896 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012872:	7cbb      	ldrb	r3, [r7, #18]
 8012874:	f003 0310 	and.w	r3, r3, #16
 8012878:	2b00      	cmp	r3, #0
 801287a:	d009      	beq.n	8012890 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012880:	68bc      	ldr	r4, [r7, #8]
 8012882:	4611      	mov	r1, r2
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fc20 	bl	80110ca <ld_clust>
 801288a:	4603      	mov	r3, r0
 801288c:	61a3      	str	r3, [r4, #24]
 801288e:	e002      	b.n	8012896 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012890:	2305      	movs	r3, #5
 8012892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012896:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801289a:	2b04      	cmp	r3, #4
 801289c:	d102      	bne.n	80128a4 <f_chdir+0x88>
 801289e:	2305      	movs	r3, #5
 80128a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80128a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3744      	adds	r7, #68	; 0x44
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd90      	pop	{r4, r7, pc}

080128b0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b090      	sub	sp, #64	; 0x40
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f107 0208 	add.w	r2, r7, #8
 80128c0:	4611      	mov	r1, r2
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7ff f9c2 	bl	8011c4c <validate>
 80128c8:	4603      	mov	r3, r0
 80128ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80128ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d103      	bne.n	80128de <f_lseek+0x2e>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	7d5b      	ldrb	r3, [r3, #21]
 80128da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80128de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d002      	beq.n	80128ec <f_lseek+0x3c>
 80128e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128ea:	e201      	b.n	8012cf0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f000 80d9 	beq.w	8012aa8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128fc:	d15a      	bne.n	80129b4 <f_lseek+0x104>
			tbl = fp->cltbl;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012902:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	1d1a      	adds	r2, r3, #4
 8012908:	627a      	str	r2, [r7, #36]	; 0x24
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	617b      	str	r3, [r7, #20]
 801290e:	2302      	movs	r3, #2
 8012910:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	689b      	ldr	r3, [r3, #8]
 8012916:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291a:	2b00      	cmp	r3, #0
 801291c:	d03a      	beq.n	8012994 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	613b      	str	r3, [r7, #16]
 8012922:	2300      	movs	r3, #0
 8012924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012928:	3302      	adds	r3, #2
 801292a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	60fb      	str	r3, [r7, #12]
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	3301      	adds	r3, #1
 8012934:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801293a:	4618      	mov	r0, r3
 801293c:	f7fd ff03 	bl	8010746 <get_fat>
 8012940:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	2b01      	cmp	r3, #1
 8012946:	d804      	bhi.n	8012952 <f_lseek+0xa2>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2202      	movs	r2, #2
 801294c:	755a      	strb	r2, [r3, #21]
 801294e:	2302      	movs	r3, #2
 8012950:	e1ce      	b.n	8012cf0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012958:	d104      	bne.n	8012964 <f_lseek+0xb4>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2201      	movs	r2, #1
 801295e:	755a      	strb	r2, [r3, #21]
 8012960:	2301      	movs	r3, #1
 8012962:	e1c5      	b.n	8012cf0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	3301      	adds	r3, #1
 8012968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801296a:	429a      	cmp	r2, r3
 801296c:	d0de      	beq.n	801292c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801296e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	429a      	cmp	r2, r3
 8012974:	d809      	bhi.n	801298a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	1d1a      	adds	r2, r3, #4
 801297a:	627a      	str	r2, [r7, #36]	; 0x24
 801297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801297e:	601a      	str	r2, [r3, #0]
 8012980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012982:	1d1a      	adds	r2, r3, #4
 8012984:	627a      	str	r2, [r7, #36]	; 0x24
 8012986:	693a      	ldr	r2, [r7, #16]
 8012988:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	69db      	ldr	r3, [r3, #28]
 801298e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012990:	429a      	cmp	r2, r3
 8012992:	d3c4      	bcc.n	801291e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801299a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801299c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d803      	bhi.n	80129ac <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	2200      	movs	r2, #0
 80129a8:	601a      	str	r2, [r3, #0]
 80129aa:	e19f      	b.n	8012cec <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80129ac:	2311      	movs	r3, #17
 80129ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80129b2:	e19b      	b.n	8012cec <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	683a      	ldr	r2, [r7, #0]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d902      	bls.n	80129c4 <f_lseek+0x114>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	68db      	ldr	r3, [r3, #12]
 80129c2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	f000 818d 	beq.w	8012cec <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	3b01      	subs	r3, #1
 80129d6:	4619      	mov	r1, r3
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7fe f998 	bl	8010d0e <clmt_clust>
 80129de:	4602      	mov	r2, r0
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80129e4:	68ba      	ldr	r2, [r7, #8]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	69db      	ldr	r3, [r3, #28]
 80129ea:	4619      	mov	r1, r3
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7fd fe8b 	bl	8010708 <clust2sect>
 80129f2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d104      	bne.n	8012a04 <f_lseek+0x154>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2202      	movs	r2, #2
 80129fe:	755a      	strb	r2, [r3, #21]
 8012a00:	2302      	movs	r3, #2
 8012a02:	e175      	b.n	8012cf0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	3b01      	subs	r3, #1
 8012a08:	68ba      	ldr	r2, [r7, #8]
 8012a0a:	8992      	ldrh	r2, [r2, #12]
 8012a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a10:	68ba      	ldr	r2, [r7, #8]
 8012a12:	8952      	ldrh	r2, [r2, #10]
 8012a14:	3a01      	subs	r2, #1
 8012a16:	4013      	ands	r3, r2
 8012a18:	69ba      	ldr	r2, [r7, #24]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	699b      	ldr	r3, [r3, #24]
 8012a22:	68ba      	ldr	r2, [r7, #8]
 8012a24:	8992      	ldrh	r2, [r2, #12]
 8012a26:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a2a:	fb02 f201 	mul.w	r2, r2, r1
 8012a2e:	1a9b      	subs	r3, r3, r2
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 815b 	beq.w	8012cec <f_lseek+0x43c>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6a1b      	ldr	r3, [r3, #32]
 8012a3a:	69ba      	ldr	r2, [r7, #24]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	f000 8155 	beq.w	8012cec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	7d1b      	ldrb	r3, [r3, #20]
 8012a46:	b25b      	sxtb	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	da18      	bge.n	8012a7e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	7858      	ldrb	r0, [r3, #1]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6a1a      	ldr	r2, [r3, #32]
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	f7fd fac8 	bl	800fff0 <disk_write>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d004      	beq.n	8012a70 <f_lseek+0x1c0>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2201      	movs	r2, #1
 8012a6a:	755a      	strb	r2, [r3, #21]
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	e13f      	b.n	8012cf0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	7d1b      	ldrb	r3, [r3, #20]
 8012a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	7858      	ldrb	r0, [r3, #1]
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a88:	2301      	movs	r3, #1
 8012a8a:	69ba      	ldr	r2, [r7, #24]
 8012a8c:	f7fd fa90 	bl	800ffb0 <disk_read>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d004      	beq.n	8012aa0 <f_lseek+0x1f0>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	755a      	strb	r2, [r3, #21]
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	e127      	b.n	8012cf0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	69ba      	ldr	r2, [r7, #24]
 8012aa4:	621a      	str	r2, [r3, #32]
 8012aa6:	e121      	b.n	8012cec <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	683a      	ldr	r2, [r7, #0]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d908      	bls.n	8012ac4 <f_lseek+0x214>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	7d1b      	ldrb	r3, [r3, #20]
 8012ab6:	f003 0302 	and.w	r3, r3, #2
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d102      	bne.n	8012ac4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012aca:	2300      	movs	r3, #0
 8012acc:	637b      	str	r3, [r7, #52]	; 0x34
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ad2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 80b5 	beq.w	8012c46 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	895b      	ldrh	r3, [r3, #10]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	899b      	ldrh	r3, [r3, #12]
 8012ae6:	fb03 f302 	mul.w	r3, r3, r2
 8012aea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012aec:	6a3b      	ldr	r3, [r7, #32]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d01b      	beq.n	8012b2a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	1e5a      	subs	r2, r3, #1
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8012afc:	6a3b      	ldr	r3, [r7, #32]
 8012afe:	1e59      	subs	r1, r3, #1
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d30f      	bcc.n	8012b2a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	1e5a      	subs	r2, r3, #1
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	425b      	negs	r3, r3
 8012b12:	401a      	ands	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	699b      	ldr	r3, [r3, #24]
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	69db      	ldr	r3, [r3, #28]
 8012b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b28:	e022      	b.n	8012b70 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d119      	bne.n	8012b6a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2100      	movs	r1, #0
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fe f84f 	bl	8010bde <create_chain>
 8012b40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d104      	bne.n	8012b52 <f_lseek+0x2a2>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	755a      	strb	r2, [r3, #21]
 8012b4e:	2302      	movs	r3, #2
 8012b50:	e0ce      	b.n	8012cf0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b58:	d104      	bne.n	8012b64 <f_lseek+0x2b4>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	755a      	strb	r2, [r3, #21]
 8012b60:	2301      	movs	r3, #1
 8012b62:	e0c5      	b.n	8012cf0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d067      	beq.n	8012c46 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8012b76:	e03a      	b.n	8012bee <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	603b      	str	r3, [r7, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	699a      	ldr	r2, [r3, #24]
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	441a      	add	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	7d1b      	ldrb	r3, [r3, #20]
 8012b90:	f003 0302 	and.w	r3, r3, #2
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d00b      	beq.n	8012bb0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fe f81e 	bl	8010bde <create_chain>
 8012ba2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d108      	bne.n	8012bbc <f_lseek+0x30c>
							ofs = 0; break;
 8012baa:	2300      	movs	r3, #0
 8012bac:	603b      	str	r3, [r7, #0]
 8012bae:	e022      	b.n	8012bf6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fd fdc6 	bl	8010746 <get_fat>
 8012bba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc2:	d104      	bne.n	8012bce <f_lseek+0x31e>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	755a      	strb	r2, [r3, #21]
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e090      	b.n	8012cf0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d904      	bls.n	8012bde <f_lseek+0x32e>
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	69db      	ldr	r3, [r3, #28]
 8012bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d304      	bcc.n	8012be8 <f_lseek+0x338>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2202      	movs	r2, #2
 8012be2:	755a      	strb	r2, [r3, #21]
 8012be4:	2302      	movs	r3, #2
 8012be6:	e083      	b.n	8012cf0 <f_lseek+0x440>
					fp->clust = clst;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d8c0      	bhi.n	8012b78 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	699a      	ldr	r2, [r3, #24]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	441a      	add	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	899b      	ldrh	r3, [r3, #12]
 8012c06:	461a      	mov	r2, r3
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c0e:	fb02 f201 	mul.w	r2, r2, r1
 8012c12:	1a9b      	subs	r3, r3, r2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d016      	beq.n	8012c46 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fd fd73 	bl	8010708 <clust2sect>
 8012c22:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d104      	bne.n	8012c34 <f_lseek+0x384>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	755a      	strb	r2, [r3, #21]
 8012c30:	2302      	movs	r3, #2
 8012c32:	e05d      	b.n	8012cf0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	899b      	ldrh	r3, [r3, #12]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c42:	4413      	add	r3, r2
 8012c44:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	699a      	ldr	r2, [r3, #24]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d90a      	bls.n	8012c68 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	699a      	ldr	r2, [r3, #24]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	7d1b      	ldrb	r3, [r3, #20]
 8012c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c62:	b2da      	uxtb	r2, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	699b      	ldr	r3, [r3, #24]
 8012c6c:	68ba      	ldr	r2, [r7, #8]
 8012c6e:	8992      	ldrh	r2, [r2, #12]
 8012c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c74:	fb02 f201 	mul.w	r2, r2, r1
 8012c78:	1a9b      	subs	r3, r3, r2
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d036      	beq.n	8012cec <f_lseek+0x43c>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a1b      	ldr	r3, [r3, #32]
 8012c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d031      	beq.n	8012cec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	7d1b      	ldrb	r3, [r3, #20]
 8012c8c:	b25b      	sxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	da18      	bge.n	8012cc4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	7858      	ldrb	r0, [r3, #1]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6a1a      	ldr	r2, [r3, #32]
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	f7fd f9a5 	bl	800fff0 <disk_write>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d004      	beq.n	8012cb6 <f_lseek+0x406>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2201      	movs	r2, #1
 8012cb0:	755a      	strb	r2, [r3, #21]
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e01c      	b.n	8012cf0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	7d1b      	ldrb	r3, [r3, #20]
 8012cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cbe:	b2da      	uxtb	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	7858      	ldrb	r0, [r3, #1]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cce:	2301      	movs	r3, #1
 8012cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cd2:	f7fd f96d 	bl	800ffb0 <disk_read>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d004      	beq.n	8012ce6 <f_lseek+0x436>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	755a      	strb	r2, [r3, #21]
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e004      	b.n	8012cf0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3740      	adds	r7, #64	; 0x40
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b09e      	sub	sp, #120	; 0x78
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012d04:	f107 010c 	add.w	r1, r7, #12
 8012d08:	1d3b      	adds	r3, r7, #4
 8012d0a:	2202      	movs	r2, #2
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fe fd17 	bl	8011740 <find_volume>
 8012d12:	4603      	mov	r3, r0
 8012d14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8012d1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	f040 80a4 	bne.w	8012e6e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fe fbd6 	bl	80114e0 <follow_path>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8012d3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d108      	bne.n	8012d54 <f_unlink+0x5c>
 8012d42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012d46:	f003 0320 	and.w	r3, r3, #32
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d002      	beq.n	8012d54 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8012d4e:	2306      	movs	r3, #6
 8012d50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012d54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d108      	bne.n	8012d6e <f_unlink+0x76>
 8012d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012d60:	2102      	movs	r1, #2
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fd fa82 	bl	801026c <chk_lock>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8012d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d17b      	bne.n	8012e6e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012d76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012d7a:	b25b      	sxtb	r3, r3
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	da03      	bge.n	8012d88 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012d80:	2306      	movs	r3, #6
 8012d82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012d86:	e008      	b.n	8012d9a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012d88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012d8c:	f003 0301 	and.w	r3, r3, #1
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012d94:	2307      	movs	r3, #7
 8012d96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8012d9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d13d      	bne.n	8012e1e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012da6:	4611      	mov	r1, r2
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fe f98e 	bl	80110ca <ld_clust>
 8012dae:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012db0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012db4:	f003 0310 	and.w	r3, r3, #16
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d030      	beq.n	8012e1e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	699b      	ldr	r3, [r3, #24]
 8012dc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d103      	bne.n	8012dce <f_unlink+0xd6>
						res = FR_DENIED;
 8012dc6:	2307      	movs	r3, #7
 8012dc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012dcc:	e027      	b.n	8012e1e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dd4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012dd6:	f107 0310 	add.w	r3, r7, #16
 8012dda:	2100      	movs	r1, #0
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7fd ffce 	bl	8010d7e <dir_sdi>
 8012de2:	4603      	mov	r3, r0
 8012de4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012de8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d116      	bne.n	8012e1e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012df0:	f107 0310 	add.w	r3, r7, #16
 8012df4:	2100      	movs	r1, #0
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe f9a6 	bl	8011148 <dir_read>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012e02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d102      	bne.n	8012e10 <f_unlink+0x118>
 8012e0a:	2307      	movs	r3, #7
 8012e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012e10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e14:	2b04      	cmp	r3, #4
 8012e16:	d102      	bne.n	8012e1e <f_unlink+0x126>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8012e1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d123      	bne.n	8012e6e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fe fa70 	bl	8011310 <dir_remove>
 8012e30:	4603      	mov	r3, r0
 8012e32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012e36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d10c      	bne.n	8012e58 <f_unlink+0x160>
 8012e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d009      	beq.n	8012e58 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012e48:	2200      	movs	r2, #0
 8012e4a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fd fe61 	bl	8010b14 <remove_chain>
 8012e52:	4603      	mov	r3, r0
 8012e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012e58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d106      	bne.n	8012e6e <f_unlink+0x176>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fd fbe0 	bl	8010628 <sync_fs>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012e6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3778      	adds	r7, #120	; 0x78
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
	...

08012e7c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b096      	sub	sp, #88	; 0x58
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012e84:	f107 0108 	add.w	r1, r7, #8
 8012e88:	1d3b      	adds	r3, r7, #4
 8012e8a:	2202      	movs	r2, #2
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe fc57 	bl	8011740 <find_volume>
 8012e92:	4603      	mov	r3, r0
 8012e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f040 80fe 	bne.w	80130a2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	f107 030c 	add.w	r3, r7, #12
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fe fb16 	bl	80114e0 <follow_path>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012eba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d102      	bne.n	8012ec8 <f_mkdir+0x4c>
 8012ec2:	2308      	movs	r3, #8
 8012ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ecc:	2b04      	cmp	r3, #4
 8012ece:	d108      	bne.n	8012ee2 <f_mkdir+0x66>
 8012ed0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012ed4:	f003 0320 	and.w	r3, r3, #32
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d002      	beq.n	8012ee2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8012edc:	2306      	movs	r3, #6
 8012ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ee6:	2b04      	cmp	r3, #4
 8012ee8:	f040 80db 	bne.w	80130a2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012eec:	f107 030c 	add.w	r3, r7, #12
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fd fe73 	bl	8010bde <create_chain>
 8012ef8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	895b      	ldrh	r3, [r3, #10]
 8012efe:	461a      	mov	r2, r3
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	899b      	ldrh	r3, [r3, #12]
 8012f04:	fb03 f302 	mul.w	r3, r3, r2
 8012f08:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d102      	bne.n	8012f1c <f_mkdir+0xa0>
 8012f16:	2307      	movs	r3, #7
 8012f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d102      	bne.n	8012f28 <f_mkdir+0xac>
 8012f22:	2302      	movs	r3, #2
 8012f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f2e:	d102      	bne.n	8012f36 <f_mkdir+0xba>
 8012f30:	2301      	movs	r3, #1
 8012f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <f_mkdir+0xd0>
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fd faff 	bl	8010544 <sync_window>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012f4c:	4b58      	ldr	r3, [pc, #352]	; (80130b0 <f_mkdir+0x234>)
 8012f4e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d16c      	bne.n	8013032 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fd fbd3 	bl	8010708 <clust2sect>
 8012f62:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	3338      	adds	r3, #56	; 0x38
 8012f68:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	899b      	ldrh	r3, [r3, #12]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	2100      	movs	r1, #0
 8012f72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f74:	f7fd f91d 	bl	80101b2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012f78:	220b      	movs	r2, #11
 8012f7a:	2120      	movs	r1, #32
 8012f7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f7e:	f7fd f918 	bl	80101b2 <mem_set>
					dir[DIR_Name] = '.';
 8012f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f84:	222e      	movs	r2, #46	; 0x2e
 8012f86:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f8a:	330b      	adds	r3, #11
 8012f8c:	2210      	movs	r2, #16
 8012f8e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f92:	3316      	adds	r3, #22
 8012f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fd f8be 	bl	8010118 <st_dword>
					st_clust(fs, dir, dcl);
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fe f8b0 	bl	8011108 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012faa:	3320      	adds	r3, #32
 8012fac:	2220      	movs	r2, #32
 8012fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fd f8dd 	bl	8010170 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb8:	3321      	adds	r3, #33	; 0x21
 8012fba:	222e      	movs	r2, #46	; 0x2e
 8012fbc:	701a      	strb	r2, [r3, #0]
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2b03      	cmp	r3, #3
 8012fc8:	d106      	bne.n	8012fd8 <f_mkdir+0x15c>
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d101      	bne.n	8012fd8 <f_mkdir+0x15c>
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012fd8:	68b8      	ldr	r0, [r7, #8]
 8012fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fdc:	3320      	adds	r3, #32
 8012fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	f7fe f891 	bl	8011108 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	895b      	ldrh	r3, [r3, #10]
 8012fea:	653b      	str	r3, [r7, #80]	; 0x50
 8012fec:	e01c      	b.n	8013028 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8012fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ff0:	1c5a      	adds	r2, r3, #1
 8012ff2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	4618      	mov	r0, r3
 8013002:	f7fd fa9f 	bl	8010544 <sync_window>
 8013006:	4603      	mov	r3, r0
 8013008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801300c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013010:	2b00      	cmp	r3, #0
 8013012:	d10d      	bne.n	8013030 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	899b      	ldrh	r3, [r3, #12]
 8013018:	461a      	mov	r2, r3
 801301a:	2100      	movs	r1, #0
 801301c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801301e:	f7fd f8c8 	bl	80101b2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013024:	3b01      	subs	r3, #1
 8013026:	653b      	str	r3, [r7, #80]	; 0x50
 8013028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801302a:	2b00      	cmp	r3, #0
 801302c:	d1df      	bne.n	8012fee <f_mkdir+0x172>
 801302e:	e000      	b.n	8013032 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013030:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013036:	2b00      	cmp	r3, #0
 8013038:	d107      	bne.n	801304a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801303a:	f107 030c 	add.w	r3, r7, #12
 801303e:	4618      	mov	r0, r3
 8013040:	f7fe f934 	bl	80112ac <dir_register>
 8013044:	4603      	mov	r3, r0
 8013046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801304a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801304e:	2b00      	cmp	r3, #0
 8013050:	d120      	bne.n	8013094 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013054:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013058:	3316      	adds	r3, #22
 801305a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801305c:	4618      	mov	r0, r3
 801305e:	f7fd f85b 	bl	8010118 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013068:	4618      	mov	r0, r3
 801306a:	f7fe f84d 	bl	8011108 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013070:	330b      	adds	r3, #11
 8013072:	2210      	movs	r2, #16
 8013074:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	2201      	movs	r2, #1
 801307a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801307c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013080:	2b00      	cmp	r3, #0
 8013082:	d10e      	bne.n	80130a2 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	4618      	mov	r0, r3
 8013088:	f7fd face 	bl	8010628 <sync_fs>
 801308c:	4603      	mov	r3, r0
 801308e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013092:	e006      	b.n	80130a2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013094:	f107 030c 	add.w	r3, r7, #12
 8013098:	2200      	movs	r2, #0
 801309a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801309c:	4618      	mov	r0, r3
 801309e:	f7fd fd39 	bl	8010b14 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80130a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3758      	adds	r7, #88	; 0x58
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	274a0000 	.word	0x274a0000

080130b4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
	int n = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80130c8:	e017      	b.n	80130fa <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80130ca:	f107 0310 	add.w	r3, r7, #16
 80130ce:	f107 0114 	add.w	r1, r7, #20
 80130d2:	2201      	movs	r2, #1
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7ff f803 	bl	80120e0 <f_read>
		if (rc != 1) break;
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d112      	bne.n	8013106 <f_gets+0x52>
		c = s[0];
 80130e0:	7d3b      	ldrb	r3, [r7, #20]
 80130e2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	1c5a      	adds	r2, r3, #1
 80130e8:	61ba      	str	r2, [r7, #24]
 80130ea:	7dfa      	ldrb	r2, [r7, #23]
 80130ec:	701a      	strb	r2, [r3, #0]
		n++;
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	3301      	adds	r3, #1
 80130f2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80130f4:	7dfb      	ldrb	r3, [r7, #23]
 80130f6:	2b0a      	cmp	r3, #10
 80130f8:	d007      	beq.n	801310a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	3b01      	subs	r3, #1
 80130fe:	69fa      	ldr	r2, [r7, #28]
 8013100:	429a      	cmp	r2, r3
 8013102:	dbe2      	blt.n	80130ca <f_gets+0x16>
 8013104:	e002      	b.n	801310c <f_gets+0x58>
		if (rc != 1) break;
 8013106:	bf00      	nop
 8013108:	e000      	b.n	801310c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801310a:	bf00      	nop
	}
	*p = 0;
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	2200      	movs	r2, #0
 8013110:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <f_gets+0x68>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	e000      	b.n	801311e <f_gets+0x6a>
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	3720      	adds	r7, #32
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
	...

08013128 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013128:	b480      	push	{r7}
 801312a:	b087      	sub	sp, #28
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	4613      	mov	r3, r2
 8013134:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013136:	2301      	movs	r3, #1
 8013138:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801313e:	4b1f      	ldr	r3, [pc, #124]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013140:	7a5b      	ldrb	r3, [r3, #9]
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b00      	cmp	r3, #0
 8013146:	d131      	bne.n	80131ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013148:	4b1c      	ldr	r3, [pc, #112]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 801314a:	7a5b      	ldrb	r3, [r3, #9]
 801314c:	b2db      	uxtb	r3, r3
 801314e:	461a      	mov	r2, r3
 8013150:	4b1a      	ldr	r3, [pc, #104]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013152:	2100      	movs	r1, #0
 8013154:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013156:	4b19      	ldr	r3, [pc, #100]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013158:	7a5b      	ldrb	r3, [r3, #9]
 801315a:	b2db      	uxtb	r3, r3
 801315c:	4a17      	ldr	r2, [pc, #92]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	4413      	add	r3, r2
 8013162:	68fa      	ldr	r2, [r7, #12]
 8013164:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013166:	4b15      	ldr	r3, [pc, #84]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013168:	7a5b      	ldrb	r3, [r3, #9]
 801316a:	b2db      	uxtb	r3, r3
 801316c:	461a      	mov	r2, r3
 801316e:	4b13      	ldr	r3, [pc, #76]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013170:	4413      	add	r3, r2
 8013172:	79fa      	ldrb	r2, [r7, #7]
 8013174:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013176:	4b11      	ldr	r3, [pc, #68]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013178:	7a5b      	ldrb	r3, [r3, #9]
 801317a:	b2db      	uxtb	r3, r3
 801317c:	1c5a      	adds	r2, r3, #1
 801317e:	b2d1      	uxtb	r1, r2
 8013180:	4a0e      	ldr	r2, [pc, #56]	; (80131bc <FATFS_LinkDriverEx+0x94>)
 8013182:	7251      	strb	r1, [r2, #9]
 8013184:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013186:	7dbb      	ldrb	r3, [r7, #22]
 8013188:	3330      	adds	r3, #48	; 0x30
 801318a:	b2da      	uxtb	r2, r3
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	3301      	adds	r3, #1
 8013194:	223a      	movs	r2, #58	; 0x3a
 8013196:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	3302      	adds	r3, #2
 801319c:	222f      	movs	r2, #47	; 0x2f
 801319e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	3303      	adds	r3, #3
 80131a4:	2200      	movs	r2, #0
 80131a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80131a8:	2300      	movs	r3, #0
 80131aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80131ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	371c      	adds	r7, #28
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	2003c4a0 	.word	0x2003c4a0

080131c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80131ca:	2200      	movs	r2, #0
 80131cc:	6839      	ldr	r1, [r7, #0]
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7ff ffaa 	bl	8013128 <FATFS_LinkDriverEx>
 80131d4:	4603      	mov	r3, r0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <__cxa_guard_acquire>:
 80131de:	6803      	ldr	r3, [r0, #0]
 80131e0:	07db      	lsls	r3, r3, #31
 80131e2:	d406      	bmi.n	80131f2 <__cxa_guard_acquire+0x14>
 80131e4:	7843      	ldrb	r3, [r0, #1]
 80131e6:	b103      	cbz	r3, 80131ea <__cxa_guard_acquire+0xc>
 80131e8:	deff      	udf	#255	; 0xff
 80131ea:	2301      	movs	r3, #1
 80131ec:	7043      	strb	r3, [r0, #1]
 80131ee:	4618      	mov	r0, r3
 80131f0:	4770      	bx	lr
 80131f2:	2000      	movs	r0, #0
 80131f4:	4770      	bx	lr

080131f6 <__cxa_guard_release>:
 80131f6:	2301      	movs	r3, #1
 80131f8:	6003      	str	r3, [r0, #0]
 80131fa:	4770      	bx	lr
 80131fc:	0000      	movs	r0, r0
	...

08013200 <cos>:
 8013200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013202:	ec51 0b10 	vmov	r0, r1, d0
 8013206:	4a1e      	ldr	r2, [pc, #120]	; (8013280 <cos+0x80>)
 8013208:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801320c:	4293      	cmp	r3, r2
 801320e:	dc06      	bgt.n	801321e <cos+0x1e>
 8013210:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013278 <cos+0x78>
 8013214:	f000 fa74 	bl	8013700 <__kernel_cos>
 8013218:	ec51 0b10 	vmov	r0, r1, d0
 801321c:	e007      	b.n	801322e <cos+0x2e>
 801321e:	4a19      	ldr	r2, [pc, #100]	; (8013284 <cos+0x84>)
 8013220:	4293      	cmp	r3, r2
 8013222:	dd09      	ble.n	8013238 <cos+0x38>
 8013224:	ee10 2a10 	vmov	r2, s0
 8013228:	460b      	mov	r3, r1
 801322a:	f7ed f845 	bl	80002b8 <__aeabi_dsub>
 801322e:	ec41 0b10 	vmov	d0, r0, r1
 8013232:	b005      	add	sp, #20
 8013234:	f85d fb04 	ldr.w	pc, [sp], #4
 8013238:	4668      	mov	r0, sp
 801323a:	f000 f86d 	bl	8013318 <__ieee754_rem_pio2>
 801323e:	f000 0003 	and.w	r0, r0, #3
 8013242:	2801      	cmp	r0, #1
 8013244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013248:	ed9d 0b00 	vldr	d0, [sp]
 801324c:	d007      	beq.n	801325e <cos+0x5e>
 801324e:	2802      	cmp	r0, #2
 8013250:	d00e      	beq.n	8013270 <cos+0x70>
 8013252:	2800      	cmp	r0, #0
 8013254:	d0de      	beq.n	8013214 <cos+0x14>
 8013256:	2001      	movs	r0, #1
 8013258:	f000 fe5a 	bl	8013f10 <__kernel_sin>
 801325c:	e7dc      	b.n	8013218 <cos+0x18>
 801325e:	f000 fe57 	bl	8013f10 <__kernel_sin>
 8013262:	ec53 2b10 	vmov	r2, r3, d0
 8013266:	ee10 0a10 	vmov	r0, s0
 801326a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801326e:	e7de      	b.n	801322e <cos+0x2e>
 8013270:	f000 fa46 	bl	8013700 <__kernel_cos>
 8013274:	e7f5      	b.n	8013262 <cos+0x62>
 8013276:	bf00      	nop
	...
 8013280:	3fe921fb 	.word	0x3fe921fb
 8013284:	7fefffff 	.word	0x7fefffff

08013288 <sin>:
 8013288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801328a:	ec51 0b10 	vmov	r0, r1, d0
 801328e:	4a20      	ldr	r2, [pc, #128]	; (8013310 <sin+0x88>)
 8013290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013294:	4293      	cmp	r3, r2
 8013296:	dc07      	bgt.n	80132a8 <sin+0x20>
 8013298:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8013308 <sin+0x80>
 801329c:	2000      	movs	r0, #0
 801329e:	f000 fe37 	bl	8013f10 <__kernel_sin>
 80132a2:	ec51 0b10 	vmov	r0, r1, d0
 80132a6:	e007      	b.n	80132b8 <sin+0x30>
 80132a8:	4a1a      	ldr	r2, [pc, #104]	; (8013314 <sin+0x8c>)
 80132aa:	4293      	cmp	r3, r2
 80132ac:	dd09      	ble.n	80132c2 <sin+0x3a>
 80132ae:	ee10 2a10 	vmov	r2, s0
 80132b2:	460b      	mov	r3, r1
 80132b4:	f7ed f800 	bl	80002b8 <__aeabi_dsub>
 80132b8:	ec41 0b10 	vmov	d0, r0, r1
 80132bc:	b005      	add	sp, #20
 80132be:	f85d fb04 	ldr.w	pc, [sp], #4
 80132c2:	4668      	mov	r0, sp
 80132c4:	f000 f828 	bl	8013318 <__ieee754_rem_pio2>
 80132c8:	f000 0003 	and.w	r0, r0, #3
 80132cc:	2801      	cmp	r0, #1
 80132ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80132d2:	ed9d 0b00 	vldr	d0, [sp]
 80132d6:	d004      	beq.n	80132e2 <sin+0x5a>
 80132d8:	2802      	cmp	r0, #2
 80132da:	d005      	beq.n	80132e8 <sin+0x60>
 80132dc:	b970      	cbnz	r0, 80132fc <sin+0x74>
 80132de:	2001      	movs	r0, #1
 80132e0:	e7dd      	b.n	801329e <sin+0x16>
 80132e2:	f000 fa0d 	bl	8013700 <__kernel_cos>
 80132e6:	e7dc      	b.n	80132a2 <sin+0x1a>
 80132e8:	2001      	movs	r0, #1
 80132ea:	f000 fe11 	bl	8013f10 <__kernel_sin>
 80132ee:	ec53 2b10 	vmov	r2, r3, d0
 80132f2:	ee10 0a10 	vmov	r0, s0
 80132f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80132fa:	e7dd      	b.n	80132b8 <sin+0x30>
 80132fc:	f000 fa00 	bl	8013700 <__kernel_cos>
 8013300:	e7f5      	b.n	80132ee <sin+0x66>
 8013302:	bf00      	nop
 8013304:	f3af 8000 	nop.w
	...
 8013310:	3fe921fb 	.word	0x3fe921fb
 8013314:	7fefffff 	.word	0x7fefffff

08013318 <__ieee754_rem_pio2>:
 8013318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801331c:	ec57 6b10 	vmov	r6, r7, d0
 8013320:	4bc3      	ldr	r3, [pc, #780]	; (8013630 <__ieee754_rem_pio2+0x318>)
 8013322:	b08d      	sub	sp, #52	; 0x34
 8013324:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013328:	4598      	cmp	r8, r3
 801332a:	4604      	mov	r4, r0
 801332c:	9704      	str	r7, [sp, #16]
 801332e:	dc07      	bgt.n	8013340 <__ieee754_rem_pio2+0x28>
 8013330:	2200      	movs	r2, #0
 8013332:	2300      	movs	r3, #0
 8013334:	ed84 0b00 	vstr	d0, [r4]
 8013338:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801333c:	2500      	movs	r5, #0
 801333e:	e027      	b.n	8013390 <__ieee754_rem_pio2+0x78>
 8013340:	4bbc      	ldr	r3, [pc, #752]	; (8013634 <__ieee754_rem_pio2+0x31c>)
 8013342:	4598      	cmp	r8, r3
 8013344:	dc75      	bgt.n	8013432 <__ieee754_rem_pio2+0x11a>
 8013346:	9b04      	ldr	r3, [sp, #16]
 8013348:	4dbb      	ldr	r5, [pc, #748]	; (8013638 <__ieee754_rem_pio2+0x320>)
 801334a:	2b00      	cmp	r3, #0
 801334c:	ee10 0a10 	vmov	r0, s0
 8013350:	a3a9      	add	r3, pc, #676	; (adr r3, 80135f8 <__ieee754_rem_pio2+0x2e0>)
 8013352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013356:	4639      	mov	r1, r7
 8013358:	dd36      	ble.n	80133c8 <__ieee754_rem_pio2+0xb0>
 801335a:	f7ec ffad 	bl	80002b8 <__aeabi_dsub>
 801335e:	45a8      	cmp	r8, r5
 8013360:	4606      	mov	r6, r0
 8013362:	460f      	mov	r7, r1
 8013364:	d018      	beq.n	8013398 <__ieee754_rem_pio2+0x80>
 8013366:	a3a6      	add	r3, pc, #664	; (adr r3, 8013600 <__ieee754_rem_pio2+0x2e8>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	f7ec ffa4 	bl	80002b8 <__aeabi_dsub>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	e9c4 2300 	strd	r2, r3, [r4]
 8013378:	4630      	mov	r0, r6
 801337a:	4639      	mov	r1, r7
 801337c:	f7ec ff9c 	bl	80002b8 <__aeabi_dsub>
 8013380:	a39f      	add	r3, pc, #636	; (adr r3, 8013600 <__ieee754_rem_pio2+0x2e8>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7ec ff97 	bl	80002b8 <__aeabi_dsub>
 801338a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801338e:	2501      	movs	r5, #1
 8013390:	4628      	mov	r0, r5
 8013392:	b00d      	add	sp, #52	; 0x34
 8013394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013398:	a39b      	add	r3, pc, #620	; (adr r3, 8013608 <__ieee754_rem_pio2+0x2f0>)
 801339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339e:	f7ec ff8b 	bl	80002b8 <__aeabi_dsub>
 80133a2:	a39b      	add	r3, pc, #620	; (adr r3, 8013610 <__ieee754_rem_pio2+0x2f8>)
 80133a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a8:	4606      	mov	r6, r0
 80133aa:	460f      	mov	r7, r1
 80133ac:	f7ec ff84 	bl	80002b8 <__aeabi_dsub>
 80133b0:	4602      	mov	r2, r0
 80133b2:	460b      	mov	r3, r1
 80133b4:	e9c4 2300 	strd	r2, r3, [r4]
 80133b8:	4630      	mov	r0, r6
 80133ba:	4639      	mov	r1, r7
 80133bc:	f7ec ff7c 	bl	80002b8 <__aeabi_dsub>
 80133c0:	a393      	add	r3, pc, #588	; (adr r3, 8013610 <__ieee754_rem_pio2+0x2f8>)
 80133c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c6:	e7de      	b.n	8013386 <__ieee754_rem_pio2+0x6e>
 80133c8:	f7ec ff78 	bl	80002bc <__adddf3>
 80133cc:	45a8      	cmp	r8, r5
 80133ce:	4606      	mov	r6, r0
 80133d0:	460f      	mov	r7, r1
 80133d2:	d016      	beq.n	8013402 <__ieee754_rem_pio2+0xea>
 80133d4:	a38a      	add	r3, pc, #552	; (adr r3, 8013600 <__ieee754_rem_pio2+0x2e8>)
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	f7ec ff6f 	bl	80002bc <__adddf3>
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	e9c4 2300 	strd	r2, r3, [r4]
 80133e6:	4630      	mov	r0, r6
 80133e8:	4639      	mov	r1, r7
 80133ea:	f7ec ff65 	bl	80002b8 <__aeabi_dsub>
 80133ee:	a384      	add	r3, pc, #528	; (adr r3, 8013600 <__ieee754_rem_pio2+0x2e8>)
 80133f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f4:	f7ec ff62 	bl	80002bc <__adddf3>
 80133f8:	f04f 35ff 	mov.w	r5, #4294967295
 80133fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013400:	e7c6      	b.n	8013390 <__ieee754_rem_pio2+0x78>
 8013402:	a381      	add	r3, pc, #516	; (adr r3, 8013608 <__ieee754_rem_pio2+0x2f0>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	f7ec ff58 	bl	80002bc <__adddf3>
 801340c:	a380      	add	r3, pc, #512	; (adr r3, 8013610 <__ieee754_rem_pio2+0x2f8>)
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	4606      	mov	r6, r0
 8013414:	460f      	mov	r7, r1
 8013416:	f7ec ff51 	bl	80002bc <__adddf3>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	e9c4 2300 	strd	r2, r3, [r4]
 8013422:	4630      	mov	r0, r6
 8013424:	4639      	mov	r1, r7
 8013426:	f7ec ff47 	bl	80002b8 <__aeabi_dsub>
 801342a:	a379      	add	r3, pc, #484	; (adr r3, 8013610 <__ieee754_rem_pio2+0x2f8>)
 801342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013430:	e7e0      	b.n	80133f4 <__ieee754_rem_pio2+0xdc>
 8013432:	4b82      	ldr	r3, [pc, #520]	; (801363c <__ieee754_rem_pio2+0x324>)
 8013434:	4598      	cmp	r8, r3
 8013436:	f300 80d0 	bgt.w	80135da <__ieee754_rem_pio2+0x2c2>
 801343a:	f000 fe23 	bl	8014084 <fabs>
 801343e:	ec57 6b10 	vmov	r6, r7, d0
 8013442:	ee10 0a10 	vmov	r0, s0
 8013446:	a374      	add	r3, pc, #464	; (adr r3, 8013618 <__ieee754_rem_pio2+0x300>)
 8013448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344c:	4639      	mov	r1, r7
 801344e:	f7ed f8eb 	bl	8000628 <__aeabi_dmul>
 8013452:	2200      	movs	r2, #0
 8013454:	4b7a      	ldr	r3, [pc, #488]	; (8013640 <__ieee754_rem_pio2+0x328>)
 8013456:	f7ec ff31 	bl	80002bc <__adddf3>
 801345a:	f7ed fb95 	bl	8000b88 <__aeabi_d2iz>
 801345e:	4605      	mov	r5, r0
 8013460:	f7ed f878 	bl	8000554 <__aeabi_i2d>
 8013464:	a364      	add	r3, pc, #400	; (adr r3, 80135f8 <__ieee754_rem_pio2+0x2e0>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801346e:	f7ed f8db 	bl	8000628 <__aeabi_dmul>
 8013472:	4602      	mov	r2, r0
 8013474:	460b      	mov	r3, r1
 8013476:	4630      	mov	r0, r6
 8013478:	4639      	mov	r1, r7
 801347a:	f7ec ff1d 	bl	80002b8 <__aeabi_dsub>
 801347e:	a360      	add	r3, pc, #384	; (adr r3, 8013600 <__ieee754_rem_pio2+0x2e8>)
 8013480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013484:	4682      	mov	sl, r0
 8013486:	468b      	mov	fp, r1
 8013488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801348c:	f7ed f8cc 	bl	8000628 <__aeabi_dmul>
 8013490:	2d1f      	cmp	r5, #31
 8013492:	4606      	mov	r6, r0
 8013494:	460f      	mov	r7, r1
 8013496:	dc0c      	bgt.n	80134b2 <__ieee754_rem_pio2+0x19a>
 8013498:	1e6a      	subs	r2, r5, #1
 801349a:	4b6a      	ldr	r3, [pc, #424]	; (8013644 <__ieee754_rem_pio2+0x32c>)
 801349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134a0:	4543      	cmp	r3, r8
 80134a2:	d006      	beq.n	80134b2 <__ieee754_rem_pio2+0x19a>
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4650      	mov	r0, sl
 80134aa:	4659      	mov	r1, fp
 80134ac:	f7ec ff04 	bl	80002b8 <__aeabi_dsub>
 80134b0:	e00e      	b.n	80134d0 <__ieee754_rem_pio2+0x1b8>
 80134b2:	4632      	mov	r2, r6
 80134b4:	463b      	mov	r3, r7
 80134b6:	4650      	mov	r0, sl
 80134b8:	4659      	mov	r1, fp
 80134ba:	f7ec fefd 	bl	80002b8 <__aeabi_dsub>
 80134be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80134c2:	9305      	str	r3, [sp, #20]
 80134c4:	9a05      	ldr	r2, [sp, #20]
 80134c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80134ca:	1ad3      	subs	r3, r2, r3
 80134cc:	2b10      	cmp	r3, #16
 80134ce:	dc02      	bgt.n	80134d6 <__ieee754_rem_pio2+0x1be>
 80134d0:	e9c4 0100 	strd	r0, r1, [r4]
 80134d4:	e039      	b.n	801354a <__ieee754_rem_pio2+0x232>
 80134d6:	a34c      	add	r3, pc, #304	; (adr r3, 8013608 <__ieee754_rem_pio2+0x2f0>)
 80134d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134e0:	f7ed f8a2 	bl	8000628 <__aeabi_dmul>
 80134e4:	4606      	mov	r6, r0
 80134e6:	460f      	mov	r7, r1
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	4650      	mov	r0, sl
 80134ee:	4659      	mov	r1, fp
 80134f0:	f7ec fee2 	bl	80002b8 <__aeabi_dsub>
 80134f4:	4602      	mov	r2, r0
 80134f6:	460b      	mov	r3, r1
 80134f8:	4680      	mov	r8, r0
 80134fa:	4689      	mov	r9, r1
 80134fc:	4650      	mov	r0, sl
 80134fe:	4659      	mov	r1, fp
 8013500:	f7ec feda 	bl	80002b8 <__aeabi_dsub>
 8013504:	4632      	mov	r2, r6
 8013506:	463b      	mov	r3, r7
 8013508:	f7ec fed6 	bl	80002b8 <__aeabi_dsub>
 801350c:	a340      	add	r3, pc, #256	; (adr r3, 8013610 <__ieee754_rem_pio2+0x2f8>)
 801350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013512:	4606      	mov	r6, r0
 8013514:	460f      	mov	r7, r1
 8013516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801351a:	f7ed f885 	bl	8000628 <__aeabi_dmul>
 801351e:	4632      	mov	r2, r6
 8013520:	463b      	mov	r3, r7
 8013522:	f7ec fec9 	bl	80002b8 <__aeabi_dsub>
 8013526:	4602      	mov	r2, r0
 8013528:	460b      	mov	r3, r1
 801352a:	4606      	mov	r6, r0
 801352c:	460f      	mov	r7, r1
 801352e:	4640      	mov	r0, r8
 8013530:	4649      	mov	r1, r9
 8013532:	f7ec fec1 	bl	80002b8 <__aeabi_dsub>
 8013536:	9a05      	ldr	r2, [sp, #20]
 8013538:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801353c:	1ad3      	subs	r3, r2, r3
 801353e:	2b31      	cmp	r3, #49	; 0x31
 8013540:	dc20      	bgt.n	8013584 <__ieee754_rem_pio2+0x26c>
 8013542:	e9c4 0100 	strd	r0, r1, [r4]
 8013546:	46c2      	mov	sl, r8
 8013548:	46cb      	mov	fp, r9
 801354a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801354e:	4650      	mov	r0, sl
 8013550:	4642      	mov	r2, r8
 8013552:	464b      	mov	r3, r9
 8013554:	4659      	mov	r1, fp
 8013556:	f7ec feaf 	bl	80002b8 <__aeabi_dsub>
 801355a:	463b      	mov	r3, r7
 801355c:	4632      	mov	r2, r6
 801355e:	f7ec feab 	bl	80002b8 <__aeabi_dsub>
 8013562:	9b04      	ldr	r3, [sp, #16]
 8013564:	2b00      	cmp	r3, #0
 8013566:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801356a:	f6bf af11 	bge.w	8013390 <__ieee754_rem_pio2+0x78>
 801356e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013572:	6063      	str	r3, [r4, #4]
 8013574:	f8c4 8000 	str.w	r8, [r4]
 8013578:	60a0      	str	r0, [r4, #8]
 801357a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801357e:	60e3      	str	r3, [r4, #12]
 8013580:	426d      	negs	r5, r5
 8013582:	e705      	b.n	8013390 <__ieee754_rem_pio2+0x78>
 8013584:	a326      	add	r3, pc, #152	; (adr r3, 8013620 <__ieee754_rem_pio2+0x308>)
 8013586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801358e:	f7ed f84b 	bl	8000628 <__aeabi_dmul>
 8013592:	4606      	mov	r6, r0
 8013594:	460f      	mov	r7, r1
 8013596:	4602      	mov	r2, r0
 8013598:	460b      	mov	r3, r1
 801359a:	4640      	mov	r0, r8
 801359c:	4649      	mov	r1, r9
 801359e:	f7ec fe8b 	bl	80002b8 <__aeabi_dsub>
 80135a2:	4602      	mov	r2, r0
 80135a4:	460b      	mov	r3, r1
 80135a6:	4682      	mov	sl, r0
 80135a8:	468b      	mov	fp, r1
 80135aa:	4640      	mov	r0, r8
 80135ac:	4649      	mov	r1, r9
 80135ae:	f7ec fe83 	bl	80002b8 <__aeabi_dsub>
 80135b2:	4632      	mov	r2, r6
 80135b4:	463b      	mov	r3, r7
 80135b6:	f7ec fe7f 	bl	80002b8 <__aeabi_dsub>
 80135ba:	a31b      	add	r3, pc, #108	; (adr r3, 8013628 <__ieee754_rem_pio2+0x310>)
 80135bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c0:	4606      	mov	r6, r0
 80135c2:	460f      	mov	r7, r1
 80135c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135c8:	f7ed f82e 	bl	8000628 <__aeabi_dmul>
 80135cc:	4632      	mov	r2, r6
 80135ce:	463b      	mov	r3, r7
 80135d0:	f7ec fe72 	bl	80002b8 <__aeabi_dsub>
 80135d4:	4606      	mov	r6, r0
 80135d6:	460f      	mov	r7, r1
 80135d8:	e764      	b.n	80134a4 <__ieee754_rem_pio2+0x18c>
 80135da:	4b1b      	ldr	r3, [pc, #108]	; (8013648 <__ieee754_rem_pio2+0x330>)
 80135dc:	4598      	cmp	r8, r3
 80135de:	dd35      	ble.n	801364c <__ieee754_rem_pio2+0x334>
 80135e0:	ee10 2a10 	vmov	r2, s0
 80135e4:	463b      	mov	r3, r7
 80135e6:	4630      	mov	r0, r6
 80135e8:	4639      	mov	r1, r7
 80135ea:	f7ec fe65 	bl	80002b8 <__aeabi_dsub>
 80135ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80135f2:	e9c4 0100 	strd	r0, r1, [r4]
 80135f6:	e6a1      	b.n	801333c <__ieee754_rem_pio2+0x24>
 80135f8:	54400000 	.word	0x54400000
 80135fc:	3ff921fb 	.word	0x3ff921fb
 8013600:	1a626331 	.word	0x1a626331
 8013604:	3dd0b461 	.word	0x3dd0b461
 8013608:	1a600000 	.word	0x1a600000
 801360c:	3dd0b461 	.word	0x3dd0b461
 8013610:	2e037073 	.word	0x2e037073
 8013614:	3ba3198a 	.word	0x3ba3198a
 8013618:	6dc9c883 	.word	0x6dc9c883
 801361c:	3fe45f30 	.word	0x3fe45f30
 8013620:	2e000000 	.word	0x2e000000
 8013624:	3ba3198a 	.word	0x3ba3198a
 8013628:	252049c1 	.word	0x252049c1
 801362c:	397b839a 	.word	0x397b839a
 8013630:	3fe921fb 	.word	0x3fe921fb
 8013634:	4002d97b 	.word	0x4002d97b
 8013638:	3ff921fb 	.word	0x3ff921fb
 801363c:	413921fb 	.word	0x413921fb
 8013640:	3fe00000 	.word	0x3fe00000
 8013644:	08018ccc 	.word	0x08018ccc
 8013648:	7fefffff 	.word	0x7fefffff
 801364c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013650:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013654:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013658:	4630      	mov	r0, r6
 801365a:	460f      	mov	r7, r1
 801365c:	f7ed fa94 	bl	8000b88 <__aeabi_d2iz>
 8013660:	f7ec ff78 	bl	8000554 <__aeabi_i2d>
 8013664:	4602      	mov	r2, r0
 8013666:	460b      	mov	r3, r1
 8013668:	4630      	mov	r0, r6
 801366a:	4639      	mov	r1, r7
 801366c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013670:	f7ec fe22 	bl	80002b8 <__aeabi_dsub>
 8013674:	2200      	movs	r2, #0
 8013676:	4b1f      	ldr	r3, [pc, #124]	; (80136f4 <__ieee754_rem_pio2+0x3dc>)
 8013678:	f7ec ffd6 	bl	8000628 <__aeabi_dmul>
 801367c:	460f      	mov	r7, r1
 801367e:	4606      	mov	r6, r0
 8013680:	f7ed fa82 	bl	8000b88 <__aeabi_d2iz>
 8013684:	f7ec ff66 	bl	8000554 <__aeabi_i2d>
 8013688:	4602      	mov	r2, r0
 801368a:	460b      	mov	r3, r1
 801368c:	4630      	mov	r0, r6
 801368e:	4639      	mov	r1, r7
 8013690:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013694:	f7ec fe10 	bl	80002b8 <__aeabi_dsub>
 8013698:	2200      	movs	r2, #0
 801369a:	4b16      	ldr	r3, [pc, #88]	; (80136f4 <__ieee754_rem_pio2+0x3dc>)
 801369c:	f7ec ffc4 	bl	8000628 <__aeabi_dmul>
 80136a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80136a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80136a8:	f04f 0803 	mov.w	r8, #3
 80136ac:	2600      	movs	r6, #0
 80136ae:	2700      	movs	r7, #0
 80136b0:	4632      	mov	r2, r6
 80136b2:	463b      	mov	r3, r7
 80136b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80136b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80136bc:	f7ed fa1c 	bl	8000af8 <__aeabi_dcmpeq>
 80136c0:	b9b0      	cbnz	r0, 80136f0 <__ieee754_rem_pio2+0x3d8>
 80136c2:	4b0d      	ldr	r3, [pc, #52]	; (80136f8 <__ieee754_rem_pio2+0x3e0>)
 80136c4:	9301      	str	r3, [sp, #4]
 80136c6:	2302      	movs	r3, #2
 80136c8:	9300      	str	r3, [sp, #0]
 80136ca:	462a      	mov	r2, r5
 80136cc:	4643      	mov	r3, r8
 80136ce:	4621      	mov	r1, r4
 80136d0:	a806      	add	r0, sp, #24
 80136d2:	f000 f8dd 	bl	8013890 <__kernel_rem_pio2>
 80136d6:	9b04      	ldr	r3, [sp, #16]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	4605      	mov	r5, r0
 80136dc:	f6bf ae58 	bge.w	8013390 <__ieee754_rem_pio2+0x78>
 80136e0:	6863      	ldr	r3, [r4, #4]
 80136e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80136e6:	6063      	str	r3, [r4, #4]
 80136e8:	68e3      	ldr	r3, [r4, #12]
 80136ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80136ee:	e746      	b.n	801357e <__ieee754_rem_pio2+0x266>
 80136f0:	46d0      	mov	r8, sl
 80136f2:	e7dd      	b.n	80136b0 <__ieee754_rem_pio2+0x398>
 80136f4:	41700000 	.word	0x41700000
 80136f8:	08018d4c 	.word	0x08018d4c
 80136fc:	00000000 	.word	0x00000000

08013700 <__kernel_cos>:
 8013700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	ec59 8b10 	vmov	r8, r9, d0
 8013708:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801370c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013710:	ed2d 8b02 	vpush	{d8}
 8013714:	eeb0 8a41 	vmov.f32	s16, s2
 8013718:	eef0 8a61 	vmov.f32	s17, s3
 801371c:	da07      	bge.n	801372e <__kernel_cos+0x2e>
 801371e:	ee10 0a10 	vmov	r0, s0
 8013722:	4649      	mov	r1, r9
 8013724:	f7ed fa30 	bl	8000b88 <__aeabi_d2iz>
 8013728:	2800      	cmp	r0, #0
 801372a:	f000 8089 	beq.w	8013840 <__kernel_cos+0x140>
 801372e:	4642      	mov	r2, r8
 8013730:	464b      	mov	r3, r9
 8013732:	4640      	mov	r0, r8
 8013734:	4649      	mov	r1, r9
 8013736:	f7ec ff77 	bl	8000628 <__aeabi_dmul>
 801373a:	2200      	movs	r2, #0
 801373c:	4b4e      	ldr	r3, [pc, #312]	; (8013878 <__kernel_cos+0x178>)
 801373e:	4604      	mov	r4, r0
 8013740:	460d      	mov	r5, r1
 8013742:	f7ec ff71 	bl	8000628 <__aeabi_dmul>
 8013746:	a340      	add	r3, pc, #256	; (adr r3, 8013848 <__kernel_cos+0x148>)
 8013748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374c:	4682      	mov	sl, r0
 801374e:	468b      	mov	fp, r1
 8013750:	4620      	mov	r0, r4
 8013752:	4629      	mov	r1, r5
 8013754:	f7ec ff68 	bl	8000628 <__aeabi_dmul>
 8013758:	a33d      	add	r3, pc, #244	; (adr r3, 8013850 <__kernel_cos+0x150>)
 801375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801375e:	f7ec fdad 	bl	80002bc <__adddf3>
 8013762:	4622      	mov	r2, r4
 8013764:	462b      	mov	r3, r5
 8013766:	f7ec ff5f 	bl	8000628 <__aeabi_dmul>
 801376a:	a33b      	add	r3, pc, #236	; (adr r3, 8013858 <__kernel_cos+0x158>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	f7ec fda2 	bl	80002b8 <__aeabi_dsub>
 8013774:	4622      	mov	r2, r4
 8013776:	462b      	mov	r3, r5
 8013778:	f7ec ff56 	bl	8000628 <__aeabi_dmul>
 801377c:	a338      	add	r3, pc, #224	; (adr r3, 8013860 <__kernel_cos+0x160>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	f7ec fd9b 	bl	80002bc <__adddf3>
 8013786:	4622      	mov	r2, r4
 8013788:	462b      	mov	r3, r5
 801378a:	f7ec ff4d 	bl	8000628 <__aeabi_dmul>
 801378e:	a336      	add	r3, pc, #216	; (adr r3, 8013868 <__kernel_cos+0x168>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	f7ec fd90 	bl	80002b8 <__aeabi_dsub>
 8013798:	4622      	mov	r2, r4
 801379a:	462b      	mov	r3, r5
 801379c:	f7ec ff44 	bl	8000628 <__aeabi_dmul>
 80137a0:	a333      	add	r3, pc, #204	; (adr r3, 8013870 <__kernel_cos+0x170>)
 80137a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a6:	f7ec fd89 	bl	80002bc <__adddf3>
 80137aa:	4622      	mov	r2, r4
 80137ac:	462b      	mov	r3, r5
 80137ae:	f7ec ff3b 	bl	8000628 <__aeabi_dmul>
 80137b2:	4622      	mov	r2, r4
 80137b4:	462b      	mov	r3, r5
 80137b6:	f7ec ff37 	bl	8000628 <__aeabi_dmul>
 80137ba:	ec53 2b18 	vmov	r2, r3, d8
 80137be:	4604      	mov	r4, r0
 80137c0:	460d      	mov	r5, r1
 80137c2:	4640      	mov	r0, r8
 80137c4:	4649      	mov	r1, r9
 80137c6:	f7ec ff2f 	bl	8000628 <__aeabi_dmul>
 80137ca:	460b      	mov	r3, r1
 80137cc:	4602      	mov	r2, r0
 80137ce:	4629      	mov	r1, r5
 80137d0:	4620      	mov	r0, r4
 80137d2:	f7ec fd71 	bl	80002b8 <__aeabi_dsub>
 80137d6:	4b29      	ldr	r3, [pc, #164]	; (801387c <__kernel_cos+0x17c>)
 80137d8:	429e      	cmp	r6, r3
 80137da:	4680      	mov	r8, r0
 80137dc:	4689      	mov	r9, r1
 80137de:	dc11      	bgt.n	8013804 <__kernel_cos+0x104>
 80137e0:	4602      	mov	r2, r0
 80137e2:	460b      	mov	r3, r1
 80137e4:	4650      	mov	r0, sl
 80137e6:	4659      	mov	r1, fp
 80137e8:	f7ec fd66 	bl	80002b8 <__aeabi_dsub>
 80137ec:	460b      	mov	r3, r1
 80137ee:	4924      	ldr	r1, [pc, #144]	; (8013880 <__kernel_cos+0x180>)
 80137f0:	4602      	mov	r2, r0
 80137f2:	2000      	movs	r0, #0
 80137f4:	f7ec fd60 	bl	80002b8 <__aeabi_dsub>
 80137f8:	ecbd 8b02 	vpop	{d8}
 80137fc:	ec41 0b10 	vmov	d0, r0, r1
 8013800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013804:	4b1f      	ldr	r3, [pc, #124]	; (8013884 <__kernel_cos+0x184>)
 8013806:	491e      	ldr	r1, [pc, #120]	; (8013880 <__kernel_cos+0x180>)
 8013808:	429e      	cmp	r6, r3
 801380a:	bfcc      	ite	gt
 801380c:	4d1e      	ldrgt	r5, [pc, #120]	; (8013888 <__kernel_cos+0x188>)
 801380e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013812:	2400      	movs	r4, #0
 8013814:	4622      	mov	r2, r4
 8013816:	462b      	mov	r3, r5
 8013818:	2000      	movs	r0, #0
 801381a:	f7ec fd4d 	bl	80002b8 <__aeabi_dsub>
 801381e:	4622      	mov	r2, r4
 8013820:	4606      	mov	r6, r0
 8013822:	460f      	mov	r7, r1
 8013824:	462b      	mov	r3, r5
 8013826:	4650      	mov	r0, sl
 8013828:	4659      	mov	r1, fp
 801382a:	f7ec fd45 	bl	80002b8 <__aeabi_dsub>
 801382e:	4642      	mov	r2, r8
 8013830:	464b      	mov	r3, r9
 8013832:	f7ec fd41 	bl	80002b8 <__aeabi_dsub>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	4630      	mov	r0, r6
 801383c:	4639      	mov	r1, r7
 801383e:	e7d9      	b.n	80137f4 <__kernel_cos+0xf4>
 8013840:	2000      	movs	r0, #0
 8013842:	490f      	ldr	r1, [pc, #60]	; (8013880 <__kernel_cos+0x180>)
 8013844:	e7d8      	b.n	80137f8 <__kernel_cos+0xf8>
 8013846:	bf00      	nop
 8013848:	be8838d4 	.word	0xbe8838d4
 801384c:	bda8fae9 	.word	0xbda8fae9
 8013850:	bdb4b1c4 	.word	0xbdb4b1c4
 8013854:	3e21ee9e 	.word	0x3e21ee9e
 8013858:	809c52ad 	.word	0x809c52ad
 801385c:	3e927e4f 	.word	0x3e927e4f
 8013860:	19cb1590 	.word	0x19cb1590
 8013864:	3efa01a0 	.word	0x3efa01a0
 8013868:	16c15177 	.word	0x16c15177
 801386c:	3f56c16c 	.word	0x3f56c16c
 8013870:	5555554c 	.word	0x5555554c
 8013874:	3fa55555 	.word	0x3fa55555
 8013878:	3fe00000 	.word	0x3fe00000
 801387c:	3fd33332 	.word	0x3fd33332
 8013880:	3ff00000 	.word	0x3ff00000
 8013884:	3fe90000 	.word	0x3fe90000
 8013888:	3fd20000 	.word	0x3fd20000
 801388c:	00000000 	.word	0x00000000

08013890 <__kernel_rem_pio2>:
 8013890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013894:	ed2d 8b02 	vpush	{d8}
 8013898:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801389c:	1ed4      	subs	r4, r2, #3
 801389e:	9308      	str	r3, [sp, #32]
 80138a0:	9101      	str	r1, [sp, #4]
 80138a2:	4bc5      	ldr	r3, [pc, #788]	; (8013bb8 <__kernel_rem_pio2+0x328>)
 80138a4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80138a6:	9009      	str	r0, [sp, #36]	; 0x24
 80138a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80138ac:	9304      	str	r3, [sp, #16]
 80138ae:	9b08      	ldr	r3, [sp, #32]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	9307      	str	r3, [sp, #28]
 80138b4:	2318      	movs	r3, #24
 80138b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80138ba:	f06f 0317 	mvn.w	r3, #23
 80138be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80138c2:	fb04 3303 	mla	r3, r4, r3, r3
 80138c6:	eb03 0a02 	add.w	sl, r3, r2
 80138ca:	9b04      	ldr	r3, [sp, #16]
 80138cc:	9a07      	ldr	r2, [sp, #28]
 80138ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013ba8 <__kernel_rem_pio2+0x318>
 80138d2:	eb03 0802 	add.w	r8, r3, r2
 80138d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80138d8:	1aa7      	subs	r7, r4, r2
 80138da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80138de:	ae22      	add	r6, sp, #136	; 0x88
 80138e0:	2500      	movs	r5, #0
 80138e2:	4545      	cmp	r5, r8
 80138e4:	dd13      	ble.n	801390e <__kernel_rem_pio2+0x7e>
 80138e6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013ba8 <__kernel_rem_pio2+0x318>
 80138ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80138ee:	2600      	movs	r6, #0
 80138f0:	9b04      	ldr	r3, [sp, #16]
 80138f2:	429e      	cmp	r6, r3
 80138f4:	dc32      	bgt.n	801395c <__kernel_rem_pio2+0xcc>
 80138f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138f8:	9302      	str	r3, [sp, #8]
 80138fa:	9b08      	ldr	r3, [sp, #32]
 80138fc:	199d      	adds	r5, r3, r6
 80138fe:	ab22      	add	r3, sp, #136	; 0x88
 8013900:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013904:	9306      	str	r3, [sp, #24]
 8013906:	ec59 8b18 	vmov	r8, r9, d8
 801390a:	2700      	movs	r7, #0
 801390c:	e01f      	b.n	801394e <__kernel_rem_pio2+0xbe>
 801390e:	42ef      	cmn	r7, r5
 8013910:	d407      	bmi.n	8013922 <__kernel_rem_pio2+0x92>
 8013912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013916:	f7ec fe1d 	bl	8000554 <__aeabi_i2d>
 801391a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801391e:	3501      	adds	r5, #1
 8013920:	e7df      	b.n	80138e2 <__kernel_rem_pio2+0x52>
 8013922:	ec51 0b18 	vmov	r0, r1, d8
 8013926:	e7f8      	b.n	801391a <__kernel_rem_pio2+0x8a>
 8013928:	9906      	ldr	r1, [sp, #24]
 801392a:	9d02      	ldr	r5, [sp, #8]
 801392c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013930:	9106      	str	r1, [sp, #24]
 8013932:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013936:	9502      	str	r5, [sp, #8]
 8013938:	f7ec fe76 	bl	8000628 <__aeabi_dmul>
 801393c:	4602      	mov	r2, r0
 801393e:	460b      	mov	r3, r1
 8013940:	4640      	mov	r0, r8
 8013942:	4649      	mov	r1, r9
 8013944:	f7ec fcba 	bl	80002bc <__adddf3>
 8013948:	3701      	adds	r7, #1
 801394a:	4680      	mov	r8, r0
 801394c:	4689      	mov	r9, r1
 801394e:	9b07      	ldr	r3, [sp, #28]
 8013950:	429f      	cmp	r7, r3
 8013952:	dde9      	ble.n	8013928 <__kernel_rem_pio2+0x98>
 8013954:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013958:	3601      	adds	r6, #1
 801395a:	e7c9      	b.n	80138f0 <__kernel_rem_pio2+0x60>
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	aa0e      	add	r2, sp, #56	; 0x38
 8013960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013964:	930c      	str	r3, [sp, #48]	; 0x30
 8013966:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013968:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801396c:	9c04      	ldr	r4, [sp, #16]
 801396e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013970:	ab9a      	add	r3, sp, #616	; 0x268
 8013972:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013976:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801397a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801397e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013982:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013986:	ab9a      	add	r3, sp, #616	; 0x268
 8013988:	445b      	add	r3, fp
 801398a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801398e:	2500      	movs	r5, #0
 8013990:	1b63      	subs	r3, r4, r5
 8013992:	2b00      	cmp	r3, #0
 8013994:	dc78      	bgt.n	8013a88 <__kernel_rem_pio2+0x1f8>
 8013996:	4650      	mov	r0, sl
 8013998:	ec49 8b10 	vmov	d0, r8, r9
 801399c:	f000 fc00 	bl	80141a0 <scalbn>
 80139a0:	ec57 6b10 	vmov	r6, r7, d0
 80139a4:	2200      	movs	r2, #0
 80139a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80139aa:	ee10 0a10 	vmov	r0, s0
 80139ae:	4639      	mov	r1, r7
 80139b0:	f7ec fe3a 	bl	8000628 <__aeabi_dmul>
 80139b4:	ec41 0b10 	vmov	d0, r0, r1
 80139b8:	f000 fb6e 	bl	8014098 <floor>
 80139bc:	2200      	movs	r2, #0
 80139be:	ec51 0b10 	vmov	r0, r1, d0
 80139c2:	4b7e      	ldr	r3, [pc, #504]	; (8013bbc <__kernel_rem_pio2+0x32c>)
 80139c4:	f7ec fe30 	bl	8000628 <__aeabi_dmul>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	4630      	mov	r0, r6
 80139ce:	4639      	mov	r1, r7
 80139d0:	f7ec fc72 	bl	80002b8 <__aeabi_dsub>
 80139d4:	460f      	mov	r7, r1
 80139d6:	4606      	mov	r6, r0
 80139d8:	f7ed f8d6 	bl	8000b88 <__aeabi_d2iz>
 80139dc:	9006      	str	r0, [sp, #24]
 80139de:	f7ec fdb9 	bl	8000554 <__aeabi_i2d>
 80139e2:	4602      	mov	r2, r0
 80139e4:	460b      	mov	r3, r1
 80139e6:	4630      	mov	r0, r6
 80139e8:	4639      	mov	r1, r7
 80139ea:	f7ec fc65 	bl	80002b8 <__aeabi_dsub>
 80139ee:	f1ba 0f00 	cmp.w	sl, #0
 80139f2:	4606      	mov	r6, r0
 80139f4:	460f      	mov	r7, r1
 80139f6:	dd6c      	ble.n	8013ad2 <__kernel_rem_pio2+0x242>
 80139f8:	1e62      	subs	r2, r4, #1
 80139fa:	ab0e      	add	r3, sp, #56	; 0x38
 80139fc:	f1ca 0118 	rsb	r1, sl, #24
 8013a00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013a04:	9d06      	ldr	r5, [sp, #24]
 8013a06:	fa40 f301 	asr.w	r3, r0, r1
 8013a0a:	441d      	add	r5, r3
 8013a0c:	408b      	lsls	r3, r1
 8013a0e:	1ac0      	subs	r0, r0, r3
 8013a10:	ab0e      	add	r3, sp, #56	; 0x38
 8013a12:	9506      	str	r5, [sp, #24]
 8013a14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013a18:	f1ca 0317 	rsb	r3, sl, #23
 8013a1c:	fa40 f303 	asr.w	r3, r0, r3
 8013a20:	9302      	str	r3, [sp, #8]
 8013a22:	9b02      	ldr	r3, [sp, #8]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dd62      	ble.n	8013aee <__kernel_rem_pio2+0x25e>
 8013a28:	9b06      	ldr	r3, [sp, #24]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	9306      	str	r3, [sp, #24]
 8013a30:	4615      	mov	r5, r2
 8013a32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013a36:	4294      	cmp	r4, r2
 8013a38:	f300 8095 	bgt.w	8013b66 <__kernel_rem_pio2+0x2d6>
 8013a3c:	f1ba 0f00 	cmp.w	sl, #0
 8013a40:	dd07      	ble.n	8013a52 <__kernel_rem_pio2+0x1c2>
 8013a42:	f1ba 0f01 	cmp.w	sl, #1
 8013a46:	f000 80a2 	beq.w	8013b8e <__kernel_rem_pio2+0x2fe>
 8013a4a:	f1ba 0f02 	cmp.w	sl, #2
 8013a4e:	f000 80c1 	beq.w	8013bd4 <__kernel_rem_pio2+0x344>
 8013a52:	9b02      	ldr	r3, [sp, #8]
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d14a      	bne.n	8013aee <__kernel_rem_pio2+0x25e>
 8013a58:	4632      	mov	r2, r6
 8013a5a:	463b      	mov	r3, r7
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	4958      	ldr	r1, [pc, #352]	; (8013bc0 <__kernel_rem_pio2+0x330>)
 8013a60:	f7ec fc2a 	bl	80002b8 <__aeabi_dsub>
 8013a64:	4606      	mov	r6, r0
 8013a66:	460f      	mov	r7, r1
 8013a68:	2d00      	cmp	r5, #0
 8013a6a:	d040      	beq.n	8013aee <__kernel_rem_pio2+0x25e>
 8013a6c:	4650      	mov	r0, sl
 8013a6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013bb0 <__kernel_rem_pio2+0x320>
 8013a72:	f000 fb95 	bl	80141a0 <scalbn>
 8013a76:	4630      	mov	r0, r6
 8013a78:	4639      	mov	r1, r7
 8013a7a:	ec53 2b10 	vmov	r2, r3, d0
 8013a7e:	f7ec fc1b 	bl	80002b8 <__aeabi_dsub>
 8013a82:	4606      	mov	r6, r0
 8013a84:	460f      	mov	r7, r1
 8013a86:	e032      	b.n	8013aee <__kernel_rem_pio2+0x25e>
 8013a88:	2200      	movs	r2, #0
 8013a8a:	4b4e      	ldr	r3, [pc, #312]	; (8013bc4 <__kernel_rem_pio2+0x334>)
 8013a8c:	4640      	mov	r0, r8
 8013a8e:	4649      	mov	r1, r9
 8013a90:	f7ec fdca 	bl	8000628 <__aeabi_dmul>
 8013a94:	f7ed f878 	bl	8000b88 <__aeabi_d2iz>
 8013a98:	f7ec fd5c 	bl	8000554 <__aeabi_i2d>
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	4b4a      	ldr	r3, [pc, #296]	; (8013bc8 <__kernel_rem_pio2+0x338>)
 8013aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013aa4:	f7ec fdc0 	bl	8000628 <__aeabi_dmul>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	4640      	mov	r0, r8
 8013aae:	4649      	mov	r1, r9
 8013ab0:	f7ec fc02 	bl	80002b8 <__aeabi_dsub>
 8013ab4:	f7ed f868 	bl	8000b88 <__aeabi_d2iz>
 8013ab8:	ab0e      	add	r3, sp, #56	; 0x38
 8013aba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013abe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ac6:	f7ec fbf9 	bl	80002bc <__adddf3>
 8013aca:	3501      	adds	r5, #1
 8013acc:	4680      	mov	r8, r0
 8013ace:	4689      	mov	r9, r1
 8013ad0:	e75e      	b.n	8013990 <__kernel_rem_pio2+0x100>
 8013ad2:	d105      	bne.n	8013ae0 <__kernel_rem_pio2+0x250>
 8013ad4:	1e63      	subs	r3, r4, #1
 8013ad6:	aa0e      	add	r2, sp, #56	; 0x38
 8013ad8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013adc:	15c3      	asrs	r3, r0, #23
 8013ade:	e79f      	b.n	8013a20 <__kernel_rem_pio2+0x190>
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	4b3a      	ldr	r3, [pc, #232]	; (8013bcc <__kernel_rem_pio2+0x33c>)
 8013ae4:	f7ed f826 	bl	8000b34 <__aeabi_dcmpge>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d139      	bne.n	8013b60 <__kernel_rem_pio2+0x2d0>
 8013aec:	9002      	str	r0, [sp, #8]
 8013aee:	2200      	movs	r2, #0
 8013af0:	2300      	movs	r3, #0
 8013af2:	4630      	mov	r0, r6
 8013af4:	4639      	mov	r1, r7
 8013af6:	f7ec ffff 	bl	8000af8 <__aeabi_dcmpeq>
 8013afa:	2800      	cmp	r0, #0
 8013afc:	f000 80c7 	beq.w	8013c8e <__kernel_rem_pio2+0x3fe>
 8013b00:	1e65      	subs	r5, r4, #1
 8013b02:	462b      	mov	r3, r5
 8013b04:	2200      	movs	r2, #0
 8013b06:	9904      	ldr	r1, [sp, #16]
 8013b08:	428b      	cmp	r3, r1
 8013b0a:	da6a      	bge.n	8013be2 <__kernel_rem_pio2+0x352>
 8013b0c:	2a00      	cmp	r2, #0
 8013b0e:	f000 8088 	beq.w	8013c22 <__kernel_rem_pio2+0x392>
 8013b12:	ab0e      	add	r3, sp, #56	; 0x38
 8013b14:	f1aa 0a18 	sub.w	sl, sl, #24
 8013b18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 80b4 	beq.w	8013c8a <__kernel_rem_pio2+0x3fa>
 8013b22:	4650      	mov	r0, sl
 8013b24:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013bb0 <__kernel_rem_pio2+0x320>
 8013b28:	f000 fb3a 	bl	80141a0 <scalbn>
 8013b2c:	00ec      	lsls	r4, r5, #3
 8013b2e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013b30:	191e      	adds	r6, r3, r4
 8013b32:	ec59 8b10 	vmov	r8, r9, d0
 8013b36:	f106 0a08 	add.w	sl, r6, #8
 8013b3a:	462f      	mov	r7, r5
 8013b3c:	2f00      	cmp	r7, #0
 8013b3e:	f280 80df 	bge.w	8013d00 <__kernel_rem_pio2+0x470>
 8013b42:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013ba8 <__kernel_rem_pio2+0x318>
 8013b46:	f04f 0a00 	mov.w	sl, #0
 8013b4a:	eba5 030a 	sub.w	r3, r5, sl
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f2c0 810a 	blt.w	8013d68 <__kernel_rem_pio2+0x4d8>
 8013b54:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013bd0 <__kernel_rem_pio2+0x340>
 8013b58:	ec59 8b18 	vmov	r8, r9, d8
 8013b5c:	2700      	movs	r7, #0
 8013b5e:	e0f5      	b.n	8013d4c <__kernel_rem_pio2+0x4bc>
 8013b60:	2302      	movs	r3, #2
 8013b62:	9302      	str	r3, [sp, #8]
 8013b64:	e760      	b.n	8013a28 <__kernel_rem_pio2+0x198>
 8013b66:	ab0e      	add	r3, sp, #56	; 0x38
 8013b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b6c:	b94d      	cbnz	r5, 8013b82 <__kernel_rem_pio2+0x2f2>
 8013b6e:	b12b      	cbz	r3, 8013b7c <__kernel_rem_pio2+0x2ec>
 8013b70:	a80e      	add	r0, sp, #56	; 0x38
 8013b72:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013b76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	3201      	adds	r2, #1
 8013b7e:	461d      	mov	r5, r3
 8013b80:	e759      	b.n	8013a36 <__kernel_rem_pio2+0x1a6>
 8013b82:	a80e      	add	r0, sp, #56	; 0x38
 8013b84:	1acb      	subs	r3, r1, r3
 8013b86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013b8a:	462b      	mov	r3, r5
 8013b8c:	e7f6      	b.n	8013b7c <__kernel_rem_pio2+0x2ec>
 8013b8e:	1e62      	subs	r2, r4, #1
 8013b90:	ab0e      	add	r3, sp, #56	; 0x38
 8013b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013b9a:	a90e      	add	r1, sp, #56	; 0x38
 8013b9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013ba0:	e757      	b.n	8013a52 <__kernel_rem_pio2+0x1c2>
 8013ba2:	bf00      	nop
 8013ba4:	f3af 8000 	nop.w
	...
 8013bb4:	3ff00000 	.word	0x3ff00000
 8013bb8:	08018e98 	.word	0x08018e98
 8013bbc:	40200000 	.word	0x40200000
 8013bc0:	3ff00000 	.word	0x3ff00000
 8013bc4:	3e700000 	.word	0x3e700000
 8013bc8:	41700000 	.word	0x41700000
 8013bcc:	3fe00000 	.word	0x3fe00000
 8013bd0:	08018e58 	.word	0x08018e58
 8013bd4:	1e62      	subs	r2, r4, #1
 8013bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8013bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bdc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013be0:	e7db      	b.n	8013b9a <__kernel_rem_pio2+0x30a>
 8013be2:	a90e      	add	r1, sp, #56	; 0x38
 8013be4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013be8:	3b01      	subs	r3, #1
 8013bea:	430a      	orrs	r2, r1
 8013bec:	e78b      	b.n	8013b06 <__kernel_rem_pio2+0x276>
 8013bee:	3301      	adds	r3, #1
 8013bf0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013bf4:	2900      	cmp	r1, #0
 8013bf6:	d0fa      	beq.n	8013bee <__kernel_rem_pio2+0x35e>
 8013bf8:	9a08      	ldr	r2, [sp, #32]
 8013bfa:	4422      	add	r2, r4
 8013bfc:	00d2      	lsls	r2, r2, #3
 8013bfe:	a922      	add	r1, sp, #136	; 0x88
 8013c00:	18e3      	adds	r3, r4, r3
 8013c02:	9206      	str	r2, [sp, #24]
 8013c04:	440a      	add	r2, r1
 8013c06:	9302      	str	r3, [sp, #8]
 8013c08:	f10b 0108 	add.w	r1, fp, #8
 8013c0c:	f102 0308 	add.w	r3, r2, #8
 8013c10:	1c66      	adds	r6, r4, #1
 8013c12:	910a      	str	r1, [sp, #40]	; 0x28
 8013c14:	2500      	movs	r5, #0
 8013c16:	930d      	str	r3, [sp, #52]	; 0x34
 8013c18:	9b02      	ldr	r3, [sp, #8]
 8013c1a:	42b3      	cmp	r3, r6
 8013c1c:	da04      	bge.n	8013c28 <__kernel_rem_pio2+0x398>
 8013c1e:	461c      	mov	r4, r3
 8013c20:	e6a6      	b.n	8013970 <__kernel_rem_pio2+0xe0>
 8013c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c24:	2301      	movs	r3, #1
 8013c26:	e7e3      	b.n	8013bf0 <__kernel_rem_pio2+0x360>
 8013c28:	9b06      	ldr	r3, [sp, #24]
 8013c2a:	18ef      	adds	r7, r5, r3
 8013c2c:	ab22      	add	r3, sp, #136	; 0x88
 8013c2e:	441f      	add	r7, r3
 8013c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c36:	f7ec fc8d 	bl	8000554 <__aeabi_i2d>
 8013c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c3c:	461c      	mov	r4, r3
 8013c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c40:	e9c7 0100 	strd	r0, r1, [r7]
 8013c44:	eb03 0b05 	add.w	fp, r3, r5
 8013c48:	2700      	movs	r7, #0
 8013c4a:	f04f 0800 	mov.w	r8, #0
 8013c4e:	f04f 0900 	mov.w	r9, #0
 8013c52:	9b07      	ldr	r3, [sp, #28]
 8013c54:	429f      	cmp	r7, r3
 8013c56:	dd08      	ble.n	8013c6a <__kernel_rem_pio2+0x3da>
 8013c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c5a:	aa72      	add	r2, sp, #456	; 0x1c8
 8013c5c:	18eb      	adds	r3, r5, r3
 8013c5e:	4413      	add	r3, r2
 8013c60:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013c64:	3601      	adds	r6, #1
 8013c66:	3508      	adds	r5, #8
 8013c68:	e7d6      	b.n	8013c18 <__kernel_rem_pio2+0x388>
 8013c6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013c6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013c72:	f7ec fcd9 	bl	8000628 <__aeabi_dmul>
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	4640      	mov	r0, r8
 8013c7c:	4649      	mov	r1, r9
 8013c7e:	f7ec fb1d 	bl	80002bc <__adddf3>
 8013c82:	3701      	adds	r7, #1
 8013c84:	4680      	mov	r8, r0
 8013c86:	4689      	mov	r9, r1
 8013c88:	e7e3      	b.n	8013c52 <__kernel_rem_pio2+0x3c2>
 8013c8a:	3d01      	subs	r5, #1
 8013c8c:	e741      	b.n	8013b12 <__kernel_rem_pio2+0x282>
 8013c8e:	f1ca 0000 	rsb	r0, sl, #0
 8013c92:	ec47 6b10 	vmov	d0, r6, r7
 8013c96:	f000 fa83 	bl	80141a0 <scalbn>
 8013c9a:	ec57 6b10 	vmov	r6, r7, d0
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	4b99      	ldr	r3, [pc, #612]	; (8013f08 <__kernel_rem_pio2+0x678>)
 8013ca2:	ee10 0a10 	vmov	r0, s0
 8013ca6:	4639      	mov	r1, r7
 8013ca8:	f7ec ff44 	bl	8000b34 <__aeabi_dcmpge>
 8013cac:	b1f8      	cbz	r0, 8013cee <__kernel_rem_pio2+0x45e>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	4b96      	ldr	r3, [pc, #600]	; (8013f0c <__kernel_rem_pio2+0x67c>)
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	f7ec fcb7 	bl	8000628 <__aeabi_dmul>
 8013cba:	f7ec ff65 	bl	8000b88 <__aeabi_d2iz>
 8013cbe:	4680      	mov	r8, r0
 8013cc0:	f7ec fc48 	bl	8000554 <__aeabi_i2d>
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	4b90      	ldr	r3, [pc, #576]	; (8013f08 <__kernel_rem_pio2+0x678>)
 8013cc8:	f7ec fcae 	bl	8000628 <__aeabi_dmul>
 8013ccc:	460b      	mov	r3, r1
 8013cce:	4602      	mov	r2, r0
 8013cd0:	4639      	mov	r1, r7
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f7ec faf0 	bl	80002b8 <__aeabi_dsub>
 8013cd8:	f7ec ff56 	bl	8000b88 <__aeabi_d2iz>
 8013cdc:	1c65      	adds	r5, r4, #1
 8013cde:	ab0e      	add	r3, sp, #56	; 0x38
 8013ce0:	f10a 0a18 	add.w	sl, sl, #24
 8013ce4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013ce8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013cec:	e719      	b.n	8013b22 <__kernel_rem_pio2+0x292>
 8013cee:	4630      	mov	r0, r6
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	f7ec ff49 	bl	8000b88 <__aeabi_d2iz>
 8013cf6:	ab0e      	add	r3, sp, #56	; 0x38
 8013cf8:	4625      	mov	r5, r4
 8013cfa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013cfe:	e710      	b.n	8013b22 <__kernel_rem_pio2+0x292>
 8013d00:	ab0e      	add	r3, sp, #56	; 0x38
 8013d02:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013d06:	f7ec fc25 	bl	8000554 <__aeabi_i2d>
 8013d0a:	4642      	mov	r2, r8
 8013d0c:	464b      	mov	r3, r9
 8013d0e:	f7ec fc8b 	bl	8000628 <__aeabi_dmul>
 8013d12:	2200      	movs	r2, #0
 8013d14:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013d18:	4b7c      	ldr	r3, [pc, #496]	; (8013f0c <__kernel_rem_pio2+0x67c>)
 8013d1a:	4640      	mov	r0, r8
 8013d1c:	4649      	mov	r1, r9
 8013d1e:	f7ec fc83 	bl	8000628 <__aeabi_dmul>
 8013d22:	3f01      	subs	r7, #1
 8013d24:	4680      	mov	r8, r0
 8013d26:	4689      	mov	r9, r1
 8013d28:	e708      	b.n	8013b3c <__kernel_rem_pio2+0x2ac>
 8013d2a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8013d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d32:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013d36:	f7ec fc77 	bl	8000628 <__aeabi_dmul>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4640      	mov	r0, r8
 8013d40:	4649      	mov	r1, r9
 8013d42:	f7ec fabb 	bl	80002bc <__adddf3>
 8013d46:	3701      	adds	r7, #1
 8013d48:	4680      	mov	r8, r0
 8013d4a:	4689      	mov	r9, r1
 8013d4c:	9b04      	ldr	r3, [sp, #16]
 8013d4e:	429f      	cmp	r7, r3
 8013d50:	dc01      	bgt.n	8013d56 <__kernel_rem_pio2+0x4c6>
 8013d52:	45ba      	cmp	sl, r7
 8013d54:	dae9      	bge.n	8013d2a <__kernel_rem_pio2+0x49a>
 8013d56:	ab4a      	add	r3, sp, #296	; 0x128
 8013d58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d5c:	e9c3 8900 	strd	r8, r9, [r3]
 8013d60:	f10a 0a01 	add.w	sl, sl, #1
 8013d64:	3e08      	subs	r6, #8
 8013d66:	e6f0      	b.n	8013b4a <__kernel_rem_pio2+0x2ba>
 8013d68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013d6a:	2b03      	cmp	r3, #3
 8013d6c:	d85b      	bhi.n	8013e26 <__kernel_rem_pio2+0x596>
 8013d6e:	e8df f003 	tbb	[pc, r3]
 8013d72:	264a      	.short	0x264a
 8013d74:	0226      	.short	0x0226
 8013d76:	ab9a      	add	r3, sp, #616	; 0x268
 8013d78:	441c      	add	r4, r3
 8013d7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013d7e:	46a2      	mov	sl, r4
 8013d80:	46ab      	mov	fp, r5
 8013d82:	f1bb 0f00 	cmp.w	fp, #0
 8013d86:	dc6c      	bgt.n	8013e62 <__kernel_rem_pio2+0x5d2>
 8013d88:	46a2      	mov	sl, r4
 8013d8a:	46ab      	mov	fp, r5
 8013d8c:	f1bb 0f01 	cmp.w	fp, #1
 8013d90:	f300 8086 	bgt.w	8013ea0 <__kernel_rem_pio2+0x610>
 8013d94:	2000      	movs	r0, #0
 8013d96:	2100      	movs	r1, #0
 8013d98:	2d01      	cmp	r5, #1
 8013d9a:	f300 80a0 	bgt.w	8013ede <__kernel_rem_pio2+0x64e>
 8013d9e:	9b02      	ldr	r3, [sp, #8]
 8013da0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013da4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	f040 809e 	bne.w	8013eea <__kernel_rem_pio2+0x65a>
 8013dae:	9b01      	ldr	r3, [sp, #4]
 8013db0:	e9c3 7800 	strd	r7, r8, [r3]
 8013db4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013db8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013dbc:	e033      	b.n	8013e26 <__kernel_rem_pio2+0x596>
 8013dbe:	3408      	adds	r4, #8
 8013dc0:	ab4a      	add	r3, sp, #296	; 0x128
 8013dc2:	441c      	add	r4, r3
 8013dc4:	462e      	mov	r6, r5
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	2100      	movs	r1, #0
 8013dca:	2e00      	cmp	r6, #0
 8013dcc:	da3a      	bge.n	8013e44 <__kernel_rem_pio2+0x5b4>
 8013dce:	9b02      	ldr	r3, [sp, #8]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d03d      	beq.n	8013e50 <__kernel_rem_pio2+0x5c0>
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dda:	9c01      	ldr	r4, [sp, #4]
 8013ddc:	e9c4 2300 	strd	r2, r3, [r4]
 8013de0:	4602      	mov	r2, r0
 8013de2:	460b      	mov	r3, r1
 8013de4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013de8:	f7ec fa66 	bl	80002b8 <__aeabi_dsub>
 8013dec:	ae4c      	add	r6, sp, #304	; 0x130
 8013dee:	2401      	movs	r4, #1
 8013df0:	42a5      	cmp	r5, r4
 8013df2:	da30      	bge.n	8013e56 <__kernel_rem_pio2+0x5c6>
 8013df4:	9b02      	ldr	r3, [sp, #8]
 8013df6:	b113      	cbz	r3, 8013dfe <__kernel_rem_pio2+0x56e>
 8013df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	9b01      	ldr	r3, [sp, #4]
 8013e00:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013e04:	e00f      	b.n	8013e26 <__kernel_rem_pio2+0x596>
 8013e06:	ab9a      	add	r3, sp, #616	; 0x268
 8013e08:	441c      	add	r4, r3
 8013e0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013e0e:	2000      	movs	r0, #0
 8013e10:	2100      	movs	r1, #0
 8013e12:	2d00      	cmp	r5, #0
 8013e14:	da10      	bge.n	8013e38 <__kernel_rem_pio2+0x5a8>
 8013e16:	9b02      	ldr	r3, [sp, #8]
 8013e18:	b113      	cbz	r3, 8013e20 <__kernel_rem_pio2+0x590>
 8013e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e1e:	4619      	mov	r1, r3
 8013e20:	9b01      	ldr	r3, [sp, #4]
 8013e22:	e9c3 0100 	strd	r0, r1, [r3]
 8013e26:	9b06      	ldr	r3, [sp, #24]
 8013e28:	f003 0007 	and.w	r0, r3, #7
 8013e2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013e30:	ecbd 8b02 	vpop	{d8}
 8013e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e38:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e3c:	f7ec fa3e 	bl	80002bc <__adddf3>
 8013e40:	3d01      	subs	r5, #1
 8013e42:	e7e6      	b.n	8013e12 <__kernel_rem_pio2+0x582>
 8013e44:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e48:	f7ec fa38 	bl	80002bc <__adddf3>
 8013e4c:	3e01      	subs	r6, #1
 8013e4e:	e7bc      	b.n	8013dca <__kernel_rem_pio2+0x53a>
 8013e50:	4602      	mov	r2, r0
 8013e52:	460b      	mov	r3, r1
 8013e54:	e7c1      	b.n	8013dda <__kernel_rem_pio2+0x54a>
 8013e56:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013e5a:	f7ec fa2f 	bl	80002bc <__adddf3>
 8013e5e:	3401      	adds	r4, #1
 8013e60:	e7c6      	b.n	8013df0 <__kernel_rem_pio2+0x560>
 8013e62:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013e66:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	ec53 2b17 	vmov	r2, r3, d7
 8013e70:	4649      	mov	r1, r9
 8013e72:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013e76:	f7ec fa21 	bl	80002bc <__adddf3>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	4606      	mov	r6, r0
 8013e80:	460f      	mov	r7, r1
 8013e82:	4640      	mov	r0, r8
 8013e84:	4649      	mov	r1, r9
 8013e86:	f7ec fa17 	bl	80002b8 <__aeabi_dsub>
 8013e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e8e:	f7ec fa15 	bl	80002bc <__adddf3>
 8013e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e96:	e9ca 0100 	strd	r0, r1, [sl]
 8013e9a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013e9e:	e770      	b.n	8013d82 <__kernel_rem_pio2+0x4f2>
 8013ea0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013ea4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	ec53 2b17 	vmov	r2, r3, d7
 8013eae:	4639      	mov	r1, r7
 8013eb0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013eb4:	f7ec fa02 	bl	80002bc <__adddf3>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	4680      	mov	r8, r0
 8013ebe:	4689      	mov	r9, r1
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	f7ec f9f8 	bl	80002b8 <__aeabi_dsub>
 8013ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ecc:	f7ec f9f6 	bl	80002bc <__adddf3>
 8013ed0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ed4:	e9ca 0100 	strd	r0, r1, [sl]
 8013ed8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8013edc:	e756      	b.n	8013d8c <__kernel_rem_pio2+0x4fc>
 8013ede:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013ee2:	f7ec f9eb 	bl	80002bc <__adddf3>
 8013ee6:	3d01      	subs	r5, #1
 8013ee8:	e756      	b.n	8013d98 <__kernel_rem_pio2+0x508>
 8013eea:	9b01      	ldr	r3, [sp, #4]
 8013eec:	9a01      	ldr	r2, [sp, #4]
 8013eee:	601f      	str	r7, [r3, #0]
 8013ef0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013ef4:	605c      	str	r4, [r3, #4]
 8013ef6:	609d      	str	r5, [r3, #8]
 8013ef8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013efc:	60d3      	str	r3, [r2, #12]
 8013efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f02:	6110      	str	r0, [r2, #16]
 8013f04:	6153      	str	r3, [r2, #20]
 8013f06:	e78e      	b.n	8013e26 <__kernel_rem_pio2+0x596>
 8013f08:	41700000 	.word	0x41700000
 8013f0c:	3e700000 	.word	0x3e700000

08013f10 <__kernel_sin>:
 8013f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f14:	ec55 4b10 	vmov	r4, r5, d0
 8013f18:	b085      	sub	sp, #20
 8013f1a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013f1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013f22:	ed8d 1b00 	vstr	d1, [sp]
 8013f26:	9002      	str	r0, [sp, #8]
 8013f28:	da06      	bge.n	8013f38 <__kernel_sin+0x28>
 8013f2a:	ee10 0a10 	vmov	r0, s0
 8013f2e:	4629      	mov	r1, r5
 8013f30:	f7ec fe2a 	bl	8000b88 <__aeabi_d2iz>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d051      	beq.n	8013fdc <__kernel_sin+0xcc>
 8013f38:	4622      	mov	r2, r4
 8013f3a:	462b      	mov	r3, r5
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	4629      	mov	r1, r5
 8013f40:	f7ec fb72 	bl	8000628 <__aeabi_dmul>
 8013f44:	4682      	mov	sl, r0
 8013f46:	468b      	mov	fp, r1
 8013f48:	4602      	mov	r2, r0
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	4629      	mov	r1, r5
 8013f50:	f7ec fb6a 	bl	8000628 <__aeabi_dmul>
 8013f54:	a341      	add	r3, pc, #260	; (adr r3, 801405c <__kernel_sin+0x14c>)
 8013f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5a:	4680      	mov	r8, r0
 8013f5c:	4689      	mov	r9, r1
 8013f5e:	4650      	mov	r0, sl
 8013f60:	4659      	mov	r1, fp
 8013f62:	f7ec fb61 	bl	8000628 <__aeabi_dmul>
 8013f66:	a33f      	add	r3, pc, #252	; (adr r3, 8014064 <__kernel_sin+0x154>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	f7ec f9a4 	bl	80002b8 <__aeabi_dsub>
 8013f70:	4652      	mov	r2, sl
 8013f72:	465b      	mov	r3, fp
 8013f74:	f7ec fb58 	bl	8000628 <__aeabi_dmul>
 8013f78:	a33c      	add	r3, pc, #240	; (adr r3, 801406c <__kernel_sin+0x15c>)
 8013f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7e:	f7ec f99d 	bl	80002bc <__adddf3>
 8013f82:	4652      	mov	r2, sl
 8013f84:	465b      	mov	r3, fp
 8013f86:	f7ec fb4f 	bl	8000628 <__aeabi_dmul>
 8013f8a:	a33a      	add	r3, pc, #232	; (adr r3, 8014074 <__kernel_sin+0x164>)
 8013f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f90:	f7ec f992 	bl	80002b8 <__aeabi_dsub>
 8013f94:	4652      	mov	r2, sl
 8013f96:	465b      	mov	r3, fp
 8013f98:	f7ec fb46 	bl	8000628 <__aeabi_dmul>
 8013f9c:	a337      	add	r3, pc, #220	; (adr r3, 801407c <__kernel_sin+0x16c>)
 8013f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa2:	f7ec f98b 	bl	80002bc <__adddf3>
 8013fa6:	9b02      	ldr	r3, [sp, #8]
 8013fa8:	4606      	mov	r6, r0
 8013faa:	460f      	mov	r7, r1
 8013fac:	b9db      	cbnz	r3, 8013fe6 <__kernel_sin+0xd6>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	4659      	mov	r1, fp
 8013fb6:	f7ec fb37 	bl	8000628 <__aeabi_dmul>
 8013fba:	a325      	add	r3, pc, #148	; (adr r3, 8014050 <__kernel_sin+0x140>)
 8013fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc0:	f7ec f97a 	bl	80002b8 <__aeabi_dsub>
 8013fc4:	4642      	mov	r2, r8
 8013fc6:	464b      	mov	r3, r9
 8013fc8:	f7ec fb2e 	bl	8000628 <__aeabi_dmul>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	f7ec f972 	bl	80002bc <__adddf3>
 8013fd8:	4604      	mov	r4, r0
 8013fda:	460d      	mov	r5, r1
 8013fdc:	ec45 4b10 	vmov	d0, r4, r5
 8013fe0:	b005      	add	sp, #20
 8013fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4b1b      	ldr	r3, [pc, #108]	; (8014058 <__kernel_sin+0x148>)
 8013fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fee:	f7ec fb1b 	bl	8000628 <__aeabi_dmul>
 8013ff2:	4632      	mov	r2, r6
 8013ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ff8:	463b      	mov	r3, r7
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	f7ec fb13 	bl	8000628 <__aeabi_dmul>
 8014002:	4602      	mov	r2, r0
 8014004:	460b      	mov	r3, r1
 8014006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801400a:	f7ec f955 	bl	80002b8 <__aeabi_dsub>
 801400e:	4652      	mov	r2, sl
 8014010:	465b      	mov	r3, fp
 8014012:	f7ec fb09 	bl	8000628 <__aeabi_dmul>
 8014016:	e9dd 2300 	ldrd	r2, r3, [sp]
 801401a:	f7ec f94d 	bl	80002b8 <__aeabi_dsub>
 801401e:	a30c      	add	r3, pc, #48	; (adr r3, 8014050 <__kernel_sin+0x140>)
 8014020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014024:	4606      	mov	r6, r0
 8014026:	460f      	mov	r7, r1
 8014028:	4640      	mov	r0, r8
 801402a:	4649      	mov	r1, r9
 801402c:	f7ec fafc 	bl	8000628 <__aeabi_dmul>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4630      	mov	r0, r6
 8014036:	4639      	mov	r1, r7
 8014038:	f7ec f940 	bl	80002bc <__adddf3>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	4620      	mov	r0, r4
 8014042:	4629      	mov	r1, r5
 8014044:	f7ec f938 	bl	80002b8 <__aeabi_dsub>
 8014048:	e7c6      	b.n	8013fd8 <__kernel_sin+0xc8>
 801404a:	bf00      	nop
 801404c:	f3af 8000 	nop.w
 8014050:	55555549 	.word	0x55555549
 8014054:	3fc55555 	.word	0x3fc55555
 8014058:	3fe00000 	.word	0x3fe00000
 801405c:	5acfd57c 	.word	0x5acfd57c
 8014060:	3de5d93a 	.word	0x3de5d93a
 8014064:	8a2b9ceb 	.word	0x8a2b9ceb
 8014068:	3e5ae5e6 	.word	0x3e5ae5e6
 801406c:	57b1fe7d 	.word	0x57b1fe7d
 8014070:	3ec71de3 	.word	0x3ec71de3
 8014074:	19c161d5 	.word	0x19c161d5
 8014078:	3f2a01a0 	.word	0x3f2a01a0
 801407c:	1110f8a6 	.word	0x1110f8a6
 8014080:	3f811111 	.word	0x3f811111

08014084 <fabs>:
 8014084:	ec51 0b10 	vmov	r0, r1, d0
 8014088:	ee10 2a10 	vmov	r2, s0
 801408c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014090:	ec43 2b10 	vmov	d0, r2, r3
 8014094:	4770      	bx	lr
	...

08014098 <floor>:
 8014098:	ec51 0b10 	vmov	r0, r1, d0
 801409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80140a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80140a8:	2e13      	cmp	r6, #19
 80140aa:	460c      	mov	r4, r1
 80140ac:	ee10 5a10 	vmov	r5, s0
 80140b0:	4680      	mov	r8, r0
 80140b2:	dc34      	bgt.n	801411e <floor+0x86>
 80140b4:	2e00      	cmp	r6, #0
 80140b6:	da16      	bge.n	80140e6 <floor+0x4e>
 80140b8:	a335      	add	r3, pc, #212	; (adr r3, 8014190 <floor+0xf8>)
 80140ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140be:	f7ec f8fd 	bl	80002bc <__adddf3>
 80140c2:	2200      	movs	r2, #0
 80140c4:	2300      	movs	r3, #0
 80140c6:	f7ec fd3f 	bl	8000b48 <__aeabi_dcmpgt>
 80140ca:	b148      	cbz	r0, 80140e0 <floor+0x48>
 80140cc:	2c00      	cmp	r4, #0
 80140ce:	da59      	bge.n	8014184 <floor+0xec>
 80140d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80140d4:	4a30      	ldr	r2, [pc, #192]	; (8014198 <floor+0x100>)
 80140d6:	432b      	orrs	r3, r5
 80140d8:	2500      	movs	r5, #0
 80140da:	42ab      	cmp	r3, r5
 80140dc:	bf18      	it	ne
 80140de:	4614      	movne	r4, r2
 80140e0:	4621      	mov	r1, r4
 80140e2:	4628      	mov	r0, r5
 80140e4:	e025      	b.n	8014132 <floor+0x9a>
 80140e6:	4f2d      	ldr	r7, [pc, #180]	; (801419c <floor+0x104>)
 80140e8:	4137      	asrs	r7, r6
 80140ea:	ea01 0307 	and.w	r3, r1, r7
 80140ee:	4303      	orrs	r3, r0
 80140f0:	d01f      	beq.n	8014132 <floor+0x9a>
 80140f2:	a327      	add	r3, pc, #156	; (adr r3, 8014190 <floor+0xf8>)
 80140f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f8:	f7ec f8e0 	bl	80002bc <__adddf3>
 80140fc:	2200      	movs	r2, #0
 80140fe:	2300      	movs	r3, #0
 8014100:	f7ec fd22 	bl	8000b48 <__aeabi_dcmpgt>
 8014104:	2800      	cmp	r0, #0
 8014106:	d0eb      	beq.n	80140e0 <floor+0x48>
 8014108:	2c00      	cmp	r4, #0
 801410a:	bfbe      	ittt	lt
 801410c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014110:	fa43 f606 	asrlt.w	r6, r3, r6
 8014114:	19a4      	addlt	r4, r4, r6
 8014116:	ea24 0407 	bic.w	r4, r4, r7
 801411a:	2500      	movs	r5, #0
 801411c:	e7e0      	b.n	80140e0 <floor+0x48>
 801411e:	2e33      	cmp	r6, #51	; 0x33
 8014120:	dd0b      	ble.n	801413a <floor+0xa2>
 8014122:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014126:	d104      	bne.n	8014132 <floor+0x9a>
 8014128:	ee10 2a10 	vmov	r2, s0
 801412c:	460b      	mov	r3, r1
 801412e:	f7ec f8c5 	bl	80002bc <__adddf3>
 8014132:	ec41 0b10 	vmov	d0, r0, r1
 8014136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801413a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801413e:	f04f 33ff 	mov.w	r3, #4294967295
 8014142:	fa23 f707 	lsr.w	r7, r3, r7
 8014146:	4207      	tst	r7, r0
 8014148:	d0f3      	beq.n	8014132 <floor+0x9a>
 801414a:	a311      	add	r3, pc, #68	; (adr r3, 8014190 <floor+0xf8>)
 801414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014150:	f7ec f8b4 	bl	80002bc <__adddf3>
 8014154:	2200      	movs	r2, #0
 8014156:	2300      	movs	r3, #0
 8014158:	f7ec fcf6 	bl	8000b48 <__aeabi_dcmpgt>
 801415c:	2800      	cmp	r0, #0
 801415e:	d0bf      	beq.n	80140e0 <floor+0x48>
 8014160:	2c00      	cmp	r4, #0
 8014162:	da02      	bge.n	801416a <floor+0xd2>
 8014164:	2e14      	cmp	r6, #20
 8014166:	d103      	bne.n	8014170 <floor+0xd8>
 8014168:	3401      	adds	r4, #1
 801416a:	ea25 0507 	bic.w	r5, r5, r7
 801416e:	e7b7      	b.n	80140e0 <floor+0x48>
 8014170:	2301      	movs	r3, #1
 8014172:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014176:	fa03 f606 	lsl.w	r6, r3, r6
 801417a:	4435      	add	r5, r6
 801417c:	4545      	cmp	r5, r8
 801417e:	bf38      	it	cc
 8014180:	18e4      	addcc	r4, r4, r3
 8014182:	e7f2      	b.n	801416a <floor+0xd2>
 8014184:	2500      	movs	r5, #0
 8014186:	462c      	mov	r4, r5
 8014188:	e7aa      	b.n	80140e0 <floor+0x48>
 801418a:	bf00      	nop
 801418c:	f3af 8000 	nop.w
 8014190:	8800759c 	.word	0x8800759c
 8014194:	7e37e43c 	.word	0x7e37e43c
 8014198:	bff00000 	.word	0xbff00000
 801419c:	000fffff 	.word	0x000fffff

080141a0 <scalbn>:
 80141a0:	b570      	push	{r4, r5, r6, lr}
 80141a2:	ec55 4b10 	vmov	r4, r5, d0
 80141a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80141aa:	4606      	mov	r6, r0
 80141ac:	462b      	mov	r3, r5
 80141ae:	b9aa      	cbnz	r2, 80141dc <scalbn+0x3c>
 80141b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80141b4:	4323      	orrs	r3, r4
 80141b6:	d03b      	beq.n	8014230 <scalbn+0x90>
 80141b8:	4b31      	ldr	r3, [pc, #196]	; (8014280 <scalbn+0xe0>)
 80141ba:	4629      	mov	r1, r5
 80141bc:	2200      	movs	r2, #0
 80141be:	ee10 0a10 	vmov	r0, s0
 80141c2:	f7ec fa31 	bl	8000628 <__aeabi_dmul>
 80141c6:	4b2f      	ldr	r3, [pc, #188]	; (8014284 <scalbn+0xe4>)
 80141c8:	429e      	cmp	r6, r3
 80141ca:	4604      	mov	r4, r0
 80141cc:	460d      	mov	r5, r1
 80141ce:	da12      	bge.n	80141f6 <scalbn+0x56>
 80141d0:	a327      	add	r3, pc, #156	; (adr r3, 8014270 <scalbn+0xd0>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	f7ec fa27 	bl	8000628 <__aeabi_dmul>
 80141da:	e009      	b.n	80141f0 <scalbn+0x50>
 80141dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80141e0:	428a      	cmp	r2, r1
 80141e2:	d10c      	bne.n	80141fe <scalbn+0x5e>
 80141e4:	ee10 2a10 	vmov	r2, s0
 80141e8:	4620      	mov	r0, r4
 80141ea:	4629      	mov	r1, r5
 80141ec:	f7ec f866 	bl	80002bc <__adddf3>
 80141f0:	4604      	mov	r4, r0
 80141f2:	460d      	mov	r5, r1
 80141f4:	e01c      	b.n	8014230 <scalbn+0x90>
 80141f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80141fa:	460b      	mov	r3, r1
 80141fc:	3a36      	subs	r2, #54	; 0x36
 80141fe:	4432      	add	r2, r6
 8014200:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014204:	428a      	cmp	r2, r1
 8014206:	dd0b      	ble.n	8014220 <scalbn+0x80>
 8014208:	ec45 4b11 	vmov	d1, r4, r5
 801420c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014278 <scalbn+0xd8>
 8014210:	f000 f83c 	bl	801428c <copysign>
 8014214:	a318      	add	r3, pc, #96	; (adr r3, 8014278 <scalbn+0xd8>)
 8014216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421a:	ec51 0b10 	vmov	r0, r1, d0
 801421e:	e7da      	b.n	80141d6 <scalbn+0x36>
 8014220:	2a00      	cmp	r2, #0
 8014222:	dd08      	ble.n	8014236 <scalbn+0x96>
 8014224:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014228:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801422c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014230:	ec45 4b10 	vmov	d0, r4, r5
 8014234:	bd70      	pop	{r4, r5, r6, pc}
 8014236:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801423a:	da0d      	bge.n	8014258 <scalbn+0xb8>
 801423c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014240:	429e      	cmp	r6, r3
 8014242:	ec45 4b11 	vmov	d1, r4, r5
 8014246:	dce1      	bgt.n	801420c <scalbn+0x6c>
 8014248:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014270 <scalbn+0xd0>
 801424c:	f000 f81e 	bl	801428c <copysign>
 8014250:	a307      	add	r3, pc, #28	; (adr r3, 8014270 <scalbn+0xd0>)
 8014252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014256:	e7e0      	b.n	801421a <scalbn+0x7a>
 8014258:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801425c:	3236      	adds	r2, #54	; 0x36
 801425e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014266:	4620      	mov	r0, r4
 8014268:	4629      	mov	r1, r5
 801426a:	2200      	movs	r2, #0
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <scalbn+0xe8>)
 801426e:	e7b2      	b.n	80141d6 <scalbn+0x36>
 8014270:	c2f8f359 	.word	0xc2f8f359
 8014274:	01a56e1f 	.word	0x01a56e1f
 8014278:	8800759c 	.word	0x8800759c
 801427c:	7e37e43c 	.word	0x7e37e43c
 8014280:	43500000 	.word	0x43500000
 8014284:	ffff3cb0 	.word	0xffff3cb0
 8014288:	3c900000 	.word	0x3c900000

0801428c <copysign>:
 801428c:	ec51 0b10 	vmov	r0, r1, d0
 8014290:	ee11 0a90 	vmov	r0, s3
 8014294:	ee10 2a10 	vmov	r2, s0
 8014298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801429c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80142a0:	ea41 0300 	orr.w	r3, r1, r0
 80142a4:	ec43 2b10 	vmov	d0, r2, r3
 80142a8:	4770      	bx	lr
	...

080142ac <__errno>:
 80142ac:	4b01      	ldr	r3, [pc, #4]	; (80142b4 <__errno+0x8>)
 80142ae:	6818      	ldr	r0, [r3, #0]
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	2000000c 	.word	0x2000000c

080142b8 <__libc_init_array>:
 80142b8:	b570      	push	{r4, r5, r6, lr}
 80142ba:	4e0d      	ldr	r6, [pc, #52]	; (80142f0 <__libc_init_array+0x38>)
 80142bc:	4c0d      	ldr	r4, [pc, #52]	; (80142f4 <__libc_init_array+0x3c>)
 80142be:	1ba4      	subs	r4, r4, r6
 80142c0:	10a4      	asrs	r4, r4, #2
 80142c2:	2500      	movs	r5, #0
 80142c4:	42a5      	cmp	r5, r4
 80142c6:	d109      	bne.n	80142dc <__libc_init_array+0x24>
 80142c8:	4e0b      	ldr	r6, [pc, #44]	; (80142f8 <__libc_init_array+0x40>)
 80142ca:	4c0c      	ldr	r4, [pc, #48]	; (80142fc <__libc_init_array+0x44>)
 80142cc:	f004 f9e8 	bl	80186a0 <_init>
 80142d0:	1ba4      	subs	r4, r4, r6
 80142d2:	10a4      	asrs	r4, r4, #2
 80142d4:	2500      	movs	r5, #0
 80142d6:	42a5      	cmp	r5, r4
 80142d8:	d105      	bne.n	80142e6 <__libc_init_array+0x2e>
 80142da:	bd70      	pop	{r4, r5, r6, pc}
 80142dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80142e0:	4798      	blx	r3
 80142e2:	3501      	adds	r5, #1
 80142e4:	e7ee      	b.n	80142c4 <__libc_init_array+0xc>
 80142e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80142ea:	4798      	blx	r3
 80142ec:	3501      	adds	r5, #1
 80142ee:	e7f2      	b.n	80142d6 <__libc_init_array+0x1e>
 80142f0:	080191e4 	.word	0x080191e4
 80142f4:	080191e4 	.word	0x080191e4
 80142f8:	080191e4 	.word	0x080191e4
 80142fc:	080191ec 	.word	0x080191ec

08014300 <memcpy>:
 8014300:	b510      	push	{r4, lr}
 8014302:	1e43      	subs	r3, r0, #1
 8014304:	440a      	add	r2, r1
 8014306:	4291      	cmp	r1, r2
 8014308:	d100      	bne.n	801430c <memcpy+0xc>
 801430a:	bd10      	pop	{r4, pc}
 801430c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014314:	e7f7      	b.n	8014306 <memcpy+0x6>

08014316 <memset>:
 8014316:	4402      	add	r2, r0
 8014318:	4603      	mov	r3, r0
 801431a:	4293      	cmp	r3, r2
 801431c:	d100      	bne.n	8014320 <memset+0xa>
 801431e:	4770      	bx	lr
 8014320:	f803 1b01 	strb.w	r1, [r3], #1
 8014324:	e7f9      	b.n	801431a <memset+0x4>

08014326 <__cvt>:
 8014326:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801432a:	ec55 4b10 	vmov	r4, r5, d0
 801432e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014334:	2d00      	cmp	r5, #0
 8014336:	460e      	mov	r6, r1
 8014338:	4691      	mov	r9, r2
 801433a:	4619      	mov	r1, r3
 801433c:	bfb8      	it	lt
 801433e:	4622      	movlt	r2, r4
 8014340:	462b      	mov	r3, r5
 8014342:	f027 0720 	bic.w	r7, r7, #32
 8014346:	bfbb      	ittet	lt
 8014348:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801434c:	461d      	movlt	r5, r3
 801434e:	2300      	movge	r3, #0
 8014350:	232d      	movlt	r3, #45	; 0x2d
 8014352:	bfb8      	it	lt
 8014354:	4614      	movlt	r4, r2
 8014356:	2f46      	cmp	r7, #70	; 0x46
 8014358:	700b      	strb	r3, [r1, #0]
 801435a:	d004      	beq.n	8014366 <__cvt+0x40>
 801435c:	2f45      	cmp	r7, #69	; 0x45
 801435e:	d100      	bne.n	8014362 <__cvt+0x3c>
 8014360:	3601      	adds	r6, #1
 8014362:	2102      	movs	r1, #2
 8014364:	e000      	b.n	8014368 <__cvt+0x42>
 8014366:	2103      	movs	r1, #3
 8014368:	ab03      	add	r3, sp, #12
 801436a:	9301      	str	r3, [sp, #4]
 801436c:	ab02      	add	r3, sp, #8
 801436e:	9300      	str	r3, [sp, #0]
 8014370:	4632      	mov	r2, r6
 8014372:	4653      	mov	r3, sl
 8014374:	ec45 4b10 	vmov	d0, r4, r5
 8014378:	f001 fdfe 	bl	8015f78 <_dtoa_r>
 801437c:	2f47      	cmp	r7, #71	; 0x47
 801437e:	4680      	mov	r8, r0
 8014380:	d102      	bne.n	8014388 <__cvt+0x62>
 8014382:	f019 0f01 	tst.w	r9, #1
 8014386:	d026      	beq.n	80143d6 <__cvt+0xb0>
 8014388:	2f46      	cmp	r7, #70	; 0x46
 801438a:	eb08 0906 	add.w	r9, r8, r6
 801438e:	d111      	bne.n	80143b4 <__cvt+0x8e>
 8014390:	f898 3000 	ldrb.w	r3, [r8]
 8014394:	2b30      	cmp	r3, #48	; 0x30
 8014396:	d10a      	bne.n	80143ae <__cvt+0x88>
 8014398:	2200      	movs	r2, #0
 801439a:	2300      	movs	r3, #0
 801439c:	4620      	mov	r0, r4
 801439e:	4629      	mov	r1, r5
 80143a0:	f7ec fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 80143a4:	b918      	cbnz	r0, 80143ae <__cvt+0x88>
 80143a6:	f1c6 0601 	rsb	r6, r6, #1
 80143aa:	f8ca 6000 	str.w	r6, [sl]
 80143ae:	f8da 3000 	ldr.w	r3, [sl]
 80143b2:	4499      	add	r9, r3
 80143b4:	2200      	movs	r2, #0
 80143b6:	2300      	movs	r3, #0
 80143b8:	4620      	mov	r0, r4
 80143ba:	4629      	mov	r1, r5
 80143bc:	f7ec fb9c 	bl	8000af8 <__aeabi_dcmpeq>
 80143c0:	b938      	cbnz	r0, 80143d2 <__cvt+0xac>
 80143c2:	2230      	movs	r2, #48	; 0x30
 80143c4:	9b03      	ldr	r3, [sp, #12]
 80143c6:	454b      	cmp	r3, r9
 80143c8:	d205      	bcs.n	80143d6 <__cvt+0xb0>
 80143ca:	1c59      	adds	r1, r3, #1
 80143cc:	9103      	str	r1, [sp, #12]
 80143ce:	701a      	strb	r2, [r3, #0]
 80143d0:	e7f8      	b.n	80143c4 <__cvt+0x9e>
 80143d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80143d6:	9b03      	ldr	r3, [sp, #12]
 80143d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143da:	eba3 0308 	sub.w	r3, r3, r8
 80143de:	4640      	mov	r0, r8
 80143e0:	6013      	str	r3, [r2, #0]
 80143e2:	b004      	add	sp, #16
 80143e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080143e8 <__exponent>:
 80143e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143ea:	2900      	cmp	r1, #0
 80143ec:	4604      	mov	r4, r0
 80143ee:	bfba      	itte	lt
 80143f0:	4249      	neglt	r1, r1
 80143f2:	232d      	movlt	r3, #45	; 0x2d
 80143f4:	232b      	movge	r3, #43	; 0x2b
 80143f6:	2909      	cmp	r1, #9
 80143f8:	f804 2b02 	strb.w	r2, [r4], #2
 80143fc:	7043      	strb	r3, [r0, #1]
 80143fe:	dd20      	ble.n	8014442 <__exponent+0x5a>
 8014400:	f10d 0307 	add.w	r3, sp, #7
 8014404:	461f      	mov	r7, r3
 8014406:	260a      	movs	r6, #10
 8014408:	fb91 f5f6 	sdiv	r5, r1, r6
 801440c:	fb06 1115 	mls	r1, r6, r5, r1
 8014410:	3130      	adds	r1, #48	; 0x30
 8014412:	2d09      	cmp	r5, #9
 8014414:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014418:	f103 32ff 	add.w	r2, r3, #4294967295
 801441c:	4629      	mov	r1, r5
 801441e:	dc09      	bgt.n	8014434 <__exponent+0x4c>
 8014420:	3130      	adds	r1, #48	; 0x30
 8014422:	3b02      	subs	r3, #2
 8014424:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014428:	42bb      	cmp	r3, r7
 801442a:	4622      	mov	r2, r4
 801442c:	d304      	bcc.n	8014438 <__exponent+0x50>
 801442e:	1a10      	subs	r0, r2, r0
 8014430:	b003      	add	sp, #12
 8014432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014434:	4613      	mov	r3, r2
 8014436:	e7e7      	b.n	8014408 <__exponent+0x20>
 8014438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801443c:	f804 2b01 	strb.w	r2, [r4], #1
 8014440:	e7f2      	b.n	8014428 <__exponent+0x40>
 8014442:	2330      	movs	r3, #48	; 0x30
 8014444:	4419      	add	r1, r3
 8014446:	7083      	strb	r3, [r0, #2]
 8014448:	1d02      	adds	r2, r0, #4
 801444a:	70c1      	strb	r1, [r0, #3]
 801444c:	e7ef      	b.n	801442e <__exponent+0x46>
	...

08014450 <_printf_float>:
 8014450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014454:	b08d      	sub	sp, #52	; 0x34
 8014456:	460c      	mov	r4, r1
 8014458:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801445c:	4616      	mov	r6, r2
 801445e:	461f      	mov	r7, r3
 8014460:	4605      	mov	r5, r0
 8014462:	f002 fe7b 	bl	801715c <_localeconv_r>
 8014466:	6803      	ldr	r3, [r0, #0]
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	4618      	mov	r0, r3
 801446c:	f7eb fec8 	bl	8000200 <strlen>
 8014470:	2300      	movs	r3, #0
 8014472:	930a      	str	r3, [sp, #40]	; 0x28
 8014474:	f8d8 3000 	ldr.w	r3, [r8]
 8014478:	9005      	str	r0, [sp, #20]
 801447a:	3307      	adds	r3, #7
 801447c:	f023 0307 	bic.w	r3, r3, #7
 8014480:	f103 0208 	add.w	r2, r3, #8
 8014484:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014488:	f8d4 b000 	ldr.w	fp, [r4]
 801448c:	f8c8 2000 	str.w	r2, [r8]
 8014490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014494:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014498:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801449c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80144a0:	9307      	str	r3, [sp, #28]
 80144a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80144a6:	f04f 32ff 	mov.w	r2, #4294967295
 80144aa:	4ba7      	ldr	r3, [pc, #668]	; (8014748 <_printf_float+0x2f8>)
 80144ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144b0:	f7ec fb54 	bl	8000b5c <__aeabi_dcmpun>
 80144b4:	bb70      	cbnz	r0, 8014514 <_printf_float+0xc4>
 80144b6:	f04f 32ff 	mov.w	r2, #4294967295
 80144ba:	4ba3      	ldr	r3, [pc, #652]	; (8014748 <_printf_float+0x2f8>)
 80144bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144c0:	f7ec fb2e 	bl	8000b20 <__aeabi_dcmple>
 80144c4:	bb30      	cbnz	r0, 8014514 <_printf_float+0xc4>
 80144c6:	2200      	movs	r2, #0
 80144c8:	2300      	movs	r3, #0
 80144ca:	4640      	mov	r0, r8
 80144cc:	4649      	mov	r1, r9
 80144ce:	f7ec fb1d 	bl	8000b0c <__aeabi_dcmplt>
 80144d2:	b110      	cbz	r0, 80144da <_printf_float+0x8a>
 80144d4:	232d      	movs	r3, #45	; 0x2d
 80144d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144da:	4a9c      	ldr	r2, [pc, #624]	; (801474c <_printf_float+0x2fc>)
 80144dc:	4b9c      	ldr	r3, [pc, #624]	; (8014750 <_printf_float+0x300>)
 80144de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80144e2:	bf8c      	ite	hi
 80144e4:	4690      	movhi	r8, r2
 80144e6:	4698      	movls	r8, r3
 80144e8:	2303      	movs	r3, #3
 80144ea:	f02b 0204 	bic.w	r2, fp, #4
 80144ee:	6123      	str	r3, [r4, #16]
 80144f0:	6022      	str	r2, [r4, #0]
 80144f2:	f04f 0900 	mov.w	r9, #0
 80144f6:	9700      	str	r7, [sp, #0]
 80144f8:	4633      	mov	r3, r6
 80144fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80144fc:	4621      	mov	r1, r4
 80144fe:	4628      	mov	r0, r5
 8014500:	f000 f9e6 	bl	80148d0 <_printf_common>
 8014504:	3001      	adds	r0, #1
 8014506:	f040 808d 	bne.w	8014624 <_printf_float+0x1d4>
 801450a:	f04f 30ff 	mov.w	r0, #4294967295
 801450e:	b00d      	add	sp, #52	; 0x34
 8014510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014514:	4642      	mov	r2, r8
 8014516:	464b      	mov	r3, r9
 8014518:	4640      	mov	r0, r8
 801451a:	4649      	mov	r1, r9
 801451c:	f7ec fb1e 	bl	8000b5c <__aeabi_dcmpun>
 8014520:	b110      	cbz	r0, 8014528 <_printf_float+0xd8>
 8014522:	4a8c      	ldr	r2, [pc, #560]	; (8014754 <_printf_float+0x304>)
 8014524:	4b8c      	ldr	r3, [pc, #560]	; (8014758 <_printf_float+0x308>)
 8014526:	e7da      	b.n	80144de <_printf_float+0x8e>
 8014528:	6861      	ldr	r1, [r4, #4]
 801452a:	1c4b      	adds	r3, r1, #1
 801452c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014530:	a80a      	add	r0, sp, #40	; 0x28
 8014532:	d13e      	bne.n	80145b2 <_printf_float+0x162>
 8014534:	2306      	movs	r3, #6
 8014536:	6063      	str	r3, [r4, #4]
 8014538:	2300      	movs	r3, #0
 801453a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801453e:	ab09      	add	r3, sp, #36	; 0x24
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	ec49 8b10 	vmov	d0, r8, r9
 8014546:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801454a:	6022      	str	r2, [r4, #0]
 801454c:	f8cd a004 	str.w	sl, [sp, #4]
 8014550:	6861      	ldr	r1, [r4, #4]
 8014552:	4628      	mov	r0, r5
 8014554:	f7ff fee7 	bl	8014326 <__cvt>
 8014558:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801455c:	2b47      	cmp	r3, #71	; 0x47
 801455e:	4680      	mov	r8, r0
 8014560:	d109      	bne.n	8014576 <_printf_float+0x126>
 8014562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014564:	1cd8      	adds	r0, r3, #3
 8014566:	db02      	blt.n	801456e <_printf_float+0x11e>
 8014568:	6862      	ldr	r2, [r4, #4]
 801456a:	4293      	cmp	r3, r2
 801456c:	dd47      	ble.n	80145fe <_printf_float+0x1ae>
 801456e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014572:	fa5f fa8a 	uxtb.w	sl, sl
 8014576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801457a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801457c:	d824      	bhi.n	80145c8 <_printf_float+0x178>
 801457e:	3901      	subs	r1, #1
 8014580:	4652      	mov	r2, sl
 8014582:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014586:	9109      	str	r1, [sp, #36]	; 0x24
 8014588:	f7ff ff2e 	bl	80143e8 <__exponent>
 801458c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801458e:	1813      	adds	r3, r2, r0
 8014590:	2a01      	cmp	r2, #1
 8014592:	4681      	mov	r9, r0
 8014594:	6123      	str	r3, [r4, #16]
 8014596:	dc02      	bgt.n	801459e <_printf_float+0x14e>
 8014598:	6822      	ldr	r2, [r4, #0]
 801459a:	07d1      	lsls	r1, r2, #31
 801459c:	d501      	bpl.n	80145a2 <_printf_float+0x152>
 801459e:	3301      	adds	r3, #1
 80145a0:	6123      	str	r3, [r4, #16]
 80145a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d0a5      	beq.n	80144f6 <_printf_float+0xa6>
 80145aa:	232d      	movs	r3, #45	; 0x2d
 80145ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145b0:	e7a1      	b.n	80144f6 <_printf_float+0xa6>
 80145b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80145b6:	f000 8177 	beq.w	80148a8 <_printf_float+0x458>
 80145ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80145be:	d1bb      	bne.n	8014538 <_printf_float+0xe8>
 80145c0:	2900      	cmp	r1, #0
 80145c2:	d1b9      	bne.n	8014538 <_printf_float+0xe8>
 80145c4:	2301      	movs	r3, #1
 80145c6:	e7b6      	b.n	8014536 <_printf_float+0xe6>
 80145c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80145cc:	d119      	bne.n	8014602 <_printf_float+0x1b2>
 80145ce:	2900      	cmp	r1, #0
 80145d0:	6863      	ldr	r3, [r4, #4]
 80145d2:	dd0c      	ble.n	80145ee <_printf_float+0x19e>
 80145d4:	6121      	str	r1, [r4, #16]
 80145d6:	b913      	cbnz	r3, 80145de <_printf_float+0x18e>
 80145d8:	6822      	ldr	r2, [r4, #0]
 80145da:	07d2      	lsls	r2, r2, #31
 80145dc:	d502      	bpl.n	80145e4 <_printf_float+0x194>
 80145de:	3301      	adds	r3, #1
 80145e0:	440b      	add	r3, r1
 80145e2:	6123      	str	r3, [r4, #16]
 80145e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80145e8:	f04f 0900 	mov.w	r9, #0
 80145ec:	e7d9      	b.n	80145a2 <_printf_float+0x152>
 80145ee:	b913      	cbnz	r3, 80145f6 <_printf_float+0x1a6>
 80145f0:	6822      	ldr	r2, [r4, #0]
 80145f2:	07d0      	lsls	r0, r2, #31
 80145f4:	d501      	bpl.n	80145fa <_printf_float+0x1aa>
 80145f6:	3302      	adds	r3, #2
 80145f8:	e7f3      	b.n	80145e2 <_printf_float+0x192>
 80145fa:	2301      	movs	r3, #1
 80145fc:	e7f1      	b.n	80145e2 <_printf_float+0x192>
 80145fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014602:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014606:	4293      	cmp	r3, r2
 8014608:	db05      	blt.n	8014616 <_printf_float+0x1c6>
 801460a:	6822      	ldr	r2, [r4, #0]
 801460c:	6123      	str	r3, [r4, #16]
 801460e:	07d1      	lsls	r1, r2, #31
 8014610:	d5e8      	bpl.n	80145e4 <_printf_float+0x194>
 8014612:	3301      	adds	r3, #1
 8014614:	e7e5      	b.n	80145e2 <_printf_float+0x192>
 8014616:	2b00      	cmp	r3, #0
 8014618:	bfd4      	ite	le
 801461a:	f1c3 0302 	rsble	r3, r3, #2
 801461e:	2301      	movgt	r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	e7de      	b.n	80145e2 <_printf_float+0x192>
 8014624:	6823      	ldr	r3, [r4, #0]
 8014626:	055a      	lsls	r2, r3, #21
 8014628:	d407      	bmi.n	801463a <_printf_float+0x1ea>
 801462a:	6923      	ldr	r3, [r4, #16]
 801462c:	4642      	mov	r2, r8
 801462e:	4631      	mov	r1, r6
 8014630:	4628      	mov	r0, r5
 8014632:	47b8      	blx	r7
 8014634:	3001      	adds	r0, #1
 8014636:	d12b      	bne.n	8014690 <_printf_float+0x240>
 8014638:	e767      	b.n	801450a <_printf_float+0xba>
 801463a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801463e:	f240 80dc 	bls.w	80147fa <_printf_float+0x3aa>
 8014642:	2200      	movs	r2, #0
 8014644:	2300      	movs	r3, #0
 8014646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801464a:	f7ec fa55 	bl	8000af8 <__aeabi_dcmpeq>
 801464e:	2800      	cmp	r0, #0
 8014650:	d033      	beq.n	80146ba <_printf_float+0x26a>
 8014652:	2301      	movs	r3, #1
 8014654:	4a41      	ldr	r2, [pc, #260]	; (801475c <_printf_float+0x30c>)
 8014656:	4631      	mov	r1, r6
 8014658:	4628      	mov	r0, r5
 801465a:	47b8      	blx	r7
 801465c:	3001      	adds	r0, #1
 801465e:	f43f af54 	beq.w	801450a <_printf_float+0xba>
 8014662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014666:	429a      	cmp	r2, r3
 8014668:	db02      	blt.n	8014670 <_printf_float+0x220>
 801466a:	6823      	ldr	r3, [r4, #0]
 801466c:	07d8      	lsls	r0, r3, #31
 801466e:	d50f      	bpl.n	8014690 <_printf_float+0x240>
 8014670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014674:	4631      	mov	r1, r6
 8014676:	4628      	mov	r0, r5
 8014678:	47b8      	blx	r7
 801467a:	3001      	adds	r0, #1
 801467c:	f43f af45 	beq.w	801450a <_printf_float+0xba>
 8014680:	f04f 0800 	mov.w	r8, #0
 8014684:	f104 091a 	add.w	r9, r4, #26
 8014688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801468a:	3b01      	subs	r3, #1
 801468c:	4543      	cmp	r3, r8
 801468e:	dc09      	bgt.n	80146a4 <_printf_float+0x254>
 8014690:	6823      	ldr	r3, [r4, #0]
 8014692:	079b      	lsls	r3, r3, #30
 8014694:	f100 8103 	bmi.w	801489e <_printf_float+0x44e>
 8014698:	68e0      	ldr	r0, [r4, #12]
 801469a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801469c:	4298      	cmp	r0, r3
 801469e:	bfb8      	it	lt
 80146a0:	4618      	movlt	r0, r3
 80146a2:	e734      	b.n	801450e <_printf_float+0xbe>
 80146a4:	2301      	movs	r3, #1
 80146a6:	464a      	mov	r2, r9
 80146a8:	4631      	mov	r1, r6
 80146aa:	4628      	mov	r0, r5
 80146ac:	47b8      	blx	r7
 80146ae:	3001      	adds	r0, #1
 80146b0:	f43f af2b 	beq.w	801450a <_printf_float+0xba>
 80146b4:	f108 0801 	add.w	r8, r8, #1
 80146b8:	e7e6      	b.n	8014688 <_printf_float+0x238>
 80146ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146bc:	2b00      	cmp	r3, #0
 80146be:	dc2b      	bgt.n	8014718 <_printf_float+0x2c8>
 80146c0:	2301      	movs	r3, #1
 80146c2:	4a26      	ldr	r2, [pc, #152]	; (801475c <_printf_float+0x30c>)
 80146c4:	4631      	mov	r1, r6
 80146c6:	4628      	mov	r0, r5
 80146c8:	47b8      	blx	r7
 80146ca:	3001      	adds	r0, #1
 80146cc:	f43f af1d 	beq.w	801450a <_printf_float+0xba>
 80146d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146d2:	b923      	cbnz	r3, 80146de <_printf_float+0x28e>
 80146d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146d6:	b913      	cbnz	r3, 80146de <_printf_float+0x28e>
 80146d8:	6823      	ldr	r3, [r4, #0]
 80146da:	07d9      	lsls	r1, r3, #31
 80146dc:	d5d8      	bpl.n	8014690 <_printf_float+0x240>
 80146de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146e2:	4631      	mov	r1, r6
 80146e4:	4628      	mov	r0, r5
 80146e6:	47b8      	blx	r7
 80146e8:	3001      	adds	r0, #1
 80146ea:	f43f af0e 	beq.w	801450a <_printf_float+0xba>
 80146ee:	f04f 0900 	mov.w	r9, #0
 80146f2:	f104 0a1a 	add.w	sl, r4, #26
 80146f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f8:	425b      	negs	r3, r3
 80146fa:	454b      	cmp	r3, r9
 80146fc:	dc01      	bgt.n	8014702 <_printf_float+0x2b2>
 80146fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014700:	e794      	b.n	801462c <_printf_float+0x1dc>
 8014702:	2301      	movs	r3, #1
 8014704:	4652      	mov	r2, sl
 8014706:	4631      	mov	r1, r6
 8014708:	4628      	mov	r0, r5
 801470a:	47b8      	blx	r7
 801470c:	3001      	adds	r0, #1
 801470e:	f43f aefc 	beq.w	801450a <_printf_float+0xba>
 8014712:	f109 0901 	add.w	r9, r9, #1
 8014716:	e7ee      	b.n	80146f6 <_printf_float+0x2a6>
 8014718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801471a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801471c:	429a      	cmp	r2, r3
 801471e:	bfa8      	it	ge
 8014720:	461a      	movge	r2, r3
 8014722:	2a00      	cmp	r2, #0
 8014724:	4691      	mov	r9, r2
 8014726:	dd07      	ble.n	8014738 <_printf_float+0x2e8>
 8014728:	4613      	mov	r3, r2
 801472a:	4631      	mov	r1, r6
 801472c:	4642      	mov	r2, r8
 801472e:	4628      	mov	r0, r5
 8014730:	47b8      	blx	r7
 8014732:	3001      	adds	r0, #1
 8014734:	f43f aee9 	beq.w	801450a <_printf_float+0xba>
 8014738:	f104 031a 	add.w	r3, r4, #26
 801473c:	f04f 0b00 	mov.w	fp, #0
 8014740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014744:	9306      	str	r3, [sp, #24]
 8014746:	e015      	b.n	8014774 <_printf_float+0x324>
 8014748:	7fefffff 	.word	0x7fefffff
 801474c:	08018eac 	.word	0x08018eac
 8014750:	08018ea8 	.word	0x08018ea8
 8014754:	08018eb4 	.word	0x08018eb4
 8014758:	08018eb0 	.word	0x08018eb0
 801475c:	080190d3 	.word	0x080190d3
 8014760:	2301      	movs	r3, #1
 8014762:	9a06      	ldr	r2, [sp, #24]
 8014764:	4631      	mov	r1, r6
 8014766:	4628      	mov	r0, r5
 8014768:	47b8      	blx	r7
 801476a:	3001      	adds	r0, #1
 801476c:	f43f aecd 	beq.w	801450a <_printf_float+0xba>
 8014770:	f10b 0b01 	add.w	fp, fp, #1
 8014774:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014778:	ebaa 0309 	sub.w	r3, sl, r9
 801477c:	455b      	cmp	r3, fp
 801477e:	dcef      	bgt.n	8014760 <_printf_float+0x310>
 8014780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014784:	429a      	cmp	r2, r3
 8014786:	44d0      	add	r8, sl
 8014788:	db15      	blt.n	80147b6 <_printf_float+0x366>
 801478a:	6823      	ldr	r3, [r4, #0]
 801478c:	07da      	lsls	r2, r3, #31
 801478e:	d412      	bmi.n	80147b6 <_printf_float+0x366>
 8014790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014794:	eba3 020a 	sub.w	r2, r3, sl
 8014798:	eba3 0a01 	sub.w	sl, r3, r1
 801479c:	4592      	cmp	sl, r2
 801479e:	bfa8      	it	ge
 80147a0:	4692      	movge	sl, r2
 80147a2:	f1ba 0f00 	cmp.w	sl, #0
 80147a6:	dc0e      	bgt.n	80147c6 <_printf_float+0x376>
 80147a8:	f04f 0800 	mov.w	r8, #0
 80147ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147b0:	f104 091a 	add.w	r9, r4, #26
 80147b4:	e019      	b.n	80147ea <_printf_float+0x39a>
 80147b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147ba:	4631      	mov	r1, r6
 80147bc:	4628      	mov	r0, r5
 80147be:	47b8      	blx	r7
 80147c0:	3001      	adds	r0, #1
 80147c2:	d1e5      	bne.n	8014790 <_printf_float+0x340>
 80147c4:	e6a1      	b.n	801450a <_printf_float+0xba>
 80147c6:	4653      	mov	r3, sl
 80147c8:	4642      	mov	r2, r8
 80147ca:	4631      	mov	r1, r6
 80147cc:	4628      	mov	r0, r5
 80147ce:	47b8      	blx	r7
 80147d0:	3001      	adds	r0, #1
 80147d2:	d1e9      	bne.n	80147a8 <_printf_float+0x358>
 80147d4:	e699      	b.n	801450a <_printf_float+0xba>
 80147d6:	2301      	movs	r3, #1
 80147d8:	464a      	mov	r2, r9
 80147da:	4631      	mov	r1, r6
 80147dc:	4628      	mov	r0, r5
 80147de:	47b8      	blx	r7
 80147e0:	3001      	adds	r0, #1
 80147e2:	f43f ae92 	beq.w	801450a <_printf_float+0xba>
 80147e6:	f108 0801 	add.w	r8, r8, #1
 80147ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147ee:	1a9b      	subs	r3, r3, r2
 80147f0:	eba3 030a 	sub.w	r3, r3, sl
 80147f4:	4543      	cmp	r3, r8
 80147f6:	dcee      	bgt.n	80147d6 <_printf_float+0x386>
 80147f8:	e74a      	b.n	8014690 <_printf_float+0x240>
 80147fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147fc:	2a01      	cmp	r2, #1
 80147fe:	dc01      	bgt.n	8014804 <_printf_float+0x3b4>
 8014800:	07db      	lsls	r3, r3, #31
 8014802:	d53a      	bpl.n	801487a <_printf_float+0x42a>
 8014804:	2301      	movs	r3, #1
 8014806:	4642      	mov	r2, r8
 8014808:	4631      	mov	r1, r6
 801480a:	4628      	mov	r0, r5
 801480c:	47b8      	blx	r7
 801480e:	3001      	adds	r0, #1
 8014810:	f43f ae7b 	beq.w	801450a <_printf_float+0xba>
 8014814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014818:	4631      	mov	r1, r6
 801481a:	4628      	mov	r0, r5
 801481c:	47b8      	blx	r7
 801481e:	3001      	adds	r0, #1
 8014820:	f108 0801 	add.w	r8, r8, #1
 8014824:	f43f ae71 	beq.w	801450a <_printf_float+0xba>
 8014828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801482a:	2200      	movs	r2, #0
 801482c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014834:	2300      	movs	r3, #0
 8014836:	f7ec f95f 	bl	8000af8 <__aeabi_dcmpeq>
 801483a:	b9c8      	cbnz	r0, 8014870 <_printf_float+0x420>
 801483c:	4653      	mov	r3, sl
 801483e:	4642      	mov	r2, r8
 8014840:	4631      	mov	r1, r6
 8014842:	4628      	mov	r0, r5
 8014844:	47b8      	blx	r7
 8014846:	3001      	adds	r0, #1
 8014848:	d10e      	bne.n	8014868 <_printf_float+0x418>
 801484a:	e65e      	b.n	801450a <_printf_float+0xba>
 801484c:	2301      	movs	r3, #1
 801484e:	4652      	mov	r2, sl
 8014850:	4631      	mov	r1, r6
 8014852:	4628      	mov	r0, r5
 8014854:	47b8      	blx	r7
 8014856:	3001      	adds	r0, #1
 8014858:	f43f ae57 	beq.w	801450a <_printf_float+0xba>
 801485c:	f108 0801 	add.w	r8, r8, #1
 8014860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014862:	3b01      	subs	r3, #1
 8014864:	4543      	cmp	r3, r8
 8014866:	dcf1      	bgt.n	801484c <_printf_float+0x3fc>
 8014868:	464b      	mov	r3, r9
 801486a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801486e:	e6de      	b.n	801462e <_printf_float+0x1de>
 8014870:	f04f 0800 	mov.w	r8, #0
 8014874:	f104 0a1a 	add.w	sl, r4, #26
 8014878:	e7f2      	b.n	8014860 <_printf_float+0x410>
 801487a:	2301      	movs	r3, #1
 801487c:	e7df      	b.n	801483e <_printf_float+0x3ee>
 801487e:	2301      	movs	r3, #1
 8014880:	464a      	mov	r2, r9
 8014882:	4631      	mov	r1, r6
 8014884:	4628      	mov	r0, r5
 8014886:	47b8      	blx	r7
 8014888:	3001      	adds	r0, #1
 801488a:	f43f ae3e 	beq.w	801450a <_printf_float+0xba>
 801488e:	f108 0801 	add.w	r8, r8, #1
 8014892:	68e3      	ldr	r3, [r4, #12]
 8014894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014896:	1a9b      	subs	r3, r3, r2
 8014898:	4543      	cmp	r3, r8
 801489a:	dcf0      	bgt.n	801487e <_printf_float+0x42e>
 801489c:	e6fc      	b.n	8014698 <_printf_float+0x248>
 801489e:	f04f 0800 	mov.w	r8, #0
 80148a2:	f104 0919 	add.w	r9, r4, #25
 80148a6:	e7f4      	b.n	8014892 <_printf_float+0x442>
 80148a8:	2900      	cmp	r1, #0
 80148aa:	f43f ae8b 	beq.w	80145c4 <_printf_float+0x174>
 80148ae:	2300      	movs	r3, #0
 80148b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80148b4:	ab09      	add	r3, sp, #36	; 0x24
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	ec49 8b10 	vmov	d0, r8, r9
 80148bc:	6022      	str	r2, [r4, #0]
 80148be:	f8cd a004 	str.w	sl, [sp, #4]
 80148c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80148c6:	4628      	mov	r0, r5
 80148c8:	f7ff fd2d 	bl	8014326 <__cvt>
 80148cc:	4680      	mov	r8, r0
 80148ce:	e648      	b.n	8014562 <_printf_float+0x112>

080148d0 <_printf_common>:
 80148d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148d4:	4691      	mov	r9, r2
 80148d6:	461f      	mov	r7, r3
 80148d8:	688a      	ldr	r2, [r1, #8]
 80148da:	690b      	ldr	r3, [r1, #16]
 80148dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148e0:	4293      	cmp	r3, r2
 80148e2:	bfb8      	it	lt
 80148e4:	4613      	movlt	r3, r2
 80148e6:	f8c9 3000 	str.w	r3, [r9]
 80148ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148ee:	4606      	mov	r6, r0
 80148f0:	460c      	mov	r4, r1
 80148f2:	b112      	cbz	r2, 80148fa <_printf_common+0x2a>
 80148f4:	3301      	adds	r3, #1
 80148f6:	f8c9 3000 	str.w	r3, [r9]
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	0699      	lsls	r1, r3, #26
 80148fe:	bf42      	ittt	mi
 8014900:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014904:	3302      	addmi	r3, #2
 8014906:	f8c9 3000 	strmi.w	r3, [r9]
 801490a:	6825      	ldr	r5, [r4, #0]
 801490c:	f015 0506 	ands.w	r5, r5, #6
 8014910:	d107      	bne.n	8014922 <_printf_common+0x52>
 8014912:	f104 0a19 	add.w	sl, r4, #25
 8014916:	68e3      	ldr	r3, [r4, #12]
 8014918:	f8d9 2000 	ldr.w	r2, [r9]
 801491c:	1a9b      	subs	r3, r3, r2
 801491e:	42ab      	cmp	r3, r5
 8014920:	dc28      	bgt.n	8014974 <_printf_common+0xa4>
 8014922:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014926:	6822      	ldr	r2, [r4, #0]
 8014928:	3300      	adds	r3, #0
 801492a:	bf18      	it	ne
 801492c:	2301      	movne	r3, #1
 801492e:	0692      	lsls	r2, r2, #26
 8014930:	d42d      	bmi.n	801498e <_printf_common+0xbe>
 8014932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014936:	4639      	mov	r1, r7
 8014938:	4630      	mov	r0, r6
 801493a:	47c0      	blx	r8
 801493c:	3001      	adds	r0, #1
 801493e:	d020      	beq.n	8014982 <_printf_common+0xb2>
 8014940:	6823      	ldr	r3, [r4, #0]
 8014942:	68e5      	ldr	r5, [r4, #12]
 8014944:	f8d9 2000 	ldr.w	r2, [r9]
 8014948:	f003 0306 	and.w	r3, r3, #6
 801494c:	2b04      	cmp	r3, #4
 801494e:	bf08      	it	eq
 8014950:	1aad      	subeq	r5, r5, r2
 8014952:	68a3      	ldr	r3, [r4, #8]
 8014954:	6922      	ldr	r2, [r4, #16]
 8014956:	bf0c      	ite	eq
 8014958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801495c:	2500      	movne	r5, #0
 801495e:	4293      	cmp	r3, r2
 8014960:	bfc4      	itt	gt
 8014962:	1a9b      	subgt	r3, r3, r2
 8014964:	18ed      	addgt	r5, r5, r3
 8014966:	f04f 0900 	mov.w	r9, #0
 801496a:	341a      	adds	r4, #26
 801496c:	454d      	cmp	r5, r9
 801496e:	d11a      	bne.n	80149a6 <_printf_common+0xd6>
 8014970:	2000      	movs	r0, #0
 8014972:	e008      	b.n	8014986 <_printf_common+0xb6>
 8014974:	2301      	movs	r3, #1
 8014976:	4652      	mov	r2, sl
 8014978:	4639      	mov	r1, r7
 801497a:	4630      	mov	r0, r6
 801497c:	47c0      	blx	r8
 801497e:	3001      	adds	r0, #1
 8014980:	d103      	bne.n	801498a <_printf_common+0xba>
 8014982:	f04f 30ff 	mov.w	r0, #4294967295
 8014986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801498a:	3501      	adds	r5, #1
 801498c:	e7c3      	b.n	8014916 <_printf_common+0x46>
 801498e:	18e1      	adds	r1, r4, r3
 8014990:	1c5a      	adds	r2, r3, #1
 8014992:	2030      	movs	r0, #48	; 0x30
 8014994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014998:	4422      	add	r2, r4
 801499a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801499e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80149a2:	3302      	adds	r3, #2
 80149a4:	e7c5      	b.n	8014932 <_printf_common+0x62>
 80149a6:	2301      	movs	r3, #1
 80149a8:	4622      	mov	r2, r4
 80149aa:	4639      	mov	r1, r7
 80149ac:	4630      	mov	r0, r6
 80149ae:	47c0      	blx	r8
 80149b0:	3001      	adds	r0, #1
 80149b2:	d0e6      	beq.n	8014982 <_printf_common+0xb2>
 80149b4:	f109 0901 	add.w	r9, r9, #1
 80149b8:	e7d8      	b.n	801496c <_printf_common+0x9c>
	...

080149bc <_printf_i>:
 80149bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80149c4:	460c      	mov	r4, r1
 80149c6:	7e09      	ldrb	r1, [r1, #24]
 80149c8:	b085      	sub	sp, #20
 80149ca:	296e      	cmp	r1, #110	; 0x6e
 80149cc:	4617      	mov	r7, r2
 80149ce:	4606      	mov	r6, r0
 80149d0:	4698      	mov	r8, r3
 80149d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149d4:	f000 80b3 	beq.w	8014b3e <_printf_i+0x182>
 80149d8:	d822      	bhi.n	8014a20 <_printf_i+0x64>
 80149da:	2963      	cmp	r1, #99	; 0x63
 80149dc:	d036      	beq.n	8014a4c <_printf_i+0x90>
 80149de:	d80a      	bhi.n	80149f6 <_printf_i+0x3a>
 80149e0:	2900      	cmp	r1, #0
 80149e2:	f000 80b9 	beq.w	8014b58 <_printf_i+0x19c>
 80149e6:	2958      	cmp	r1, #88	; 0x58
 80149e8:	f000 8083 	beq.w	8014af2 <_printf_i+0x136>
 80149ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80149f4:	e032      	b.n	8014a5c <_printf_i+0xa0>
 80149f6:	2964      	cmp	r1, #100	; 0x64
 80149f8:	d001      	beq.n	80149fe <_printf_i+0x42>
 80149fa:	2969      	cmp	r1, #105	; 0x69
 80149fc:	d1f6      	bne.n	80149ec <_printf_i+0x30>
 80149fe:	6820      	ldr	r0, [r4, #0]
 8014a00:	6813      	ldr	r3, [r2, #0]
 8014a02:	0605      	lsls	r5, r0, #24
 8014a04:	f103 0104 	add.w	r1, r3, #4
 8014a08:	d52a      	bpl.n	8014a60 <_printf_i+0xa4>
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	6011      	str	r1, [r2, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	da03      	bge.n	8014a1a <_printf_i+0x5e>
 8014a12:	222d      	movs	r2, #45	; 0x2d
 8014a14:	425b      	negs	r3, r3
 8014a16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014a1a:	486f      	ldr	r0, [pc, #444]	; (8014bd8 <_printf_i+0x21c>)
 8014a1c:	220a      	movs	r2, #10
 8014a1e:	e039      	b.n	8014a94 <_printf_i+0xd8>
 8014a20:	2973      	cmp	r1, #115	; 0x73
 8014a22:	f000 809d 	beq.w	8014b60 <_printf_i+0x1a4>
 8014a26:	d808      	bhi.n	8014a3a <_printf_i+0x7e>
 8014a28:	296f      	cmp	r1, #111	; 0x6f
 8014a2a:	d020      	beq.n	8014a6e <_printf_i+0xb2>
 8014a2c:	2970      	cmp	r1, #112	; 0x70
 8014a2e:	d1dd      	bne.n	80149ec <_printf_i+0x30>
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	f043 0320 	orr.w	r3, r3, #32
 8014a36:	6023      	str	r3, [r4, #0]
 8014a38:	e003      	b.n	8014a42 <_printf_i+0x86>
 8014a3a:	2975      	cmp	r1, #117	; 0x75
 8014a3c:	d017      	beq.n	8014a6e <_printf_i+0xb2>
 8014a3e:	2978      	cmp	r1, #120	; 0x78
 8014a40:	d1d4      	bne.n	80149ec <_printf_i+0x30>
 8014a42:	2378      	movs	r3, #120	; 0x78
 8014a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a48:	4864      	ldr	r0, [pc, #400]	; (8014bdc <_printf_i+0x220>)
 8014a4a:	e055      	b.n	8014af8 <_printf_i+0x13c>
 8014a4c:	6813      	ldr	r3, [r2, #0]
 8014a4e:	1d19      	adds	r1, r3, #4
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	6011      	str	r1, [r2, #0]
 8014a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e08c      	b.n	8014b7a <_printf_i+0x1be>
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	6011      	str	r1, [r2, #0]
 8014a64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a68:	bf18      	it	ne
 8014a6a:	b21b      	sxthne	r3, r3
 8014a6c:	e7cf      	b.n	8014a0e <_printf_i+0x52>
 8014a6e:	6813      	ldr	r3, [r2, #0]
 8014a70:	6825      	ldr	r5, [r4, #0]
 8014a72:	1d18      	adds	r0, r3, #4
 8014a74:	6010      	str	r0, [r2, #0]
 8014a76:	0628      	lsls	r0, r5, #24
 8014a78:	d501      	bpl.n	8014a7e <_printf_i+0xc2>
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	e002      	b.n	8014a84 <_printf_i+0xc8>
 8014a7e:	0668      	lsls	r0, r5, #25
 8014a80:	d5fb      	bpl.n	8014a7a <_printf_i+0xbe>
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	4854      	ldr	r0, [pc, #336]	; (8014bd8 <_printf_i+0x21c>)
 8014a86:	296f      	cmp	r1, #111	; 0x6f
 8014a88:	bf14      	ite	ne
 8014a8a:	220a      	movne	r2, #10
 8014a8c:	2208      	moveq	r2, #8
 8014a8e:	2100      	movs	r1, #0
 8014a90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a94:	6865      	ldr	r5, [r4, #4]
 8014a96:	60a5      	str	r5, [r4, #8]
 8014a98:	2d00      	cmp	r5, #0
 8014a9a:	f2c0 8095 	blt.w	8014bc8 <_printf_i+0x20c>
 8014a9e:	6821      	ldr	r1, [r4, #0]
 8014aa0:	f021 0104 	bic.w	r1, r1, #4
 8014aa4:	6021      	str	r1, [r4, #0]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d13d      	bne.n	8014b26 <_printf_i+0x16a>
 8014aaa:	2d00      	cmp	r5, #0
 8014aac:	f040 808e 	bne.w	8014bcc <_printf_i+0x210>
 8014ab0:	4665      	mov	r5, ip
 8014ab2:	2a08      	cmp	r2, #8
 8014ab4:	d10b      	bne.n	8014ace <_printf_i+0x112>
 8014ab6:	6823      	ldr	r3, [r4, #0]
 8014ab8:	07db      	lsls	r3, r3, #31
 8014aba:	d508      	bpl.n	8014ace <_printf_i+0x112>
 8014abc:	6923      	ldr	r3, [r4, #16]
 8014abe:	6862      	ldr	r2, [r4, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	bfde      	ittt	le
 8014ac4:	2330      	movle	r3, #48	; 0x30
 8014ac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014aca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014ace:	ebac 0305 	sub.w	r3, ip, r5
 8014ad2:	6123      	str	r3, [r4, #16]
 8014ad4:	f8cd 8000 	str.w	r8, [sp]
 8014ad8:	463b      	mov	r3, r7
 8014ada:	aa03      	add	r2, sp, #12
 8014adc:	4621      	mov	r1, r4
 8014ade:	4630      	mov	r0, r6
 8014ae0:	f7ff fef6 	bl	80148d0 <_printf_common>
 8014ae4:	3001      	adds	r0, #1
 8014ae6:	d14d      	bne.n	8014b84 <_printf_i+0x1c8>
 8014ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8014aec:	b005      	add	sp, #20
 8014aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014af2:	4839      	ldr	r0, [pc, #228]	; (8014bd8 <_printf_i+0x21c>)
 8014af4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014af8:	6813      	ldr	r3, [r2, #0]
 8014afa:	6821      	ldr	r1, [r4, #0]
 8014afc:	1d1d      	adds	r5, r3, #4
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	6015      	str	r5, [r2, #0]
 8014b02:	060a      	lsls	r2, r1, #24
 8014b04:	d50b      	bpl.n	8014b1e <_printf_i+0x162>
 8014b06:	07ca      	lsls	r2, r1, #31
 8014b08:	bf44      	itt	mi
 8014b0a:	f041 0120 	orrmi.w	r1, r1, #32
 8014b0e:	6021      	strmi	r1, [r4, #0]
 8014b10:	b91b      	cbnz	r3, 8014b1a <_printf_i+0x15e>
 8014b12:	6822      	ldr	r2, [r4, #0]
 8014b14:	f022 0220 	bic.w	r2, r2, #32
 8014b18:	6022      	str	r2, [r4, #0]
 8014b1a:	2210      	movs	r2, #16
 8014b1c:	e7b7      	b.n	8014a8e <_printf_i+0xd2>
 8014b1e:	064d      	lsls	r5, r1, #25
 8014b20:	bf48      	it	mi
 8014b22:	b29b      	uxthmi	r3, r3
 8014b24:	e7ef      	b.n	8014b06 <_printf_i+0x14a>
 8014b26:	4665      	mov	r5, ip
 8014b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8014b2c:	fb02 3311 	mls	r3, r2, r1, r3
 8014b30:	5cc3      	ldrb	r3, [r0, r3]
 8014b32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014b36:	460b      	mov	r3, r1
 8014b38:	2900      	cmp	r1, #0
 8014b3a:	d1f5      	bne.n	8014b28 <_printf_i+0x16c>
 8014b3c:	e7b9      	b.n	8014ab2 <_printf_i+0xf6>
 8014b3e:	6813      	ldr	r3, [r2, #0]
 8014b40:	6825      	ldr	r5, [r4, #0]
 8014b42:	6961      	ldr	r1, [r4, #20]
 8014b44:	1d18      	adds	r0, r3, #4
 8014b46:	6010      	str	r0, [r2, #0]
 8014b48:	0628      	lsls	r0, r5, #24
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	d501      	bpl.n	8014b52 <_printf_i+0x196>
 8014b4e:	6019      	str	r1, [r3, #0]
 8014b50:	e002      	b.n	8014b58 <_printf_i+0x19c>
 8014b52:	066a      	lsls	r2, r5, #25
 8014b54:	d5fb      	bpl.n	8014b4e <_printf_i+0x192>
 8014b56:	8019      	strh	r1, [r3, #0]
 8014b58:	2300      	movs	r3, #0
 8014b5a:	6123      	str	r3, [r4, #16]
 8014b5c:	4665      	mov	r5, ip
 8014b5e:	e7b9      	b.n	8014ad4 <_printf_i+0x118>
 8014b60:	6813      	ldr	r3, [r2, #0]
 8014b62:	1d19      	adds	r1, r3, #4
 8014b64:	6011      	str	r1, [r2, #0]
 8014b66:	681d      	ldr	r5, [r3, #0]
 8014b68:	6862      	ldr	r2, [r4, #4]
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f7eb fb4f 	bl	8000210 <memchr>
 8014b72:	b108      	cbz	r0, 8014b78 <_printf_i+0x1bc>
 8014b74:	1b40      	subs	r0, r0, r5
 8014b76:	6060      	str	r0, [r4, #4]
 8014b78:	6863      	ldr	r3, [r4, #4]
 8014b7a:	6123      	str	r3, [r4, #16]
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b82:	e7a7      	b.n	8014ad4 <_printf_i+0x118>
 8014b84:	6923      	ldr	r3, [r4, #16]
 8014b86:	462a      	mov	r2, r5
 8014b88:	4639      	mov	r1, r7
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	47c0      	blx	r8
 8014b8e:	3001      	adds	r0, #1
 8014b90:	d0aa      	beq.n	8014ae8 <_printf_i+0x12c>
 8014b92:	6823      	ldr	r3, [r4, #0]
 8014b94:	079b      	lsls	r3, r3, #30
 8014b96:	d413      	bmi.n	8014bc0 <_printf_i+0x204>
 8014b98:	68e0      	ldr	r0, [r4, #12]
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	4298      	cmp	r0, r3
 8014b9e:	bfb8      	it	lt
 8014ba0:	4618      	movlt	r0, r3
 8014ba2:	e7a3      	b.n	8014aec <_printf_i+0x130>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	464a      	mov	r2, r9
 8014ba8:	4639      	mov	r1, r7
 8014baa:	4630      	mov	r0, r6
 8014bac:	47c0      	blx	r8
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d09a      	beq.n	8014ae8 <_printf_i+0x12c>
 8014bb2:	3501      	adds	r5, #1
 8014bb4:	68e3      	ldr	r3, [r4, #12]
 8014bb6:	9a03      	ldr	r2, [sp, #12]
 8014bb8:	1a9b      	subs	r3, r3, r2
 8014bba:	42ab      	cmp	r3, r5
 8014bbc:	dcf2      	bgt.n	8014ba4 <_printf_i+0x1e8>
 8014bbe:	e7eb      	b.n	8014b98 <_printf_i+0x1dc>
 8014bc0:	2500      	movs	r5, #0
 8014bc2:	f104 0919 	add.w	r9, r4, #25
 8014bc6:	e7f5      	b.n	8014bb4 <_printf_i+0x1f8>
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d1ac      	bne.n	8014b26 <_printf_i+0x16a>
 8014bcc:	7803      	ldrb	r3, [r0, #0]
 8014bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014bd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bd6:	e76c      	b.n	8014ab2 <_printf_i+0xf6>
 8014bd8:	08018eb8 	.word	0x08018eb8
 8014bdc:	08018ec9 	.word	0x08018ec9

08014be0 <_scanf_float>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	469a      	mov	sl, r3
 8014be6:	688b      	ldr	r3, [r1, #8]
 8014be8:	4616      	mov	r6, r2
 8014bea:	1e5a      	subs	r2, r3, #1
 8014bec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014bf0:	b087      	sub	sp, #28
 8014bf2:	bf83      	ittte	hi
 8014bf4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014bf8:	189b      	addhi	r3, r3, r2
 8014bfa:	9301      	strhi	r3, [sp, #4]
 8014bfc:	2300      	movls	r3, #0
 8014bfe:	bf86      	itte	hi
 8014c00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014c04:	608b      	strhi	r3, [r1, #8]
 8014c06:	9301      	strls	r3, [sp, #4]
 8014c08:	680b      	ldr	r3, [r1, #0]
 8014c0a:	4688      	mov	r8, r1
 8014c0c:	f04f 0b00 	mov.w	fp, #0
 8014c10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014c14:	f848 3b1c 	str.w	r3, [r8], #28
 8014c18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014c1c:	4607      	mov	r7, r0
 8014c1e:	460c      	mov	r4, r1
 8014c20:	4645      	mov	r5, r8
 8014c22:	465a      	mov	r2, fp
 8014c24:	46d9      	mov	r9, fp
 8014c26:	f8cd b008 	str.w	fp, [sp, #8]
 8014c2a:	68a1      	ldr	r1, [r4, #8]
 8014c2c:	b181      	cbz	r1, 8014c50 <_scanf_float+0x70>
 8014c2e:	6833      	ldr	r3, [r6, #0]
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	2b49      	cmp	r3, #73	; 0x49
 8014c34:	d071      	beq.n	8014d1a <_scanf_float+0x13a>
 8014c36:	d84d      	bhi.n	8014cd4 <_scanf_float+0xf4>
 8014c38:	2b39      	cmp	r3, #57	; 0x39
 8014c3a:	d840      	bhi.n	8014cbe <_scanf_float+0xde>
 8014c3c:	2b31      	cmp	r3, #49	; 0x31
 8014c3e:	f080 8088 	bcs.w	8014d52 <_scanf_float+0x172>
 8014c42:	2b2d      	cmp	r3, #45	; 0x2d
 8014c44:	f000 8090 	beq.w	8014d68 <_scanf_float+0x188>
 8014c48:	d815      	bhi.n	8014c76 <_scanf_float+0x96>
 8014c4a:	2b2b      	cmp	r3, #43	; 0x2b
 8014c4c:	f000 808c 	beq.w	8014d68 <_scanf_float+0x188>
 8014c50:	f1b9 0f00 	cmp.w	r9, #0
 8014c54:	d003      	beq.n	8014c5e <_scanf_float+0x7e>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	3a01      	subs	r2, #1
 8014c60:	2a01      	cmp	r2, #1
 8014c62:	f200 80ea 	bhi.w	8014e3a <_scanf_float+0x25a>
 8014c66:	4545      	cmp	r5, r8
 8014c68:	f200 80dc 	bhi.w	8014e24 <_scanf_float+0x244>
 8014c6c:	2601      	movs	r6, #1
 8014c6e:	4630      	mov	r0, r6
 8014c70:	b007      	add	sp, #28
 8014c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c76:	2b2e      	cmp	r3, #46	; 0x2e
 8014c78:	f000 809f 	beq.w	8014dba <_scanf_float+0x1da>
 8014c7c:	2b30      	cmp	r3, #48	; 0x30
 8014c7e:	d1e7      	bne.n	8014c50 <_scanf_float+0x70>
 8014c80:	6820      	ldr	r0, [r4, #0]
 8014c82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014c86:	d064      	beq.n	8014d52 <_scanf_float+0x172>
 8014c88:	9b01      	ldr	r3, [sp, #4]
 8014c8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014c8e:	6020      	str	r0, [r4, #0]
 8014c90:	f109 0901 	add.w	r9, r9, #1
 8014c94:	b11b      	cbz	r3, 8014c9e <_scanf_float+0xbe>
 8014c96:	3b01      	subs	r3, #1
 8014c98:	3101      	adds	r1, #1
 8014c9a:	9301      	str	r3, [sp, #4]
 8014c9c:	60a1      	str	r1, [r4, #8]
 8014c9e:	68a3      	ldr	r3, [r4, #8]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	60a3      	str	r3, [r4, #8]
 8014ca4:	6923      	ldr	r3, [r4, #16]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	6123      	str	r3, [r4, #16]
 8014caa:	6873      	ldr	r3, [r6, #4]
 8014cac:	3b01      	subs	r3, #1
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	6073      	str	r3, [r6, #4]
 8014cb2:	f340 80ac 	ble.w	8014e0e <_scanf_float+0x22e>
 8014cb6:	6833      	ldr	r3, [r6, #0]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	6033      	str	r3, [r6, #0]
 8014cbc:	e7b5      	b.n	8014c2a <_scanf_float+0x4a>
 8014cbe:	2b45      	cmp	r3, #69	; 0x45
 8014cc0:	f000 8085 	beq.w	8014dce <_scanf_float+0x1ee>
 8014cc4:	2b46      	cmp	r3, #70	; 0x46
 8014cc6:	d06a      	beq.n	8014d9e <_scanf_float+0x1be>
 8014cc8:	2b41      	cmp	r3, #65	; 0x41
 8014cca:	d1c1      	bne.n	8014c50 <_scanf_float+0x70>
 8014ccc:	2a01      	cmp	r2, #1
 8014cce:	d1bf      	bne.n	8014c50 <_scanf_float+0x70>
 8014cd0:	2202      	movs	r2, #2
 8014cd2:	e046      	b.n	8014d62 <_scanf_float+0x182>
 8014cd4:	2b65      	cmp	r3, #101	; 0x65
 8014cd6:	d07a      	beq.n	8014dce <_scanf_float+0x1ee>
 8014cd8:	d818      	bhi.n	8014d0c <_scanf_float+0x12c>
 8014cda:	2b54      	cmp	r3, #84	; 0x54
 8014cdc:	d066      	beq.n	8014dac <_scanf_float+0x1cc>
 8014cde:	d811      	bhi.n	8014d04 <_scanf_float+0x124>
 8014ce0:	2b4e      	cmp	r3, #78	; 0x4e
 8014ce2:	d1b5      	bne.n	8014c50 <_scanf_float+0x70>
 8014ce4:	2a00      	cmp	r2, #0
 8014ce6:	d146      	bne.n	8014d76 <_scanf_float+0x196>
 8014ce8:	f1b9 0f00 	cmp.w	r9, #0
 8014cec:	d145      	bne.n	8014d7a <_scanf_float+0x19a>
 8014cee:	6821      	ldr	r1, [r4, #0]
 8014cf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014cf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014cf8:	d13f      	bne.n	8014d7a <_scanf_float+0x19a>
 8014cfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014cfe:	6021      	str	r1, [r4, #0]
 8014d00:	2201      	movs	r2, #1
 8014d02:	e02e      	b.n	8014d62 <_scanf_float+0x182>
 8014d04:	2b59      	cmp	r3, #89	; 0x59
 8014d06:	d01e      	beq.n	8014d46 <_scanf_float+0x166>
 8014d08:	2b61      	cmp	r3, #97	; 0x61
 8014d0a:	e7de      	b.n	8014cca <_scanf_float+0xea>
 8014d0c:	2b6e      	cmp	r3, #110	; 0x6e
 8014d0e:	d0e9      	beq.n	8014ce4 <_scanf_float+0x104>
 8014d10:	d815      	bhi.n	8014d3e <_scanf_float+0x15e>
 8014d12:	2b66      	cmp	r3, #102	; 0x66
 8014d14:	d043      	beq.n	8014d9e <_scanf_float+0x1be>
 8014d16:	2b69      	cmp	r3, #105	; 0x69
 8014d18:	d19a      	bne.n	8014c50 <_scanf_float+0x70>
 8014d1a:	f1bb 0f00 	cmp.w	fp, #0
 8014d1e:	d138      	bne.n	8014d92 <_scanf_float+0x1b2>
 8014d20:	f1b9 0f00 	cmp.w	r9, #0
 8014d24:	d197      	bne.n	8014c56 <_scanf_float+0x76>
 8014d26:	6821      	ldr	r1, [r4, #0]
 8014d28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014d2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014d30:	d195      	bne.n	8014c5e <_scanf_float+0x7e>
 8014d32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014d36:	6021      	str	r1, [r4, #0]
 8014d38:	f04f 0b01 	mov.w	fp, #1
 8014d3c:	e011      	b.n	8014d62 <_scanf_float+0x182>
 8014d3e:	2b74      	cmp	r3, #116	; 0x74
 8014d40:	d034      	beq.n	8014dac <_scanf_float+0x1cc>
 8014d42:	2b79      	cmp	r3, #121	; 0x79
 8014d44:	d184      	bne.n	8014c50 <_scanf_float+0x70>
 8014d46:	f1bb 0f07 	cmp.w	fp, #7
 8014d4a:	d181      	bne.n	8014c50 <_scanf_float+0x70>
 8014d4c:	f04f 0b08 	mov.w	fp, #8
 8014d50:	e007      	b.n	8014d62 <_scanf_float+0x182>
 8014d52:	eb12 0f0b 	cmn.w	r2, fp
 8014d56:	f47f af7b 	bne.w	8014c50 <_scanf_float+0x70>
 8014d5a:	6821      	ldr	r1, [r4, #0]
 8014d5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014d60:	6021      	str	r1, [r4, #0]
 8014d62:	702b      	strb	r3, [r5, #0]
 8014d64:	3501      	adds	r5, #1
 8014d66:	e79a      	b.n	8014c9e <_scanf_float+0xbe>
 8014d68:	6821      	ldr	r1, [r4, #0]
 8014d6a:	0608      	lsls	r0, r1, #24
 8014d6c:	f57f af70 	bpl.w	8014c50 <_scanf_float+0x70>
 8014d70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014d74:	e7f4      	b.n	8014d60 <_scanf_float+0x180>
 8014d76:	2a02      	cmp	r2, #2
 8014d78:	d047      	beq.n	8014e0a <_scanf_float+0x22a>
 8014d7a:	f1bb 0f01 	cmp.w	fp, #1
 8014d7e:	d003      	beq.n	8014d88 <_scanf_float+0x1a8>
 8014d80:	f1bb 0f04 	cmp.w	fp, #4
 8014d84:	f47f af64 	bne.w	8014c50 <_scanf_float+0x70>
 8014d88:	f10b 0b01 	add.w	fp, fp, #1
 8014d8c:	fa5f fb8b 	uxtb.w	fp, fp
 8014d90:	e7e7      	b.n	8014d62 <_scanf_float+0x182>
 8014d92:	f1bb 0f03 	cmp.w	fp, #3
 8014d96:	d0f7      	beq.n	8014d88 <_scanf_float+0x1a8>
 8014d98:	f1bb 0f05 	cmp.w	fp, #5
 8014d9c:	e7f2      	b.n	8014d84 <_scanf_float+0x1a4>
 8014d9e:	f1bb 0f02 	cmp.w	fp, #2
 8014da2:	f47f af55 	bne.w	8014c50 <_scanf_float+0x70>
 8014da6:	f04f 0b03 	mov.w	fp, #3
 8014daa:	e7da      	b.n	8014d62 <_scanf_float+0x182>
 8014dac:	f1bb 0f06 	cmp.w	fp, #6
 8014db0:	f47f af4e 	bne.w	8014c50 <_scanf_float+0x70>
 8014db4:	f04f 0b07 	mov.w	fp, #7
 8014db8:	e7d3      	b.n	8014d62 <_scanf_float+0x182>
 8014dba:	6821      	ldr	r1, [r4, #0]
 8014dbc:	0588      	lsls	r0, r1, #22
 8014dbe:	f57f af47 	bpl.w	8014c50 <_scanf_float+0x70>
 8014dc2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014dc6:	6021      	str	r1, [r4, #0]
 8014dc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8014dcc:	e7c9      	b.n	8014d62 <_scanf_float+0x182>
 8014dce:	6821      	ldr	r1, [r4, #0]
 8014dd0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014dd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014dd8:	d006      	beq.n	8014de8 <_scanf_float+0x208>
 8014dda:	0548      	lsls	r0, r1, #21
 8014ddc:	f57f af38 	bpl.w	8014c50 <_scanf_float+0x70>
 8014de0:	f1b9 0f00 	cmp.w	r9, #0
 8014de4:	f43f af3b 	beq.w	8014c5e <_scanf_float+0x7e>
 8014de8:	0588      	lsls	r0, r1, #22
 8014dea:	bf58      	it	pl
 8014dec:	9802      	ldrpl	r0, [sp, #8]
 8014dee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014df2:	bf58      	it	pl
 8014df4:	eba9 0000 	subpl.w	r0, r9, r0
 8014df8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8014dfc:	bf58      	it	pl
 8014dfe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014e02:	6021      	str	r1, [r4, #0]
 8014e04:	f04f 0900 	mov.w	r9, #0
 8014e08:	e7ab      	b.n	8014d62 <_scanf_float+0x182>
 8014e0a:	2203      	movs	r2, #3
 8014e0c:	e7a9      	b.n	8014d62 <_scanf_float+0x182>
 8014e0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014e12:	9205      	str	r2, [sp, #20]
 8014e14:	4631      	mov	r1, r6
 8014e16:	4638      	mov	r0, r7
 8014e18:	4798      	blx	r3
 8014e1a:	9a05      	ldr	r2, [sp, #20]
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	f43f af04 	beq.w	8014c2a <_scanf_float+0x4a>
 8014e22:	e715      	b.n	8014c50 <_scanf_float+0x70>
 8014e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014e2c:	4632      	mov	r2, r6
 8014e2e:	4638      	mov	r0, r7
 8014e30:	4798      	blx	r3
 8014e32:	6923      	ldr	r3, [r4, #16]
 8014e34:	3b01      	subs	r3, #1
 8014e36:	6123      	str	r3, [r4, #16]
 8014e38:	e715      	b.n	8014c66 <_scanf_float+0x86>
 8014e3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014e3e:	2b06      	cmp	r3, #6
 8014e40:	d80a      	bhi.n	8014e58 <_scanf_float+0x278>
 8014e42:	f1bb 0f02 	cmp.w	fp, #2
 8014e46:	d968      	bls.n	8014f1a <_scanf_float+0x33a>
 8014e48:	f1ab 0b03 	sub.w	fp, fp, #3
 8014e4c:	fa5f fb8b 	uxtb.w	fp, fp
 8014e50:	eba5 0b0b 	sub.w	fp, r5, fp
 8014e54:	455d      	cmp	r5, fp
 8014e56:	d14b      	bne.n	8014ef0 <_scanf_float+0x310>
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	05da      	lsls	r2, r3, #23
 8014e5c:	d51f      	bpl.n	8014e9e <_scanf_float+0x2be>
 8014e5e:	055b      	lsls	r3, r3, #21
 8014e60:	d468      	bmi.n	8014f34 <_scanf_float+0x354>
 8014e62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014e66:	6923      	ldr	r3, [r4, #16]
 8014e68:	2965      	cmp	r1, #101	; 0x65
 8014e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014e72:	6123      	str	r3, [r4, #16]
 8014e74:	d00d      	beq.n	8014e92 <_scanf_float+0x2b2>
 8014e76:	2945      	cmp	r1, #69	; 0x45
 8014e78:	d00b      	beq.n	8014e92 <_scanf_float+0x2b2>
 8014e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e7e:	4632      	mov	r2, r6
 8014e80:	4638      	mov	r0, r7
 8014e82:	4798      	blx	r3
 8014e84:	6923      	ldr	r3, [r4, #16]
 8014e86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014e8a:	3b01      	subs	r3, #1
 8014e8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014e90:	6123      	str	r3, [r4, #16]
 8014e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e96:	4632      	mov	r2, r6
 8014e98:	4638      	mov	r0, r7
 8014e9a:	4798      	blx	r3
 8014e9c:	465d      	mov	r5, fp
 8014e9e:	6826      	ldr	r6, [r4, #0]
 8014ea0:	f016 0610 	ands.w	r6, r6, #16
 8014ea4:	d17a      	bne.n	8014f9c <_scanf_float+0x3bc>
 8014ea6:	702e      	strb	r6, [r5, #0]
 8014ea8:	6823      	ldr	r3, [r4, #0]
 8014eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014eb2:	d142      	bne.n	8014f3a <_scanf_float+0x35a>
 8014eb4:	9b02      	ldr	r3, [sp, #8]
 8014eb6:	eba9 0303 	sub.w	r3, r9, r3
 8014eba:	425a      	negs	r2, r3
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d149      	bne.n	8014f54 <_scanf_float+0x374>
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	4641      	mov	r1, r8
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	f000 ff0b 	bl	8015ce0 <_strtod_r>
 8014eca:	6825      	ldr	r5, [r4, #0]
 8014ecc:	f8da 3000 	ldr.w	r3, [sl]
 8014ed0:	f015 0f02 	tst.w	r5, #2
 8014ed4:	f103 0204 	add.w	r2, r3, #4
 8014ed8:	ec59 8b10 	vmov	r8, r9, d0
 8014edc:	f8ca 2000 	str.w	r2, [sl]
 8014ee0:	d043      	beq.n	8014f6a <_scanf_float+0x38a>
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	e9c3 8900 	strd	r8, r9, [r3]
 8014ee8:	68e3      	ldr	r3, [r4, #12]
 8014eea:	3301      	adds	r3, #1
 8014eec:	60e3      	str	r3, [r4, #12]
 8014eee:	e6be      	b.n	8014c6e <_scanf_float+0x8e>
 8014ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ef4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014ef8:	4632      	mov	r2, r6
 8014efa:	4638      	mov	r0, r7
 8014efc:	4798      	blx	r3
 8014efe:	6923      	ldr	r3, [r4, #16]
 8014f00:	3b01      	subs	r3, #1
 8014f02:	6123      	str	r3, [r4, #16]
 8014f04:	e7a6      	b.n	8014e54 <_scanf_float+0x274>
 8014f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014f0e:	4632      	mov	r2, r6
 8014f10:	4638      	mov	r0, r7
 8014f12:	4798      	blx	r3
 8014f14:	6923      	ldr	r3, [r4, #16]
 8014f16:	3b01      	subs	r3, #1
 8014f18:	6123      	str	r3, [r4, #16]
 8014f1a:	4545      	cmp	r5, r8
 8014f1c:	d8f3      	bhi.n	8014f06 <_scanf_float+0x326>
 8014f1e:	e6a5      	b.n	8014c6c <_scanf_float+0x8c>
 8014f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014f28:	4632      	mov	r2, r6
 8014f2a:	4638      	mov	r0, r7
 8014f2c:	4798      	blx	r3
 8014f2e:	6923      	ldr	r3, [r4, #16]
 8014f30:	3b01      	subs	r3, #1
 8014f32:	6123      	str	r3, [r4, #16]
 8014f34:	4545      	cmp	r5, r8
 8014f36:	d8f3      	bhi.n	8014f20 <_scanf_float+0x340>
 8014f38:	e698      	b.n	8014c6c <_scanf_float+0x8c>
 8014f3a:	9b03      	ldr	r3, [sp, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d0bf      	beq.n	8014ec0 <_scanf_float+0x2e0>
 8014f40:	9904      	ldr	r1, [sp, #16]
 8014f42:	230a      	movs	r3, #10
 8014f44:	4632      	mov	r2, r6
 8014f46:	3101      	adds	r1, #1
 8014f48:	4638      	mov	r0, r7
 8014f4a:	f000 ff55 	bl	8015df8 <_strtol_r>
 8014f4e:	9b03      	ldr	r3, [sp, #12]
 8014f50:	9d04      	ldr	r5, [sp, #16]
 8014f52:	1ac2      	subs	r2, r0, r3
 8014f54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014f58:	429d      	cmp	r5, r3
 8014f5a:	bf28      	it	cs
 8014f5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014f60:	490f      	ldr	r1, [pc, #60]	; (8014fa0 <_scanf_float+0x3c0>)
 8014f62:	4628      	mov	r0, r5
 8014f64:	f000 f858 	bl	8015018 <siprintf>
 8014f68:	e7aa      	b.n	8014ec0 <_scanf_float+0x2e0>
 8014f6a:	f015 0504 	ands.w	r5, r5, #4
 8014f6e:	d1b8      	bne.n	8014ee2 <_scanf_float+0x302>
 8014f70:	681f      	ldr	r7, [r3, #0]
 8014f72:	ee10 2a10 	vmov	r2, s0
 8014f76:	464b      	mov	r3, r9
 8014f78:	ee10 0a10 	vmov	r0, s0
 8014f7c:	4649      	mov	r1, r9
 8014f7e:	f7eb fded 	bl	8000b5c <__aeabi_dcmpun>
 8014f82:	b128      	cbz	r0, 8014f90 <_scanf_float+0x3b0>
 8014f84:	4628      	mov	r0, r5
 8014f86:	f000 f80d 	bl	8014fa4 <nanf>
 8014f8a:	ed87 0a00 	vstr	s0, [r7]
 8014f8e:	e7ab      	b.n	8014ee8 <_scanf_float+0x308>
 8014f90:	4640      	mov	r0, r8
 8014f92:	4649      	mov	r1, r9
 8014f94:	f7eb fe40 	bl	8000c18 <__aeabi_d2f>
 8014f98:	6038      	str	r0, [r7, #0]
 8014f9a:	e7a5      	b.n	8014ee8 <_scanf_float+0x308>
 8014f9c:	2600      	movs	r6, #0
 8014f9e:	e666      	b.n	8014c6e <_scanf_float+0x8e>
 8014fa0:	08018eda 	.word	0x08018eda

08014fa4 <nanf>:
 8014fa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014fac <nanf+0x8>
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	7fc00000 	.word	0x7fc00000

08014fb0 <sniprintf>:
 8014fb0:	b40c      	push	{r2, r3}
 8014fb2:	b530      	push	{r4, r5, lr}
 8014fb4:	4b17      	ldr	r3, [pc, #92]	; (8015014 <sniprintf+0x64>)
 8014fb6:	1e0c      	subs	r4, r1, #0
 8014fb8:	b09d      	sub	sp, #116	; 0x74
 8014fba:	681d      	ldr	r5, [r3, #0]
 8014fbc:	da08      	bge.n	8014fd0 <sniprintf+0x20>
 8014fbe:	238b      	movs	r3, #139	; 0x8b
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014fc6:	b01d      	add	sp, #116	; 0x74
 8014fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fcc:	b002      	add	sp, #8
 8014fce:	4770      	bx	lr
 8014fd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014fd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014fd8:	bf14      	ite	ne
 8014fda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014fde:	4623      	moveq	r3, r4
 8014fe0:	9304      	str	r3, [sp, #16]
 8014fe2:	9307      	str	r3, [sp, #28]
 8014fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fe8:	9002      	str	r0, [sp, #8]
 8014fea:	9006      	str	r0, [sp, #24]
 8014fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ff2:	ab21      	add	r3, sp, #132	; 0x84
 8014ff4:	a902      	add	r1, sp, #8
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	9301      	str	r3, [sp, #4]
 8014ffa:	f002 fde7 	bl	8017bcc <_svfiprintf_r>
 8014ffe:	1c43      	adds	r3, r0, #1
 8015000:	bfbc      	itt	lt
 8015002:	238b      	movlt	r3, #139	; 0x8b
 8015004:	602b      	strlt	r3, [r5, #0]
 8015006:	2c00      	cmp	r4, #0
 8015008:	d0dd      	beq.n	8014fc6 <sniprintf+0x16>
 801500a:	9b02      	ldr	r3, [sp, #8]
 801500c:	2200      	movs	r2, #0
 801500e:	701a      	strb	r2, [r3, #0]
 8015010:	e7d9      	b.n	8014fc6 <sniprintf+0x16>
 8015012:	bf00      	nop
 8015014:	2000000c 	.word	0x2000000c

08015018 <siprintf>:
 8015018:	b40e      	push	{r1, r2, r3}
 801501a:	b500      	push	{lr}
 801501c:	b09c      	sub	sp, #112	; 0x70
 801501e:	ab1d      	add	r3, sp, #116	; 0x74
 8015020:	9002      	str	r0, [sp, #8]
 8015022:	9006      	str	r0, [sp, #24]
 8015024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015028:	4809      	ldr	r0, [pc, #36]	; (8015050 <siprintf+0x38>)
 801502a:	9107      	str	r1, [sp, #28]
 801502c:	9104      	str	r1, [sp, #16]
 801502e:	4909      	ldr	r1, [pc, #36]	; (8015054 <siprintf+0x3c>)
 8015030:	f853 2b04 	ldr.w	r2, [r3], #4
 8015034:	9105      	str	r1, [sp, #20]
 8015036:	6800      	ldr	r0, [r0, #0]
 8015038:	9301      	str	r3, [sp, #4]
 801503a:	a902      	add	r1, sp, #8
 801503c:	f002 fdc6 	bl	8017bcc <_svfiprintf_r>
 8015040:	9b02      	ldr	r3, [sp, #8]
 8015042:	2200      	movs	r2, #0
 8015044:	701a      	strb	r2, [r3, #0]
 8015046:	b01c      	add	sp, #112	; 0x70
 8015048:	f85d eb04 	ldr.w	lr, [sp], #4
 801504c:	b003      	add	sp, #12
 801504e:	4770      	bx	lr
 8015050:	2000000c 	.word	0x2000000c
 8015054:	ffff0208 	.word	0xffff0208

08015058 <siscanf>:
 8015058:	b40e      	push	{r1, r2, r3}
 801505a:	b530      	push	{r4, r5, lr}
 801505c:	b09c      	sub	sp, #112	; 0x70
 801505e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015060:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015064:	f854 5b04 	ldr.w	r5, [r4], #4
 8015068:	f8ad 2014 	strh.w	r2, [sp, #20]
 801506c:	9002      	str	r0, [sp, #8]
 801506e:	9006      	str	r0, [sp, #24]
 8015070:	f7eb f8c6 	bl	8000200 <strlen>
 8015074:	4b0b      	ldr	r3, [pc, #44]	; (80150a4 <siscanf+0x4c>)
 8015076:	9003      	str	r0, [sp, #12]
 8015078:	9007      	str	r0, [sp, #28]
 801507a:	930b      	str	r3, [sp, #44]	; 0x2c
 801507c:	480a      	ldr	r0, [pc, #40]	; (80150a8 <siscanf+0x50>)
 801507e:	9401      	str	r4, [sp, #4]
 8015080:	2300      	movs	r3, #0
 8015082:	930f      	str	r3, [sp, #60]	; 0x3c
 8015084:	9314      	str	r3, [sp, #80]	; 0x50
 8015086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801508a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801508e:	462a      	mov	r2, r5
 8015090:	4623      	mov	r3, r4
 8015092:	a902      	add	r1, sp, #8
 8015094:	6800      	ldr	r0, [r0, #0]
 8015096:	f002 feeb 	bl	8017e70 <__ssvfiscanf_r>
 801509a:	b01c      	add	sp, #112	; 0x70
 801509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150a0:	b003      	add	sp, #12
 80150a2:	4770      	bx	lr
 80150a4:	080150ad 	.word	0x080150ad
 80150a8:	2000000c 	.word	0x2000000c

080150ac <__seofread>:
 80150ac:	2000      	movs	r0, #0
 80150ae:	4770      	bx	lr

080150b0 <strcpy>:
 80150b0:	4603      	mov	r3, r0
 80150b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150b6:	f803 2b01 	strb.w	r2, [r3], #1
 80150ba:	2a00      	cmp	r2, #0
 80150bc:	d1f9      	bne.n	80150b2 <strcpy+0x2>
 80150be:	4770      	bx	lr

080150c0 <sulp>:
 80150c0:	b570      	push	{r4, r5, r6, lr}
 80150c2:	4604      	mov	r4, r0
 80150c4:	460d      	mov	r5, r1
 80150c6:	ec45 4b10 	vmov	d0, r4, r5
 80150ca:	4616      	mov	r6, r2
 80150cc:	f002 fb3a 	bl	8017744 <__ulp>
 80150d0:	ec51 0b10 	vmov	r0, r1, d0
 80150d4:	b17e      	cbz	r6, 80150f6 <sulp+0x36>
 80150d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80150da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80150de:	2b00      	cmp	r3, #0
 80150e0:	dd09      	ble.n	80150f6 <sulp+0x36>
 80150e2:	051b      	lsls	r3, r3, #20
 80150e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80150e8:	2400      	movs	r4, #0
 80150ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80150ee:	4622      	mov	r2, r4
 80150f0:	462b      	mov	r3, r5
 80150f2:	f7eb fa99 	bl	8000628 <__aeabi_dmul>
 80150f6:	bd70      	pop	{r4, r5, r6, pc}

080150f8 <_strtod_l>:
 80150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	461f      	mov	r7, r3
 80150fe:	b0a1      	sub	sp, #132	; 0x84
 8015100:	2300      	movs	r3, #0
 8015102:	4681      	mov	r9, r0
 8015104:	4638      	mov	r0, r7
 8015106:	460e      	mov	r6, r1
 8015108:	9217      	str	r2, [sp, #92]	; 0x5c
 801510a:	931c      	str	r3, [sp, #112]	; 0x70
 801510c:	f002 f824 	bl	8017158 <__localeconv_l>
 8015110:	4680      	mov	r8, r0
 8015112:	6800      	ldr	r0, [r0, #0]
 8015114:	f7eb f874 	bl	8000200 <strlen>
 8015118:	f04f 0a00 	mov.w	sl, #0
 801511c:	4604      	mov	r4, r0
 801511e:	f04f 0b00 	mov.w	fp, #0
 8015122:	961b      	str	r6, [sp, #108]	; 0x6c
 8015124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015126:	781a      	ldrb	r2, [r3, #0]
 8015128:	2a0d      	cmp	r2, #13
 801512a:	d832      	bhi.n	8015192 <_strtod_l+0x9a>
 801512c:	2a09      	cmp	r2, #9
 801512e:	d236      	bcs.n	801519e <_strtod_l+0xa6>
 8015130:	2a00      	cmp	r2, #0
 8015132:	d03e      	beq.n	80151b2 <_strtod_l+0xba>
 8015134:	2300      	movs	r3, #0
 8015136:	930d      	str	r3, [sp, #52]	; 0x34
 8015138:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801513a:	782b      	ldrb	r3, [r5, #0]
 801513c:	2b30      	cmp	r3, #48	; 0x30
 801513e:	f040 80ac 	bne.w	801529a <_strtod_l+0x1a2>
 8015142:	786b      	ldrb	r3, [r5, #1]
 8015144:	2b58      	cmp	r3, #88	; 0x58
 8015146:	d001      	beq.n	801514c <_strtod_l+0x54>
 8015148:	2b78      	cmp	r3, #120	; 0x78
 801514a:	d167      	bne.n	801521c <_strtod_l+0x124>
 801514c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801514e:	9301      	str	r3, [sp, #4]
 8015150:	ab1c      	add	r3, sp, #112	; 0x70
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	9702      	str	r7, [sp, #8]
 8015156:	ab1d      	add	r3, sp, #116	; 0x74
 8015158:	4a88      	ldr	r2, [pc, #544]	; (801537c <_strtod_l+0x284>)
 801515a:	a91b      	add	r1, sp, #108	; 0x6c
 801515c:	4648      	mov	r0, r9
 801515e:	f001 fd12 	bl	8016b86 <__gethex>
 8015162:	f010 0407 	ands.w	r4, r0, #7
 8015166:	4606      	mov	r6, r0
 8015168:	d005      	beq.n	8015176 <_strtod_l+0x7e>
 801516a:	2c06      	cmp	r4, #6
 801516c:	d12b      	bne.n	80151c6 <_strtod_l+0xce>
 801516e:	3501      	adds	r5, #1
 8015170:	2300      	movs	r3, #0
 8015172:	951b      	str	r5, [sp, #108]	; 0x6c
 8015174:	930d      	str	r3, [sp, #52]	; 0x34
 8015176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015178:	2b00      	cmp	r3, #0
 801517a:	f040 859a 	bne.w	8015cb2 <_strtod_l+0xbba>
 801517e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015180:	b1e3      	cbz	r3, 80151bc <_strtod_l+0xc4>
 8015182:	4652      	mov	r2, sl
 8015184:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015188:	ec43 2b10 	vmov	d0, r2, r3
 801518c:	b021      	add	sp, #132	; 0x84
 801518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015192:	2a2b      	cmp	r2, #43	; 0x2b
 8015194:	d015      	beq.n	80151c2 <_strtod_l+0xca>
 8015196:	2a2d      	cmp	r2, #45	; 0x2d
 8015198:	d004      	beq.n	80151a4 <_strtod_l+0xac>
 801519a:	2a20      	cmp	r2, #32
 801519c:	d1ca      	bne.n	8015134 <_strtod_l+0x3c>
 801519e:	3301      	adds	r3, #1
 80151a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80151a2:	e7bf      	b.n	8015124 <_strtod_l+0x2c>
 80151a4:	2201      	movs	r2, #1
 80151a6:	920d      	str	r2, [sp, #52]	; 0x34
 80151a8:	1c5a      	adds	r2, r3, #1
 80151aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80151ac:	785b      	ldrb	r3, [r3, #1]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1c2      	bne.n	8015138 <_strtod_l+0x40>
 80151b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	f040 8579 	bne.w	8015cae <_strtod_l+0xbb6>
 80151bc:	4652      	mov	r2, sl
 80151be:	465b      	mov	r3, fp
 80151c0:	e7e2      	b.n	8015188 <_strtod_l+0x90>
 80151c2:	2200      	movs	r2, #0
 80151c4:	e7ef      	b.n	80151a6 <_strtod_l+0xae>
 80151c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80151c8:	b13a      	cbz	r2, 80151da <_strtod_l+0xe2>
 80151ca:	2135      	movs	r1, #53	; 0x35
 80151cc:	a81e      	add	r0, sp, #120	; 0x78
 80151ce:	f002 fbb1 	bl	8017934 <__copybits>
 80151d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80151d4:	4648      	mov	r0, r9
 80151d6:	f002 f81d 	bl	8017214 <_Bfree>
 80151da:	3c01      	subs	r4, #1
 80151dc:	2c04      	cmp	r4, #4
 80151de:	d806      	bhi.n	80151ee <_strtod_l+0xf6>
 80151e0:	e8df f004 	tbb	[pc, r4]
 80151e4:	1714030a 	.word	0x1714030a
 80151e8:	0a          	.byte	0x0a
 80151e9:	00          	.byte	0x00
 80151ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80151ee:	0730      	lsls	r0, r6, #28
 80151f0:	d5c1      	bpl.n	8015176 <_strtod_l+0x7e>
 80151f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80151f6:	e7be      	b.n	8015176 <_strtod_l+0x7e>
 80151f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80151fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80151fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015202:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015206:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801520a:	e7f0      	b.n	80151ee <_strtod_l+0xf6>
 801520c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015380 <_strtod_l+0x288>
 8015210:	e7ed      	b.n	80151ee <_strtod_l+0xf6>
 8015212:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015216:	f04f 3aff 	mov.w	sl, #4294967295
 801521a:	e7e8      	b.n	80151ee <_strtod_l+0xf6>
 801521c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801521e:	1c5a      	adds	r2, r3, #1
 8015220:	921b      	str	r2, [sp, #108]	; 0x6c
 8015222:	785b      	ldrb	r3, [r3, #1]
 8015224:	2b30      	cmp	r3, #48	; 0x30
 8015226:	d0f9      	beq.n	801521c <_strtod_l+0x124>
 8015228:	2b00      	cmp	r3, #0
 801522a:	d0a4      	beq.n	8015176 <_strtod_l+0x7e>
 801522c:	2301      	movs	r3, #1
 801522e:	2500      	movs	r5, #0
 8015230:	9306      	str	r3, [sp, #24]
 8015232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015234:	9308      	str	r3, [sp, #32]
 8015236:	9507      	str	r5, [sp, #28]
 8015238:	9505      	str	r5, [sp, #20]
 801523a:	220a      	movs	r2, #10
 801523c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801523e:	7807      	ldrb	r7, [r0, #0]
 8015240:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015244:	b2d9      	uxtb	r1, r3
 8015246:	2909      	cmp	r1, #9
 8015248:	d929      	bls.n	801529e <_strtod_l+0x1a6>
 801524a:	4622      	mov	r2, r4
 801524c:	f8d8 1000 	ldr.w	r1, [r8]
 8015250:	f003 f8f8 	bl	8018444 <strncmp>
 8015254:	2800      	cmp	r0, #0
 8015256:	d031      	beq.n	80152bc <_strtod_l+0x1c4>
 8015258:	2000      	movs	r0, #0
 801525a:	9c05      	ldr	r4, [sp, #20]
 801525c:	9004      	str	r0, [sp, #16]
 801525e:	463b      	mov	r3, r7
 8015260:	4602      	mov	r2, r0
 8015262:	2b65      	cmp	r3, #101	; 0x65
 8015264:	d001      	beq.n	801526a <_strtod_l+0x172>
 8015266:	2b45      	cmp	r3, #69	; 0x45
 8015268:	d114      	bne.n	8015294 <_strtod_l+0x19c>
 801526a:	b924      	cbnz	r4, 8015276 <_strtod_l+0x17e>
 801526c:	b910      	cbnz	r0, 8015274 <_strtod_l+0x17c>
 801526e:	9b06      	ldr	r3, [sp, #24]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d09e      	beq.n	80151b2 <_strtod_l+0xba>
 8015274:	2400      	movs	r4, #0
 8015276:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015278:	1c73      	adds	r3, r6, #1
 801527a:	931b      	str	r3, [sp, #108]	; 0x6c
 801527c:	7873      	ldrb	r3, [r6, #1]
 801527e:	2b2b      	cmp	r3, #43	; 0x2b
 8015280:	d078      	beq.n	8015374 <_strtod_l+0x27c>
 8015282:	2b2d      	cmp	r3, #45	; 0x2d
 8015284:	d070      	beq.n	8015368 <_strtod_l+0x270>
 8015286:	f04f 0c00 	mov.w	ip, #0
 801528a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801528e:	2f09      	cmp	r7, #9
 8015290:	d97c      	bls.n	801538c <_strtod_l+0x294>
 8015292:	961b      	str	r6, [sp, #108]	; 0x6c
 8015294:	f04f 0e00 	mov.w	lr, #0
 8015298:	e09a      	b.n	80153d0 <_strtod_l+0x2d8>
 801529a:	2300      	movs	r3, #0
 801529c:	e7c7      	b.n	801522e <_strtod_l+0x136>
 801529e:	9905      	ldr	r1, [sp, #20]
 80152a0:	2908      	cmp	r1, #8
 80152a2:	bfdd      	ittte	le
 80152a4:	9907      	ldrle	r1, [sp, #28]
 80152a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80152aa:	9307      	strle	r3, [sp, #28]
 80152ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80152b0:	9b05      	ldr	r3, [sp, #20]
 80152b2:	3001      	adds	r0, #1
 80152b4:	3301      	adds	r3, #1
 80152b6:	9305      	str	r3, [sp, #20]
 80152b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80152ba:	e7bf      	b.n	801523c <_strtod_l+0x144>
 80152bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152be:	191a      	adds	r2, r3, r4
 80152c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80152c2:	9a05      	ldr	r2, [sp, #20]
 80152c4:	5d1b      	ldrb	r3, [r3, r4]
 80152c6:	2a00      	cmp	r2, #0
 80152c8:	d037      	beq.n	801533a <_strtod_l+0x242>
 80152ca:	9c05      	ldr	r4, [sp, #20]
 80152cc:	4602      	mov	r2, r0
 80152ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80152d2:	2909      	cmp	r1, #9
 80152d4:	d913      	bls.n	80152fe <_strtod_l+0x206>
 80152d6:	2101      	movs	r1, #1
 80152d8:	9104      	str	r1, [sp, #16]
 80152da:	e7c2      	b.n	8015262 <_strtod_l+0x16a>
 80152dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152de:	1c5a      	adds	r2, r3, #1
 80152e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80152e2:	785b      	ldrb	r3, [r3, #1]
 80152e4:	3001      	adds	r0, #1
 80152e6:	2b30      	cmp	r3, #48	; 0x30
 80152e8:	d0f8      	beq.n	80152dc <_strtod_l+0x1e4>
 80152ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80152ee:	2a08      	cmp	r2, #8
 80152f0:	f200 84e4 	bhi.w	8015cbc <_strtod_l+0xbc4>
 80152f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80152f6:	9208      	str	r2, [sp, #32]
 80152f8:	4602      	mov	r2, r0
 80152fa:	2000      	movs	r0, #0
 80152fc:	4604      	mov	r4, r0
 80152fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015302:	f100 0101 	add.w	r1, r0, #1
 8015306:	d012      	beq.n	801532e <_strtod_l+0x236>
 8015308:	440a      	add	r2, r1
 801530a:	eb00 0c04 	add.w	ip, r0, r4
 801530e:	4621      	mov	r1, r4
 8015310:	270a      	movs	r7, #10
 8015312:	458c      	cmp	ip, r1
 8015314:	d113      	bne.n	801533e <_strtod_l+0x246>
 8015316:	1821      	adds	r1, r4, r0
 8015318:	2908      	cmp	r1, #8
 801531a:	f104 0401 	add.w	r4, r4, #1
 801531e:	4404      	add	r4, r0
 8015320:	dc19      	bgt.n	8015356 <_strtod_l+0x25e>
 8015322:	9b07      	ldr	r3, [sp, #28]
 8015324:	210a      	movs	r1, #10
 8015326:	fb01 e303 	mla	r3, r1, r3, lr
 801532a:	9307      	str	r3, [sp, #28]
 801532c:	2100      	movs	r1, #0
 801532e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015330:	1c58      	adds	r0, r3, #1
 8015332:	901b      	str	r0, [sp, #108]	; 0x6c
 8015334:	785b      	ldrb	r3, [r3, #1]
 8015336:	4608      	mov	r0, r1
 8015338:	e7c9      	b.n	80152ce <_strtod_l+0x1d6>
 801533a:	9805      	ldr	r0, [sp, #20]
 801533c:	e7d3      	b.n	80152e6 <_strtod_l+0x1ee>
 801533e:	2908      	cmp	r1, #8
 8015340:	f101 0101 	add.w	r1, r1, #1
 8015344:	dc03      	bgt.n	801534e <_strtod_l+0x256>
 8015346:	9b07      	ldr	r3, [sp, #28]
 8015348:	437b      	muls	r3, r7
 801534a:	9307      	str	r3, [sp, #28]
 801534c:	e7e1      	b.n	8015312 <_strtod_l+0x21a>
 801534e:	2910      	cmp	r1, #16
 8015350:	bfd8      	it	le
 8015352:	437d      	mulle	r5, r7
 8015354:	e7dd      	b.n	8015312 <_strtod_l+0x21a>
 8015356:	2c10      	cmp	r4, #16
 8015358:	bfdc      	itt	le
 801535a:	210a      	movle	r1, #10
 801535c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015360:	e7e4      	b.n	801532c <_strtod_l+0x234>
 8015362:	2301      	movs	r3, #1
 8015364:	9304      	str	r3, [sp, #16]
 8015366:	e781      	b.n	801526c <_strtod_l+0x174>
 8015368:	f04f 0c01 	mov.w	ip, #1
 801536c:	1cb3      	adds	r3, r6, #2
 801536e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015370:	78b3      	ldrb	r3, [r6, #2]
 8015372:	e78a      	b.n	801528a <_strtod_l+0x192>
 8015374:	f04f 0c00 	mov.w	ip, #0
 8015378:	e7f8      	b.n	801536c <_strtod_l+0x274>
 801537a:	bf00      	nop
 801537c:	08018ee0 	.word	0x08018ee0
 8015380:	7ff00000 	.word	0x7ff00000
 8015384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015386:	1c5f      	adds	r7, r3, #1
 8015388:	971b      	str	r7, [sp, #108]	; 0x6c
 801538a:	785b      	ldrb	r3, [r3, #1]
 801538c:	2b30      	cmp	r3, #48	; 0x30
 801538e:	d0f9      	beq.n	8015384 <_strtod_l+0x28c>
 8015390:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015394:	2f08      	cmp	r7, #8
 8015396:	f63f af7d 	bhi.w	8015294 <_strtod_l+0x19c>
 801539a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801539e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153a0:	930a      	str	r3, [sp, #40]	; 0x28
 80153a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153a4:	1c5f      	adds	r7, r3, #1
 80153a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80153a8:	785b      	ldrb	r3, [r3, #1]
 80153aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80153ae:	f1b8 0f09 	cmp.w	r8, #9
 80153b2:	d937      	bls.n	8015424 <_strtod_l+0x32c>
 80153b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80153b6:	1a7f      	subs	r7, r7, r1
 80153b8:	2f08      	cmp	r7, #8
 80153ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80153be:	dc37      	bgt.n	8015430 <_strtod_l+0x338>
 80153c0:	45be      	cmp	lr, r7
 80153c2:	bfa8      	it	ge
 80153c4:	46be      	movge	lr, r7
 80153c6:	f1bc 0f00 	cmp.w	ip, #0
 80153ca:	d001      	beq.n	80153d0 <_strtod_l+0x2d8>
 80153cc:	f1ce 0e00 	rsb	lr, lr, #0
 80153d0:	2c00      	cmp	r4, #0
 80153d2:	d151      	bne.n	8015478 <_strtod_l+0x380>
 80153d4:	2800      	cmp	r0, #0
 80153d6:	f47f aece 	bne.w	8015176 <_strtod_l+0x7e>
 80153da:	9a06      	ldr	r2, [sp, #24]
 80153dc:	2a00      	cmp	r2, #0
 80153de:	f47f aeca 	bne.w	8015176 <_strtod_l+0x7e>
 80153e2:	9a04      	ldr	r2, [sp, #16]
 80153e4:	2a00      	cmp	r2, #0
 80153e6:	f47f aee4 	bne.w	80151b2 <_strtod_l+0xba>
 80153ea:	2b4e      	cmp	r3, #78	; 0x4e
 80153ec:	d027      	beq.n	801543e <_strtod_l+0x346>
 80153ee:	dc21      	bgt.n	8015434 <_strtod_l+0x33c>
 80153f0:	2b49      	cmp	r3, #73	; 0x49
 80153f2:	f47f aede 	bne.w	80151b2 <_strtod_l+0xba>
 80153f6:	49a0      	ldr	r1, [pc, #640]	; (8015678 <_strtod_l+0x580>)
 80153f8:	a81b      	add	r0, sp, #108	; 0x6c
 80153fa:	f001 fdf7 	bl	8016fec <__match>
 80153fe:	2800      	cmp	r0, #0
 8015400:	f43f aed7 	beq.w	80151b2 <_strtod_l+0xba>
 8015404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015406:	499d      	ldr	r1, [pc, #628]	; (801567c <_strtod_l+0x584>)
 8015408:	3b01      	subs	r3, #1
 801540a:	a81b      	add	r0, sp, #108	; 0x6c
 801540c:	931b      	str	r3, [sp, #108]	; 0x6c
 801540e:	f001 fded 	bl	8016fec <__match>
 8015412:	b910      	cbnz	r0, 801541a <_strtod_l+0x322>
 8015414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015416:	3301      	adds	r3, #1
 8015418:	931b      	str	r3, [sp, #108]	; 0x6c
 801541a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015690 <_strtod_l+0x598>
 801541e:	f04f 0a00 	mov.w	sl, #0
 8015422:	e6a8      	b.n	8015176 <_strtod_l+0x7e>
 8015424:	210a      	movs	r1, #10
 8015426:	fb01 3e0e 	mla	lr, r1, lr, r3
 801542a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801542e:	e7b8      	b.n	80153a2 <_strtod_l+0x2aa>
 8015430:	46be      	mov	lr, r7
 8015432:	e7c8      	b.n	80153c6 <_strtod_l+0x2ce>
 8015434:	2b69      	cmp	r3, #105	; 0x69
 8015436:	d0de      	beq.n	80153f6 <_strtod_l+0x2fe>
 8015438:	2b6e      	cmp	r3, #110	; 0x6e
 801543a:	f47f aeba 	bne.w	80151b2 <_strtod_l+0xba>
 801543e:	4990      	ldr	r1, [pc, #576]	; (8015680 <_strtod_l+0x588>)
 8015440:	a81b      	add	r0, sp, #108	; 0x6c
 8015442:	f001 fdd3 	bl	8016fec <__match>
 8015446:	2800      	cmp	r0, #0
 8015448:	f43f aeb3 	beq.w	80151b2 <_strtod_l+0xba>
 801544c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	2b28      	cmp	r3, #40	; 0x28
 8015452:	d10e      	bne.n	8015472 <_strtod_l+0x37a>
 8015454:	aa1e      	add	r2, sp, #120	; 0x78
 8015456:	498b      	ldr	r1, [pc, #556]	; (8015684 <_strtod_l+0x58c>)
 8015458:	a81b      	add	r0, sp, #108	; 0x6c
 801545a:	f001 fddb 	bl	8017014 <__hexnan>
 801545e:	2805      	cmp	r0, #5
 8015460:	d107      	bne.n	8015472 <_strtod_l+0x37a>
 8015462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015464:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015468:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801546c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015470:	e681      	b.n	8015176 <_strtod_l+0x7e>
 8015472:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015698 <_strtod_l+0x5a0>
 8015476:	e7d2      	b.n	801541e <_strtod_l+0x326>
 8015478:	ebae 0302 	sub.w	r3, lr, r2
 801547c:	9306      	str	r3, [sp, #24]
 801547e:	9b05      	ldr	r3, [sp, #20]
 8015480:	9807      	ldr	r0, [sp, #28]
 8015482:	2b00      	cmp	r3, #0
 8015484:	bf08      	it	eq
 8015486:	4623      	moveq	r3, r4
 8015488:	2c10      	cmp	r4, #16
 801548a:	9305      	str	r3, [sp, #20]
 801548c:	46a0      	mov	r8, r4
 801548e:	bfa8      	it	ge
 8015490:	f04f 0810 	movge.w	r8, #16
 8015494:	f7eb f84e 	bl	8000534 <__aeabi_ui2d>
 8015498:	2c09      	cmp	r4, #9
 801549a:	4682      	mov	sl, r0
 801549c:	468b      	mov	fp, r1
 801549e:	dc13      	bgt.n	80154c8 <_strtod_l+0x3d0>
 80154a0:	9b06      	ldr	r3, [sp, #24]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f43f ae67 	beq.w	8015176 <_strtod_l+0x7e>
 80154a8:	9b06      	ldr	r3, [sp, #24]
 80154aa:	dd7a      	ble.n	80155a2 <_strtod_l+0x4aa>
 80154ac:	2b16      	cmp	r3, #22
 80154ae:	dc61      	bgt.n	8015574 <_strtod_l+0x47c>
 80154b0:	4a75      	ldr	r2, [pc, #468]	; (8015688 <_strtod_l+0x590>)
 80154b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80154b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80154ba:	4652      	mov	r2, sl
 80154bc:	465b      	mov	r3, fp
 80154be:	f7eb f8b3 	bl	8000628 <__aeabi_dmul>
 80154c2:	4682      	mov	sl, r0
 80154c4:	468b      	mov	fp, r1
 80154c6:	e656      	b.n	8015176 <_strtod_l+0x7e>
 80154c8:	4b6f      	ldr	r3, [pc, #444]	; (8015688 <_strtod_l+0x590>)
 80154ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80154ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80154d2:	f7eb f8a9 	bl	8000628 <__aeabi_dmul>
 80154d6:	4606      	mov	r6, r0
 80154d8:	4628      	mov	r0, r5
 80154da:	460f      	mov	r7, r1
 80154dc:	f7eb f82a 	bl	8000534 <__aeabi_ui2d>
 80154e0:	4602      	mov	r2, r0
 80154e2:	460b      	mov	r3, r1
 80154e4:	4630      	mov	r0, r6
 80154e6:	4639      	mov	r1, r7
 80154e8:	f7ea fee8 	bl	80002bc <__adddf3>
 80154ec:	2c0f      	cmp	r4, #15
 80154ee:	4682      	mov	sl, r0
 80154f0:	468b      	mov	fp, r1
 80154f2:	ddd5      	ble.n	80154a0 <_strtod_l+0x3a8>
 80154f4:	9b06      	ldr	r3, [sp, #24]
 80154f6:	eba4 0808 	sub.w	r8, r4, r8
 80154fa:	4498      	add	r8, r3
 80154fc:	f1b8 0f00 	cmp.w	r8, #0
 8015500:	f340 8096 	ble.w	8015630 <_strtod_l+0x538>
 8015504:	f018 030f 	ands.w	r3, r8, #15
 8015508:	d00a      	beq.n	8015520 <_strtod_l+0x428>
 801550a:	495f      	ldr	r1, [pc, #380]	; (8015688 <_strtod_l+0x590>)
 801550c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015510:	4652      	mov	r2, sl
 8015512:	465b      	mov	r3, fp
 8015514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015518:	f7eb f886 	bl	8000628 <__aeabi_dmul>
 801551c:	4682      	mov	sl, r0
 801551e:	468b      	mov	fp, r1
 8015520:	f038 080f 	bics.w	r8, r8, #15
 8015524:	d073      	beq.n	801560e <_strtod_l+0x516>
 8015526:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801552a:	dd47      	ble.n	80155bc <_strtod_l+0x4c4>
 801552c:	2400      	movs	r4, #0
 801552e:	46a0      	mov	r8, r4
 8015530:	9407      	str	r4, [sp, #28]
 8015532:	9405      	str	r4, [sp, #20]
 8015534:	2322      	movs	r3, #34	; 0x22
 8015536:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015690 <_strtod_l+0x598>
 801553a:	f8c9 3000 	str.w	r3, [r9]
 801553e:	f04f 0a00 	mov.w	sl, #0
 8015542:	9b07      	ldr	r3, [sp, #28]
 8015544:	2b00      	cmp	r3, #0
 8015546:	f43f ae16 	beq.w	8015176 <_strtod_l+0x7e>
 801554a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801554c:	4648      	mov	r0, r9
 801554e:	f001 fe61 	bl	8017214 <_Bfree>
 8015552:	9905      	ldr	r1, [sp, #20]
 8015554:	4648      	mov	r0, r9
 8015556:	f001 fe5d 	bl	8017214 <_Bfree>
 801555a:	4641      	mov	r1, r8
 801555c:	4648      	mov	r0, r9
 801555e:	f001 fe59 	bl	8017214 <_Bfree>
 8015562:	9907      	ldr	r1, [sp, #28]
 8015564:	4648      	mov	r0, r9
 8015566:	f001 fe55 	bl	8017214 <_Bfree>
 801556a:	4621      	mov	r1, r4
 801556c:	4648      	mov	r0, r9
 801556e:	f001 fe51 	bl	8017214 <_Bfree>
 8015572:	e600      	b.n	8015176 <_strtod_l+0x7e>
 8015574:	9a06      	ldr	r2, [sp, #24]
 8015576:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801557a:	4293      	cmp	r3, r2
 801557c:	dbba      	blt.n	80154f4 <_strtod_l+0x3fc>
 801557e:	4d42      	ldr	r5, [pc, #264]	; (8015688 <_strtod_l+0x590>)
 8015580:	f1c4 040f 	rsb	r4, r4, #15
 8015584:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015588:	4652      	mov	r2, sl
 801558a:	465b      	mov	r3, fp
 801558c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015590:	f7eb f84a 	bl	8000628 <__aeabi_dmul>
 8015594:	9b06      	ldr	r3, [sp, #24]
 8015596:	1b1c      	subs	r4, r3, r4
 8015598:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801559c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80155a0:	e78d      	b.n	80154be <_strtod_l+0x3c6>
 80155a2:	f113 0f16 	cmn.w	r3, #22
 80155a6:	dba5      	blt.n	80154f4 <_strtod_l+0x3fc>
 80155a8:	4a37      	ldr	r2, [pc, #220]	; (8015688 <_strtod_l+0x590>)
 80155aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80155ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80155b2:	4650      	mov	r0, sl
 80155b4:	4659      	mov	r1, fp
 80155b6:	f7eb f961 	bl	800087c <__aeabi_ddiv>
 80155ba:	e782      	b.n	80154c2 <_strtod_l+0x3ca>
 80155bc:	2300      	movs	r3, #0
 80155be:	4e33      	ldr	r6, [pc, #204]	; (801568c <_strtod_l+0x594>)
 80155c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80155c4:	4650      	mov	r0, sl
 80155c6:	4659      	mov	r1, fp
 80155c8:	461d      	mov	r5, r3
 80155ca:	f1b8 0f01 	cmp.w	r8, #1
 80155ce:	dc21      	bgt.n	8015614 <_strtod_l+0x51c>
 80155d0:	b10b      	cbz	r3, 80155d6 <_strtod_l+0x4de>
 80155d2:	4682      	mov	sl, r0
 80155d4:	468b      	mov	fp, r1
 80155d6:	4b2d      	ldr	r3, [pc, #180]	; (801568c <_strtod_l+0x594>)
 80155d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80155dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80155e0:	4652      	mov	r2, sl
 80155e2:	465b      	mov	r3, fp
 80155e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80155e8:	f7eb f81e 	bl	8000628 <__aeabi_dmul>
 80155ec:	4b28      	ldr	r3, [pc, #160]	; (8015690 <_strtod_l+0x598>)
 80155ee:	460a      	mov	r2, r1
 80155f0:	400b      	ands	r3, r1
 80155f2:	4928      	ldr	r1, [pc, #160]	; (8015694 <_strtod_l+0x59c>)
 80155f4:	428b      	cmp	r3, r1
 80155f6:	4682      	mov	sl, r0
 80155f8:	d898      	bhi.n	801552c <_strtod_l+0x434>
 80155fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80155fe:	428b      	cmp	r3, r1
 8015600:	bf86      	itte	hi
 8015602:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801569c <_strtod_l+0x5a4>
 8015606:	f04f 3aff 	movhi.w	sl, #4294967295
 801560a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801560e:	2300      	movs	r3, #0
 8015610:	9304      	str	r3, [sp, #16]
 8015612:	e077      	b.n	8015704 <_strtod_l+0x60c>
 8015614:	f018 0f01 	tst.w	r8, #1
 8015618:	d006      	beq.n	8015628 <_strtod_l+0x530>
 801561a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	f7eb f801 	bl	8000628 <__aeabi_dmul>
 8015626:	2301      	movs	r3, #1
 8015628:	3501      	adds	r5, #1
 801562a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801562e:	e7cc      	b.n	80155ca <_strtod_l+0x4d2>
 8015630:	d0ed      	beq.n	801560e <_strtod_l+0x516>
 8015632:	f1c8 0800 	rsb	r8, r8, #0
 8015636:	f018 020f 	ands.w	r2, r8, #15
 801563a:	d00a      	beq.n	8015652 <_strtod_l+0x55a>
 801563c:	4b12      	ldr	r3, [pc, #72]	; (8015688 <_strtod_l+0x590>)
 801563e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015642:	4650      	mov	r0, sl
 8015644:	4659      	mov	r1, fp
 8015646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564a:	f7eb f917 	bl	800087c <__aeabi_ddiv>
 801564e:	4682      	mov	sl, r0
 8015650:	468b      	mov	fp, r1
 8015652:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015656:	d0da      	beq.n	801560e <_strtod_l+0x516>
 8015658:	f1b8 0f1f 	cmp.w	r8, #31
 801565c:	dd20      	ble.n	80156a0 <_strtod_l+0x5a8>
 801565e:	2400      	movs	r4, #0
 8015660:	46a0      	mov	r8, r4
 8015662:	9407      	str	r4, [sp, #28]
 8015664:	9405      	str	r4, [sp, #20]
 8015666:	2322      	movs	r3, #34	; 0x22
 8015668:	f04f 0a00 	mov.w	sl, #0
 801566c:	f04f 0b00 	mov.w	fp, #0
 8015670:	f8c9 3000 	str.w	r3, [r9]
 8015674:	e765      	b.n	8015542 <_strtod_l+0x44a>
 8015676:	bf00      	nop
 8015678:	08018ead 	.word	0x08018ead
 801567c:	08018f33 	.word	0x08018f33
 8015680:	08018eb5 	.word	0x08018eb5
 8015684:	08018ef4 	.word	0x08018ef4
 8015688:	08018fd8 	.word	0x08018fd8
 801568c:	08018fb0 	.word	0x08018fb0
 8015690:	7ff00000 	.word	0x7ff00000
 8015694:	7ca00000 	.word	0x7ca00000
 8015698:	fff80000 	.word	0xfff80000
 801569c:	7fefffff 	.word	0x7fefffff
 80156a0:	f018 0310 	ands.w	r3, r8, #16
 80156a4:	bf18      	it	ne
 80156a6:	236a      	movne	r3, #106	; 0x6a
 80156a8:	4da0      	ldr	r5, [pc, #640]	; (801592c <_strtod_l+0x834>)
 80156aa:	9304      	str	r3, [sp, #16]
 80156ac:	4650      	mov	r0, sl
 80156ae:	4659      	mov	r1, fp
 80156b0:	2300      	movs	r3, #0
 80156b2:	f1b8 0f00 	cmp.w	r8, #0
 80156b6:	f300 810a 	bgt.w	80158ce <_strtod_l+0x7d6>
 80156ba:	b10b      	cbz	r3, 80156c0 <_strtod_l+0x5c8>
 80156bc:	4682      	mov	sl, r0
 80156be:	468b      	mov	fp, r1
 80156c0:	9b04      	ldr	r3, [sp, #16]
 80156c2:	b1bb      	cbz	r3, 80156f4 <_strtod_l+0x5fc>
 80156c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80156c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	4659      	mov	r1, fp
 80156d0:	dd10      	ble.n	80156f4 <_strtod_l+0x5fc>
 80156d2:	2b1f      	cmp	r3, #31
 80156d4:	f340 8107 	ble.w	80158e6 <_strtod_l+0x7ee>
 80156d8:	2b34      	cmp	r3, #52	; 0x34
 80156da:	bfde      	ittt	le
 80156dc:	3b20      	suble	r3, #32
 80156de:	f04f 32ff 	movle.w	r2, #4294967295
 80156e2:	fa02 f303 	lslle.w	r3, r2, r3
 80156e6:	f04f 0a00 	mov.w	sl, #0
 80156ea:	bfcc      	ite	gt
 80156ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80156f0:	ea03 0b01 	andle.w	fp, r3, r1
 80156f4:	2200      	movs	r2, #0
 80156f6:	2300      	movs	r3, #0
 80156f8:	4650      	mov	r0, sl
 80156fa:	4659      	mov	r1, fp
 80156fc:	f7eb f9fc 	bl	8000af8 <__aeabi_dcmpeq>
 8015700:	2800      	cmp	r0, #0
 8015702:	d1ac      	bne.n	801565e <_strtod_l+0x566>
 8015704:	9b07      	ldr	r3, [sp, #28]
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	9a05      	ldr	r2, [sp, #20]
 801570a:	9908      	ldr	r1, [sp, #32]
 801570c:	4623      	mov	r3, r4
 801570e:	4648      	mov	r0, r9
 8015710:	f001 fdd2 	bl	80172b8 <__s2b>
 8015714:	9007      	str	r0, [sp, #28]
 8015716:	2800      	cmp	r0, #0
 8015718:	f43f af08 	beq.w	801552c <_strtod_l+0x434>
 801571c:	9a06      	ldr	r2, [sp, #24]
 801571e:	9b06      	ldr	r3, [sp, #24]
 8015720:	2a00      	cmp	r2, #0
 8015722:	f1c3 0300 	rsb	r3, r3, #0
 8015726:	bfa8      	it	ge
 8015728:	2300      	movge	r3, #0
 801572a:	930e      	str	r3, [sp, #56]	; 0x38
 801572c:	2400      	movs	r4, #0
 801572e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015732:	9316      	str	r3, [sp, #88]	; 0x58
 8015734:	46a0      	mov	r8, r4
 8015736:	9b07      	ldr	r3, [sp, #28]
 8015738:	4648      	mov	r0, r9
 801573a:	6859      	ldr	r1, [r3, #4]
 801573c:	f001 fd36 	bl	80171ac <_Balloc>
 8015740:	9005      	str	r0, [sp, #20]
 8015742:	2800      	cmp	r0, #0
 8015744:	f43f aef6 	beq.w	8015534 <_strtod_l+0x43c>
 8015748:	9b07      	ldr	r3, [sp, #28]
 801574a:	691a      	ldr	r2, [r3, #16]
 801574c:	3202      	adds	r2, #2
 801574e:	f103 010c 	add.w	r1, r3, #12
 8015752:	0092      	lsls	r2, r2, #2
 8015754:	300c      	adds	r0, #12
 8015756:	f7fe fdd3 	bl	8014300 <memcpy>
 801575a:	aa1e      	add	r2, sp, #120	; 0x78
 801575c:	a91d      	add	r1, sp, #116	; 0x74
 801575e:	ec4b ab10 	vmov	d0, sl, fp
 8015762:	4648      	mov	r0, r9
 8015764:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015768:	f002 f862 	bl	8017830 <__d2b>
 801576c:	901c      	str	r0, [sp, #112]	; 0x70
 801576e:	2800      	cmp	r0, #0
 8015770:	f43f aee0 	beq.w	8015534 <_strtod_l+0x43c>
 8015774:	2101      	movs	r1, #1
 8015776:	4648      	mov	r0, r9
 8015778:	f001 fe2a 	bl	80173d0 <__i2b>
 801577c:	4680      	mov	r8, r0
 801577e:	2800      	cmp	r0, #0
 8015780:	f43f aed8 	beq.w	8015534 <_strtod_l+0x43c>
 8015784:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015786:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015788:	2e00      	cmp	r6, #0
 801578a:	bfab      	itete	ge
 801578c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801578e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015790:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015792:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015794:	bfac      	ite	ge
 8015796:	18f7      	addge	r7, r6, r3
 8015798:	1b9d      	sublt	r5, r3, r6
 801579a:	9b04      	ldr	r3, [sp, #16]
 801579c:	1af6      	subs	r6, r6, r3
 801579e:	4416      	add	r6, r2
 80157a0:	4b63      	ldr	r3, [pc, #396]	; (8015930 <_strtod_l+0x838>)
 80157a2:	3e01      	subs	r6, #1
 80157a4:	429e      	cmp	r6, r3
 80157a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80157aa:	f280 80af 	bge.w	801590c <_strtod_l+0x814>
 80157ae:	1b9b      	subs	r3, r3, r6
 80157b0:	2b1f      	cmp	r3, #31
 80157b2:	eba2 0203 	sub.w	r2, r2, r3
 80157b6:	f04f 0101 	mov.w	r1, #1
 80157ba:	f300 809b 	bgt.w	80158f4 <_strtod_l+0x7fc>
 80157be:	fa01 f303 	lsl.w	r3, r1, r3
 80157c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80157c4:	2300      	movs	r3, #0
 80157c6:	930a      	str	r3, [sp, #40]	; 0x28
 80157c8:	18be      	adds	r6, r7, r2
 80157ca:	9b04      	ldr	r3, [sp, #16]
 80157cc:	42b7      	cmp	r7, r6
 80157ce:	4415      	add	r5, r2
 80157d0:	441d      	add	r5, r3
 80157d2:	463b      	mov	r3, r7
 80157d4:	bfa8      	it	ge
 80157d6:	4633      	movge	r3, r6
 80157d8:	42ab      	cmp	r3, r5
 80157da:	bfa8      	it	ge
 80157dc:	462b      	movge	r3, r5
 80157de:	2b00      	cmp	r3, #0
 80157e0:	bfc2      	ittt	gt
 80157e2:	1af6      	subgt	r6, r6, r3
 80157e4:	1aed      	subgt	r5, r5, r3
 80157e6:	1aff      	subgt	r7, r7, r3
 80157e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157ea:	b1bb      	cbz	r3, 801581c <_strtod_l+0x724>
 80157ec:	4641      	mov	r1, r8
 80157ee:	461a      	mov	r2, r3
 80157f0:	4648      	mov	r0, r9
 80157f2:	f001 fe8d 	bl	8017510 <__pow5mult>
 80157f6:	4680      	mov	r8, r0
 80157f8:	2800      	cmp	r0, #0
 80157fa:	f43f ae9b 	beq.w	8015534 <_strtod_l+0x43c>
 80157fe:	4601      	mov	r1, r0
 8015800:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015802:	4648      	mov	r0, r9
 8015804:	f001 fded 	bl	80173e2 <__multiply>
 8015808:	900c      	str	r0, [sp, #48]	; 0x30
 801580a:	2800      	cmp	r0, #0
 801580c:	f43f ae92 	beq.w	8015534 <_strtod_l+0x43c>
 8015810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015812:	4648      	mov	r0, r9
 8015814:	f001 fcfe 	bl	8017214 <_Bfree>
 8015818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801581a:	931c      	str	r3, [sp, #112]	; 0x70
 801581c:	2e00      	cmp	r6, #0
 801581e:	dc7a      	bgt.n	8015916 <_strtod_l+0x81e>
 8015820:	9b06      	ldr	r3, [sp, #24]
 8015822:	2b00      	cmp	r3, #0
 8015824:	dd08      	ble.n	8015838 <_strtod_l+0x740>
 8015826:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015828:	9905      	ldr	r1, [sp, #20]
 801582a:	4648      	mov	r0, r9
 801582c:	f001 fe70 	bl	8017510 <__pow5mult>
 8015830:	9005      	str	r0, [sp, #20]
 8015832:	2800      	cmp	r0, #0
 8015834:	f43f ae7e 	beq.w	8015534 <_strtod_l+0x43c>
 8015838:	2d00      	cmp	r5, #0
 801583a:	dd08      	ble.n	801584e <_strtod_l+0x756>
 801583c:	462a      	mov	r2, r5
 801583e:	9905      	ldr	r1, [sp, #20]
 8015840:	4648      	mov	r0, r9
 8015842:	f001 feb3 	bl	80175ac <__lshift>
 8015846:	9005      	str	r0, [sp, #20]
 8015848:	2800      	cmp	r0, #0
 801584a:	f43f ae73 	beq.w	8015534 <_strtod_l+0x43c>
 801584e:	2f00      	cmp	r7, #0
 8015850:	dd08      	ble.n	8015864 <_strtod_l+0x76c>
 8015852:	4641      	mov	r1, r8
 8015854:	463a      	mov	r2, r7
 8015856:	4648      	mov	r0, r9
 8015858:	f001 fea8 	bl	80175ac <__lshift>
 801585c:	4680      	mov	r8, r0
 801585e:	2800      	cmp	r0, #0
 8015860:	f43f ae68 	beq.w	8015534 <_strtod_l+0x43c>
 8015864:	9a05      	ldr	r2, [sp, #20]
 8015866:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015868:	4648      	mov	r0, r9
 801586a:	f001 ff0d 	bl	8017688 <__mdiff>
 801586e:	4604      	mov	r4, r0
 8015870:	2800      	cmp	r0, #0
 8015872:	f43f ae5f 	beq.w	8015534 <_strtod_l+0x43c>
 8015876:	68c3      	ldr	r3, [r0, #12]
 8015878:	930c      	str	r3, [sp, #48]	; 0x30
 801587a:	2300      	movs	r3, #0
 801587c:	60c3      	str	r3, [r0, #12]
 801587e:	4641      	mov	r1, r8
 8015880:	f001 fee8 	bl	8017654 <__mcmp>
 8015884:	2800      	cmp	r0, #0
 8015886:	da55      	bge.n	8015934 <_strtod_l+0x83c>
 8015888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801588a:	b9e3      	cbnz	r3, 80158c6 <_strtod_l+0x7ce>
 801588c:	f1ba 0f00 	cmp.w	sl, #0
 8015890:	d119      	bne.n	80158c6 <_strtod_l+0x7ce>
 8015892:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015896:	b9b3      	cbnz	r3, 80158c6 <_strtod_l+0x7ce>
 8015898:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801589c:	0d1b      	lsrs	r3, r3, #20
 801589e:	051b      	lsls	r3, r3, #20
 80158a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80158a4:	d90f      	bls.n	80158c6 <_strtod_l+0x7ce>
 80158a6:	6963      	ldr	r3, [r4, #20]
 80158a8:	b913      	cbnz	r3, 80158b0 <_strtod_l+0x7b8>
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	2b01      	cmp	r3, #1
 80158ae:	dd0a      	ble.n	80158c6 <_strtod_l+0x7ce>
 80158b0:	4621      	mov	r1, r4
 80158b2:	2201      	movs	r2, #1
 80158b4:	4648      	mov	r0, r9
 80158b6:	f001 fe79 	bl	80175ac <__lshift>
 80158ba:	4641      	mov	r1, r8
 80158bc:	4604      	mov	r4, r0
 80158be:	f001 fec9 	bl	8017654 <__mcmp>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	dc67      	bgt.n	8015996 <_strtod_l+0x89e>
 80158c6:	9b04      	ldr	r3, [sp, #16]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d171      	bne.n	80159b0 <_strtod_l+0x8b8>
 80158cc:	e63d      	b.n	801554a <_strtod_l+0x452>
 80158ce:	f018 0f01 	tst.w	r8, #1
 80158d2:	d004      	beq.n	80158de <_strtod_l+0x7e6>
 80158d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158d8:	f7ea fea6 	bl	8000628 <__aeabi_dmul>
 80158dc:	2301      	movs	r3, #1
 80158de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80158e2:	3508      	adds	r5, #8
 80158e4:	e6e5      	b.n	80156b2 <_strtod_l+0x5ba>
 80158e6:	f04f 32ff 	mov.w	r2, #4294967295
 80158ea:	fa02 f303 	lsl.w	r3, r2, r3
 80158ee:	ea03 0a0a 	and.w	sl, r3, sl
 80158f2:	e6ff      	b.n	80156f4 <_strtod_l+0x5fc>
 80158f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80158f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80158fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015900:	36e2      	adds	r6, #226	; 0xe2
 8015902:	fa01 f306 	lsl.w	r3, r1, r6
 8015906:	930a      	str	r3, [sp, #40]	; 0x28
 8015908:	910f      	str	r1, [sp, #60]	; 0x3c
 801590a:	e75d      	b.n	80157c8 <_strtod_l+0x6d0>
 801590c:	2300      	movs	r3, #0
 801590e:	930a      	str	r3, [sp, #40]	; 0x28
 8015910:	2301      	movs	r3, #1
 8015912:	930f      	str	r3, [sp, #60]	; 0x3c
 8015914:	e758      	b.n	80157c8 <_strtod_l+0x6d0>
 8015916:	4632      	mov	r2, r6
 8015918:	991c      	ldr	r1, [sp, #112]	; 0x70
 801591a:	4648      	mov	r0, r9
 801591c:	f001 fe46 	bl	80175ac <__lshift>
 8015920:	901c      	str	r0, [sp, #112]	; 0x70
 8015922:	2800      	cmp	r0, #0
 8015924:	f47f af7c 	bne.w	8015820 <_strtod_l+0x728>
 8015928:	e604      	b.n	8015534 <_strtod_l+0x43c>
 801592a:	bf00      	nop
 801592c:	08018f08 	.word	0x08018f08
 8015930:	fffffc02 	.word	0xfffffc02
 8015934:	465d      	mov	r5, fp
 8015936:	f040 8086 	bne.w	8015a46 <_strtod_l+0x94e>
 801593a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801593c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015940:	b32a      	cbz	r2, 801598e <_strtod_l+0x896>
 8015942:	4aaf      	ldr	r2, [pc, #700]	; (8015c00 <_strtod_l+0xb08>)
 8015944:	4293      	cmp	r3, r2
 8015946:	d153      	bne.n	80159f0 <_strtod_l+0x8f8>
 8015948:	9b04      	ldr	r3, [sp, #16]
 801594a:	4650      	mov	r0, sl
 801594c:	b1d3      	cbz	r3, 8015984 <_strtod_l+0x88c>
 801594e:	4aad      	ldr	r2, [pc, #692]	; (8015c04 <_strtod_l+0xb0c>)
 8015950:	402a      	ands	r2, r5
 8015952:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015956:	f04f 31ff 	mov.w	r1, #4294967295
 801595a:	d816      	bhi.n	801598a <_strtod_l+0x892>
 801595c:	0d12      	lsrs	r2, r2, #20
 801595e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015962:	fa01 f303 	lsl.w	r3, r1, r3
 8015966:	4298      	cmp	r0, r3
 8015968:	d142      	bne.n	80159f0 <_strtod_l+0x8f8>
 801596a:	4ba7      	ldr	r3, [pc, #668]	; (8015c08 <_strtod_l+0xb10>)
 801596c:	429d      	cmp	r5, r3
 801596e:	d102      	bne.n	8015976 <_strtod_l+0x87e>
 8015970:	3001      	adds	r0, #1
 8015972:	f43f addf 	beq.w	8015534 <_strtod_l+0x43c>
 8015976:	4ba3      	ldr	r3, [pc, #652]	; (8015c04 <_strtod_l+0xb0c>)
 8015978:	402b      	ands	r3, r5
 801597a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801597e:	f04f 0a00 	mov.w	sl, #0
 8015982:	e7a0      	b.n	80158c6 <_strtod_l+0x7ce>
 8015984:	f04f 33ff 	mov.w	r3, #4294967295
 8015988:	e7ed      	b.n	8015966 <_strtod_l+0x86e>
 801598a:	460b      	mov	r3, r1
 801598c:	e7eb      	b.n	8015966 <_strtod_l+0x86e>
 801598e:	bb7b      	cbnz	r3, 80159f0 <_strtod_l+0x8f8>
 8015990:	f1ba 0f00 	cmp.w	sl, #0
 8015994:	d12c      	bne.n	80159f0 <_strtod_l+0x8f8>
 8015996:	9904      	ldr	r1, [sp, #16]
 8015998:	4a9a      	ldr	r2, [pc, #616]	; (8015c04 <_strtod_l+0xb0c>)
 801599a:	465b      	mov	r3, fp
 801599c:	b1f1      	cbz	r1, 80159dc <_strtod_l+0x8e4>
 801599e:	ea02 010b 	and.w	r1, r2, fp
 80159a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80159a6:	dc19      	bgt.n	80159dc <_strtod_l+0x8e4>
 80159a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80159ac:	f77f ae5b 	ble.w	8015666 <_strtod_l+0x56e>
 80159b0:	4a96      	ldr	r2, [pc, #600]	; (8015c0c <_strtod_l+0xb14>)
 80159b2:	2300      	movs	r3, #0
 80159b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80159b8:	4650      	mov	r0, sl
 80159ba:	4659      	mov	r1, fp
 80159bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80159c0:	f7ea fe32 	bl	8000628 <__aeabi_dmul>
 80159c4:	4682      	mov	sl, r0
 80159c6:	468b      	mov	fp, r1
 80159c8:	2900      	cmp	r1, #0
 80159ca:	f47f adbe 	bne.w	801554a <_strtod_l+0x452>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	f47f adbb 	bne.w	801554a <_strtod_l+0x452>
 80159d4:	2322      	movs	r3, #34	; 0x22
 80159d6:	f8c9 3000 	str.w	r3, [r9]
 80159da:	e5b6      	b.n	801554a <_strtod_l+0x452>
 80159dc:	4013      	ands	r3, r2
 80159de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80159e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80159e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80159ea:	f04f 3aff 	mov.w	sl, #4294967295
 80159ee:	e76a      	b.n	80158c6 <_strtod_l+0x7ce>
 80159f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159f2:	b193      	cbz	r3, 8015a1a <_strtod_l+0x922>
 80159f4:	422b      	tst	r3, r5
 80159f6:	f43f af66 	beq.w	80158c6 <_strtod_l+0x7ce>
 80159fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159fc:	9a04      	ldr	r2, [sp, #16]
 80159fe:	4650      	mov	r0, sl
 8015a00:	4659      	mov	r1, fp
 8015a02:	b173      	cbz	r3, 8015a22 <_strtod_l+0x92a>
 8015a04:	f7ff fb5c 	bl	80150c0 <sulp>
 8015a08:	4602      	mov	r2, r0
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a10:	f7ea fc54 	bl	80002bc <__adddf3>
 8015a14:	4682      	mov	sl, r0
 8015a16:	468b      	mov	fp, r1
 8015a18:	e755      	b.n	80158c6 <_strtod_l+0x7ce>
 8015a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a1c:	ea13 0f0a 	tst.w	r3, sl
 8015a20:	e7e9      	b.n	80159f6 <_strtod_l+0x8fe>
 8015a22:	f7ff fb4d 	bl	80150c0 <sulp>
 8015a26:	4602      	mov	r2, r0
 8015a28:	460b      	mov	r3, r1
 8015a2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a2e:	f7ea fc43 	bl	80002b8 <__aeabi_dsub>
 8015a32:	2200      	movs	r2, #0
 8015a34:	2300      	movs	r3, #0
 8015a36:	4682      	mov	sl, r0
 8015a38:	468b      	mov	fp, r1
 8015a3a:	f7eb f85d 	bl	8000af8 <__aeabi_dcmpeq>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	f47f ae11 	bne.w	8015666 <_strtod_l+0x56e>
 8015a44:	e73f      	b.n	80158c6 <_strtod_l+0x7ce>
 8015a46:	4641      	mov	r1, r8
 8015a48:	4620      	mov	r0, r4
 8015a4a:	f001 ff40 	bl	80178ce <__ratio>
 8015a4e:	ec57 6b10 	vmov	r6, r7, d0
 8015a52:	2200      	movs	r2, #0
 8015a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015a58:	ee10 0a10 	vmov	r0, s0
 8015a5c:	4639      	mov	r1, r7
 8015a5e:	f7eb f85f 	bl	8000b20 <__aeabi_dcmple>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d077      	beq.n	8015b56 <_strtod_l+0xa5e>
 8015a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d04a      	beq.n	8015b02 <_strtod_l+0xa0a>
 8015a6c:	4b68      	ldr	r3, [pc, #416]	; (8015c10 <_strtod_l+0xb18>)
 8015a6e:	2200      	movs	r2, #0
 8015a70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015a74:	4f66      	ldr	r7, [pc, #408]	; (8015c10 <_strtod_l+0xb18>)
 8015a76:	2600      	movs	r6, #0
 8015a78:	4b62      	ldr	r3, [pc, #392]	; (8015c04 <_strtod_l+0xb0c>)
 8015a7a:	402b      	ands	r3, r5
 8015a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a80:	4b64      	ldr	r3, [pc, #400]	; (8015c14 <_strtod_l+0xb1c>)
 8015a82:	429a      	cmp	r2, r3
 8015a84:	f040 80ce 	bne.w	8015c24 <_strtod_l+0xb2c>
 8015a88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015a8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015a90:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015a94:	ec4b ab10 	vmov	d0, sl, fp
 8015a98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015a9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015aa0:	f001 fe50 	bl	8017744 <__ulp>
 8015aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015aa8:	ec53 2b10 	vmov	r2, r3, d0
 8015aac:	f7ea fdbc 	bl	8000628 <__aeabi_dmul>
 8015ab0:	4652      	mov	r2, sl
 8015ab2:	465b      	mov	r3, fp
 8015ab4:	f7ea fc02 	bl	80002bc <__adddf3>
 8015ab8:	460b      	mov	r3, r1
 8015aba:	4952      	ldr	r1, [pc, #328]	; (8015c04 <_strtod_l+0xb0c>)
 8015abc:	4a56      	ldr	r2, [pc, #344]	; (8015c18 <_strtod_l+0xb20>)
 8015abe:	4019      	ands	r1, r3
 8015ac0:	4291      	cmp	r1, r2
 8015ac2:	4682      	mov	sl, r0
 8015ac4:	d95b      	bls.n	8015b7e <_strtod_l+0xa86>
 8015ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ac8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d103      	bne.n	8015ad8 <_strtod_l+0x9e0>
 8015ad0:	9b08      	ldr	r3, [sp, #32]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	f43f ad2e 	beq.w	8015534 <_strtod_l+0x43c>
 8015ad8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015c08 <_strtod_l+0xb10>
 8015adc:	f04f 3aff 	mov.w	sl, #4294967295
 8015ae0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ae2:	4648      	mov	r0, r9
 8015ae4:	f001 fb96 	bl	8017214 <_Bfree>
 8015ae8:	9905      	ldr	r1, [sp, #20]
 8015aea:	4648      	mov	r0, r9
 8015aec:	f001 fb92 	bl	8017214 <_Bfree>
 8015af0:	4641      	mov	r1, r8
 8015af2:	4648      	mov	r0, r9
 8015af4:	f001 fb8e 	bl	8017214 <_Bfree>
 8015af8:	4621      	mov	r1, r4
 8015afa:	4648      	mov	r0, r9
 8015afc:	f001 fb8a 	bl	8017214 <_Bfree>
 8015b00:	e619      	b.n	8015736 <_strtod_l+0x63e>
 8015b02:	f1ba 0f00 	cmp.w	sl, #0
 8015b06:	d11a      	bne.n	8015b3e <_strtod_l+0xa46>
 8015b08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b0c:	b9eb      	cbnz	r3, 8015b4a <_strtod_l+0xa52>
 8015b0e:	2200      	movs	r2, #0
 8015b10:	4b3f      	ldr	r3, [pc, #252]	; (8015c10 <_strtod_l+0xb18>)
 8015b12:	4630      	mov	r0, r6
 8015b14:	4639      	mov	r1, r7
 8015b16:	f7ea fff9 	bl	8000b0c <__aeabi_dcmplt>
 8015b1a:	b9c8      	cbnz	r0, 8015b50 <_strtod_l+0xa58>
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	4639      	mov	r1, r7
 8015b20:	2200      	movs	r2, #0
 8015b22:	4b3e      	ldr	r3, [pc, #248]	; (8015c1c <_strtod_l+0xb24>)
 8015b24:	f7ea fd80 	bl	8000628 <__aeabi_dmul>
 8015b28:	4606      	mov	r6, r0
 8015b2a:	460f      	mov	r7, r1
 8015b2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015b30:	9618      	str	r6, [sp, #96]	; 0x60
 8015b32:	9319      	str	r3, [sp, #100]	; 0x64
 8015b34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015b38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015b3c:	e79c      	b.n	8015a78 <_strtod_l+0x980>
 8015b3e:	f1ba 0f01 	cmp.w	sl, #1
 8015b42:	d102      	bne.n	8015b4a <_strtod_l+0xa52>
 8015b44:	2d00      	cmp	r5, #0
 8015b46:	f43f ad8e 	beq.w	8015666 <_strtod_l+0x56e>
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	4b34      	ldr	r3, [pc, #208]	; (8015c20 <_strtod_l+0xb28>)
 8015b4e:	e78f      	b.n	8015a70 <_strtod_l+0x978>
 8015b50:	2600      	movs	r6, #0
 8015b52:	4f32      	ldr	r7, [pc, #200]	; (8015c1c <_strtod_l+0xb24>)
 8015b54:	e7ea      	b.n	8015b2c <_strtod_l+0xa34>
 8015b56:	4b31      	ldr	r3, [pc, #196]	; (8015c1c <_strtod_l+0xb24>)
 8015b58:	4630      	mov	r0, r6
 8015b5a:	4639      	mov	r1, r7
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	f7ea fd63 	bl	8000628 <__aeabi_dmul>
 8015b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b64:	4606      	mov	r6, r0
 8015b66:	460f      	mov	r7, r1
 8015b68:	b933      	cbnz	r3, 8015b78 <_strtod_l+0xa80>
 8015b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b6e:	9010      	str	r0, [sp, #64]	; 0x40
 8015b70:	9311      	str	r3, [sp, #68]	; 0x44
 8015b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015b76:	e7df      	b.n	8015b38 <_strtod_l+0xa40>
 8015b78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015b7c:	e7f9      	b.n	8015b72 <_strtod_l+0xa7a>
 8015b7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015b82:	9b04      	ldr	r3, [sp, #16]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d1ab      	bne.n	8015ae0 <_strtod_l+0x9e8>
 8015b88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015b8c:	0d1b      	lsrs	r3, r3, #20
 8015b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b90:	051b      	lsls	r3, r3, #20
 8015b92:	429a      	cmp	r2, r3
 8015b94:	465d      	mov	r5, fp
 8015b96:	d1a3      	bne.n	8015ae0 <_strtod_l+0x9e8>
 8015b98:	4639      	mov	r1, r7
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	f7ea fff4 	bl	8000b88 <__aeabi_d2iz>
 8015ba0:	f7ea fcd8 	bl	8000554 <__aeabi_i2d>
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	4639      	mov	r1, r7
 8015baa:	4630      	mov	r0, r6
 8015bac:	f7ea fb84 	bl	80002b8 <__aeabi_dsub>
 8015bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bb2:	4606      	mov	r6, r0
 8015bb4:	460f      	mov	r7, r1
 8015bb6:	b933      	cbnz	r3, 8015bc6 <_strtod_l+0xace>
 8015bb8:	f1ba 0f00 	cmp.w	sl, #0
 8015bbc:	d103      	bne.n	8015bc6 <_strtod_l+0xace>
 8015bbe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015bc2:	2d00      	cmp	r5, #0
 8015bc4:	d06d      	beq.n	8015ca2 <_strtod_l+0xbaa>
 8015bc6:	a30a      	add	r3, pc, #40	; (adr r3, 8015bf0 <_strtod_l+0xaf8>)
 8015bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bcc:	4630      	mov	r0, r6
 8015bce:	4639      	mov	r1, r7
 8015bd0:	f7ea ff9c 	bl	8000b0c <__aeabi_dcmplt>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	f47f acb8 	bne.w	801554a <_strtod_l+0x452>
 8015bda:	a307      	add	r3, pc, #28	; (adr r3, 8015bf8 <_strtod_l+0xb00>)
 8015bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be0:	4630      	mov	r0, r6
 8015be2:	4639      	mov	r1, r7
 8015be4:	f7ea ffb0 	bl	8000b48 <__aeabi_dcmpgt>
 8015be8:	2800      	cmp	r0, #0
 8015bea:	f43f af79 	beq.w	8015ae0 <_strtod_l+0x9e8>
 8015bee:	e4ac      	b.n	801554a <_strtod_l+0x452>
 8015bf0:	94a03595 	.word	0x94a03595
 8015bf4:	3fdfffff 	.word	0x3fdfffff
 8015bf8:	35afe535 	.word	0x35afe535
 8015bfc:	3fe00000 	.word	0x3fe00000
 8015c00:	000fffff 	.word	0x000fffff
 8015c04:	7ff00000 	.word	0x7ff00000
 8015c08:	7fefffff 	.word	0x7fefffff
 8015c0c:	39500000 	.word	0x39500000
 8015c10:	3ff00000 	.word	0x3ff00000
 8015c14:	7fe00000 	.word	0x7fe00000
 8015c18:	7c9fffff 	.word	0x7c9fffff
 8015c1c:	3fe00000 	.word	0x3fe00000
 8015c20:	bff00000 	.word	0xbff00000
 8015c24:	9b04      	ldr	r3, [sp, #16]
 8015c26:	b333      	cbz	r3, 8015c76 <_strtod_l+0xb7e>
 8015c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c2a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015c2e:	d822      	bhi.n	8015c76 <_strtod_l+0xb7e>
 8015c30:	a327      	add	r3, pc, #156	; (adr r3, 8015cd0 <_strtod_l+0xbd8>)
 8015c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c36:	4630      	mov	r0, r6
 8015c38:	4639      	mov	r1, r7
 8015c3a:	f7ea ff71 	bl	8000b20 <__aeabi_dcmple>
 8015c3e:	b1a0      	cbz	r0, 8015c6a <_strtod_l+0xb72>
 8015c40:	4639      	mov	r1, r7
 8015c42:	4630      	mov	r0, r6
 8015c44:	f7ea ffc8 	bl	8000bd8 <__aeabi_d2uiz>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	bf08      	it	eq
 8015c4c:	2001      	moveq	r0, #1
 8015c4e:	f7ea fc71 	bl	8000534 <__aeabi_ui2d>
 8015c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c54:	4606      	mov	r6, r0
 8015c56:	460f      	mov	r7, r1
 8015c58:	bb03      	cbnz	r3, 8015c9c <_strtod_l+0xba4>
 8015c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c5e:	9012      	str	r0, [sp, #72]	; 0x48
 8015c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015c66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c6e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015c72:	1a9b      	subs	r3, r3, r2
 8015c74:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c76:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015c7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015c7e:	f001 fd61 	bl	8017744 <__ulp>
 8015c82:	4650      	mov	r0, sl
 8015c84:	ec53 2b10 	vmov	r2, r3, d0
 8015c88:	4659      	mov	r1, fp
 8015c8a:	f7ea fccd 	bl	8000628 <__aeabi_dmul>
 8015c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c92:	f7ea fb13 	bl	80002bc <__adddf3>
 8015c96:	4682      	mov	sl, r0
 8015c98:	468b      	mov	fp, r1
 8015c9a:	e772      	b.n	8015b82 <_strtod_l+0xa8a>
 8015c9c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015ca0:	e7df      	b.n	8015c62 <_strtod_l+0xb6a>
 8015ca2:	a30d      	add	r3, pc, #52	; (adr r3, 8015cd8 <_strtod_l+0xbe0>)
 8015ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca8:	f7ea ff30 	bl	8000b0c <__aeabi_dcmplt>
 8015cac:	e79c      	b.n	8015be8 <_strtod_l+0xaf0>
 8015cae:	2300      	movs	r3, #0
 8015cb0:	930d      	str	r3, [sp, #52]	; 0x34
 8015cb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cb6:	6013      	str	r3, [r2, #0]
 8015cb8:	f7ff ba61 	b.w	801517e <_strtod_l+0x86>
 8015cbc:	2b65      	cmp	r3, #101	; 0x65
 8015cbe:	f04f 0200 	mov.w	r2, #0
 8015cc2:	f43f ab4e 	beq.w	8015362 <_strtod_l+0x26a>
 8015cc6:	2101      	movs	r1, #1
 8015cc8:	4614      	mov	r4, r2
 8015cca:	9104      	str	r1, [sp, #16]
 8015ccc:	f7ff bacb 	b.w	8015266 <_strtod_l+0x16e>
 8015cd0:	ffc00000 	.word	0xffc00000
 8015cd4:	41dfffff 	.word	0x41dfffff
 8015cd8:	94a03595 	.word	0x94a03595
 8015cdc:	3fcfffff 	.word	0x3fcfffff

08015ce0 <_strtod_r>:
 8015ce0:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <_strtod_r+0x18>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	b410      	push	{r4}
 8015ce6:	6a1b      	ldr	r3, [r3, #32]
 8015ce8:	4c04      	ldr	r4, [pc, #16]	; (8015cfc <_strtod_r+0x1c>)
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	bf08      	it	eq
 8015cee:	4623      	moveq	r3, r4
 8015cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cf4:	f7ff ba00 	b.w	80150f8 <_strtod_l>
 8015cf8:	2000000c 	.word	0x2000000c
 8015cfc:	20000070 	.word	0x20000070

08015d00 <_strtol_l.isra.0>:
 8015d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d04:	4680      	mov	r8, r0
 8015d06:	4689      	mov	r9, r1
 8015d08:	4692      	mov	sl, r2
 8015d0a:	461e      	mov	r6, r3
 8015d0c:	460f      	mov	r7, r1
 8015d0e:	463d      	mov	r5, r7
 8015d10:	9808      	ldr	r0, [sp, #32]
 8015d12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d16:	f001 fa0d 	bl	8017134 <__locale_ctype_ptr_l>
 8015d1a:	4420      	add	r0, r4
 8015d1c:	7843      	ldrb	r3, [r0, #1]
 8015d1e:	f013 0308 	ands.w	r3, r3, #8
 8015d22:	d132      	bne.n	8015d8a <_strtol_l.isra.0+0x8a>
 8015d24:	2c2d      	cmp	r4, #45	; 0x2d
 8015d26:	d132      	bne.n	8015d8e <_strtol_l.isra.0+0x8e>
 8015d28:	787c      	ldrb	r4, [r7, #1]
 8015d2a:	1cbd      	adds	r5, r7, #2
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	2e00      	cmp	r6, #0
 8015d30:	d05d      	beq.n	8015dee <_strtol_l.isra.0+0xee>
 8015d32:	2e10      	cmp	r6, #16
 8015d34:	d109      	bne.n	8015d4a <_strtol_l.isra.0+0x4a>
 8015d36:	2c30      	cmp	r4, #48	; 0x30
 8015d38:	d107      	bne.n	8015d4a <_strtol_l.isra.0+0x4a>
 8015d3a:	782b      	ldrb	r3, [r5, #0]
 8015d3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015d40:	2b58      	cmp	r3, #88	; 0x58
 8015d42:	d14f      	bne.n	8015de4 <_strtol_l.isra.0+0xe4>
 8015d44:	786c      	ldrb	r4, [r5, #1]
 8015d46:	2610      	movs	r6, #16
 8015d48:	3502      	adds	r5, #2
 8015d4a:	2a00      	cmp	r2, #0
 8015d4c:	bf14      	ite	ne
 8015d4e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015d52:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015d56:	2700      	movs	r7, #0
 8015d58:	fbb1 fcf6 	udiv	ip, r1, r6
 8015d5c:	4638      	mov	r0, r7
 8015d5e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015d62:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015d66:	2b09      	cmp	r3, #9
 8015d68:	d817      	bhi.n	8015d9a <_strtol_l.isra.0+0x9a>
 8015d6a:	461c      	mov	r4, r3
 8015d6c:	42a6      	cmp	r6, r4
 8015d6e:	dd23      	ble.n	8015db8 <_strtol_l.isra.0+0xb8>
 8015d70:	1c7b      	adds	r3, r7, #1
 8015d72:	d007      	beq.n	8015d84 <_strtol_l.isra.0+0x84>
 8015d74:	4584      	cmp	ip, r0
 8015d76:	d31c      	bcc.n	8015db2 <_strtol_l.isra.0+0xb2>
 8015d78:	d101      	bne.n	8015d7e <_strtol_l.isra.0+0x7e>
 8015d7a:	45a6      	cmp	lr, r4
 8015d7c:	db19      	blt.n	8015db2 <_strtol_l.isra.0+0xb2>
 8015d7e:	fb00 4006 	mla	r0, r0, r6, r4
 8015d82:	2701      	movs	r7, #1
 8015d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d88:	e7eb      	b.n	8015d62 <_strtol_l.isra.0+0x62>
 8015d8a:	462f      	mov	r7, r5
 8015d8c:	e7bf      	b.n	8015d0e <_strtol_l.isra.0+0xe>
 8015d8e:	2c2b      	cmp	r4, #43	; 0x2b
 8015d90:	bf04      	itt	eq
 8015d92:	1cbd      	addeq	r5, r7, #2
 8015d94:	787c      	ldrbeq	r4, [r7, #1]
 8015d96:	461a      	mov	r2, r3
 8015d98:	e7c9      	b.n	8015d2e <_strtol_l.isra.0+0x2e>
 8015d9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015d9e:	2b19      	cmp	r3, #25
 8015da0:	d801      	bhi.n	8015da6 <_strtol_l.isra.0+0xa6>
 8015da2:	3c37      	subs	r4, #55	; 0x37
 8015da4:	e7e2      	b.n	8015d6c <_strtol_l.isra.0+0x6c>
 8015da6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015daa:	2b19      	cmp	r3, #25
 8015dac:	d804      	bhi.n	8015db8 <_strtol_l.isra.0+0xb8>
 8015dae:	3c57      	subs	r4, #87	; 0x57
 8015db0:	e7dc      	b.n	8015d6c <_strtol_l.isra.0+0x6c>
 8015db2:	f04f 37ff 	mov.w	r7, #4294967295
 8015db6:	e7e5      	b.n	8015d84 <_strtol_l.isra.0+0x84>
 8015db8:	1c7b      	adds	r3, r7, #1
 8015dba:	d108      	bne.n	8015dce <_strtol_l.isra.0+0xce>
 8015dbc:	2322      	movs	r3, #34	; 0x22
 8015dbe:	f8c8 3000 	str.w	r3, [r8]
 8015dc2:	4608      	mov	r0, r1
 8015dc4:	f1ba 0f00 	cmp.w	sl, #0
 8015dc8:	d107      	bne.n	8015dda <_strtol_l.isra.0+0xda>
 8015dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dce:	b102      	cbz	r2, 8015dd2 <_strtol_l.isra.0+0xd2>
 8015dd0:	4240      	negs	r0, r0
 8015dd2:	f1ba 0f00 	cmp.w	sl, #0
 8015dd6:	d0f8      	beq.n	8015dca <_strtol_l.isra.0+0xca>
 8015dd8:	b10f      	cbz	r7, 8015dde <_strtol_l.isra.0+0xde>
 8015dda:	f105 39ff 	add.w	r9, r5, #4294967295
 8015dde:	f8ca 9000 	str.w	r9, [sl]
 8015de2:	e7f2      	b.n	8015dca <_strtol_l.isra.0+0xca>
 8015de4:	2430      	movs	r4, #48	; 0x30
 8015de6:	2e00      	cmp	r6, #0
 8015de8:	d1af      	bne.n	8015d4a <_strtol_l.isra.0+0x4a>
 8015dea:	2608      	movs	r6, #8
 8015dec:	e7ad      	b.n	8015d4a <_strtol_l.isra.0+0x4a>
 8015dee:	2c30      	cmp	r4, #48	; 0x30
 8015df0:	d0a3      	beq.n	8015d3a <_strtol_l.isra.0+0x3a>
 8015df2:	260a      	movs	r6, #10
 8015df4:	e7a9      	b.n	8015d4a <_strtol_l.isra.0+0x4a>
	...

08015df8 <_strtol_r>:
 8015df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015dfa:	4c06      	ldr	r4, [pc, #24]	; (8015e14 <_strtol_r+0x1c>)
 8015dfc:	4d06      	ldr	r5, [pc, #24]	; (8015e18 <_strtol_r+0x20>)
 8015dfe:	6824      	ldr	r4, [r4, #0]
 8015e00:	6a24      	ldr	r4, [r4, #32]
 8015e02:	2c00      	cmp	r4, #0
 8015e04:	bf08      	it	eq
 8015e06:	462c      	moveq	r4, r5
 8015e08:	9400      	str	r4, [sp, #0]
 8015e0a:	f7ff ff79 	bl	8015d00 <_strtol_l.isra.0>
 8015e0e:	b003      	add	sp, #12
 8015e10:	bd30      	pop	{r4, r5, pc}
 8015e12:	bf00      	nop
 8015e14:	2000000c 	.word	0x2000000c
 8015e18:	20000070 	.word	0x20000070

08015e1c <_vsiprintf_r>:
 8015e1c:	b500      	push	{lr}
 8015e1e:	b09b      	sub	sp, #108	; 0x6c
 8015e20:	9100      	str	r1, [sp, #0]
 8015e22:	9104      	str	r1, [sp, #16]
 8015e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e28:	9105      	str	r1, [sp, #20]
 8015e2a:	9102      	str	r1, [sp, #8]
 8015e2c:	4905      	ldr	r1, [pc, #20]	; (8015e44 <_vsiprintf_r+0x28>)
 8015e2e:	9103      	str	r1, [sp, #12]
 8015e30:	4669      	mov	r1, sp
 8015e32:	f001 fecb 	bl	8017bcc <_svfiprintf_r>
 8015e36:	9b00      	ldr	r3, [sp, #0]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	701a      	strb	r2, [r3, #0]
 8015e3c:	b01b      	add	sp, #108	; 0x6c
 8015e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e42:	bf00      	nop
 8015e44:	ffff0208 	.word	0xffff0208

08015e48 <vsiprintf>:
 8015e48:	4613      	mov	r3, r2
 8015e4a:	460a      	mov	r2, r1
 8015e4c:	4601      	mov	r1, r0
 8015e4e:	4802      	ldr	r0, [pc, #8]	; (8015e58 <vsiprintf+0x10>)
 8015e50:	6800      	ldr	r0, [r0, #0]
 8015e52:	f7ff bfe3 	b.w	8015e1c <_vsiprintf_r>
 8015e56:	bf00      	nop
 8015e58:	2000000c 	.word	0x2000000c

08015e5c <quorem>:
 8015e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e60:	6903      	ldr	r3, [r0, #16]
 8015e62:	690c      	ldr	r4, [r1, #16]
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	4680      	mov	r8, r0
 8015e68:	f2c0 8082 	blt.w	8015f70 <quorem+0x114>
 8015e6c:	3c01      	subs	r4, #1
 8015e6e:	f101 0714 	add.w	r7, r1, #20
 8015e72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015e76:	f100 0614 	add.w	r6, r0, #20
 8015e7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015e7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015e82:	eb06 030c 	add.w	r3, r6, ip
 8015e86:	3501      	adds	r5, #1
 8015e88:	eb07 090c 	add.w	r9, r7, ip
 8015e8c:	9301      	str	r3, [sp, #4]
 8015e8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015e92:	b395      	cbz	r5, 8015efa <quorem+0x9e>
 8015e94:	f04f 0a00 	mov.w	sl, #0
 8015e98:	4638      	mov	r0, r7
 8015e9a:	46b6      	mov	lr, r6
 8015e9c:	46d3      	mov	fp, sl
 8015e9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015ea2:	b293      	uxth	r3, r2
 8015ea4:	fb05 a303 	mla	r3, r5, r3, sl
 8015ea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	ebab 0303 	sub.w	r3, fp, r3
 8015eb2:	0c12      	lsrs	r2, r2, #16
 8015eb4:	f8de b000 	ldr.w	fp, [lr]
 8015eb8:	fb05 a202 	mla	r2, r5, r2, sl
 8015ebc:	fa13 f38b 	uxtah	r3, r3, fp
 8015ec0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015ec4:	fa1f fb82 	uxth.w	fp, r2
 8015ec8:	f8de 2000 	ldr.w	r2, [lr]
 8015ecc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015eda:	4581      	cmp	r9, r0
 8015edc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015ee0:	f84e 3b04 	str.w	r3, [lr], #4
 8015ee4:	d2db      	bcs.n	8015e9e <quorem+0x42>
 8015ee6:	f856 300c 	ldr.w	r3, [r6, ip]
 8015eea:	b933      	cbnz	r3, 8015efa <quorem+0x9e>
 8015eec:	9b01      	ldr	r3, [sp, #4]
 8015eee:	3b04      	subs	r3, #4
 8015ef0:	429e      	cmp	r6, r3
 8015ef2:	461a      	mov	r2, r3
 8015ef4:	d330      	bcc.n	8015f58 <quorem+0xfc>
 8015ef6:	f8c8 4010 	str.w	r4, [r8, #16]
 8015efa:	4640      	mov	r0, r8
 8015efc:	f001 fbaa 	bl	8017654 <__mcmp>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	db25      	blt.n	8015f50 <quorem+0xf4>
 8015f04:	3501      	adds	r5, #1
 8015f06:	4630      	mov	r0, r6
 8015f08:	f04f 0c00 	mov.w	ip, #0
 8015f0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015f10:	f8d0 e000 	ldr.w	lr, [r0]
 8015f14:	b293      	uxth	r3, r2
 8015f16:	ebac 0303 	sub.w	r3, ip, r3
 8015f1a:	0c12      	lsrs	r2, r2, #16
 8015f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8015f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f2e:	45b9      	cmp	r9, r7
 8015f30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015f34:	f840 3b04 	str.w	r3, [r0], #4
 8015f38:	d2e8      	bcs.n	8015f0c <quorem+0xb0>
 8015f3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015f3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015f42:	b92a      	cbnz	r2, 8015f50 <quorem+0xf4>
 8015f44:	3b04      	subs	r3, #4
 8015f46:	429e      	cmp	r6, r3
 8015f48:	461a      	mov	r2, r3
 8015f4a:	d30b      	bcc.n	8015f64 <quorem+0x108>
 8015f4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015f50:	4628      	mov	r0, r5
 8015f52:	b003      	add	sp, #12
 8015f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f58:	6812      	ldr	r2, [r2, #0]
 8015f5a:	3b04      	subs	r3, #4
 8015f5c:	2a00      	cmp	r2, #0
 8015f5e:	d1ca      	bne.n	8015ef6 <quorem+0x9a>
 8015f60:	3c01      	subs	r4, #1
 8015f62:	e7c5      	b.n	8015ef0 <quorem+0x94>
 8015f64:	6812      	ldr	r2, [r2, #0]
 8015f66:	3b04      	subs	r3, #4
 8015f68:	2a00      	cmp	r2, #0
 8015f6a:	d1ef      	bne.n	8015f4c <quorem+0xf0>
 8015f6c:	3c01      	subs	r4, #1
 8015f6e:	e7ea      	b.n	8015f46 <quorem+0xea>
 8015f70:	2000      	movs	r0, #0
 8015f72:	e7ee      	b.n	8015f52 <quorem+0xf6>
 8015f74:	0000      	movs	r0, r0
	...

08015f78 <_dtoa_r>:
 8015f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f7c:	ec57 6b10 	vmov	r6, r7, d0
 8015f80:	b097      	sub	sp, #92	; 0x5c
 8015f82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015f84:	9106      	str	r1, [sp, #24]
 8015f86:	4604      	mov	r4, r0
 8015f88:	920b      	str	r2, [sp, #44]	; 0x2c
 8015f8a:	9312      	str	r3, [sp, #72]	; 0x48
 8015f8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015f90:	e9cd 6700 	strd	r6, r7, [sp]
 8015f94:	b93d      	cbnz	r5, 8015fa6 <_dtoa_r+0x2e>
 8015f96:	2010      	movs	r0, #16
 8015f98:	f001 f8ee 	bl	8017178 <malloc>
 8015f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8015f9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015fa2:	6005      	str	r5, [r0, #0]
 8015fa4:	60c5      	str	r5, [r0, #12]
 8015fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fa8:	6819      	ldr	r1, [r3, #0]
 8015faa:	b151      	cbz	r1, 8015fc2 <_dtoa_r+0x4a>
 8015fac:	685a      	ldr	r2, [r3, #4]
 8015fae:	604a      	str	r2, [r1, #4]
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	4093      	lsls	r3, r2
 8015fb4:	608b      	str	r3, [r1, #8]
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f001 f92c 	bl	8017214 <_Bfree>
 8015fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	601a      	str	r2, [r3, #0]
 8015fc2:	1e3b      	subs	r3, r7, #0
 8015fc4:	bfbb      	ittet	lt
 8015fc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015fca:	9301      	strlt	r3, [sp, #4]
 8015fcc:	2300      	movge	r3, #0
 8015fce:	2201      	movlt	r2, #1
 8015fd0:	bfac      	ite	ge
 8015fd2:	f8c8 3000 	strge.w	r3, [r8]
 8015fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8015fda:	4baf      	ldr	r3, [pc, #700]	; (8016298 <_dtoa_r+0x320>)
 8015fdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015fe0:	ea33 0308 	bics.w	r3, r3, r8
 8015fe4:	d114      	bne.n	8016010 <_dtoa_r+0x98>
 8015fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8015fec:	6013      	str	r3, [r2, #0]
 8015fee:	9b00      	ldr	r3, [sp, #0]
 8015ff0:	b923      	cbnz	r3, 8015ffc <_dtoa_r+0x84>
 8015ff2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f000 8542 	beq.w	8016a80 <_dtoa_r+0xb08>
 8015ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ffe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80162ac <_dtoa_r+0x334>
 8016002:	2b00      	cmp	r3, #0
 8016004:	f000 8544 	beq.w	8016a90 <_dtoa_r+0xb18>
 8016008:	f10b 0303 	add.w	r3, fp, #3
 801600c:	f000 bd3e 	b.w	8016a8c <_dtoa_r+0xb14>
 8016010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016014:	2200      	movs	r2, #0
 8016016:	2300      	movs	r3, #0
 8016018:	4630      	mov	r0, r6
 801601a:	4639      	mov	r1, r7
 801601c:	f7ea fd6c 	bl	8000af8 <__aeabi_dcmpeq>
 8016020:	4681      	mov	r9, r0
 8016022:	b168      	cbz	r0, 8016040 <_dtoa_r+0xc8>
 8016024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016026:	2301      	movs	r3, #1
 8016028:	6013      	str	r3, [r2, #0]
 801602a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801602c:	2b00      	cmp	r3, #0
 801602e:	f000 8524 	beq.w	8016a7a <_dtoa_r+0xb02>
 8016032:	4b9a      	ldr	r3, [pc, #616]	; (801629c <_dtoa_r+0x324>)
 8016034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016036:	f103 3bff 	add.w	fp, r3, #4294967295
 801603a:	6013      	str	r3, [r2, #0]
 801603c:	f000 bd28 	b.w	8016a90 <_dtoa_r+0xb18>
 8016040:	aa14      	add	r2, sp, #80	; 0x50
 8016042:	a915      	add	r1, sp, #84	; 0x54
 8016044:	ec47 6b10 	vmov	d0, r6, r7
 8016048:	4620      	mov	r0, r4
 801604a:	f001 fbf1 	bl	8017830 <__d2b>
 801604e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016052:	9004      	str	r0, [sp, #16]
 8016054:	2d00      	cmp	r5, #0
 8016056:	d07c      	beq.n	8016152 <_dtoa_r+0x1da>
 8016058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801605c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016060:	46b2      	mov	sl, r6
 8016062:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801606a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801606e:	2200      	movs	r2, #0
 8016070:	4b8b      	ldr	r3, [pc, #556]	; (80162a0 <_dtoa_r+0x328>)
 8016072:	4650      	mov	r0, sl
 8016074:	4659      	mov	r1, fp
 8016076:	f7ea f91f 	bl	80002b8 <__aeabi_dsub>
 801607a:	a381      	add	r3, pc, #516	; (adr r3, 8016280 <_dtoa_r+0x308>)
 801607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016080:	f7ea fad2 	bl	8000628 <__aeabi_dmul>
 8016084:	a380      	add	r3, pc, #512	; (adr r3, 8016288 <_dtoa_r+0x310>)
 8016086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608a:	f7ea f917 	bl	80002bc <__adddf3>
 801608e:	4606      	mov	r6, r0
 8016090:	4628      	mov	r0, r5
 8016092:	460f      	mov	r7, r1
 8016094:	f7ea fa5e 	bl	8000554 <__aeabi_i2d>
 8016098:	a37d      	add	r3, pc, #500	; (adr r3, 8016290 <_dtoa_r+0x318>)
 801609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609e:	f7ea fac3 	bl	8000628 <__aeabi_dmul>
 80160a2:	4602      	mov	r2, r0
 80160a4:	460b      	mov	r3, r1
 80160a6:	4630      	mov	r0, r6
 80160a8:	4639      	mov	r1, r7
 80160aa:	f7ea f907 	bl	80002bc <__adddf3>
 80160ae:	4606      	mov	r6, r0
 80160b0:	460f      	mov	r7, r1
 80160b2:	f7ea fd69 	bl	8000b88 <__aeabi_d2iz>
 80160b6:	2200      	movs	r2, #0
 80160b8:	4682      	mov	sl, r0
 80160ba:	2300      	movs	r3, #0
 80160bc:	4630      	mov	r0, r6
 80160be:	4639      	mov	r1, r7
 80160c0:	f7ea fd24 	bl	8000b0c <__aeabi_dcmplt>
 80160c4:	b148      	cbz	r0, 80160da <_dtoa_r+0x162>
 80160c6:	4650      	mov	r0, sl
 80160c8:	f7ea fa44 	bl	8000554 <__aeabi_i2d>
 80160cc:	4632      	mov	r2, r6
 80160ce:	463b      	mov	r3, r7
 80160d0:	f7ea fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80160d4:	b908      	cbnz	r0, 80160da <_dtoa_r+0x162>
 80160d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80160da:	f1ba 0f16 	cmp.w	sl, #22
 80160de:	d859      	bhi.n	8016194 <_dtoa_r+0x21c>
 80160e0:	4970      	ldr	r1, [pc, #448]	; (80162a4 <_dtoa_r+0x32c>)
 80160e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80160e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160ee:	f7ea fd2b 	bl	8000b48 <__aeabi_dcmpgt>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d050      	beq.n	8016198 <_dtoa_r+0x220>
 80160f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80160fa:	2300      	movs	r3, #0
 80160fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80160fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016100:	1b5d      	subs	r5, r3, r5
 8016102:	f1b5 0801 	subs.w	r8, r5, #1
 8016106:	bf49      	itett	mi
 8016108:	f1c5 0301 	rsbmi	r3, r5, #1
 801610c:	2300      	movpl	r3, #0
 801610e:	9305      	strmi	r3, [sp, #20]
 8016110:	f04f 0800 	movmi.w	r8, #0
 8016114:	bf58      	it	pl
 8016116:	9305      	strpl	r3, [sp, #20]
 8016118:	f1ba 0f00 	cmp.w	sl, #0
 801611c:	db3e      	blt.n	801619c <_dtoa_r+0x224>
 801611e:	2300      	movs	r3, #0
 8016120:	44d0      	add	r8, sl
 8016122:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016126:	9307      	str	r3, [sp, #28]
 8016128:	9b06      	ldr	r3, [sp, #24]
 801612a:	2b09      	cmp	r3, #9
 801612c:	f200 8090 	bhi.w	8016250 <_dtoa_r+0x2d8>
 8016130:	2b05      	cmp	r3, #5
 8016132:	bfc4      	itt	gt
 8016134:	3b04      	subgt	r3, #4
 8016136:	9306      	strgt	r3, [sp, #24]
 8016138:	9b06      	ldr	r3, [sp, #24]
 801613a:	f1a3 0302 	sub.w	r3, r3, #2
 801613e:	bfcc      	ite	gt
 8016140:	2500      	movgt	r5, #0
 8016142:	2501      	movle	r5, #1
 8016144:	2b03      	cmp	r3, #3
 8016146:	f200 808f 	bhi.w	8016268 <_dtoa_r+0x2f0>
 801614a:	e8df f003 	tbb	[pc, r3]
 801614e:	7f7d      	.short	0x7f7d
 8016150:	7131      	.short	0x7131
 8016152:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016156:	441d      	add	r5, r3
 8016158:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801615c:	2820      	cmp	r0, #32
 801615e:	dd13      	ble.n	8016188 <_dtoa_r+0x210>
 8016160:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016164:	9b00      	ldr	r3, [sp, #0]
 8016166:	fa08 f800 	lsl.w	r8, r8, r0
 801616a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801616e:	fa23 f000 	lsr.w	r0, r3, r0
 8016172:	ea48 0000 	orr.w	r0, r8, r0
 8016176:	f7ea f9dd 	bl	8000534 <__aeabi_ui2d>
 801617a:	2301      	movs	r3, #1
 801617c:	4682      	mov	sl, r0
 801617e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016182:	3d01      	subs	r5, #1
 8016184:	9313      	str	r3, [sp, #76]	; 0x4c
 8016186:	e772      	b.n	801606e <_dtoa_r+0xf6>
 8016188:	9b00      	ldr	r3, [sp, #0]
 801618a:	f1c0 0020 	rsb	r0, r0, #32
 801618e:	fa03 f000 	lsl.w	r0, r3, r0
 8016192:	e7f0      	b.n	8016176 <_dtoa_r+0x1fe>
 8016194:	2301      	movs	r3, #1
 8016196:	e7b1      	b.n	80160fc <_dtoa_r+0x184>
 8016198:	900f      	str	r0, [sp, #60]	; 0x3c
 801619a:	e7b0      	b.n	80160fe <_dtoa_r+0x186>
 801619c:	9b05      	ldr	r3, [sp, #20]
 801619e:	eba3 030a 	sub.w	r3, r3, sl
 80161a2:	9305      	str	r3, [sp, #20]
 80161a4:	f1ca 0300 	rsb	r3, sl, #0
 80161a8:	9307      	str	r3, [sp, #28]
 80161aa:	2300      	movs	r3, #0
 80161ac:	930e      	str	r3, [sp, #56]	; 0x38
 80161ae:	e7bb      	b.n	8016128 <_dtoa_r+0x1b0>
 80161b0:	2301      	movs	r3, #1
 80161b2:	930a      	str	r3, [sp, #40]	; 0x28
 80161b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	dd59      	ble.n	801626e <_dtoa_r+0x2f6>
 80161ba:	9302      	str	r3, [sp, #8]
 80161bc:	4699      	mov	r9, r3
 80161be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80161c0:	2200      	movs	r2, #0
 80161c2:	6072      	str	r2, [r6, #4]
 80161c4:	2204      	movs	r2, #4
 80161c6:	f102 0014 	add.w	r0, r2, #20
 80161ca:	4298      	cmp	r0, r3
 80161cc:	6871      	ldr	r1, [r6, #4]
 80161ce:	d953      	bls.n	8016278 <_dtoa_r+0x300>
 80161d0:	4620      	mov	r0, r4
 80161d2:	f000 ffeb 	bl	80171ac <_Balloc>
 80161d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161d8:	6030      	str	r0, [r6, #0]
 80161da:	f1b9 0f0e 	cmp.w	r9, #14
 80161de:	f8d3 b000 	ldr.w	fp, [r3]
 80161e2:	f200 80e6 	bhi.w	80163b2 <_dtoa_r+0x43a>
 80161e6:	2d00      	cmp	r5, #0
 80161e8:	f000 80e3 	beq.w	80163b2 <_dtoa_r+0x43a>
 80161ec:	ed9d 7b00 	vldr	d7, [sp]
 80161f0:	f1ba 0f00 	cmp.w	sl, #0
 80161f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80161f8:	dd74      	ble.n	80162e4 <_dtoa_r+0x36c>
 80161fa:	4a2a      	ldr	r2, [pc, #168]	; (80162a4 <_dtoa_r+0x32c>)
 80161fc:	f00a 030f 	and.w	r3, sl, #15
 8016200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016204:	ed93 7b00 	vldr	d7, [r3]
 8016208:	ea4f 162a 	mov.w	r6, sl, asr #4
 801620c:	06f0      	lsls	r0, r6, #27
 801620e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016212:	d565      	bpl.n	80162e0 <_dtoa_r+0x368>
 8016214:	4b24      	ldr	r3, [pc, #144]	; (80162a8 <_dtoa_r+0x330>)
 8016216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801621a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801621e:	f7ea fb2d 	bl	800087c <__aeabi_ddiv>
 8016222:	e9cd 0100 	strd	r0, r1, [sp]
 8016226:	f006 060f 	and.w	r6, r6, #15
 801622a:	2503      	movs	r5, #3
 801622c:	4f1e      	ldr	r7, [pc, #120]	; (80162a8 <_dtoa_r+0x330>)
 801622e:	e04c      	b.n	80162ca <_dtoa_r+0x352>
 8016230:	2301      	movs	r3, #1
 8016232:	930a      	str	r3, [sp, #40]	; 0x28
 8016234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016236:	4453      	add	r3, sl
 8016238:	f103 0901 	add.w	r9, r3, #1
 801623c:	9302      	str	r3, [sp, #8]
 801623e:	464b      	mov	r3, r9
 8016240:	2b01      	cmp	r3, #1
 8016242:	bfb8      	it	lt
 8016244:	2301      	movlt	r3, #1
 8016246:	e7ba      	b.n	80161be <_dtoa_r+0x246>
 8016248:	2300      	movs	r3, #0
 801624a:	e7b2      	b.n	80161b2 <_dtoa_r+0x23a>
 801624c:	2300      	movs	r3, #0
 801624e:	e7f0      	b.n	8016232 <_dtoa_r+0x2ba>
 8016250:	2501      	movs	r5, #1
 8016252:	2300      	movs	r3, #0
 8016254:	9306      	str	r3, [sp, #24]
 8016256:	950a      	str	r5, [sp, #40]	; 0x28
 8016258:	f04f 33ff 	mov.w	r3, #4294967295
 801625c:	9302      	str	r3, [sp, #8]
 801625e:	4699      	mov	r9, r3
 8016260:	2200      	movs	r2, #0
 8016262:	2312      	movs	r3, #18
 8016264:	920b      	str	r2, [sp, #44]	; 0x2c
 8016266:	e7aa      	b.n	80161be <_dtoa_r+0x246>
 8016268:	2301      	movs	r3, #1
 801626a:	930a      	str	r3, [sp, #40]	; 0x28
 801626c:	e7f4      	b.n	8016258 <_dtoa_r+0x2e0>
 801626e:	2301      	movs	r3, #1
 8016270:	9302      	str	r3, [sp, #8]
 8016272:	4699      	mov	r9, r3
 8016274:	461a      	mov	r2, r3
 8016276:	e7f5      	b.n	8016264 <_dtoa_r+0x2ec>
 8016278:	3101      	adds	r1, #1
 801627a:	6071      	str	r1, [r6, #4]
 801627c:	0052      	lsls	r2, r2, #1
 801627e:	e7a2      	b.n	80161c6 <_dtoa_r+0x24e>
 8016280:	636f4361 	.word	0x636f4361
 8016284:	3fd287a7 	.word	0x3fd287a7
 8016288:	8b60c8b3 	.word	0x8b60c8b3
 801628c:	3fc68a28 	.word	0x3fc68a28
 8016290:	509f79fb 	.word	0x509f79fb
 8016294:	3fd34413 	.word	0x3fd34413
 8016298:	7ff00000 	.word	0x7ff00000
 801629c:	080190d4 	.word	0x080190d4
 80162a0:	3ff80000 	.word	0x3ff80000
 80162a4:	08018fd8 	.word	0x08018fd8
 80162a8:	08018fb0 	.word	0x08018fb0
 80162ac:	08018f39 	.word	0x08018f39
 80162b0:	07f1      	lsls	r1, r6, #31
 80162b2:	d508      	bpl.n	80162c6 <_dtoa_r+0x34e>
 80162b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80162bc:	f7ea f9b4 	bl	8000628 <__aeabi_dmul>
 80162c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80162c4:	3501      	adds	r5, #1
 80162c6:	1076      	asrs	r6, r6, #1
 80162c8:	3708      	adds	r7, #8
 80162ca:	2e00      	cmp	r6, #0
 80162cc:	d1f0      	bne.n	80162b0 <_dtoa_r+0x338>
 80162ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80162d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162d6:	f7ea fad1 	bl	800087c <__aeabi_ddiv>
 80162da:	e9cd 0100 	strd	r0, r1, [sp]
 80162de:	e01a      	b.n	8016316 <_dtoa_r+0x39e>
 80162e0:	2502      	movs	r5, #2
 80162e2:	e7a3      	b.n	801622c <_dtoa_r+0x2b4>
 80162e4:	f000 80a0 	beq.w	8016428 <_dtoa_r+0x4b0>
 80162e8:	f1ca 0600 	rsb	r6, sl, #0
 80162ec:	4b9f      	ldr	r3, [pc, #636]	; (801656c <_dtoa_r+0x5f4>)
 80162ee:	4fa0      	ldr	r7, [pc, #640]	; (8016570 <_dtoa_r+0x5f8>)
 80162f0:	f006 020f 	and.w	r2, r6, #15
 80162f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016300:	f7ea f992 	bl	8000628 <__aeabi_dmul>
 8016304:	e9cd 0100 	strd	r0, r1, [sp]
 8016308:	1136      	asrs	r6, r6, #4
 801630a:	2300      	movs	r3, #0
 801630c:	2502      	movs	r5, #2
 801630e:	2e00      	cmp	r6, #0
 8016310:	d17f      	bne.n	8016412 <_dtoa_r+0x49a>
 8016312:	2b00      	cmp	r3, #0
 8016314:	d1e1      	bne.n	80162da <_dtoa_r+0x362>
 8016316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016318:	2b00      	cmp	r3, #0
 801631a:	f000 8087 	beq.w	801642c <_dtoa_r+0x4b4>
 801631e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016322:	2200      	movs	r2, #0
 8016324:	4b93      	ldr	r3, [pc, #588]	; (8016574 <_dtoa_r+0x5fc>)
 8016326:	4630      	mov	r0, r6
 8016328:	4639      	mov	r1, r7
 801632a:	f7ea fbef 	bl	8000b0c <__aeabi_dcmplt>
 801632e:	2800      	cmp	r0, #0
 8016330:	d07c      	beq.n	801642c <_dtoa_r+0x4b4>
 8016332:	f1b9 0f00 	cmp.w	r9, #0
 8016336:	d079      	beq.n	801642c <_dtoa_r+0x4b4>
 8016338:	9b02      	ldr	r3, [sp, #8]
 801633a:	2b00      	cmp	r3, #0
 801633c:	dd35      	ble.n	80163aa <_dtoa_r+0x432>
 801633e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016342:	9308      	str	r3, [sp, #32]
 8016344:	4639      	mov	r1, r7
 8016346:	2200      	movs	r2, #0
 8016348:	4b8b      	ldr	r3, [pc, #556]	; (8016578 <_dtoa_r+0x600>)
 801634a:	4630      	mov	r0, r6
 801634c:	f7ea f96c 	bl	8000628 <__aeabi_dmul>
 8016350:	e9cd 0100 	strd	r0, r1, [sp]
 8016354:	9f02      	ldr	r7, [sp, #8]
 8016356:	3501      	adds	r5, #1
 8016358:	4628      	mov	r0, r5
 801635a:	f7ea f8fb 	bl	8000554 <__aeabi_i2d>
 801635e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016362:	f7ea f961 	bl	8000628 <__aeabi_dmul>
 8016366:	2200      	movs	r2, #0
 8016368:	4b84      	ldr	r3, [pc, #528]	; (801657c <_dtoa_r+0x604>)
 801636a:	f7e9 ffa7 	bl	80002bc <__adddf3>
 801636e:	4605      	mov	r5, r0
 8016370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016374:	2f00      	cmp	r7, #0
 8016376:	d15d      	bne.n	8016434 <_dtoa_r+0x4bc>
 8016378:	2200      	movs	r2, #0
 801637a:	4b81      	ldr	r3, [pc, #516]	; (8016580 <_dtoa_r+0x608>)
 801637c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016380:	f7e9 ff9a 	bl	80002b8 <__aeabi_dsub>
 8016384:	462a      	mov	r2, r5
 8016386:	4633      	mov	r3, r6
 8016388:	e9cd 0100 	strd	r0, r1, [sp]
 801638c:	f7ea fbdc 	bl	8000b48 <__aeabi_dcmpgt>
 8016390:	2800      	cmp	r0, #0
 8016392:	f040 8288 	bne.w	80168a6 <_dtoa_r+0x92e>
 8016396:	462a      	mov	r2, r5
 8016398:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801639c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163a0:	f7ea fbb4 	bl	8000b0c <__aeabi_dcmplt>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	f040 827c 	bne.w	80168a2 <_dtoa_r+0x92a>
 80163aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80163ae:	e9cd 2300 	strd	r2, r3, [sp]
 80163b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f2c0 8150 	blt.w	801665a <_dtoa_r+0x6e2>
 80163ba:	f1ba 0f0e 	cmp.w	sl, #14
 80163be:	f300 814c 	bgt.w	801665a <_dtoa_r+0x6e2>
 80163c2:	4b6a      	ldr	r3, [pc, #424]	; (801656c <_dtoa_r+0x5f4>)
 80163c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80163c8:	ed93 7b00 	vldr	d7, [r3]
 80163cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163d4:	f280 80d8 	bge.w	8016588 <_dtoa_r+0x610>
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	f300 80d4 	bgt.w	8016588 <_dtoa_r+0x610>
 80163e0:	f040 825e 	bne.w	80168a0 <_dtoa_r+0x928>
 80163e4:	2200      	movs	r2, #0
 80163e6:	4b66      	ldr	r3, [pc, #408]	; (8016580 <_dtoa_r+0x608>)
 80163e8:	ec51 0b17 	vmov	r0, r1, d7
 80163ec:	f7ea f91c 	bl	8000628 <__aeabi_dmul>
 80163f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163f4:	f7ea fb9e 	bl	8000b34 <__aeabi_dcmpge>
 80163f8:	464f      	mov	r7, r9
 80163fa:	464e      	mov	r6, r9
 80163fc:	2800      	cmp	r0, #0
 80163fe:	f040 8234 	bne.w	801686a <_dtoa_r+0x8f2>
 8016402:	2331      	movs	r3, #49	; 0x31
 8016404:	f10b 0501 	add.w	r5, fp, #1
 8016408:	f88b 3000 	strb.w	r3, [fp]
 801640c:	f10a 0a01 	add.w	sl, sl, #1
 8016410:	e22f      	b.n	8016872 <_dtoa_r+0x8fa>
 8016412:	07f2      	lsls	r2, r6, #31
 8016414:	d505      	bpl.n	8016422 <_dtoa_r+0x4aa>
 8016416:	e9d7 2300 	ldrd	r2, r3, [r7]
 801641a:	f7ea f905 	bl	8000628 <__aeabi_dmul>
 801641e:	3501      	adds	r5, #1
 8016420:	2301      	movs	r3, #1
 8016422:	1076      	asrs	r6, r6, #1
 8016424:	3708      	adds	r7, #8
 8016426:	e772      	b.n	801630e <_dtoa_r+0x396>
 8016428:	2502      	movs	r5, #2
 801642a:	e774      	b.n	8016316 <_dtoa_r+0x39e>
 801642c:	f8cd a020 	str.w	sl, [sp, #32]
 8016430:	464f      	mov	r7, r9
 8016432:	e791      	b.n	8016358 <_dtoa_r+0x3e0>
 8016434:	4b4d      	ldr	r3, [pc, #308]	; (801656c <_dtoa_r+0x5f4>)
 8016436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801643a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016440:	2b00      	cmp	r3, #0
 8016442:	d047      	beq.n	80164d4 <_dtoa_r+0x55c>
 8016444:	4602      	mov	r2, r0
 8016446:	460b      	mov	r3, r1
 8016448:	2000      	movs	r0, #0
 801644a:	494e      	ldr	r1, [pc, #312]	; (8016584 <_dtoa_r+0x60c>)
 801644c:	f7ea fa16 	bl	800087c <__aeabi_ddiv>
 8016450:	462a      	mov	r2, r5
 8016452:	4633      	mov	r3, r6
 8016454:	f7e9 ff30 	bl	80002b8 <__aeabi_dsub>
 8016458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801645c:	465d      	mov	r5, fp
 801645e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016462:	f7ea fb91 	bl	8000b88 <__aeabi_d2iz>
 8016466:	4606      	mov	r6, r0
 8016468:	f7ea f874 	bl	8000554 <__aeabi_i2d>
 801646c:	4602      	mov	r2, r0
 801646e:	460b      	mov	r3, r1
 8016470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016474:	f7e9 ff20 	bl	80002b8 <__aeabi_dsub>
 8016478:	3630      	adds	r6, #48	; 0x30
 801647a:	f805 6b01 	strb.w	r6, [r5], #1
 801647e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016482:	e9cd 0100 	strd	r0, r1, [sp]
 8016486:	f7ea fb41 	bl	8000b0c <__aeabi_dcmplt>
 801648a:	2800      	cmp	r0, #0
 801648c:	d163      	bne.n	8016556 <_dtoa_r+0x5de>
 801648e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016492:	2000      	movs	r0, #0
 8016494:	4937      	ldr	r1, [pc, #220]	; (8016574 <_dtoa_r+0x5fc>)
 8016496:	f7e9 ff0f 	bl	80002b8 <__aeabi_dsub>
 801649a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801649e:	f7ea fb35 	bl	8000b0c <__aeabi_dcmplt>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	f040 80b7 	bne.w	8016616 <_dtoa_r+0x69e>
 80164a8:	eba5 030b 	sub.w	r3, r5, fp
 80164ac:	429f      	cmp	r7, r3
 80164ae:	f77f af7c 	ble.w	80163aa <_dtoa_r+0x432>
 80164b2:	2200      	movs	r2, #0
 80164b4:	4b30      	ldr	r3, [pc, #192]	; (8016578 <_dtoa_r+0x600>)
 80164b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80164ba:	f7ea f8b5 	bl	8000628 <__aeabi_dmul>
 80164be:	2200      	movs	r2, #0
 80164c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80164c4:	4b2c      	ldr	r3, [pc, #176]	; (8016578 <_dtoa_r+0x600>)
 80164c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164ca:	f7ea f8ad 	bl	8000628 <__aeabi_dmul>
 80164ce:	e9cd 0100 	strd	r0, r1, [sp]
 80164d2:	e7c4      	b.n	801645e <_dtoa_r+0x4e6>
 80164d4:	462a      	mov	r2, r5
 80164d6:	4633      	mov	r3, r6
 80164d8:	f7ea f8a6 	bl	8000628 <__aeabi_dmul>
 80164dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80164e0:	eb0b 0507 	add.w	r5, fp, r7
 80164e4:	465e      	mov	r6, fp
 80164e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164ea:	f7ea fb4d 	bl	8000b88 <__aeabi_d2iz>
 80164ee:	4607      	mov	r7, r0
 80164f0:	f7ea f830 	bl	8000554 <__aeabi_i2d>
 80164f4:	3730      	adds	r7, #48	; 0x30
 80164f6:	4602      	mov	r2, r0
 80164f8:	460b      	mov	r3, r1
 80164fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164fe:	f7e9 fedb 	bl	80002b8 <__aeabi_dsub>
 8016502:	f806 7b01 	strb.w	r7, [r6], #1
 8016506:	42ae      	cmp	r6, r5
 8016508:	e9cd 0100 	strd	r0, r1, [sp]
 801650c:	f04f 0200 	mov.w	r2, #0
 8016510:	d126      	bne.n	8016560 <_dtoa_r+0x5e8>
 8016512:	4b1c      	ldr	r3, [pc, #112]	; (8016584 <_dtoa_r+0x60c>)
 8016514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016518:	f7e9 fed0 	bl	80002bc <__adddf3>
 801651c:	4602      	mov	r2, r0
 801651e:	460b      	mov	r3, r1
 8016520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016524:	f7ea fb10 	bl	8000b48 <__aeabi_dcmpgt>
 8016528:	2800      	cmp	r0, #0
 801652a:	d174      	bne.n	8016616 <_dtoa_r+0x69e>
 801652c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016530:	2000      	movs	r0, #0
 8016532:	4914      	ldr	r1, [pc, #80]	; (8016584 <_dtoa_r+0x60c>)
 8016534:	f7e9 fec0 	bl	80002b8 <__aeabi_dsub>
 8016538:	4602      	mov	r2, r0
 801653a:	460b      	mov	r3, r1
 801653c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016540:	f7ea fae4 	bl	8000b0c <__aeabi_dcmplt>
 8016544:	2800      	cmp	r0, #0
 8016546:	f43f af30 	beq.w	80163aa <_dtoa_r+0x432>
 801654a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801654e:	2b30      	cmp	r3, #48	; 0x30
 8016550:	f105 32ff 	add.w	r2, r5, #4294967295
 8016554:	d002      	beq.n	801655c <_dtoa_r+0x5e4>
 8016556:	f8dd a020 	ldr.w	sl, [sp, #32]
 801655a:	e04a      	b.n	80165f2 <_dtoa_r+0x67a>
 801655c:	4615      	mov	r5, r2
 801655e:	e7f4      	b.n	801654a <_dtoa_r+0x5d2>
 8016560:	4b05      	ldr	r3, [pc, #20]	; (8016578 <_dtoa_r+0x600>)
 8016562:	f7ea f861 	bl	8000628 <__aeabi_dmul>
 8016566:	e9cd 0100 	strd	r0, r1, [sp]
 801656a:	e7bc      	b.n	80164e6 <_dtoa_r+0x56e>
 801656c:	08018fd8 	.word	0x08018fd8
 8016570:	08018fb0 	.word	0x08018fb0
 8016574:	3ff00000 	.word	0x3ff00000
 8016578:	40240000 	.word	0x40240000
 801657c:	401c0000 	.word	0x401c0000
 8016580:	40140000 	.word	0x40140000
 8016584:	3fe00000 	.word	0x3fe00000
 8016588:	e9dd 6700 	ldrd	r6, r7, [sp]
 801658c:	465d      	mov	r5, fp
 801658e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016592:	4630      	mov	r0, r6
 8016594:	4639      	mov	r1, r7
 8016596:	f7ea f971 	bl	800087c <__aeabi_ddiv>
 801659a:	f7ea faf5 	bl	8000b88 <__aeabi_d2iz>
 801659e:	4680      	mov	r8, r0
 80165a0:	f7e9 ffd8 	bl	8000554 <__aeabi_i2d>
 80165a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165a8:	f7ea f83e 	bl	8000628 <__aeabi_dmul>
 80165ac:	4602      	mov	r2, r0
 80165ae:	460b      	mov	r3, r1
 80165b0:	4630      	mov	r0, r6
 80165b2:	4639      	mov	r1, r7
 80165b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80165b8:	f7e9 fe7e 	bl	80002b8 <__aeabi_dsub>
 80165bc:	f805 6b01 	strb.w	r6, [r5], #1
 80165c0:	eba5 060b 	sub.w	r6, r5, fp
 80165c4:	45b1      	cmp	r9, r6
 80165c6:	4602      	mov	r2, r0
 80165c8:	460b      	mov	r3, r1
 80165ca:	d139      	bne.n	8016640 <_dtoa_r+0x6c8>
 80165cc:	f7e9 fe76 	bl	80002bc <__adddf3>
 80165d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165d4:	4606      	mov	r6, r0
 80165d6:	460f      	mov	r7, r1
 80165d8:	f7ea fab6 	bl	8000b48 <__aeabi_dcmpgt>
 80165dc:	b9c8      	cbnz	r0, 8016612 <_dtoa_r+0x69a>
 80165de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165e2:	4630      	mov	r0, r6
 80165e4:	4639      	mov	r1, r7
 80165e6:	f7ea fa87 	bl	8000af8 <__aeabi_dcmpeq>
 80165ea:	b110      	cbz	r0, 80165f2 <_dtoa_r+0x67a>
 80165ec:	f018 0f01 	tst.w	r8, #1
 80165f0:	d10f      	bne.n	8016612 <_dtoa_r+0x69a>
 80165f2:	9904      	ldr	r1, [sp, #16]
 80165f4:	4620      	mov	r0, r4
 80165f6:	f000 fe0d 	bl	8017214 <_Bfree>
 80165fa:	2300      	movs	r3, #0
 80165fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165fe:	702b      	strb	r3, [r5, #0]
 8016600:	f10a 0301 	add.w	r3, sl, #1
 8016604:	6013      	str	r3, [r2, #0]
 8016606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016608:	2b00      	cmp	r3, #0
 801660a:	f000 8241 	beq.w	8016a90 <_dtoa_r+0xb18>
 801660e:	601d      	str	r5, [r3, #0]
 8016610:	e23e      	b.n	8016a90 <_dtoa_r+0xb18>
 8016612:	f8cd a020 	str.w	sl, [sp, #32]
 8016616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801661a:	2a39      	cmp	r2, #57	; 0x39
 801661c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016620:	d108      	bne.n	8016634 <_dtoa_r+0x6bc>
 8016622:	459b      	cmp	fp, r3
 8016624:	d10a      	bne.n	801663c <_dtoa_r+0x6c4>
 8016626:	9b08      	ldr	r3, [sp, #32]
 8016628:	3301      	adds	r3, #1
 801662a:	9308      	str	r3, [sp, #32]
 801662c:	2330      	movs	r3, #48	; 0x30
 801662e:	f88b 3000 	strb.w	r3, [fp]
 8016632:	465b      	mov	r3, fp
 8016634:	781a      	ldrb	r2, [r3, #0]
 8016636:	3201      	adds	r2, #1
 8016638:	701a      	strb	r2, [r3, #0]
 801663a:	e78c      	b.n	8016556 <_dtoa_r+0x5de>
 801663c:	461d      	mov	r5, r3
 801663e:	e7ea      	b.n	8016616 <_dtoa_r+0x69e>
 8016640:	2200      	movs	r2, #0
 8016642:	4b9b      	ldr	r3, [pc, #620]	; (80168b0 <_dtoa_r+0x938>)
 8016644:	f7e9 fff0 	bl	8000628 <__aeabi_dmul>
 8016648:	2200      	movs	r2, #0
 801664a:	2300      	movs	r3, #0
 801664c:	4606      	mov	r6, r0
 801664e:	460f      	mov	r7, r1
 8016650:	f7ea fa52 	bl	8000af8 <__aeabi_dcmpeq>
 8016654:	2800      	cmp	r0, #0
 8016656:	d09a      	beq.n	801658e <_dtoa_r+0x616>
 8016658:	e7cb      	b.n	80165f2 <_dtoa_r+0x67a>
 801665a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801665c:	2a00      	cmp	r2, #0
 801665e:	f000 808b 	beq.w	8016778 <_dtoa_r+0x800>
 8016662:	9a06      	ldr	r2, [sp, #24]
 8016664:	2a01      	cmp	r2, #1
 8016666:	dc6e      	bgt.n	8016746 <_dtoa_r+0x7ce>
 8016668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801666a:	2a00      	cmp	r2, #0
 801666c:	d067      	beq.n	801673e <_dtoa_r+0x7c6>
 801666e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016672:	9f07      	ldr	r7, [sp, #28]
 8016674:	9d05      	ldr	r5, [sp, #20]
 8016676:	9a05      	ldr	r2, [sp, #20]
 8016678:	2101      	movs	r1, #1
 801667a:	441a      	add	r2, r3
 801667c:	4620      	mov	r0, r4
 801667e:	9205      	str	r2, [sp, #20]
 8016680:	4498      	add	r8, r3
 8016682:	f000 fea5 	bl	80173d0 <__i2b>
 8016686:	4606      	mov	r6, r0
 8016688:	2d00      	cmp	r5, #0
 801668a:	dd0c      	ble.n	80166a6 <_dtoa_r+0x72e>
 801668c:	f1b8 0f00 	cmp.w	r8, #0
 8016690:	dd09      	ble.n	80166a6 <_dtoa_r+0x72e>
 8016692:	4545      	cmp	r5, r8
 8016694:	9a05      	ldr	r2, [sp, #20]
 8016696:	462b      	mov	r3, r5
 8016698:	bfa8      	it	ge
 801669a:	4643      	movge	r3, r8
 801669c:	1ad2      	subs	r2, r2, r3
 801669e:	9205      	str	r2, [sp, #20]
 80166a0:	1aed      	subs	r5, r5, r3
 80166a2:	eba8 0803 	sub.w	r8, r8, r3
 80166a6:	9b07      	ldr	r3, [sp, #28]
 80166a8:	b1eb      	cbz	r3, 80166e6 <_dtoa_r+0x76e>
 80166aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d067      	beq.n	8016780 <_dtoa_r+0x808>
 80166b0:	b18f      	cbz	r7, 80166d6 <_dtoa_r+0x75e>
 80166b2:	4631      	mov	r1, r6
 80166b4:	463a      	mov	r2, r7
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 ff2a 	bl	8017510 <__pow5mult>
 80166bc:	9a04      	ldr	r2, [sp, #16]
 80166be:	4601      	mov	r1, r0
 80166c0:	4606      	mov	r6, r0
 80166c2:	4620      	mov	r0, r4
 80166c4:	f000 fe8d 	bl	80173e2 <__multiply>
 80166c8:	9904      	ldr	r1, [sp, #16]
 80166ca:	9008      	str	r0, [sp, #32]
 80166cc:	4620      	mov	r0, r4
 80166ce:	f000 fda1 	bl	8017214 <_Bfree>
 80166d2:	9b08      	ldr	r3, [sp, #32]
 80166d4:	9304      	str	r3, [sp, #16]
 80166d6:	9b07      	ldr	r3, [sp, #28]
 80166d8:	1bda      	subs	r2, r3, r7
 80166da:	d004      	beq.n	80166e6 <_dtoa_r+0x76e>
 80166dc:	9904      	ldr	r1, [sp, #16]
 80166de:	4620      	mov	r0, r4
 80166e0:	f000 ff16 	bl	8017510 <__pow5mult>
 80166e4:	9004      	str	r0, [sp, #16]
 80166e6:	2101      	movs	r1, #1
 80166e8:	4620      	mov	r0, r4
 80166ea:	f000 fe71 	bl	80173d0 <__i2b>
 80166ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166f0:	4607      	mov	r7, r0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	f000 81d0 	beq.w	8016a98 <_dtoa_r+0xb20>
 80166f8:	461a      	mov	r2, r3
 80166fa:	4601      	mov	r1, r0
 80166fc:	4620      	mov	r0, r4
 80166fe:	f000 ff07 	bl	8017510 <__pow5mult>
 8016702:	9b06      	ldr	r3, [sp, #24]
 8016704:	2b01      	cmp	r3, #1
 8016706:	4607      	mov	r7, r0
 8016708:	dc40      	bgt.n	801678c <_dtoa_r+0x814>
 801670a:	9b00      	ldr	r3, [sp, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d139      	bne.n	8016784 <_dtoa_r+0x80c>
 8016710:	9b01      	ldr	r3, [sp, #4]
 8016712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016716:	2b00      	cmp	r3, #0
 8016718:	d136      	bne.n	8016788 <_dtoa_r+0x810>
 801671a:	9b01      	ldr	r3, [sp, #4]
 801671c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016720:	0d1b      	lsrs	r3, r3, #20
 8016722:	051b      	lsls	r3, r3, #20
 8016724:	b12b      	cbz	r3, 8016732 <_dtoa_r+0x7ba>
 8016726:	9b05      	ldr	r3, [sp, #20]
 8016728:	3301      	adds	r3, #1
 801672a:	9305      	str	r3, [sp, #20]
 801672c:	f108 0801 	add.w	r8, r8, #1
 8016730:	2301      	movs	r3, #1
 8016732:	9307      	str	r3, [sp, #28]
 8016734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016736:	2b00      	cmp	r3, #0
 8016738:	d12a      	bne.n	8016790 <_dtoa_r+0x818>
 801673a:	2001      	movs	r0, #1
 801673c:	e030      	b.n	80167a0 <_dtoa_r+0x828>
 801673e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016740:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016744:	e795      	b.n	8016672 <_dtoa_r+0x6fa>
 8016746:	9b07      	ldr	r3, [sp, #28]
 8016748:	f109 37ff 	add.w	r7, r9, #4294967295
 801674c:	42bb      	cmp	r3, r7
 801674e:	bfbf      	itttt	lt
 8016750:	9b07      	ldrlt	r3, [sp, #28]
 8016752:	9707      	strlt	r7, [sp, #28]
 8016754:	1afa      	sublt	r2, r7, r3
 8016756:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016758:	bfbb      	ittet	lt
 801675a:	189b      	addlt	r3, r3, r2
 801675c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801675e:	1bdf      	subge	r7, r3, r7
 8016760:	2700      	movlt	r7, #0
 8016762:	f1b9 0f00 	cmp.w	r9, #0
 8016766:	bfb5      	itete	lt
 8016768:	9b05      	ldrlt	r3, [sp, #20]
 801676a:	9d05      	ldrge	r5, [sp, #20]
 801676c:	eba3 0509 	sublt.w	r5, r3, r9
 8016770:	464b      	movge	r3, r9
 8016772:	bfb8      	it	lt
 8016774:	2300      	movlt	r3, #0
 8016776:	e77e      	b.n	8016676 <_dtoa_r+0x6fe>
 8016778:	9f07      	ldr	r7, [sp, #28]
 801677a:	9d05      	ldr	r5, [sp, #20]
 801677c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801677e:	e783      	b.n	8016688 <_dtoa_r+0x710>
 8016780:	9a07      	ldr	r2, [sp, #28]
 8016782:	e7ab      	b.n	80166dc <_dtoa_r+0x764>
 8016784:	2300      	movs	r3, #0
 8016786:	e7d4      	b.n	8016732 <_dtoa_r+0x7ba>
 8016788:	9b00      	ldr	r3, [sp, #0]
 801678a:	e7d2      	b.n	8016732 <_dtoa_r+0x7ba>
 801678c:	2300      	movs	r3, #0
 801678e:	9307      	str	r3, [sp, #28]
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016796:	6918      	ldr	r0, [r3, #16]
 8016798:	f000 fdcc 	bl	8017334 <__hi0bits>
 801679c:	f1c0 0020 	rsb	r0, r0, #32
 80167a0:	4440      	add	r0, r8
 80167a2:	f010 001f 	ands.w	r0, r0, #31
 80167a6:	d047      	beq.n	8016838 <_dtoa_r+0x8c0>
 80167a8:	f1c0 0320 	rsb	r3, r0, #32
 80167ac:	2b04      	cmp	r3, #4
 80167ae:	dd3b      	ble.n	8016828 <_dtoa_r+0x8b0>
 80167b0:	9b05      	ldr	r3, [sp, #20]
 80167b2:	f1c0 001c 	rsb	r0, r0, #28
 80167b6:	4403      	add	r3, r0
 80167b8:	9305      	str	r3, [sp, #20]
 80167ba:	4405      	add	r5, r0
 80167bc:	4480      	add	r8, r0
 80167be:	9b05      	ldr	r3, [sp, #20]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dd05      	ble.n	80167d0 <_dtoa_r+0x858>
 80167c4:	461a      	mov	r2, r3
 80167c6:	9904      	ldr	r1, [sp, #16]
 80167c8:	4620      	mov	r0, r4
 80167ca:	f000 feef 	bl	80175ac <__lshift>
 80167ce:	9004      	str	r0, [sp, #16]
 80167d0:	f1b8 0f00 	cmp.w	r8, #0
 80167d4:	dd05      	ble.n	80167e2 <_dtoa_r+0x86a>
 80167d6:	4639      	mov	r1, r7
 80167d8:	4642      	mov	r2, r8
 80167da:	4620      	mov	r0, r4
 80167dc:	f000 fee6 	bl	80175ac <__lshift>
 80167e0:	4607      	mov	r7, r0
 80167e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167e4:	b353      	cbz	r3, 801683c <_dtoa_r+0x8c4>
 80167e6:	4639      	mov	r1, r7
 80167e8:	9804      	ldr	r0, [sp, #16]
 80167ea:	f000 ff33 	bl	8017654 <__mcmp>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	da24      	bge.n	801683c <_dtoa_r+0x8c4>
 80167f2:	2300      	movs	r3, #0
 80167f4:	220a      	movs	r2, #10
 80167f6:	9904      	ldr	r1, [sp, #16]
 80167f8:	4620      	mov	r0, r4
 80167fa:	f000 fd22 	bl	8017242 <__multadd>
 80167fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016800:	9004      	str	r0, [sp, #16]
 8016802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016806:	2b00      	cmp	r3, #0
 8016808:	f000 814d 	beq.w	8016aa6 <_dtoa_r+0xb2e>
 801680c:	2300      	movs	r3, #0
 801680e:	4631      	mov	r1, r6
 8016810:	220a      	movs	r2, #10
 8016812:	4620      	mov	r0, r4
 8016814:	f000 fd15 	bl	8017242 <__multadd>
 8016818:	9b02      	ldr	r3, [sp, #8]
 801681a:	2b00      	cmp	r3, #0
 801681c:	4606      	mov	r6, r0
 801681e:	dc4f      	bgt.n	80168c0 <_dtoa_r+0x948>
 8016820:	9b06      	ldr	r3, [sp, #24]
 8016822:	2b02      	cmp	r3, #2
 8016824:	dd4c      	ble.n	80168c0 <_dtoa_r+0x948>
 8016826:	e011      	b.n	801684c <_dtoa_r+0x8d4>
 8016828:	d0c9      	beq.n	80167be <_dtoa_r+0x846>
 801682a:	9a05      	ldr	r2, [sp, #20]
 801682c:	331c      	adds	r3, #28
 801682e:	441a      	add	r2, r3
 8016830:	9205      	str	r2, [sp, #20]
 8016832:	441d      	add	r5, r3
 8016834:	4498      	add	r8, r3
 8016836:	e7c2      	b.n	80167be <_dtoa_r+0x846>
 8016838:	4603      	mov	r3, r0
 801683a:	e7f6      	b.n	801682a <_dtoa_r+0x8b2>
 801683c:	f1b9 0f00 	cmp.w	r9, #0
 8016840:	dc38      	bgt.n	80168b4 <_dtoa_r+0x93c>
 8016842:	9b06      	ldr	r3, [sp, #24]
 8016844:	2b02      	cmp	r3, #2
 8016846:	dd35      	ble.n	80168b4 <_dtoa_r+0x93c>
 8016848:	f8cd 9008 	str.w	r9, [sp, #8]
 801684c:	9b02      	ldr	r3, [sp, #8]
 801684e:	b963      	cbnz	r3, 801686a <_dtoa_r+0x8f2>
 8016850:	4639      	mov	r1, r7
 8016852:	2205      	movs	r2, #5
 8016854:	4620      	mov	r0, r4
 8016856:	f000 fcf4 	bl	8017242 <__multadd>
 801685a:	4601      	mov	r1, r0
 801685c:	4607      	mov	r7, r0
 801685e:	9804      	ldr	r0, [sp, #16]
 8016860:	f000 fef8 	bl	8017654 <__mcmp>
 8016864:	2800      	cmp	r0, #0
 8016866:	f73f adcc 	bgt.w	8016402 <_dtoa_r+0x48a>
 801686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801686c:	465d      	mov	r5, fp
 801686e:	ea6f 0a03 	mvn.w	sl, r3
 8016872:	f04f 0900 	mov.w	r9, #0
 8016876:	4639      	mov	r1, r7
 8016878:	4620      	mov	r0, r4
 801687a:	f000 fccb 	bl	8017214 <_Bfree>
 801687e:	2e00      	cmp	r6, #0
 8016880:	f43f aeb7 	beq.w	80165f2 <_dtoa_r+0x67a>
 8016884:	f1b9 0f00 	cmp.w	r9, #0
 8016888:	d005      	beq.n	8016896 <_dtoa_r+0x91e>
 801688a:	45b1      	cmp	r9, r6
 801688c:	d003      	beq.n	8016896 <_dtoa_r+0x91e>
 801688e:	4649      	mov	r1, r9
 8016890:	4620      	mov	r0, r4
 8016892:	f000 fcbf 	bl	8017214 <_Bfree>
 8016896:	4631      	mov	r1, r6
 8016898:	4620      	mov	r0, r4
 801689a:	f000 fcbb 	bl	8017214 <_Bfree>
 801689e:	e6a8      	b.n	80165f2 <_dtoa_r+0x67a>
 80168a0:	2700      	movs	r7, #0
 80168a2:	463e      	mov	r6, r7
 80168a4:	e7e1      	b.n	801686a <_dtoa_r+0x8f2>
 80168a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80168aa:	463e      	mov	r6, r7
 80168ac:	e5a9      	b.n	8016402 <_dtoa_r+0x48a>
 80168ae:	bf00      	nop
 80168b0:	40240000 	.word	0x40240000
 80168b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 80fa 	beq.w	8016ab4 <_dtoa_r+0xb3c>
 80168c0:	2d00      	cmp	r5, #0
 80168c2:	dd05      	ble.n	80168d0 <_dtoa_r+0x958>
 80168c4:	4631      	mov	r1, r6
 80168c6:	462a      	mov	r2, r5
 80168c8:	4620      	mov	r0, r4
 80168ca:	f000 fe6f 	bl	80175ac <__lshift>
 80168ce:	4606      	mov	r6, r0
 80168d0:	9b07      	ldr	r3, [sp, #28]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d04c      	beq.n	8016970 <_dtoa_r+0x9f8>
 80168d6:	6871      	ldr	r1, [r6, #4]
 80168d8:	4620      	mov	r0, r4
 80168da:	f000 fc67 	bl	80171ac <_Balloc>
 80168de:	6932      	ldr	r2, [r6, #16]
 80168e0:	3202      	adds	r2, #2
 80168e2:	4605      	mov	r5, r0
 80168e4:	0092      	lsls	r2, r2, #2
 80168e6:	f106 010c 	add.w	r1, r6, #12
 80168ea:	300c      	adds	r0, #12
 80168ec:	f7fd fd08 	bl	8014300 <memcpy>
 80168f0:	2201      	movs	r2, #1
 80168f2:	4629      	mov	r1, r5
 80168f4:	4620      	mov	r0, r4
 80168f6:	f000 fe59 	bl	80175ac <__lshift>
 80168fa:	9b00      	ldr	r3, [sp, #0]
 80168fc:	f8cd b014 	str.w	fp, [sp, #20]
 8016900:	f003 0301 	and.w	r3, r3, #1
 8016904:	46b1      	mov	r9, r6
 8016906:	9307      	str	r3, [sp, #28]
 8016908:	4606      	mov	r6, r0
 801690a:	4639      	mov	r1, r7
 801690c:	9804      	ldr	r0, [sp, #16]
 801690e:	f7ff faa5 	bl	8015e5c <quorem>
 8016912:	4649      	mov	r1, r9
 8016914:	4605      	mov	r5, r0
 8016916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801691a:	9804      	ldr	r0, [sp, #16]
 801691c:	f000 fe9a 	bl	8017654 <__mcmp>
 8016920:	4632      	mov	r2, r6
 8016922:	9000      	str	r0, [sp, #0]
 8016924:	4639      	mov	r1, r7
 8016926:	4620      	mov	r0, r4
 8016928:	f000 feae 	bl	8017688 <__mdiff>
 801692c:	68c3      	ldr	r3, [r0, #12]
 801692e:	4602      	mov	r2, r0
 8016930:	bb03      	cbnz	r3, 8016974 <_dtoa_r+0x9fc>
 8016932:	4601      	mov	r1, r0
 8016934:	9008      	str	r0, [sp, #32]
 8016936:	9804      	ldr	r0, [sp, #16]
 8016938:	f000 fe8c 	bl	8017654 <__mcmp>
 801693c:	9a08      	ldr	r2, [sp, #32]
 801693e:	4603      	mov	r3, r0
 8016940:	4611      	mov	r1, r2
 8016942:	4620      	mov	r0, r4
 8016944:	9308      	str	r3, [sp, #32]
 8016946:	f000 fc65 	bl	8017214 <_Bfree>
 801694a:	9b08      	ldr	r3, [sp, #32]
 801694c:	b9a3      	cbnz	r3, 8016978 <_dtoa_r+0xa00>
 801694e:	9a06      	ldr	r2, [sp, #24]
 8016950:	b992      	cbnz	r2, 8016978 <_dtoa_r+0xa00>
 8016952:	9a07      	ldr	r2, [sp, #28]
 8016954:	b982      	cbnz	r2, 8016978 <_dtoa_r+0xa00>
 8016956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801695a:	d029      	beq.n	80169b0 <_dtoa_r+0xa38>
 801695c:	9b00      	ldr	r3, [sp, #0]
 801695e:	2b00      	cmp	r3, #0
 8016960:	dd01      	ble.n	8016966 <_dtoa_r+0x9ee>
 8016962:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016966:	9b05      	ldr	r3, [sp, #20]
 8016968:	1c5d      	adds	r5, r3, #1
 801696a:	f883 8000 	strb.w	r8, [r3]
 801696e:	e782      	b.n	8016876 <_dtoa_r+0x8fe>
 8016970:	4630      	mov	r0, r6
 8016972:	e7c2      	b.n	80168fa <_dtoa_r+0x982>
 8016974:	2301      	movs	r3, #1
 8016976:	e7e3      	b.n	8016940 <_dtoa_r+0x9c8>
 8016978:	9a00      	ldr	r2, [sp, #0]
 801697a:	2a00      	cmp	r2, #0
 801697c:	db04      	blt.n	8016988 <_dtoa_r+0xa10>
 801697e:	d125      	bne.n	80169cc <_dtoa_r+0xa54>
 8016980:	9a06      	ldr	r2, [sp, #24]
 8016982:	bb1a      	cbnz	r2, 80169cc <_dtoa_r+0xa54>
 8016984:	9a07      	ldr	r2, [sp, #28]
 8016986:	bb0a      	cbnz	r2, 80169cc <_dtoa_r+0xa54>
 8016988:	2b00      	cmp	r3, #0
 801698a:	ddec      	ble.n	8016966 <_dtoa_r+0x9ee>
 801698c:	2201      	movs	r2, #1
 801698e:	9904      	ldr	r1, [sp, #16]
 8016990:	4620      	mov	r0, r4
 8016992:	f000 fe0b 	bl	80175ac <__lshift>
 8016996:	4639      	mov	r1, r7
 8016998:	9004      	str	r0, [sp, #16]
 801699a:	f000 fe5b 	bl	8017654 <__mcmp>
 801699e:	2800      	cmp	r0, #0
 80169a0:	dc03      	bgt.n	80169aa <_dtoa_r+0xa32>
 80169a2:	d1e0      	bne.n	8016966 <_dtoa_r+0x9ee>
 80169a4:	f018 0f01 	tst.w	r8, #1
 80169a8:	d0dd      	beq.n	8016966 <_dtoa_r+0x9ee>
 80169aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80169ae:	d1d8      	bne.n	8016962 <_dtoa_r+0x9ea>
 80169b0:	9b05      	ldr	r3, [sp, #20]
 80169b2:	9a05      	ldr	r2, [sp, #20]
 80169b4:	1c5d      	adds	r5, r3, #1
 80169b6:	2339      	movs	r3, #57	; 0x39
 80169b8:	7013      	strb	r3, [r2, #0]
 80169ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80169be:	2b39      	cmp	r3, #57	; 0x39
 80169c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80169c4:	d04f      	beq.n	8016a66 <_dtoa_r+0xaee>
 80169c6:	3301      	adds	r3, #1
 80169c8:	7013      	strb	r3, [r2, #0]
 80169ca:	e754      	b.n	8016876 <_dtoa_r+0x8fe>
 80169cc:	9a05      	ldr	r2, [sp, #20]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	f102 0501 	add.w	r5, r2, #1
 80169d4:	dd06      	ble.n	80169e4 <_dtoa_r+0xa6c>
 80169d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80169da:	d0e9      	beq.n	80169b0 <_dtoa_r+0xa38>
 80169dc:	f108 0801 	add.w	r8, r8, #1
 80169e0:	9b05      	ldr	r3, [sp, #20]
 80169e2:	e7c2      	b.n	801696a <_dtoa_r+0x9f2>
 80169e4:	9a02      	ldr	r2, [sp, #8]
 80169e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80169ea:	eba5 030b 	sub.w	r3, r5, fp
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d021      	beq.n	8016a36 <_dtoa_r+0xabe>
 80169f2:	2300      	movs	r3, #0
 80169f4:	220a      	movs	r2, #10
 80169f6:	9904      	ldr	r1, [sp, #16]
 80169f8:	4620      	mov	r0, r4
 80169fa:	f000 fc22 	bl	8017242 <__multadd>
 80169fe:	45b1      	cmp	r9, r6
 8016a00:	9004      	str	r0, [sp, #16]
 8016a02:	f04f 0300 	mov.w	r3, #0
 8016a06:	f04f 020a 	mov.w	r2, #10
 8016a0a:	4649      	mov	r1, r9
 8016a0c:	4620      	mov	r0, r4
 8016a0e:	d105      	bne.n	8016a1c <_dtoa_r+0xaa4>
 8016a10:	f000 fc17 	bl	8017242 <__multadd>
 8016a14:	4681      	mov	r9, r0
 8016a16:	4606      	mov	r6, r0
 8016a18:	9505      	str	r5, [sp, #20]
 8016a1a:	e776      	b.n	801690a <_dtoa_r+0x992>
 8016a1c:	f000 fc11 	bl	8017242 <__multadd>
 8016a20:	4631      	mov	r1, r6
 8016a22:	4681      	mov	r9, r0
 8016a24:	2300      	movs	r3, #0
 8016a26:	220a      	movs	r2, #10
 8016a28:	4620      	mov	r0, r4
 8016a2a:	f000 fc0a 	bl	8017242 <__multadd>
 8016a2e:	4606      	mov	r6, r0
 8016a30:	e7f2      	b.n	8016a18 <_dtoa_r+0xaa0>
 8016a32:	f04f 0900 	mov.w	r9, #0
 8016a36:	2201      	movs	r2, #1
 8016a38:	9904      	ldr	r1, [sp, #16]
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	f000 fdb6 	bl	80175ac <__lshift>
 8016a40:	4639      	mov	r1, r7
 8016a42:	9004      	str	r0, [sp, #16]
 8016a44:	f000 fe06 	bl	8017654 <__mcmp>
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	dcb6      	bgt.n	80169ba <_dtoa_r+0xa42>
 8016a4c:	d102      	bne.n	8016a54 <_dtoa_r+0xadc>
 8016a4e:	f018 0f01 	tst.w	r8, #1
 8016a52:	d1b2      	bne.n	80169ba <_dtoa_r+0xa42>
 8016a54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016a58:	2b30      	cmp	r3, #48	; 0x30
 8016a5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8016a5e:	f47f af0a 	bne.w	8016876 <_dtoa_r+0x8fe>
 8016a62:	4615      	mov	r5, r2
 8016a64:	e7f6      	b.n	8016a54 <_dtoa_r+0xadc>
 8016a66:	4593      	cmp	fp, r2
 8016a68:	d105      	bne.n	8016a76 <_dtoa_r+0xafe>
 8016a6a:	2331      	movs	r3, #49	; 0x31
 8016a6c:	f10a 0a01 	add.w	sl, sl, #1
 8016a70:	f88b 3000 	strb.w	r3, [fp]
 8016a74:	e6ff      	b.n	8016876 <_dtoa_r+0x8fe>
 8016a76:	4615      	mov	r5, r2
 8016a78:	e79f      	b.n	80169ba <_dtoa_r+0xa42>
 8016a7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016ae0 <_dtoa_r+0xb68>
 8016a7e:	e007      	b.n	8016a90 <_dtoa_r+0xb18>
 8016a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016ae4 <_dtoa_r+0xb6c>
 8016a86:	b11b      	cbz	r3, 8016a90 <_dtoa_r+0xb18>
 8016a88:	f10b 0308 	add.w	r3, fp, #8
 8016a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a8e:	6013      	str	r3, [r2, #0]
 8016a90:	4658      	mov	r0, fp
 8016a92:	b017      	add	sp, #92	; 0x5c
 8016a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a98:	9b06      	ldr	r3, [sp, #24]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	f77f ae35 	ble.w	801670a <_dtoa_r+0x792>
 8016aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016aa2:	9307      	str	r3, [sp, #28]
 8016aa4:	e649      	b.n	801673a <_dtoa_r+0x7c2>
 8016aa6:	9b02      	ldr	r3, [sp, #8]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	dc03      	bgt.n	8016ab4 <_dtoa_r+0xb3c>
 8016aac:	9b06      	ldr	r3, [sp, #24]
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	f73f aecc 	bgt.w	801684c <_dtoa_r+0x8d4>
 8016ab4:	465d      	mov	r5, fp
 8016ab6:	4639      	mov	r1, r7
 8016ab8:	9804      	ldr	r0, [sp, #16]
 8016aba:	f7ff f9cf 	bl	8015e5c <quorem>
 8016abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016ac2:	f805 8b01 	strb.w	r8, [r5], #1
 8016ac6:	9a02      	ldr	r2, [sp, #8]
 8016ac8:	eba5 030b 	sub.w	r3, r5, fp
 8016acc:	429a      	cmp	r2, r3
 8016ace:	ddb0      	ble.n	8016a32 <_dtoa_r+0xaba>
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	220a      	movs	r2, #10
 8016ad4:	9904      	ldr	r1, [sp, #16]
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	f000 fbb3 	bl	8017242 <__multadd>
 8016adc:	9004      	str	r0, [sp, #16]
 8016ade:	e7ea      	b.n	8016ab6 <_dtoa_r+0xb3e>
 8016ae0:	080190d3 	.word	0x080190d3
 8016ae4:	08018f30 	.word	0x08018f30

08016ae8 <rshift>:
 8016ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aea:	6906      	ldr	r6, [r0, #16]
 8016aec:	114b      	asrs	r3, r1, #5
 8016aee:	429e      	cmp	r6, r3
 8016af0:	f100 0414 	add.w	r4, r0, #20
 8016af4:	dd30      	ble.n	8016b58 <rshift+0x70>
 8016af6:	f011 011f 	ands.w	r1, r1, #31
 8016afa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016afe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016b02:	d108      	bne.n	8016b16 <rshift+0x2e>
 8016b04:	4621      	mov	r1, r4
 8016b06:	42b2      	cmp	r2, r6
 8016b08:	460b      	mov	r3, r1
 8016b0a:	d211      	bcs.n	8016b30 <rshift+0x48>
 8016b0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016b10:	f841 3b04 	str.w	r3, [r1], #4
 8016b14:	e7f7      	b.n	8016b06 <rshift+0x1e>
 8016b16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016b1a:	f1c1 0c20 	rsb	ip, r1, #32
 8016b1e:	40cd      	lsrs	r5, r1
 8016b20:	3204      	adds	r2, #4
 8016b22:	4623      	mov	r3, r4
 8016b24:	42b2      	cmp	r2, r6
 8016b26:	4617      	mov	r7, r2
 8016b28:	d30c      	bcc.n	8016b44 <rshift+0x5c>
 8016b2a:	601d      	str	r5, [r3, #0]
 8016b2c:	b105      	cbz	r5, 8016b30 <rshift+0x48>
 8016b2e:	3304      	adds	r3, #4
 8016b30:	1b1a      	subs	r2, r3, r4
 8016b32:	42a3      	cmp	r3, r4
 8016b34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016b38:	bf08      	it	eq
 8016b3a:	2300      	moveq	r3, #0
 8016b3c:	6102      	str	r2, [r0, #16]
 8016b3e:	bf08      	it	eq
 8016b40:	6143      	streq	r3, [r0, #20]
 8016b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b44:	683f      	ldr	r7, [r7, #0]
 8016b46:	fa07 f70c 	lsl.w	r7, r7, ip
 8016b4a:	433d      	orrs	r5, r7
 8016b4c:	f843 5b04 	str.w	r5, [r3], #4
 8016b50:	f852 5b04 	ldr.w	r5, [r2], #4
 8016b54:	40cd      	lsrs	r5, r1
 8016b56:	e7e5      	b.n	8016b24 <rshift+0x3c>
 8016b58:	4623      	mov	r3, r4
 8016b5a:	e7e9      	b.n	8016b30 <rshift+0x48>

08016b5c <__hexdig_fun>:
 8016b5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016b60:	2b09      	cmp	r3, #9
 8016b62:	d802      	bhi.n	8016b6a <__hexdig_fun+0xe>
 8016b64:	3820      	subs	r0, #32
 8016b66:	b2c0      	uxtb	r0, r0
 8016b68:	4770      	bx	lr
 8016b6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016b6e:	2b05      	cmp	r3, #5
 8016b70:	d801      	bhi.n	8016b76 <__hexdig_fun+0x1a>
 8016b72:	3847      	subs	r0, #71	; 0x47
 8016b74:	e7f7      	b.n	8016b66 <__hexdig_fun+0xa>
 8016b76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016b7a:	2b05      	cmp	r3, #5
 8016b7c:	d801      	bhi.n	8016b82 <__hexdig_fun+0x26>
 8016b7e:	3827      	subs	r0, #39	; 0x27
 8016b80:	e7f1      	b.n	8016b66 <__hexdig_fun+0xa>
 8016b82:	2000      	movs	r0, #0
 8016b84:	4770      	bx	lr

08016b86 <__gethex>:
 8016b86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8a:	b08b      	sub	sp, #44	; 0x2c
 8016b8c:	468a      	mov	sl, r1
 8016b8e:	9002      	str	r0, [sp, #8]
 8016b90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016b92:	9306      	str	r3, [sp, #24]
 8016b94:	4690      	mov	r8, r2
 8016b96:	f000 fadf 	bl	8017158 <__localeconv_l>
 8016b9a:	6803      	ldr	r3, [r0, #0]
 8016b9c:	9303      	str	r3, [sp, #12]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7e9 fb2e 	bl	8000200 <strlen>
 8016ba4:	9b03      	ldr	r3, [sp, #12]
 8016ba6:	9001      	str	r0, [sp, #4]
 8016ba8:	4403      	add	r3, r0
 8016baa:	f04f 0b00 	mov.w	fp, #0
 8016bae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016bb2:	9307      	str	r3, [sp, #28]
 8016bb4:	f8da 3000 	ldr.w	r3, [sl]
 8016bb8:	3302      	adds	r3, #2
 8016bba:	461f      	mov	r7, r3
 8016bbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016bc0:	2830      	cmp	r0, #48	; 0x30
 8016bc2:	d06c      	beq.n	8016c9e <__gethex+0x118>
 8016bc4:	f7ff ffca 	bl	8016b5c <__hexdig_fun>
 8016bc8:	4604      	mov	r4, r0
 8016bca:	2800      	cmp	r0, #0
 8016bcc:	d16a      	bne.n	8016ca4 <__gethex+0x11e>
 8016bce:	9a01      	ldr	r2, [sp, #4]
 8016bd0:	9903      	ldr	r1, [sp, #12]
 8016bd2:	4638      	mov	r0, r7
 8016bd4:	f001 fc36 	bl	8018444 <strncmp>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d166      	bne.n	8016caa <__gethex+0x124>
 8016bdc:	9b01      	ldr	r3, [sp, #4]
 8016bde:	5cf8      	ldrb	r0, [r7, r3]
 8016be0:	18fe      	adds	r6, r7, r3
 8016be2:	f7ff ffbb 	bl	8016b5c <__hexdig_fun>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d062      	beq.n	8016cb0 <__gethex+0x12a>
 8016bea:	4633      	mov	r3, r6
 8016bec:	7818      	ldrb	r0, [r3, #0]
 8016bee:	2830      	cmp	r0, #48	; 0x30
 8016bf0:	461f      	mov	r7, r3
 8016bf2:	f103 0301 	add.w	r3, r3, #1
 8016bf6:	d0f9      	beq.n	8016bec <__gethex+0x66>
 8016bf8:	f7ff ffb0 	bl	8016b5c <__hexdig_fun>
 8016bfc:	fab0 f580 	clz	r5, r0
 8016c00:	096d      	lsrs	r5, r5, #5
 8016c02:	4634      	mov	r4, r6
 8016c04:	f04f 0b01 	mov.w	fp, #1
 8016c08:	463a      	mov	r2, r7
 8016c0a:	4616      	mov	r6, r2
 8016c0c:	3201      	adds	r2, #1
 8016c0e:	7830      	ldrb	r0, [r6, #0]
 8016c10:	f7ff ffa4 	bl	8016b5c <__hexdig_fun>
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d1f8      	bne.n	8016c0a <__gethex+0x84>
 8016c18:	9a01      	ldr	r2, [sp, #4]
 8016c1a:	9903      	ldr	r1, [sp, #12]
 8016c1c:	4630      	mov	r0, r6
 8016c1e:	f001 fc11 	bl	8018444 <strncmp>
 8016c22:	b950      	cbnz	r0, 8016c3a <__gethex+0xb4>
 8016c24:	b954      	cbnz	r4, 8016c3c <__gethex+0xb6>
 8016c26:	9b01      	ldr	r3, [sp, #4]
 8016c28:	18f4      	adds	r4, r6, r3
 8016c2a:	4622      	mov	r2, r4
 8016c2c:	4616      	mov	r6, r2
 8016c2e:	3201      	adds	r2, #1
 8016c30:	7830      	ldrb	r0, [r6, #0]
 8016c32:	f7ff ff93 	bl	8016b5c <__hexdig_fun>
 8016c36:	2800      	cmp	r0, #0
 8016c38:	d1f8      	bne.n	8016c2c <__gethex+0xa6>
 8016c3a:	b10c      	cbz	r4, 8016c40 <__gethex+0xba>
 8016c3c:	1ba4      	subs	r4, r4, r6
 8016c3e:	00a4      	lsls	r4, r4, #2
 8016c40:	7833      	ldrb	r3, [r6, #0]
 8016c42:	2b50      	cmp	r3, #80	; 0x50
 8016c44:	d001      	beq.n	8016c4a <__gethex+0xc4>
 8016c46:	2b70      	cmp	r3, #112	; 0x70
 8016c48:	d140      	bne.n	8016ccc <__gethex+0x146>
 8016c4a:	7873      	ldrb	r3, [r6, #1]
 8016c4c:	2b2b      	cmp	r3, #43	; 0x2b
 8016c4e:	d031      	beq.n	8016cb4 <__gethex+0x12e>
 8016c50:	2b2d      	cmp	r3, #45	; 0x2d
 8016c52:	d033      	beq.n	8016cbc <__gethex+0x136>
 8016c54:	1c71      	adds	r1, r6, #1
 8016c56:	f04f 0900 	mov.w	r9, #0
 8016c5a:	7808      	ldrb	r0, [r1, #0]
 8016c5c:	f7ff ff7e 	bl	8016b5c <__hexdig_fun>
 8016c60:	1e43      	subs	r3, r0, #1
 8016c62:	b2db      	uxtb	r3, r3
 8016c64:	2b18      	cmp	r3, #24
 8016c66:	d831      	bhi.n	8016ccc <__gethex+0x146>
 8016c68:	f1a0 0210 	sub.w	r2, r0, #16
 8016c6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c70:	f7ff ff74 	bl	8016b5c <__hexdig_fun>
 8016c74:	1e43      	subs	r3, r0, #1
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	2b18      	cmp	r3, #24
 8016c7a:	d922      	bls.n	8016cc2 <__gethex+0x13c>
 8016c7c:	f1b9 0f00 	cmp.w	r9, #0
 8016c80:	d000      	beq.n	8016c84 <__gethex+0xfe>
 8016c82:	4252      	negs	r2, r2
 8016c84:	4414      	add	r4, r2
 8016c86:	f8ca 1000 	str.w	r1, [sl]
 8016c8a:	b30d      	cbz	r5, 8016cd0 <__gethex+0x14a>
 8016c8c:	f1bb 0f00 	cmp.w	fp, #0
 8016c90:	bf0c      	ite	eq
 8016c92:	2706      	moveq	r7, #6
 8016c94:	2700      	movne	r7, #0
 8016c96:	4638      	mov	r0, r7
 8016c98:	b00b      	add	sp, #44	; 0x2c
 8016c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9e:	f10b 0b01 	add.w	fp, fp, #1
 8016ca2:	e78a      	b.n	8016bba <__gethex+0x34>
 8016ca4:	2500      	movs	r5, #0
 8016ca6:	462c      	mov	r4, r5
 8016ca8:	e7ae      	b.n	8016c08 <__gethex+0x82>
 8016caa:	463e      	mov	r6, r7
 8016cac:	2501      	movs	r5, #1
 8016cae:	e7c7      	b.n	8016c40 <__gethex+0xba>
 8016cb0:	4604      	mov	r4, r0
 8016cb2:	e7fb      	b.n	8016cac <__gethex+0x126>
 8016cb4:	f04f 0900 	mov.w	r9, #0
 8016cb8:	1cb1      	adds	r1, r6, #2
 8016cba:	e7ce      	b.n	8016c5a <__gethex+0xd4>
 8016cbc:	f04f 0901 	mov.w	r9, #1
 8016cc0:	e7fa      	b.n	8016cb8 <__gethex+0x132>
 8016cc2:	230a      	movs	r3, #10
 8016cc4:	fb03 0202 	mla	r2, r3, r2, r0
 8016cc8:	3a10      	subs	r2, #16
 8016cca:	e7cf      	b.n	8016c6c <__gethex+0xe6>
 8016ccc:	4631      	mov	r1, r6
 8016cce:	e7da      	b.n	8016c86 <__gethex+0x100>
 8016cd0:	1bf3      	subs	r3, r6, r7
 8016cd2:	3b01      	subs	r3, #1
 8016cd4:	4629      	mov	r1, r5
 8016cd6:	2b07      	cmp	r3, #7
 8016cd8:	dc49      	bgt.n	8016d6e <__gethex+0x1e8>
 8016cda:	9802      	ldr	r0, [sp, #8]
 8016cdc:	f000 fa66 	bl	80171ac <_Balloc>
 8016ce0:	9b01      	ldr	r3, [sp, #4]
 8016ce2:	f100 0914 	add.w	r9, r0, #20
 8016ce6:	f04f 0b00 	mov.w	fp, #0
 8016cea:	f1c3 0301 	rsb	r3, r3, #1
 8016cee:	4605      	mov	r5, r0
 8016cf0:	f8cd 9010 	str.w	r9, [sp, #16]
 8016cf4:	46da      	mov	sl, fp
 8016cf6:	9308      	str	r3, [sp, #32]
 8016cf8:	42b7      	cmp	r7, r6
 8016cfa:	d33b      	bcc.n	8016d74 <__gethex+0x1ee>
 8016cfc:	9804      	ldr	r0, [sp, #16]
 8016cfe:	f840 ab04 	str.w	sl, [r0], #4
 8016d02:	eba0 0009 	sub.w	r0, r0, r9
 8016d06:	1080      	asrs	r0, r0, #2
 8016d08:	6128      	str	r0, [r5, #16]
 8016d0a:	0147      	lsls	r7, r0, #5
 8016d0c:	4650      	mov	r0, sl
 8016d0e:	f000 fb11 	bl	8017334 <__hi0bits>
 8016d12:	f8d8 6000 	ldr.w	r6, [r8]
 8016d16:	1a3f      	subs	r7, r7, r0
 8016d18:	42b7      	cmp	r7, r6
 8016d1a:	dd64      	ble.n	8016de6 <__gethex+0x260>
 8016d1c:	1bbf      	subs	r7, r7, r6
 8016d1e:	4639      	mov	r1, r7
 8016d20:	4628      	mov	r0, r5
 8016d22:	f000 fe21 	bl	8017968 <__any_on>
 8016d26:	4682      	mov	sl, r0
 8016d28:	b178      	cbz	r0, 8016d4a <__gethex+0x1c4>
 8016d2a:	1e7b      	subs	r3, r7, #1
 8016d2c:	1159      	asrs	r1, r3, #5
 8016d2e:	f003 021f 	and.w	r2, r3, #31
 8016d32:	f04f 0a01 	mov.w	sl, #1
 8016d36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016d3a:	fa0a f202 	lsl.w	r2, sl, r2
 8016d3e:	420a      	tst	r2, r1
 8016d40:	d003      	beq.n	8016d4a <__gethex+0x1c4>
 8016d42:	4553      	cmp	r3, sl
 8016d44:	dc46      	bgt.n	8016dd4 <__gethex+0x24e>
 8016d46:	f04f 0a02 	mov.w	sl, #2
 8016d4a:	4639      	mov	r1, r7
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f7ff fecb 	bl	8016ae8 <rshift>
 8016d52:	443c      	add	r4, r7
 8016d54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016d58:	42a3      	cmp	r3, r4
 8016d5a:	da52      	bge.n	8016e02 <__gethex+0x27c>
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	9802      	ldr	r0, [sp, #8]
 8016d60:	f000 fa58 	bl	8017214 <_Bfree>
 8016d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d66:	2300      	movs	r3, #0
 8016d68:	6013      	str	r3, [r2, #0]
 8016d6a:	27a3      	movs	r7, #163	; 0xa3
 8016d6c:	e793      	b.n	8016c96 <__gethex+0x110>
 8016d6e:	3101      	adds	r1, #1
 8016d70:	105b      	asrs	r3, r3, #1
 8016d72:	e7b0      	b.n	8016cd6 <__gethex+0x150>
 8016d74:	1e73      	subs	r3, r6, #1
 8016d76:	9305      	str	r3, [sp, #20]
 8016d78:	9a07      	ldr	r2, [sp, #28]
 8016d7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	d018      	beq.n	8016db4 <__gethex+0x22e>
 8016d82:	f1bb 0f20 	cmp.w	fp, #32
 8016d86:	d107      	bne.n	8016d98 <__gethex+0x212>
 8016d88:	9b04      	ldr	r3, [sp, #16]
 8016d8a:	f8c3 a000 	str.w	sl, [r3]
 8016d8e:	3304      	adds	r3, #4
 8016d90:	f04f 0a00 	mov.w	sl, #0
 8016d94:	9304      	str	r3, [sp, #16]
 8016d96:	46d3      	mov	fp, sl
 8016d98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016d9c:	f7ff fede 	bl	8016b5c <__hexdig_fun>
 8016da0:	f000 000f 	and.w	r0, r0, #15
 8016da4:	fa00 f00b 	lsl.w	r0, r0, fp
 8016da8:	ea4a 0a00 	orr.w	sl, sl, r0
 8016dac:	f10b 0b04 	add.w	fp, fp, #4
 8016db0:	9b05      	ldr	r3, [sp, #20]
 8016db2:	e00d      	b.n	8016dd0 <__gethex+0x24a>
 8016db4:	9b05      	ldr	r3, [sp, #20]
 8016db6:	9a08      	ldr	r2, [sp, #32]
 8016db8:	4413      	add	r3, r2
 8016dba:	42bb      	cmp	r3, r7
 8016dbc:	d3e1      	bcc.n	8016d82 <__gethex+0x1fc>
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	9a01      	ldr	r2, [sp, #4]
 8016dc2:	9903      	ldr	r1, [sp, #12]
 8016dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc6:	f001 fb3d 	bl	8018444 <strncmp>
 8016dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d1d8      	bne.n	8016d82 <__gethex+0x1fc>
 8016dd0:	461e      	mov	r6, r3
 8016dd2:	e791      	b.n	8016cf8 <__gethex+0x172>
 8016dd4:	1eb9      	subs	r1, r7, #2
 8016dd6:	4628      	mov	r0, r5
 8016dd8:	f000 fdc6 	bl	8017968 <__any_on>
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	d0b2      	beq.n	8016d46 <__gethex+0x1c0>
 8016de0:	f04f 0a03 	mov.w	sl, #3
 8016de4:	e7b1      	b.n	8016d4a <__gethex+0x1c4>
 8016de6:	da09      	bge.n	8016dfc <__gethex+0x276>
 8016de8:	1bf7      	subs	r7, r6, r7
 8016dea:	4629      	mov	r1, r5
 8016dec:	463a      	mov	r2, r7
 8016dee:	9802      	ldr	r0, [sp, #8]
 8016df0:	f000 fbdc 	bl	80175ac <__lshift>
 8016df4:	1be4      	subs	r4, r4, r7
 8016df6:	4605      	mov	r5, r0
 8016df8:	f100 0914 	add.w	r9, r0, #20
 8016dfc:	f04f 0a00 	mov.w	sl, #0
 8016e00:	e7a8      	b.n	8016d54 <__gethex+0x1ce>
 8016e02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016e06:	42a0      	cmp	r0, r4
 8016e08:	dd6a      	ble.n	8016ee0 <__gethex+0x35a>
 8016e0a:	1b04      	subs	r4, r0, r4
 8016e0c:	42a6      	cmp	r6, r4
 8016e0e:	dc2e      	bgt.n	8016e6e <__gethex+0x2e8>
 8016e10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e14:	2b02      	cmp	r3, #2
 8016e16:	d022      	beq.n	8016e5e <__gethex+0x2d8>
 8016e18:	2b03      	cmp	r3, #3
 8016e1a:	d024      	beq.n	8016e66 <__gethex+0x2e0>
 8016e1c:	2b01      	cmp	r3, #1
 8016e1e:	d115      	bne.n	8016e4c <__gethex+0x2c6>
 8016e20:	42a6      	cmp	r6, r4
 8016e22:	d113      	bne.n	8016e4c <__gethex+0x2c6>
 8016e24:	2e01      	cmp	r6, #1
 8016e26:	dc0b      	bgt.n	8016e40 <__gethex+0x2ba>
 8016e28:	9a06      	ldr	r2, [sp, #24]
 8016e2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016e2e:	6013      	str	r3, [r2, #0]
 8016e30:	2301      	movs	r3, #1
 8016e32:	612b      	str	r3, [r5, #16]
 8016e34:	f8c9 3000 	str.w	r3, [r9]
 8016e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e3a:	2762      	movs	r7, #98	; 0x62
 8016e3c:	601d      	str	r5, [r3, #0]
 8016e3e:	e72a      	b.n	8016c96 <__gethex+0x110>
 8016e40:	1e71      	subs	r1, r6, #1
 8016e42:	4628      	mov	r0, r5
 8016e44:	f000 fd90 	bl	8017968 <__any_on>
 8016e48:	2800      	cmp	r0, #0
 8016e4a:	d1ed      	bne.n	8016e28 <__gethex+0x2a2>
 8016e4c:	4629      	mov	r1, r5
 8016e4e:	9802      	ldr	r0, [sp, #8]
 8016e50:	f000 f9e0 	bl	8017214 <_Bfree>
 8016e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e56:	2300      	movs	r3, #0
 8016e58:	6013      	str	r3, [r2, #0]
 8016e5a:	2750      	movs	r7, #80	; 0x50
 8016e5c:	e71b      	b.n	8016c96 <__gethex+0x110>
 8016e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d0e1      	beq.n	8016e28 <__gethex+0x2a2>
 8016e64:	e7f2      	b.n	8016e4c <__gethex+0x2c6>
 8016e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d1dd      	bne.n	8016e28 <__gethex+0x2a2>
 8016e6c:	e7ee      	b.n	8016e4c <__gethex+0x2c6>
 8016e6e:	1e67      	subs	r7, r4, #1
 8016e70:	f1ba 0f00 	cmp.w	sl, #0
 8016e74:	d131      	bne.n	8016eda <__gethex+0x354>
 8016e76:	b127      	cbz	r7, 8016e82 <__gethex+0x2fc>
 8016e78:	4639      	mov	r1, r7
 8016e7a:	4628      	mov	r0, r5
 8016e7c:	f000 fd74 	bl	8017968 <__any_on>
 8016e80:	4682      	mov	sl, r0
 8016e82:	117a      	asrs	r2, r7, #5
 8016e84:	2301      	movs	r3, #1
 8016e86:	f007 071f 	and.w	r7, r7, #31
 8016e8a:	fa03 f707 	lsl.w	r7, r3, r7
 8016e8e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016e92:	4621      	mov	r1, r4
 8016e94:	421f      	tst	r7, r3
 8016e96:	4628      	mov	r0, r5
 8016e98:	bf18      	it	ne
 8016e9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8016e9e:	1b36      	subs	r6, r6, r4
 8016ea0:	f7ff fe22 	bl	8016ae8 <rshift>
 8016ea4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016ea8:	2702      	movs	r7, #2
 8016eaa:	f1ba 0f00 	cmp.w	sl, #0
 8016eae:	d048      	beq.n	8016f42 <__gethex+0x3bc>
 8016eb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016eb4:	2b02      	cmp	r3, #2
 8016eb6:	d015      	beq.n	8016ee4 <__gethex+0x35e>
 8016eb8:	2b03      	cmp	r3, #3
 8016eba:	d017      	beq.n	8016eec <__gethex+0x366>
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d109      	bne.n	8016ed4 <__gethex+0x34e>
 8016ec0:	f01a 0f02 	tst.w	sl, #2
 8016ec4:	d006      	beq.n	8016ed4 <__gethex+0x34e>
 8016ec6:	f8d9 3000 	ldr.w	r3, [r9]
 8016eca:	ea4a 0a03 	orr.w	sl, sl, r3
 8016ece:	f01a 0f01 	tst.w	sl, #1
 8016ed2:	d10e      	bne.n	8016ef2 <__gethex+0x36c>
 8016ed4:	f047 0710 	orr.w	r7, r7, #16
 8016ed8:	e033      	b.n	8016f42 <__gethex+0x3bc>
 8016eda:	f04f 0a01 	mov.w	sl, #1
 8016ede:	e7d0      	b.n	8016e82 <__gethex+0x2fc>
 8016ee0:	2701      	movs	r7, #1
 8016ee2:	e7e2      	b.n	8016eaa <__gethex+0x324>
 8016ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ee6:	f1c3 0301 	rsb	r3, r3, #1
 8016eea:	9315      	str	r3, [sp, #84]	; 0x54
 8016eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d0f0      	beq.n	8016ed4 <__gethex+0x34e>
 8016ef2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016ef6:	f105 0314 	add.w	r3, r5, #20
 8016efa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016efe:	eb03 010a 	add.w	r1, r3, sl
 8016f02:	f04f 0c00 	mov.w	ip, #0
 8016f06:	4618      	mov	r0, r3
 8016f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016f10:	d01c      	beq.n	8016f4c <__gethex+0x3c6>
 8016f12:	3201      	adds	r2, #1
 8016f14:	6002      	str	r2, [r0, #0]
 8016f16:	2f02      	cmp	r7, #2
 8016f18:	f105 0314 	add.w	r3, r5, #20
 8016f1c:	d138      	bne.n	8016f90 <__gethex+0x40a>
 8016f1e:	f8d8 2000 	ldr.w	r2, [r8]
 8016f22:	3a01      	subs	r2, #1
 8016f24:	42b2      	cmp	r2, r6
 8016f26:	d10a      	bne.n	8016f3e <__gethex+0x3b8>
 8016f28:	1171      	asrs	r1, r6, #5
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	f006 061f 	and.w	r6, r6, #31
 8016f30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f34:	fa02 f606 	lsl.w	r6, r2, r6
 8016f38:	421e      	tst	r6, r3
 8016f3a:	bf18      	it	ne
 8016f3c:	4617      	movne	r7, r2
 8016f3e:	f047 0720 	orr.w	r7, r7, #32
 8016f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f44:	601d      	str	r5, [r3, #0]
 8016f46:	9b06      	ldr	r3, [sp, #24]
 8016f48:	601c      	str	r4, [r3, #0]
 8016f4a:	e6a4      	b.n	8016c96 <__gethex+0x110>
 8016f4c:	4299      	cmp	r1, r3
 8016f4e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016f52:	d8d8      	bhi.n	8016f06 <__gethex+0x380>
 8016f54:	68ab      	ldr	r3, [r5, #8]
 8016f56:	4599      	cmp	r9, r3
 8016f58:	db12      	blt.n	8016f80 <__gethex+0x3fa>
 8016f5a:	6869      	ldr	r1, [r5, #4]
 8016f5c:	9802      	ldr	r0, [sp, #8]
 8016f5e:	3101      	adds	r1, #1
 8016f60:	f000 f924 	bl	80171ac <_Balloc>
 8016f64:	692a      	ldr	r2, [r5, #16]
 8016f66:	3202      	adds	r2, #2
 8016f68:	f105 010c 	add.w	r1, r5, #12
 8016f6c:	4683      	mov	fp, r0
 8016f6e:	0092      	lsls	r2, r2, #2
 8016f70:	300c      	adds	r0, #12
 8016f72:	f7fd f9c5 	bl	8014300 <memcpy>
 8016f76:	4629      	mov	r1, r5
 8016f78:	9802      	ldr	r0, [sp, #8]
 8016f7a:	f000 f94b 	bl	8017214 <_Bfree>
 8016f7e:	465d      	mov	r5, fp
 8016f80:	692b      	ldr	r3, [r5, #16]
 8016f82:	1c5a      	adds	r2, r3, #1
 8016f84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016f88:	612a      	str	r2, [r5, #16]
 8016f8a:	2201      	movs	r2, #1
 8016f8c:	615a      	str	r2, [r3, #20]
 8016f8e:	e7c2      	b.n	8016f16 <__gethex+0x390>
 8016f90:	692a      	ldr	r2, [r5, #16]
 8016f92:	454a      	cmp	r2, r9
 8016f94:	dd0b      	ble.n	8016fae <__gethex+0x428>
 8016f96:	2101      	movs	r1, #1
 8016f98:	4628      	mov	r0, r5
 8016f9a:	f7ff fda5 	bl	8016ae8 <rshift>
 8016f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016fa2:	3401      	adds	r4, #1
 8016fa4:	42a3      	cmp	r3, r4
 8016fa6:	f6ff aed9 	blt.w	8016d5c <__gethex+0x1d6>
 8016faa:	2701      	movs	r7, #1
 8016fac:	e7c7      	b.n	8016f3e <__gethex+0x3b8>
 8016fae:	f016 061f 	ands.w	r6, r6, #31
 8016fb2:	d0fa      	beq.n	8016faa <__gethex+0x424>
 8016fb4:	449a      	add	sl, r3
 8016fb6:	f1c6 0620 	rsb	r6, r6, #32
 8016fba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016fbe:	f000 f9b9 	bl	8017334 <__hi0bits>
 8016fc2:	42b0      	cmp	r0, r6
 8016fc4:	dbe7      	blt.n	8016f96 <__gethex+0x410>
 8016fc6:	e7f0      	b.n	8016faa <__gethex+0x424>

08016fc8 <L_shift>:
 8016fc8:	f1c2 0208 	rsb	r2, r2, #8
 8016fcc:	0092      	lsls	r2, r2, #2
 8016fce:	b570      	push	{r4, r5, r6, lr}
 8016fd0:	f1c2 0620 	rsb	r6, r2, #32
 8016fd4:	6843      	ldr	r3, [r0, #4]
 8016fd6:	6804      	ldr	r4, [r0, #0]
 8016fd8:	fa03 f506 	lsl.w	r5, r3, r6
 8016fdc:	432c      	orrs	r4, r5
 8016fde:	40d3      	lsrs	r3, r2
 8016fe0:	6004      	str	r4, [r0, #0]
 8016fe2:	f840 3f04 	str.w	r3, [r0, #4]!
 8016fe6:	4288      	cmp	r0, r1
 8016fe8:	d3f4      	bcc.n	8016fd4 <L_shift+0xc>
 8016fea:	bd70      	pop	{r4, r5, r6, pc}

08016fec <__match>:
 8016fec:	b530      	push	{r4, r5, lr}
 8016fee:	6803      	ldr	r3, [r0, #0]
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ff6:	b914      	cbnz	r4, 8016ffe <__match+0x12>
 8016ff8:	6003      	str	r3, [r0, #0]
 8016ffa:	2001      	movs	r0, #1
 8016ffc:	bd30      	pop	{r4, r5, pc}
 8016ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017002:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017006:	2d19      	cmp	r5, #25
 8017008:	bf98      	it	ls
 801700a:	3220      	addls	r2, #32
 801700c:	42a2      	cmp	r2, r4
 801700e:	d0f0      	beq.n	8016ff2 <__match+0x6>
 8017010:	2000      	movs	r0, #0
 8017012:	e7f3      	b.n	8016ffc <__match+0x10>

08017014 <__hexnan>:
 8017014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017018:	680b      	ldr	r3, [r1, #0]
 801701a:	6801      	ldr	r1, [r0, #0]
 801701c:	115f      	asrs	r7, r3, #5
 801701e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017022:	f013 031f 	ands.w	r3, r3, #31
 8017026:	b087      	sub	sp, #28
 8017028:	bf18      	it	ne
 801702a:	3704      	addne	r7, #4
 801702c:	2500      	movs	r5, #0
 801702e:	1f3e      	subs	r6, r7, #4
 8017030:	4682      	mov	sl, r0
 8017032:	4690      	mov	r8, r2
 8017034:	9301      	str	r3, [sp, #4]
 8017036:	f847 5c04 	str.w	r5, [r7, #-4]
 801703a:	46b1      	mov	r9, r6
 801703c:	4634      	mov	r4, r6
 801703e:	9502      	str	r5, [sp, #8]
 8017040:	46ab      	mov	fp, r5
 8017042:	784a      	ldrb	r2, [r1, #1]
 8017044:	1c4b      	adds	r3, r1, #1
 8017046:	9303      	str	r3, [sp, #12]
 8017048:	b342      	cbz	r2, 801709c <__hexnan+0x88>
 801704a:	4610      	mov	r0, r2
 801704c:	9105      	str	r1, [sp, #20]
 801704e:	9204      	str	r2, [sp, #16]
 8017050:	f7ff fd84 	bl	8016b5c <__hexdig_fun>
 8017054:	2800      	cmp	r0, #0
 8017056:	d143      	bne.n	80170e0 <__hexnan+0xcc>
 8017058:	9a04      	ldr	r2, [sp, #16]
 801705a:	9905      	ldr	r1, [sp, #20]
 801705c:	2a20      	cmp	r2, #32
 801705e:	d818      	bhi.n	8017092 <__hexnan+0x7e>
 8017060:	9b02      	ldr	r3, [sp, #8]
 8017062:	459b      	cmp	fp, r3
 8017064:	dd13      	ble.n	801708e <__hexnan+0x7a>
 8017066:	454c      	cmp	r4, r9
 8017068:	d206      	bcs.n	8017078 <__hexnan+0x64>
 801706a:	2d07      	cmp	r5, #7
 801706c:	dc04      	bgt.n	8017078 <__hexnan+0x64>
 801706e:	462a      	mov	r2, r5
 8017070:	4649      	mov	r1, r9
 8017072:	4620      	mov	r0, r4
 8017074:	f7ff ffa8 	bl	8016fc8 <L_shift>
 8017078:	4544      	cmp	r4, r8
 801707a:	d944      	bls.n	8017106 <__hexnan+0xf2>
 801707c:	2300      	movs	r3, #0
 801707e:	f1a4 0904 	sub.w	r9, r4, #4
 8017082:	f844 3c04 	str.w	r3, [r4, #-4]
 8017086:	f8cd b008 	str.w	fp, [sp, #8]
 801708a:	464c      	mov	r4, r9
 801708c:	461d      	mov	r5, r3
 801708e:	9903      	ldr	r1, [sp, #12]
 8017090:	e7d7      	b.n	8017042 <__hexnan+0x2e>
 8017092:	2a29      	cmp	r2, #41	; 0x29
 8017094:	d14a      	bne.n	801712c <__hexnan+0x118>
 8017096:	3102      	adds	r1, #2
 8017098:	f8ca 1000 	str.w	r1, [sl]
 801709c:	f1bb 0f00 	cmp.w	fp, #0
 80170a0:	d044      	beq.n	801712c <__hexnan+0x118>
 80170a2:	454c      	cmp	r4, r9
 80170a4:	d206      	bcs.n	80170b4 <__hexnan+0xa0>
 80170a6:	2d07      	cmp	r5, #7
 80170a8:	dc04      	bgt.n	80170b4 <__hexnan+0xa0>
 80170aa:	462a      	mov	r2, r5
 80170ac:	4649      	mov	r1, r9
 80170ae:	4620      	mov	r0, r4
 80170b0:	f7ff ff8a 	bl	8016fc8 <L_shift>
 80170b4:	4544      	cmp	r4, r8
 80170b6:	d928      	bls.n	801710a <__hexnan+0xf6>
 80170b8:	4643      	mov	r3, r8
 80170ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80170be:	f843 2b04 	str.w	r2, [r3], #4
 80170c2:	42a6      	cmp	r6, r4
 80170c4:	d2f9      	bcs.n	80170ba <__hexnan+0xa6>
 80170c6:	2200      	movs	r2, #0
 80170c8:	f843 2b04 	str.w	r2, [r3], #4
 80170cc:	429e      	cmp	r6, r3
 80170ce:	d2fb      	bcs.n	80170c8 <__hexnan+0xb4>
 80170d0:	6833      	ldr	r3, [r6, #0]
 80170d2:	b91b      	cbnz	r3, 80170dc <__hexnan+0xc8>
 80170d4:	4546      	cmp	r6, r8
 80170d6:	d127      	bne.n	8017128 <__hexnan+0x114>
 80170d8:	2301      	movs	r3, #1
 80170da:	6033      	str	r3, [r6, #0]
 80170dc:	2005      	movs	r0, #5
 80170de:	e026      	b.n	801712e <__hexnan+0x11a>
 80170e0:	3501      	adds	r5, #1
 80170e2:	2d08      	cmp	r5, #8
 80170e4:	f10b 0b01 	add.w	fp, fp, #1
 80170e8:	dd06      	ble.n	80170f8 <__hexnan+0xe4>
 80170ea:	4544      	cmp	r4, r8
 80170ec:	d9cf      	bls.n	801708e <__hexnan+0x7a>
 80170ee:	2300      	movs	r3, #0
 80170f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80170f4:	2501      	movs	r5, #1
 80170f6:	3c04      	subs	r4, #4
 80170f8:	6822      	ldr	r2, [r4, #0]
 80170fa:	f000 000f 	and.w	r0, r0, #15
 80170fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017102:	6020      	str	r0, [r4, #0]
 8017104:	e7c3      	b.n	801708e <__hexnan+0x7a>
 8017106:	2508      	movs	r5, #8
 8017108:	e7c1      	b.n	801708e <__hexnan+0x7a>
 801710a:	9b01      	ldr	r3, [sp, #4]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d0df      	beq.n	80170d0 <__hexnan+0xbc>
 8017110:	f04f 32ff 	mov.w	r2, #4294967295
 8017114:	f1c3 0320 	rsb	r3, r3, #32
 8017118:	fa22 f303 	lsr.w	r3, r2, r3
 801711c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017120:	401a      	ands	r2, r3
 8017122:	f847 2c04 	str.w	r2, [r7, #-4]
 8017126:	e7d3      	b.n	80170d0 <__hexnan+0xbc>
 8017128:	3e04      	subs	r6, #4
 801712a:	e7d1      	b.n	80170d0 <__hexnan+0xbc>
 801712c:	2004      	movs	r0, #4
 801712e:	b007      	add	sp, #28
 8017130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017134 <__locale_ctype_ptr_l>:
 8017134:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017138:	4770      	bx	lr
	...

0801713c <__locale_ctype_ptr>:
 801713c:	4b04      	ldr	r3, [pc, #16]	; (8017150 <__locale_ctype_ptr+0x14>)
 801713e:	4a05      	ldr	r2, [pc, #20]	; (8017154 <__locale_ctype_ptr+0x18>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	6a1b      	ldr	r3, [r3, #32]
 8017144:	2b00      	cmp	r3, #0
 8017146:	bf08      	it	eq
 8017148:	4613      	moveq	r3, r2
 801714a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801714e:	4770      	bx	lr
 8017150:	2000000c 	.word	0x2000000c
 8017154:	20000070 	.word	0x20000070

08017158 <__localeconv_l>:
 8017158:	30f0      	adds	r0, #240	; 0xf0
 801715a:	4770      	bx	lr

0801715c <_localeconv_r>:
 801715c:	4b04      	ldr	r3, [pc, #16]	; (8017170 <_localeconv_r+0x14>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	6a18      	ldr	r0, [r3, #32]
 8017162:	4b04      	ldr	r3, [pc, #16]	; (8017174 <_localeconv_r+0x18>)
 8017164:	2800      	cmp	r0, #0
 8017166:	bf08      	it	eq
 8017168:	4618      	moveq	r0, r3
 801716a:	30f0      	adds	r0, #240	; 0xf0
 801716c:	4770      	bx	lr
 801716e:	bf00      	nop
 8017170:	2000000c 	.word	0x2000000c
 8017174:	20000070 	.word	0x20000070

08017178 <malloc>:
 8017178:	4b02      	ldr	r3, [pc, #8]	; (8017184 <malloc+0xc>)
 801717a:	4601      	mov	r1, r0
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f000 bc71 	b.w	8017a64 <_malloc_r>
 8017182:	bf00      	nop
 8017184:	2000000c 	.word	0x2000000c

08017188 <__ascii_mbtowc>:
 8017188:	b082      	sub	sp, #8
 801718a:	b901      	cbnz	r1, 801718e <__ascii_mbtowc+0x6>
 801718c:	a901      	add	r1, sp, #4
 801718e:	b142      	cbz	r2, 80171a2 <__ascii_mbtowc+0x1a>
 8017190:	b14b      	cbz	r3, 80171a6 <__ascii_mbtowc+0x1e>
 8017192:	7813      	ldrb	r3, [r2, #0]
 8017194:	600b      	str	r3, [r1, #0]
 8017196:	7812      	ldrb	r2, [r2, #0]
 8017198:	1c10      	adds	r0, r2, #0
 801719a:	bf18      	it	ne
 801719c:	2001      	movne	r0, #1
 801719e:	b002      	add	sp, #8
 80171a0:	4770      	bx	lr
 80171a2:	4610      	mov	r0, r2
 80171a4:	e7fb      	b.n	801719e <__ascii_mbtowc+0x16>
 80171a6:	f06f 0001 	mvn.w	r0, #1
 80171aa:	e7f8      	b.n	801719e <__ascii_mbtowc+0x16>

080171ac <_Balloc>:
 80171ac:	b570      	push	{r4, r5, r6, lr}
 80171ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80171b0:	4604      	mov	r4, r0
 80171b2:	460e      	mov	r6, r1
 80171b4:	b93d      	cbnz	r5, 80171c6 <_Balloc+0x1a>
 80171b6:	2010      	movs	r0, #16
 80171b8:	f7ff ffde 	bl	8017178 <malloc>
 80171bc:	6260      	str	r0, [r4, #36]	; 0x24
 80171be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80171c2:	6005      	str	r5, [r0, #0]
 80171c4:	60c5      	str	r5, [r0, #12]
 80171c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80171c8:	68eb      	ldr	r3, [r5, #12]
 80171ca:	b183      	cbz	r3, 80171ee <_Balloc+0x42>
 80171cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171ce:	68db      	ldr	r3, [r3, #12]
 80171d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80171d4:	b9b8      	cbnz	r0, 8017206 <_Balloc+0x5a>
 80171d6:	2101      	movs	r1, #1
 80171d8:	fa01 f506 	lsl.w	r5, r1, r6
 80171dc:	1d6a      	adds	r2, r5, #5
 80171de:	0092      	lsls	r2, r2, #2
 80171e0:	4620      	mov	r0, r4
 80171e2:	f000 fbe2 	bl	80179aa <_calloc_r>
 80171e6:	b160      	cbz	r0, 8017202 <_Balloc+0x56>
 80171e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80171ec:	e00e      	b.n	801720c <_Balloc+0x60>
 80171ee:	2221      	movs	r2, #33	; 0x21
 80171f0:	2104      	movs	r1, #4
 80171f2:	4620      	mov	r0, r4
 80171f4:	f000 fbd9 	bl	80179aa <_calloc_r>
 80171f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171fa:	60e8      	str	r0, [r5, #12]
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d1e4      	bne.n	80171cc <_Balloc+0x20>
 8017202:	2000      	movs	r0, #0
 8017204:	bd70      	pop	{r4, r5, r6, pc}
 8017206:	6802      	ldr	r2, [r0, #0]
 8017208:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801720c:	2300      	movs	r3, #0
 801720e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017212:	e7f7      	b.n	8017204 <_Balloc+0x58>

08017214 <_Bfree>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017218:	4606      	mov	r6, r0
 801721a:	460d      	mov	r5, r1
 801721c:	b93c      	cbnz	r4, 801722e <_Bfree+0x1a>
 801721e:	2010      	movs	r0, #16
 8017220:	f7ff ffaa 	bl	8017178 <malloc>
 8017224:	6270      	str	r0, [r6, #36]	; 0x24
 8017226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801722a:	6004      	str	r4, [r0, #0]
 801722c:	60c4      	str	r4, [r0, #12]
 801722e:	b13d      	cbz	r5, 8017240 <_Bfree+0x2c>
 8017230:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017232:	686a      	ldr	r2, [r5, #4]
 8017234:	68db      	ldr	r3, [r3, #12]
 8017236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801723a:	6029      	str	r1, [r5, #0]
 801723c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017240:	bd70      	pop	{r4, r5, r6, pc}

08017242 <__multadd>:
 8017242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017246:	690d      	ldr	r5, [r1, #16]
 8017248:	461f      	mov	r7, r3
 801724a:	4606      	mov	r6, r0
 801724c:	460c      	mov	r4, r1
 801724e:	f101 0c14 	add.w	ip, r1, #20
 8017252:	2300      	movs	r3, #0
 8017254:	f8dc 0000 	ldr.w	r0, [ip]
 8017258:	b281      	uxth	r1, r0
 801725a:	fb02 7101 	mla	r1, r2, r1, r7
 801725e:	0c0f      	lsrs	r7, r1, #16
 8017260:	0c00      	lsrs	r0, r0, #16
 8017262:	fb02 7000 	mla	r0, r2, r0, r7
 8017266:	b289      	uxth	r1, r1
 8017268:	3301      	adds	r3, #1
 801726a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801726e:	429d      	cmp	r5, r3
 8017270:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017274:	f84c 1b04 	str.w	r1, [ip], #4
 8017278:	dcec      	bgt.n	8017254 <__multadd+0x12>
 801727a:	b1d7      	cbz	r7, 80172b2 <__multadd+0x70>
 801727c:	68a3      	ldr	r3, [r4, #8]
 801727e:	42ab      	cmp	r3, r5
 8017280:	dc12      	bgt.n	80172a8 <__multadd+0x66>
 8017282:	6861      	ldr	r1, [r4, #4]
 8017284:	4630      	mov	r0, r6
 8017286:	3101      	adds	r1, #1
 8017288:	f7ff ff90 	bl	80171ac <_Balloc>
 801728c:	6922      	ldr	r2, [r4, #16]
 801728e:	3202      	adds	r2, #2
 8017290:	f104 010c 	add.w	r1, r4, #12
 8017294:	4680      	mov	r8, r0
 8017296:	0092      	lsls	r2, r2, #2
 8017298:	300c      	adds	r0, #12
 801729a:	f7fd f831 	bl	8014300 <memcpy>
 801729e:	4621      	mov	r1, r4
 80172a0:	4630      	mov	r0, r6
 80172a2:	f7ff ffb7 	bl	8017214 <_Bfree>
 80172a6:	4644      	mov	r4, r8
 80172a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80172ac:	3501      	adds	r5, #1
 80172ae:	615f      	str	r7, [r3, #20]
 80172b0:	6125      	str	r5, [r4, #16]
 80172b2:	4620      	mov	r0, r4
 80172b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172b8 <__s2b>:
 80172b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172bc:	460c      	mov	r4, r1
 80172be:	4615      	mov	r5, r2
 80172c0:	461f      	mov	r7, r3
 80172c2:	2209      	movs	r2, #9
 80172c4:	3308      	adds	r3, #8
 80172c6:	4606      	mov	r6, r0
 80172c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80172cc:	2100      	movs	r1, #0
 80172ce:	2201      	movs	r2, #1
 80172d0:	429a      	cmp	r2, r3
 80172d2:	db20      	blt.n	8017316 <__s2b+0x5e>
 80172d4:	4630      	mov	r0, r6
 80172d6:	f7ff ff69 	bl	80171ac <_Balloc>
 80172da:	9b08      	ldr	r3, [sp, #32]
 80172dc:	6143      	str	r3, [r0, #20]
 80172de:	2d09      	cmp	r5, #9
 80172e0:	f04f 0301 	mov.w	r3, #1
 80172e4:	6103      	str	r3, [r0, #16]
 80172e6:	dd19      	ble.n	801731c <__s2b+0x64>
 80172e8:	f104 0809 	add.w	r8, r4, #9
 80172ec:	46c1      	mov	r9, r8
 80172ee:	442c      	add	r4, r5
 80172f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80172f4:	4601      	mov	r1, r0
 80172f6:	3b30      	subs	r3, #48	; 0x30
 80172f8:	220a      	movs	r2, #10
 80172fa:	4630      	mov	r0, r6
 80172fc:	f7ff ffa1 	bl	8017242 <__multadd>
 8017300:	45a1      	cmp	r9, r4
 8017302:	d1f5      	bne.n	80172f0 <__s2b+0x38>
 8017304:	eb08 0405 	add.w	r4, r8, r5
 8017308:	3c08      	subs	r4, #8
 801730a:	1b2d      	subs	r5, r5, r4
 801730c:	1963      	adds	r3, r4, r5
 801730e:	42bb      	cmp	r3, r7
 8017310:	db07      	blt.n	8017322 <__s2b+0x6a>
 8017312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017316:	0052      	lsls	r2, r2, #1
 8017318:	3101      	adds	r1, #1
 801731a:	e7d9      	b.n	80172d0 <__s2b+0x18>
 801731c:	340a      	adds	r4, #10
 801731e:	2509      	movs	r5, #9
 8017320:	e7f3      	b.n	801730a <__s2b+0x52>
 8017322:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017326:	4601      	mov	r1, r0
 8017328:	3b30      	subs	r3, #48	; 0x30
 801732a:	220a      	movs	r2, #10
 801732c:	4630      	mov	r0, r6
 801732e:	f7ff ff88 	bl	8017242 <__multadd>
 8017332:	e7eb      	b.n	801730c <__s2b+0x54>

08017334 <__hi0bits>:
 8017334:	0c02      	lsrs	r2, r0, #16
 8017336:	0412      	lsls	r2, r2, #16
 8017338:	4603      	mov	r3, r0
 801733a:	b9b2      	cbnz	r2, 801736a <__hi0bits+0x36>
 801733c:	0403      	lsls	r3, r0, #16
 801733e:	2010      	movs	r0, #16
 8017340:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017344:	bf04      	itt	eq
 8017346:	021b      	lsleq	r3, r3, #8
 8017348:	3008      	addeq	r0, #8
 801734a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801734e:	bf04      	itt	eq
 8017350:	011b      	lsleq	r3, r3, #4
 8017352:	3004      	addeq	r0, #4
 8017354:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017358:	bf04      	itt	eq
 801735a:	009b      	lsleq	r3, r3, #2
 801735c:	3002      	addeq	r0, #2
 801735e:	2b00      	cmp	r3, #0
 8017360:	db06      	blt.n	8017370 <__hi0bits+0x3c>
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	d503      	bpl.n	801736e <__hi0bits+0x3a>
 8017366:	3001      	adds	r0, #1
 8017368:	4770      	bx	lr
 801736a:	2000      	movs	r0, #0
 801736c:	e7e8      	b.n	8017340 <__hi0bits+0xc>
 801736e:	2020      	movs	r0, #32
 8017370:	4770      	bx	lr

08017372 <__lo0bits>:
 8017372:	6803      	ldr	r3, [r0, #0]
 8017374:	f013 0207 	ands.w	r2, r3, #7
 8017378:	4601      	mov	r1, r0
 801737a:	d00b      	beq.n	8017394 <__lo0bits+0x22>
 801737c:	07da      	lsls	r2, r3, #31
 801737e:	d423      	bmi.n	80173c8 <__lo0bits+0x56>
 8017380:	0798      	lsls	r0, r3, #30
 8017382:	bf49      	itett	mi
 8017384:	085b      	lsrmi	r3, r3, #1
 8017386:	089b      	lsrpl	r3, r3, #2
 8017388:	2001      	movmi	r0, #1
 801738a:	600b      	strmi	r3, [r1, #0]
 801738c:	bf5c      	itt	pl
 801738e:	600b      	strpl	r3, [r1, #0]
 8017390:	2002      	movpl	r0, #2
 8017392:	4770      	bx	lr
 8017394:	b298      	uxth	r0, r3
 8017396:	b9a8      	cbnz	r0, 80173c4 <__lo0bits+0x52>
 8017398:	0c1b      	lsrs	r3, r3, #16
 801739a:	2010      	movs	r0, #16
 801739c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80173a0:	bf04      	itt	eq
 80173a2:	0a1b      	lsreq	r3, r3, #8
 80173a4:	3008      	addeq	r0, #8
 80173a6:	071a      	lsls	r2, r3, #28
 80173a8:	bf04      	itt	eq
 80173aa:	091b      	lsreq	r3, r3, #4
 80173ac:	3004      	addeq	r0, #4
 80173ae:	079a      	lsls	r2, r3, #30
 80173b0:	bf04      	itt	eq
 80173b2:	089b      	lsreq	r3, r3, #2
 80173b4:	3002      	addeq	r0, #2
 80173b6:	07da      	lsls	r2, r3, #31
 80173b8:	d402      	bmi.n	80173c0 <__lo0bits+0x4e>
 80173ba:	085b      	lsrs	r3, r3, #1
 80173bc:	d006      	beq.n	80173cc <__lo0bits+0x5a>
 80173be:	3001      	adds	r0, #1
 80173c0:	600b      	str	r3, [r1, #0]
 80173c2:	4770      	bx	lr
 80173c4:	4610      	mov	r0, r2
 80173c6:	e7e9      	b.n	801739c <__lo0bits+0x2a>
 80173c8:	2000      	movs	r0, #0
 80173ca:	4770      	bx	lr
 80173cc:	2020      	movs	r0, #32
 80173ce:	4770      	bx	lr

080173d0 <__i2b>:
 80173d0:	b510      	push	{r4, lr}
 80173d2:	460c      	mov	r4, r1
 80173d4:	2101      	movs	r1, #1
 80173d6:	f7ff fee9 	bl	80171ac <_Balloc>
 80173da:	2201      	movs	r2, #1
 80173dc:	6144      	str	r4, [r0, #20]
 80173de:	6102      	str	r2, [r0, #16]
 80173e0:	bd10      	pop	{r4, pc}

080173e2 <__multiply>:
 80173e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e6:	4614      	mov	r4, r2
 80173e8:	690a      	ldr	r2, [r1, #16]
 80173ea:	6923      	ldr	r3, [r4, #16]
 80173ec:	429a      	cmp	r2, r3
 80173ee:	bfb8      	it	lt
 80173f0:	460b      	movlt	r3, r1
 80173f2:	4688      	mov	r8, r1
 80173f4:	bfbc      	itt	lt
 80173f6:	46a0      	movlt	r8, r4
 80173f8:	461c      	movlt	r4, r3
 80173fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80173fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017406:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801740a:	eb07 0609 	add.w	r6, r7, r9
 801740e:	42b3      	cmp	r3, r6
 8017410:	bfb8      	it	lt
 8017412:	3101      	addlt	r1, #1
 8017414:	f7ff feca 	bl	80171ac <_Balloc>
 8017418:	f100 0514 	add.w	r5, r0, #20
 801741c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017420:	462b      	mov	r3, r5
 8017422:	2200      	movs	r2, #0
 8017424:	4573      	cmp	r3, lr
 8017426:	d316      	bcc.n	8017456 <__multiply+0x74>
 8017428:	f104 0214 	add.w	r2, r4, #20
 801742c:	f108 0114 	add.w	r1, r8, #20
 8017430:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017434:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	9b00      	ldr	r3, [sp, #0]
 801743c:	9201      	str	r2, [sp, #4]
 801743e:	4293      	cmp	r3, r2
 8017440:	d80c      	bhi.n	801745c <__multiply+0x7a>
 8017442:	2e00      	cmp	r6, #0
 8017444:	dd03      	ble.n	801744e <__multiply+0x6c>
 8017446:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801744a:	2b00      	cmp	r3, #0
 801744c:	d05d      	beq.n	801750a <__multiply+0x128>
 801744e:	6106      	str	r6, [r0, #16]
 8017450:	b003      	add	sp, #12
 8017452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017456:	f843 2b04 	str.w	r2, [r3], #4
 801745a:	e7e3      	b.n	8017424 <__multiply+0x42>
 801745c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017460:	f1bb 0f00 	cmp.w	fp, #0
 8017464:	d023      	beq.n	80174ae <__multiply+0xcc>
 8017466:	4689      	mov	r9, r1
 8017468:	46ac      	mov	ip, r5
 801746a:	f04f 0800 	mov.w	r8, #0
 801746e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017472:	f8dc a000 	ldr.w	sl, [ip]
 8017476:	b2a3      	uxth	r3, r4
 8017478:	fa1f fa8a 	uxth.w	sl, sl
 801747c:	fb0b a303 	mla	r3, fp, r3, sl
 8017480:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017484:	f8dc 4000 	ldr.w	r4, [ip]
 8017488:	4443      	add	r3, r8
 801748a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801748e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017492:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017496:	46e2      	mov	sl, ip
 8017498:	b29b      	uxth	r3, r3
 801749a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801749e:	454f      	cmp	r7, r9
 80174a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80174a4:	f84a 3b04 	str.w	r3, [sl], #4
 80174a8:	d82b      	bhi.n	8017502 <__multiply+0x120>
 80174aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80174ae:	9b01      	ldr	r3, [sp, #4]
 80174b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80174b4:	3204      	adds	r2, #4
 80174b6:	f1ba 0f00 	cmp.w	sl, #0
 80174ba:	d020      	beq.n	80174fe <__multiply+0x11c>
 80174bc:	682b      	ldr	r3, [r5, #0]
 80174be:	4689      	mov	r9, r1
 80174c0:	46a8      	mov	r8, r5
 80174c2:	f04f 0b00 	mov.w	fp, #0
 80174c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80174ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80174ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80174d2:	445c      	add	r4, fp
 80174d4:	46c4      	mov	ip, r8
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80174dc:	f84c 3b04 	str.w	r3, [ip], #4
 80174e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80174e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80174e8:	0c1b      	lsrs	r3, r3, #16
 80174ea:	fb0a b303 	mla	r3, sl, r3, fp
 80174ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80174f2:	454f      	cmp	r7, r9
 80174f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80174f8:	d805      	bhi.n	8017506 <__multiply+0x124>
 80174fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80174fe:	3504      	adds	r5, #4
 8017500:	e79b      	b.n	801743a <__multiply+0x58>
 8017502:	46d4      	mov	ip, sl
 8017504:	e7b3      	b.n	801746e <__multiply+0x8c>
 8017506:	46e0      	mov	r8, ip
 8017508:	e7dd      	b.n	80174c6 <__multiply+0xe4>
 801750a:	3e01      	subs	r6, #1
 801750c:	e799      	b.n	8017442 <__multiply+0x60>
	...

08017510 <__pow5mult>:
 8017510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017514:	4615      	mov	r5, r2
 8017516:	f012 0203 	ands.w	r2, r2, #3
 801751a:	4606      	mov	r6, r0
 801751c:	460f      	mov	r7, r1
 801751e:	d007      	beq.n	8017530 <__pow5mult+0x20>
 8017520:	3a01      	subs	r2, #1
 8017522:	4c21      	ldr	r4, [pc, #132]	; (80175a8 <__pow5mult+0x98>)
 8017524:	2300      	movs	r3, #0
 8017526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801752a:	f7ff fe8a 	bl	8017242 <__multadd>
 801752e:	4607      	mov	r7, r0
 8017530:	10ad      	asrs	r5, r5, #2
 8017532:	d035      	beq.n	80175a0 <__pow5mult+0x90>
 8017534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017536:	b93c      	cbnz	r4, 8017548 <__pow5mult+0x38>
 8017538:	2010      	movs	r0, #16
 801753a:	f7ff fe1d 	bl	8017178 <malloc>
 801753e:	6270      	str	r0, [r6, #36]	; 0x24
 8017540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017544:	6004      	str	r4, [r0, #0]
 8017546:	60c4      	str	r4, [r0, #12]
 8017548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801754c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017550:	b94c      	cbnz	r4, 8017566 <__pow5mult+0x56>
 8017552:	f240 2171 	movw	r1, #625	; 0x271
 8017556:	4630      	mov	r0, r6
 8017558:	f7ff ff3a 	bl	80173d0 <__i2b>
 801755c:	2300      	movs	r3, #0
 801755e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017562:	4604      	mov	r4, r0
 8017564:	6003      	str	r3, [r0, #0]
 8017566:	f04f 0800 	mov.w	r8, #0
 801756a:	07eb      	lsls	r3, r5, #31
 801756c:	d50a      	bpl.n	8017584 <__pow5mult+0x74>
 801756e:	4639      	mov	r1, r7
 8017570:	4622      	mov	r2, r4
 8017572:	4630      	mov	r0, r6
 8017574:	f7ff ff35 	bl	80173e2 <__multiply>
 8017578:	4639      	mov	r1, r7
 801757a:	4681      	mov	r9, r0
 801757c:	4630      	mov	r0, r6
 801757e:	f7ff fe49 	bl	8017214 <_Bfree>
 8017582:	464f      	mov	r7, r9
 8017584:	106d      	asrs	r5, r5, #1
 8017586:	d00b      	beq.n	80175a0 <__pow5mult+0x90>
 8017588:	6820      	ldr	r0, [r4, #0]
 801758a:	b938      	cbnz	r0, 801759c <__pow5mult+0x8c>
 801758c:	4622      	mov	r2, r4
 801758e:	4621      	mov	r1, r4
 8017590:	4630      	mov	r0, r6
 8017592:	f7ff ff26 	bl	80173e2 <__multiply>
 8017596:	6020      	str	r0, [r4, #0]
 8017598:	f8c0 8000 	str.w	r8, [r0]
 801759c:	4604      	mov	r4, r0
 801759e:	e7e4      	b.n	801756a <__pow5mult+0x5a>
 80175a0:	4638      	mov	r0, r7
 80175a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175a6:	bf00      	nop
 80175a8:	080190a0 	.word	0x080190a0

080175ac <__lshift>:
 80175ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175b0:	460c      	mov	r4, r1
 80175b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80175b6:	6923      	ldr	r3, [r4, #16]
 80175b8:	6849      	ldr	r1, [r1, #4]
 80175ba:	eb0a 0903 	add.w	r9, sl, r3
 80175be:	68a3      	ldr	r3, [r4, #8]
 80175c0:	4607      	mov	r7, r0
 80175c2:	4616      	mov	r6, r2
 80175c4:	f109 0501 	add.w	r5, r9, #1
 80175c8:	42ab      	cmp	r3, r5
 80175ca:	db32      	blt.n	8017632 <__lshift+0x86>
 80175cc:	4638      	mov	r0, r7
 80175ce:	f7ff fded 	bl	80171ac <_Balloc>
 80175d2:	2300      	movs	r3, #0
 80175d4:	4680      	mov	r8, r0
 80175d6:	f100 0114 	add.w	r1, r0, #20
 80175da:	461a      	mov	r2, r3
 80175dc:	4553      	cmp	r3, sl
 80175de:	db2b      	blt.n	8017638 <__lshift+0x8c>
 80175e0:	6920      	ldr	r0, [r4, #16]
 80175e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80175e6:	f104 0314 	add.w	r3, r4, #20
 80175ea:	f016 021f 	ands.w	r2, r6, #31
 80175ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80175f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80175f6:	d025      	beq.n	8017644 <__lshift+0x98>
 80175f8:	f1c2 0e20 	rsb	lr, r2, #32
 80175fc:	2000      	movs	r0, #0
 80175fe:	681e      	ldr	r6, [r3, #0]
 8017600:	468a      	mov	sl, r1
 8017602:	4096      	lsls	r6, r2
 8017604:	4330      	orrs	r0, r6
 8017606:	f84a 0b04 	str.w	r0, [sl], #4
 801760a:	f853 0b04 	ldr.w	r0, [r3], #4
 801760e:	459c      	cmp	ip, r3
 8017610:	fa20 f00e 	lsr.w	r0, r0, lr
 8017614:	d814      	bhi.n	8017640 <__lshift+0x94>
 8017616:	6048      	str	r0, [r1, #4]
 8017618:	b108      	cbz	r0, 801761e <__lshift+0x72>
 801761a:	f109 0502 	add.w	r5, r9, #2
 801761e:	3d01      	subs	r5, #1
 8017620:	4638      	mov	r0, r7
 8017622:	f8c8 5010 	str.w	r5, [r8, #16]
 8017626:	4621      	mov	r1, r4
 8017628:	f7ff fdf4 	bl	8017214 <_Bfree>
 801762c:	4640      	mov	r0, r8
 801762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017632:	3101      	adds	r1, #1
 8017634:	005b      	lsls	r3, r3, #1
 8017636:	e7c7      	b.n	80175c8 <__lshift+0x1c>
 8017638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801763c:	3301      	adds	r3, #1
 801763e:	e7cd      	b.n	80175dc <__lshift+0x30>
 8017640:	4651      	mov	r1, sl
 8017642:	e7dc      	b.n	80175fe <__lshift+0x52>
 8017644:	3904      	subs	r1, #4
 8017646:	f853 2b04 	ldr.w	r2, [r3], #4
 801764a:	f841 2f04 	str.w	r2, [r1, #4]!
 801764e:	459c      	cmp	ip, r3
 8017650:	d8f9      	bhi.n	8017646 <__lshift+0x9a>
 8017652:	e7e4      	b.n	801761e <__lshift+0x72>

08017654 <__mcmp>:
 8017654:	6903      	ldr	r3, [r0, #16]
 8017656:	690a      	ldr	r2, [r1, #16]
 8017658:	1a9b      	subs	r3, r3, r2
 801765a:	b530      	push	{r4, r5, lr}
 801765c:	d10c      	bne.n	8017678 <__mcmp+0x24>
 801765e:	0092      	lsls	r2, r2, #2
 8017660:	3014      	adds	r0, #20
 8017662:	3114      	adds	r1, #20
 8017664:	1884      	adds	r4, r0, r2
 8017666:	4411      	add	r1, r2
 8017668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801766c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017670:	4295      	cmp	r5, r2
 8017672:	d003      	beq.n	801767c <__mcmp+0x28>
 8017674:	d305      	bcc.n	8017682 <__mcmp+0x2e>
 8017676:	2301      	movs	r3, #1
 8017678:	4618      	mov	r0, r3
 801767a:	bd30      	pop	{r4, r5, pc}
 801767c:	42a0      	cmp	r0, r4
 801767e:	d3f3      	bcc.n	8017668 <__mcmp+0x14>
 8017680:	e7fa      	b.n	8017678 <__mcmp+0x24>
 8017682:	f04f 33ff 	mov.w	r3, #4294967295
 8017686:	e7f7      	b.n	8017678 <__mcmp+0x24>

08017688 <__mdiff>:
 8017688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801768c:	460d      	mov	r5, r1
 801768e:	4607      	mov	r7, r0
 8017690:	4611      	mov	r1, r2
 8017692:	4628      	mov	r0, r5
 8017694:	4614      	mov	r4, r2
 8017696:	f7ff ffdd 	bl	8017654 <__mcmp>
 801769a:	1e06      	subs	r6, r0, #0
 801769c:	d108      	bne.n	80176b0 <__mdiff+0x28>
 801769e:	4631      	mov	r1, r6
 80176a0:	4638      	mov	r0, r7
 80176a2:	f7ff fd83 	bl	80171ac <_Balloc>
 80176a6:	2301      	movs	r3, #1
 80176a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80176ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176b0:	bfa4      	itt	ge
 80176b2:	4623      	movge	r3, r4
 80176b4:	462c      	movge	r4, r5
 80176b6:	4638      	mov	r0, r7
 80176b8:	6861      	ldr	r1, [r4, #4]
 80176ba:	bfa6      	itte	ge
 80176bc:	461d      	movge	r5, r3
 80176be:	2600      	movge	r6, #0
 80176c0:	2601      	movlt	r6, #1
 80176c2:	f7ff fd73 	bl	80171ac <_Balloc>
 80176c6:	692b      	ldr	r3, [r5, #16]
 80176c8:	60c6      	str	r6, [r0, #12]
 80176ca:	6926      	ldr	r6, [r4, #16]
 80176cc:	f105 0914 	add.w	r9, r5, #20
 80176d0:	f104 0214 	add.w	r2, r4, #20
 80176d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80176d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80176dc:	f100 0514 	add.w	r5, r0, #20
 80176e0:	f04f 0e00 	mov.w	lr, #0
 80176e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80176e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80176ec:	fa1e f18a 	uxtah	r1, lr, sl
 80176f0:	b2a3      	uxth	r3, r4
 80176f2:	1ac9      	subs	r1, r1, r3
 80176f4:	0c23      	lsrs	r3, r4, #16
 80176f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80176fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80176fe:	b289      	uxth	r1, r1
 8017700:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017704:	45c8      	cmp	r8, r9
 8017706:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801770a:	4694      	mov	ip, r2
 801770c:	f845 3b04 	str.w	r3, [r5], #4
 8017710:	d8e8      	bhi.n	80176e4 <__mdiff+0x5c>
 8017712:	45bc      	cmp	ip, r7
 8017714:	d304      	bcc.n	8017720 <__mdiff+0x98>
 8017716:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801771a:	b183      	cbz	r3, 801773e <__mdiff+0xb6>
 801771c:	6106      	str	r6, [r0, #16]
 801771e:	e7c5      	b.n	80176ac <__mdiff+0x24>
 8017720:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017724:	fa1e f381 	uxtah	r3, lr, r1
 8017728:	141a      	asrs	r2, r3, #16
 801772a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801772e:	b29b      	uxth	r3, r3
 8017730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017734:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017738:	f845 3b04 	str.w	r3, [r5], #4
 801773c:	e7e9      	b.n	8017712 <__mdiff+0x8a>
 801773e:	3e01      	subs	r6, #1
 8017740:	e7e9      	b.n	8017716 <__mdiff+0x8e>
	...

08017744 <__ulp>:
 8017744:	4b12      	ldr	r3, [pc, #72]	; (8017790 <__ulp+0x4c>)
 8017746:	ee10 2a90 	vmov	r2, s1
 801774a:	401a      	ands	r2, r3
 801774c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017750:	2b00      	cmp	r3, #0
 8017752:	dd04      	ble.n	801775e <__ulp+0x1a>
 8017754:	2000      	movs	r0, #0
 8017756:	4619      	mov	r1, r3
 8017758:	ec41 0b10 	vmov	d0, r0, r1
 801775c:	4770      	bx	lr
 801775e:	425b      	negs	r3, r3
 8017760:	151b      	asrs	r3, r3, #20
 8017762:	2b13      	cmp	r3, #19
 8017764:	f04f 0000 	mov.w	r0, #0
 8017768:	f04f 0100 	mov.w	r1, #0
 801776c:	dc04      	bgt.n	8017778 <__ulp+0x34>
 801776e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017772:	fa42 f103 	asr.w	r1, r2, r3
 8017776:	e7ef      	b.n	8017758 <__ulp+0x14>
 8017778:	3b14      	subs	r3, #20
 801777a:	2b1e      	cmp	r3, #30
 801777c:	f04f 0201 	mov.w	r2, #1
 8017780:	bfda      	itte	le
 8017782:	f1c3 031f 	rsble	r3, r3, #31
 8017786:	fa02 f303 	lslle.w	r3, r2, r3
 801778a:	4613      	movgt	r3, r2
 801778c:	4618      	mov	r0, r3
 801778e:	e7e3      	b.n	8017758 <__ulp+0x14>
 8017790:	7ff00000 	.word	0x7ff00000

08017794 <__b2d>:
 8017794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017796:	6905      	ldr	r5, [r0, #16]
 8017798:	f100 0714 	add.w	r7, r0, #20
 801779c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80177a0:	1f2e      	subs	r6, r5, #4
 80177a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80177a6:	4620      	mov	r0, r4
 80177a8:	f7ff fdc4 	bl	8017334 <__hi0bits>
 80177ac:	f1c0 0320 	rsb	r3, r0, #32
 80177b0:	280a      	cmp	r0, #10
 80177b2:	600b      	str	r3, [r1, #0]
 80177b4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801782c <__b2d+0x98>
 80177b8:	dc14      	bgt.n	80177e4 <__b2d+0x50>
 80177ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80177be:	fa24 f10e 	lsr.w	r1, r4, lr
 80177c2:	42b7      	cmp	r7, r6
 80177c4:	ea41 030c 	orr.w	r3, r1, ip
 80177c8:	bf34      	ite	cc
 80177ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80177ce:	2100      	movcs	r1, #0
 80177d0:	3015      	adds	r0, #21
 80177d2:	fa04 f000 	lsl.w	r0, r4, r0
 80177d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80177da:	ea40 0201 	orr.w	r2, r0, r1
 80177de:	ec43 2b10 	vmov	d0, r2, r3
 80177e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e4:	42b7      	cmp	r7, r6
 80177e6:	bf3a      	itte	cc
 80177e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80177ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80177f0:	2100      	movcs	r1, #0
 80177f2:	380b      	subs	r0, #11
 80177f4:	d015      	beq.n	8017822 <__b2d+0x8e>
 80177f6:	4084      	lsls	r4, r0
 80177f8:	f1c0 0520 	rsb	r5, r0, #32
 80177fc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017800:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017804:	42be      	cmp	r6, r7
 8017806:	fa21 fc05 	lsr.w	ip, r1, r5
 801780a:	ea44 030c 	orr.w	r3, r4, ip
 801780e:	bf8c      	ite	hi
 8017810:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017814:	2400      	movls	r4, #0
 8017816:	fa01 f000 	lsl.w	r0, r1, r0
 801781a:	40ec      	lsrs	r4, r5
 801781c:	ea40 0204 	orr.w	r2, r0, r4
 8017820:	e7dd      	b.n	80177de <__b2d+0x4a>
 8017822:	ea44 030c 	orr.w	r3, r4, ip
 8017826:	460a      	mov	r2, r1
 8017828:	e7d9      	b.n	80177de <__b2d+0x4a>
 801782a:	bf00      	nop
 801782c:	3ff00000 	.word	0x3ff00000

08017830 <__d2b>:
 8017830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017834:	460e      	mov	r6, r1
 8017836:	2101      	movs	r1, #1
 8017838:	ec59 8b10 	vmov	r8, r9, d0
 801783c:	4615      	mov	r5, r2
 801783e:	f7ff fcb5 	bl	80171ac <_Balloc>
 8017842:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017846:	4607      	mov	r7, r0
 8017848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801784c:	bb34      	cbnz	r4, 801789c <__d2b+0x6c>
 801784e:	9301      	str	r3, [sp, #4]
 8017850:	f1b8 0300 	subs.w	r3, r8, #0
 8017854:	d027      	beq.n	80178a6 <__d2b+0x76>
 8017856:	a802      	add	r0, sp, #8
 8017858:	f840 3d08 	str.w	r3, [r0, #-8]!
 801785c:	f7ff fd89 	bl	8017372 <__lo0bits>
 8017860:	9900      	ldr	r1, [sp, #0]
 8017862:	b1f0      	cbz	r0, 80178a2 <__d2b+0x72>
 8017864:	9a01      	ldr	r2, [sp, #4]
 8017866:	f1c0 0320 	rsb	r3, r0, #32
 801786a:	fa02 f303 	lsl.w	r3, r2, r3
 801786e:	430b      	orrs	r3, r1
 8017870:	40c2      	lsrs	r2, r0
 8017872:	617b      	str	r3, [r7, #20]
 8017874:	9201      	str	r2, [sp, #4]
 8017876:	9b01      	ldr	r3, [sp, #4]
 8017878:	61bb      	str	r3, [r7, #24]
 801787a:	2b00      	cmp	r3, #0
 801787c:	bf14      	ite	ne
 801787e:	2102      	movne	r1, #2
 8017880:	2101      	moveq	r1, #1
 8017882:	6139      	str	r1, [r7, #16]
 8017884:	b1c4      	cbz	r4, 80178b8 <__d2b+0x88>
 8017886:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801788a:	4404      	add	r4, r0
 801788c:	6034      	str	r4, [r6, #0]
 801788e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017892:	6028      	str	r0, [r5, #0]
 8017894:	4638      	mov	r0, r7
 8017896:	b003      	add	sp, #12
 8017898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801789c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80178a0:	e7d5      	b.n	801784e <__d2b+0x1e>
 80178a2:	6179      	str	r1, [r7, #20]
 80178a4:	e7e7      	b.n	8017876 <__d2b+0x46>
 80178a6:	a801      	add	r0, sp, #4
 80178a8:	f7ff fd63 	bl	8017372 <__lo0bits>
 80178ac:	9b01      	ldr	r3, [sp, #4]
 80178ae:	617b      	str	r3, [r7, #20]
 80178b0:	2101      	movs	r1, #1
 80178b2:	6139      	str	r1, [r7, #16]
 80178b4:	3020      	adds	r0, #32
 80178b6:	e7e5      	b.n	8017884 <__d2b+0x54>
 80178b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80178bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80178c0:	6030      	str	r0, [r6, #0]
 80178c2:	6918      	ldr	r0, [r3, #16]
 80178c4:	f7ff fd36 	bl	8017334 <__hi0bits>
 80178c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80178cc:	e7e1      	b.n	8017892 <__d2b+0x62>

080178ce <__ratio>:
 80178ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d2:	4688      	mov	r8, r1
 80178d4:	4669      	mov	r1, sp
 80178d6:	4681      	mov	r9, r0
 80178d8:	f7ff ff5c 	bl	8017794 <__b2d>
 80178dc:	a901      	add	r1, sp, #4
 80178de:	4640      	mov	r0, r8
 80178e0:	ec57 6b10 	vmov	r6, r7, d0
 80178e4:	f7ff ff56 	bl	8017794 <__b2d>
 80178e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80178ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80178f0:	eba3 0c02 	sub.w	ip, r3, r2
 80178f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80178f8:	1a9b      	subs	r3, r3, r2
 80178fa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80178fe:	ec5b ab10 	vmov	sl, fp, d0
 8017902:	2b00      	cmp	r3, #0
 8017904:	bfce      	itee	gt
 8017906:	463a      	movgt	r2, r7
 8017908:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801790c:	465a      	movle	r2, fp
 801790e:	4659      	mov	r1, fp
 8017910:	463d      	mov	r5, r7
 8017912:	bfd4      	ite	le
 8017914:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017918:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801791c:	4630      	mov	r0, r6
 801791e:	ee10 2a10 	vmov	r2, s0
 8017922:	460b      	mov	r3, r1
 8017924:	4629      	mov	r1, r5
 8017926:	f7e8 ffa9 	bl	800087c <__aeabi_ddiv>
 801792a:	ec41 0b10 	vmov	d0, r0, r1
 801792e:	b003      	add	sp, #12
 8017930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017934 <__copybits>:
 8017934:	3901      	subs	r1, #1
 8017936:	b510      	push	{r4, lr}
 8017938:	1149      	asrs	r1, r1, #5
 801793a:	6914      	ldr	r4, [r2, #16]
 801793c:	3101      	adds	r1, #1
 801793e:	f102 0314 	add.w	r3, r2, #20
 8017942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801794a:	42a3      	cmp	r3, r4
 801794c:	4602      	mov	r2, r0
 801794e:	d303      	bcc.n	8017958 <__copybits+0x24>
 8017950:	2300      	movs	r3, #0
 8017952:	428a      	cmp	r2, r1
 8017954:	d305      	bcc.n	8017962 <__copybits+0x2e>
 8017956:	bd10      	pop	{r4, pc}
 8017958:	f853 2b04 	ldr.w	r2, [r3], #4
 801795c:	f840 2b04 	str.w	r2, [r0], #4
 8017960:	e7f3      	b.n	801794a <__copybits+0x16>
 8017962:	f842 3b04 	str.w	r3, [r2], #4
 8017966:	e7f4      	b.n	8017952 <__copybits+0x1e>

08017968 <__any_on>:
 8017968:	f100 0214 	add.w	r2, r0, #20
 801796c:	6900      	ldr	r0, [r0, #16]
 801796e:	114b      	asrs	r3, r1, #5
 8017970:	4298      	cmp	r0, r3
 8017972:	b510      	push	{r4, lr}
 8017974:	db11      	blt.n	801799a <__any_on+0x32>
 8017976:	dd0a      	ble.n	801798e <__any_on+0x26>
 8017978:	f011 011f 	ands.w	r1, r1, #31
 801797c:	d007      	beq.n	801798e <__any_on+0x26>
 801797e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017982:	fa24 f001 	lsr.w	r0, r4, r1
 8017986:	fa00 f101 	lsl.w	r1, r0, r1
 801798a:	428c      	cmp	r4, r1
 801798c:	d10b      	bne.n	80179a6 <__any_on+0x3e>
 801798e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017992:	4293      	cmp	r3, r2
 8017994:	d803      	bhi.n	801799e <__any_on+0x36>
 8017996:	2000      	movs	r0, #0
 8017998:	bd10      	pop	{r4, pc}
 801799a:	4603      	mov	r3, r0
 801799c:	e7f7      	b.n	801798e <__any_on+0x26>
 801799e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80179a2:	2900      	cmp	r1, #0
 80179a4:	d0f5      	beq.n	8017992 <__any_on+0x2a>
 80179a6:	2001      	movs	r0, #1
 80179a8:	e7f6      	b.n	8017998 <__any_on+0x30>

080179aa <_calloc_r>:
 80179aa:	b538      	push	{r3, r4, r5, lr}
 80179ac:	fb02 f401 	mul.w	r4, r2, r1
 80179b0:	4621      	mov	r1, r4
 80179b2:	f000 f857 	bl	8017a64 <_malloc_r>
 80179b6:	4605      	mov	r5, r0
 80179b8:	b118      	cbz	r0, 80179c2 <_calloc_r+0x18>
 80179ba:	4622      	mov	r2, r4
 80179bc:	2100      	movs	r1, #0
 80179be:	f7fc fcaa 	bl	8014316 <memset>
 80179c2:	4628      	mov	r0, r5
 80179c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080179c8 <_free_r>:
 80179c8:	b538      	push	{r3, r4, r5, lr}
 80179ca:	4605      	mov	r5, r0
 80179cc:	2900      	cmp	r1, #0
 80179ce:	d045      	beq.n	8017a5c <_free_r+0x94>
 80179d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179d4:	1f0c      	subs	r4, r1, #4
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	bfb8      	it	lt
 80179da:	18e4      	addlt	r4, r4, r3
 80179dc:	f000 fe30 	bl	8018640 <__malloc_lock>
 80179e0:	4a1f      	ldr	r2, [pc, #124]	; (8017a60 <_free_r+0x98>)
 80179e2:	6813      	ldr	r3, [r2, #0]
 80179e4:	4610      	mov	r0, r2
 80179e6:	b933      	cbnz	r3, 80179f6 <_free_r+0x2e>
 80179e8:	6063      	str	r3, [r4, #4]
 80179ea:	6014      	str	r4, [r2, #0]
 80179ec:	4628      	mov	r0, r5
 80179ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179f2:	f000 be26 	b.w	8018642 <__malloc_unlock>
 80179f6:	42a3      	cmp	r3, r4
 80179f8:	d90c      	bls.n	8017a14 <_free_r+0x4c>
 80179fa:	6821      	ldr	r1, [r4, #0]
 80179fc:	1862      	adds	r2, r4, r1
 80179fe:	4293      	cmp	r3, r2
 8017a00:	bf04      	itt	eq
 8017a02:	681a      	ldreq	r2, [r3, #0]
 8017a04:	685b      	ldreq	r3, [r3, #4]
 8017a06:	6063      	str	r3, [r4, #4]
 8017a08:	bf04      	itt	eq
 8017a0a:	1852      	addeq	r2, r2, r1
 8017a0c:	6022      	streq	r2, [r4, #0]
 8017a0e:	6004      	str	r4, [r0, #0]
 8017a10:	e7ec      	b.n	80179ec <_free_r+0x24>
 8017a12:	4613      	mov	r3, r2
 8017a14:	685a      	ldr	r2, [r3, #4]
 8017a16:	b10a      	cbz	r2, 8017a1c <_free_r+0x54>
 8017a18:	42a2      	cmp	r2, r4
 8017a1a:	d9fa      	bls.n	8017a12 <_free_r+0x4a>
 8017a1c:	6819      	ldr	r1, [r3, #0]
 8017a1e:	1858      	adds	r0, r3, r1
 8017a20:	42a0      	cmp	r0, r4
 8017a22:	d10b      	bne.n	8017a3c <_free_r+0x74>
 8017a24:	6820      	ldr	r0, [r4, #0]
 8017a26:	4401      	add	r1, r0
 8017a28:	1858      	adds	r0, r3, r1
 8017a2a:	4282      	cmp	r2, r0
 8017a2c:	6019      	str	r1, [r3, #0]
 8017a2e:	d1dd      	bne.n	80179ec <_free_r+0x24>
 8017a30:	6810      	ldr	r0, [r2, #0]
 8017a32:	6852      	ldr	r2, [r2, #4]
 8017a34:	605a      	str	r2, [r3, #4]
 8017a36:	4401      	add	r1, r0
 8017a38:	6019      	str	r1, [r3, #0]
 8017a3a:	e7d7      	b.n	80179ec <_free_r+0x24>
 8017a3c:	d902      	bls.n	8017a44 <_free_r+0x7c>
 8017a3e:	230c      	movs	r3, #12
 8017a40:	602b      	str	r3, [r5, #0]
 8017a42:	e7d3      	b.n	80179ec <_free_r+0x24>
 8017a44:	6820      	ldr	r0, [r4, #0]
 8017a46:	1821      	adds	r1, r4, r0
 8017a48:	428a      	cmp	r2, r1
 8017a4a:	bf04      	itt	eq
 8017a4c:	6811      	ldreq	r1, [r2, #0]
 8017a4e:	6852      	ldreq	r2, [r2, #4]
 8017a50:	6062      	str	r2, [r4, #4]
 8017a52:	bf04      	itt	eq
 8017a54:	1809      	addeq	r1, r1, r0
 8017a56:	6021      	streq	r1, [r4, #0]
 8017a58:	605c      	str	r4, [r3, #4]
 8017a5a:	e7c7      	b.n	80179ec <_free_r+0x24>
 8017a5c:	bd38      	pop	{r3, r4, r5, pc}
 8017a5e:	bf00      	nop
 8017a60:	2003c4ac 	.word	0x2003c4ac

08017a64 <_malloc_r>:
 8017a64:	b570      	push	{r4, r5, r6, lr}
 8017a66:	1ccd      	adds	r5, r1, #3
 8017a68:	f025 0503 	bic.w	r5, r5, #3
 8017a6c:	3508      	adds	r5, #8
 8017a6e:	2d0c      	cmp	r5, #12
 8017a70:	bf38      	it	cc
 8017a72:	250c      	movcc	r5, #12
 8017a74:	2d00      	cmp	r5, #0
 8017a76:	4606      	mov	r6, r0
 8017a78:	db01      	blt.n	8017a7e <_malloc_r+0x1a>
 8017a7a:	42a9      	cmp	r1, r5
 8017a7c:	d903      	bls.n	8017a86 <_malloc_r+0x22>
 8017a7e:	230c      	movs	r3, #12
 8017a80:	6033      	str	r3, [r6, #0]
 8017a82:	2000      	movs	r0, #0
 8017a84:	bd70      	pop	{r4, r5, r6, pc}
 8017a86:	f000 fddb 	bl	8018640 <__malloc_lock>
 8017a8a:	4a21      	ldr	r2, [pc, #132]	; (8017b10 <_malloc_r+0xac>)
 8017a8c:	6814      	ldr	r4, [r2, #0]
 8017a8e:	4621      	mov	r1, r4
 8017a90:	b991      	cbnz	r1, 8017ab8 <_malloc_r+0x54>
 8017a92:	4c20      	ldr	r4, [pc, #128]	; (8017b14 <_malloc_r+0xb0>)
 8017a94:	6823      	ldr	r3, [r4, #0]
 8017a96:	b91b      	cbnz	r3, 8017aa0 <_malloc_r+0x3c>
 8017a98:	4630      	mov	r0, r6
 8017a9a:	f000 fc91 	bl	80183c0 <_sbrk_r>
 8017a9e:	6020      	str	r0, [r4, #0]
 8017aa0:	4629      	mov	r1, r5
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	f000 fc8c 	bl	80183c0 <_sbrk_r>
 8017aa8:	1c43      	adds	r3, r0, #1
 8017aaa:	d124      	bne.n	8017af6 <_malloc_r+0x92>
 8017aac:	230c      	movs	r3, #12
 8017aae:	6033      	str	r3, [r6, #0]
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	f000 fdc6 	bl	8018642 <__malloc_unlock>
 8017ab6:	e7e4      	b.n	8017a82 <_malloc_r+0x1e>
 8017ab8:	680b      	ldr	r3, [r1, #0]
 8017aba:	1b5b      	subs	r3, r3, r5
 8017abc:	d418      	bmi.n	8017af0 <_malloc_r+0x8c>
 8017abe:	2b0b      	cmp	r3, #11
 8017ac0:	d90f      	bls.n	8017ae2 <_malloc_r+0x7e>
 8017ac2:	600b      	str	r3, [r1, #0]
 8017ac4:	50cd      	str	r5, [r1, r3]
 8017ac6:	18cc      	adds	r4, r1, r3
 8017ac8:	4630      	mov	r0, r6
 8017aca:	f000 fdba 	bl	8018642 <__malloc_unlock>
 8017ace:	f104 000b 	add.w	r0, r4, #11
 8017ad2:	1d23      	adds	r3, r4, #4
 8017ad4:	f020 0007 	bic.w	r0, r0, #7
 8017ad8:	1ac3      	subs	r3, r0, r3
 8017ada:	d0d3      	beq.n	8017a84 <_malloc_r+0x20>
 8017adc:	425a      	negs	r2, r3
 8017ade:	50e2      	str	r2, [r4, r3]
 8017ae0:	e7d0      	b.n	8017a84 <_malloc_r+0x20>
 8017ae2:	428c      	cmp	r4, r1
 8017ae4:	684b      	ldr	r3, [r1, #4]
 8017ae6:	bf16      	itet	ne
 8017ae8:	6063      	strne	r3, [r4, #4]
 8017aea:	6013      	streq	r3, [r2, #0]
 8017aec:	460c      	movne	r4, r1
 8017aee:	e7eb      	b.n	8017ac8 <_malloc_r+0x64>
 8017af0:	460c      	mov	r4, r1
 8017af2:	6849      	ldr	r1, [r1, #4]
 8017af4:	e7cc      	b.n	8017a90 <_malloc_r+0x2c>
 8017af6:	1cc4      	adds	r4, r0, #3
 8017af8:	f024 0403 	bic.w	r4, r4, #3
 8017afc:	42a0      	cmp	r0, r4
 8017afe:	d005      	beq.n	8017b0c <_malloc_r+0xa8>
 8017b00:	1a21      	subs	r1, r4, r0
 8017b02:	4630      	mov	r0, r6
 8017b04:	f000 fc5c 	bl	80183c0 <_sbrk_r>
 8017b08:	3001      	adds	r0, #1
 8017b0a:	d0cf      	beq.n	8017aac <_malloc_r+0x48>
 8017b0c:	6025      	str	r5, [r4, #0]
 8017b0e:	e7db      	b.n	8017ac8 <_malloc_r+0x64>
 8017b10:	2003c4ac 	.word	0x2003c4ac
 8017b14:	2003c4b0 	.word	0x2003c4b0

08017b18 <__ssputs_r>:
 8017b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b1c:	688e      	ldr	r6, [r1, #8]
 8017b1e:	429e      	cmp	r6, r3
 8017b20:	4682      	mov	sl, r0
 8017b22:	460c      	mov	r4, r1
 8017b24:	4690      	mov	r8, r2
 8017b26:	4699      	mov	r9, r3
 8017b28:	d837      	bhi.n	8017b9a <__ssputs_r+0x82>
 8017b2a:	898a      	ldrh	r2, [r1, #12]
 8017b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b30:	d031      	beq.n	8017b96 <__ssputs_r+0x7e>
 8017b32:	6825      	ldr	r5, [r4, #0]
 8017b34:	6909      	ldr	r1, [r1, #16]
 8017b36:	1a6f      	subs	r7, r5, r1
 8017b38:	6965      	ldr	r5, [r4, #20]
 8017b3a:	2302      	movs	r3, #2
 8017b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b40:	fb95 f5f3 	sdiv	r5, r5, r3
 8017b44:	f109 0301 	add.w	r3, r9, #1
 8017b48:	443b      	add	r3, r7
 8017b4a:	429d      	cmp	r5, r3
 8017b4c:	bf38      	it	cc
 8017b4e:	461d      	movcc	r5, r3
 8017b50:	0553      	lsls	r3, r2, #21
 8017b52:	d530      	bpl.n	8017bb6 <__ssputs_r+0x9e>
 8017b54:	4629      	mov	r1, r5
 8017b56:	f7ff ff85 	bl	8017a64 <_malloc_r>
 8017b5a:	4606      	mov	r6, r0
 8017b5c:	b950      	cbnz	r0, 8017b74 <__ssputs_r+0x5c>
 8017b5e:	230c      	movs	r3, #12
 8017b60:	f8ca 3000 	str.w	r3, [sl]
 8017b64:	89a3      	ldrh	r3, [r4, #12]
 8017b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b6a:	81a3      	strh	r3, [r4, #12]
 8017b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b74:	463a      	mov	r2, r7
 8017b76:	6921      	ldr	r1, [r4, #16]
 8017b78:	f7fc fbc2 	bl	8014300 <memcpy>
 8017b7c:	89a3      	ldrh	r3, [r4, #12]
 8017b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b86:	81a3      	strh	r3, [r4, #12]
 8017b88:	6126      	str	r6, [r4, #16]
 8017b8a:	6165      	str	r5, [r4, #20]
 8017b8c:	443e      	add	r6, r7
 8017b8e:	1bed      	subs	r5, r5, r7
 8017b90:	6026      	str	r6, [r4, #0]
 8017b92:	60a5      	str	r5, [r4, #8]
 8017b94:	464e      	mov	r6, r9
 8017b96:	454e      	cmp	r6, r9
 8017b98:	d900      	bls.n	8017b9c <__ssputs_r+0x84>
 8017b9a:	464e      	mov	r6, r9
 8017b9c:	4632      	mov	r2, r6
 8017b9e:	4641      	mov	r1, r8
 8017ba0:	6820      	ldr	r0, [r4, #0]
 8017ba2:	f000 fd34 	bl	801860e <memmove>
 8017ba6:	68a3      	ldr	r3, [r4, #8]
 8017ba8:	1b9b      	subs	r3, r3, r6
 8017baa:	60a3      	str	r3, [r4, #8]
 8017bac:	6823      	ldr	r3, [r4, #0]
 8017bae:	441e      	add	r6, r3
 8017bb0:	6026      	str	r6, [r4, #0]
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	e7dc      	b.n	8017b70 <__ssputs_r+0x58>
 8017bb6:	462a      	mov	r2, r5
 8017bb8:	f000 fd44 	bl	8018644 <_realloc_r>
 8017bbc:	4606      	mov	r6, r0
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	d1e2      	bne.n	8017b88 <__ssputs_r+0x70>
 8017bc2:	6921      	ldr	r1, [r4, #16]
 8017bc4:	4650      	mov	r0, sl
 8017bc6:	f7ff feff 	bl	80179c8 <_free_r>
 8017bca:	e7c8      	b.n	8017b5e <__ssputs_r+0x46>

08017bcc <_svfiprintf_r>:
 8017bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd0:	461d      	mov	r5, r3
 8017bd2:	898b      	ldrh	r3, [r1, #12]
 8017bd4:	061f      	lsls	r7, r3, #24
 8017bd6:	b09d      	sub	sp, #116	; 0x74
 8017bd8:	4680      	mov	r8, r0
 8017bda:	460c      	mov	r4, r1
 8017bdc:	4616      	mov	r6, r2
 8017bde:	d50f      	bpl.n	8017c00 <_svfiprintf_r+0x34>
 8017be0:	690b      	ldr	r3, [r1, #16]
 8017be2:	b96b      	cbnz	r3, 8017c00 <_svfiprintf_r+0x34>
 8017be4:	2140      	movs	r1, #64	; 0x40
 8017be6:	f7ff ff3d 	bl	8017a64 <_malloc_r>
 8017bea:	6020      	str	r0, [r4, #0]
 8017bec:	6120      	str	r0, [r4, #16]
 8017bee:	b928      	cbnz	r0, 8017bfc <_svfiprintf_r+0x30>
 8017bf0:	230c      	movs	r3, #12
 8017bf2:	f8c8 3000 	str.w	r3, [r8]
 8017bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bfa:	e0c8      	b.n	8017d8e <_svfiprintf_r+0x1c2>
 8017bfc:	2340      	movs	r3, #64	; 0x40
 8017bfe:	6163      	str	r3, [r4, #20]
 8017c00:	2300      	movs	r3, #0
 8017c02:	9309      	str	r3, [sp, #36]	; 0x24
 8017c04:	2320      	movs	r3, #32
 8017c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c0a:	2330      	movs	r3, #48	; 0x30
 8017c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c10:	9503      	str	r5, [sp, #12]
 8017c12:	f04f 0b01 	mov.w	fp, #1
 8017c16:	4637      	mov	r7, r6
 8017c18:	463d      	mov	r5, r7
 8017c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c1e:	b10b      	cbz	r3, 8017c24 <_svfiprintf_r+0x58>
 8017c20:	2b25      	cmp	r3, #37	; 0x25
 8017c22:	d13e      	bne.n	8017ca2 <_svfiprintf_r+0xd6>
 8017c24:	ebb7 0a06 	subs.w	sl, r7, r6
 8017c28:	d00b      	beq.n	8017c42 <_svfiprintf_r+0x76>
 8017c2a:	4653      	mov	r3, sl
 8017c2c:	4632      	mov	r2, r6
 8017c2e:	4621      	mov	r1, r4
 8017c30:	4640      	mov	r0, r8
 8017c32:	f7ff ff71 	bl	8017b18 <__ssputs_r>
 8017c36:	3001      	adds	r0, #1
 8017c38:	f000 80a4 	beq.w	8017d84 <_svfiprintf_r+0x1b8>
 8017c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c3e:	4453      	add	r3, sl
 8017c40:	9309      	str	r3, [sp, #36]	; 0x24
 8017c42:	783b      	ldrb	r3, [r7, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	f000 809d 	beq.w	8017d84 <_svfiprintf_r+0x1b8>
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c54:	9304      	str	r3, [sp, #16]
 8017c56:	9307      	str	r3, [sp, #28]
 8017c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8017c5e:	462f      	mov	r7, r5
 8017c60:	2205      	movs	r2, #5
 8017c62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017c66:	4850      	ldr	r0, [pc, #320]	; (8017da8 <_svfiprintf_r+0x1dc>)
 8017c68:	f7e8 fad2 	bl	8000210 <memchr>
 8017c6c:	9b04      	ldr	r3, [sp, #16]
 8017c6e:	b9d0      	cbnz	r0, 8017ca6 <_svfiprintf_r+0xda>
 8017c70:	06d9      	lsls	r1, r3, #27
 8017c72:	bf44      	itt	mi
 8017c74:	2220      	movmi	r2, #32
 8017c76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c7a:	071a      	lsls	r2, r3, #28
 8017c7c:	bf44      	itt	mi
 8017c7e:	222b      	movmi	r2, #43	; 0x2b
 8017c80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c84:	782a      	ldrb	r2, [r5, #0]
 8017c86:	2a2a      	cmp	r2, #42	; 0x2a
 8017c88:	d015      	beq.n	8017cb6 <_svfiprintf_r+0xea>
 8017c8a:	9a07      	ldr	r2, [sp, #28]
 8017c8c:	462f      	mov	r7, r5
 8017c8e:	2000      	movs	r0, #0
 8017c90:	250a      	movs	r5, #10
 8017c92:	4639      	mov	r1, r7
 8017c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c98:	3b30      	subs	r3, #48	; 0x30
 8017c9a:	2b09      	cmp	r3, #9
 8017c9c:	d94d      	bls.n	8017d3a <_svfiprintf_r+0x16e>
 8017c9e:	b1b8      	cbz	r0, 8017cd0 <_svfiprintf_r+0x104>
 8017ca0:	e00f      	b.n	8017cc2 <_svfiprintf_r+0xf6>
 8017ca2:	462f      	mov	r7, r5
 8017ca4:	e7b8      	b.n	8017c18 <_svfiprintf_r+0x4c>
 8017ca6:	4a40      	ldr	r2, [pc, #256]	; (8017da8 <_svfiprintf_r+0x1dc>)
 8017ca8:	1a80      	subs	r0, r0, r2
 8017caa:	fa0b f000 	lsl.w	r0, fp, r0
 8017cae:	4318      	orrs	r0, r3
 8017cb0:	9004      	str	r0, [sp, #16]
 8017cb2:	463d      	mov	r5, r7
 8017cb4:	e7d3      	b.n	8017c5e <_svfiprintf_r+0x92>
 8017cb6:	9a03      	ldr	r2, [sp, #12]
 8017cb8:	1d11      	adds	r1, r2, #4
 8017cba:	6812      	ldr	r2, [r2, #0]
 8017cbc:	9103      	str	r1, [sp, #12]
 8017cbe:	2a00      	cmp	r2, #0
 8017cc0:	db01      	blt.n	8017cc6 <_svfiprintf_r+0xfa>
 8017cc2:	9207      	str	r2, [sp, #28]
 8017cc4:	e004      	b.n	8017cd0 <_svfiprintf_r+0x104>
 8017cc6:	4252      	negs	r2, r2
 8017cc8:	f043 0302 	orr.w	r3, r3, #2
 8017ccc:	9207      	str	r2, [sp, #28]
 8017cce:	9304      	str	r3, [sp, #16]
 8017cd0:	783b      	ldrb	r3, [r7, #0]
 8017cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8017cd4:	d10c      	bne.n	8017cf0 <_svfiprintf_r+0x124>
 8017cd6:	787b      	ldrb	r3, [r7, #1]
 8017cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8017cda:	d133      	bne.n	8017d44 <_svfiprintf_r+0x178>
 8017cdc:	9b03      	ldr	r3, [sp, #12]
 8017cde:	1d1a      	adds	r2, r3, #4
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	9203      	str	r2, [sp, #12]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	bfb8      	it	lt
 8017ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017cec:	3702      	adds	r7, #2
 8017cee:	9305      	str	r3, [sp, #20]
 8017cf0:	4d2e      	ldr	r5, [pc, #184]	; (8017dac <_svfiprintf_r+0x1e0>)
 8017cf2:	7839      	ldrb	r1, [r7, #0]
 8017cf4:	2203      	movs	r2, #3
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	f7e8 fa8a 	bl	8000210 <memchr>
 8017cfc:	b138      	cbz	r0, 8017d0e <_svfiprintf_r+0x142>
 8017cfe:	2340      	movs	r3, #64	; 0x40
 8017d00:	1b40      	subs	r0, r0, r5
 8017d02:	fa03 f000 	lsl.w	r0, r3, r0
 8017d06:	9b04      	ldr	r3, [sp, #16]
 8017d08:	4303      	orrs	r3, r0
 8017d0a:	3701      	adds	r7, #1
 8017d0c:	9304      	str	r3, [sp, #16]
 8017d0e:	7839      	ldrb	r1, [r7, #0]
 8017d10:	4827      	ldr	r0, [pc, #156]	; (8017db0 <_svfiprintf_r+0x1e4>)
 8017d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d16:	2206      	movs	r2, #6
 8017d18:	1c7e      	adds	r6, r7, #1
 8017d1a:	f7e8 fa79 	bl	8000210 <memchr>
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	d038      	beq.n	8017d94 <_svfiprintf_r+0x1c8>
 8017d22:	4b24      	ldr	r3, [pc, #144]	; (8017db4 <_svfiprintf_r+0x1e8>)
 8017d24:	bb13      	cbnz	r3, 8017d6c <_svfiprintf_r+0x1a0>
 8017d26:	9b03      	ldr	r3, [sp, #12]
 8017d28:	3307      	adds	r3, #7
 8017d2a:	f023 0307 	bic.w	r3, r3, #7
 8017d2e:	3308      	adds	r3, #8
 8017d30:	9303      	str	r3, [sp, #12]
 8017d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d34:	444b      	add	r3, r9
 8017d36:	9309      	str	r3, [sp, #36]	; 0x24
 8017d38:	e76d      	b.n	8017c16 <_svfiprintf_r+0x4a>
 8017d3a:	fb05 3202 	mla	r2, r5, r2, r3
 8017d3e:	2001      	movs	r0, #1
 8017d40:	460f      	mov	r7, r1
 8017d42:	e7a6      	b.n	8017c92 <_svfiprintf_r+0xc6>
 8017d44:	2300      	movs	r3, #0
 8017d46:	3701      	adds	r7, #1
 8017d48:	9305      	str	r3, [sp, #20]
 8017d4a:	4619      	mov	r1, r3
 8017d4c:	250a      	movs	r5, #10
 8017d4e:	4638      	mov	r0, r7
 8017d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d54:	3a30      	subs	r2, #48	; 0x30
 8017d56:	2a09      	cmp	r2, #9
 8017d58:	d903      	bls.n	8017d62 <_svfiprintf_r+0x196>
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d0c8      	beq.n	8017cf0 <_svfiprintf_r+0x124>
 8017d5e:	9105      	str	r1, [sp, #20]
 8017d60:	e7c6      	b.n	8017cf0 <_svfiprintf_r+0x124>
 8017d62:	fb05 2101 	mla	r1, r5, r1, r2
 8017d66:	2301      	movs	r3, #1
 8017d68:	4607      	mov	r7, r0
 8017d6a:	e7f0      	b.n	8017d4e <_svfiprintf_r+0x182>
 8017d6c:	ab03      	add	r3, sp, #12
 8017d6e:	9300      	str	r3, [sp, #0]
 8017d70:	4622      	mov	r2, r4
 8017d72:	4b11      	ldr	r3, [pc, #68]	; (8017db8 <_svfiprintf_r+0x1ec>)
 8017d74:	a904      	add	r1, sp, #16
 8017d76:	4640      	mov	r0, r8
 8017d78:	f7fc fb6a 	bl	8014450 <_printf_float>
 8017d7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017d80:	4681      	mov	r9, r0
 8017d82:	d1d6      	bne.n	8017d32 <_svfiprintf_r+0x166>
 8017d84:	89a3      	ldrh	r3, [r4, #12]
 8017d86:	065b      	lsls	r3, r3, #25
 8017d88:	f53f af35 	bmi.w	8017bf6 <_svfiprintf_r+0x2a>
 8017d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d8e:	b01d      	add	sp, #116	; 0x74
 8017d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d94:	ab03      	add	r3, sp, #12
 8017d96:	9300      	str	r3, [sp, #0]
 8017d98:	4622      	mov	r2, r4
 8017d9a:	4b07      	ldr	r3, [pc, #28]	; (8017db8 <_svfiprintf_r+0x1ec>)
 8017d9c:	a904      	add	r1, sp, #16
 8017d9e:	4640      	mov	r0, r8
 8017da0:	f7fc fe0c 	bl	80149bc <_printf_i>
 8017da4:	e7ea      	b.n	8017d7c <_svfiprintf_r+0x1b0>
 8017da6:	bf00      	nop
 8017da8:	080190ac 	.word	0x080190ac
 8017dac:	080190b2 	.word	0x080190b2
 8017db0:	080190b6 	.word	0x080190b6
 8017db4:	08014451 	.word	0x08014451
 8017db8:	08017b19 	.word	0x08017b19

08017dbc <_sungetc_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	1c4b      	adds	r3, r1, #1
 8017dc0:	4614      	mov	r4, r2
 8017dc2:	d103      	bne.n	8017dcc <_sungetc_r+0x10>
 8017dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8017dc8:	4628      	mov	r0, r5
 8017dca:	bd38      	pop	{r3, r4, r5, pc}
 8017dcc:	8993      	ldrh	r3, [r2, #12]
 8017dce:	f023 0320 	bic.w	r3, r3, #32
 8017dd2:	8193      	strh	r3, [r2, #12]
 8017dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017dd6:	6852      	ldr	r2, [r2, #4]
 8017dd8:	b2cd      	uxtb	r5, r1
 8017dda:	b18b      	cbz	r3, 8017e00 <_sungetc_r+0x44>
 8017ddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017dde:	4293      	cmp	r3, r2
 8017de0:	dd08      	ble.n	8017df4 <_sungetc_r+0x38>
 8017de2:	6823      	ldr	r3, [r4, #0]
 8017de4:	1e5a      	subs	r2, r3, #1
 8017de6:	6022      	str	r2, [r4, #0]
 8017de8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017dec:	6863      	ldr	r3, [r4, #4]
 8017dee:	3301      	adds	r3, #1
 8017df0:	6063      	str	r3, [r4, #4]
 8017df2:	e7e9      	b.n	8017dc8 <_sungetc_r+0xc>
 8017df4:	4621      	mov	r1, r4
 8017df6:	f000 fbc3 	bl	8018580 <__submore>
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d0f1      	beq.n	8017de2 <_sungetc_r+0x26>
 8017dfe:	e7e1      	b.n	8017dc4 <_sungetc_r+0x8>
 8017e00:	6921      	ldr	r1, [r4, #16]
 8017e02:	6823      	ldr	r3, [r4, #0]
 8017e04:	b151      	cbz	r1, 8017e1c <_sungetc_r+0x60>
 8017e06:	4299      	cmp	r1, r3
 8017e08:	d208      	bcs.n	8017e1c <_sungetc_r+0x60>
 8017e0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017e0e:	42a9      	cmp	r1, r5
 8017e10:	d104      	bne.n	8017e1c <_sungetc_r+0x60>
 8017e12:	3b01      	subs	r3, #1
 8017e14:	3201      	adds	r2, #1
 8017e16:	6023      	str	r3, [r4, #0]
 8017e18:	6062      	str	r2, [r4, #4]
 8017e1a:	e7d5      	b.n	8017dc8 <_sungetc_r+0xc>
 8017e1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e24:	6363      	str	r3, [r4, #52]	; 0x34
 8017e26:	2303      	movs	r3, #3
 8017e28:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e2a:	4623      	mov	r3, r4
 8017e2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017e30:	6023      	str	r3, [r4, #0]
 8017e32:	2301      	movs	r3, #1
 8017e34:	e7dc      	b.n	8017df0 <_sungetc_r+0x34>

08017e36 <__ssrefill_r>:
 8017e36:	b510      	push	{r4, lr}
 8017e38:	460c      	mov	r4, r1
 8017e3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e3c:	b169      	cbz	r1, 8017e5a <__ssrefill_r+0x24>
 8017e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e42:	4299      	cmp	r1, r3
 8017e44:	d001      	beq.n	8017e4a <__ssrefill_r+0x14>
 8017e46:	f7ff fdbf 	bl	80179c8 <_free_r>
 8017e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e4c:	6063      	str	r3, [r4, #4]
 8017e4e:	2000      	movs	r0, #0
 8017e50:	6360      	str	r0, [r4, #52]	; 0x34
 8017e52:	b113      	cbz	r3, 8017e5a <__ssrefill_r+0x24>
 8017e54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e56:	6023      	str	r3, [r4, #0]
 8017e58:	bd10      	pop	{r4, pc}
 8017e5a:	6923      	ldr	r3, [r4, #16]
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	2300      	movs	r3, #0
 8017e60:	6063      	str	r3, [r4, #4]
 8017e62:	89a3      	ldrh	r3, [r4, #12]
 8017e64:	f043 0320 	orr.w	r3, r3, #32
 8017e68:	81a3      	strh	r3, [r4, #12]
 8017e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e6e:	e7f3      	b.n	8017e58 <__ssrefill_r+0x22>

08017e70 <__ssvfiscanf_r>:
 8017e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e74:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017e78:	460c      	mov	r4, r1
 8017e7a:	2100      	movs	r1, #0
 8017e7c:	9144      	str	r1, [sp, #272]	; 0x110
 8017e7e:	9145      	str	r1, [sp, #276]	; 0x114
 8017e80:	499f      	ldr	r1, [pc, #636]	; (8018100 <__ssvfiscanf_r+0x290>)
 8017e82:	91a0      	str	r1, [sp, #640]	; 0x280
 8017e84:	f10d 0804 	add.w	r8, sp, #4
 8017e88:	499e      	ldr	r1, [pc, #632]	; (8018104 <__ssvfiscanf_r+0x294>)
 8017e8a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018108 <__ssvfiscanf_r+0x298>
 8017e8e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017e92:	4606      	mov	r6, r0
 8017e94:	4692      	mov	sl, r2
 8017e96:	91a1      	str	r1, [sp, #644]	; 0x284
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	270a      	movs	r7, #10
 8017e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	f000 812a 	beq.w	80180fa <__ssvfiscanf_r+0x28a>
 8017ea6:	4655      	mov	r5, sl
 8017ea8:	f7ff f948 	bl	801713c <__locale_ctype_ptr>
 8017eac:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017eb0:	4458      	add	r0, fp
 8017eb2:	7843      	ldrb	r3, [r0, #1]
 8017eb4:	f013 0308 	ands.w	r3, r3, #8
 8017eb8:	d01c      	beq.n	8017ef4 <__ssvfiscanf_r+0x84>
 8017eba:	6863      	ldr	r3, [r4, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	dd12      	ble.n	8017ee6 <__ssvfiscanf_r+0x76>
 8017ec0:	f7ff f93c 	bl	801713c <__locale_ctype_ptr>
 8017ec4:	6823      	ldr	r3, [r4, #0]
 8017ec6:	781a      	ldrb	r2, [r3, #0]
 8017ec8:	4410      	add	r0, r2
 8017eca:	7842      	ldrb	r2, [r0, #1]
 8017ecc:	0712      	lsls	r2, r2, #28
 8017ece:	d401      	bmi.n	8017ed4 <__ssvfiscanf_r+0x64>
 8017ed0:	46aa      	mov	sl, r5
 8017ed2:	e7e3      	b.n	8017e9c <__ssvfiscanf_r+0x2c>
 8017ed4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017ed6:	3201      	adds	r2, #1
 8017ed8:	9245      	str	r2, [sp, #276]	; 0x114
 8017eda:	6862      	ldr	r2, [r4, #4]
 8017edc:	3301      	adds	r3, #1
 8017ede:	3a01      	subs	r2, #1
 8017ee0:	6062      	str	r2, [r4, #4]
 8017ee2:	6023      	str	r3, [r4, #0]
 8017ee4:	e7e9      	b.n	8017eba <__ssvfiscanf_r+0x4a>
 8017ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ee8:	4621      	mov	r1, r4
 8017eea:	4630      	mov	r0, r6
 8017eec:	4798      	blx	r3
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	d0e6      	beq.n	8017ec0 <__ssvfiscanf_r+0x50>
 8017ef2:	e7ed      	b.n	8017ed0 <__ssvfiscanf_r+0x60>
 8017ef4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017ef8:	f040 8082 	bne.w	8018000 <__ssvfiscanf_r+0x190>
 8017efc:	9343      	str	r3, [sp, #268]	; 0x10c
 8017efe:	9341      	str	r3, [sp, #260]	; 0x104
 8017f00:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017f04:	2b2a      	cmp	r3, #42	; 0x2a
 8017f06:	d103      	bne.n	8017f10 <__ssvfiscanf_r+0xa0>
 8017f08:	2310      	movs	r3, #16
 8017f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8017f0c:	f10a 0502 	add.w	r5, sl, #2
 8017f10:	46aa      	mov	sl, r5
 8017f12:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017f16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017f1a:	2a09      	cmp	r2, #9
 8017f1c:	d922      	bls.n	8017f64 <__ssvfiscanf_r+0xf4>
 8017f1e:	2203      	movs	r2, #3
 8017f20:	4879      	ldr	r0, [pc, #484]	; (8018108 <__ssvfiscanf_r+0x298>)
 8017f22:	f7e8 f975 	bl	8000210 <memchr>
 8017f26:	b138      	cbz	r0, 8017f38 <__ssvfiscanf_r+0xc8>
 8017f28:	eba0 0309 	sub.w	r3, r0, r9
 8017f2c:	2001      	movs	r0, #1
 8017f2e:	4098      	lsls	r0, r3
 8017f30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f32:	4318      	orrs	r0, r3
 8017f34:	9041      	str	r0, [sp, #260]	; 0x104
 8017f36:	46aa      	mov	sl, r5
 8017f38:	f89a 3000 	ldrb.w	r3, [sl]
 8017f3c:	2b67      	cmp	r3, #103	; 0x67
 8017f3e:	f10a 0501 	add.w	r5, sl, #1
 8017f42:	d82b      	bhi.n	8017f9c <__ssvfiscanf_r+0x12c>
 8017f44:	2b65      	cmp	r3, #101	; 0x65
 8017f46:	f080 809f 	bcs.w	8018088 <__ssvfiscanf_r+0x218>
 8017f4a:	2b47      	cmp	r3, #71	; 0x47
 8017f4c:	d810      	bhi.n	8017f70 <__ssvfiscanf_r+0x100>
 8017f4e:	2b45      	cmp	r3, #69	; 0x45
 8017f50:	f080 809a 	bcs.w	8018088 <__ssvfiscanf_r+0x218>
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d06c      	beq.n	8018032 <__ssvfiscanf_r+0x1c2>
 8017f58:	2b25      	cmp	r3, #37	; 0x25
 8017f5a:	d051      	beq.n	8018000 <__ssvfiscanf_r+0x190>
 8017f5c:	2303      	movs	r3, #3
 8017f5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f60:	9742      	str	r7, [sp, #264]	; 0x108
 8017f62:	e027      	b.n	8017fb4 <__ssvfiscanf_r+0x144>
 8017f64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017f66:	fb07 1303 	mla	r3, r7, r3, r1
 8017f6a:	3b30      	subs	r3, #48	; 0x30
 8017f6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8017f6e:	e7cf      	b.n	8017f10 <__ssvfiscanf_r+0xa0>
 8017f70:	2b5b      	cmp	r3, #91	; 0x5b
 8017f72:	d06a      	beq.n	801804a <__ssvfiscanf_r+0x1da>
 8017f74:	d80c      	bhi.n	8017f90 <__ssvfiscanf_r+0x120>
 8017f76:	2b58      	cmp	r3, #88	; 0x58
 8017f78:	d1f0      	bne.n	8017f5c <__ssvfiscanf_r+0xec>
 8017f7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f80:	9241      	str	r2, [sp, #260]	; 0x104
 8017f82:	2210      	movs	r2, #16
 8017f84:	9242      	str	r2, [sp, #264]	; 0x108
 8017f86:	2b6e      	cmp	r3, #110	; 0x6e
 8017f88:	bf8c      	ite	hi
 8017f8a:	2304      	movhi	r3, #4
 8017f8c:	2303      	movls	r3, #3
 8017f8e:	e010      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 8017f90:	2b63      	cmp	r3, #99	; 0x63
 8017f92:	d065      	beq.n	8018060 <__ssvfiscanf_r+0x1f0>
 8017f94:	2b64      	cmp	r3, #100	; 0x64
 8017f96:	d1e1      	bne.n	8017f5c <__ssvfiscanf_r+0xec>
 8017f98:	9742      	str	r7, [sp, #264]	; 0x108
 8017f9a:	e7f4      	b.n	8017f86 <__ssvfiscanf_r+0x116>
 8017f9c:	2b70      	cmp	r3, #112	; 0x70
 8017f9e:	d04b      	beq.n	8018038 <__ssvfiscanf_r+0x1c8>
 8017fa0:	d826      	bhi.n	8017ff0 <__ssvfiscanf_r+0x180>
 8017fa2:	2b6e      	cmp	r3, #110	; 0x6e
 8017fa4:	d062      	beq.n	801806c <__ssvfiscanf_r+0x1fc>
 8017fa6:	d84c      	bhi.n	8018042 <__ssvfiscanf_r+0x1d2>
 8017fa8:	2b69      	cmp	r3, #105	; 0x69
 8017faa:	d1d7      	bne.n	8017f5c <__ssvfiscanf_r+0xec>
 8017fac:	2300      	movs	r3, #0
 8017fae:	9342      	str	r3, [sp, #264]	; 0x108
 8017fb0:	2303      	movs	r3, #3
 8017fb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8017fb4:	6863      	ldr	r3, [r4, #4]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	dd68      	ble.n	801808c <__ssvfiscanf_r+0x21c>
 8017fba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017fbc:	0659      	lsls	r1, r3, #25
 8017fbe:	d407      	bmi.n	8017fd0 <__ssvfiscanf_r+0x160>
 8017fc0:	f7ff f8bc 	bl	801713c <__locale_ctype_ptr>
 8017fc4:	6823      	ldr	r3, [r4, #0]
 8017fc6:	781a      	ldrb	r2, [r3, #0]
 8017fc8:	4410      	add	r0, r2
 8017fca:	7842      	ldrb	r2, [r0, #1]
 8017fcc:	0712      	lsls	r2, r2, #28
 8017fce:	d464      	bmi.n	801809a <__ssvfiscanf_r+0x22a>
 8017fd0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017fd2:	2b02      	cmp	r3, #2
 8017fd4:	dc73      	bgt.n	80180be <__ssvfiscanf_r+0x24e>
 8017fd6:	466b      	mov	r3, sp
 8017fd8:	4622      	mov	r2, r4
 8017fda:	a941      	add	r1, sp, #260	; 0x104
 8017fdc:	4630      	mov	r0, r6
 8017fde:	f000 f897 	bl	8018110 <_scanf_chars>
 8017fe2:	2801      	cmp	r0, #1
 8017fe4:	f000 8089 	beq.w	80180fa <__ssvfiscanf_r+0x28a>
 8017fe8:	2802      	cmp	r0, #2
 8017fea:	f47f af71 	bne.w	8017ed0 <__ssvfiscanf_r+0x60>
 8017fee:	e01d      	b.n	801802c <__ssvfiscanf_r+0x1bc>
 8017ff0:	2b75      	cmp	r3, #117	; 0x75
 8017ff2:	d0d1      	beq.n	8017f98 <__ssvfiscanf_r+0x128>
 8017ff4:	2b78      	cmp	r3, #120	; 0x78
 8017ff6:	d0c0      	beq.n	8017f7a <__ssvfiscanf_r+0x10a>
 8017ff8:	2b73      	cmp	r3, #115	; 0x73
 8017ffa:	d1af      	bne.n	8017f5c <__ssvfiscanf_r+0xec>
 8017ffc:	2302      	movs	r3, #2
 8017ffe:	e7d8      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 8018000:	6863      	ldr	r3, [r4, #4]
 8018002:	2b00      	cmp	r3, #0
 8018004:	dd0c      	ble.n	8018020 <__ssvfiscanf_r+0x1b0>
 8018006:	6823      	ldr	r3, [r4, #0]
 8018008:	781a      	ldrb	r2, [r3, #0]
 801800a:	455a      	cmp	r2, fp
 801800c:	d175      	bne.n	80180fa <__ssvfiscanf_r+0x28a>
 801800e:	3301      	adds	r3, #1
 8018010:	6862      	ldr	r2, [r4, #4]
 8018012:	6023      	str	r3, [r4, #0]
 8018014:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018016:	3a01      	subs	r2, #1
 8018018:	3301      	adds	r3, #1
 801801a:	6062      	str	r2, [r4, #4]
 801801c:	9345      	str	r3, [sp, #276]	; 0x114
 801801e:	e757      	b.n	8017ed0 <__ssvfiscanf_r+0x60>
 8018020:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018022:	4621      	mov	r1, r4
 8018024:	4630      	mov	r0, r6
 8018026:	4798      	blx	r3
 8018028:	2800      	cmp	r0, #0
 801802a:	d0ec      	beq.n	8018006 <__ssvfiscanf_r+0x196>
 801802c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801802e:	2800      	cmp	r0, #0
 8018030:	d159      	bne.n	80180e6 <__ssvfiscanf_r+0x276>
 8018032:	f04f 30ff 	mov.w	r0, #4294967295
 8018036:	e05c      	b.n	80180f2 <__ssvfiscanf_r+0x282>
 8018038:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801803a:	f042 0220 	orr.w	r2, r2, #32
 801803e:	9241      	str	r2, [sp, #260]	; 0x104
 8018040:	e79b      	b.n	8017f7a <__ssvfiscanf_r+0x10a>
 8018042:	2308      	movs	r3, #8
 8018044:	9342      	str	r3, [sp, #264]	; 0x108
 8018046:	2304      	movs	r3, #4
 8018048:	e7b3      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 801804a:	4629      	mov	r1, r5
 801804c:	4640      	mov	r0, r8
 801804e:	f000 f9c7 	bl	80183e0 <__sccl>
 8018052:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018058:	9341      	str	r3, [sp, #260]	; 0x104
 801805a:	4605      	mov	r5, r0
 801805c:	2301      	movs	r3, #1
 801805e:	e7a8      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 8018060:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018066:	9341      	str	r3, [sp, #260]	; 0x104
 8018068:	2300      	movs	r3, #0
 801806a:	e7a2      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 801806c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801806e:	06c3      	lsls	r3, r0, #27
 8018070:	f53f af2e 	bmi.w	8017ed0 <__ssvfiscanf_r+0x60>
 8018074:	9b00      	ldr	r3, [sp, #0]
 8018076:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018078:	1d19      	adds	r1, r3, #4
 801807a:	9100      	str	r1, [sp, #0]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	07c0      	lsls	r0, r0, #31
 8018080:	bf4c      	ite	mi
 8018082:	801a      	strhmi	r2, [r3, #0]
 8018084:	601a      	strpl	r2, [r3, #0]
 8018086:	e723      	b.n	8017ed0 <__ssvfiscanf_r+0x60>
 8018088:	2305      	movs	r3, #5
 801808a:	e792      	b.n	8017fb2 <__ssvfiscanf_r+0x142>
 801808c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801808e:	4621      	mov	r1, r4
 8018090:	4630      	mov	r0, r6
 8018092:	4798      	blx	r3
 8018094:	2800      	cmp	r0, #0
 8018096:	d090      	beq.n	8017fba <__ssvfiscanf_r+0x14a>
 8018098:	e7c8      	b.n	801802c <__ssvfiscanf_r+0x1bc>
 801809a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801809c:	3201      	adds	r2, #1
 801809e:	9245      	str	r2, [sp, #276]	; 0x114
 80180a0:	6862      	ldr	r2, [r4, #4]
 80180a2:	3a01      	subs	r2, #1
 80180a4:	2a00      	cmp	r2, #0
 80180a6:	6062      	str	r2, [r4, #4]
 80180a8:	dd02      	ble.n	80180b0 <__ssvfiscanf_r+0x240>
 80180aa:	3301      	adds	r3, #1
 80180ac:	6023      	str	r3, [r4, #0]
 80180ae:	e787      	b.n	8017fc0 <__ssvfiscanf_r+0x150>
 80180b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80180b2:	4621      	mov	r1, r4
 80180b4:	4630      	mov	r0, r6
 80180b6:	4798      	blx	r3
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d081      	beq.n	8017fc0 <__ssvfiscanf_r+0x150>
 80180bc:	e7b6      	b.n	801802c <__ssvfiscanf_r+0x1bc>
 80180be:	2b04      	cmp	r3, #4
 80180c0:	dc06      	bgt.n	80180d0 <__ssvfiscanf_r+0x260>
 80180c2:	466b      	mov	r3, sp
 80180c4:	4622      	mov	r2, r4
 80180c6:	a941      	add	r1, sp, #260	; 0x104
 80180c8:	4630      	mov	r0, r6
 80180ca:	f000 f885 	bl	80181d8 <_scanf_i>
 80180ce:	e788      	b.n	8017fe2 <__ssvfiscanf_r+0x172>
 80180d0:	4b0e      	ldr	r3, [pc, #56]	; (801810c <__ssvfiscanf_r+0x29c>)
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	f43f aefc 	beq.w	8017ed0 <__ssvfiscanf_r+0x60>
 80180d8:	466b      	mov	r3, sp
 80180da:	4622      	mov	r2, r4
 80180dc:	a941      	add	r1, sp, #260	; 0x104
 80180de:	4630      	mov	r0, r6
 80180e0:	f7fc fd7e 	bl	8014be0 <_scanf_float>
 80180e4:	e77d      	b.n	8017fe2 <__ssvfiscanf_r+0x172>
 80180e6:	89a3      	ldrh	r3, [r4, #12]
 80180e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80180ec:	bf18      	it	ne
 80180ee:	f04f 30ff 	movne.w	r0, #4294967295
 80180f2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80180f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80180fc:	e7f9      	b.n	80180f2 <__ssvfiscanf_r+0x282>
 80180fe:	bf00      	nop
 8018100:	08017dbd 	.word	0x08017dbd
 8018104:	08017e37 	.word	0x08017e37
 8018108:	080190b2 	.word	0x080190b2
 801810c:	08014be1 	.word	0x08014be1

08018110 <_scanf_chars>:
 8018110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018114:	4615      	mov	r5, r2
 8018116:	688a      	ldr	r2, [r1, #8]
 8018118:	4680      	mov	r8, r0
 801811a:	460c      	mov	r4, r1
 801811c:	b932      	cbnz	r2, 801812c <_scanf_chars+0x1c>
 801811e:	698a      	ldr	r2, [r1, #24]
 8018120:	2a00      	cmp	r2, #0
 8018122:	bf14      	ite	ne
 8018124:	f04f 32ff 	movne.w	r2, #4294967295
 8018128:	2201      	moveq	r2, #1
 801812a:	608a      	str	r2, [r1, #8]
 801812c:	6822      	ldr	r2, [r4, #0]
 801812e:	06d1      	lsls	r1, r2, #27
 8018130:	bf5f      	itttt	pl
 8018132:	681a      	ldrpl	r2, [r3, #0]
 8018134:	1d11      	addpl	r1, r2, #4
 8018136:	6019      	strpl	r1, [r3, #0]
 8018138:	6817      	ldrpl	r7, [r2, #0]
 801813a:	2600      	movs	r6, #0
 801813c:	69a3      	ldr	r3, [r4, #24]
 801813e:	b1db      	cbz	r3, 8018178 <_scanf_chars+0x68>
 8018140:	2b01      	cmp	r3, #1
 8018142:	d107      	bne.n	8018154 <_scanf_chars+0x44>
 8018144:	682b      	ldr	r3, [r5, #0]
 8018146:	6962      	ldr	r2, [r4, #20]
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	5cd3      	ldrb	r3, [r2, r3]
 801814c:	b9a3      	cbnz	r3, 8018178 <_scanf_chars+0x68>
 801814e:	2e00      	cmp	r6, #0
 8018150:	d132      	bne.n	80181b8 <_scanf_chars+0xa8>
 8018152:	e006      	b.n	8018162 <_scanf_chars+0x52>
 8018154:	2b02      	cmp	r3, #2
 8018156:	d007      	beq.n	8018168 <_scanf_chars+0x58>
 8018158:	2e00      	cmp	r6, #0
 801815a:	d12d      	bne.n	80181b8 <_scanf_chars+0xa8>
 801815c:	69a3      	ldr	r3, [r4, #24]
 801815e:	2b01      	cmp	r3, #1
 8018160:	d12a      	bne.n	80181b8 <_scanf_chars+0xa8>
 8018162:	2001      	movs	r0, #1
 8018164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018168:	f7fe ffe8 	bl	801713c <__locale_ctype_ptr>
 801816c:	682b      	ldr	r3, [r5, #0]
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	4418      	add	r0, r3
 8018172:	7843      	ldrb	r3, [r0, #1]
 8018174:	071b      	lsls	r3, r3, #28
 8018176:	d4ef      	bmi.n	8018158 <_scanf_chars+0x48>
 8018178:	6823      	ldr	r3, [r4, #0]
 801817a:	06da      	lsls	r2, r3, #27
 801817c:	bf5e      	ittt	pl
 801817e:	682b      	ldrpl	r3, [r5, #0]
 8018180:	781b      	ldrbpl	r3, [r3, #0]
 8018182:	703b      	strbpl	r3, [r7, #0]
 8018184:	682a      	ldr	r2, [r5, #0]
 8018186:	686b      	ldr	r3, [r5, #4]
 8018188:	f102 0201 	add.w	r2, r2, #1
 801818c:	602a      	str	r2, [r5, #0]
 801818e:	68a2      	ldr	r2, [r4, #8]
 8018190:	f103 33ff 	add.w	r3, r3, #4294967295
 8018194:	f102 32ff 	add.w	r2, r2, #4294967295
 8018198:	606b      	str	r3, [r5, #4]
 801819a:	f106 0601 	add.w	r6, r6, #1
 801819e:	bf58      	it	pl
 80181a0:	3701      	addpl	r7, #1
 80181a2:	60a2      	str	r2, [r4, #8]
 80181a4:	b142      	cbz	r2, 80181b8 <_scanf_chars+0xa8>
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	dcc8      	bgt.n	801813c <_scanf_chars+0x2c>
 80181aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80181ae:	4629      	mov	r1, r5
 80181b0:	4640      	mov	r0, r8
 80181b2:	4798      	blx	r3
 80181b4:	2800      	cmp	r0, #0
 80181b6:	d0c1      	beq.n	801813c <_scanf_chars+0x2c>
 80181b8:	6823      	ldr	r3, [r4, #0]
 80181ba:	f013 0310 	ands.w	r3, r3, #16
 80181be:	d105      	bne.n	80181cc <_scanf_chars+0xbc>
 80181c0:	68e2      	ldr	r2, [r4, #12]
 80181c2:	3201      	adds	r2, #1
 80181c4:	60e2      	str	r2, [r4, #12]
 80181c6:	69a2      	ldr	r2, [r4, #24]
 80181c8:	b102      	cbz	r2, 80181cc <_scanf_chars+0xbc>
 80181ca:	703b      	strb	r3, [r7, #0]
 80181cc:	6923      	ldr	r3, [r4, #16]
 80181ce:	441e      	add	r6, r3
 80181d0:	6126      	str	r6, [r4, #16]
 80181d2:	2000      	movs	r0, #0
 80181d4:	e7c6      	b.n	8018164 <_scanf_chars+0x54>
	...

080181d8 <_scanf_i>:
 80181d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181dc:	469a      	mov	sl, r3
 80181de:	4b74      	ldr	r3, [pc, #464]	; (80183b0 <_scanf_i+0x1d8>)
 80181e0:	460c      	mov	r4, r1
 80181e2:	4683      	mov	fp, r0
 80181e4:	4616      	mov	r6, r2
 80181e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80181ea:	b087      	sub	sp, #28
 80181ec:	ab03      	add	r3, sp, #12
 80181ee:	68a7      	ldr	r7, [r4, #8]
 80181f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80181f4:	4b6f      	ldr	r3, [pc, #444]	; (80183b4 <_scanf_i+0x1dc>)
 80181f6:	69a1      	ldr	r1, [r4, #24]
 80181f8:	4a6f      	ldr	r2, [pc, #444]	; (80183b8 <_scanf_i+0x1e0>)
 80181fa:	2903      	cmp	r1, #3
 80181fc:	bf08      	it	eq
 80181fe:	461a      	moveq	r2, r3
 8018200:	1e7b      	subs	r3, r7, #1
 8018202:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018206:	bf84      	itt	hi
 8018208:	f240 135d 	movwhi	r3, #349	; 0x15d
 801820c:	60a3      	strhi	r3, [r4, #8]
 801820e:	6823      	ldr	r3, [r4, #0]
 8018210:	9200      	str	r2, [sp, #0]
 8018212:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018216:	bf88      	it	hi
 8018218:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801821c:	f104 091c 	add.w	r9, r4, #28
 8018220:	6023      	str	r3, [r4, #0]
 8018222:	bf8c      	ite	hi
 8018224:	197f      	addhi	r7, r7, r5
 8018226:	2700      	movls	r7, #0
 8018228:	464b      	mov	r3, r9
 801822a:	f04f 0800 	mov.w	r8, #0
 801822e:	9301      	str	r3, [sp, #4]
 8018230:	6831      	ldr	r1, [r6, #0]
 8018232:	ab03      	add	r3, sp, #12
 8018234:	2202      	movs	r2, #2
 8018236:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801823a:	7809      	ldrb	r1, [r1, #0]
 801823c:	f7e7 ffe8 	bl	8000210 <memchr>
 8018240:	9b01      	ldr	r3, [sp, #4]
 8018242:	b330      	cbz	r0, 8018292 <_scanf_i+0xba>
 8018244:	f1b8 0f01 	cmp.w	r8, #1
 8018248:	d15a      	bne.n	8018300 <_scanf_i+0x128>
 801824a:	6862      	ldr	r2, [r4, #4]
 801824c:	b92a      	cbnz	r2, 801825a <_scanf_i+0x82>
 801824e:	6822      	ldr	r2, [r4, #0]
 8018250:	2108      	movs	r1, #8
 8018252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018256:	6061      	str	r1, [r4, #4]
 8018258:	6022      	str	r2, [r4, #0]
 801825a:	6822      	ldr	r2, [r4, #0]
 801825c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018260:	6022      	str	r2, [r4, #0]
 8018262:	68a2      	ldr	r2, [r4, #8]
 8018264:	1e51      	subs	r1, r2, #1
 8018266:	60a1      	str	r1, [r4, #8]
 8018268:	b19a      	cbz	r2, 8018292 <_scanf_i+0xba>
 801826a:	6832      	ldr	r2, [r6, #0]
 801826c:	1c51      	adds	r1, r2, #1
 801826e:	6031      	str	r1, [r6, #0]
 8018270:	7812      	ldrb	r2, [r2, #0]
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	1c5d      	adds	r5, r3, #1
 8018276:	6873      	ldr	r3, [r6, #4]
 8018278:	3b01      	subs	r3, #1
 801827a:	2b00      	cmp	r3, #0
 801827c:	6073      	str	r3, [r6, #4]
 801827e:	dc07      	bgt.n	8018290 <_scanf_i+0xb8>
 8018280:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018284:	4631      	mov	r1, r6
 8018286:	4658      	mov	r0, fp
 8018288:	4798      	blx	r3
 801828a:	2800      	cmp	r0, #0
 801828c:	f040 8086 	bne.w	801839c <_scanf_i+0x1c4>
 8018290:	462b      	mov	r3, r5
 8018292:	f108 0801 	add.w	r8, r8, #1
 8018296:	f1b8 0f03 	cmp.w	r8, #3
 801829a:	d1c8      	bne.n	801822e <_scanf_i+0x56>
 801829c:	6862      	ldr	r2, [r4, #4]
 801829e:	b90a      	cbnz	r2, 80182a4 <_scanf_i+0xcc>
 80182a0:	220a      	movs	r2, #10
 80182a2:	6062      	str	r2, [r4, #4]
 80182a4:	6862      	ldr	r2, [r4, #4]
 80182a6:	4945      	ldr	r1, [pc, #276]	; (80183bc <_scanf_i+0x1e4>)
 80182a8:	6960      	ldr	r0, [r4, #20]
 80182aa:	9301      	str	r3, [sp, #4]
 80182ac:	1a89      	subs	r1, r1, r2
 80182ae:	f000 f897 	bl	80183e0 <__sccl>
 80182b2:	9b01      	ldr	r3, [sp, #4]
 80182b4:	f04f 0800 	mov.w	r8, #0
 80182b8:	461d      	mov	r5, r3
 80182ba:	68a3      	ldr	r3, [r4, #8]
 80182bc:	6822      	ldr	r2, [r4, #0]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d03a      	beq.n	8018338 <_scanf_i+0x160>
 80182c2:	6831      	ldr	r1, [r6, #0]
 80182c4:	6960      	ldr	r0, [r4, #20]
 80182c6:	f891 c000 	ldrb.w	ip, [r1]
 80182ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80182ce:	2800      	cmp	r0, #0
 80182d0:	d032      	beq.n	8018338 <_scanf_i+0x160>
 80182d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80182d6:	d121      	bne.n	801831c <_scanf_i+0x144>
 80182d8:	0510      	lsls	r0, r2, #20
 80182da:	d51f      	bpl.n	801831c <_scanf_i+0x144>
 80182dc:	f108 0801 	add.w	r8, r8, #1
 80182e0:	b117      	cbz	r7, 80182e8 <_scanf_i+0x110>
 80182e2:	3301      	adds	r3, #1
 80182e4:	3f01      	subs	r7, #1
 80182e6:	60a3      	str	r3, [r4, #8]
 80182e8:	6873      	ldr	r3, [r6, #4]
 80182ea:	3b01      	subs	r3, #1
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	6073      	str	r3, [r6, #4]
 80182f0:	dd1b      	ble.n	801832a <_scanf_i+0x152>
 80182f2:	6833      	ldr	r3, [r6, #0]
 80182f4:	3301      	adds	r3, #1
 80182f6:	6033      	str	r3, [r6, #0]
 80182f8:	68a3      	ldr	r3, [r4, #8]
 80182fa:	3b01      	subs	r3, #1
 80182fc:	60a3      	str	r3, [r4, #8]
 80182fe:	e7dc      	b.n	80182ba <_scanf_i+0xe2>
 8018300:	f1b8 0f02 	cmp.w	r8, #2
 8018304:	d1ad      	bne.n	8018262 <_scanf_i+0x8a>
 8018306:	6822      	ldr	r2, [r4, #0]
 8018308:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801830c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018310:	d1bf      	bne.n	8018292 <_scanf_i+0xba>
 8018312:	2110      	movs	r1, #16
 8018314:	6061      	str	r1, [r4, #4]
 8018316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801831a:	e7a1      	b.n	8018260 <_scanf_i+0x88>
 801831c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018320:	6022      	str	r2, [r4, #0]
 8018322:	780b      	ldrb	r3, [r1, #0]
 8018324:	702b      	strb	r3, [r5, #0]
 8018326:	3501      	adds	r5, #1
 8018328:	e7de      	b.n	80182e8 <_scanf_i+0x110>
 801832a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801832e:	4631      	mov	r1, r6
 8018330:	4658      	mov	r0, fp
 8018332:	4798      	blx	r3
 8018334:	2800      	cmp	r0, #0
 8018336:	d0df      	beq.n	80182f8 <_scanf_i+0x120>
 8018338:	6823      	ldr	r3, [r4, #0]
 801833a:	05d9      	lsls	r1, r3, #23
 801833c:	d50c      	bpl.n	8018358 <_scanf_i+0x180>
 801833e:	454d      	cmp	r5, r9
 8018340:	d908      	bls.n	8018354 <_scanf_i+0x17c>
 8018342:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801834a:	4632      	mov	r2, r6
 801834c:	4658      	mov	r0, fp
 801834e:	4798      	blx	r3
 8018350:	1e6f      	subs	r7, r5, #1
 8018352:	463d      	mov	r5, r7
 8018354:	454d      	cmp	r5, r9
 8018356:	d029      	beq.n	80183ac <_scanf_i+0x1d4>
 8018358:	6822      	ldr	r2, [r4, #0]
 801835a:	f012 0210 	ands.w	r2, r2, #16
 801835e:	d113      	bne.n	8018388 <_scanf_i+0x1b0>
 8018360:	702a      	strb	r2, [r5, #0]
 8018362:	6863      	ldr	r3, [r4, #4]
 8018364:	9e00      	ldr	r6, [sp, #0]
 8018366:	4649      	mov	r1, r9
 8018368:	4658      	mov	r0, fp
 801836a:	47b0      	blx	r6
 801836c:	f8da 3000 	ldr.w	r3, [sl]
 8018370:	6821      	ldr	r1, [r4, #0]
 8018372:	1d1a      	adds	r2, r3, #4
 8018374:	f8ca 2000 	str.w	r2, [sl]
 8018378:	f011 0f20 	tst.w	r1, #32
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	d010      	beq.n	80183a2 <_scanf_i+0x1ca>
 8018380:	6018      	str	r0, [r3, #0]
 8018382:	68e3      	ldr	r3, [r4, #12]
 8018384:	3301      	adds	r3, #1
 8018386:	60e3      	str	r3, [r4, #12]
 8018388:	eba5 0509 	sub.w	r5, r5, r9
 801838c:	44a8      	add	r8, r5
 801838e:	6925      	ldr	r5, [r4, #16]
 8018390:	4445      	add	r5, r8
 8018392:	6125      	str	r5, [r4, #16]
 8018394:	2000      	movs	r0, #0
 8018396:	b007      	add	sp, #28
 8018398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801839c:	f04f 0800 	mov.w	r8, #0
 80183a0:	e7ca      	b.n	8018338 <_scanf_i+0x160>
 80183a2:	07ca      	lsls	r2, r1, #31
 80183a4:	bf4c      	ite	mi
 80183a6:	8018      	strhmi	r0, [r3, #0]
 80183a8:	6018      	strpl	r0, [r3, #0]
 80183aa:	e7ea      	b.n	8018382 <_scanf_i+0x1aa>
 80183ac:	2001      	movs	r0, #1
 80183ae:	e7f2      	b.n	8018396 <_scanf_i+0x1be>
 80183b0:	08018c0c 	.word	0x08018c0c
 80183b4:	08015df9 	.word	0x08015df9
 80183b8:	0801855d 	.word	0x0801855d
 80183bc:	080190cd 	.word	0x080190cd

080183c0 <_sbrk_r>:
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	4c06      	ldr	r4, [pc, #24]	; (80183dc <_sbrk_r+0x1c>)
 80183c4:	2300      	movs	r3, #0
 80183c6:	4605      	mov	r5, r0
 80183c8:	4608      	mov	r0, r1
 80183ca:	6023      	str	r3, [r4, #0]
 80183cc:	f7ee feae 	bl	800712c <_sbrk>
 80183d0:	1c43      	adds	r3, r0, #1
 80183d2:	d102      	bne.n	80183da <_sbrk_r+0x1a>
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	b103      	cbz	r3, 80183da <_sbrk_r+0x1a>
 80183d8:	602b      	str	r3, [r5, #0]
 80183da:	bd38      	pop	{r3, r4, r5, pc}
 80183dc:	20040e4c 	.word	0x20040e4c

080183e0 <__sccl>:
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	780b      	ldrb	r3, [r1, #0]
 80183e4:	2b5e      	cmp	r3, #94	; 0x5e
 80183e6:	bf13      	iteet	ne
 80183e8:	1c4a      	addne	r2, r1, #1
 80183ea:	1c8a      	addeq	r2, r1, #2
 80183ec:	784b      	ldrbeq	r3, [r1, #1]
 80183ee:	2100      	movne	r1, #0
 80183f0:	bf08      	it	eq
 80183f2:	2101      	moveq	r1, #1
 80183f4:	1e44      	subs	r4, r0, #1
 80183f6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80183fa:	f804 1f01 	strb.w	r1, [r4, #1]!
 80183fe:	42ac      	cmp	r4, r5
 8018400:	d1fb      	bne.n	80183fa <__sccl+0x1a>
 8018402:	b913      	cbnz	r3, 801840a <__sccl+0x2a>
 8018404:	3a01      	subs	r2, #1
 8018406:	4610      	mov	r0, r2
 8018408:	bd70      	pop	{r4, r5, r6, pc}
 801840a:	f081 0401 	eor.w	r4, r1, #1
 801840e:	54c4      	strb	r4, [r0, r3]
 8018410:	1c51      	adds	r1, r2, #1
 8018412:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018416:	2d2d      	cmp	r5, #45	; 0x2d
 8018418:	f101 36ff 	add.w	r6, r1, #4294967295
 801841c:	460a      	mov	r2, r1
 801841e:	d006      	beq.n	801842e <__sccl+0x4e>
 8018420:	2d5d      	cmp	r5, #93	; 0x5d
 8018422:	d0f0      	beq.n	8018406 <__sccl+0x26>
 8018424:	b90d      	cbnz	r5, 801842a <__sccl+0x4a>
 8018426:	4632      	mov	r2, r6
 8018428:	e7ed      	b.n	8018406 <__sccl+0x26>
 801842a:	462b      	mov	r3, r5
 801842c:	e7ef      	b.n	801840e <__sccl+0x2e>
 801842e:	780e      	ldrb	r6, [r1, #0]
 8018430:	2e5d      	cmp	r6, #93	; 0x5d
 8018432:	d0fa      	beq.n	801842a <__sccl+0x4a>
 8018434:	42b3      	cmp	r3, r6
 8018436:	dcf8      	bgt.n	801842a <__sccl+0x4a>
 8018438:	3301      	adds	r3, #1
 801843a:	429e      	cmp	r6, r3
 801843c:	54c4      	strb	r4, [r0, r3]
 801843e:	dcfb      	bgt.n	8018438 <__sccl+0x58>
 8018440:	3102      	adds	r1, #2
 8018442:	e7e6      	b.n	8018412 <__sccl+0x32>

08018444 <strncmp>:
 8018444:	b510      	push	{r4, lr}
 8018446:	b16a      	cbz	r2, 8018464 <strncmp+0x20>
 8018448:	3901      	subs	r1, #1
 801844a:	1884      	adds	r4, r0, r2
 801844c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018450:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018454:	4293      	cmp	r3, r2
 8018456:	d103      	bne.n	8018460 <strncmp+0x1c>
 8018458:	42a0      	cmp	r0, r4
 801845a:	d001      	beq.n	8018460 <strncmp+0x1c>
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1f5      	bne.n	801844c <strncmp+0x8>
 8018460:	1a98      	subs	r0, r3, r2
 8018462:	bd10      	pop	{r4, pc}
 8018464:	4610      	mov	r0, r2
 8018466:	e7fc      	b.n	8018462 <strncmp+0x1e>

08018468 <_strtoul_l.isra.0>:
 8018468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801846c:	4680      	mov	r8, r0
 801846e:	4689      	mov	r9, r1
 8018470:	4692      	mov	sl, r2
 8018472:	461e      	mov	r6, r3
 8018474:	460f      	mov	r7, r1
 8018476:	463d      	mov	r5, r7
 8018478:	9808      	ldr	r0, [sp, #32]
 801847a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801847e:	f7fe fe59 	bl	8017134 <__locale_ctype_ptr_l>
 8018482:	4420      	add	r0, r4
 8018484:	7843      	ldrb	r3, [r0, #1]
 8018486:	f013 0308 	ands.w	r3, r3, #8
 801848a:	d130      	bne.n	80184ee <_strtoul_l.isra.0+0x86>
 801848c:	2c2d      	cmp	r4, #45	; 0x2d
 801848e:	d130      	bne.n	80184f2 <_strtoul_l.isra.0+0x8a>
 8018490:	787c      	ldrb	r4, [r7, #1]
 8018492:	1cbd      	adds	r5, r7, #2
 8018494:	2101      	movs	r1, #1
 8018496:	2e00      	cmp	r6, #0
 8018498:	d05c      	beq.n	8018554 <_strtoul_l.isra.0+0xec>
 801849a:	2e10      	cmp	r6, #16
 801849c:	d109      	bne.n	80184b2 <_strtoul_l.isra.0+0x4a>
 801849e:	2c30      	cmp	r4, #48	; 0x30
 80184a0:	d107      	bne.n	80184b2 <_strtoul_l.isra.0+0x4a>
 80184a2:	782b      	ldrb	r3, [r5, #0]
 80184a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80184a8:	2b58      	cmp	r3, #88	; 0x58
 80184aa:	d14e      	bne.n	801854a <_strtoul_l.isra.0+0xe2>
 80184ac:	786c      	ldrb	r4, [r5, #1]
 80184ae:	2610      	movs	r6, #16
 80184b0:	3502      	adds	r5, #2
 80184b2:	f04f 32ff 	mov.w	r2, #4294967295
 80184b6:	2300      	movs	r3, #0
 80184b8:	fbb2 f2f6 	udiv	r2, r2, r6
 80184bc:	fb06 fc02 	mul.w	ip, r6, r2
 80184c0:	ea6f 0c0c 	mvn.w	ip, ip
 80184c4:	4618      	mov	r0, r3
 80184c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80184ca:	2f09      	cmp	r7, #9
 80184cc:	d817      	bhi.n	80184fe <_strtoul_l.isra.0+0x96>
 80184ce:	463c      	mov	r4, r7
 80184d0:	42a6      	cmp	r6, r4
 80184d2:	dd23      	ble.n	801851c <_strtoul_l.isra.0+0xb4>
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	db1e      	blt.n	8018516 <_strtoul_l.isra.0+0xae>
 80184d8:	4282      	cmp	r2, r0
 80184da:	d31c      	bcc.n	8018516 <_strtoul_l.isra.0+0xae>
 80184dc:	d101      	bne.n	80184e2 <_strtoul_l.isra.0+0x7a>
 80184de:	45a4      	cmp	ip, r4
 80184e0:	db19      	blt.n	8018516 <_strtoul_l.isra.0+0xae>
 80184e2:	fb00 4006 	mla	r0, r0, r6, r4
 80184e6:	2301      	movs	r3, #1
 80184e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184ec:	e7eb      	b.n	80184c6 <_strtoul_l.isra.0+0x5e>
 80184ee:	462f      	mov	r7, r5
 80184f0:	e7c1      	b.n	8018476 <_strtoul_l.isra.0+0xe>
 80184f2:	2c2b      	cmp	r4, #43	; 0x2b
 80184f4:	bf04      	itt	eq
 80184f6:	1cbd      	addeq	r5, r7, #2
 80184f8:	787c      	ldrbeq	r4, [r7, #1]
 80184fa:	4619      	mov	r1, r3
 80184fc:	e7cb      	b.n	8018496 <_strtoul_l.isra.0+0x2e>
 80184fe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018502:	2f19      	cmp	r7, #25
 8018504:	d801      	bhi.n	801850a <_strtoul_l.isra.0+0xa2>
 8018506:	3c37      	subs	r4, #55	; 0x37
 8018508:	e7e2      	b.n	80184d0 <_strtoul_l.isra.0+0x68>
 801850a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801850e:	2f19      	cmp	r7, #25
 8018510:	d804      	bhi.n	801851c <_strtoul_l.isra.0+0xb4>
 8018512:	3c57      	subs	r4, #87	; 0x57
 8018514:	e7dc      	b.n	80184d0 <_strtoul_l.isra.0+0x68>
 8018516:	f04f 33ff 	mov.w	r3, #4294967295
 801851a:	e7e5      	b.n	80184e8 <_strtoul_l.isra.0+0x80>
 801851c:	2b00      	cmp	r3, #0
 801851e:	da09      	bge.n	8018534 <_strtoul_l.isra.0+0xcc>
 8018520:	2322      	movs	r3, #34	; 0x22
 8018522:	f8c8 3000 	str.w	r3, [r8]
 8018526:	f04f 30ff 	mov.w	r0, #4294967295
 801852a:	f1ba 0f00 	cmp.w	sl, #0
 801852e:	d107      	bne.n	8018540 <_strtoul_l.isra.0+0xd8>
 8018530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018534:	b101      	cbz	r1, 8018538 <_strtoul_l.isra.0+0xd0>
 8018536:	4240      	negs	r0, r0
 8018538:	f1ba 0f00 	cmp.w	sl, #0
 801853c:	d0f8      	beq.n	8018530 <_strtoul_l.isra.0+0xc8>
 801853e:	b10b      	cbz	r3, 8018544 <_strtoul_l.isra.0+0xdc>
 8018540:	f105 39ff 	add.w	r9, r5, #4294967295
 8018544:	f8ca 9000 	str.w	r9, [sl]
 8018548:	e7f2      	b.n	8018530 <_strtoul_l.isra.0+0xc8>
 801854a:	2430      	movs	r4, #48	; 0x30
 801854c:	2e00      	cmp	r6, #0
 801854e:	d1b0      	bne.n	80184b2 <_strtoul_l.isra.0+0x4a>
 8018550:	2608      	movs	r6, #8
 8018552:	e7ae      	b.n	80184b2 <_strtoul_l.isra.0+0x4a>
 8018554:	2c30      	cmp	r4, #48	; 0x30
 8018556:	d0a4      	beq.n	80184a2 <_strtoul_l.isra.0+0x3a>
 8018558:	260a      	movs	r6, #10
 801855a:	e7aa      	b.n	80184b2 <_strtoul_l.isra.0+0x4a>

0801855c <_strtoul_r>:
 801855c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801855e:	4c06      	ldr	r4, [pc, #24]	; (8018578 <_strtoul_r+0x1c>)
 8018560:	4d06      	ldr	r5, [pc, #24]	; (801857c <_strtoul_r+0x20>)
 8018562:	6824      	ldr	r4, [r4, #0]
 8018564:	6a24      	ldr	r4, [r4, #32]
 8018566:	2c00      	cmp	r4, #0
 8018568:	bf08      	it	eq
 801856a:	462c      	moveq	r4, r5
 801856c:	9400      	str	r4, [sp, #0]
 801856e:	f7ff ff7b 	bl	8018468 <_strtoul_l.isra.0>
 8018572:	b003      	add	sp, #12
 8018574:	bd30      	pop	{r4, r5, pc}
 8018576:	bf00      	nop
 8018578:	2000000c 	.word	0x2000000c
 801857c:	20000070 	.word	0x20000070

08018580 <__submore>:
 8018580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018584:	460c      	mov	r4, r1
 8018586:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801858c:	4299      	cmp	r1, r3
 801858e:	d11d      	bne.n	80185cc <__submore+0x4c>
 8018590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018594:	f7ff fa66 	bl	8017a64 <_malloc_r>
 8018598:	b918      	cbnz	r0, 80185a2 <__submore+0x22>
 801859a:	f04f 30ff 	mov.w	r0, #4294967295
 801859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80185a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80185a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80185ac:	6360      	str	r0, [r4, #52]	; 0x34
 80185ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80185b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80185b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80185ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80185be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80185c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80185c6:	6020      	str	r0, [r4, #0]
 80185c8:	2000      	movs	r0, #0
 80185ca:	e7e8      	b.n	801859e <__submore+0x1e>
 80185cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80185ce:	0077      	lsls	r7, r6, #1
 80185d0:	463a      	mov	r2, r7
 80185d2:	f000 f837 	bl	8018644 <_realloc_r>
 80185d6:	4605      	mov	r5, r0
 80185d8:	2800      	cmp	r0, #0
 80185da:	d0de      	beq.n	801859a <__submore+0x1a>
 80185dc:	eb00 0806 	add.w	r8, r0, r6
 80185e0:	4601      	mov	r1, r0
 80185e2:	4632      	mov	r2, r6
 80185e4:	4640      	mov	r0, r8
 80185e6:	f7fb fe8b 	bl	8014300 <memcpy>
 80185ea:	f8c4 8000 	str.w	r8, [r4]
 80185ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80185f2:	e7e9      	b.n	80185c8 <__submore+0x48>

080185f4 <__ascii_wctomb>:
 80185f4:	b149      	cbz	r1, 801860a <__ascii_wctomb+0x16>
 80185f6:	2aff      	cmp	r2, #255	; 0xff
 80185f8:	bf85      	ittet	hi
 80185fa:	238a      	movhi	r3, #138	; 0x8a
 80185fc:	6003      	strhi	r3, [r0, #0]
 80185fe:	700a      	strbls	r2, [r1, #0]
 8018600:	f04f 30ff 	movhi.w	r0, #4294967295
 8018604:	bf98      	it	ls
 8018606:	2001      	movls	r0, #1
 8018608:	4770      	bx	lr
 801860a:	4608      	mov	r0, r1
 801860c:	4770      	bx	lr

0801860e <memmove>:
 801860e:	4288      	cmp	r0, r1
 8018610:	b510      	push	{r4, lr}
 8018612:	eb01 0302 	add.w	r3, r1, r2
 8018616:	d807      	bhi.n	8018628 <memmove+0x1a>
 8018618:	1e42      	subs	r2, r0, #1
 801861a:	4299      	cmp	r1, r3
 801861c:	d00a      	beq.n	8018634 <memmove+0x26>
 801861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018622:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018626:	e7f8      	b.n	801861a <memmove+0xc>
 8018628:	4283      	cmp	r3, r0
 801862a:	d9f5      	bls.n	8018618 <memmove+0xa>
 801862c:	1881      	adds	r1, r0, r2
 801862e:	1ad2      	subs	r2, r2, r3
 8018630:	42d3      	cmn	r3, r2
 8018632:	d100      	bne.n	8018636 <memmove+0x28>
 8018634:	bd10      	pop	{r4, pc}
 8018636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801863a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801863e:	e7f7      	b.n	8018630 <memmove+0x22>

08018640 <__malloc_lock>:
 8018640:	4770      	bx	lr

08018642 <__malloc_unlock>:
 8018642:	4770      	bx	lr

08018644 <_realloc_r>:
 8018644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018646:	4607      	mov	r7, r0
 8018648:	4614      	mov	r4, r2
 801864a:	460e      	mov	r6, r1
 801864c:	b921      	cbnz	r1, 8018658 <_realloc_r+0x14>
 801864e:	4611      	mov	r1, r2
 8018650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018654:	f7ff ba06 	b.w	8017a64 <_malloc_r>
 8018658:	b922      	cbnz	r2, 8018664 <_realloc_r+0x20>
 801865a:	f7ff f9b5 	bl	80179c8 <_free_r>
 801865e:	4625      	mov	r5, r4
 8018660:	4628      	mov	r0, r5
 8018662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018664:	f000 f814 	bl	8018690 <_malloc_usable_size_r>
 8018668:	42a0      	cmp	r0, r4
 801866a:	d20f      	bcs.n	801868c <_realloc_r+0x48>
 801866c:	4621      	mov	r1, r4
 801866e:	4638      	mov	r0, r7
 8018670:	f7ff f9f8 	bl	8017a64 <_malloc_r>
 8018674:	4605      	mov	r5, r0
 8018676:	2800      	cmp	r0, #0
 8018678:	d0f2      	beq.n	8018660 <_realloc_r+0x1c>
 801867a:	4631      	mov	r1, r6
 801867c:	4622      	mov	r2, r4
 801867e:	f7fb fe3f 	bl	8014300 <memcpy>
 8018682:	4631      	mov	r1, r6
 8018684:	4638      	mov	r0, r7
 8018686:	f7ff f99f 	bl	80179c8 <_free_r>
 801868a:	e7e9      	b.n	8018660 <_realloc_r+0x1c>
 801868c:	4635      	mov	r5, r6
 801868e:	e7e7      	b.n	8018660 <_realloc_r+0x1c>

08018690 <_malloc_usable_size_r>:
 8018690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018694:	1f18      	subs	r0, r3, #4
 8018696:	2b00      	cmp	r3, #0
 8018698:	bfbc      	itt	lt
 801869a:	580b      	ldrlt	r3, [r1, r0]
 801869c:	18c0      	addlt	r0, r0, r3
 801869e:	4770      	bx	lr

080186a0 <_init>:
 80186a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186a2:	bf00      	nop
 80186a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186a6:	bc08      	pop	{r3}
 80186a8:	469e      	mov	lr, r3
 80186aa:	4770      	bx	lr

080186ac <_fini>:
 80186ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ae:	bf00      	nop
 80186b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186b2:	bc08      	pop	{r3}
 80186b4:	469e      	mov	lr, r3
 80186b6:	4770      	bx	lr
